// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"node_modules/parcel-bundler/src/builtins/bundle-url.js":[function(require,module,exports) {
var bundleURL = null;

function getBundleURLCached() {
  if (!bundleURL) {
    bundleURL = getBundleURL();
  }

  return bundleURL;
}

function getBundleURL() {
  // Attempt to find the URL of the current script and use that as the base URL
  try {
    throw new Error();
  } catch (err) {
    var matches = ('' + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\/\/[^)\n]+/g);

    if (matches) {
      return getBaseURL(matches[0]);
    }
  }

  return '/';
}

function getBaseURL(url) {
  return ('' + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\/\/.+)\/[^/]+$/, '$1') + '/';
}

exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
},{}],"node_modules/parcel-bundler/src/builtins/css-loader.js":[function(require,module,exports) {
var bundle = require('./bundle-url');

function updateLink(link) {
  var newLink = link.cloneNode();

  newLink.onload = function () {
    link.remove();
  };

  newLink.href = link.href.split('?')[0] + '?' + Date.now();
  link.parentNode.insertBefore(newLink, link.nextSibling);
}

var cssTimeout = null;

function reloadCSS() {
  if (cssTimeout) {
    return;
  }

  cssTimeout = setTimeout(function () {
    var links = document.querySelectorAll('link[rel="stylesheet"]');

    for (var i = 0; i < links.length; i++) {
      if (bundle.getBaseURL(links[i].href) === bundle.getBundleURL()) {
        updateLink(links[i]);
      }
    }

    cssTimeout = null;
  }, 50);
}

module.exports = reloadCSS;
},{"./bundle-url":"node_modules/parcel-bundler/src/builtins/bundle-url.js"}],"src/globalStyle.css":[function(require,module,exports) {
var reloadCSS = require('_css_loader');

module.hot.dispose(reloadCSS);
module.hot.accept(reloadCSS);
},{"_css_loader":"node_modules/parcel-bundler/src/builtins/css-loader.js"}],"node_modules/@babel/runtime/helpers/classCallCheck.js":[function(require,module,exports) {
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;
},{}],"node_modules/@babel/runtime/helpers/assertThisInitialized.js":[function(require,module,exports) {
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

module.exports = _assertThisInitialized;
},{}],"node_modules/@babel/runtime/helpers/typeof.js":[function(require,module,exports) {
function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;
},{}],"node_modules/@babel/runtime/helpers/possibleConstructorReturn.js":[function(require,module,exports) {
var _typeof = require("../helpers/typeof");

var assertThisInitialized = require("./assertThisInitialized");

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return assertThisInitialized(self);
}

module.exports = _possibleConstructorReturn;
},{"../helpers/typeof":"node_modules/@babel/runtime/helpers/typeof.js","./assertThisInitialized":"node_modules/@babel/runtime/helpers/assertThisInitialized.js"}],"node_modules/@babel/runtime/helpers/getPrototypeOf.js":[function(require,module,exports) {
function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;
},{}],"node_modules/@babel/runtime/helpers/setPrototypeOf.js":[function(require,module,exports) {
function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;
},{}],"node_modules/@babel/runtime/helpers/inherits.js":[function(require,module,exports) {
var setPrototypeOf = require("./setPrototypeOf");

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

module.exports = _inherits;
},{"./setPrototypeOf":"node_modules/@babel/runtime/helpers/setPrototypeOf.js"}],"node_modules/svelte/internal/index.mjs":[function(require,module,exports) {
var global = arguments[3];
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.action_destroyer = action_destroyer;
exports.add_attribute = add_attribute;
exports.add_classes = add_classes;
exports.add_flush_callback = add_flush_callback;
exports.add_location = add_location;
exports.add_render_callback = add_render_callback;
exports.add_resize_listener = add_resize_listener;
exports.add_transform = add_transform;
exports.afterUpdate = afterUpdate;
exports.append = append;
exports.append_dev = append_dev;
exports.assign = assign;
exports.attr = attr;
exports.attr_dev = attr_dev;
exports.beforeUpdate = beforeUpdate;
exports.bind = bind;
exports.blank_object = blank_object;
exports.bubble = bubble;
exports.check_outros = check_outros;
exports.children = children;
exports.claim_component = claim_component;
exports.claim_element = claim_element;
exports.claim_space = claim_space;
exports.claim_text = claim_text;
exports.clear_loops = clear_loops;
exports.component_subscribe = component_subscribe;
exports.compute_rest_props = compute_rest_props;
exports.createEventDispatcher = createEventDispatcher;
exports.create_animation = create_animation;
exports.create_bidirectional_transition = create_bidirectional_transition;
exports.create_component = create_component;
exports.create_in_transition = create_in_transition;
exports.create_out_transition = create_out_transition;
exports.create_slot = create_slot;
exports.create_ssr_component = create_ssr_component;
exports.custom_event = custom_event;
exports.dataset_dev = dataset_dev;
exports.debug = debug;
exports.destroy_block = destroy_block;
exports.destroy_component = destroy_component;
exports.destroy_each = destroy_each;
exports.detach = detach;
exports.detach_after_dev = detach_after_dev;
exports.detach_before_dev = detach_before_dev;
exports.detach_between_dev = detach_between_dev;
exports.detach_dev = detach_dev;
exports.dispatch_dev = dispatch_dev;
exports.each = each;
exports.element = element;
exports.element_is = element_is;
exports.empty = empty;
exports.escape = escape;
exports.exclude_internal_props = exclude_internal_props;
exports.fix_and_destroy_block = fix_and_destroy_block;
exports.fix_and_outro_and_destroy_block = fix_and_outro_and_destroy_block;
exports.fix_position = fix_position;
exports.flush = flush;
exports.getContext = getContext;
exports.get_binding_group_value = get_binding_group_value;
exports.get_current_component = get_current_component;
exports.get_slot_changes = get_slot_changes;
exports.get_slot_context = get_slot_context;
exports.get_spread_object = get_spread_object;
exports.get_spread_update = get_spread_update;
exports.get_store_value = get_store_value;
exports.group_outros = group_outros;
exports.handle_promise = handle_promise;
exports.init = init;
exports.insert = insert;
exports.insert_dev = insert_dev;
exports.is_function = is_function;
exports.is_promise = is_promise;
exports.listen = listen;
exports.listen_dev = listen_dev;
exports.loop = loop;
exports.loop_guard = loop_guard;
exports.mount_component = mount_component;
exports.noop = noop;
exports.not_equal = not_equal;
exports.null_to_empty = null_to_empty;
exports.object_without_properties = object_without_properties;
exports.onDestroy = onDestroy;
exports.onMount = onMount;
exports.once = once;
exports.outro_and_destroy_block = outro_and_destroy_block;
exports.prevent_default = prevent_default;
exports.prop_dev = prop_dev;
exports.query_selector_all = query_selector_all;
exports.run = run;
exports.run_all = run_all;
exports.safe_not_equal = safe_not_equal;
exports.schedule_update = schedule_update;
exports.select_multiple_value = select_multiple_value;
exports.select_option = select_option;
exports.select_options = select_options;
exports.select_value = select_value;
exports.self = self;
exports.setContext = setContext;
exports.set_attributes = set_attributes;
exports.set_current_component = set_current_component;
exports.set_custom_element_data = set_custom_element_data;
exports.set_data = set_data;
exports.set_data_dev = set_data_dev;
exports.set_input_type = set_input_type;
exports.set_input_value = set_input_value;
exports.set_now = set_now;
exports.set_raf = set_raf;
exports.set_store_value = set_store_value;
exports.set_style = set_style;
exports.set_svg_attributes = set_svg_attributes;
exports.space = space;
exports.spread = spread;
exports.stop_propagation = stop_propagation;
exports.subscribe = subscribe;
exports.svg_element = svg_element;
exports.text = text;
exports.tick = tick;
exports.time_ranges_to_array = time_ranges_to_array;
exports.to_number = to_number;
exports.toggle_class = toggle_class;
exports.transition_in = transition_in;
exports.transition_out = transition_out;
exports.update_keyed_each = update_keyed_each;
exports.validate_component = validate_component;
exports.validate_each_argument = validate_each_argument;
exports.validate_each_keys = validate_each_keys;
exports.validate_slots = validate_slots;
exports.validate_store = validate_store;
exports.xlink_attr = xlink_attr;
exports.raf = exports.now = exports.missing_component = exports.is_client = exports.invalid_attribute_name_character = exports.intros = exports.identity = exports.has_prop = exports.globals = exports.escaped = exports.dirty_components = exports.current_component = exports.binding_callbacks = exports.SvelteElement = exports.SvelteComponentDev = exports.SvelteComponent = exports.HtmlTag = void 0;

function noop() {}

const identity = x => x;

exports.identity = identity;

function assign(tar, src) {
  // @ts-ignore
  for (const k in src) tar[k] = src[k];

  return tar;
}

function is_promise(value) {
  return value && typeof value === 'object' && typeof value.then === 'function';
}

function add_location(element, file, line, column, char) {
  element.__svelte_meta = {
    loc: {
      file,
      line,
      column,
      char
    }
  };
}

function run(fn) {
  return fn();
}

function blank_object() {
  return Object.create(null);
}

function run_all(fns) {
  fns.forEach(run);
}

function is_function(thing) {
  return typeof thing === 'function';
}

function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || a && typeof a === 'object' || typeof a === 'function';
}

function not_equal(a, b) {
  return a != a ? b == b : a !== b;
}

function validate_store(store, name) {
  if (store != null && typeof store.subscribe !== 'function') {
    throw new Error(`'${name}' is not a store with a 'subscribe' method`);
  }
}

function subscribe(store, ...callbacks) {
  if (store == null) {
    return noop;
  }

  const unsub = store.subscribe(...callbacks);
  return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}

function get_store_value(store) {
  let value;
  subscribe(store, _ => value = _)();
  return value;
}

function component_subscribe(component, store, callback) {
  component.$$.on_destroy.push(subscribe(store, callback));
}

function create_slot(definition, ctx, $$scope, fn) {
  if (definition) {
    const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
    return definition[0](slot_ctx);
  }
}

function get_slot_context(definition, ctx, $$scope, fn) {
  return definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;
}

function get_slot_changes(definition, $$scope, dirty, fn) {
  if (definition[2] && fn) {
    const lets = definition[2](fn(dirty));

    if ($$scope.dirty === undefined) {
      return lets;
    }

    if (typeof lets === 'object') {
      const merged = [];
      const len = Math.max($$scope.dirty.length, lets.length);

      for (let i = 0; i < len; i += 1) {
        merged[i] = $$scope.dirty[i] | lets[i];
      }

      return merged;
    }

    return $$scope.dirty | lets;
  }

  return $$scope.dirty;
}

function exclude_internal_props(props) {
  const result = {};

  for (const k in props) if (k[0] !== '$') result[k] = props[k];

  return result;
}

function compute_rest_props(props, keys) {
  const rest = {};
  keys = new Set(keys);

  for (const k in props) if (!keys.has(k) && k[0] !== '$') rest[k] = props[k];

  return rest;
}

function once(fn) {
  let ran = false;
  return function (...args) {
    if (ran) return;
    ran = true;
    fn.call(this, ...args);
  };
}

function null_to_empty(value) {
  return value == null ? '' : value;
}

function set_store_value(store, ret, value = ret) {
  store.set(value);
  return ret;
}

const has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);

exports.has_prop = has_prop;

function action_destroyer(action_result) {
  return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}

const is_client = typeof window !== 'undefined';
exports.is_client = is_client;
let now = is_client ? () => window.performance.now() : () => Date.now();
exports.now = now;
let raf = is_client ? cb => requestAnimationFrame(cb) : noop; // used internally for testing

exports.raf = raf;

function set_now(fn) {
  exports.now = now = fn;
}

function set_raf(fn) {
  exports.raf = raf = fn;
}

const tasks = new Set();

function run_tasks(now) {
  tasks.forEach(task => {
    if (!task.c(now)) {
      tasks.delete(task);
      task.f();
    }
  });
  if (tasks.size !== 0) raf(run_tasks);
}
/**
 * For testing purposes only!
 */


function clear_loops() {
  tasks.clear();
}
/**
 * Creates a new task that runs on each raf frame
 * until it returns a falsy value or is aborted
 */


function loop(callback) {
  let task;
  if (tasks.size === 0) raf(run_tasks);
  return {
    promise: new Promise(fulfill => {
      tasks.add(task = {
        c: callback,
        f: fulfill
      });
    }),

    abort() {
      tasks.delete(task);
    }

  };
}

function append(target, node) {
  target.appendChild(node);
}

function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}

function detach(node) {
  node.parentNode.removeChild(node);
}

function destroy_each(iterations, detaching) {
  for (let i = 0; i < iterations.length; i += 1) {
    if (iterations[i]) iterations[i].d(detaching);
  }
}

function element(name) {
  return document.createElement(name);
}

function element_is(name, is) {
  return document.createElement(name, {
    is
  });
}

function object_without_properties(obj, exclude) {
  const target = {};

  for (const k in obj) {
    if (has_prop(obj, k) // @ts-ignore
    && exclude.indexOf(k) === -1) {
      // @ts-ignore
      target[k] = obj[k];
    }
  }

  return target;
}

function svg_element(name) {
  return document.createElementNS('http://www.w3.org/2000/svg', name);
}

function text(data) {
  return document.createTextNode(data);
}

function space() {
  return text(' ');
}

function empty() {
  return text('');
}

function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return () => node.removeEventListener(event, handler, options);
}

function prevent_default(fn) {
  return function (event) {
    event.preventDefault(); // @ts-ignore

    return fn.call(this, event);
  };
}

function stop_propagation(fn) {
  return function (event) {
    event.stopPropagation(); // @ts-ignore

    return fn.call(this, event);
  };
}

function self(fn) {
  return function (event) {
    // @ts-ignore
    if (event.target === this) fn.call(this, event);
  };
}

function attr(node, attribute, value) {
  if (value == null) node.removeAttribute(attribute);else if (node.getAttribute(attribute) !== value) node.setAttribute(attribute, value);
}

function set_attributes(node, attributes) {
  // @ts-ignore
  const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);

  for (const key in attributes) {
    if (attributes[key] == null) {
      node.removeAttribute(key);
    } else if (key === 'style') {
      node.style.cssText = attributes[key];
    } else if (key === '__value' || descriptors[key] && descriptors[key].set) {
      node[key] = attributes[key];
    } else {
      attr(node, key, attributes[key]);
    }
  }
}

function set_svg_attributes(node, attributes) {
  for (const key in attributes) {
    attr(node, key, attributes[key]);
  }
}

function set_custom_element_data(node, prop, value) {
  if (prop in node) {
    node[prop] = value;
  } else {
    attr(node, prop, value);
  }
}

function xlink_attr(node, attribute, value) {
  node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);
}

function get_binding_group_value(group) {
  const value = [];

  for (let i = 0; i < group.length; i += 1) {
    if (group[i].checked) value.push(group[i].__value);
  }

  return value;
}

function to_number(value) {
  return value === '' ? undefined : +value;
}

function time_ranges_to_array(ranges) {
  const array = [];

  for (let i = 0; i < ranges.length; i += 1) {
    array.push({
      start: ranges.start(i),
      end: ranges.end(i)
    });
  }

  return array;
}

function children(element) {
  return Array.from(element.childNodes);
}

function claim_element(nodes, name, attributes, svg) {
  for (let i = 0; i < nodes.length; i += 1) {
    const node = nodes[i];

    if (node.nodeName === name) {
      let j = 0;

      while (j < node.attributes.length) {
        const attribute = node.attributes[j];

        if (attributes[attribute.name]) {
          j++;
        } else {
          node.removeAttribute(attribute.name);
        }
      }

      return nodes.splice(i, 1)[0];
    }
  }

  return svg ? svg_element(name) : element(name);
}

function claim_text(nodes, data) {
  for (let i = 0; i < nodes.length; i += 1) {
    const node = nodes[i];

    if (node.nodeType === 3) {
      node.data = '' + data;
      return nodes.splice(i, 1)[0];
    }
  }

  return text(data);
}

function claim_space(nodes) {
  return claim_text(nodes, ' ');
}

function set_data(text, data) {
  data = '' + data;
  if (text.data !== data) text.data = data;
}

function set_input_value(input, value) {
  if (value != null || input.value) {
    input.value = value;
  }
}

function set_input_type(input, type) {
  try {
    input.type = type;
  } catch (e) {// do nothing
  }
}

function set_style(node, key, value, important) {
  node.style.setProperty(key, value, important ? 'important' : '');
}

function select_option(select, value) {
  for (let i = 0; i < select.options.length; i += 1) {
    const option = select.options[i];

    if (option.__value === value) {
      option.selected = true;
      return;
    }
  }
}

function select_options(select, value) {
  for (let i = 0; i < select.options.length; i += 1) {
    const option = select.options[i];
    option.selected = ~value.indexOf(option.__value);
  }
}

function select_value(select) {
  const selected_option = select.querySelector(':checked') || select.options[0];
  return selected_option && selected_option.__value;
}

function select_multiple_value(select) {
  return [].map.call(select.querySelectorAll(':checked'), option => option.__value);
}

function add_resize_listener(element, fn) {
  if (getComputedStyle(element).position === 'static') {
    element.style.position = 'relative';
  }

  const object = document.createElement('object');
  object.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; pointer-events: none; z-index: -1;');
  object.setAttribute('aria-hidden', 'true');
  object.type = 'text/html';
  object.tabIndex = -1;
  let win;

  object.onload = () => {
    win = object.contentDocument.defaultView;
    win.addEventListener('resize', fn);
  };

  if (/Trident/.test(navigator.userAgent)) {
    element.appendChild(object);
    object.data = 'about:blank';
  } else {
    object.data = 'about:blank';
    element.appendChild(object);
  }

  return {
    cancel: () => {
      win && win.removeEventListener && win.removeEventListener('resize', fn);
      element.removeChild(object);
    }
  };
}

function toggle_class(element, name, toggle) {
  element.classList[toggle ? 'add' : 'remove'](name);
}

function custom_event(type, detail) {
  const e = document.createEvent('CustomEvent');
  e.initCustomEvent(type, false, false, detail);
  return e;
}

function query_selector_all(selector, parent = document.body) {
  return Array.from(parent.querySelectorAll(selector));
}

class HtmlTag {
  constructor(html, anchor = null) {
    this.e = element('div');
    this.a = anchor;
    this.u(html);
  }

  m(target, anchor = null) {
    for (let i = 0; i < this.n.length; i += 1) {
      insert(target, this.n[i], anchor);
    }

    this.t = target;
  }

  u(html) {
    this.e.innerHTML = html;
    this.n = Array.from(this.e.childNodes);
  }

  p(html) {
    this.d();
    this.u(html);
    this.m(this.t, this.a);
  }

  d() {
    this.n.forEach(detach);
  }

}

exports.HtmlTag = HtmlTag;
const active_docs = new Set();
let active = 0; // https://github.com/darkskyapp/string-hash/blob/master/index.js

function hash(str) {
  let hash = 5381;
  let i = str.length;

  while (i--) hash = (hash << 5) - hash ^ str.charCodeAt(i);

  return hash >>> 0;
}

function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
  const step = 16.666 / duration;
  let keyframes = '{\n';

  for (let p = 0; p <= 1; p += step) {
    const t = a + (b - a) * ease(p);
    keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
  }

  const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
  const name = `__svelte_${hash(rule)}_${uid}`;
  const doc = node.ownerDocument;
  active_docs.add(doc);
  const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);
  const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});

  if (!current_rules[name]) {
    current_rules[name] = true;
    stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
  }

  const animation = node.style.animation || '';
  node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;
  active += 1;
  return name;
}

function delete_rule(node, name) {
  const previous = (node.style.animation || '').split(', ');
  const next = previous.filter(name ? anim => anim.indexOf(name) < 0 // remove specific animation
  : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
  );
  const deleted = previous.length - next.length;

  if (deleted) {
    node.style.animation = next.join(', ');
    active -= deleted;
    if (!active) clear_rules();
  }
}

function clear_rules() {
  raf(() => {
    if (active) return;
    active_docs.forEach(doc => {
      const stylesheet = doc.__svelte_stylesheet;
      let i = stylesheet.cssRules.length;

      while (i--) stylesheet.deleteRule(i);

      doc.__svelte_rules = {};
    });
    active_docs.clear();
  });
}

function create_animation(node, from, fn, params) {
  if (!from) return noop;
  const to = node.getBoundingClientRect();
  if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom) return noop;
  const {
    delay = 0,
    duration = 300,
    easing = identity,
    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?
    start: start_time = now() + delay,
    // @ts-ignore todo:
    end = start_time + duration,
    tick = noop,
    css
  } = fn(node, {
    from,
    to
  }, params);
  let running = true;
  let started = false;
  let name;

  function start() {
    if (css) {
      name = create_rule(node, 0, 1, duration, delay, easing, css);
    }

    if (!delay) {
      started = true;
    }
  }

  function stop() {
    if (css) delete_rule(node, name);
    running = false;
  }

  loop(now => {
    if (!started && now >= start_time) {
      started = true;
    }

    if (started && now >= end) {
      tick(1, 0);
      stop();
    }

    if (!running) {
      return false;
    }

    if (started) {
      const p = now - start_time;
      const t = 0 + 1 * easing(p / duration);
      tick(t, 1 - t);
    }

    return true;
  });
  start();
  tick(0, 1);
  return stop;
}

function fix_position(node) {
  const style = getComputedStyle(node);

  if (style.position !== 'absolute' && style.position !== 'fixed') {
    const {
      width,
      height
    } = style;
    const a = node.getBoundingClientRect();
    node.style.position = 'absolute';
    node.style.width = width;
    node.style.height = height;
    add_transform(node, a);
  }
}

function add_transform(node, a) {
  const b = node.getBoundingClientRect();

  if (a.left !== b.left || a.top !== b.top) {
    const style = getComputedStyle(node);
    const transform = style.transform === 'none' ? '' : style.transform;
    node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;
  }
}

let current_component;
exports.current_component = current_component;

function set_current_component(component) {
  exports.current_component = current_component = component;
}

function get_current_component() {
  if (!current_component) throw new Error(`Function called outside component initialization`);
  return current_component;
}

function beforeUpdate(fn) {
  get_current_component().$$.before_update.push(fn);
}

function onMount(fn) {
  get_current_component().$$.on_mount.push(fn);
}

function afterUpdate(fn) {
  get_current_component().$$.after_update.push(fn);
}

function onDestroy(fn) {
  get_current_component().$$.on_destroy.push(fn);
}

function createEventDispatcher() {
  const component = get_current_component();
  return (type, detail) => {
    const callbacks = component.$$.callbacks[type];

    if (callbacks) {
      // TODO are there situations where events could be dispatched
      // in a server (non-DOM) environment?
      const event = custom_event(type, detail);
      callbacks.slice().forEach(fn => {
        fn.call(component, event);
      });
    }
  };
}

function setContext(key, context) {
  get_current_component().$$.context.set(key, context);
}

function getContext(key) {
  return get_current_component().$$.context.get(key);
} // TODO figure out if we still want to support
// shorthand events, or if we want to implement
// a real bubbling mechanism


function bubble(component, event) {
  const callbacks = component.$$.callbacks[event.type];

  if (callbacks) {
    callbacks.slice().forEach(fn => fn(event));
  }
}

const dirty_components = [];
exports.dirty_components = dirty_components;
const intros = {
  enabled: false
};
exports.intros = intros;
const binding_callbacks = [];
exports.binding_callbacks = binding_callbacks;
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;

function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}

function tick() {
  schedule_update();
  return resolved_promise;
}

function add_render_callback(fn) {
  render_callbacks.push(fn);
}

function add_flush_callback(fn) {
  flush_callbacks.push(fn);
}

let flushing = false;
const seen_callbacks = new Set();

function flush() {
  if (flushing) return;
  flushing = true;

  do {
    // first, call beforeUpdate functions
    // and update components
    for (let i = 0; i < dirty_components.length; i += 1) {
      const component = dirty_components[i];
      set_current_component(component);
      update(component.$$);
    }

    dirty_components.length = 0;

    while (binding_callbacks.length) binding_callbacks.pop()(); // then, once components are updated, call
    // afterUpdate functions. This may cause
    // subsequent updates...


    for (let i = 0; i < render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];

      if (!seen_callbacks.has(callback)) {
        // ...so guard against infinite loops
        seen_callbacks.add(callback);
        callback();
      }
    }

    render_callbacks.length = 0;
  } while (dirty_components.length);

  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }

  update_scheduled = false;
  flushing = false;
  seen_callbacks.clear();
}

function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}

let promise;

function wait() {
  if (!promise) {
    promise = Promise.resolve();
    promise.then(() => {
      promise = null;
    });
  }

  return promise;
}

function dispatch(node, direction, kind) {
  node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
}

const outroing = new Set();
let outros;

function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros // parent group

  };
}

function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }

  outros = outros.p;
}

function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}

function transition_out(block, local, detach, callback) {
  if (block && block.o) {
    if (outroing.has(block)) return;
    outroing.add(block);
    outros.c.push(() => {
      outroing.delete(block);

      if (callback) {
        if (detach) block.d(1);
        callback();
      }
    });
    block.o(local);
  }
}

const null_transition = {
  duration: 0
};

function create_in_transition(node, fn, params) {
  let config = fn(node, params);
  let running = false;
  let animation_name;
  let task;
  let uid = 0;

  function cleanup() {
    if (animation_name) delete_rule(node, animation_name);
  }

  function go() {
    const {
      delay = 0,
      duration = 300,
      easing = identity,
      tick = noop,
      css
    } = config || null_transition;
    if (css) animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
    tick(0, 1);
    const start_time = now() + delay;
    const end_time = start_time + duration;
    if (task) task.abort();
    running = true;
    add_render_callback(() => dispatch(node, true, 'start'));
    task = loop(now => {
      if (running) {
        if (now >= end_time) {
          tick(1, 0);
          dispatch(node, true, 'end');
          cleanup();
          return running = false;
        }

        if (now >= start_time) {
          const t = easing((now - start_time) / duration);
          tick(t, 1 - t);
        }
      }

      return running;
    });
  }

  let started = false;
  return {
    start() {
      if (started) return;
      delete_rule(node);

      if (is_function(config)) {
        config = config();
        wait().then(go);
      } else {
        go();
      }
    },

    invalidate() {
      started = false;
    },

    end() {
      if (running) {
        cleanup();
        running = false;
      }
    }

  };
}

function create_out_transition(node, fn, params) {
  let config = fn(node, params);
  let running = true;
  let animation_name;
  const group = outros;
  group.r += 1;

  function go() {
    const {
      delay = 0,
      duration = 300,
      easing = identity,
      tick = noop,
      css
    } = config || null_transition;
    if (css) animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
    const start_time = now() + delay;
    const end_time = start_time + duration;
    add_render_callback(() => dispatch(node, false, 'start'));
    loop(now => {
      if (running) {
        if (now >= end_time) {
          tick(0, 1);
          dispatch(node, false, 'end');

          if (! --group.r) {
            // this will result in `end()` being called,
            // so we don't need to clean up here
            run_all(group.c);
          }

          return false;
        }

        if (now >= start_time) {
          const t = easing((now - start_time) / duration);
          tick(1 - t, t);
        }
      }

      return running;
    });
  }

  if (is_function(config)) {
    wait().then(() => {
      // @ts-ignore
      config = config();
      go();
    });
  } else {
    go();
  }

  return {
    end(reset) {
      if (reset && config.tick) {
        config.tick(1, 0);
      }

      if (running) {
        if (animation_name) delete_rule(node, animation_name);
        running = false;
      }
    }

  };
}

function create_bidirectional_transition(node, fn, params, intro) {
  let config = fn(node, params);
  let t = intro ? 0 : 1;
  let running_program = null;
  let pending_program = null;
  let animation_name = null;

  function clear_animation() {
    if (animation_name) delete_rule(node, animation_name);
  }

  function init(program, duration) {
    const d = program.b - t;
    duration *= Math.abs(d);
    return {
      a: t,
      b: program.b,
      d,
      duration,
      start: program.start,
      end: program.start + duration,
      group: program.group
    };
  }

  function go(b) {
    const {
      delay = 0,
      duration = 300,
      easing = identity,
      tick = noop,
      css
    } = config || null_transition;
    const program = {
      start: now() + delay,
      b
    };

    if (!b) {
      // @ts-ignore todo: improve typings
      program.group = outros;
      outros.r += 1;
    }

    if (running_program) {
      pending_program = program;
    } else {
      // if this is an intro, and there's a delay, we need to do
      // an initial tick and/or apply CSS animation immediately
      if (css) {
        clear_animation();
        animation_name = create_rule(node, t, b, duration, delay, easing, css);
      }

      if (b) tick(0, 1);
      running_program = init(program, duration);
      add_render_callback(() => dispatch(node, b, 'start'));
      loop(now => {
        if (pending_program && now > pending_program.start) {
          running_program = init(pending_program, duration);
          pending_program = null;
          dispatch(node, running_program.b, 'start');

          if (css) {
            clear_animation();
            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
          }
        }

        if (running_program) {
          if (now >= running_program.end) {
            tick(t = running_program.b, 1 - t);
            dispatch(node, running_program.b, 'end');

            if (!pending_program) {
              // we're done
              if (running_program.b) {
                // intro — we can tidy up immediately
                clear_animation();
              } else {
                // outro — needs to be coordinated
                if (! --running_program.group.r) run_all(running_program.group.c);
              }
            }

            running_program = null;
          } else if (now >= running_program.start) {
            const p = now - running_program.start;
            t = running_program.a + running_program.d * easing(p / running_program.duration);
            tick(t, 1 - t);
          }
        }

        return !!(running_program || pending_program);
      });
    }
  }

  return {
    run(b) {
      if (is_function(config)) {
        wait().then(() => {
          // @ts-ignore
          config = config();
          go(b);
        });
      } else {
        go(b);
      }
    },

    end() {
      clear_animation();
      running_program = pending_program = null;
    }

  };
}

function handle_promise(promise, info) {
  const token = info.token = {};

  function update(type, index, key, value) {
    if (info.token !== token) return;
    info.resolved = value;
    let child_ctx = info.ctx;

    if (key !== undefined) {
      child_ctx = child_ctx.slice();
      child_ctx[key] = value;
    }

    const block = type && (info.current = type)(child_ctx);
    let needs_flush = false;

    if (info.block) {
      if (info.blocks) {
        info.blocks.forEach((block, i) => {
          if (i !== index && block) {
            group_outros();
            transition_out(block, 1, 1, () => {
              info.blocks[i] = null;
            });
            check_outros();
          }
        });
      } else {
        info.block.d(1);
      }

      block.c();
      transition_in(block, 1);
      block.m(info.mount(), info.anchor);
      needs_flush = true;
    }

    info.block = block;
    if (info.blocks) info.blocks[index] = block;

    if (needs_flush) {
      flush();
    }
  }

  if (is_promise(promise)) {
    const current_component = get_current_component();
    promise.then(value => {
      set_current_component(current_component);
      update(info.then, 1, info.value, value);
      set_current_component(null);
    }, error => {
      set_current_component(current_component);
      update(info.catch, 2, info.error, error);
      set_current_component(null);
    }); // if we previously had a then/catch block, destroy it

    if (info.current !== info.pending) {
      update(info.pending, 0);
      return true;
    }
  } else {
    if (info.current !== info.then) {
      update(info.then, 1, info.value, promise);
      return true;
    }

    info.resolved = promise;
  }
}

const globals = typeof window !== 'undefined' ? window : global;
exports.globals = globals;

function destroy_block(block, lookup) {
  block.d(1);
  lookup.delete(block.key);
}

function outro_and_destroy_block(block, lookup) {
  transition_out(block, 1, 1, () => {
    lookup.delete(block.key);
  });
}

function fix_and_destroy_block(block, lookup) {
  block.f();
  destroy_block(block, lookup);
}

function fix_and_outro_and_destroy_block(block, lookup) {
  block.f();
  outro_and_destroy_block(block, lookup);
}

function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
  let o = old_blocks.length;
  let n = list.length;
  let i = o;
  const old_indexes = {};

  while (i--) old_indexes[old_blocks[i].key] = i;

  const new_blocks = [];
  const new_lookup = new Map();
  const deltas = new Map();
  i = n;

  while (i--) {
    const child_ctx = get_context(ctx, list, i);
    const key = get_key(child_ctx);
    let block = lookup.get(key);

    if (!block) {
      block = create_each_block(key, child_ctx);
      block.c();
    } else if (dynamic) {
      block.p(child_ctx, dirty);
    }

    new_lookup.set(key, new_blocks[i] = block);
    if (key in old_indexes) deltas.set(key, Math.abs(i - old_indexes[key]));
  }

  const will_move = new Set();
  const did_move = new Set();

  function insert(block) {
    transition_in(block, 1);
    block.m(node, next, lookup.has(block.key));
    lookup.set(block.key, block);
    next = block.first;
    n--;
  }

  while (o && n) {
    const new_block = new_blocks[n - 1];
    const old_block = old_blocks[o - 1];
    const new_key = new_block.key;
    const old_key = old_block.key;

    if (new_block === old_block) {
      // do nothing
      next = new_block.first;
      o--;
      n--;
    } else if (!new_lookup.has(old_key)) {
      // remove old block
      destroy(old_block, lookup);
      o--;
    } else if (!lookup.has(new_key) || will_move.has(new_key)) {
      insert(new_block);
    } else if (did_move.has(old_key)) {
      o--;
    } else if (deltas.get(new_key) > deltas.get(old_key)) {
      did_move.add(new_key);
      insert(new_block);
    } else {
      will_move.add(old_key);
      o--;
    }
  }

  while (o--) {
    const old_block = old_blocks[o];
    if (!new_lookup.has(old_block.key)) destroy(old_block, lookup);
  }

  while (n) insert(new_blocks[n - 1]);

  return new_blocks;
}

function validate_each_keys(ctx, list, get_context, get_key) {
  const keys = new Set();

  for (let i = 0; i < list.length; i++) {
    const key = get_key(get_context(ctx, list, i));

    if (keys.has(key)) {
      throw new Error(`Cannot have duplicate keys in a keyed each`);
    }

    keys.add(key);
  }
}

function get_spread_update(levels, updates) {
  const update = {};
  const to_null_out = {};
  const accounted_for = {
    $$scope: 1
  };
  let i = levels.length;

  while (i--) {
    const o = levels[i];
    const n = updates[i];

    if (n) {
      for (const key in o) {
        if (!(key in n)) to_null_out[key] = 1;
      }

      for (const key in n) {
        if (!accounted_for[key]) {
          update[key] = n[key];
          accounted_for[key] = 1;
        }
      }

      levels[i] = n;
    } else {
      for (const key in o) {
        accounted_for[key] = 1;
      }
    }
  }

  for (const key in to_null_out) {
    if (!(key in update)) update[key] = undefined;
  }

  return update;
}

function get_spread_object(spread_props) {
  return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
} // source: https://html.spec.whatwg.org/multipage/indices.html


const boolean_attributes = new Set(['allowfullscreen', 'allowpaymentrequest', 'async', 'autofocus', 'autoplay', 'checked', 'controls', 'default', 'defer', 'disabled', 'formnovalidate', 'hidden', 'ismap', 'loop', 'multiple', 'muted', 'nomodule', 'novalidate', 'open', 'playsinline', 'readonly', 'required', 'reversed', 'selected']);
const invalid_attribute_name_character = /[\s'">/=\u{FDD0}-\u{FDEF}\u{FFFE}\u{FFFF}\u{1FFFE}\u{1FFFF}\u{2FFFE}\u{2FFFF}\u{3FFFE}\u{3FFFF}\u{4FFFE}\u{4FFFF}\u{5FFFE}\u{5FFFF}\u{6FFFE}\u{6FFFF}\u{7FFFE}\u{7FFFF}\u{8FFFE}\u{8FFFF}\u{9FFFE}\u{9FFFF}\u{AFFFE}\u{AFFFF}\u{BFFFE}\u{BFFFF}\u{CFFFE}\u{CFFFF}\u{DFFFE}\u{DFFFF}\u{EFFFE}\u{EFFFF}\u{FFFFE}\u{FFFFF}\u{10FFFE}\u{10FFFF}]/u; // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
// https://infra.spec.whatwg.org/#noncharacter

exports.invalid_attribute_name_character = invalid_attribute_name_character;

function spread(args, classes_to_add) {
  const attributes = Object.assign({}, ...args);

  if (classes_to_add) {
    if (attributes.class == null) {
      attributes.class = classes_to_add;
    } else {
      attributes.class += ' ' + classes_to_add;
    }
  }

  let str = '';
  Object.keys(attributes).forEach(name => {
    if (invalid_attribute_name_character.test(name)) return;
    const value = attributes[name];
    if (value === true) str += " " + name;else if (boolean_attributes.has(name.toLowerCase())) {
      if (value) str += " " + name;
    } else if (value != null) {
      str += ` ${name}="${String(value).replace(/"/g, '&#34;').replace(/'/g, '&#39;')}"`;
    }
  });
  return str;
}

const escaped = {
  '"': '&quot;',
  "'": '&#39;',
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;'
};
exports.escaped = escaped;

function escape(html) {
  return String(html).replace(/["'&<>]/g, match => escaped[match]);
}

function each(items, fn) {
  let str = '';

  for (let i = 0; i < items.length; i += 1) {
    str += fn(items[i], i);
  }

  return str;
}

const missing_component = {
  $$render: () => ''
};
exports.missing_component = missing_component;

function validate_component(component, name) {
  if (!component || !component.$$render) {
    if (name === 'svelte:component') name += ' this={...}';
    throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);
  }

  return component;
}

function debug(file, line, column, values) {
  console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console

  console.log(values); // eslint-disable-line no-console

  return '';
}

let on_destroy;

function create_ssr_component(fn) {
  function $$render(result, props, bindings, slots) {
    const parent_component = current_component;
    const $$ = {
      on_destroy,
      context: new Map(parent_component ? parent_component.$$.context : []),
      // these will be immediately discarded
      on_mount: [],
      before_update: [],
      after_update: [],
      callbacks: blank_object()
    };
    set_current_component({
      $$
    });
    const html = fn(result, props, bindings, slots);
    set_current_component(parent_component);
    return html;
  }

  return {
    render: (props = {}, options = {}) => {
      on_destroy = [];
      const result = {
        title: '',
        head: '',
        css: new Set()
      };
      const html = $$render(result, props, {}, options);
      run_all(on_destroy);
      return {
        html,
        css: {
          code: Array.from(result.css).map(css => css.code).join('\n'),
          map: null // TODO

        },
        head: result.title + result.head
      };
    },
    $$render
  };
}

function add_attribute(name, value, boolean) {
  if (value == null || boolean && !value) return '';
  return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `"${value}"`}`}`;
}

function add_classes(classes) {
  return classes ? ` class="${classes}"` : ``;
}

function bind(component, name, callback) {
  const index = component.$$.props[name];

  if (index !== undefined) {
    component.$$.bound[index] = callback;
    callback(component.$$.ctx[index]);
  }
}

function create_component(block) {
  block && block.c();
}

function claim_component(block, parent_nodes) {
  block && block.l(parent_nodes);
}

function mount_component(component, target, anchor) {
  const {
    fragment,
    on_mount,
    on_destroy,
    after_update
  } = component.$$;
  fragment && fragment.m(target, anchor); // onMount happens before the initial afterUpdate

  add_render_callback(() => {
    const new_on_destroy = on_mount.map(run).filter(is_function);

    if (on_destroy) {
      on_destroy.push(...new_on_destroy);
    } else {
      // Edge case - component was destroyed immediately,
      // most likely as a result of a binding initialising
      run_all(new_on_destroy);
    }

    component.$$.on_mount = [];
  });
  after_update.forEach(add_render_callback);
}

function destroy_component(component, detaching) {
  const $$ = component.$$;

  if ($$.fragment !== null) {
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching); // TODO null out other refs, including component.$$ (but need to
    // preserve final state?)

    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}

function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }

  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}

function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const prop_values = options.props || {};
  const $$ = component.$$ = {
    fragment: null,
    ctx: null,
    // state
    props,
    update: noop,
    not_equal,
    bound: blank_object(),
    // lifecycle
    on_mount: [],
    on_destroy: [],
    before_update: [],
    after_update: [],
    context: new Map(parent_component ? parent_component.$$.context : []),
    // everything else
    callbacks: blank_object(),
    dirty
  };
  let ready = false;
  $$.ctx = instance ? instance(component, prop_values, (i, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;

    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
      if ($$.bound[i]) $$.bound[i](value);
      if (ready) make_dirty(component, i);
    }

    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update); // `false` as a special case of no DOM component

  $$.fragment = create_fragment ? create_fragment($$.ctx) : false;

  if (options.target) {
    if (options.hydrate) {
      const nodes = children(options.target); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      $$.fragment && $$.fragment.c();
    }

    if (options.intro) transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor);
    flush();
  }

  set_current_component(parent_component);
}

let SvelteElement;
exports.SvelteElement = SvelteElement;

if (typeof HTMLElement === 'function') {
  exports.SvelteElement = SvelteElement = class extends HTMLElement {
    constructor() {
      super();
      this.attachShadow({
        mode: 'open'
      });
    }

    connectedCallback() {
      // @ts-ignore todo: improve typings
      for (const key in this.$$.slotted) {
        // @ts-ignore todo: improve typings
        this.appendChild(this.$$.slotted[key]);
      }
    }

    attributeChangedCallback(attr, _oldValue, newValue) {
      this[attr] = newValue;
    }

    $destroy() {
      destroy_component(this, 1);
      this.$destroy = noop;
    }

    $on(type, callback) {
      // TODO should this delegate to addEventListener?
      const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
      callbacks.push(callback);
      return () => {
        const index = callbacks.indexOf(callback);
        if (index !== -1) callbacks.splice(index, 1);
      };
    }

    $set() {// overridden by instance, if it has props
    }

  };
}

class SvelteComponent {
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }

  $on(type, callback) {
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1) callbacks.splice(index, 1);
    };
  }

  $set() {// overridden by instance, if it has props
  }

}

exports.SvelteComponent = SvelteComponent;

function dispatch_dev(type, detail) {
  document.dispatchEvent(custom_event(type, Object.assign({
    version: '3.20.1'
  }, detail)));
}

function append_dev(target, node) {
  dispatch_dev("SvelteDOMInsert", {
    target,
    node
  });
  append(target, node);
}

function insert_dev(target, node, anchor) {
  dispatch_dev("SvelteDOMInsert", {
    target,
    node,
    anchor
  });
  insert(target, node, anchor);
}

function detach_dev(node) {
  dispatch_dev("SvelteDOMRemove", {
    node
  });
  detach(node);
}

function detach_between_dev(before, after) {
  while (before.nextSibling && before.nextSibling !== after) {
    detach_dev(before.nextSibling);
  }
}

function detach_before_dev(after) {
  while (after.previousSibling) {
    detach_dev(after.previousSibling);
  }
}

function detach_after_dev(before) {
  while (before.nextSibling) {
    detach_dev(before.nextSibling);
  }
}

function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
  const modifiers = options === true ? ["capture"] : options ? Array.from(Object.keys(options)) : [];
  if (has_prevent_default) modifiers.push('preventDefault');
  if (has_stop_propagation) modifiers.push('stopPropagation');
  dispatch_dev("SvelteDOMAddEventListener", {
    node,
    event,
    handler,
    modifiers
  });
  const dispose = listen(node, event, handler, options);
  return () => {
    dispatch_dev("SvelteDOMRemoveEventListener", {
      node,
      event,
      handler,
      modifiers
    });
    dispose();
  };
}

function attr_dev(node, attribute, value) {
  attr(node, attribute, value);
  if (value == null) dispatch_dev("SvelteDOMRemoveAttribute", {
    node,
    attribute
  });else dispatch_dev("SvelteDOMSetAttribute", {
    node,
    attribute,
    value
  });
}

function prop_dev(node, property, value) {
  node[property] = value;
  dispatch_dev("SvelteDOMSetProperty", {
    node,
    property,
    value
  });
}

function dataset_dev(node, property, value) {
  node.dataset[property] = value;
  dispatch_dev("SvelteDOMSetDataset", {
    node,
    property,
    value
  });
}

function set_data_dev(text, data) {
  data = '' + data;
  if (text.data === data) return;
  dispatch_dev("SvelteDOMSetData", {
    node: text,
    data
  });
  text.data = data;
}

function validate_each_argument(arg) {
  if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
    let msg = '{#each} only iterates over array-like objects.';

    if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
      msg += ' You can use a spread to convert this iterable into an array.';
    }

    throw new Error(msg);
  }
}

function validate_slots(name, slot, keys) {
  for (const slot_key of Object.keys(slot)) {
    if (!~keys.indexOf(slot_key)) {
      console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
    }
  }
}

class SvelteComponentDev extends SvelteComponent {
  constructor(options) {
    if (!options || !options.target && !options.$$inline) {
      throw new Error(`'target' is a required option`);
    }

    super();
  }

  $destroy() {
    super.$destroy();

    this.$destroy = () => {
      console.warn(`Component was already destroyed`); // eslint-disable-line no-console
    };
  }

  $capture_state() {}

  $inject_state() {}

}

exports.SvelteComponentDev = SvelteComponentDev;

function loop_guard(timeout) {
  const start = Date.now();
  return () => {
    if (Date.now() - start > timeout) {
      throw new Error(`Infinite loop detected`);
    }
  };
}
},{}],"node_modules/regenerator-runtime/runtime.js":[function(require,module,exports) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  typeof module === "object" ? module.exports : {}
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}

},{}],"node_modules/@babel/runtime/regenerator/index.js":[function(require,module,exports) {
module.exports = require("regenerator-runtime");

},{"regenerator-runtime":"node_modules/regenerator-runtime/runtime.js"}],"node_modules/@babel/runtime/helpers/asyncToGenerator.js":[function(require,module,exports) {
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator;
},{}],"node_modules/d3/dist/package.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dependencies = exports.devDependencies = exports.scripts = exports.files = exports.repository = exports.module = exports.jsdelivr = exports.unpkg = exports.main = exports.author = exports.license = exports.homepage = exports.keywords = exports.description = exports.version = exports.name = void 0;
var name = "d3";
exports.name = name;
var version = "5.15.0";
exports.version = version;
var description = "Data-Driven Documents";
exports.description = description;
var keywords = ["dom", "visualization", "svg", "animation", "canvas"];
exports.keywords = keywords;
var homepage = "https://d3js.org";
exports.homepage = homepage;
var license = "BSD-3-Clause";
exports.license = license;
var author = {
  "name": "Mike Bostock",
  "url": "https://bost.ocks.org/mike"
};
exports.author = author;
var main = "dist/d3.node.js";
exports.main = main;
var unpkg = "dist/d3.min.js";
exports.unpkg = unpkg;
var jsdelivr = "dist/d3.min.js";
exports.jsdelivr = jsdelivr;
var _module = "index.js";
exports.module = _module;
var repository = {
  "type": "git",
  "url": "https://github.com/d3/d3.git"
};
exports.repository = repository;
var files = ["dist/**/*.js", "index.js"];
exports.files = files;
var scripts = {
  "pretest": "rimraf dist && mkdir dist && json2module package.json > dist/package.js && rollup -c",
  "test": "tape 'test/**/*-test.js'",
  "prepublishOnly": "yarn test",
  "postpublish": "git push && git push --tags && cd ../d3.github.com && git pull && cp ../d3/dist/d3.js d3.v5.js && cp ../d3/dist/d3.min.js d3.v5.min.js && git add d3.v5.js d3.v5.min.js && git commit -m \"d3 ${npm_package_version}\" && git push && cd - && cd ../d3-bower && git pull && cp ../d3/LICENSE ../d3/README.md ../d3/dist/d3.js ../d3/dist/d3.min.js . && git add -- LICENSE README.md d3.js d3.min.js && git commit -m \"${npm_package_version}\" && git tag -am \"${npm_package_version}\" v${npm_package_version} && git push && git push --tags && cd - && zip -j dist/d3.zip -- LICENSE README.md API.md CHANGES.md dist/d3.js dist/d3.min.js"
};
exports.scripts = scripts;
var devDependencies = {
  "json2module": "0.0",
  "rimraf": "2",
  "rollup": "1",
  "rollup-plugin-ascii": "0.0",
  "rollup-plugin-node-resolve": "3",
  "rollup-plugin-terser": "5",
  "tape": "4"
};
exports.devDependencies = devDependencies;
var dependencies = {
  "d3-array": "1",
  "d3-axis": "1",
  "d3-brush": "1",
  "d3-chord": "1",
  "d3-collection": "1",
  "d3-color": "1",
  "d3-contour": "1",
  "d3-dispatch": "1",
  "d3-drag": "1",
  "d3-dsv": "1",
  "d3-ease": "1",
  "d3-fetch": "1",
  "d3-force": "1",
  "d3-format": "1",
  "d3-geo": "1",
  "d3-hierarchy": "1",
  "d3-interpolate": "1",
  "d3-path": "1",
  "d3-polygon": "1",
  "d3-quadtree": "1",
  "d3-random": "1",
  "d3-scale": "2",
  "d3-scale-chromatic": "1",
  "d3-selection": "1",
  "d3-shape": "1",
  "d3-time": "1",
  "d3-time-format": "2",
  "d3-timer": "1",
  "d3-transition": "1",
  "d3-voronoi": "1",
  "d3-zoom": "1"
};
exports.dependencies = dependencies;
},{}],"node_modules/d3-array/src/ascending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
},{}],"node_modules/d3-array/src/bisector.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(compare) {
  if (compare.length === 1) compare = ascendingComparator(compare);
  return {
    left: function (a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;

      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;
      }

      return lo;
    },
    right: function (a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;

      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;
      }

      return lo;
    }
  };
}

function ascendingComparator(f) {
  return function (d, x) {
    return (0, _ascending.default)(f(d), x);
  };
}
},{"./ascending":"node_modules/d3-array/src/ascending.js"}],"node_modules/d3-array/src/bisect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.bisectLeft = exports.bisectRight = void 0;

var _ascending = _interopRequireDefault(require("./ascending"));

var _bisector = _interopRequireDefault(require("./bisector"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ascendingBisect = (0, _bisector.default)(_ascending.default);
var bisectRight = ascendingBisect.right;
exports.bisectRight = bisectRight;
var bisectLeft = ascendingBisect.left;
exports.bisectLeft = bisectLeft;
var _default = bisectRight;
exports.default = _default;
},{"./ascending":"node_modules/d3-array/src/ascending.js","./bisector":"node_modules/d3-array/src/bisector.js"}],"node_modules/d3-array/src/pairs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.pair = pair;

function _default(array, f) {
  if (f == null) f = pair;
  var i = 0,
      n = array.length - 1,
      p = array[0],
      pairs = new Array(n < 0 ? 0 : n);

  while (i < n) pairs[i] = f(p, p = array[++i]);

  return pairs;
}

function pair(a, b) {
  return [a, b];
}
},{}],"node_modules/d3-array/src/cross.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _pairs = require("./pairs");

function _default(values0, values1, reduce) {
  var n0 = values0.length,
      n1 = values1.length,
      values = new Array(n0 * n1),
      i0,
      i1,
      i,
      value0;
  if (reduce == null) reduce = _pairs.pair;

  for (i0 = i = 0; i0 < n0; ++i0) {
    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {
      values[i] = reduce(value0, values1[i1]);
    }
  }

  return values;
}
},{"./pairs":"node_modules/d3-array/src/pairs.js"}],"node_modules/d3-array/src/descending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}
},{}],"node_modules/d3-array/src/number.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x === null ? NaN : +x;
}
},{}],"node_modules/d3-array/src/variance.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, valueof) {
  var n = values.length,
      m = 0,
      i = -1,
      mean = 0,
      value,
      delta,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(values[i]))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  } else {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(valueof(values[i], i, values)))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  }

  if (m > 1) return sum / (m - 1);
}
},{"./number":"node_modules/d3-array/src/number.js"}],"node_modules/d3-array/src/deviation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _variance = _interopRequireDefault(require("./variance"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(array, f) {
  var v = (0, _variance.default)(array, f);
  return v ? Math.sqrt(v) : v;
}
},{"./variance":"node_modules/d3-array/src/variance.js"}],"node_modules/d3-array/src/extent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min,
      max;

  if (valueof == null) {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = max = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = values[i]) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  } else {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = max = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  }

  return [min, max];
}
},{}],"node_modules/d3-array/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.map = exports.slice = void 0;
var array = Array.prototype;
var slice = array.slice;
exports.slice = slice;
var map = array.map;
exports.map = map;
},{}],"node_modules/d3-array/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-array/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x;
}
},{}],"node_modules/d3-array/src/range.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
}
},{}],"node_modules/d3-array/src/ticks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.tickIncrement = tickIncrement;
exports.tickStep = tickStep;
var e10 = Math.sqrt(50),
    e5 = Math.sqrt(10),
    e2 = Math.sqrt(2);

function _default(start, stop, count) {
  var reverse,
      i = -1,
      n,
      ticks,
      step;
  stop = +stop, start = +start, count = +count;
  if (start === stop && count > 0) return [start];
  if (reverse = stop < start) n = start, start = stop, stop = n;
  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

  if (step > 0) {
    start = Math.ceil(start / step);
    stop = Math.floor(stop / step);
    ticks = new Array(n = Math.ceil(stop - start + 1));

    while (++i < n) ticks[i] = (start + i) * step;
  } else {
    start = Math.floor(start * step);
    stop = Math.ceil(stop * step);
    ticks = new Array(n = Math.ceil(start - stop + 1));

    while (++i < n) ticks[i] = (start - i) / step;
  }

  if (reverse) ticks.reverse();
  return ticks;
}

function tickIncrement(start, stop, count) {
  var step = (stop - start) / Math.max(0, count),
      power = Math.floor(Math.log(step) / Math.LN10),
      error = step / Math.pow(10, power);
  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}

function tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count),
      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
      error = step0 / step1;
  if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;
  return stop < start ? -step1 : step1;
}
},{}],"node_modules/d3-array/src/threshold/sturges.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values) {
  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
}
},{}],"node_modules/d3-array/src/histogram.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("./array");

var _bisect = _interopRequireDefault(require("./bisect"));

var _constant = _interopRequireDefault(require("./constant"));

var _extent = _interopRequireDefault(require("./extent"));

var _identity = _interopRequireDefault(require("./identity"));

var _range = _interopRequireDefault(require("./range"));

var _ticks = require("./ticks");

var _sturges = _interopRequireDefault(require("./threshold/sturges"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var value = _identity.default,
      domain = _extent.default,
      threshold = _sturges.default;

  function histogram(data) {
    var i,
        n = data.length,
        x,
        values = new Array(n);

    for (i = 0; i < n; ++i) {
      values[i] = value(data[i], i, data);
    }

    var xz = domain(values),
        x0 = xz[0],
        x1 = xz[1],
        tz = threshold(values, x0, x1); // Convert number of thresholds into uniform thresholds.

    if (!Array.isArray(tz)) {
      tz = (0, _ticks.tickStep)(x0, x1, tz);
      tz = (0, _range.default)(Math.ceil(x0 / tz) * tz, x1, tz); // exclusive
    } // Remove any thresholds outside the domain.


    var m = tz.length;

    while (tz[0] <= x0) tz.shift(), --m;

    while (tz[m - 1] > x1) tz.pop(), --m;

    var bins = new Array(m + 1),
        bin; // Initialize bins.

    for (i = 0; i <= m; ++i) {
      bin = bins[i] = [];
      bin.x0 = i > 0 ? tz[i - 1] : x0;
      bin.x1 = i < m ? tz[i] : x1;
    } // Assign data to bins by value, ignoring any outside the domain.


    for (i = 0; i < n; ++i) {
      x = values[i];

      if (x0 <= x && x <= x1) {
        bins[(0, _bisect.default)(tz, x, 0, m)].push(data[i]);
      }
    }

    return bins;
  }

  histogram.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : (0, _constant.default)(_), histogram) : value;
  };

  histogram.domain = function (_) {
    return arguments.length ? (domain = typeof _ === "function" ? _ : (0, _constant.default)([_[0], _[1]]), histogram) : domain;
  };

  histogram.thresholds = function (_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? (0, _constant.default)(_array.slice.call(_)) : (0, _constant.default)(_), histogram) : threshold;
  };

  return histogram;
}
},{"./array":"node_modules/d3-array/src/array.js","./bisect":"node_modules/d3-array/src/bisect.js","./constant":"node_modules/d3-array/src/constant.js","./extent":"node_modules/d3-array/src/extent.js","./identity":"node_modules/d3-array/src/identity.js","./range":"node_modules/d3-array/src/range.js","./ticks":"node_modules/d3-array/src/ticks.js","./threshold/sturges":"node_modules/d3-array/src/threshold/sturges.js"}],"node_modules/d3-array/src/quantile.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, p, valueof) {
  if (valueof == null) valueof = _number.default;
  if (!(n = values.length)) return;
  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
  var n,
      i = (n - 1) * p,
      i0 = Math.floor(i),
      value0 = +valueof(values[i0], i0, values),
      value1 = +valueof(values[i0 + 1], i0 + 1, values);
  return value0 + (value1 - value0) * (i - i0);
}
},{"./number":"node_modules/d3-array/src/number.js"}],"node_modules/d3-array/src/threshold/freedmanDiaconis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("../array");

var _ascending = _interopRequireDefault(require("../ascending"));

var _number = _interopRequireDefault(require("../number"));

var _quantile = _interopRequireDefault(require("../quantile"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, min, max) {
  values = _array.map.call(values, _number.default).sort(_ascending.default);
  return Math.ceil((max - min) / (2 * ((0, _quantile.default)(values, 0.75) - (0, _quantile.default)(values, 0.25)) * Math.pow(values.length, -1 / 3)));
}
},{"../array":"node_modules/d3-array/src/array.js","../ascending":"node_modules/d3-array/src/ascending.js","../number":"node_modules/d3-array/src/number.js","../quantile":"node_modules/d3-array/src/quantile.js"}],"node_modules/d3-array/src/threshold/scott.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _deviation = _interopRequireDefault(require("../deviation"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, min, max) {
  return Math.ceil((max - min) / (3.5 * (0, _deviation.default)(values) * Math.pow(values.length, -1 / 3)));
}
},{"../deviation":"node_modules/d3-array/src/deviation.js"}],"node_modules/d3-array/src/max.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      max;

  if (valueof == null) {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        max = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = values[i]) != null && value > max) {
            max = value;
          }
        }
      }
    }
  } else {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        max = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && value > max) {
            max = value;
          }
        }
      }
    }
  }

  return max;
}
},{}],"node_modules/d3-array/src/mean.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, valueof) {
  var n = values.length,
      m = n,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(values[i]))) sum += value;else --m;
    }
  } else {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(valueof(values[i], i, values)))) sum += value;else --m;
    }
  }

  if (m) return sum / m;
}
},{"./number":"node_modules/d3-array/src/number.js"}],"node_modules/d3-array/src/median.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending"));

var _number = _interopRequireDefault(require("./number"));

var _quantile = _interopRequireDefault(require("./quantile"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      numbers = [];

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(values[i]))) {
        numbers.push(value);
      }
    }
  } else {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(valueof(values[i], i, values)))) {
        numbers.push(value);
      }
    }
  }

  return (0, _quantile.default)(numbers.sort(_ascending.default), 0.5);
}
},{"./ascending":"node_modules/d3-array/src/ascending.js","./number":"node_modules/d3-array/src/number.js","./quantile":"node_modules/d3-array/src/quantile.js"}],"node_modules/d3-array/src/merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(arrays) {
  var n = arrays.length,
      m,
      i = -1,
      j = 0,
      merged,
      array;

  while (++i < n) j += arrays[i].length;

  merged = new Array(j);

  while (--n >= 0) {
    array = arrays[n];
    m = array.length;

    while (--m >= 0) {
      merged[--j] = array[m];
    }
  }

  return merged;
}
},{}],"node_modules/d3-array/src/min.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min;

  if (valueof == null) {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = values[i]) != null && min > value) {
            min = value;
          }
        }
      }
    }
  } else {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && min > value) {
            min = value;
          }
        }
      }
    }
  }

  return min;
}
},{}],"node_modules/d3-array/src/permute.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array, indexes) {
  var i = indexes.length,
      permutes = new Array(i);

  while (i--) permutes[i] = array[indexes[i]];

  return permutes;
}
},{}],"node_modules/d3-array/src/scan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, compare) {
  if (!(n = values.length)) return;
  var n,
      i = 0,
      j = 0,
      xi,
      xj = values[j];
  if (compare == null) compare = _ascending.default;

  while (++i < n) {
    if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {
      xj = xi, j = i;
    }
  }

  if (compare(xj, xj) === 0) return j;
}
},{"./ascending":"node_modules/d3-array/src/ascending.js"}],"node_modules/d3-array/src/shuffle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array, i0, i1) {
  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),
      t,
      i;

  while (m) {
    i = Math.random() * m-- | 0;
    t = array[m + i0];
    array[m + i0] = array[i + i0];
    array[i + i0] = t;
  }

  return array;
}
},{}],"node_modules/d3-array/src/sum.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (value = +values[i]) sum += value; // Note: zero and null are equivalent.
    }
  } else {
    while (++i < n) {
      if (value = +valueof(values[i], i, values)) sum += value;
    }
  }

  return sum;
}
},{}],"node_modules/d3-array/src/transpose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _min = _interopRequireDefault(require("./min"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(matrix) {
  if (!(n = matrix.length)) return [];

  for (var i = -1, m = (0, _min.default)(matrix, length), transpose = new Array(m); ++i < m;) {
    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
      row[j] = matrix[j][i];
    }
  }

  return transpose;
}

function length(d) {
  return d.length;
}
},{"./min":"node_modules/d3-array/src/min.js"}],"node_modules/d3-array/src/zip.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _transpose = _interopRequireDefault(require("./transpose"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return (0, _transpose.default)(arguments);
}
},{"./transpose":"node_modules/d3-array/src/transpose.js"}],"node_modules/d3-array/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "bisect", {
  enumerable: true,
  get: function () {
    return _bisect.default;
  }
});
Object.defineProperty(exports, "bisectRight", {
  enumerable: true,
  get: function () {
    return _bisect.bisectRight;
  }
});
Object.defineProperty(exports, "bisectLeft", {
  enumerable: true,
  get: function () {
    return _bisect.bisectLeft;
  }
});
Object.defineProperty(exports, "ascending", {
  enumerable: true,
  get: function () {
    return _ascending.default;
  }
});
Object.defineProperty(exports, "bisector", {
  enumerable: true,
  get: function () {
    return _bisector.default;
  }
});
Object.defineProperty(exports, "cross", {
  enumerable: true,
  get: function () {
    return _cross.default;
  }
});
Object.defineProperty(exports, "descending", {
  enumerable: true,
  get: function () {
    return _descending.default;
  }
});
Object.defineProperty(exports, "deviation", {
  enumerable: true,
  get: function () {
    return _deviation.default;
  }
});
Object.defineProperty(exports, "extent", {
  enumerable: true,
  get: function () {
    return _extent.default;
  }
});
Object.defineProperty(exports, "histogram", {
  enumerable: true,
  get: function () {
    return _histogram.default;
  }
});
Object.defineProperty(exports, "thresholdFreedmanDiaconis", {
  enumerable: true,
  get: function () {
    return _freedmanDiaconis.default;
  }
});
Object.defineProperty(exports, "thresholdScott", {
  enumerable: true,
  get: function () {
    return _scott.default;
  }
});
Object.defineProperty(exports, "thresholdSturges", {
  enumerable: true,
  get: function () {
    return _sturges.default;
  }
});
Object.defineProperty(exports, "max", {
  enumerable: true,
  get: function () {
    return _max.default;
  }
});
Object.defineProperty(exports, "mean", {
  enumerable: true,
  get: function () {
    return _mean.default;
  }
});
Object.defineProperty(exports, "median", {
  enumerable: true,
  get: function () {
    return _median.default;
  }
});
Object.defineProperty(exports, "merge", {
  enumerable: true,
  get: function () {
    return _merge.default;
  }
});
Object.defineProperty(exports, "min", {
  enumerable: true,
  get: function () {
    return _min.default;
  }
});
Object.defineProperty(exports, "pairs", {
  enumerable: true,
  get: function () {
    return _pairs.default;
  }
});
Object.defineProperty(exports, "permute", {
  enumerable: true,
  get: function () {
    return _permute.default;
  }
});
Object.defineProperty(exports, "quantile", {
  enumerable: true,
  get: function () {
    return _quantile.default;
  }
});
Object.defineProperty(exports, "range", {
  enumerable: true,
  get: function () {
    return _range.default;
  }
});
Object.defineProperty(exports, "scan", {
  enumerable: true,
  get: function () {
    return _scan.default;
  }
});
Object.defineProperty(exports, "shuffle", {
  enumerable: true,
  get: function () {
    return _shuffle.default;
  }
});
Object.defineProperty(exports, "sum", {
  enumerable: true,
  get: function () {
    return _sum.default;
  }
});
Object.defineProperty(exports, "ticks", {
  enumerable: true,
  get: function () {
    return _ticks.default;
  }
});
Object.defineProperty(exports, "tickIncrement", {
  enumerable: true,
  get: function () {
    return _ticks.tickIncrement;
  }
});
Object.defineProperty(exports, "tickStep", {
  enumerable: true,
  get: function () {
    return _ticks.tickStep;
  }
});
Object.defineProperty(exports, "transpose", {
  enumerable: true,
  get: function () {
    return _transpose.default;
  }
});
Object.defineProperty(exports, "variance", {
  enumerable: true,
  get: function () {
    return _variance.default;
  }
});
Object.defineProperty(exports, "zip", {
  enumerable: true,
  get: function () {
    return _zip.default;
  }
});

var _bisect = _interopRequireWildcard(require("./bisect"));

var _ascending = _interopRequireDefault(require("./ascending"));

var _bisector = _interopRequireDefault(require("./bisector"));

var _cross = _interopRequireDefault(require("./cross"));

var _descending = _interopRequireDefault(require("./descending"));

var _deviation = _interopRequireDefault(require("./deviation"));

var _extent = _interopRequireDefault(require("./extent"));

var _histogram = _interopRequireDefault(require("./histogram"));

var _freedmanDiaconis = _interopRequireDefault(require("./threshold/freedmanDiaconis"));

var _scott = _interopRequireDefault(require("./threshold/scott"));

var _sturges = _interopRequireDefault(require("./threshold/sturges"));

var _max = _interopRequireDefault(require("./max"));

var _mean = _interopRequireDefault(require("./mean"));

var _median = _interopRequireDefault(require("./median"));

var _merge = _interopRequireDefault(require("./merge"));

var _min = _interopRequireDefault(require("./min"));

var _pairs = _interopRequireDefault(require("./pairs"));

var _permute = _interopRequireDefault(require("./permute"));

var _quantile = _interopRequireDefault(require("./quantile"));

var _range = _interopRequireDefault(require("./range"));

var _scan = _interopRequireDefault(require("./scan"));

var _shuffle = _interopRequireDefault(require("./shuffle"));

var _sum = _interopRequireDefault(require("./sum"));

var _ticks = _interopRequireWildcard(require("./ticks"));

var _transpose = _interopRequireDefault(require("./transpose"));

var _variance = _interopRequireDefault(require("./variance"));

var _zip = _interopRequireDefault(require("./zip"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
},{"./bisect":"node_modules/d3-array/src/bisect.js","./ascending":"node_modules/d3-array/src/ascending.js","./bisector":"node_modules/d3-array/src/bisector.js","./cross":"node_modules/d3-array/src/cross.js","./descending":"node_modules/d3-array/src/descending.js","./deviation":"node_modules/d3-array/src/deviation.js","./extent":"node_modules/d3-array/src/extent.js","./histogram":"node_modules/d3-array/src/histogram.js","./threshold/freedmanDiaconis":"node_modules/d3-array/src/threshold/freedmanDiaconis.js","./threshold/scott":"node_modules/d3-array/src/threshold/scott.js","./threshold/sturges":"node_modules/d3-array/src/threshold/sturges.js","./max":"node_modules/d3-array/src/max.js","./mean":"node_modules/d3-array/src/mean.js","./median":"node_modules/d3-array/src/median.js","./merge":"node_modules/d3-array/src/merge.js","./min":"node_modules/d3-array/src/min.js","./pairs":"node_modules/d3-array/src/pairs.js","./permute":"node_modules/d3-array/src/permute.js","./quantile":"node_modules/d3-array/src/quantile.js","./range":"node_modules/d3-array/src/range.js","./scan":"node_modules/d3-array/src/scan.js","./shuffle":"node_modules/d3-array/src/shuffle.js","./sum":"node_modules/d3-array/src/sum.js","./ticks":"node_modules/d3-array/src/ticks.js","./transpose":"node_modules/d3-array/src/transpose.js","./variance":"node_modules/d3-array/src/variance.js","./zip":"node_modules/d3-array/src/zip.js"}],"node_modules/d3-axis/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = void 0;
var slice = Array.prototype.slice;
exports.slice = slice;
},{}],"node_modules/d3-axis/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x;
}
},{}],"node_modules/d3-axis/src/axis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.axisTop = axisTop;
exports.axisRight = axisRight;
exports.axisBottom = axisBottom;
exports.axisLeft = axisLeft;

var _array = require("./array");

var _identity = _interopRequireDefault(require("./identity"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var top = 1,
    right = 2,
    bottom = 3,
    left = 4,
    epsilon = 1e-6;

function translateX(x) {
  return "translate(" + (x + 0.5) + ",0)";
}

function translateY(y) {
  return "translate(0," + (y + 0.5) + ")";
}

function number(scale) {
  return function (d) {
    return +scale(d);
  };
}

function center(scale) {
  var offset = Math.max(0, scale.bandwidth() - 1) / 2; // Adjust for 0.5px offset.

  if (scale.round()) offset = Math.round(offset);
  return function (d) {
    return +scale(d) + offset;
  };
}

function entering() {
  return !this.__axis;
}

function axis(orient, scale) {
  var tickArguments = [],
      tickValues = null,
      tickFormat = null,
      tickSizeInner = 6,
      tickSizeOuter = 6,
      tickPadding = 3,
      k = orient === top || orient === left ? -1 : 1,
      x = orient === left || orient === right ? "x" : "y",
      transform = orient === top || orient === bottom ? translateX : translateY;

  function axis(context) {
    var values = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues,
        format = tickFormat == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : _identity.default : tickFormat,
        spacing = Math.max(tickSizeInner, 0) + tickPadding,
        range = scale.range(),
        range0 = +range[0] + 0.5,
        range1 = +range[range.length - 1] + 0.5,
        position = (scale.bandwidth ? center : number)(scale.copy()),
        selection = context.selection ? context.selection() : context,
        path = selection.selectAll(".domain").data([null]),
        tick = selection.selectAll(".tick").data(values, scale).order(),
        tickExit = tick.exit(),
        tickEnter = tick.enter().append("g").attr("class", "tick"),
        line = tick.select("line"),
        text = tick.select("text");
    path = path.merge(path.enter().insert("path", ".tick").attr("class", "domain").attr("stroke", "currentColor"));
    tick = tick.merge(tickEnter);
    line = line.merge(tickEnter.append("line").attr("stroke", "currentColor").attr(x + "2", k * tickSizeInner));
    text = text.merge(tickEnter.append("text").attr("fill", "currentColor").attr(x, k * spacing).attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));

    if (context !== selection) {
      path = path.transition(context);
      tick = tick.transition(context);
      line = line.transition(context);
      text = text.transition(context);
      tickExit = tickExit.transition(context).attr("opacity", epsilon).attr("transform", function (d) {
        return isFinite(d = position(d)) ? transform(d) : this.getAttribute("transform");
      });
      tickEnter.attr("opacity", epsilon).attr("transform", function (d) {
        var p = this.parentNode.__axis;
        return transform(p && isFinite(p = p(d)) ? p : position(d));
      });
    }

    tickExit.remove();
    path.attr("d", orient === left || orient == right ? tickSizeOuter ? "M" + k * tickSizeOuter + "," + range0 + "H0.5V" + range1 + "H" + k * tickSizeOuter : "M0.5," + range0 + "V" + range1 : tickSizeOuter ? "M" + range0 + "," + k * tickSizeOuter + "V0.5H" + range1 + "V" + k * tickSizeOuter : "M" + range0 + ",0.5H" + range1);
    tick.attr("opacity", 1).attr("transform", function (d) {
      return transform(position(d));
    });
    line.attr(x + "2", k * tickSizeInner);
    text.attr(x, k * spacing).text(format);
    selection.filter(entering).attr("fill", "none").attr("font-size", 10).attr("font-family", "sans-serif").attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");
    selection.each(function () {
      this.__axis = position;
    });
  }

  axis.scale = function (_) {
    return arguments.length ? (scale = _, axis) : scale;
  };

  axis.ticks = function () {
    return tickArguments = _array.slice.call(arguments), axis;
  };

  axis.tickArguments = function (_) {
    return arguments.length ? (tickArguments = _ == null ? [] : _array.slice.call(_), axis) : tickArguments.slice();
  };

  axis.tickValues = function (_) {
    return arguments.length ? (tickValues = _ == null ? null : _array.slice.call(_), axis) : tickValues && tickValues.slice();
  };

  axis.tickFormat = function (_) {
    return arguments.length ? (tickFormat = _, axis) : tickFormat;
  };

  axis.tickSize = function (_) {
    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
  };

  axis.tickSizeInner = function (_) {
    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
  };

  axis.tickSizeOuter = function (_) {
    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
  };

  axis.tickPadding = function (_) {
    return arguments.length ? (tickPadding = +_, axis) : tickPadding;
  };

  return axis;
}

function axisTop(scale) {
  return axis(top, scale);
}

function axisRight(scale) {
  return axis(right, scale);
}

function axisBottom(scale) {
  return axis(bottom, scale);
}

function axisLeft(scale) {
  return axis(left, scale);
}
},{"./array":"node_modules/d3-axis/src/array.js","./identity":"node_modules/d3-axis/src/identity.js"}],"node_modules/d3-axis/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "axisTop", {
  enumerable: true,
  get: function () {
    return _axis.axisTop;
  }
});
Object.defineProperty(exports, "axisRight", {
  enumerable: true,
  get: function () {
    return _axis.axisRight;
  }
});
Object.defineProperty(exports, "axisBottom", {
  enumerable: true,
  get: function () {
    return _axis.axisBottom;
  }
});
Object.defineProperty(exports, "axisLeft", {
  enumerable: true,
  get: function () {
    return _axis.axisLeft;
  }
});

var _axis = require("./axis");
},{"./axis":"node_modules/d3-axis/src/axis.js"}],"node_modules/d3-dispatch/src/dispatch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var noop = {
  value: function () {}
};

function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t)) throw new Error("illegal type: " + t);
    _[t] = [];
  }

  return new Dispatch(_);
}

function Dispatch(_) {
  this._ = _;
}

function parseTypenames(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function (t) {
    var name = "",
        i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
    return {
      type: t,
      name: name
    };
  });
}

Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function (typename, callback) {
    var _ = this._,
        T = parseTypenames(typename + "", _),
        t,
        i = -1,
        n = T.length; // If no callback was specified, return the callback of the given type and name.

    if (arguments.length < 2) {
      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;

      return;
    } // If a type was specified, set the callback for the given type and name.
    // Otherwise, if a null callback was specified, remove callbacks of the given name.


    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);

    while (++i < n) {
      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);
    }

    return this;
  },
  copy: function () {
    var copy = {},
        _ = this._;

    for (var t in _) copy[t] = _[t].slice();

    return new Dispatch(copy);
  },
  call: function (type, that) {
    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  },
  apply: function (type, that, args) {
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  }
};

function get(type, name) {
  for (var i = 0, n = type.length, c; i < n; ++i) {
    if ((c = type[i]).name === name) {
      return c.value;
    }
  }
}

function set(type, name, callback) {
  for (var i = 0, n = type.length; i < n; ++i) {
    if (type[i].name === name) {
      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
      break;
    }
  }

  if (callback != null) type.push({
    name: name,
    value: callback
  });
  return type;
}

var _default = dispatch;
exports.default = _default;
},{}],"node_modules/d3-dispatch/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "dispatch", {
  enumerable: true,
  get: function () {
    return _dispatch.default;
  }
});

var _dispatch = _interopRequireDefault(require("./dispatch.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./dispatch.js":"node_modules/d3-dispatch/src/dispatch.js"}],"node_modules/d3-selection/src/namespaces.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.xhtml = void 0;
var xhtml = "http://www.w3.org/1999/xhtml";
exports.xhtml = xhtml;
var _default = {
  svg: "http://www.w3.org/2000/svg",
  xhtml: xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};
exports.default = _default;
},{}],"node_modules/d3-selection/src/namespace.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _namespaces = _interopRequireDefault(require("./namespaces"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(name) {
  var prefix = name += "",
      i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
  return _namespaces.default.hasOwnProperty(prefix) ? {
    space: _namespaces.default[prefix],
    local: name
  } : name;
}
},{"./namespaces":"node_modules/d3-selection/src/namespaces.js"}],"node_modules/d3-selection/src/creator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _namespace = _interopRequireDefault(require("./namespace"));

var _namespaces = require("./namespaces");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function creatorInherit(name) {
  return function () {
    var document = this.ownerDocument,
        uri = this.namespaceURI;
    return uri === _namespaces.xhtml && document.documentElement.namespaceURI === _namespaces.xhtml ? document.createElement(name) : document.createElementNS(uri, name);
  };
}

function creatorFixed(fullname) {
  return function () {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}

function _default(name) {
  var fullname = (0, _namespace.default)(name);
  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
}
},{"./namespace":"node_modules/d3-selection/src/namespace.js","./namespaces":"node_modules/d3-selection/src/namespaces.js"}],"node_modules/d3-selection/src/selector.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function none() {}

function _default(selector) {
  return selector == null ? none : function () {
    return this.querySelector(selector);
  };
}
},{}],"node_modules/d3-selection/src/selection/select.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _selector = _interopRequireDefault(require("../selector"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(select) {
  if (typeof select !== "function") select = (0, _selector.default)(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }

  return new _index.Selection(subgroups, this._parents);
}
},{"./index":"node_modules/d3-selection/src/selection/index.js","../selector":"node_modules/d3-selection/src/selector.js"}],"node_modules/d3-selection/src/selectorAll.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function empty() {
  return [];
}

function _default(selector) {
  return selector == null ? empty : function () {
    return this.querySelectorAll(selector);
  };
}
},{}],"node_modules/d3-selection/src/selection/selectAll.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _selectorAll = _interopRequireDefault(require("../selectorAll"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(select) {
  if (typeof select !== "function") select = (0, _selectorAll.default)(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }

  return new _index.Selection(subgroups, parents);
}
},{"./index":"node_modules/d3-selection/src/selection/index.js","../selectorAll":"node_modules/d3-selection/src/selectorAll.js"}],"node_modules/d3-selection/src/matcher.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(selector) {
  return function () {
    return this.matches(selector);
  };
}
},{}],"node_modules/d3-selection/src/selection/filter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _matcher = _interopRequireDefault(require("../matcher"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(match) {
  if (typeof match !== "function") match = (0, _matcher.default)(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new _index.Selection(subgroups, this._parents);
}
},{"./index":"node_modules/d3-selection/src/selection/index.js","../matcher":"node_modules/d3-selection/src/matcher.js"}],"node_modules/d3-selection/src/selection/sparse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(update) {
  return new Array(update.length);
}
},{}],"node_modules/d3-selection/src/selection/enter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.EnterNode = EnterNode;

var _sparse = _interopRequireDefault(require("./sparse"));

var _index = require("./index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return new _index.Selection(this._enter || this._groups.map(_sparse.default), this._parents);
}

function EnterNode(parent, datum) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum;
}

EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function (child) {
    return this._parent.insertBefore(child, this._next);
  },
  insertBefore: function (child, next) {
    return this._parent.insertBefore(child, next);
  },
  querySelector: function (selector) {
    return this._parent.querySelector(selector);
  },
  querySelectorAll: function (selector) {
    return this._parent.querySelectorAll(selector);
  }
};
},{"./sparse":"node_modules/d3-selection/src/selection/sparse.js","./index":"node_modules/d3-selection/src/selection/index.js"}],"node_modules/d3-selection/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-selection/src/selection/data.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _enter = require("./enter");

var _constant = _interopRequireDefault(require("../constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var keyPrefix = "$"; // Protect against keys like “__proto__”.

function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0,
      node,
      groupLength = group.length,
      dataLength = data.length; // Put any non-null nodes that fit into update.
  // Put any null nodes into enter.
  // Put any remaining data into enter.

  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new _enter.EnterNode(parent, data[i]);
    }
  } // Put any non-null nodes that don’t fit into exit.


  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}

function bindKey(parent, group, enter, update, exit, data, key) {
  var i,
      node,
      nodeByKeyValue = {},
      groupLength = group.length,
      dataLength = data.length,
      keyValues = new Array(groupLength),
      keyValue; // Compute the key for each node.
  // If multiple nodes have the same key, the duplicates are added to exit.

  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);

      if (keyValue in nodeByKeyValue) {
        exit[i] = node;
      } else {
        nodeByKeyValue[keyValue] = node;
      }
    }
  } // Compute the key for each datum.
  // If there a node associated with this key, join and add it to update.
  // If there is not (or the key is a duplicate), add it to enter.


  for (i = 0; i < dataLength; ++i) {
    keyValue = keyPrefix + key.call(parent, data[i], i, data);

    if (node = nodeByKeyValue[keyValue]) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue[keyValue] = null;
    } else {
      enter[i] = new _enter.EnterNode(parent, data[i]);
    }
  } // Add any remaining nodes that were not bound to data to exit.


  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && nodeByKeyValue[keyValues[i]] === node) {
      exit[i] = node;
    }
  }
}

function _default(value, key) {
  if (!value) {
    data = new Array(this.size()), j = -1;
    this.each(function (d) {
      data[++j] = d;
    });
    return data;
  }

  var bind = key ? bindKey : bindIndex,
      parents = this._parents,
      groups = this._groups;
  if (typeof value !== "function") value = (0, _constant.default)(value);

  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j],
        group = groups[j],
        groupLength = group.length,
        data = value.call(parent, parent && parent.__data__, j, parents),
        dataLength = data.length,
        enterGroup = enter[j] = new Array(dataLength),
        updateGroup = update[j] = new Array(dataLength),
        exitGroup = exit[j] = new Array(groupLength);
    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key); // Now connect the enter nodes to their following update node, such that
    // appendChild can insert the materialized enter node before this node,
    // rather than at the end of the parent node.

    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1) i1 = i0 + 1;

        while (!(next = updateGroup[i1]) && ++i1 < dataLength);

        previous._next = next || null;
      }
    }
  }

  update = new _index.Selection(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}
},{"./index":"node_modules/d3-selection/src/selection/index.js","./enter":"node_modules/d3-selection/src/selection/enter.js","../constant":"node_modules/d3-selection/src/constant.js"}],"node_modules/d3-selection/src/selection/exit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sparse = _interopRequireDefault(require("./sparse"));

var _index = require("./index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return new _index.Selection(this._exit || this._groups.map(_sparse.default), this._parents);
}
},{"./sparse":"node_modules/d3-selection/src/selection/sparse.js","./index":"node_modules/d3-selection/src/selection/index.js"}],"node_modules/d3-selection/src/selection/join.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(onenter, onupdate, onexit) {
  var enter = this.enter(),
      update = this,
      exit = this.exit();
  enter = typeof onenter === "function" ? onenter(enter) : enter.append(onenter + "");
  if (onupdate != null) update = onupdate(update);
  if (onexit == null) exit.remove();else onexit(exit);
  return enter && update ? enter.merge(update).order() : update;
}
},{}],"node_modules/d3-selection/src/selection/merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

function _default(selection) {
  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new _index.Selection(merges, this._parents);
}
},{"./index":"node_modules/d3-selection/src/selection/index.js"}],"node_modules/d3-selection/src/selection/order.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
      if (node = group[i]) {
        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }

  return this;
}
},{}],"node_modules/d3-selection/src/selection/sort.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

function _default(compare) {
  if (!compare) compare = ascending;

  function compareNode(a, b) {
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
  }

  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }

    sortgroup.sort(compareNode);
  }

  return new _index.Selection(sortgroups, this._parents).order();
}

function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
},{"./index":"node_modules/d3-selection/src/selection/index.js"}],"node_modules/d3-selection/src/selection/call.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}
},{}],"node_modules/d3-selection/src/selection/nodes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var nodes = new Array(this.size()),
      i = -1;
  this.each(function () {
    nodes[++i] = this;
  });
  return nodes;
}
},{}],"node_modules/d3-selection/src/selection/node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node) return node;
    }
  }

  return null;
}
},{}],"node_modules/d3-selection/src/selection/size.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var size = 0;
  this.each(function () {
    ++size;
  });
  return size;
}
},{}],"node_modules/d3-selection/src/selection/empty.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  return !this.node();
}
},{}],"node_modules/d3-selection/src/selection/each.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(callback) {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) callback.call(node, node.__data__, i, group);
    }
  }

  return this;
}
},{}],"node_modules/d3-selection/src/selection/attr.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _namespace = _interopRequireDefault(require("../namespace"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function attrRemove(name) {
  return function () {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function () {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, value) {
  return function () {
    this.setAttribute(name, value);
  };
}

function attrConstantNS(fullname, value) {
  return function () {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}

function attrFunction(name, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttribute(name);else this.setAttribute(name, v);
  };
}

function attrFunctionNS(fullname, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);else this.setAttributeNS(fullname.space, fullname.local, v);
  };
}

function _default(name, value) {
  var fullname = (0, _namespace.default)(name);

  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }

  return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
}
},{"../namespace":"node_modules/d3-selection/src/namespace.js"}],"node_modules/d3-selection/src/window.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(node) {
  return node.ownerDocument && node.ownerDocument.defaultView || // node is a Node
  node.document && node // node is a Window
  || node.defaultView; // node is a Document
}
},{}],"node_modules/d3-selection/src/selection/style.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.styleValue = styleValue;

var _window = _interopRequireDefault(require("../window"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function styleRemove(name) {
  return function () {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, value, priority) {
  return function () {
    this.style.setProperty(name, value, priority);
  };
}

function styleFunction(name, value, priority) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.style.removeProperty(name);else this.style.setProperty(name, v, priority);
  };
}

function _default(name, value, priority) {
  return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
}

function styleValue(node, name) {
  return node.style.getPropertyValue(name) || (0, _window.default)(node).getComputedStyle(node, null).getPropertyValue(name);
}
},{"../window":"node_modules/d3-selection/src/window.js"}],"node_modules/d3-selection/src/selection/property.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function propertyRemove(name) {
  return function () {
    delete this[name];
  };
}

function propertyConstant(name, value) {
  return function () {
    this[name] = value;
  };
}

function propertyFunction(name, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) delete this[name];else this[name] = v;
  };
}

function _default(name, value) {
  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
}
},{}],"node_modules/d3-selection/src/selection/classed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function classArray(string) {
  return string.trim().split(/^|\s+/);
}

function classList(node) {
  return node.classList || new ClassList(node);
}

function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}

ClassList.prototype = {
  add: function (name) {
    var i = this._names.indexOf(name);

    if (i < 0) {
      this._names.push(name);

      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function (name) {
    var i = this._names.indexOf(name);

    if (i >= 0) {
      this._names.splice(i, 1);

      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function (name) {
    return this._names.indexOf(name) >= 0;
  }
};

function classedAdd(node, names) {
  var list = classList(node),
      i = -1,
      n = names.length;

  while (++i < n) list.add(names[i]);
}

function classedRemove(node, names) {
  var list = classList(node),
      i = -1,
      n = names.length;

  while (++i < n) list.remove(names[i]);
}

function classedTrue(names) {
  return function () {
    classedAdd(this, names);
  };
}

function classedFalse(names) {
  return function () {
    classedRemove(this, names);
  };
}

function classedFunction(names, value) {
  return function () {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}

function _default(name, value) {
  var names = classArray(name + "");

  if (arguments.length < 2) {
    var list = classList(this.node()),
        i = -1,
        n = names.length;

    while (++i < n) if (!list.contains(names[i])) return false;

    return true;
  }

  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
}
},{}],"node_modules/d3-selection/src/selection/text.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function textRemove() {
  this.textContent = "";
}

function textConstant(value) {
  return function () {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function () {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}

function _default(value) {
  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
}
},{}],"node_modules/d3-selection/src/selection/html.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function htmlRemove() {
  this.innerHTML = "";
}

function htmlConstant(value) {
  return function () {
    this.innerHTML = value;
  };
}

function htmlFunction(value) {
  return function () {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}

function _default(value) {
  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
}
},{}],"node_modules/d3-selection/src/selection/raise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function raise() {
  if (this.nextSibling) this.parentNode.appendChild(this);
}

function _default() {
  return this.each(raise);
}
},{}],"node_modules/d3-selection/src/selection/lower.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function lower() {
  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}

function _default() {
  return this.each(lower);
}
},{}],"node_modules/d3-selection/src/selection/append.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _creator = _interopRequireDefault(require("../creator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(name) {
  var create = typeof name === "function" ? name : (0, _creator.default)(name);
  return this.select(function () {
    return this.appendChild(create.apply(this, arguments));
  });
}
},{"../creator":"node_modules/d3-selection/src/creator.js"}],"node_modules/d3-selection/src/selection/insert.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _creator = _interopRequireDefault(require("../creator"));

var _selector = _interopRequireDefault(require("../selector"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function constantNull() {
  return null;
}

function _default(name, before) {
  var create = typeof name === "function" ? name : (0, _creator.default)(name),
      select = before == null ? constantNull : typeof before === "function" ? before : (0, _selector.default)(before);
  return this.select(function () {
    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
  });
}
},{"../creator":"node_modules/d3-selection/src/creator.js","../selector":"node_modules/d3-selection/src/selector.js"}],"node_modules/d3-selection/src/selection/remove.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function remove() {
  var parent = this.parentNode;
  if (parent) parent.removeChild(this);
}

function _default() {
  return this.each(remove);
}
},{}],"node_modules/d3-selection/src/selection/clone.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function selection_cloneShallow() {
  var clone = this.cloneNode(false),
      parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}

function selection_cloneDeep() {
  var clone = this.cloneNode(true),
      parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}

function _default(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}
},{}],"node_modules/d3-selection/src/selection/datum.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(value) {
  return arguments.length ? this.property("__data__", value) : this.node().__data__;
}
},{}],"node_modules/d3-selection/src/selection/on.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.customEvent = customEvent;
exports.event = void 0;
var filterEvents = {};
var event = null;
exports.event = event;

if (typeof document !== "undefined") {
  var element = document.documentElement;

  if (!("onmouseenter" in element)) {
    filterEvents = {
      mouseenter: "mouseover",
      mouseleave: "mouseout"
    };
  }
}

function filterContextListener(listener, index, group) {
  listener = contextListener(listener, index, group);
  return function (event) {
    var related = event.relatedTarget;

    if (!related || related !== this && !(related.compareDocumentPosition(this) & 8)) {
      listener.call(this, event);
    }
  };
}

function contextListener(listener, index, group) {
  return function (event1) {
    var event0 = event; // Events can be reentrant (e.g., focus).

    exports.event = event = event1;

    try {
      listener.call(this, this.__data__, index, group);
    } finally {
      exports.event = event = event0;
    }
  };
}

function parseTypenames(typenames) {
  return typenames.trim().split(/^|\s+/).map(function (t) {
    var name = "",
        i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    return {
      type: t,
      name: name
    };
  });
}

function onRemove(typename) {
  return function () {
    var on = this.__on;
    if (!on) return;

    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
      } else {
        on[++i] = o;
      }
    }

    if (++i) on.length = i;else delete this.__on;
  };
}

function onAdd(typename, value, capture) {
  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
  return function (d, i, group) {
    var on = this.__on,
        o,
        listener = wrap(value, i, group);
    if (on) for (var j = 0, m = on.length; j < m; ++j) {
      if ((o = on[j]).type === typename.type && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
        this.addEventListener(o.type, o.listener = listener, o.capture = capture);
        o.value = value;
        return;
      }
    }
    this.addEventListener(typename.type, listener, capture);
    o = {
      type: typename.type,
      name: typename.name,
      value: value,
      listener: listener,
      capture: capture
    };
    if (!on) this.__on = [o];else on.push(o);
  };
}

function _default(typename, value, capture) {
  var typenames = parseTypenames(typename + ""),
      i,
      n = typenames.length,
      t;

  if (arguments.length < 2) {
    var on = this.node().__on;

    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
      for (i = 0, o = on[j]; i < n; ++i) {
        if ((t = typenames[i]).type === o.type && t.name === o.name) {
          return o.value;
        }
      }
    }
    return;
  }

  on = value ? onAdd : onRemove;
  if (capture == null) capture = false;

  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));

  return this;
}

function customEvent(event1, listener, that, args) {
  var event0 = event;
  event1.sourceEvent = event;
  exports.event = event = event1;

  try {
    return listener.apply(that, args);
  } finally {
    exports.event = event = event0;
  }
}
},{}],"node_modules/d3-selection/src/selection/dispatch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _window = _interopRequireDefault(require("../window"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function dispatchEvent(node, type, params) {
  var window = (0, _window.default)(node),
      event = window.CustomEvent;

  if (typeof event === "function") {
    event = new event(type, params);
  } else {
    event = window.document.createEvent("Event");
    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;else event.initEvent(type, false, false);
  }

  node.dispatchEvent(event);
}

function dispatchConstant(type, params) {
  return function () {
    return dispatchEvent(this, type, params);
  };
}

function dispatchFunction(type, params) {
  return function () {
    return dispatchEvent(this, type, params.apply(this, arguments));
  };
}

function _default(type, params) {
  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
}
},{"../window":"node_modules/d3-selection/src/window.js"}],"node_modules/d3-selection/src/selection/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Selection = Selection;
exports.default = exports.root = void 0;

var _select = _interopRequireDefault(require("./select"));

var _selectAll = _interopRequireDefault(require("./selectAll"));

var _filter = _interopRequireDefault(require("./filter"));

var _data = _interopRequireDefault(require("./data"));

var _enter = _interopRequireDefault(require("./enter"));

var _exit = _interopRequireDefault(require("./exit"));

var _join = _interopRequireDefault(require("./join"));

var _merge = _interopRequireDefault(require("./merge"));

var _order = _interopRequireDefault(require("./order"));

var _sort = _interopRequireDefault(require("./sort"));

var _call = _interopRequireDefault(require("./call"));

var _nodes = _interopRequireDefault(require("./nodes"));

var _node = _interopRequireDefault(require("./node"));

var _size = _interopRequireDefault(require("./size"));

var _empty = _interopRequireDefault(require("./empty"));

var _each = _interopRequireDefault(require("./each"));

var _attr = _interopRequireDefault(require("./attr"));

var _style = _interopRequireDefault(require("./style"));

var _property = _interopRequireDefault(require("./property"));

var _classed = _interopRequireDefault(require("./classed"));

var _text = _interopRequireDefault(require("./text"));

var _html = _interopRequireDefault(require("./html"));

var _raise = _interopRequireDefault(require("./raise"));

var _lower = _interopRequireDefault(require("./lower"));

var _append = _interopRequireDefault(require("./append"));

var _insert = _interopRequireDefault(require("./insert"));

var _remove = _interopRequireDefault(require("./remove"));

var _clone = _interopRequireDefault(require("./clone"));

var _datum = _interopRequireDefault(require("./datum"));

var _on = _interopRequireDefault(require("./on"));

var _dispatch = _interopRequireDefault(require("./dispatch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var root = [null];
exports.root = root;

function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}

function selection() {
  return new Selection([[document.documentElement]], root);
}

Selection.prototype = selection.prototype = {
  constructor: Selection,
  select: _select.default,
  selectAll: _selectAll.default,
  filter: _filter.default,
  data: _data.default,
  enter: _enter.default,
  exit: _exit.default,
  join: _join.default,
  merge: _merge.default,
  order: _order.default,
  sort: _sort.default,
  call: _call.default,
  nodes: _nodes.default,
  node: _node.default,
  size: _size.default,
  empty: _empty.default,
  each: _each.default,
  attr: _attr.default,
  style: _style.default,
  property: _property.default,
  classed: _classed.default,
  text: _text.default,
  html: _html.default,
  raise: _raise.default,
  lower: _lower.default,
  append: _append.default,
  insert: _insert.default,
  remove: _remove.default,
  clone: _clone.default,
  datum: _datum.default,
  on: _on.default,
  dispatch: _dispatch.default
};
var _default = selection;
exports.default = _default;
},{"./select":"node_modules/d3-selection/src/selection/select.js","./selectAll":"node_modules/d3-selection/src/selection/selectAll.js","./filter":"node_modules/d3-selection/src/selection/filter.js","./data":"node_modules/d3-selection/src/selection/data.js","./enter":"node_modules/d3-selection/src/selection/enter.js","./exit":"node_modules/d3-selection/src/selection/exit.js","./join":"node_modules/d3-selection/src/selection/join.js","./merge":"node_modules/d3-selection/src/selection/merge.js","./order":"node_modules/d3-selection/src/selection/order.js","./sort":"node_modules/d3-selection/src/selection/sort.js","./call":"node_modules/d3-selection/src/selection/call.js","./nodes":"node_modules/d3-selection/src/selection/nodes.js","./node":"node_modules/d3-selection/src/selection/node.js","./size":"node_modules/d3-selection/src/selection/size.js","./empty":"node_modules/d3-selection/src/selection/empty.js","./each":"node_modules/d3-selection/src/selection/each.js","./attr":"node_modules/d3-selection/src/selection/attr.js","./style":"node_modules/d3-selection/src/selection/style.js","./property":"node_modules/d3-selection/src/selection/property.js","./classed":"node_modules/d3-selection/src/selection/classed.js","./text":"node_modules/d3-selection/src/selection/text.js","./html":"node_modules/d3-selection/src/selection/html.js","./raise":"node_modules/d3-selection/src/selection/raise.js","./lower":"node_modules/d3-selection/src/selection/lower.js","./append":"node_modules/d3-selection/src/selection/append.js","./insert":"node_modules/d3-selection/src/selection/insert.js","./remove":"node_modules/d3-selection/src/selection/remove.js","./clone":"node_modules/d3-selection/src/selection/clone.js","./datum":"node_modules/d3-selection/src/selection/datum.js","./on":"node_modules/d3-selection/src/selection/on.js","./dispatch":"node_modules/d3-selection/src/selection/dispatch.js"}],"node_modules/d3-selection/src/select.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./selection/index");

function _default(selector) {
  return typeof selector === "string" ? new _index.Selection([[document.querySelector(selector)]], [document.documentElement]) : new _index.Selection([[selector]], _index.root);
}
},{"./selection/index":"node_modules/d3-selection/src/selection/index.js"}],"node_modules/d3-selection/src/create.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _creator = _interopRequireDefault(require("./creator"));

var _select = _interopRequireDefault(require("./select"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(name) {
  return (0, _select.default)((0, _creator.default)(name).call(document.documentElement));
}
},{"./creator":"node_modules/d3-selection/src/creator.js","./select":"node_modules/d3-selection/src/select.js"}],"node_modules/d3-selection/src/local.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = local;
var nextId = 0;

function local() {
  return new Local();
}

function Local() {
  this._ = "@" + (++nextId).toString(36);
}

Local.prototype = local.prototype = {
  constructor: Local,
  get: function (node) {
    var id = this._;

    while (!(id in node)) if (!(node = node.parentNode)) return;

    return node[id];
  },
  set: function (node, value) {
    return node[this._] = value;
  },
  remove: function (node) {
    return this._ in node && delete node[this._];
  },
  toString: function () {
    return this._;
  }
};
},{}],"node_modules/d3-selection/src/sourceEvent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _on = require("./selection/on");

function _default() {
  var current = _on.event,
      source;

  while (source = current.sourceEvent) current = source;

  return current;
}
},{"./selection/on":"node_modules/d3-selection/src/selection/on.js"}],"node_modules/d3-selection/src/point.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(node, event) {
  var svg = node.ownerSVGElement || node;

  if (svg.createSVGPoint) {
    var point = svg.createSVGPoint();
    point.x = event.clientX, point.y = event.clientY;
    point = point.matrixTransform(node.getScreenCTM().inverse());
    return [point.x, point.y];
  }

  var rect = node.getBoundingClientRect();
  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
}
},{}],"node_modules/d3-selection/src/mouse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sourceEvent = _interopRequireDefault(require("./sourceEvent"));

var _point = _interopRequireDefault(require("./point"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(node) {
  var event = (0, _sourceEvent.default)();
  if (event.changedTouches) event = event.changedTouches[0];
  return (0, _point.default)(node, event);
}
},{"./sourceEvent":"node_modules/d3-selection/src/sourceEvent.js","./point":"node_modules/d3-selection/src/point.js"}],"node_modules/d3-selection/src/selectAll.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./selection/index");

function _default(selector) {
  return typeof selector === "string" ? new _index.Selection([document.querySelectorAll(selector)], [document.documentElement]) : new _index.Selection([selector == null ? [] : selector], _index.root);
}
},{"./selection/index":"node_modules/d3-selection/src/selection/index.js"}],"node_modules/d3-selection/src/touch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sourceEvent = _interopRequireDefault(require("./sourceEvent"));

var _point = _interopRequireDefault(require("./point"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(node, touches, identifier) {
  if (arguments.length < 3) identifier = touches, touches = (0, _sourceEvent.default)().changedTouches;

  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
    if ((touch = touches[i]).identifier === identifier) {
      return (0, _point.default)(node, touch);
    }
  }

  return null;
}
},{"./sourceEvent":"node_modules/d3-selection/src/sourceEvent.js","./point":"node_modules/d3-selection/src/point.js"}],"node_modules/d3-selection/src/touches.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sourceEvent = _interopRequireDefault(require("./sourceEvent"));

var _point = _interopRequireDefault(require("./point"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(node, touches) {
  if (touches == null) touches = (0, _sourceEvent.default)().touches;

  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
    points[i] = (0, _point.default)(node, touches[i]);
  }

  return points;
}
},{"./sourceEvent":"node_modules/d3-selection/src/sourceEvent.js","./point":"node_modules/d3-selection/src/point.js"}],"node_modules/d3-selection/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "create", {
  enumerable: true,
  get: function () {
    return _create.default;
  }
});
Object.defineProperty(exports, "creator", {
  enumerable: true,
  get: function () {
    return _creator.default;
  }
});
Object.defineProperty(exports, "local", {
  enumerable: true,
  get: function () {
    return _local.default;
  }
});
Object.defineProperty(exports, "matcher", {
  enumerable: true,
  get: function () {
    return _matcher.default;
  }
});
Object.defineProperty(exports, "mouse", {
  enumerable: true,
  get: function () {
    return _mouse.default;
  }
});
Object.defineProperty(exports, "namespace", {
  enumerable: true,
  get: function () {
    return _namespace.default;
  }
});
Object.defineProperty(exports, "namespaces", {
  enumerable: true,
  get: function () {
    return _namespaces.default;
  }
});
Object.defineProperty(exports, "clientPoint", {
  enumerable: true,
  get: function () {
    return _point.default;
  }
});
Object.defineProperty(exports, "select", {
  enumerable: true,
  get: function () {
    return _select.default;
  }
});
Object.defineProperty(exports, "selectAll", {
  enumerable: true,
  get: function () {
    return _selectAll.default;
  }
});
Object.defineProperty(exports, "selection", {
  enumerable: true,
  get: function () {
    return _index.default;
  }
});
Object.defineProperty(exports, "selector", {
  enumerable: true,
  get: function () {
    return _selector.default;
  }
});
Object.defineProperty(exports, "selectorAll", {
  enumerable: true,
  get: function () {
    return _selectorAll.default;
  }
});
Object.defineProperty(exports, "style", {
  enumerable: true,
  get: function () {
    return _style.styleValue;
  }
});
Object.defineProperty(exports, "touch", {
  enumerable: true,
  get: function () {
    return _touch.default;
  }
});
Object.defineProperty(exports, "touches", {
  enumerable: true,
  get: function () {
    return _touches.default;
  }
});
Object.defineProperty(exports, "window", {
  enumerable: true,
  get: function () {
    return _window.default;
  }
});
Object.defineProperty(exports, "event", {
  enumerable: true,
  get: function () {
    return _on.event;
  }
});
Object.defineProperty(exports, "customEvent", {
  enumerable: true,
  get: function () {
    return _on.customEvent;
  }
});

var _create = _interopRequireDefault(require("./create"));

var _creator = _interopRequireDefault(require("./creator"));

var _local = _interopRequireDefault(require("./local"));

var _matcher = _interopRequireDefault(require("./matcher"));

var _mouse = _interopRequireDefault(require("./mouse"));

var _namespace = _interopRequireDefault(require("./namespace"));

var _namespaces = _interopRequireDefault(require("./namespaces"));

var _point = _interopRequireDefault(require("./point"));

var _select = _interopRequireDefault(require("./select"));

var _selectAll = _interopRequireDefault(require("./selectAll"));

var _index = _interopRequireDefault(require("./selection/index"));

var _selector = _interopRequireDefault(require("./selector"));

var _selectorAll = _interopRequireDefault(require("./selectorAll"));

var _style = require("./selection/style");

var _touch = _interopRequireDefault(require("./touch"));

var _touches = _interopRequireDefault(require("./touches"));

var _window = _interopRequireDefault(require("./window"));

var _on = require("./selection/on");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./create":"node_modules/d3-selection/src/create.js","./creator":"node_modules/d3-selection/src/creator.js","./local":"node_modules/d3-selection/src/local.js","./matcher":"node_modules/d3-selection/src/matcher.js","./mouse":"node_modules/d3-selection/src/mouse.js","./namespace":"node_modules/d3-selection/src/namespace.js","./namespaces":"node_modules/d3-selection/src/namespaces.js","./point":"node_modules/d3-selection/src/point.js","./select":"node_modules/d3-selection/src/select.js","./selectAll":"node_modules/d3-selection/src/selectAll.js","./selection/index":"node_modules/d3-selection/src/selection/index.js","./selector":"node_modules/d3-selection/src/selector.js","./selectorAll":"node_modules/d3-selection/src/selectorAll.js","./selection/style":"node_modules/d3-selection/src/selection/style.js","./touch":"node_modules/d3-selection/src/touch.js","./touches":"node_modules/d3-selection/src/touches.js","./window":"node_modules/d3-selection/src/window.js","./selection/on":"node_modules/d3-selection/src/selection/on.js"}],"node_modules/d3-drag/src/noevent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nopropagation = nopropagation;
exports.default = _default;

var _d3Selection = require("d3-selection");

function nopropagation() {
  _d3Selection.event.stopImmediatePropagation();
}

function _default() {
  _d3Selection.event.preventDefault();

  _d3Selection.event.stopImmediatePropagation();
}
},{"d3-selection":"node_modules/d3-selection/src/index.js"}],"node_modules/d3-drag/src/nodrag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.yesdrag = yesdrag;

var _d3Selection = require("d3-selection");

var _noevent = _interopRequireDefault(require("./noevent.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(view) {
  var root = view.document.documentElement,
      selection = (0, _d3Selection.select)(view).on("dragstart.drag", _noevent.default, true);

  if ("onselectstart" in root) {
    selection.on("selectstart.drag", _noevent.default, true);
  } else {
    root.__noselect = root.style.MozUserSelect;
    root.style.MozUserSelect = "none";
  }
}

function yesdrag(view, noclick) {
  var root = view.document.documentElement,
      selection = (0, _d3Selection.select)(view).on("dragstart.drag", null);

  if (noclick) {
    selection.on("click.drag", _noevent.default, true);
    setTimeout(function () {
      selection.on("click.drag", null);
    }, 0);
  }

  if ("onselectstart" in root) {
    selection.on("selectstart.drag", null);
  } else {
    root.style.MozUserSelect = root.__noselect;
    delete root.__noselect;
  }
}
},{"d3-selection":"node_modules/d3-selection/src/index.js","./noevent.js":"node_modules/d3-drag/src/noevent.js"}],"node_modules/d3-drag/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-drag/src/event.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DragEvent;

function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {
  this.target = target;
  this.type = type;
  this.subject = subject;
  this.identifier = id;
  this.active = active;
  this.x = x;
  this.y = y;
  this.dx = dx;
  this.dy = dy;
  this._ = dispatch;
}

DragEvent.prototype.on = function () {
  var value = this._.on.apply(this._, arguments);

  return value === this._ ? this : value;
};
},{}],"node_modules/d3-drag/src/drag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Dispatch = require("d3-dispatch");

var _d3Selection = require("d3-selection");

var _nodrag = _interopRequireWildcard(require("./nodrag.js"));

var _noevent = _interopRequireWildcard(require("./noevent.js"));

var _constant = _interopRequireDefault(require("./constant.js"));

var _event = _interopRequireDefault(require("./event.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Ignore right-click, since that should open the context menu.
function defaultFilter() {
  return !_d3Selection.event.ctrlKey && !_d3Selection.event.button;
}

function defaultContainer() {
  return this.parentNode;
}

function defaultSubject(d) {
  return d == null ? {
    x: _d3Selection.event.x,
    y: _d3Selection.event.y
  } : d;
}

function defaultTouchable() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}

function _default() {
  var filter = defaultFilter,
      container = defaultContainer,
      subject = defaultSubject,
      touchable = defaultTouchable,
      gestures = {},
      listeners = (0, _d3Dispatch.dispatch)("start", "drag", "end"),
      active = 0,
      mousedownx,
      mousedowny,
      mousemoving,
      touchending,
      clickDistance2 = 0;

  function drag(selection) {
    selection.on("mousedown.drag", mousedowned).filter(touchable).on("touchstart.drag", touchstarted).on("touchmove.drag", touchmoved).on("touchend.drag touchcancel.drag", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }

  function mousedowned() {
    if (touchending || !filter.apply(this, arguments)) return;
    var gesture = beforestart("mouse", container.apply(this, arguments), _d3Selection.mouse, this, arguments);
    if (!gesture) return;
    (0, _d3Selection.select)(_d3Selection.event.view).on("mousemove.drag", mousemoved, true).on("mouseup.drag", mouseupped, true);
    (0, _nodrag.default)(_d3Selection.event.view);
    (0, _noevent.nopropagation)();
    mousemoving = false;
    mousedownx = _d3Selection.event.clientX;
    mousedowny = _d3Selection.event.clientY;
    gesture("start");
  }

  function mousemoved() {
    (0, _noevent.default)();

    if (!mousemoving) {
      var dx = _d3Selection.event.clientX - mousedownx,
          dy = _d3Selection.event.clientY - mousedowny;
      mousemoving = dx * dx + dy * dy > clickDistance2;
    }

    gestures.mouse("drag");
  }

  function mouseupped() {
    (0, _d3Selection.select)(_d3Selection.event.view).on("mousemove.drag mouseup.drag", null);
    (0, _nodrag.yesdrag)(_d3Selection.event.view, mousemoving);
    (0, _noevent.default)();
    gestures.mouse("end");
  }

  function touchstarted() {
    if (!filter.apply(this, arguments)) return;
    var touches = _d3Selection.event.changedTouches,
        c = container.apply(this, arguments),
        n = touches.length,
        i,
        gesture;

    for (i = 0; i < n; ++i) {
      if (gesture = beforestart(touches[i].identifier, c, _d3Selection.touch, this, arguments)) {
        (0, _noevent.nopropagation)();
        gesture("start");
      }
    }
  }

  function touchmoved() {
    var touches = _d3Selection.event.changedTouches,
        n = touches.length,
        i,
        gesture;

    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        (0, _noevent.default)();
        gesture("drag");
      }
    }
  }

  function touchended() {
    var touches = _d3Selection.event.changedTouches,
        n = touches.length,
        i,
        gesture;
    if (touchending) clearTimeout(touchending);
    touchending = setTimeout(function () {
      touchending = null;
    }, 500); // Ghost clicks are delayed!

    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        (0, _noevent.nopropagation)();
        gesture("end");
      }
    }
  }

  function beforestart(id, container, point, that, args) {
    var p = point(container, id),
        s,
        dx,
        dy,
        sublisteners = listeners.copy();
    if (!(0, _d3Selection.customEvent)(new _event.default(drag, "beforestart", s, id, active, p[0], p[1], 0, 0, sublisteners), function () {
      if ((_d3Selection.event.subject = s = subject.apply(that, args)) == null) return false;
      dx = s.x - p[0] || 0;
      dy = s.y - p[1] || 0;
      return true;
    })) return;
    return function gesture(type) {
      var p0 = p,
          n;

      switch (type) {
        case "start":
          gestures[id] = gesture, n = active++;
          break;

        case "end":
          delete gestures[id], --active;
        // nobreak

        case "drag":
          p = point(container, id), n = active;
          break;
      }

      (0, _d3Selection.customEvent)(new _event.default(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);
    };
  }

  drag.filter = function (_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : (0, _constant.default)(!!_), drag) : filter;
  };

  drag.container = function (_) {
    return arguments.length ? (container = typeof _ === "function" ? _ : (0, _constant.default)(_), drag) : container;
  };

  drag.subject = function (_) {
    return arguments.length ? (subject = typeof _ === "function" ? _ : (0, _constant.default)(_), drag) : subject;
  };

  drag.touchable = function (_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : (0, _constant.default)(!!_), drag) : touchable;
  };

  drag.on = function () {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? drag : value;
  };

  drag.clickDistance = function (_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);
  };

  return drag;
}
},{"d3-dispatch":"node_modules/d3-dispatch/src/index.js","d3-selection":"node_modules/d3-selection/src/index.js","./nodrag.js":"node_modules/d3-drag/src/nodrag.js","./noevent.js":"node_modules/d3-drag/src/noevent.js","./constant.js":"node_modules/d3-drag/src/constant.js","./event.js":"node_modules/d3-drag/src/event.js"}],"node_modules/d3-drag/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "drag", {
  enumerable: true,
  get: function () {
    return _drag.default;
  }
});
Object.defineProperty(exports, "dragDisable", {
  enumerable: true,
  get: function () {
    return _nodrag.default;
  }
});
Object.defineProperty(exports, "dragEnable", {
  enumerable: true,
  get: function () {
    return _nodrag.yesdrag;
  }
});

var _drag = _interopRequireDefault(require("./drag.js"));

var _nodrag = _interopRequireWildcard(require("./nodrag.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./drag.js":"node_modules/d3-drag/src/drag.js","./nodrag.js":"node_modules/d3-drag/src/nodrag.js"}],"node_modules/d3-color/src/define.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.extend = extend;

function _default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}

function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);

  for (var key in definition) prototype[key] = definition[key];

  return prototype;
}
},{}],"node_modules/d3-color/src/color.js":[function(require,module,exports) {

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Color = Color;
exports.default = color;
exports.rgbConvert = rgbConvert;
exports.rgb = rgb;
exports.Rgb = Rgb;
exports.hslConvert = hslConvert;
exports.hsl = hsl;
exports.brighter = exports.darker = void 0;

var _define = _interopRequireWildcard(require("./define.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function Color() {}

var darker = 0.7;
exports.darker = darker;
var brighter = 1 / darker;
exports.brighter = brighter;
var reI = "\\s*([+-]?\\d+)\\s*",
    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
    reHex = /^#([0-9a-f]{3,8})$/,
    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
var named = {
  aliceblue: 0xf0f8ff,
  antiquewhite: 0xfaebd7,
  aqua: 0x00ffff,
  aquamarine: 0x7fffd4,
  azure: 0xf0ffff,
  beige: 0xf5f5dc,
  bisque: 0xffe4c4,
  black: 0x000000,
  blanchedalmond: 0xffebcd,
  blue: 0x0000ff,
  blueviolet: 0x8a2be2,
  brown: 0xa52a2a,
  burlywood: 0xdeb887,
  cadetblue: 0x5f9ea0,
  chartreuse: 0x7fff00,
  chocolate: 0xd2691e,
  coral: 0xff7f50,
  cornflowerblue: 0x6495ed,
  cornsilk: 0xfff8dc,
  crimson: 0xdc143c,
  cyan: 0x00ffff,
  darkblue: 0x00008b,
  darkcyan: 0x008b8b,
  darkgoldenrod: 0xb8860b,
  darkgray: 0xa9a9a9,
  darkgreen: 0x006400,
  darkgrey: 0xa9a9a9,
  darkkhaki: 0xbdb76b,
  darkmagenta: 0x8b008b,
  darkolivegreen: 0x556b2f,
  darkorange: 0xff8c00,
  darkorchid: 0x9932cc,
  darkred: 0x8b0000,
  darksalmon: 0xe9967a,
  darkseagreen: 0x8fbc8f,
  darkslateblue: 0x483d8b,
  darkslategray: 0x2f4f4f,
  darkslategrey: 0x2f4f4f,
  darkturquoise: 0x00ced1,
  darkviolet: 0x9400d3,
  deeppink: 0xff1493,
  deepskyblue: 0x00bfff,
  dimgray: 0x696969,
  dimgrey: 0x696969,
  dodgerblue: 0x1e90ff,
  firebrick: 0xb22222,
  floralwhite: 0xfffaf0,
  forestgreen: 0x228b22,
  fuchsia: 0xff00ff,
  gainsboro: 0xdcdcdc,
  ghostwhite: 0xf8f8ff,
  gold: 0xffd700,
  goldenrod: 0xdaa520,
  gray: 0x808080,
  green: 0x008000,
  greenyellow: 0xadff2f,
  grey: 0x808080,
  honeydew: 0xf0fff0,
  hotpink: 0xff69b4,
  indianred: 0xcd5c5c,
  indigo: 0x4b0082,
  ivory: 0xfffff0,
  khaki: 0xf0e68c,
  lavender: 0xe6e6fa,
  lavenderblush: 0xfff0f5,
  lawngreen: 0x7cfc00,
  lemonchiffon: 0xfffacd,
  lightblue: 0xadd8e6,
  lightcoral: 0xf08080,
  lightcyan: 0xe0ffff,
  lightgoldenrodyellow: 0xfafad2,
  lightgray: 0xd3d3d3,
  lightgreen: 0x90ee90,
  lightgrey: 0xd3d3d3,
  lightpink: 0xffb6c1,
  lightsalmon: 0xffa07a,
  lightseagreen: 0x20b2aa,
  lightskyblue: 0x87cefa,
  lightslategray: 0x778899,
  lightslategrey: 0x778899,
  lightsteelblue: 0xb0c4de,
  lightyellow: 0xffffe0,
  lime: 0x00ff00,
  limegreen: 0x32cd32,
  linen: 0xfaf0e6,
  magenta: 0xff00ff,
  maroon: 0x800000,
  mediumaquamarine: 0x66cdaa,
  mediumblue: 0x0000cd,
  mediumorchid: 0xba55d3,
  mediumpurple: 0x9370db,
  mediumseagreen: 0x3cb371,
  mediumslateblue: 0x7b68ee,
  mediumspringgreen: 0x00fa9a,
  mediumturquoise: 0x48d1cc,
  mediumvioletred: 0xc71585,
  midnightblue: 0x191970,
  mintcream: 0xf5fffa,
  mistyrose: 0xffe4e1,
  moccasin: 0xffe4b5,
  navajowhite: 0xffdead,
  navy: 0x000080,
  oldlace: 0xfdf5e6,
  olive: 0x808000,
  olivedrab: 0x6b8e23,
  orange: 0xffa500,
  orangered: 0xff4500,
  orchid: 0xda70d6,
  palegoldenrod: 0xeee8aa,
  palegreen: 0x98fb98,
  paleturquoise: 0xafeeee,
  palevioletred: 0xdb7093,
  papayawhip: 0xffefd5,
  peachpuff: 0xffdab9,
  peru: 0xcd853f,
  pink: 0xffc0cb,
  plum: 0xdda0dd,
  powderblue: 0xb0e0e6,
  purple: 0x800080,
  rebeccapurple: 0x663399,
  red: 0xff0000,
  rosybrown: 0xbc8f8f,
  royalblue: 0x4169e1,
  saddlebrown: 0x8b4513,
  salmon: 0xfa8072,
  sandybrown: 0xf4a460,
  seagreen: 0x2e8b57,
  seashell: 0xfff5ee,
  sienna: 0xa0522d,
  silver: 0xc0c0c0,
  skyblue: 0x87ceeb,
  slateblue: 0x6a5acd,
  slategray: 0x708090,
  slategrey: 0x708090,
  snow: 0xfffafa,
  springgreen: 0x00ff7f,
  steelblue: 0x4682b4,
  tan: 0xd2b48c,
  teal: 0x008080,
  thistle: 0xd8bfd8,
  tomato: 0xff6347,
  turquoise: 0x40e0d0,
  violet: 0xee82ee,
  wheat: 0xf5deb3,
  white: 0xffffff,
  whitesmoke: 0xf5f5f5,
  yellow: 0xffff00,
  yellowgreen: 0x9acd32
};
(0, _define.default)(Color, color, {
  copy: function (channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable: function () {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});

function color_formatHex() {
  return this.rgb().formatHex();
}

function color_formatHsl() {
  return hslConvert(this).formatHsl();
}

function color_formatRgb() {
  return this.rgb().formatRgb();
}

function color(format) {
  var m, l;
  format = (format + "").trim().toLowerCase();
  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
  : l === 3 ? new Rgb(m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00
  : l === 8 ? new Rgb(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
  : l === 4 ? new Rgb(m >> 12 & 0xf | m >> 8 & 0xf0, m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, ((m & 0xf) << 4 | m & 0xf) / 0xff) // #f000
  : null // invalid hex
  ) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
  : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
  : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
  : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
  : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
  : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
  : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
  : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}

function rgbn(n) {
  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}

function rgba(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a);
}

function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}

function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}

function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}

(0, _define.default)(Rgb, rgb, (0, _define.extend)(Color, {
  brighter: function (k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker: function (k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb: function () {
    return this;
  },
  displayable: function () {
    return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
  },
  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));

function rgb_formatHex() {
  return "#" + hex(this.r) + hex(this.g) + hex(this.b);
}

function rgb_formatRgb() {
  var a = this.opacity;
  a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
  return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
}

function hex(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}

function hsla(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;
  return new Hsl(h, s, l, a);
}

function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl();
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      h = NaN,
      s = max - min,
      l = (max + min) / 2;

  if (s) {
    if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }

  return new Hsl(h, s, l, o.opacity);
}

function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}

function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

(0, _define.default)(Hsl, hsl, (0, _define.extend)(Color, {
  brighter: function (k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function (k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function () {
    var h = this.h % 360 + (this.h < 0) * 360,
        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
        l = this.l,
        m2 = l + (l < 0.5 ? l : 1 - l) * s,
        m1 = 2 * l - m2;
    return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
  },
  displayable: function () {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
  },
  formatHsl: function () {
    var a = this.opacity;
    a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a === 1 ? ")" : ", " + a + ")");
  }
}));
/* From FvD 13.37, CSS Color Module Level 3 */

function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}
},{"./define.js":"node_modules/d3-color/src/define.js"}],"node_modules/d3-color/src/math.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rad2deg = exports.deg2rad = void 0;
var deg2rad = Math.PI / 180;
exports.deg2rad = deg2rad;
var rad2deg = 180 / Math.PI;
exports.rad2deg = rad2deg;
},{}],"node_modules/d3-color/src/lab.js":[function(require,module,exports) {

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gray = gray;
exports.default = lab;
exports.Lab = Lab;
exports.lch = lch;
exports.hcl = hcl;
exports.Hcl = Hcl;

var _define = _interopRequireWildcard(require("./define.js"));

var _color = require("./color.js");

var _math = require("./math.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// https://observablehq.com/@mbostock/lab-and-rgb
var K = 18,
    Xn = 0.96422,
    Yn = 1,
    Zn = 0.82521,
    t0 = 4 / 29,
    t1 = 6 / 29,
    t2 = 3 * t1 * t1,
    t3 = t1 * t1 * t1;

function labConvert(o) {
  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
  if (o instanceof Hcl) return hcl2lab(o);
  if (!(o instanceof _color.Rgb)) o = (0, _color.rgbConvert)(o);
  var r = rgb2lrgb(o.r),
      g = rgb2lrgb(o.g),
      b = rgb2lrgb(o.b),
      y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn),
      x,
      z;
  if (r === g && g === b) x = z = y;else {
    x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
  }
  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
}

function gray(l, opacity) {
  return new Lab(l, 0, 0, opacity == null ? 1 : opacity);
}

function lab(l, a, b, opacity) {
  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
}

function Lab(l, a, b, opacity) {
  this.l = +l;
  this.a = +a;
  this.b = +b;
  this.opacity = +opacity;
}

(0, _define.default)(Lab, lab, (0, _define.extend)(_color.Color, {
  brighter: function (k) {
    return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  darker: function (k) {
    return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  rgb: function () {
    var y = (this.l + 16) / 116,
        x = isNaN(this.a) ? y : y + this.a / 500,
        z = isNaN(this.b) ? y : y - this.b / 200;
    x = Xn * lab2xyz(x);
    y = Yn * lab2xyz(y);
    z = Zn * lab2xyz(z);
    return new _color.Rgb(lrgb2rgb(3.1338561 * x - 1.6168667 * y - 0.4906146 * z), lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z), lrgb2rgb(0.0719453 * x - 0.2289914 * y + 1.4052427 * z), this.opacity);
  }
}));

function xyz2lab(t) {
  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
}

function lab2xyz(t) {
  return t > t1 ? t * t * t : t2 * (t - t0);
}

function lrgb2rgb(x) {
  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
}

function rgb2lrgb(x) {
  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
}

function hclConvert(o) {
  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
  if (!(o instanceof Lab)) o = labConvert(o);
  if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);

  var h = Math.atan2(o.b, o.a) * _math.rad2deg;

  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}

function lch(l, c, h, opacity) {
  return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}

function hcl(h, c, l, opacity) {
  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}

function Hcl(h, c, l, opacity) {
  this.h = +h;
  this.c = +c;
  this.l = +l;
  this.opacity = +opacity;
}

function hcl2lab(o) {
  if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
  var h = o.h * _math.deg2rad;
  return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
}

(0, _define.default)(Hcl, hcl, (0, _define.extend)(_color.Color, {
  brighter: function (k) {
    return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
  },
  darker: function (k) {
    return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
  },
  rgb: function () {
    return hcl2lab(this).rgb();
  }
}));
},{"./define.js":"node_modules/d3-color/src/define.js","./color.js":"node_modules/d3-color/src/color.js","./math.js":"node_modules/d3-color/src/math.js"}],"node_modules/d3-color/src/cubehelix.js":[function(require,module,exports) {

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = cubehelix;
exports.Cubehelix = Cubehelix;

var _define = _interopRequireWildcard(require("./define.js"));

var _color = require("./color.js");

var _math = require("./math.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var A = -0.14861,
    B = +1.78277,
    C = -0.29227,
    D = -0.90649,
    E = +1.97294,
    ED = E * D,
    EB = E * B,
    BC_DA = B * C - D * A;

function cubehelixConvert(o) {
  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof _color.Rgb)) o = (0, _color.rgbConvert)(o);
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
      bl = b - l,
      k = (E * (g - l) - C * bl) / D,
      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)),
      // NaN if l=0 or l=1
  h = s ? Math.atan2(k, bl) * _math.rad2deg - 120 : NaN;
  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
}

function cubehelix(h, s, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
}

function Cubehelix(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

(0, _define.default)(Cubehelix, cubehelix, (0, _define.extend)(_color.Color, {
  brighter: function (k) {
    k = k == null ? _color.brighter : Math.pow(_color.brighter, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function (k) {
    k = k == null ? _color.darker : Math.pow(_color.darker, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function () {
    var h = isNaN(this.h) ? 0 : (this.h + 120) * _math.deg2rad,
        l = +this.l,
        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
        cosh = Math.cos(h),
        sinh = Math.sin(h);
    return new _color.Rgb(255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);
  }
}));
},{"./define.js":"node_modules/d3-color/src/define.js","./color.js":"node_modules/d3-color/src/color.js","./math.js":"node_modules/d3-color/src/math.js"}],"node_modules/d3-color/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "color", {
  enumerable: true,
  get: function () {
    return _color.default;
  }
});
Object.defineProperty(exports, "rgb", {
  enumerable: true,
  get: function () {
    return _color.rgb;
  }
});
Object.defineProperty(exports, "hsl", {
  enumerable: true,
  get: function () {
    return _color.hsl;
  }
});
Object.defineProperty(exports, "lab", {
  enumerable: true,
  get: function () {
    return _lab.default;
  }
});
Object.defineProperty(exports, "hcl", {
  enumerable: true,
  get: function () {
    return _lab.hcl;
  }
});
Object.defineProperty(exports, "lch", {
  enumerable: true,
  get: function () {
    return _lab.lch;
  }
});
Object.defineProperty(exports, "gray", {
  enumerable: true,
  get: function () {
    return _lab.gray;
  }
});
Object.defineProperty(exports, "cubehelix", {
  enumerable: true,
  get: function () {
    return _cubehelix.default;
  }
});

var _color = _interopRequireWildcard(require("./color.js"));

var _lab = _interopRequireWildcard(require("./lab.js"));

var _cubehelix = _interopRequireDefault(require("./cubehelix.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
},{"./color.js":"node_modules/d3-color/src/color.js","./lab.js":"node_modules/d3-color/src/lab.js","./cubehelix.js":"node_modules/d3-color/src/cubehelix.js"}],"node_modules/d3-interpolate/src/basis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.basis = basis;
exports.default = _default;

function basis(t1, v0, v1, v2, v3) {
  var t2 = t1 * t1,
      t3 = t2 * t1;
  return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
}

function _default(values) {
  var n = values.length - 1;
  return function (t) {
    var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
        v1 = values[i],
        v2 = values[i + 1],
        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}
},{}],"node_modules/d3-interpolate/src/basisClosed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _basis = require("./basis.js");

function _default(values) {
  var n = values.length;
  return function (t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
        v0 = values[(i + n - 1) % n],
        v1 = values[i % n],
        v2 = values[(i + 1) % n],
        v3 = values[(i + 2) % n];
    return (0, _basis.basis)((t - i / n) * n, v0, v1, v2, v3);
  };
}
},{"./basis.js":"node_modules/d3-interpolate/src/basis.js"}],"node_modules/d3-interpolate/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-interpolate/src/color.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hue = hue;
exports.gamma = gamma;
exports.default = nogamma;

var _constant = _interopRequireDefault(require("./constant.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function linear(a, d) {
  return function (t) {
    return a + t * d;
  };
}

function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {
    return Math.pow(a + t * b, y);
  };
}

function hue(a, b) {
  var d = b - a;
  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : (0, _constant.default)(isNaN(a) ? b : a);
}

function gamma(y) {
  return (y = +y) === 1 ? nogamma : function (a, b) {
    return b - a ? exponential(a, b, y) : (0, _constant.default)(isNaN(a) ? b : a);
  };
}

function nogamma(a, b) {
  var d = b - a;
  return d ? linear(a, d) : (0, _constant.default)(isNaN(a) ? b : a);
}
},{"./constant.js":"node_modules/d3-interpolate/src/constant.js"}],"node_modules/d3-interpolate/src/rgb.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rgbBasisClosed = exports.rgbBasis = exports.default = void 0;

var _d3Color = require("d3-color");

var _basis = _interopRequireDefault(require("./basis.js"));

var _basisClosed = _interopRequireDefault(require("./basisClosed.js"));

var _color = _interopRequireWildcard(require("./color.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function rgbGamma(y) {
  var color = (0, _color.gamma)(y);

  function rgb(start, end) {
    var r = color((start = (0, _d3Color.rgb)(start)).r, (end = (0, _d3Color.rgb)(end)).r),
        g = color(start.g, end.g),
        b = color(start.b, end.b),
        opacity = (0, _color.default)(start.opacity, end.opacity);
    return function (t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }

  rgb.gamma = rgbGamma;
  return rgb;
}(1);

exports.default = _default;

function rgbSpline(spline) {
  return function (colors) {
    var n = colors.length,
        r = new Array(n),
        g = new Array(n),
        b = new Array(n),
        i,
        color;

    for (i = 0; i < n; ++i) {
      color = (0, _d3Color.rgb)(colors[i]);
      r[i] = color.r || 0;
      g[i] = color.g || 0;
      b[i] = color.b || 0;
    }

    r = spline(r);
    g = spline(g);
    b = spline(b);
    color.opacity = 1;
    return function (t) {
      color.r = r(t);
      color.g = g(t);
      color.b = b(t);
      return color + "";
    };
  };
}

var rgbBasis = rgbSpline(_basis.default);
exports.rgbBasis = rgbBasis;
var rgbBasisClosed = rgbSpline(_basisClosed.default);
exports.rgbBasisClosed = rgbBasisClosed;
},{"d3-color":"node_modules/d3-color/src/index.js","./basis.js":"node_modules/d3-interpolate/src/basis.js","./basisClosed.js":"node_modules/d3-interpolate/src/basisClosed.js","./color.js":"node_modules/d3-interpolate/src/color.js"}],"node_modules/d3-interpolate/src/numberArray.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.isNumberArray = isNumberArray;

function _default(a, b) {
  if (!b) b = [];
  var n = a ? Math.min(b.length, a.length) : 0,
      c = b.slice(),
      i;
  return function (t) {
    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;

    return c;
  };
}

function isNumberArray(x) {
  return ArrayBuffer.isView(x) && !(x instanceof DataView);
}
},{}],"node_modules/d3-interpolate/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.genericArray = genericArray;

var _value = _interopRequireDefault(require("./value.js"));

var _numberArray = _interopRequireWildcard(require("./numberArray.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(a, b) {
  return ((0, _numberArray.isNumberArray)(b) ? _numberArray.default : genericArray)(a, b);
}

function genericArray(a, b) {
  var nb = b ? b.length : 0,
      na = a ? Math.min(nb, a.length) : 0,
      x = new Array(na),
      c = new Array(nb),
      i;

  for (i = 0; i < na; ++i) x[i] = (0, _value.default)(a[i], b[i]);

  for (; i < nb; ++i) c[i] = b[i];

  return function (t) {
    for (i = 0; i < na; ++i) c[i] = x[i](t);

    return c;
  };
}
},{"./value.js":"node_modules/d3-interpolate/src/value.js","./numberArray.js":"node_modules/d3-interpolate/src/numberArray.js"}],"node_modules/d3-interpolate/src/date.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  var d = new Date();
  return a = +a, b = +b, function (t) {
    return d.setTime(a * (1 - t) + b * t), d;
  };
}
},{}],"node_modules/d3-interpolate/src/number.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return a = +a, b = +b, function (t) {
    return a * (1 - t) + b * t;
  };
}
},{}],"node_modules/d3-interpolate/src/object.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _value = _interopRequireDefault(require("./value.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(a, b) {
  var i = {},
      c = {},
      k;
  if (a === null || typeof a !== "object") a = {};
  if (b === null || typeof b !== "object") b = {};

  for (k in b) {
    if (k in a) {
      i[k] = (0, _value.default)(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }

  return function (t) {
    for (k in i) c[k] = i[k](t);

    return c;
  };
}
},{"./value.js":"node_modules/d3-interpolate/src/value.js"}],"node_modules/d3-interpolate/src/string.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
    reB = new RegExp(reA.source, "g");

function zero(b) {
  return function () {
    return b;
  };
}

function one(b) {
  return function (t) {
    return b(t) + "";
  };
}

function _default(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0,
      // scan index for next number in b
  am,
      // current match in a
  bm,
      // current match in b
  bs,
      // string preceding current number in b, if any
  i = -1,
      // index in s
  s = [],
      // string constants and placeholders
  q = []; // number interpolators
  // Coerce inputs to strings.

  a = a + "", b = b + ""; // Interpolate pairs of numbers in a & b.

  while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      // a string precedes the next number in b
      bs = b.slice(bi, bs);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }

    if ((am = am[0]) === (bm = bm[0])) {
      // numbers in a & b match
      if (s[i]) s[i] += bm; // coalesce with previous string
      else s[++i] = bm;
    } else {
      // interpolate non-matching numbers
      s[++i] = null;
      q.push({
        i: i,
        x: (0, _number.default)(am, bm)
      });
    }

    bi = reB.lastIndex;
  } // Add remains of b.


  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i]) s[i] += bs; // coalesce with previous string
    else s[++i] = bs;
  } // Special optimization for only a single match.
  // Otherwise, interpolate each of the numbers and rejoin the string.


  return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {
    for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);

    return s.join("");
  });
}
},{"./number.js":"node_modules/d3-interpolate/src/number.js"}],"node_modules/d3-interpolate/src/value.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Color = require("d3-color");

var _rgb = _interopRequireDefault(require("./rgb.js"));

var _array = require("./array.js");

var _date = _interopRequireDefault(require("./date.js"));

var _number = _interopRequireDefault(require("./number.js"));

var _object = _interopRequireDefault(require("./object.js"));

var _string = _interopRequireDefault(require("./string.js"));

var _constant = _interopRequireDefault(require("./constant.js"));

var _numberArray = _interopRequireWildcard(require("./numberArray.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(a, b) {
  var t = typeof b,
      c;
  return b == null || t === "boolean" ? (0, _constant.default)(b) : (t === "number" ? _number.default : t === "string" ? (c = (0, _d3Color.color)(b)) ? (b = c, _rgb.default) : _string.default : b instanceof _d3Color.color ? _rgb.default : b instanceof Date ? _date.default : (0, _numberArray.isNumberArray)(b) ? _numberArray.default : Array.isArray(b) ? _array.genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? _object.default : _number.default)(a, b);
}
},{"d3-color":"node_modules/d3-color/src/index.js","./rgb.js":"node_modules/d3-interpolate/src/rgb.js","./array.js":"node_modules/d3-interpolate/src/array.js","./date.js":"node_modules/d3-interpolate/src/date.js","./number.js":"node_modules/d3-interpolate/src/number.js","./object.js":"node_modules/d3-interpolate/src/object.js","./string.js":"node_modules/d3-interpolate/src/string.js","./constant.js":"node_modules/d3-interpolate/src/constant.js","./numberArray.js":"node_modules/d3-interpolate/src/numberArray.js"}],"node_modules/d3-interpolate/src/discrete.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(range) {
  var n = range.length;
  return function (t) {
    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}
},{}],"node_modules/d3-interpolate/src/hue.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _color = require("./color.js");

function _default(a, b) {
  var i = (0, _color.hue)(+a, +b);
  return function (t) {
    var x = i(t);
    return x - 360 * Math.floor(x / 360);
  };
}
},{"./color.js":"node_modules/d3-interpolate/src/color.js"}],"node_modules/d3-interpolate/src/round.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return a = +a, b = +b, function (t) {
    return Math.round(a * (1 - t) + b * t);
  };
}
},{}],"node_modules/d3-interpolate/src/transform/decompose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.identity = void 0;
var degrees = 180 / Math.PI;
var identity = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
exports.identity = identity;

function _default(a, b, c, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX: scaleX,
    scaleY: scaleY
  };
}
},{}],"node_modules/d3-interpolate/src/transform/parse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseCss = parseCss;
exports.parseSvg = parseSvg;

var _decompose = _interopRequireWildcard(require("./decompose.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var cssNode, cssRoot, cssView, svgNode;

function parseCss(value) {
  if (value === "none") return _decompose.identity;
  if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
  cssNode.style.transform = value;
  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
  cssRoot.removeChild(cssNode);
  value = value.slice(7, -1).split(",");
  return (0, _decompose.default)(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
}

function parseSvg(value) {
  if (value == null) return _decompose.identity;
  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate())) return _decompose.identity;
  value = value.matrix;
  return (0, _decompose.default)(value.a, value.b, value.c, value.d, value.e, value.f);
}
},{"./decompose.js":"node_modules/d3-interpolate/src/transform/decompose.js"}],"node_modules/d3-interpolate/src/transform/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.interpolateTransformSvg = exports.interpolateTransformCss = void 0;

var _number = _interopRequireDefault(require("../number.js"));

var _parse = require("./parse.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function interpolateTransform(parse, pxComma, pxParen, degParen) {
  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }

  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({
        i: i - 4,
        x: (0, _number.default)(xa, xb)
      }, {
        i: i - 2,
        x: (0, _number.default)(ya, yb)
      });
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }

  function rotate(a, b, s, q) {
    if (a !== b) {
      if (a - b > 180) b += 360;else if (b - a > 180) a += 360; // shortest path

      q.push({
        i: s.push(pop(s) + "rotate(", null, degParen) - 2,
        x: (0, _number.default)(a, b)
      });
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }

  function skewX(a, b, s, q) {
    if (a !== b) {
      q.push({
        i: s.push(pop(s) + "skewX(", null, degParen) - 2,
        x: (0, _number.default)(a, b)
      });
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }

  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({
        i: i - 4,
        x: (0, _number.default)(xa, xb)
      }, {
        i: i - 2,
        x: (0, _number.default)(ya, yb)
      });
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }

  return function (a, b) {
    var s = [],
        // string constants and placeholders
    q = []; // number interpolators

    a = parse(a), b = parse(b);
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null; // gc

    return function (t) {
      var i = -1,
          n = q.length,
          o;

      while (++i < n) s[(o = q[i]).i] = o.x(t);

      return s.join("");
    };
  };
}

var interpolateTransformCss = interpolateTransform(_parse.parseCss, "px, ", "px)", "deg)");
exports.interpolateTransformCss = interpolateTransformCss;
var interpolateTransformSvg = interpolateTransform(_parse.parseSvg, ", ", ")", ")");
exports.interpolateTransformSvg = interpolateTransformSvg;
},{"../number.js":"node_modules/d3-interpolate/src/number.js","./parse.js":"node_modules/d3-interpolate/src/transform/parse.js"}],"node_modules/d3-interpolate/src/zoom.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var rho = Math.SQRT2,
    rho2 = 2,
    rho4 = 4,
    epsilon2 = 1e-12;

function cosh(x) {
  return ((x = Math.exp(x)) + 1 / x) / 2;
}

function sinh(x) {
  return ((x = Math.exp(x)) - 1 / x) / 2;
}

function tanh(x) {
  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
} // p0 = [ux0, uy0, w0]
// p1 = [ux1, uy1, w1]


function _default(p0, p1) {
  var ux0 = p0[0],
      uy0 = p0[1],
      w0 = p0[2],
      ux1 = p1[0],
      uy1 = p1[1],
      w1 = p1[2],
      dx = ux1 - ux0,
      dy = uy1 - uy0,
      d2 = dx * dx + dy * dy,
      i,
      S; // Special case for u0 ≅ u1.

  if (d2 < epsilon2) {
    S = Math.log(w1 / w0) / rho;

    i = function (t) {
      return [ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(rho * t * S)];
    };
  } // General case.
  else {
      var d1 = Math.sqrt(d2),
          b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
          b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
          r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
          r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / rho;

      i = function (t) {
        var s = t * S,
            coshr0 = cosh(r0),
            u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
        return [ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / cosh(rho * s + r0)];
      };
    }

  i.duration = S * 1000;
  return i;
}
},{}],"node_modules/d3-interpolate/src/hsl.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hslLong = exports.default = void 0;

var _d3Color = require("d3-color");

var _color = _interopRequireWildcard(require("./color.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function hsl(hue) {
  return function (start, end) {
    var h = hue((start = (0, _d3Color.hsl)(start)).h, (end = (0, _d3Color.hsl)(end)).h),
        s = (0, _color.default)(start.s, end.s),
        l = (0, _color.default)(start.l, end.l),
        opacity = (0, _color.default)(start.opacity, end.opacity);
    return function (t) {
      start.h = h(t);
      start.s = s(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  };
}

var _default = hsl(_color.hue);

exports.default = _default;
var hslLong = hsl(_color.default);
exports.hslLong = hslLong;
},{"d3-color":"node_modules/d3-color/src/index.js","./color.js":"node_modules/d3-interpolate/src/color.js"}],"node_modules/d3-interpolate/src/lab.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = lab;

var _d3Color = require("d3-color");

var _color = _interopRequireDefault(require("./color.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function lab(start, end) {
  var l = (0, _color.default)((start = (0, _d3Color.lab)(start)).l, (end = (0, _d3Color.lab)(end)).l),
      a = (0, _color.default)(start.a, end.a),
      b = (0, _color.default)(start.b, end.b),
      opacity = (0, _color.default)(start.opacity, end.opacity);
  return function (t) {
    start.l = l(t);
    start.a = a(t);
    start.b = b(t);
    start.opacity = opacity(t);
    return start + "";
  };
}
},{"d3-color":"node_modules/d3-color/src/index.js","./color.js":"node_modules/d3-interpolate/src/color.js"}],"node_modules/d3-interpolate/src/hcl.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hclLong = exports.default = void 0;

var _d3Color = require("d3-color");

var _color = _interopRequireWildcard(require("./color.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function hcl(hue) {
  return function (start, end) {
    var h = hue((start = (0, _d3Color.hcl)(start)).h, (end = (0, _d3Color.hcl)(end)).h),
        c = (0, _color.default)(start.c, end.c),
        l = (0, _color.default)(start.l, end.l),
        opacity = (0, _color.default)(start.opacity, end.opacity);
    return function (t) {
      start.h = h(t);
      start.c = c(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  };
}

var _default = hcl(_color.hue);

exports.default = _default;
var hclLong = hcl(_color.default);
exports.hclLong = hclLong;
},{"d3-color":"node_modules/d3-color/src/index.js","./color.js":"node_modules/d3-interpolate/src/color.js"}],"node_modules/d3-interpolate/src/cubehelix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cubehelixLong = exports.default = void 0;

var _d3Color = require("d3-color");

var _color = _interopRequireWildcard(require("./color.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function cubehelix(hue) {
  return function cubehelixGamma(y) {
    y = +y;

    function cubehelix(start, end) {
      var h = hue((start = (0, _d3Color.cubehelix)(start)).h, (end = (0, _d3Color.cubehelix)(end)).h),
          s = (0, _color.default)(start.s, end.s),
          l = (0, _color.default)(start.l, end.l),
          opacity = (0, _color.default)(start.opacity, end.opacity);
      return function (t) {
        start.h = h(t);
        start.s = s(t);
        start.l = l(Math.pow(t, y));
        start.opacity = opacity(t);
        return start + "";
      };
    }

    cubehelix.gamma = cubehelixGamma;
    return cubehelix;
  }(1);
}

var _default = cubehelix(_color.hue);

exports.default = _default;
var cubehelixLong = cubehelix(_color.default);
exports.cubehelixLong = cubehelixLong;
},{"d3-color":"node_modules/d3-color/src/index.js","./color.js":"node_modules/d3-interpolate/src/color.js"}],"node_modules/d3-interpolate/src/piecewise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = piecewise;

function piecewise(interpolate, values) {
  var i = 0,
      n = values.length - 1,
      v = values[0],
      I = new Array(n < 0 ? 0 : n);

  while (i < n) I[i] = interpolate(v, v = values[++i]);

  return function (t) {
    var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
    return I[i](t - i);
  };
}
},{}],"node_modules/d3-interpolate/src/quantize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(interpolator, n) {
  var samples = new Array(n);

  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));

  return samples;
}
},{}],"node_modules/d3-interpolate/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "interpolate", {
  enumerable: true,
  get: function () {
    return _value.default;
  }
});
Object.defineProperty(exports, "interpolateArray", {
  enumerable: true,
  get: function () {
    return _array.default;
  }
});
Object.defineProperty(exports, "interpolateBasis", {
  enumerable: true,
  get: function () {
    return _basis.default;
  }
});
Object.defineProperty(exports, "interpolateBasisClosed", {
  enumerable: true,
  get: function () {
    return _basisClosed.default;
  }
});
Object.defineProperty(exports, "interpolateDate", {
  enumerable: true,
  get: function () {
    return _date.default;
  }
});
Object.defineProperty(exports, "interpolateDiscrete", {
  enumerable: true,
  get: function () {
    return _discrete.default;
  }
});
Object.defineProperty(exports, "interpolateHue", {
  enumerable: true,
  get: function () {
    return _hue.default;
  }
});
Object.defineProperty(exports, "interpolateNumber", {
  enumerable: true,
  get: function () {
    return _number.default;
  }
});
Object.defineProperty(exports, "interpolateNumberArray", {
  enumerable: true,
  get: function () {
    return _numberArray.default;
  }
});
Object.defineProperty(exports, "interpolateObject", {
  enumerable: true,
  get: function () {
    return _object.default;
  }
});
Object.defineProperty(exports, "interpolateRound", {
  enumerable: true,
  get: function () {
    return _round.default;
  }
});
Object.defineProperty(exports, "interpolateString", {
  enumerable: true,
  get: function () {
    return _string.default;
  }
});
Object.defineProperty(exports, "interpolateTransformCss", {
  enumerable: true,
  get: function () {
    return _index.interpolateTransformCss;
  }
});
Object.defineProperty(exports, "interpolateTransformSvg", {
  enumerable: true,
  get: function () {
    return _index.interpolateTransformSvg;
  }
});
Object.defineProperty(exports, "interpolateZoom", {
  enumerable: true,
  get: function () {
    return _zoom.default;
  }
});
Object.defineProperty(exports, "interpolateRgb", {
  enumerable: true,
  get: function () {
    return _rgb.default;
  }
});
Object.defineProperty(exports, "interpolateRgbBasis", {
  enumerable: true,
  get: function () {
    return _rgb.rgbBasis;
  }
});
Object.defineProperty(exports, "interpolateRgbBasisClosed", {
  enumerable: true,
  get: function () {
    return _rgb.rgbBasisClosed;
  }
});
Object.defineProperty(exports, "interpolateHsl", {
  enumerable: true,
  get: function () {
    return _hsl.default;
  }
});
Object.defineProperty(exports, "interpolateHslLong", {
  enumerable: true,
  get: function () {
    return _hsl.hslLong;
  }
});
Object.defineProperty(exports, "interpolateLab", {
  enumerable: true,
  get: function () {
    return _lab.default;
  }
});
Object.defineProperty(exports, "interpolateHcl", {
  enumerable: true,
  get: function () {
    return _hcl.default;
  }
});
Object.defineProperty(exports, "interpolateHclLong", {
  enumerable: true,
  get: function () {
    return _hcl.hclLong;
  }
});
Object.defineProperty(exports, "interpolateCubehelix", {
  enumerable: true,
  get: function () {
    return _cubehelix.default;
  }
});
Object.defineProperty(exports, "interpolateCubehelixLong", {
  enumerable: true,
  get: function () {
    return _cubehelix.cubehelixLong;
  }
});
Object.defineProperty(exports, "piecewise", {
  enumerable: true,
  get: function () {
    return _piecewise.default;
  }
});
Object.defineProperty(exports, "quantize", {
  enumerable: true,
  get: function () {
    return _quantize.default;
  }
});

var _value = _interopRequireDefault(require("./value.js"));

var _array = _interopRequireDefault(require("./array.js"));

var _basis = _interopRequireDefault(require("./basis.js"));

var _basisClosed = _interopRequireDefault(require("./basisClosed.js"));

var _date = _interopRequireDefault(require("./date.js"));

var _discrete = _interopRequireDefault(require("./discrete.js"));

var _hue = _interopRequireDefault(require("./hue.js"));

var _number = _interopRequireDefault(require("./number.js"));

var _numberArray = _interopRequireDefault(require("./numberArray.js"));

var _object = _interopRequireDefault(require("./object.js"));

var _round = _interopRequireDefault(require("./round.js"));

var _string = _interopRequireDefault(require("./string.js"));

var _index = require("./transform/index.js");

var _zoom = _interopRequireDefault(require("./zoom.js"));

var _rgb = _interopRequireWildcard(require("./rgb.js"));

var _hsl = _interopRequireWildcard(require("./hsl.js"));

var _lab = _interopRequireDefault(require("./lab.js"));

var _hcl = _interopRequireWildcard(require("./hcl.js"));

var _cubehelix = _interopRequireWildcard(require("./cubehelix.js"));

var _piecewise = _interopRequireDefault(require("./piecewise.js"));

var _quantize = _interopRequireDefault(require("./quantize.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./value.js":"node_modules/d3-interpolate/src/value.js","./array.js":"node_modules/d3-interpolate/src/array.js","./basis.js":"node_modules/d3-interpolate/src/basis.js","./basisClosed.js":"node_modules/d3-interpolate/src/basisClosed.js","./date.js":"node_modules/d3-interpolate/src/date.js","./discrete.js":"node_modules/d3-interpolate/src/discrete.js","./hue.js":"node_modules/d3-interpolate/src/hue.js","./number.js":"node_modules/d3-interpolate/src/number.js","./numberArray.js":"node_modules/d3-interpolate/src/numberArray.js","./object.js":"node_modules/d3-interpolate/src/object.js","./round.js":"node_modules/d3-interpolate/src/round.js","./string.js":"node_modules/d3-interpolate/src/string.js","./transform/index.js":"node_modules/d3-interpolate/src/transform/index.js","./zoom.js":"node_modules/d3-interpolate/src/zoom.js","./rgb.js":"node_modules/d3-interpolate/src/rgb.js","./hsl.js":"node_modules/d3-interpolate/src/hsl.js","./lab.js":"node_modules/d3-interpolate/src/lab.js","./hcl.js":"node_modules/d3-interpolate/src/hcl.js","./cubehelix.js":"node_modules/d3-interpolate/src/cubehelix.js","./piecewise.js":"node_modules/d3-interpolate/src/piecewise.js","./quantize.js":"node_modules/d3-interpolate/src/quantize.js"}],"node_modules/d3-timer/src/timer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.now = now;
exports.Timer = Timer;
exports.timer = timer;
exports.timerFlush = timerFlush;
var frame = 0,
    // is an animation frame pending?
timeout = 0,
    // is a timeout pending?
interval = 0,
    // are any timers active?
pokeDelay = 1000,
    // how frequently we check for clock skew
taskHead,
    taskTail,
    clockLast = 0,
    clockNow = 0,
    clockSkew = 0,
    clock = typeof performance === "object" && performance.now ? performance : Date,
    setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function (f) {
  setTimeout(f, 17);
};

function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}

function clearNow() {
  clockNow = 0;
}

function Timer() {
  this._call = this._time = this._next = null;
}

Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function (callback, delay, time) {
    if (typeof callback !== "function") throw new TypeError("callback is not a function");
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);

    if (!this._next && taskTail !== this) {
      if (taskTail) taskTail._next = this;else taskHead = this;
      taskTail = this;
    }

    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function () {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};

function timer(callback, delay, time) {
  var t = new Timer();
  t.restart(callback, delay, time);
  return t;
}

function timerFlush() {
  now(); // Get the current time, if not already set.

  ++frame; // Pretend we’ve set an alarm, if we haven’t already.

  var t = taskHead,
      e;

  while (t) {
    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
    t = t._next;
  }

  --frame;
}

function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;

  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}

function poke() {
  var now = clock.now(),
      delay = now - clockLast;
  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
}

function nap() {
  var t0,
      t1 = taskHead,
      t2,
      time = Infinity;

  while (t1) {
    if (t1._call) {
      if (time > t1._time) time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }

  taskTail = t0;
  sleep(time);
}

function sleep(time) {
  if (frame) return; // Soonest alarm already set, or will be.

  if (timeout) timeout = clearTimeout(timeout);
  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.

  if (delay > 24) {
    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
    if (interval) interval = clearInterval(interval);
  } else {
    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}
},{}],"node_modules/d3-timer/src/timeout.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _timer = require("./timer.js");

function _default(callback, delay, time) {
  var t = new _timer.Timer();
  delay = delay == null ? 0 : +delay;
  t.restart(function (elapsed) {
    t.stop();
    callback(elapsed + delay);
  }, delay, time);
  return t;
}
},{"./timer.js":"node_modules/d3-timer/src/timer.js"}],"node_modules/d3-timer/src/interval.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _timer = require("./timer.js");

function _default(callback, delay, time) {
  var t = new _timer.Timer(),
      total = delay;
  if (delay == null) return t.restart(callback, delay, time), t;
  delay = +delay, time = time == null ? (0, _timer.now)() : +time;
  t.restart(function tick(elapsed) {
    elapsed += total;
    t.restart(tick, total += delay, time);
    callback(elapsed);
  }, delay, time);
  return t;
}
},{"./timer.js":"node_modules/d3-timer/src/timer.js"}],"node_modules/d3-timer/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "now", {
  enumerable: true,
  get: function () {
    return _timer.now;
  }
});
Object.defineProperty(exports, "timer", {
  enumerable: true,
  get: function () {
    return _timer.timer;
  }
});
Object.defineProperty(exports, "timerFlush", {
  enumerable: true,
  get: function () {
    return _timer.timerFlush;
  }
});
Object.defineProperty(exports, "timeout", {
  enumerable: true,
  get: function () {
    return _timeout.default;
  }
});
Object.defineProperty(exports, "interval", {
  enumerable: true,
  get: function () {
    return _interval.default;
  }
});

var _timer = require("./timer.js");

var _timeout = _interopRequireDefault(require("./timeout.js"));

var _interval = _interopRequireDefault(require("./interval.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./timer.js":"node_modules/d3-timer/src/timer.js","./timeout.js":"node_modules/d3-timer/src/timeout.js","./interval.js":"node_modules/d3-timer/src/interval.js"}],"node_modules/d3-transition/src/transition/schedule.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.init = init;
exports.set = set;
exports.get = get;
exports.ENDED = exports.ENDING = exports.RUNNING = exports.STARTED = exports.STARTING = exports.SCHEDULED = exports.CREATED = void 0;

var _d3Dispatch = require("d3-dispatch");

var _d3Timer = require("d3-timer");

var emptyOn = (0, _d3Dispatch.dispatch)("start", "end", "cancel", "interrupt");
var emptyTween = [];
var CREATED = 0;
exports.CREATED = CREATED;
var SCHEDULED = 1;
exports.SCHEDULED = SCHEDULED;
var STARTING = 2;
exports.STARTING = STARTING;
var STARTED = 3;
exports.STARTED = STARTED;
var RUNNING = 4;
exports.RUNNING = RUNNING;
var ENDING = 5;
exports.ENDING = ENDING;
var ENDED = 6;
exports.ENDED = ENDED;

function _default(node, name, id, index, group, timing) {
  var schedules = node.__transition;
  if (!schedules) node.__transition = {};else if (id in schedules) return;
  create(node, id, {
    name: name,
    index: index,
    // For context during callback.
    group: group,
    // For context during callback.
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
}

function init(node, id) {
  var schedule = get(node, id);
  if (schedule.state > CREATED) throw new Error("too late; already scheduled");
  return schedule;
}

function set(node, id) {
  var schedule = get(node, id);
  if (schedule.state > STARTED) throw new Error("too late; already running");
  return schedule;
}

function get(node, id) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
  return schedule;
}

function create(node, id, self) {
  var schedules = node.__transition,
      tween; // Initialize the self timer when the transition is created.
  // Note the actual delay is not known until the first callback!

  schedules[id] = self;
  self.timer = (0, _d3Timer.timer)(schedule, 0, self.time);

  function schedule(elapsed) {
    self.state = SCHEDULED;
    self.timer.restart(start, self.delay, self.time); // If the elapsed delay is less than our first sleep, start immediately.

    if (self.delay <= elapsed) start(elapsed - self.delay);
  }

  function start(elapsed) {
    var i, j, n, o; // If the state is not SCHEDULED, then we previously errored on start.

    if (self.state !== SCHEDULED) return stop();

    for (i in schedules) {
      o = schedules[i];
      if (o.name !== self.name) continue; // While this element already has a starting transition during this frame,
      // defer starting an interrupting transition until that transition has a
      // chance to tick (and possibly end); see d3/d3-transition#54!

      if (o.state === STARTED) return (0, _d3Timer.timeout)(start); // Interrupt the active transition, if any.

      if (o.state === RUNNING) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("interrupt", node, node.__data__, o.index, o.group);
        delete schedules[i];
      } // Cancel any pre-empted transitions.
      else if (+i < id) {
          o.state = ENDED;
          o.timer.stop();
          o.on.call("cancel", node, node.__data__, o.index, o.group);
          delete schedules[i];
        }
    } // Defer the first tick to end of the current frame; see d3/d3#1576.
    // Note the transition may be canceled after start and before the first tick!
    // Note this must be scheduled before the start event; see d3/d3-transition#16!
    // Assuming this is successful, subsequent callbacks go straight to tick.


    (0, _d3Timer.timeout)(function () {
      if (self.state === STARTED) {
        self.state = RUNNING;
        self.timer.restart(tick, self.delay, self.time);
        tick(elapsed);
      }
    }); // Dispatch the start event.
    // Note this must be done before the tween are initialized.

    self.state = STARTING;
    self.on.call("start", node, node.__data__, self.index, self.group);
    if (self.state !== STARTING) return; // interrupted

    self.state = STARTED; // Initialize the tween, deleting null tween.

    tween = new Array(n = self.tween.length);

    for (i = 0, j = -1; i < n; ++i) {
      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
        tween[++j] = o;
      }
    }

    tween.length = j + 1;
  }

  function tick(elapsed) {
    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
        i = -1,
        n = tween.length;

    while (++i < n) {
      tween[i].call(node, t);
    } // Dispatch the end event.


    if (self.state === ENDING) {
      self.on.call("end", node, node.__data__, self.index, self.group);
      stop();
    }
  }

  function stop() {
    self.state = ENDED;
    self.timer.stop();
    delete schedules[id];

    for (var i in schedules) return; // eslint-disable-line no-unused-vars


    delete node.__transition;
  }
}
},{"d3-dispatch":"node_modules/d3-dispatch/src/index.js","d3-timer":"node_modules/d3-timer/src/index.js"}],"node_modules/d3-transition/src/interrupt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _schedule = require("./transition/schedule.js");

function _default(node, name) {
  var schedules = node.__transition,
      schedule,
      active,
      empty = true,
      i;
  if (!schedules) return;
  name = name == null ? null : name + "";

  for (i in schedules) {
    if ((schedule = schedules[i]).name !== name) {
      empty = false;
      continue;
    }

    active = schedule.state > _schedule.STARTING && schedule.state < _schedule.ENDING;
    schedule.state = _schedule.ENDED;
    schedule.timer.stop();
    schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
    delete schedules[i];
  }

  if (empty) delete node.__transition;
}
},{"./transition/schedule.js":"node_modules/d3-transition/src/transition/schedule.js"}],"node_modules/d3-transition/src/selection/interrupt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _interrupt = _interopRequireDefault(require("../interrupt.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(name) {
  return this.each(function () {
    (0, _interrupt.default)(this, name);
  });
}
},{"../interrupt.js":"node_modules/d3-transition/src/interrupt.js"}],"node_modules/d3-transition/src/transition/tween.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.tweenValue = tweenValue;

var _schedule = require("./schedule.js");

function tweenRemove(id, name) {
  var tween0, tween1;
  return function () {
    var schedule = (0, _schedule.set)(this, id),
        tween = schedule.tween; // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.

    if (tween !== tween0) {
      tween1 = tween0 = tween;

      for (var i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1 = tween1.slice();
          tween1.splice(i, 1);
          break;
        }
      }
    }

    schedule.tween = tween1;
  };
}

function tweenFunction(id, name, value) {
  var tween0, tween1;
  if (typeof value !== "function") throw new Error();
  return function () {
    var schedule = (0, _schedule.set)(this, id),
        tween = schedule.tween; // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.

    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();

      for (var t = {
        name: name,
        value: value
      }, i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1[i] = t;
          break;
        }
      }

      if (i === n) tween1.push(t);
    }

    schedule.tween = tween1;
  };
}

function _default(name, value) {
  var id = this._id;
  name += "";

  if (arguments.length < 2) {
    var tween = (0, _schedule.get)(this.node(), id).tween;

    for (var i = 0, n = tween.length, t; i < n; ++i) {
      if ((t = tween[i]).name === name) {
        return t.value;
      }
    }

    return null;
  }

  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
}

function tweenValue(transition, name, value) {
  var id = transition._id;
  transition.each(function () {
    var schedule = (0, _schedule.set)(this, id);
    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
  });
  return function (node) {
    return (0, _schedule.get)(node, id).value[name];
  };
}
},{"./schedule.js":"node_modules/d3-transition/src/transition/schedule.js"}],"node_modules/d3-transition/src/transition/interpolate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Color = require("d3-color");

var _d3Interpolate = require("d3-interpolate");

function _default(a, b) {
  var c;
  return (typeof b === "number" ? _d3Interpolate.interpolateNumber : b instanceof _d3Color.color ? _d3Interpolate.interpolateRgb : (c = (0, _d3Color.color)(b)) ? (b = c, _d3Interpolate.interpolateRgb) : _d3Interpolate.interpolateString)(a, b);
}
},{"d3-color":"node_modules/d3-color/src/index.js","d3-interpolate":"node_modules/d3-interpolate/src/index.js"}],"node_modules/d3-transition/src/transition/attr.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Interpolate = require("d3-interpolate");

var _d3Selection = require("d3-selection");

var _tween = require("./tween.js");

var _interpolate = _interopRequireDefault(require("./interpolate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function attrRemove(name) {
  return function () {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function () {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function () {
    var string0 = this.getAttribute(name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function attrConstantNS(fullname, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function () {
    var string0 = this.getAttributeNS(fullname.space, fullname.local);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function attrFunction(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function () {
    var string0,
        value1 = value(this),
        string1;
    if (value1 == null) return void this.removeAttribute(name);
    string0 = this.getAttribute(name);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

function attrFunctionNS(fullname, interpolate, value) {
  var string00, string10, interpolate0;
  return function () {
    var string0,
        value1 = value(this),
        string1;
    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
    string0 = this.getAttributeNS(fullname.space, fullname.local);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

function _default(name, value) {
  var fullname = (0, _d3Selection.namespace)(name),
      i = fullname === "transform" ? _d3Interpolate.interpolateTransformSvg : _interpolate.default;
  return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, (0, _tween.tweenValue)(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname) : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value));
}
},{"d3-interpolate":"node_modules/d3-interpolate/src/index.js","d3-selection":"node_modules/d3-selection/src/index.js","./tween.js":"node_modules/d3-transition/src/transition/tween.js","./interpolate.js":"node_modules/d3-transition/src/transition/interpolate.js"}],"node_modules/d3-transition/src/transition/attrTween.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Selection = require("d3-selection");

function attrInterpolate(name, i) {
  return function (t) {
    this.setAttribute(name, i.call(this, t));
  };
}

function attrInterpolateNS(fullname, i) {
  return function (t) {
    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
  };
}

function attrTweenNS(fullname, value) {
  var t0, i0;

  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);
    return t0;
  }

  tween._value = value;
  return tween;
}

function attrTween(name, value) {
  var t0, i0;

  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);
    return t0;
  }

  tween._value = value;
  return tween;
}

function _default(name, value) {
  var key = "attr." + name;
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  var fullname = (0, _d3Selection.namespace)(name);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
}
},{"d3-selection":"node_modules/d3-selection/src/index.js"}],"node_modules/d3-transition/src/transition/delay.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _schedule = require("./schedule.js");

function delayFunction(id, value) {
  return function () {
    (0, _schedule.init)(this, id).delay = +value.apply(this, arguments);
  };
}

function delayConstant(id, value) {
  return value = +value, function () {
    (0, _schedule.init)(this, id).delay = value;
  };
}

function _default(value) {
  var id = this._id;
  return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id, value)) : (0, _schedule.get)(this.node(), id).delay;
}
},{"./schedule.js":"node_modules/d3-transition/src/transition/schedule.js"}],"node_modules/d3-transition/src/transition/duration.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _schedule = require("./schedule.js");

function durationFunction(id, value) {
  return function () {
    (0, _schedule.set)(this, id).duration = +value.apply(this, arguments);
  };
}

function durationConstant(id, value) {
  return value = +value, function () {
    (0, _schedule.set)(this, id).duration = value;
  };
}

function _default(value) {
  var id = this._id;
  return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id, value)) : (0, _schedule.get)(this.node(), id).duration;
}
},{"./schedule.js":"node_modules/d3-transition/src/transition/schedule.js"}],"node_modules/d3-transition/src/transition/ease.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _schedule = require("./schedule.js");

function easeConstant(id, value) {
  if (typeof value !== "function") throw new Error();
  return function () {
    (0, _schedule.set)(this, id).ease = value;
  };
}

function _default(value) {
  var id = this._id;
  return arguments.length ? this.each(easeConstant(id, value)) : (0, _schedule.get)(this.node(), id).ease;
}
},{"./schedule.js":"node_modules/d3-transition/src/transition/schedule.js"}],"node_modules/d3-transition/src/transition/filter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Selection = require("d3-selection");

var _index = require("./index.js");

function _default(match) {
  if (typeof match !== "function") match = (0, _d3Selection.matcher)(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new _index.Transition(subgroups, this._parents, this._name, this._id);
}
},{"d3-selection":"node_modules/d3-selection/src/index.js","./index.js":"node_modules/d3-transition/src/transition/index.js"}],"node_modules/d3-transition/src/transition/merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index.js");

function _default(transition) {
  if (transition._id !== this._id) throw new Error();

  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new _index.Transition(merges, this._parents, this._name, this._id);
}
},{"./index.js":"node_modules/d3-transition/src/transition/index.js"}],"node_modules/d3-transition/src/transition/on.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _schedule = require("./schedule.js");

function start(name) {
  return (name + "").trim().split(/^|\s+/).every(function (t) {
    var i = t.indexOf(".");
    if (i >= 0) t = t.slice(0, i);
    return !t || t === "start";
  });
}

function onFunction(id, name, listener) {
  var on0,
      on1,
      sit = start(name) ? _schedule.init : _schedule.set;
  return function () {
    var schedule = sit(this, id),
        on = schedule.on; // If this node shared a dispatch with the previous node,
    // just assign the updated shared dispatch and we’re done!
    // Otherwise, copy-on-write.

    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);
    schedule.on = on1;
  };
}

function _default(name, listener) {
  var id = this._id;
  return arguments.length < 2 ? (0, _schedule.get)(this.node(), id).on.on(name) : this.each(onFunction(id, name, listener));
}
},{"./schedule.js":"node_modules/d3-transition/src/transition/schedule.js"}],"node_modules/d3-transition/src/transition/remove.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function removeFunction(id) {
  return function () {
    var parent = this.parentNode;

    for (var i in this.__transition) if (+i !== id) return;

    if (parent) parent.removeChild(this);
  };
}

function _default() {
  return this.on("end.remove", removeFunction(this._id));
}
},{}],"node_modules/d3-transition/src/transition/select.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Selection = require("d3-selection");

var _index = require("./index.js");

var _schedule = _interopRequireWildcard(require("./schedule.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _default(select) {
  var name = this._name,
      id = this._id;
  if (typeof select !== "function") select = (0, _d3Selection.selector)(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
        (0, _schedule.default)(subgroup[i], name, id, i, subgroup, (0, _schedule.get)(node, id));
      }
    }
  }

  return new _index.Transition(subgroups, this._parents, name, id);
}
},{"d3-selection":"node_modules/d3-selection/src/index.js","./index.js":"node_modules/d3-transition/src/transition/index.js","./schedule.js":"node_modules/d3-transition/src/transition/schedule.js"}],"node_modules/d3-transition/src/transition/selectAll.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Selection = require("d3-selection");

var _index = require("./index.js");

var _schedule = _interopRequireWildcard(require("./schedule.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _default(select) {
  var name = this._name,
      id = this._id;
  if (typeof select !== "function") select = (0, _d3Selection.selectorAll)(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        for (var children = select.call(node, node.__data__, i, group), child, inherit = (0, _schedule.get)(node, id), k = 0, l = children.length; k < l; ++k) {
          if (child = children[k]) {
            (0, _schedule.default)(child, name, id, k, children, inherit);
          }
        }

        subgroups.push(children);
        parents.push(node);
      }
    }
  }

  return new _index.Transition(subgroups, parents, name, id);
}
},{"d3-selection":"node_modules/d3-selection/src/index.js","./index.js":"node_modules/d3-transition/src/transition/index.js","./schedule.js":"node_modules/d3-transition/src/transition/schedule.js"}],"node_modules/d3-transition/src/transition/selection.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Selection = require("d3-selection");

var Selection = _d3Selection.selection.prototype.constructor;

function _default() {
  return new Selection(this._groups, this._parents);
}
},{"d3-selection":"node_modules/d3-selection/src/index.js"}],"node_modules/d3-transition/src/transition/style.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Interpolate = require("d3-interpolate");

var _d3Selection = require("d3-selection");

var _schedule = require("./schedule.js");

var _tween = require("./tween.js");

var _interpolate = _interopRequireDefault(require("./interpolate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function styleNull(name, interpolate) {
  var string00, string10, interpolate0;
  return function () {
    var string0 = (0, _d3Selection.style)(this, name),
        string1 = (this.style.removeProperty(name), (0, _d3Selection.style)(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
  };
}

function styleRemove(name) {
  return function () {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function () {
    var string0 = (0, _d3Selection.style)(this, name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function styleFunction(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function () {
    var string0 = (0, _d3Selection.style)(this, name),
        value1 = value(this),
        string1 = value1 + "";
    if (value1 == null) string1 = value1 = (this.style.removeProperty(name), (0, _d3Selection.style)(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

function styleMaybeRemove(id, name) {
  var on0,
      on1,
      listener0,
      key = "style." + name,
      event = "end." + key,
      remove;
  return function () {
    var schedule = (0, _schedule.set)(this, id),
        on = schedule.on,
        listener = schedule.value[key] == null ? remove || (remove = styleRemove(name)) : undefined; // If this node shared a dispatch with the previous node,
    // just assign the updated shared dispatch and we’re done!
    // Otherwise, copy-on-write.

    if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);
    schedule.on = on1;
  };
}

function _default(name, value, priority) {
  var i = (name += "") === "transform" ? _d3Interpolate.interpolateTransformCss : _interpolate.default;
  return value == null ? this.styleTween(name, styleNull(name, i)).on("end.style." + name, styleRemove(name)) : typeof value === "function" ? this.styleTween(name, styleFunction(name, i, (0, _tween.tweenValue)(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant(name, i, value), priority).on("end.style." + name, null);
}
},{"d3-interpolate":"node_modules/d3-interpolate/src/index.js","d3-selection":"node_modules/d3-selection/src/index.js","./schedule.js":"node_modules/d3-transition/src/transition/schedule.js","./tween.js":"node_modules/d3-transition/src/transition/tween.js","./interpolate.js":"node_modules/d3-transition/src/transition/interpolate.js"}],"node_modules/d3-transition/src/transition/styleTween.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function styleInterpolate(name, i, priority) {
  return function (t) {
    this.style.setProperty(name, i.call(this, t), priority);
  };
}

function styleTween(name, value, priority) {
  var t, i0;

  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);
    return t;
  }

  tween._value = value;
  return tween;
}

function _default(name, value, priority) {
  var key = "style." + (name += "");
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
}
},{}],"node_modules/d3-transition/src/transition/text.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _tween = require("./tween.js");

function textConstant(value) {
  return function () {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function () {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}

function _default(value) {
  return this.tween("text", typeof value === "function" ? textFunction((0, _tween.tweenValue)(this, "text", value)) : textConstant(value == null ? "" : value + ""));
}
},{"./tween.js":"node_modules/d3-transition/src/transition/tween.js"}],"node_modules/d3-transition/src/transition/textTween.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function textInterpolate(i) {
  return function (t) {
    this.textContent = i.call(this, t);
  };
}

function textTween(value) {
  var t0, i0;

  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && textInterpolate(i);
    return t0;
  }

  tween._value = value;
  return tween;
}

function _default(value) {
  var key = "text";
  if (arguments.length < 1) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  return this.tween(key, textTween(value));
}
},{}],"node_modules/d3-transition/src/transition/transition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index.js");

var _schedule = _interopRequireWildcard(require("./schedule.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _default() {
  var name = this._name,
      id0 = this._id,
      id1 = (0, _index.newId)();

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        var inherit = (0, _schedule.get)(node, id0);
        (0, _schedule.default)(node, name, id1, i, group, {
          time: inherit.time + inherit.delay + inherit.duration,
          delay: 0,
          duration: inherit.duration,
          ease: inherit.ease
        });
      }
    }
  }

  return new _index.Transition(groups, this._parents, name, id1);
}
},{"./index.js":"node_modules/d3-transition/src/transition/index.js","./schedule.js":"node_modules/d3-transition/src/transition/schedule.js"}],"node_modules/d3-transition/src/transition/end.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _schedule = require("./schedule.js");

function _default() {
  var on0,
      on1,
      that = this,
      id = that._id,
      size = that.size();
  return new Promise(function (resolve, reject) {
    var cancel = {
      value: reject
    },
        end = {
      value: function () {
        if (--size === 0) resolve();
      }
    };
    that.each(function () {
      var schedule = (0, _schedule.set)(this, id),
          on = schedule.on; // If this node shared a dispatch with the previous node,
      // just assign the updated shared dispatch and we’re done!
      // Otherwise, copy-on-write.

      if (on !== on0) {
        on1 = (on0 = on).copy();

        on1._.cancel.push(cancel);

        on1._.interrupt.push(cancel);

        on1._.end.push(end);
      }

      schedule.on = on1;
    });
  });
}
},{"./schedule.js":"node_modules/d3-transition/src/transition/schedule.js"}],"node_modules/d3-transition/src/transition/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Transition = Transition;
exports.default = transition;
exports.newId = newId;

var _d3Selection = require("d3-selection");

var _attr = _interopRequireDefault(require("./attr.js"));

var _attrTween = _interopRequireDefault(require("./attrTween.js"));

var _delay = _interopRequireDefault(require("./delay.js"));

var _duration = _interopRequireDefault(require("./duration.js"));

var _ease = _interopRequireDefault(require("./ease.js"));

var _filter = _interopRequireDefault(require("./filter.js"));

var _merge = _interopRequireDefault(require("./merge.js"));

var _on = _interopRequireDefault(require("./on.js"));

var _remove = _interopRequireDefault(require("./remove.js"));

var _select = _interopRequireDefault(require("./select.js"));

var _selectAll = _interopRequireDefault(require("./selectAll.js"));

var _selection = _interopRequireDefault(require("./selection.js"));

var _style = _interopRequireDefault(require("./style.js"));

var _styleTween = _interopRequireDefault(require("./styleTween.js"));

var _text = _interopRequireDefault(require("./text.js"));

var _textTween = _interopRequireDefault(require("./textTween.js"));

var _transition = _interopRequireDefault(require("./transition.js"));

var _tween = _interopRequireDefault(require("./tween.js"));

var _end = _interopRequireDefault(require("./end.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var id = 0;

function Transition(groups, parents, name, id) {
  this._groups = groups;
  this._parents = parents;
  this._name = name;
  this._id = id;
}

function transition(name) {
  return (0, _d3Selection.selection)().transition(name);
}

function newId() {
  return ++id;
}

var selection_prototype = _d3Selection.selection.prototype;
Transition.prototype = transition.prototype = {
  constructor: Transition,
  select: _select.default,
  selectAll: _selectAll.default,
  filter: _filter.default,
  merge: _merge.default,
  selection: _selection.default,
  transition: _transition.default,
  call: selection_prototype.call,
  nodes: selection_prototype.nodes,
  node: selection_prototype.node,
  size: selection_prototype.size,
  empty: selection_prototype.empty,
  each: selection_prototype.each,
  on: _on.default,
  attr: _attr.default,
  attrTween: _attrTween.default,
  style: _style.default,
  styleTween: _styleTween.default,
  text: _text.default,
  textTween: _textTween.default,
  remove: _remove.default,
  tween: _tween.default,
  delay: _delay.default,
  duration: _duration.default,
  ease: _ease.default,
  end: _end.default
};
},{"d3-selection":"node_modules/d3-selection/src/index.js","./attr.js":"node_modules/d3-transition/src/transition/attr.js","./attrTween.js":"node_modules/d3-transition/src/transition/attrTween.js","./delay.js":"node_modules/d3-transition/src/transition/delay.js","./duration.js":"node_modules/d3-transition/src/transition/duration.js","./ease.js":"node_modules/d3-transition/src/transition/ease.js","./filter.js":"node_modules/d3-transition/src/transition/filter.js","./merge.js":"node_modules/d3-transition/src/transition/merge.js","./on.js":"node_modules/d3-transition/src/transition/on.js","./remove.js":"node_modules/d3-transition/src/transition/remove.js","./select.js":"node_modules/d3-transition/src/transition/select.js","./selectAll.js":"node_modules/d3-transition/src/transition/selectAll.js","./selection.js":"node_modules/d3-transition/src/transition/selection.js","./style.js":"node_modules/d3-transition/src/transition/style.js","./styleTween.js":"node_modules/d3-transition/src/transition/styleTween.js","./text.js":"node_modules/d3-transition/src/transition/text.js","./textTween.js":"node_modules/d3-transition/src/transition/textTween.js","./transition.js":"node_modules/d3-transition/src/transition/transition.js","./tween.js":"node_modules/d3-transition/src/transition/tween.js","./end.js":"node_modules/d3-transition/src/transition/end.js"}],"node_modules/d3-ease/src/linear.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linear = linear;

function linear(t) {
  return +t;
}
},{}],"node_modules/d3-ease/src/quad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.quadIn = quadIn;
exports.quadOut = quadOut;
exports.quadInOut = quadInOut;

function quadIn(t) {
  return t * t;
}

function quadOut(t) {
  return t * (2 - t);
}

function quadInOut(t) {
  return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
}
},{}],"node_modules/d3-ease/src/cubic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cubicIn = cubicIn;
exports.cubicOut = cubicOut;
exports.cubicInOut = cubicInOut;

function cubicIn(t) {
  return t * t * t;
}

function cubicOut(t) {
  return --t * t * t + 1;
}

function cubicInOut(t) {
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}
},{}],"node_modules/d3-ease/src/poly.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.polyInOut = exports.polyOut = exports.polyIn = void 0;
var exponent = 3;

var polyIn = function custom(e) {
  e = +e;

  function polyIn(t) {
    return Math.pow(t, e);
  }

  polyIn.exponent = custom;
  return polyIn;
}(exponent);

exports.polyIn = polyIn;

var polyOut = function custom(e) {
  e = +e;

  function polyOut(t) {
    return 1 - Math.pow(1 - t, e);
  }

  polyOut.exponent = custom;
  return polyOut;
}(exponent);

exports.polyOut = polyOut;

var polyInOut = function custom(e) {
  e = +e;

  function polyInOut(t) {
    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
  }

  polyInOut.exponent = custom;
  return polyInOut;
}(exponent);

exports.polyInOut = polyInOut;
},{}],"node_modules/d3-ease/src/sin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sinIn = sinIn;
exports.sinOut = sinOut;
exports.sinInOut = sinInOut;
var pi = Math.PI,
    halfPi = pi / 2;

function sinIn(t) {
  return 1 - Math.cos(t * halfPi);
}

function sinOut(t) {
  return Math.sin(t * halfPi);
}

function sinInOut(t) {
  return (1 - Math.cos(pi * t)) / 2;
}
},{}],"node_modules/d3-ease/src/exp.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expIn = expIn;
exports.expOut = expOut;
exports.expInOut = expInOut;

function expIn(t) {
  return Math.pow(2, 10 * t - 10);
}

function expOut(t) {
  return 1 - Math.pow(2, -10 * t);
}

function expInOut(t) {
  return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;
}
},{}],"node_modules/d3-ease/src/circle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.circleIn = circleIn;
exports.circleOut = circleOut;
exports.circleInOut = circleInOut;

function circleIn(t) {
  return 1 - Math.sqrt(1 - t * t);
}

function circleOut(t) {
  return Math.sqrt(1 - --t * t);
}

function circleInOut(t) {
  return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
}
},{}],"node_modules/d3-ease/src/bounce.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bounceIn = bounceIn;
exports.bounceOut = bounceOut;
exports.bounceInOut = bounceInOut;
var b1 = 4 / 11,
    b2 = 6 / 11,
    b3 = 8 / 11,
    b4 = 3 / 4,
    b5 = 9 / 11,
    b6 = 10 / 11,
    b7 = 15 / 16,
    b8 = 21 / 22,
    b9 = 63 / 64,
    b0 = 1 / b1 / b1;

function bounceIn(t) {
  return 1 - bounceOut(1 - t);
}

function bounceOut(t) {
  return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
}

function bounceInOut(t) {
  return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
}
},{}],"node_modules/d3-ease/src/back.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.backInOut = exports.backOut = exports.backIn = void 0;
var overshoot = 1.70158;

var backIn = function custom(s) {
  s = +s;

  function backIn(t) {
    return t * t * ((s + 1) * t - s);
  }

  backIn.overshoot = custom;
  return backIn;
}(overshoot);

exports.backIn = backIn;

var backOut = function custom(s) {
  s = +s;

  function backOut(t) {
    return --t * t * ((s + 1) * t + s) + 1;
  }

  backOut.overshoot = custom;
  return backOut;
}(overshoot);

exports.backOut = backOut;

var backInOut = function custom(s) {
  s = +s;

  function backInOut(t) {
    return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
  }

  backInOut.overshoot = custom;
  return backInOut;
}(overshoot);

exports.backInOut = backInOut;
},{}],"node_modules/d3-ease/src/elastic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.elasticInOut = exports.elasticOut = exports.elasticIn = void 0;
var tau = 2 * Math.PI,
    amplitude = 1,
    period = 0.3;

var elasticIn = function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticIn(t) {
    return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);
  }

  elasticIn.amplitude = function (a) {
    return custom(a, p * tau);
  };

  elasticIn.period = function (p) {
    return custom(a, p);
  };

  return elasticIn;
}(amplitude, period);

exports.elasticIn = elasticIn;

var elasticOut = function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticOut(t) {
    return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);
  }

  elasticOut.amplitude = function (a) {
    return custom(a, p * tau);
  };

  elasticOut.period = function (p) {
    return custom(a, p);
  };

  return elasticOut;
}(amplitude, period);

exports.elasticOut = elasticOut;

var elasticInOut = function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticInOut(t) {
    return ((t = t * 2 - 1) < 0 ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p) : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;
  }

  elasticInOut.amplitude = function (a) {
    return custom(a, p * tau);
  };

  elasticInOut.period = function (p) {
    return custom(a, p);
  };

  return elasticInOut;
}(amplitude, period);

exports.elasticInOut = elasticInOut;
},{}],"node_modules/d3-ease/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "easeLinear", {
  enumerable: true,
  get: function () {
    return _linear.linear;
  }
});
Object.defineProperty(exports, "easeQuad", {
  enumerable: true,
  get: function () {
    return _quad.quadInOut;
  }
});
Object.defineProperty(exports, "easeQuadIn", {
  enumerable: true,
  get: function () {
    return _quad.quadIn;
  }
});
Object.defineProperty(exports, "easeQuadOut", {
  enumerable: true,
  get: function () {
    return _quad.quadOut;
  }
});
Object.defineProperty(exports, "easeQuadInOut", {
  enumerable: true,
  get: function () {
    return _quad.quadInOut;
  }
});
Object.defineProperty(exports, "easeCubic", {
  enumerable: true,
  get: function () {
    return _cubic.cubicInOut;
  }
});
Object.defineProperty(exports, "easeCubicIn", {
  enumerable: true,
  get: function () {
    return _cubic.cubicIn;
  }
});
Object.defineProperty(exports, "easeCubicOut", {
  enumerable: true,
  get: function () {
    return _cubic.cubicOut;
  }
});
Object.defineProperty(exports, "easeCubicInOut", {
  enumerable: true,
  get: function () {
    return _cubic.cubicInOut;
  }
});
Object.defineProperty(exports, "easePoly", {
  enumerable: true,
  get: function () {
    return _poly.polyInOut;
  }
});
Object.defineProperty(exports, "easePolyIn", {
  enumerable: true,
  get: function () {
    return _poly.polyIn;
  }
});
Object.defineProperty(exports, "easePolyOut", {
  enumerable: true,
  get: function () {
    return _poly.polyOut;
  }
});
Object.defineProperty(exports, "easePolyInOut", {
  enumerable: true,
  get: function () {
    return _poly.polyInOut;
  }
});
Object.defineProperty(exports, "easeSin", {
  enumerable: true,
  get: function () {
    return _sin.sinInOut;
  }
});
Object.defineProperty(exports, "easeSinIn", {
  enumerable: true,
  get: function () {
    return _sin.sinIn;
  }
});
Object.defineProperty(exports, "easeSinOut", {
  enumerable: true,
  get: function () {
    return _sin.sinOut;
  }
});
Object.defineProperty(exports, "easeSinInOut", {
  enumerable: true,
  get: function () {
    return _sin.sinInOut;
  }
});
Object.defineProperty(exports, "easeExp", {
  enumerable: true,
  get: function () {
    return _exp.expInOut;
  }
});
Object.defineProperty(exports, "easeExpIn", {
  enumerable: true,
  get: function () {
    return _exp.expIn;
  }
});
Object.defineProperty(exports, "easeExpOut", {
  enumerable: true,
  get: function () {
    return _exp.expOut;
  }
});
Object.defineProperty(exports, "easeExpInOut", {
  enumerable: true,
  get: function () {
    return _exp.expInOut;
  }
});
Object.defineProperty(exports, "easeCircle", {
  enumerable: true,
  get: function () {
    return _circle.circleInOut;
  }
});
Object.defineProperty(exports, "easeCircleIn", {
  enumerable: true,
  get: function () {
    return _circle.circleIn;
  }
});
Object.defineProperty(exports, "easeCircleOut", {
  enumerable: true,
  get: function () {
    return _circle.circleOut;
  }
});
Object.defineProperty(exports, "easeCircleInOut", {
  enumerable: true,
  get: function () {
    return _circle.circleInOut;
  }
});
Object.defineProperty(exports, "easeBounce", {
  enumerable: true,
  get: function () {
    return _bounce.bounceOut;
  }
});
Object.defineProperty(exports, "easeBounceIn", {
  enumerable: true,
  get: function () {
    return _bounce.bounceIn;
  }
});
Object.defineProperty(exports, "easeBounceOut", {
  enumerable: true,
  get: function () {
    return _bounce.bounceOut;
  }
});
Object.defineProperty(exports, "easeBounceInOut", {
  enumerable: true,
  get: function () {
    return _bounce.bounceInOut;
  }
});
Object.defineProperty(exports, "easeBack", {
  enumerable: true,
  get: function () {
    return _back.backInOut;
  }
});
Object.defineProperty(exports, "easeBackIn", {
  enumerable: true,
  get: function () {
    return _back.backIn;
  }
});
Object.defineProperty(exports, "easeBackOut", {
  enumerable: true,
  get: function () {
    return _back.backOut;
  }
});
Object.defineProperty(exports, "easeBackInOut", {
  enumerable: true,
  get: function () {
    return _back.backInOut;
  }
});
Object.defineProperty(exports, "easeElastic", {
  enumerable: true,
  get: function () {
    return _elastic.elasticOut;
  }
});
Object.defineProperty(exports, "easeElasticIn", {
  enumerable: true,
  get: function () {
    return _elastic.elasticIn;
  }
});
Object.defineProperty(exports, "easeElasticOut", {
  enumerable: true,
  get: function () {
    return _elastic.elasticOut;
  }
});
Object.defineProperty(exports, "easeElasticInOut", {
  enumerable: true,
  get: function () {
    return _elastic.elasticInOut;
  }
});

var _linear = require("./linear.js");

var _quad = require("./quad.js");

var _cubic = require("./cubic.js");

var _poly = require("./poly.js");

var _sin = require("./sin.js");

var _exp = require("./exp.js");

var _circle = require("./circle.js");

var _bounce = require("./bounce.js");

var _back = require("./back.js");

var _elastic = require("./elastic.js");
},{"./linear.js":"node_modules/d3-ease/src/linear.js","./quad.js":"node_modules/d3-ease/src/quad.js","./cubic.js":"node_modules/d3-ease/src/cubic.js","./poly.js":"node_modules/d3-ease/src/poly.js","./sin.js":"node_modules/d3-ease/src/sin.js","./exp.js":"node_modules/d3-ease/src/exp.js","./circle.js":"node_modules/d3-ease/src/circle.js","./bounce.js":"node_modules/d3-ease/src/bounce.js","./back.js":"node_modules/d3-ease/src/back.js","./elastic.js":"node_modules/d3-ease/src/elastic.js"}],"node_modules/d3-transition/src/selection/transition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("../transition/index.js");

var _schedule = _interopRequireDefault(require("../transition/schedule.js"));

var _d3Ease = require("d3-ease");

var _d3Timer = require("d3-timer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultTiming = {
  time: null,
  // Set on use.
  delay: 0,
  duration: 250,
  ease: _d3Ease.easeCubicInOut
};

function inherit(node, id) {
  var timing;

  while (!(timing = node.__transition) || !(timing = timing[id])) {
    if (!(node = node.parentNode)) {
      return defaultTiming.time = (0, _d3Timer.now)(), defaultTiming;
    }
  }

  return timing;
}

function _default(name) {
  var id, timing;

  if (name instanceof _index.Transition) {
    id = name._id, name = name._name;
  } else {
    id = (0, _index.newId)(), (timing = defaultTiming).time = (0, _d3Timer.now)(), name = name == null ? null : name + "";
  }

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        (0, _schedule.default)(node, name, id, i, group, timing || inherit(node, id));
      }
    }
  }

  return new _index.Transition(groups, this._parents, name, id);
}
},{"../transition/index.js":"node_modules/d3-transition/src/transition/index.js","../transition/schedule.js":"node_modules/d3-transition/src/transition/schedule.js","d3-ease":"node_modules/d3-ease/src/index.js","d3-timer":"node_modules/d3-timer/src/index.js"}],"node_modules/d3-transition/src/selection/index.js":[function(require,module,exports) {
"use strict";

var _d3Selection = require("d3-selection");

var _interrupt = _interopRequireDefault(require("./interrupt.js"));

var _transition = _interopRequireDefault(require("./transition.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_d3Selection.selection.prototype.interrupt = _interrupt.default;
_d3Selection.selection.prototype.transition = _transition.default;
},{"d3-selection":"node_modules/d3-selection/src/index.js","./interrupt.js":"node_modules/d3-transition/src/selection/interrupt.js","./transition.js":"node_modules/d3-transition/src/selection/transition.js"}],"node_modules/d3-transition/src/active.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./transition/index.js");

var _schedule = require("./transition/schedule.js");

var root = [null];

function _default(node, name) {
  var schedules = node.__transition,
      schedule,
      i;

  if (schedules) {
    name = name == null ? null : name + "";

    for (i in schedules) {
      if ((schedule = schedules[i]).state > _schedule.SCHEDULED && schedule.name === name) {
        return new _index.Transition([[node]], root, name, +i);
      }
    }
  }

  return null;
}
},{"./transition/index.js":"node_modules/d3-transition/src/transition/index.js","./transition/schedule.js":"node_modules/d3-transition/src/transition/schedule.js"}],"node_modules/d3-transition/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "transition", {
  enumerable: true,
  get: function () {
    return _index2.default;
  }
});
Object.defineProperty(exports, "active", {
  enumerable: true,
  get: function () {
    return _active.default;
  }
});
Object.defineProperty(exports, "interrupt", {
  enumerable: true,
  get: function () {
    return _interrupt.default;
  }
});

require("./selection/index.js");

var _index2 = _interopRequireDefault(require("./transition/index.js"));

var _active = _interopRequireDefault(require("./active.js"));

var _interrupt = _interopRequireDefault(require("./interrupt.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./selection/index.js":"node_modules/d3-transition/src/selection/index.js","./transition/index.js":"node_modules/d3-transition/src/transition/index.js","./active.js":"node_modules/d3-transition/src/active.js","./interrupt.js":"node_modules/d3-transition/src/interrupt.js"}],"node_modules/d3-brush/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-brush/src/event.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(target, type, selection) {
  this.target = target;
  this.type = type;
  this.selection = selection;
}
},{}],"node_modules/d3-brush/src/noevent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nopropagation = nopropagation;
exports.default = _default;

var _d3Selection = require("d3-selection");

function nopropagation() {
  _d3Selection.event.stopImmediatePropagation();
}

function _default() {
  _d3Selection.event.preventDefault();

  _d3Selection.event.stopImmediatePropagation();
}
},{"d3-selection":"node_modules/d3-selection/src/index.js"}],"node_modules/d3-brush/src/brush.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.brushSelection = brushSelection;
exports.brushX = brushX;
exports.brushY = brushY;
exports.default = _default;

var _d3Dispatch = require("d3-dispatch");

var _d3Drag = require("d3-drag");

var _d3Interpolate = require("d3-interpolate");

var _d3Selection = require("d3-selection");

var _d3Transition = require("d3-transition");

var _constant = _interopRequireDefault(require("./constant.js"));

var _event = _interopRequireDefault(require("./event.js"));

var _noevent = _interopRequireWildcard(require("./noevent.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MODE_DRAG = {
  name: "drag"
},
    MODE_SPACE = {
  name: "space"
},
    MODE_HANDLE = {
  name: "handle"
},
    MODE_CENTER = {
  name: "center"
};

function number1(e) {
  return [+e[0], +e[1]];
}

function number2(e) {
  return [number1(e[0]), number1(e[1])];
}

function toucher(identifier) {
  return function (target) {
    return (0, _d3Selection.touch)(target, _d3Selection.event.touches, identifier);
  };
}

var X = {
  name: "x",
  handles: ["w", "e"].map(type),
  input: function (x, e) {
    return x == null ? null : [[+x[0], e[0][1]], [+x[1], e[1][1]]];
  },
  output: function (xy) {
    return xy && [xy[0][0], xy[1][0]];
  }
};
var Y = {
  name: "y",
  handles: ["n", "s"].map(type),
  input: function (y, e) {
    return y == null ? null : [[e[0][0], +y[0]], [e[1][0], +y[1]]];
  },
  output: function (xy) {
    return xy && [xy[0][1], xy[1][1]];
  }
};
var XY = {
  name: "xy",
  handles: ["n", "w", "e", "s", "nw", "ne", "sw", "se"].map(type),
  input: function (xy) {
    return xy == null ? null : number2(xy);
  },
  output: function (xy) {
    return xy;
  }
};
var cursors = {
  overlay: "crosshair",
  selection: "move",
  n: "ns-resize",
  e: "ew-resize",
  s: "ns-resize",
  w: "ew-resize",
  nw: "nwse-resize",
  ne: "nesw-resize",
  se: "nwse-resize",
  sw: "nesw-resize"
};
var flipX = {
  e: "w",
  w: "e",
  nw: "ne",
  ne: "nw",
  se: "sw",
  sw: "se"
};
var flipY = {
  n: "s",
  s: "n",
  nw: "sw",
  ne: "se",
  se: "ne",
  sw: "nw"
};
var signsX = {
  overlay: +1,
  selection: +1,
  n: null,
  e: +1,
  s: null,
  w: -1,
  nw: -1,
  ne: +1,
  se: +1,
  sw: -1
};
var signsY = {
  overlay: +1,
  selection: +1,
  n: -1,
  e: null,
  s: +1,
  w: null,
  nw: -1,
  ne: -1,
  se: +1,
  sw: +1
};

function type(t) {
  return {
    type: t
  };
} // Ignore right-click, since that should open the context menu.


function defaultFilter() {
  return !_d3Selection.event.ctrlKey && !_d3Selection.event.button;
}

function defaultExtent() {
  var svg = this.ownerSVGElement || this;

  if (svg.hasAttribute("viewBox")) {
    svg = svg.viewBox.baseVal;
    return [[svg.x, svg.y], [svg.x + svg.width, svg.y + svg.height]];
  }

  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];
}

function defaultTouchable() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
} // Like d3.local, but with the name “__brush” rather than auto-generated.


function local(node) {
  while (!node.__brush) if (!(node = node.parentNode)) return;

  return node.__brush;
}

function empty(extent) {
  return extent[0][0] === extent[1][0] || extent[0][1] === extent[1][1];
}

function brushSelection(node) {
  var state = node.__brush;
  return state ? state.dim.output(state.selection) : null;
}

function brushX() {
  return brush(X);
}

function brushY() {
  return brush(Y);
}

function _default() {
  return brush(XY);
}

function brush(dim) {
  var extent = defaultExtent,
      filter = defaultFilter,
      touchable = defaultTouchable,
      keys = true,
      listeners = (0, _d3Dispatch.dispatch)("start", "brush", "end"),
      handleSize = 6,
      touchending;

  function brush(group) {
    var overlay = group.property("__brush", initialize).selectAll(".overlay").data([type("overlay")]);
    overlay.enter().append("rect").attr("class", "overlay").attr("pointer-events", "all").attr("cursor", cursors.overlay).merge(overlay).each(function () {
      var extent = local(this).extent;
      (0, _d3Selection.select)(this).attr("x", extent[0][0]).attr("y", extent[0][1]).attr("width", extent[1][0] - extent[0][0]).attr("height", extent[1][1] - extent[0][1]);
    });
    group.selectAll(".selection").data([type("selection")]).enter().append("rect").attr("class", "selection").attr("cursor", cursors.selection).attr("fill", "#777").attr("fill-opacity", 0.3).attr("stroke", "#fff").attr("shape-rendering", "crispEdges");
    var handle = group.selectAll(".handle").data(dim.handles, function (d) {
      return d.type;
    });
    handle.exit().remove();
    handle.enter().append("rect").attr("class", function (d) {
      return "handle handle--" + d.type;
    }).attr("cursor", function (d) {
      return cursors[d.type];
    });
    group.each(redraw).attr("fill", "none").attr("pointer-events", "all").on("mousedown.brush", started).filter(touchable).on("touchstart.brush", started).on("touchmove.brush", touchmoved).on("touchend.brush touchcancel.brush", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }

  brush.move = function (group, selection) {
    if (group.selection) {
      group.on("start.brush", function () {
        emitter(this, arguments).beforestart().start();
      }).on("interrupt.brush end.brush", function () {
        emitter(this, arguments).end();
      }).tween("brush", function () {
        var that = this,
            state = that.__brush,
            emit = emitter(that, arguments),
            selection0 = state.selection,
            selection1 = dim.input(typeof selection === "function" ? selection.apply(this, arguments) : selection, state.extent),
            i = (0, _d3Interpolate.interpolate)(selection0, selection1);

        function tween(t) {
          state.selection = t === 1 && selection1 === null ? null : i(t);
          redraw.call(that);
          emit.brush();
        }

        return selection0 !== null && selection1 !== null ? tween : tween(1);
      });
    } else {
      group.each(function () {
        var that = this,
            args = arguments,
            state = that.__brush,
            selection1 = dim.input(typeof selection === "function" ? selection.apply(that, args) : selection, state.extent),
            emit = emitter(that, args).beforestart();
        (0, _d3Transition.interrupt)(that);
        state.selection = selection1 === null ? null : selection1;
        redraw.call(that);
        emit.start().brush().end();
      });
    }
  };

  brush.clear = function (group) {
    brush.move(group, null);
  };

  function redraw() {
    var group = (0, _d3Selection.select)(this),
        selection = local(this).selection;

    if (selection) {
      group.selectAll(".selection").style("display", null).attr("x", selection[0][0]).attr("y", selection[0][1]).attr("width", selection[1][0] - selection[0][0]).attr("height", selection[1][1] - selection[0][1]);
      group.selectAll(".handle").style("display", null).attr("x", function (d) {
        return d.type[d.type.length - 1] === "e" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2;
      }).attr("y", function (d) {
        return d.type[0] === "s" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2;
      }).attr("width", function (d) {
        return d.type === "n" || d.type === "s" ? selection[1][0] - selection[0][0] + handleSize : handleSize;
      }).attr("height", function (d) {
        return d.type === "e" || d.type === "w" ? selection[1][1] - selection[0][1] + handleSize : handleSize;
      });
    } else {
      group.selectAll(".selection,.handle").style("display", "none").attr("x", null).attr("y", null).attr("width", null).attr("height", null);
    }
  }

  function emitter(that, args, clean) {
    return !clean && that.__brush.emitter || new Emitter(that, args);
  }

  function Emitter(that, args) {
    this.that = that;
    this.args = args;
    this.state = that.__brush;
    this.active = 0;
  }

  Emitter.prototype = {
    beforestart: function () {
      if (++this.active === 1) this.state.emitter = this, this.starting = true;
      return this;
    },
    start: function () {
      if (this.starting) this.starting = false, this.emit("start");else this.emit("brush");
      return this;
    },
    brush: function () {
      this.emit("brush");
      return this;
    },
    end: function () {
      if (--this.active === 0) delete this.state.emitter, this.emit("end");
      return this;
    },
    emit: function (type) {
      (0, _d3Selection.customEvent)(new _event.default(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);
    }
  };

  function started() {
    if (touchending && !_d3Selection.event.touches) return;
    if (!filter.apply(this, arguments)) return;
    var that = this,
        type = _d3Selection.event.target.__data__.type,
        mode = (keys && _d3Selection.event.metaKey ? type = "overlay" : type) === "selection" ? MODE_DRAG : keys && _d3Selection.event.altKey ? MODE_CENTER : MODE_HANDLE,
        signX = dim === Y ? null : signsX[type],
        signY = dim === X ? null : signsY[type],
        state = local(that),
        extent = state.extent,
        selection = state.selection,
        W = extent[0][0],
        w0,
        w1,
        N = extent[0][1],
        n0,
        n1,
        E = extent[1][0],
        e0,
        e1,
        S = extent[1][1],
        s0,
        s1,
        dx = 0,
        dy = 0,
        moving,
        shifting = signX && signY && keys && _d3Selection.event.shiftKey,
        lockX,
        lockY,
        pointer = _d3Selection.event.touches ? toucher(_d3Selection.event.changedTouches[0].identifier) : _d3Selection.mouse,
        point0 = pointer(that),
        point = point0,
        emit = emitter(that, arguments, true).beforestart();

    if (type === "overlay") {
      if (selection) moving = true;
      state.selection = selection = [[w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]], [e0 = dim === Y ? E : w0, s0 = dim === X ? S : n0]];
    } else {
      w0 = selection[0][0];
      n0 = selection[0][1];
      e0 = selection[1][0];
      s0 = selection[1][1];
    }

    w1 = w0;
    n1 = n0;
    e1 = e0;
    s1 = s0;
    var group = (0, _d3Selection.select)(that).attr("pointer-events", "none");
    var overlay = group.selectAll(".overlay").attr("cursor", cursors[type]);

    if (_d3Selection.event.touches) {
      emit.moved = moved;
      emit.ended = ended;
    } else {
      var view = (0, _d3Selection.select)(_d3Selection.event.view).on("mousemove.brush", moved, true).on("mouseup.brush", ended, true);
      if (keys) view.on("keydown.brush", keydowned, true).on("keyup.brush", keyupped, true);
      (0, _d3Drag.dragDisable)(_d3Selection.event.view);
    }

    (0, _noevent.nopropagation)();
    (0, _d3Transition.interrupt)(that);
    redraw.call(that);
    emit.start();

    function moved() {
      var point1 = pointer(that);

      if (shifting && !lockX && !lockY) {
        if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;else lockX = true;
      }

      point = point1;
      moving = true;
      (0, _noevent.default)();
      move();
    }

    function move() {
      var t;
      dx = point[0] - point0[0];
      dy = point[1] - point0[1];

      switch (mode) {
        case MODE_SPACE:
        case MODE_DRAG:
          {
            if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
            if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
            break;
          }

        case MODE_HANDLE:
          {
            if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;
            if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;
            break;
          }

        case MODE_CENTER:
          {
            if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));
            if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));
            break;
          }
      }

      if (e1 < w1) {
        signX *= -1;
        t = w0, w0 = e0, e0 = t;
        t = w1, w1 = e1, e1 = t;
        if (type in flipX) overlay.attr("cursor", cursors[type = flipX[type]]);
      }

      if (s1 < n1) {
        signY *= -1;
        t = n0, n0 = s0, s0 = t;
        t = n1, n1 = s1, s1 = t;
        if (type in flipY) overlay.attr("cursor", cursors[type = flipY[type]]);
      }

      if (state.selection) selection = state.selection; // May be set by brush.move!

      if (lockX) w1 = selection[0][0], e1 = selection[1][0];
      if (lockY) n1 = selection[0][1], s1 = selection[1][1];

      if (selection[0][0] !== w1 || selection[0][1] !== n1 || selection[1][0] !== e1 || selection[1][1] !== s1) {
        state.selection = [[w1, n1], [e1, s1]];
        redraw.call(that);
        emit.brush();
      }
    }

    function ended() {
      (0, _noevent.nopropagation)();

      if (_d3Selection.event.touches) {
        if (_d3Selection.event.touches.length) return;
        if (touchending) clearTimeout(touchending);
        touchending = setTimeout(function () {
          touchending = null;
        }, 500); // Ghost clicks are delayed!
      } else {
        (0, _d3Drag.dragEnable)(_d3Selection.event.view, moving);
        view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
      }

      group.attr("pointer-events", "all");
      overlay.attr("cursor", cursors.overlay);
      if (state.selection) selection = state.selection; // May be set by brush.move (on start)!

      if (empty(selection)) state.selection = null, redraw.call(that);
      emit.end();
    }

    function keydowned() {
      switch (_d3Selection.event.keyCode) {
        case 16:
          {
            // SHIFT
            shifting = signX && signY;
            break;
          }

        case 18:
          {
            // ALT
            if (mode === MODE_HANDLE) {
              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
              mode = MODE_CENTER;
              move();
            }

            break;
          }

        case 32:
          {
            // SPACE; takes priority over ALT
            if (mode === MODE_HANDLE || mode === MODE_CENTER) {
              if (signX < 0) e0 = e1 - dx;else if (signX > 0) w0 = w1 - dx;
              if (signY < 0) s0 = s1 - dy;else if (signY > 0) n0 = n1 - dy;
              mode = MODE_SPACE;
              overlay.attr("cursor", cursors.selection);
              move();
            }

            break;
          }

        default:
          return;
      }

      (0, _noevent.default)();
    }

    function keyupped() {
      switch (_d3Selection.event.keyCode) {
        case 16:
          {
            // SHIFT
            if (shifting) {
              lockX = lockY = shifting = false;
              move();
            }

            break;
          }

        case 18:
          {
            // ALT
            if (mode === MODE_CENTER) {
              if (signX < 0) e0 = e1;else if (signX > 0) w0 = w1;
              if (signY < 0) s0 = s1;else if (signY > 0) n0 = n1;
              mode = MODE_HANDLE;
              move();
            }

            break;
          }

        case 32:
          {
            // SPACE
            if (mode === MODE_SPACE) {
              if (_d3Selection.event.altKey) {
                if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
                if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
                mode = MODE_CENTER;
              } else {
                if (signX < 0) e0 = e1;else if (signX > 0) w0 = w1;
                if (signY < 0) s0 = s1;else if (signY > 0) n0 = n1;
                mode = MODE_HANDLE;
              }

              overlay.attr("cursor", cursors[type]);
              move();
            }

            break;
          }

        default:
          return;
      }

      (0, _noevent.default)();
    }
  }

  function touchmoved() {
    emitter(this, arguments).moved();
  }

  function touchended() {
    emitter(this, arguments).ended();
  }

  function initialize() {
    var state = this.__brush || {
      selection: null
    };
    state.extent = number2(extent.apply(this, arguments));
    state.dim = dim;
    return state;
  }

  brush.extent = function (_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : (0, _constant.default)(number2(_)), brush) : extent;
  };

  brush.filter = function (_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : (0, _constant.default)(!!_), brush) : filter;
  };

  brush.touchable = function (_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : (0, _constant.default)(!!_), brush) : touchable;
  };

  brush.handleSize = function (_) {
    return arguments.length ? (handleSize = +_, brush) : handleSize;
  };

  brush.keyModifiers = function (_) {
    return arguments.length ? (keys = !!_, brush) : keys;
  };

  brush.on = function () {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? brush : value;
  };

  return brush;
}
},{"d3-dispatch":"node_modules/d3-dispatch/src/index.js","d3-drag":"node_modules/d3-drag/src/index.js","d3-interpolate":"node_modules/d3-interpolate/src/index.js","d3-selection":"node_modules/d3-selection/src/index.js","d3-transition":"node_modules/d3-transition/src/index.js","./constant.js":"node_modules/d3-brush/src/constant.js","./event.js":"node_modules/d3-brush/src/event.js","./noevent.js":"node_modules/d3-brush/src/noevent.js"}],"node_modules/d3-brush/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "brush", {
  enumerable: true,
  get: function () {
    return _brush.default;
  }
});
Object.defineProperty(exports, "brushX", {
  enumerable: true,
  get: function () {
    return _brush.brushX;
  }
});
Object.defineProperty(exports, "brushY", {
  enumerable: true,
  get: function () {
    return _brush.brushY;
  }
});
Object.defineProperty(exports, "brushSelection", {
  enumerable: true,
  get: function () {
    return _brush.brushSelection;
  }
});

var _brush = _interopRequireWildcard(require("./brush.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
},{"./brush.js":"node_modules/d3-brush/src/brush.js"}],"node_modules/d3-chord/src/math.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.max = exports.tau = exports.halfPi = exports.pi = exports.sin = exports.cos = void 0;
var cos = Math.cos;
exports.cos = cos;
var sin = Math.sin;
exports.sin = sin;
var pi = Math.PI;
exports.pi = pi;
var halfPi = pi / 2;
exports.halfPi = halfPi;
var tau = pi * 2;
exports.tau = tau;
var max = Math.max;
exports.max = max;
},{}],"node_modules/d3-chord/src/chord.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Array = require("d3-array");

var _math = require("./math");

function compareValue(compare) {
  return function (a, b) {
    return compare(a.source.value + a.target.value, b.source.value + b.target.value);
  };
}

function _default() {
  var padAngle = 0,
      sortGroups = null,
      sortSubgroups = null,
      sortChords = null;

  function chord(matrix) {
    var n = matrix.length,
        groupSums = [],
        groupIndex = (0, _d3Array.range)(n),
        subgroupIndex = [],
        chords = [],
        groups = chords.groups = new Array(n),
        subgroups = new Array(n * n),
        k,
        x,
        x0,
        dx,
        i,
        j; // Compute the sum.

    k = 0, i = -1;

    while (++i < n) {
      x = 0, j = -1;

      while (++j < n) {
        x += matrix[i][j];
      }

      groupSums.push(x);
      subgroupIndex.push((0, _d3Array.range)(n));
      k += x;
    } // Sort groups…


    if (sortGroups) groupIndex.sort(function (a, b) {
      return sortGroups(groupSums[a], groupSums[b]);
    }); // Sort subgroups…

    if (sortSubgroups) subgroupIndex.forEach(function (d, i) {
      d.sort(function (a, b) {
        return sortSubgroups(matrix[i][a], matrix[i][b]);
      });
    }); // Convert the sum to scaling factor for [0, 2pi].
    // TODO Allow start and end angle to be specified?
    // TODO Allow padding to be specified as percentage?

    k = (0, _math.max)(0, _math.tau - padAngle * n) / k;
    dx = k ? padAngle : _math.tau / n; // Compute the start and end angle for each group and subgroup.
    // Note: Opera has a bug reordering object literal properties!

    x = 0, i = -1;

    while (++i < n) {
      x0 = x, j = -1;

      while (++j < n) {
        var di = groupIndex[i],
            dj = subgroupIndex[di][j],
            v = matrix[di][dj],
            a0 = x,
            a1 = x += v * k;
        subgroups[dj * n + di] = {
          index: di,
          subindex: dj,
          startAngle: a0,
          endAngle: a1,
          value: v
        };
      }

      groups[di] = {
        index: di,
        startAngle: x0,
        endAngle: x,
        value: groupSums[di]
      };
      x += dx;
    } // Generate chords for each (non-empty) subgroup-subgroup link.


    i = -1;

    while (++i < n) {
      j = i - 1;

      while (++j < n) {
        var source = subgroups[j * n + i],
            target = subgroups[i * n + j];

        if (source.value || target.value) {
          chords.push(source.value < target.value ? {
            source: target,
            target: source
          } : {
            source: source,
            target: target
          });
        }
      }
    }

    return sortChords ? chords.sort(sortChords) : chords;
  }

  chord.padAngle = function (_) {
    return arguments.length ? (padAngle = (0, _math.max)(0, _), chord) : padAngle;
  };

  chord.sortGroups = function (_) {
    return arguments.length ? (sortGroups = _, chord) : sortGroups;
  };

  chord.sortSubgroups = function (_) {
    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;
  };

  chord.sortChords = function (_) {
    return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;
  };

  return chord;
}
},{"d3-array":"node_modules/d3-array/src/index.js","./math":"node_modules/d3-chord/src/math.js"}],"node_modules/d3-chord/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = void 0;
var slice = Array.prototype.slice;
exports.slice = slice;
},{}],"node_modules/d3-chord/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-path/src/path.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var pi = Math.PI,
    tau = 2 * pi,
    epsilon = 1e-6,
    tauEpsilon = tau - epsilon;

function Path() {
  this._x0 = this._y0 = // start of current subpath
  this._x1 = this._y1 = null; // end of current subpath

  this._ = "";
}

function path() {
  return new Path();
}

Path.prototype = path.prototype = {
  constructor: Path,
  moveTo: function (x, y) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
  },
  closePath: function () {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  },
  lineTo: function (x, y) {
    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  quadraticCurveTo: function (x1, y1, x, y) {
    this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  bezierCurveTo: function (x1, y1, x2, y2, x, y) {
    this._ += "C" + +x1 + "," + +y1 + "," + +x2 + "," + +y2 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  arcTo: function (x1, y1, x2, y2, r) {
    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
    var x0 = this._x1,
        y0 = this._y1,
        x21 = x2 - x1,
        y21 = y2 - y1,
        x01 = x0 - x1,
        y01 = y0 - y1,
        l01_2 = x01 * x01 + y01 * y01; // Is the radius negative? Error.

    if (r < 0) throw new Error("negative radius: " + r); // Is this path empty? Move to (x1,y1).

    if (this._x1 === null) {
      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
    } // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
    else if (!(l01_2 > epsilon)) ; // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
      // Equivalently, is (x1,y1) coincident with (x2,y2)?
      // Or, is the radius zero? Line to (x1,y1).
      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
          this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
        } // Otherwise, draw an arc!
        else {
            var x20 = x2 - x0,
                y20 = y2 - y0,
                l21_2 = x21 * x21 + y21 * y21,
                l20_2 = x20 * x20 + y20 * y20,
                l21 = Math.sqrt(l21_2),
                l01 = Math.sqrt(l01_2),
                l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
                t01 = l / l01,
                t21 = l / l21; // If the start tangent is not coincident with (x0,y0), line to.

            if (Math.abs(t01 - 1) > epsilon) {
              this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
            }

            this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
          }
  },
  arc: function (x, y, r, a0, a1, ccw) {
    x = +x, y = +y, r = +r, ccw = !!ccw;
    var dx = r * Math.cos(a0),
        dy = r * Math.sin(a0),
        x0 = x + dx,
        y0 = y + dy,
        cw = 1 ^ ccw,
        da = ccw ? a0 - a1 : a1 - a0; // Is the radius negative? Error.

    if (r < 0) throw new Error("negative radius: " + r); // Is this path empty? Move to (x0,y0).

    if (this._x1 === null) {
      this._ += "M" + x0 + "," + y0;
    } // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
        this._ += "L" + x0 + "," + y0;
      } // Is this arc empty? We’re done.


    if (!r) return; // Does the angle go the wrong way? Flip the direction.

    if (da < 0) da = da % tau + tau; // Is this a complete circle? Draw two arcs to complete the circle.

    if (da > tauEpsilon) {
      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
    } // Is this arc non-empty? Draw an arc!
    else if (da > epsilon) {
        this._ += "A" + r + "," + r + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
      }
  },
  rect: function (x, y, w, h) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + +w + "v" + +h + "h" + -w + "Z";
  },
  toString: function () {
    return this._;
  }
};
var _default = path;
exports.default = _default;
},{}],"node_modules/d3-path/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "path", {
  enumerable: true,
  get: function () {
    return _path.default;
  }
});

var _path = _interopRequireDefault(require("./path.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./path.js":"node_modules/d3-path/src/path.js"}],"node_modules/d3-chord/src/ribbon.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("./array");

var _constant = _interopRequireDefault(require("./constant"));

var _math = require("./math");

var _d3Path = require("d3-path");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function defaultSource(d) {
  return d.source;
}

function defaultTarget(d) {
  return d.target;
}

function defaultRadius(d) {
  return d.radius;
}

function defaultStartAngle(d) {
  return d.startAngle;
}

function defaultEndAngle(d) {
  return d.endAngle;
}

function _default() {
  var source = defaultSource,
      target = defaultTarget,
      radius = defaultRadius,
      startAngle = defaultStartAngle,
      endAngle = defaultEndAngle,
      context = null;

  function ribbon() {
    var buffer,
        argv = _array.slice.call(arguments),
        s = source.apply(this, argv),
        t = target.apply(this, argv),
        sr = +radius.apply(this, (argv[0] = s, argv)),
        sa0 = startAngle.apply(this, argv) - _math.halfPi,
        sa1 = endAngle.apply(this, argv) - _math.halfPi,
        sx0 = sr * (0, _math.cos)(sa0),
        sy0 = sr * (0, _math.sin)(sa0),
        tr = +radius.apply(this, (argv[0] = t, argv)),
        ta0 = startAngle.apply(this, argv) - _math.halfPi,
        ta1 = endAngle.apply(this, argv) - _math.halfPi;

    if (!context) context = buffer = (0, _d3Path.path)();
    context.moveTo(sx0, sy0);
    context.arc(0, 0, sr, sa0, sa1);

    if (sa0 !== ta0 || sa1 !== ta1) {
      // TODO sr !== tr?
      context.quadraticCurveTo(0, 0, tr * (0, _math.cos)(ta0), tr * (0, _math.sin)(ta0));
      context.arc(0, 0, tr, ta0, ta1);
    }

    context.quadraticCurveTo(0, 0, sx0, sy0);
    context.closePath();
    if (buffer) return context = null, buffer + "" || null;
  }

  ribbon.radius = function (_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : (0, _constant.default)(+_), ribbon) : radius;
  };

  ribbon.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), ribbon) : startAngle;
  };

  ribbon.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), ribbon) : endAngle;
  };

  ribbon.source = function (_) {
    return arguments.length ? (source = _, ribbon) : source;
  };

  ribbon.target = function (_) {
    return arguments.length ? (target = _, ribbon) : target;
  };

  ribbon.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, ribbon) : context;
  };

  return ribbon;
}
},{"./array":"node_modules/d3-chord/src/array.js","./constant":"node_modules/d3-chord/src/constant.js","./math":"node_modules/d3-chord/src/math.js","d3-path":"node_modules/d3-path/src/index.js"}],"node_modules/d3-chord/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "chord", {
  enumerable: true,
  get: function () {
    return _chord.default;
  }
});
Object.defineProperty(exports, "ribbon", {
  enumerable: true,
  get: function () {
    return _ribbon.default;
  }
});

var _chord = _interopRequireDefault(require("./chord"));

var _ribbon = _interopRequireDefault(require("./ribbon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./chord":"node_modules/d3-chord/src/chord.js","./ribbon":"node_modules/d3-chord/src/ribbon.js"}],"node_modules/d3-collection/src/map.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.prefix = void 0;
var prefix = "$";
exports.prefix = prefix;

function Map() {}

Map.prototype = map.prototype = {
  constructor: Map,
  has: function (key) {
    return prefix + key in this;
  },
  get: function (key) {
    return this[prefix + key];
  },
  set: function (key, value) {
    this[prefix + key] = value;
    return this;
  },
  remove: function (key) {
    var property = prefix + key;
    return property in this && delete this[property];
  },
  clear: function () {
    for (var property in this) if (property[0] === prefix) delete this[property];
  },
  keys: function () {
    var keys = [];

    for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));

    return keys;
  },
  values: function () {
    var values = [];

    for (var property in this) if (property[0] === prefix) values.push(this[property]);

    return values;
  },
  entries: function () {
    var entries = [];

    for (var property in this) if (property[0] === prefix) entries.push({
      key: property.slice(1),
      value: this[property]
    });

    return entries;
  },
  size: function () {
    var size = 0;

    for (var property in this) if (property[0] === prefix) ++size;

    return size;
  },
  empty: function () {
    for (var property in this) if (property[0] === prefix) return false;

    return true;
  },
  each: function (f) {
    for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);
  }
};

function map(object, f) {
  var map = new Map(); // Copy constructor.

  if (object instanceof Map) object.each(function (value, key) {
    map.set(key, value);
  }); // Index array by numeric index or specified key function.
  else if (Array.isArray(object)) {
      var i = -1,
          n = object.length,
          o;
      if (f == null) while (++i < n) map.set(i, object[i]);else while (++i < n) map.set(f(o = object[i], i, object), o);
    } // Convert object to map.
    else if (object) for (var key in object) map.set(key, object[key]);
  return map;
}

var _default = map;
exports.default = _default;
},{}],"node_modules/d3-collection/src/nest.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _map = _interopRequireDefault(require("./map"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var keys = [],
      sortKeys = [],
      sortValues,
      rollup,
      nest;

  function apply(array, depth, createResult, setResult) {
    if (depth >= keys.length) {
      if (sortValues != null) array.sort(sortValues);
      return rollup != null ? rollup(array) : array;
    }

    var i = -1,
        n = array.length,
        key = keys[depth++],
        keyValue,
        value,
        valuesByKey = (0, _map.default)(),
        values,
        result = createResult();

    while (++i < n) {
      if (values = valuesByKey.get(keyValue = key(value = array[i]) + "")) {
        values.push(value);
      } else {
        valuesByKey.set(keyValue, [value]);
      }
    }

    valuesByKey.each(function (values, key) {
      setResult(result, key, apply(values, depth, createResult, setResult));
    });
    return result;
  }

  function entries(map, depth) {
    if (++depth > keys.length) return map;
    var array,
        sortKey = sortKeys[depth - 1];
    if (rollup != null && depth >= keys.length) array = map.entries();else array = [], map.each(function (v, k) {
      array.push({
        key: k,
        values: entries(v, depth)
      });
    });
    return sortKey != null ? array.sort(function (a, b) {
      return sortKey(a.key, b.key);
    }) : array;
  }

  return nest = {
    object: function (array) {
      return apply(array, 0, createObject, setObject);
    },
    map: function (array) {
      return apply(array, 0, createMap, setMap);
    },
    entries: function (array) {
      return entries(apply(array, 0, createMap, setMap), 0);
    },
    key: function (d) {
      keys.push(d);
      return nest;
    },
    sortKeys: function (order) {
      sortKeys[keys.length - 1] = order;
      return nest;
    },
    sortValues: function (order) {
      sortValues = order;
      return nest;
    },
    rollup: function (f) {
      rollup = f;
      return nest;
    }
  };
}

function createObject() {
  return {};
}

function setObject(object, key, value) {
  object[key] = value;
}

function createMap() {
  return (0, _map.default)();
}

function setMap(map, key, value) {
  map.set(key, value);
}
},{"./map":"node_modules/d3-collection/src/map.js"}],"node_modules/d3-collection/src/set.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _map = _interopRequireWildcard(require("./map"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function Set() {}

var proto = _map.default.prototype;
Set.prototype = set.prototype = {
  constructor: Set,
  has: proto.has,
  add: function (value) {
    value += "";
    this[_map.prefix + value] = value;
    return this;
  },
  remove: proto.remove,
  clear: proto.clear,
  values: proto.keys,
  size: proto.size,
  empty: proto.empty,
  each: proto.each
};

function set(object, f) {
  var set = new Set(); // Copy constructor.

  if (object instanceof Set) object.each(function (value) {
    set.add(value);
  }); // Otherwise, assume it’s an array.
  else if (object) {
      var i = -1,
          n = object.length;
      if (f == null) while (++i < n) set.add(object[i]);else while (++i < n) set.add(f(object[i], i, object));
    }
  return set;
}

var _default = set;
exports.default = _default;
},{"./map":"node_modules/d3-collection/src/map.js"}],"node_modules/d3-collection/src/keys.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(map) {
  var keys = [];

  for (var key in map) keys.push(key);

  return keys;
}
},{}],"node_modules/d3-collection/src/values.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(map) {
  var values = [];

  for (var key in map) values.push(map[key]);

  return values;
}
},{}],"node_modules/d3-collection/src/entries.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(map) {
  var entries = [];

  for (var key in map) entries.push({
    key: key,
    value: map[key]
  });

  return entries;
}
},{}],"node_modules/d3-collection/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "nest", {
  enumerable: true,
  get: function () {
    return _nest.default;
  }
});
Object.defineProperty(exports, "set", {
  enumerable: true,
  get: function () {
    return _set.default;
  }
});
Object.defineProperty(exports, "map", {
  enumerable: true,
  get: function () {
    return _map.default;
  }
});
Object.defineProperty(exports, "keys", {
  enumerable: true,
  get: function () {
    return _keys.default;
  }
});
Object.defineProperty(exports, "values", {
  enumerable: true,
  get: function () {
    return _values.default;
  }
});
Object.defineProperty(exports, "entries", {
  enumerable: true,
  get: function () {
    return _entries.default;
  }
});

var _nest = _interopRequireDefault(require("./nest"));

var _set = _interopRequireDefault(require("./set"));

var _map = _interopRequireDefault(require("./map"));

var _keys = _interopRequireDefault(require("./keys"));

var _values = _interopRequireDefault(require("./values"));

var _entries = _interopRequireDefault(require("./entries"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./nest":"node_modules/d3-collection/src/nest.js","./set":"node_modules/d3-collection/src/set.js","./map":"node_modules/d3-collection/src/map.js","./keys":"node_modules/d3-collection/src/keys.js","./values":"node_modules/d3-collection/src/values.js","./entries":"node_modules/d3-collection/src/entries.js"}],"node_modules/d3-contour/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = void 0;
var array = Array.prototype;
var slice = array.slice;
exports.slice = slice;
},{}],"node_modules/d3-contour/src/ascending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return a - b;
}
},{}],"node_modules/d3-contour/src/area.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(ring) {
  var i = 0,
      n = ring.length,
      area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];

  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];

  return area;
}
},{}],"node_modules/d3-contour/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-contour/src/contains.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(ring, hole) {
  var i = -1,
      n = hole.length,
      c;

  while (++i < n) if (c = ringContains(ring, hole[i])) return c;

  return 0;
}

function ringContains(ring, point) {
  var x = point[0],
      y = point[1],
      contains = -1;

  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
    var pi = ring[i],
        xi = pi[0],
        yi = pi[1],
        pj = ring[j],
        xj = pj[0],
        yj = pj[1];
    if (segmentContains(pi, pj, point)) return 0;
    if (yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi) contains = -contains;
  }

  return contains;
}

function segmentContains(a, b, c) {
  var i;
  return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);
}

function collinear(a, b, c) {
  return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);
}

function within(p, q, r) {
  return p <= q && q <= r || r <= q && q <= p;
}
},{}],"node_modules/d3-contour/src/noop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {}
},{}],"node_modules/d3-contour/src/contours.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Array = require("d3-array");

var _array = require("./array");

var _ascending = _interopRequireDefault(require("./ascending"));

var _area = _interopRequireDefault(require("./area"));

var _constant = _interopRequireDefault(require("./constant"));

var _contains = _interopRequireDefault(require("./contains"));

var _noop = _interopRequireDefault(require("./noop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cases = [[], [[[1.0, 1.5], [0.5, 1.0]]], [[[1.5, 1.0], [1.0, 1.5]]], [[[1.5, 1.0], [0.5, 1.0]]], [[[1.0, 0.5], [1.5, 1.0]]], [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]], [[[1.0, 0.5], [1.0, 1.5]]], [[[1.0, 0.5], [0.5, 1.0]]], [[[0.5, 1.0], [1.0, 0.5]]], [[[1.0, 1.5], [1.0, 0.5]]], [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]], [[[1.5, 1.0], [1.0, 0.5]]], [[[0.5, 1.0], [1.5, 1.0]]], [[[1.0, 1.5], [1.5, 1.0]]], [[[0.5, 1.0], [1.0, 1.5]]], []];

function _default() {
  var dx = 1,
      dy = 1,
      threshold = _d3Array.thresholdSturges,
      smooth = smoothLinear;

  function contours(values) {
    var tz = threshold(values); // Convert number of thresholds into uniform thresholds.

    if (!Array.isArray(tz)) {
      var domain = (0, _d3Array.extent)(values),
          start = domain[0],
          stop = domain[1];
      tz = (0, _d3Array.tickStep)(start, stop, tz);
      tz = (0, _d3Array.range)(Math.floor(start / tz) * tz, Math.floor(stop / tz) * tz, tz);
    } else {
      tz = tz.slice().sort(_ascending.default);
    }

    return tz.map(function (value) {
      return contour(values, value);
    });
  } // Accumulate, smooth contour rings, assign holes to exterior rings.
  // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js


  function contour(values, value) {
    var polygons = [],
        holes = [];
    isorings(values, value, function (ring) {
      smooth(ring, values, value);
      if ((0, _area.default)(ring) > 0) polygons.push([ring]);else holes.push(ring);
    });
    holes.forEach(function (hole) {
      for (var i = 0, n = polygons.length, polygon; i < n; ++i) {
        if ((0, _contains.default)((polygon = polygons[i])[0], hole) !== -1) {
          polygon.push(hole);
          return;
        }
      }
    });
    return {
      type: "MultiPolygon",
      value: value,
      coordinates: polygons
    };
  } // Marching squares with isolines stitched into rings.
  // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js


  function isorings(values, value, callback) {
    var fragmentByStart = new Array(),
        fragmentByEnd = new Array(),
        x,
        y,
        t0,
        t1,
        t2,
        t3; // Special case for the first row (y = -1, t2 = t3 = 0).

    x = y = -1;
    t1 = values[0] >= value;
    cases[t1 << 1].forEach(stitch);

    while (++x < dx - 1) {
      t0 = t1, t1 = values[x + 1] >= value;
      cases[t0 | t1 << 1].forEach(stitch);
    }

    cases[t1 << 0].forEach(stitch); // General case for the intermediate rows.

    while (++y < dy - 1) {
      x = -1;
      t1 = values[y * dx + dx] >= value;
      t2 = values[y * dx] >= value;
      cases[t1 << 1 | t2 << 2].forEach(stitch);

      while (++x < dx - 1) {
        t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;
        t3 = t2, t2 = values[y * dx + x + 1] >= value;
        cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);
      }

      cases[t1 | t2 << 3].forEach(stitch);
    } // Special case for the last row (y = dy - 1, t0 = t1 = 0).


    x = -1;
    t2 = values[y * dx] >= value;
    cases[t2 << 2].forEach(stitch);

    while (++x < dx - 1) {
      t3 = t2, t2 = values[y * dx + x + 1] >= value;
      cases[t2 << 2 | t3 << 3].forEach(stitch);
    }

    cases[t2 << 3].forEach(stitch);

    function stitch(line) {
      var start = [line[0][0] + x, line[0][1] + y],
          end = [line[1][0] + x, line[1][1] + y],
          startIndex = index(start),
          endIndex = index(end),
          f,
          g;

      if (f = fragmentByEnd[startIndex]) {
        if (g = fragmentByStart[endIndex]) {
          delete fragmentByEnd[f.end];
          delete fragmentByStart[g.start];

          if (f === g) {
            f.ring.push(end);
            callback(f.ring);
          } else {
            fragmentByStart[f.start] = fragmentByEnd[g.end] = {
              start: f.start,
              end: g.end,
              ring: f.ring.concat(g.ring)
            };
          }
        } else {
          delete fragmentByEnd[f.end];
          f.ring.push(end);
          fragmentByEnd[f.end = endIndex] = f;
        }
      } else if (f = fragmentByStart[endIndex]) {
        if (g = fragmentByEnd[startIndex]) {
          delete fragmentByStart[f.start];
          delete fragmentByEnd[g.end];

          if (f === g) {
            f.ring.push(end);
            callback(f.ring);
          } else {
            fragmentByStart[g.start] = fragmentByEnd[f.end] = {
              start: g.start,
              end: f.end,
              ring: g.ring.concat(f.ring)
            };
          }
        } else {
          delete fragmentByStart[f.start];
          f.ring.unshift(start);
          fragmentByStart[f.start = startIndex] = f;
        }
      } else {
        fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {
          start: startIndex,
          end: endIndex,
          ring: [start, end]
        };
      }
    }
  }

  function index(point) {
    return point[0] * 2 + point[1] * (dx + 1) * 4;
  }

  function smoothLinear(ring, values, value) {
    ring.forEach(function (point) {
      var x = point[0],
          y = point[1],
          xt = x | 0,
          yt = y | 0,
          v0,
          v1 = values[yt * dx + xt];

      if (x > 0 && x < dx && xt === x) {
        v0 = values[yt * dx + xt - 1];
        point[0] = x + (value - v0) / (v1 - v0) - 0.5;
      }

      if (y > 0 && y < dy && yt === y) {
        v0 = values[(yt - 1) * dx + xt];
        point[1] = y + (value - v0) / (v1 - v0) - 0.5;
      }
    });
  }

  contours.contour = contour;

  contours.size = function (_) {
    if (!arguments.length) return [dx, dy];

    var _0 = Math.ceil(_[0]),
        _1 = Math.ceil(_[1]);

    if (!(_0 > 0) || !(_1 > 0)) throw new Error("invalid size");
    return dx = _0, dy = _1, contours;
  };

  contours.thresholds = function (_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? (0, _constant.default)(_array.slice.call(_)) : (0, _constant.default)(_), contours) : threshold;
  };

  contours.smooth = function (_) {
    return arguments.length ? (smooth = _ ? smoothLinear : _noop.default, contours) : smooth === smoothLinear;
  };

  return contours;
}
},{"d3-array":"node_modules/d3-array/src/index.js","./array":"node_modules/d3-contour/src/array.js","./ascending":"node_modules/d3-contour/src/ascending.js","./area":"node_modules/d3-contour/src/area.js","./constant":"node_modules/d3-contour/src/constant.js","./contains":"node_modules/d3-contour/src/contains.js","./noop":"node_modules/d3-contour/src/noop.js"}],"node_modules/d3-contour/src/blur.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.blurX = blurX;
exports.blurY = blurY;

// TODO Optimize edge cases.
// TODO Optimize index calculation.
// TODO Optimize arguments.
function blurX(source, target, r) {
  var n = source.width,
      m = source.height,
      w = (r << 1) + 1;

  for (var j = 0; j < m; ++j) {
    for (var i = 0, sr = 0; i < n + r; ++i) {
      if (i < n) {
        sr += source.data[i + j * n];
      }

      if (i >= r) {
        if (i >= w) {
          sr -= source.data[i - w + j * n];
        }

        target.data[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);
      }
    }
  }
} // TODO Optimize edge cases.
// TODO Optimize index calculation.
// TODO Optimize arguments.


function blurY(source, target, r) {
  var n = source.width,
      m = source.height,
      w = (r << 1) + 1;

  for (var i = 0; i < n; ++i) {
    for (var j = 0, sr = 0; j < m + r; ++j) {
      if (j < m) {
        sr += source.data[i + j * n];
      }

      if (j >= r) {
        if (j >= w) {
          sr -= source.data[i + (j - w) * n];
        }

        target.data[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);
      }
    }
  }
}
},{}],"node_modules/d3-contour/src/density.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Array = require("d3-array");

var _array = require("./array");

var _blur = require("./blur");

var _constant = _interopRequireDefault(require("./constant"));

var _contours = _interopRequireDefault(require("./contours"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function defaultX(d) {
  return d[0];
}

function defaultY(d) {
  return d[1];
}

function defaultWeight() {
  return 1;
}

function _default() {
  var x = defaultX,
      y = defaultY,
      weight = defaultWeight,
      dx = 960,
      dy = 500,
      r = 20,
      // blur radius
  k = 2,
      // log2(grid cell size)
  o = r * 3,
      // grid offset, to pad for blur
  n = dx + o * 2 >> k,
      // grid width
  m = dy + o * 2 >> k,
      // grid height
  threshold = (0, _constant.default)(20);

  function density(data) {
    var values0 = new Float32Array(n * m),
        values1 = new Float32Array(n * m);
    data.forEach(function (d, i, data) {
      var xi = +x(d, i, data) + o >> k,
          yi = +y(d, i, data) + o >> k,
          wi = +weight(d, i, data);

      if (xi >= 0 && xi < n && yi >= 0 && yi < m) {
        values0[xi + yi * n] += wi;
      }
    }); // TODO Optimize.

    (0, _blur.blurX)({
      width: n,
      height: m,
      data: values0
    }, {
      width: n,
      height: m,
      data: values1
    }, r >> k);
    (0, _blur.blurY)({
      width: n,
      height: m,
      data: values1
    }, {
      width: n,
      height: m,
      data: values0
    }, r >> k);
    (0, _blur.blurX)({
      width: n,
      height: m,
      data: values0
    }, {
      width: n,
      height: m,
      data: values1
    }, r >> k);
    (0, _blur.blurY)({
      width: n,
      height: m,
      data: values1
    }, {
      width: n,
      height: m,
      data: values0
    }, r >> k);
    (0, _blur.blurX)({
      width: n,
      height: m,
      data: values0
    }, {
      width: n,
      height: m,
      data: values1
    }, r >> k);
    (0, _blur.blurY)({
      width: n,
      height: m,
      data: values1
    }, {
      width: n,
      height: m,
      data: values0
    }, r >> k);
    var tz = threshold(values0); // Convert number of thresholds into uniform thresholds.

    if (!Array.isArray(tz)) {
      var stop = (0, _d3Array.max)(values0);
      tz = (0, _d3Array.tickStep)(0, stop, tz);
      tz = (0, _d3Array.range)(0, Math.floor(stop / tz) * tz, tz);
      tz.shift();
    }

    return (0, _contours.default)().thresholds(tz).size([n, m])(values0).map(transform);
  }

  function transform(geometry) {
    geometry.value *= Math.pow(2, -2 * k); // Density in points per square pixel.

    geometry.coordinates.forEach(transformPolygon);
    return geometry;
  }

  function transformPolygon(coordinates) {
    coordinates.forEach(transformRing);
  }

  function transformRing(coordinates) {
    coordinates.forEach(transformPoint);
  } // TODO Optimize.


  function transformPoint(coordinates) {
    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;
    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;
  }

  function resize() {
    o = r * 3;
    n = dx + o * 2 >> k;
    m = dy + o * 2 >> k;
    return density;
  }

  density.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), density) : x;
  };

  density.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), density) : y;
  };

  density.weight = function (_) {
    return arguments.length ? (weight = typeof _ === "function" ? _ : (0, _constant.default)(+_), density) : weight;
  };

  density.size = function (_) {
    if (!arguments.length) return [dx, dy];

    var _0 = Math.ceil(_[0]),
        _1 = Math.ceil(_[1]);

    if (!(_0 >= 0) && !(_0 >= 0)) throw new Error("invalid size");
    return dx = _0, dy = _1, resize();
  };

  density.cellSize = function (_) {
    if (!arguments.length) return 1 << k;
    if (!((_ = +_) >= 1)) throw new Error("invalid cell size");
    return k = Math.floor(Math.log(_) / Math.LN2), resize();
  };

  density.thresholds = function (_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? (0, _constant.default)(_array.slice.call(_)) : (0, _constant.default)(_), density) : threshold;
  };

  density.bandwidth = function (_) {
    if (!arguments.length) return Math.sqrt(r * (r + 1));
    if (!((_ = +_) >= 0)) throw new Error("invalid bandwidth");
    return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();
  };

  return density;
}
},{"d3-array":"node_modules/d3-array/src/index.js","./array":"node_modules/d3-contour/src/array.js","./blur":"node_modules/d3-contour/src/blur.js","./constant":"node_modules/d3-contour/src/constant.js","./contours":"node_modules/d3-contour/src/contours.js"}],"node_modules/d3-contour/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "contours", {
  enumerable: true,
  get: function () {
    return _contours.default;
  }
});
Object.defineProperty(exports, "contourDensity", {
  enumerable: true,
  get: function () {
    return _density.default;
  }
});

var _contours = _interopRequireDefault(require("./contours"));

var _density = _interopRequireDefault(require("./density"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./contours":"node_modules/d3-contour/src/contours.js","./density":"node_modules/d3-contour/src/density.js"}],"node_modules/d3-dsv/src/dsv.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var EOL = {},
    EOF = {},
    QUOTE = 34,
    NEWLINE = 10,
    RETURN = 13;

function objectConverter(columns) {
  return new Function("d", "return {" + columns.map(function (name, i) {
    return JSON.stringify(name) + ": d[" + i + "] || \"\"";
  }).join(",") + "}");
}

function customConverter(columns, f) {
  var object = objectConverter(columns);
  return function (row, i) {
    return f(object(row), i, columns);
  };
} // Compute unique columns in order of discovery.


function inferColumns(rows) {
  var columnSet = Object.create(null),
      columns = [];
  rows.forEach(function (row) {
    for (var column in row) {
      if (!(column in columnSet)) {
        columns.push(columnSet[column] = column);
      }
    }
  });
  return columns;
}

function pad(value, width) {
  var s = value + "",
      length = s.length;
  return length < width ? new Array(width - length + 1).join(0) + s : s;
}

function formatYear(year) {
  return year < 0 ? "-" + pad(-year, 6) : year > 9999 ? "+" + pad(year, 6) : pad(year, 4);
}

function formatDate(date) {
  var hours = date.getUTCHours(),
      minutes = date.getUTCMinutes(),
      seconds = date.getUTCSeconds(),
      milliseconds = date.getUTCMilliseconds();
  return isNaN(date) ? "Invalid Date" : formatYear(date.getUTCFullYear(), 4) + "-" + pad(date.getUTCMonth() + 1, 2) + "-" + pad(date.getUTCDate(), 2) + (milliseconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "." + pad(milliseconds, 3) + "Z" : seconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "Z" : minutes || hours ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + "Z" : "");
}

function _default(delimiter) {
  var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
      DELIMITER = delimiter.charCodeAt(0);

  function parse(text, f) {
    var convert,
        columns,
        rows = parseRows(text, function (row, i) {
      if (convert) return convert(row, i - 1);
      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
    });
    rows.columns = columns || [];
    return rows;
  }

  function parseRows(text, f) {
    var rows = [],
        // output rows
    N = text.length,
        I = 0,
        // current character index
    n = 0,
        // current line number
    t,
        // current token
    eof = N <= 0,
        // current token followed by EOF?
    eol = false; // current token followed by EOL?
    // Strip the trailing newline.

    if (text.charCodeAt(N - 1) === NEWLINE) --N;
    if (text.charCodeAt(N - 1) === RETURN) --N;

    function token() {
      if (eof) return EOF;
      if (eol) return eol = false, EOL; // Unescape quotes.

      var i,
          j = I,
          c;

      if (text.charCodeAt(j) === QUOTE) {
        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);

        if ((i = I) >= N) eof = true;else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;else if (c === RETURN) {
          eol = true;
          if (text.charCodeAt(I) === NEWLINE) ++I;
        }
        return text.slice(j + 1, i - 1).replace(/""/g, "\"");
      } // Find next delimiter or newline.


      while (I < N) {
        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;else if (c === RETURN) {
          eol = true;
          if (text.charCodeAt(I) === NEWLINE) ++I;
        } else if (c !== DELIMITER) continue;
        return text.slice(j, i);
      } // Return last token before EOF.


      return eof = true, text.slice(j, N);
    }

    while ((t = token()) !== EOF) {
      var row = [];

      while (t !== EOL && t !== EOF) row.push(t), t = token();

      if (f && (row = f(row, n++)) == null) continue;
      rows.push(row);
    }

    return rows;
  }

  function preformatBody(rows, columns) {
    return rows.map(function (row) {
      return columns.map(function (column) {
        return formatValue(row[column]);
      }).join(delimiter);
    });
  }

  function format(rows, columns) {
    if (columns == null) columns = inferColumns(rows);
    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join("\n");
  }

  function formatBody(rows, columns) {
    if (columns == null) columns = inferColumns(rows);
    return preformatBody(rows, columns).join("\n");
  }

  function formatRows(rows) {
    return rows.map(formatRow).join("\n");
  }

  function formatRow(row) {
    return row.map(formatValue).join(delimiter);
  }

  function formatValue(value) {
    return value == null ? "" : value instanceof Date ? formatDate(value) : reFormat.test(value += "") ? "\"" + value.replace(/"/g, "\"\"") + "\"" : value;
  }

  return {
    parse: parse,
    parseRows: parseRows,
    format: format,
    formatBody: formatBody,
    formatRows: formatRows,
    formatRow: formatRow,
    formatValue: formatValue
  };
}
},{}],"node_modules/d3-dsv/src/csv.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.csvFormatValue = exports.csvFormatRow = exports.csvFormatRows = exports.csvFormatBody = exports.csvFormat = exports.csvParseRows = exports.csvParse = void 0;

var _dsv = _interopRequireDefault(require("./dsv.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var csv = (0, _dsv.default)(",");
var csvParse = csv.parse;
exports.csvParse = csvParse;
var csvParseRows = csv.parseRows;
exports.csvParseRows = csvParseRows;
var csvFormat = csv.format;
exports.csvFormat = csvFormat;
var csvFormatBody = csv.formatBody;
exports.csvFormatBody = csvFormatBody;
var csvFormatRows = csv.formatRows;
exports.csvFormatRows = csvFormatRows;
var csvFormatRow = csv.formatRow;
exports.csvFormatRow = csvFormatRow;
var csvFormatValue = csv.formatValue;
exports.csvFormatValue = csvFormatValue;
},{"./dsv.js":"node_modules/d3-dsv/src/dsv.js"}],"node_modules/d3-dsv/src/tsv.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tsvFormatValue = exports.tsvFormatRow = exports.tsvFormatRows = exports.tsvFormatBody = exports.tsvFormat = exports.tsvParseRows = exports.tsvParse = void 0;

var _dsv = _interopRequireDefault(require("./dsv.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var tsv = (0, _dsv.default)("\t");
var tsvParse = tsv.parse;
exports.tsvParse = tsvParse;
var tsvParseRows = tsv.parseRows;
exports.tsvParseRows = tsvParseRows;
var tsvFormat = tsv.format;
exports.tsvFormat = tsvFormat;
var tsvFormatBody = tsv.formatBody;
exports.tsvFormatBody = tsvFormatBody;
var tsvFormatRows = tsv.formatRows;
exports.tsvFormatRows = tsvFormatRows;
var tsvFormatRow = tsv.formatRow;
exports.tsvFormatRow = tsvFormatRow;
var tsvFormatValue = tsv.formatValue;
exports.tsvFormatValue = tsvFormatValue;
},{"./dsv.js":"node_modules/d3-dsv/src/dsv.js"}],"node_modules/d3-dsv/src/autoType.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = autoType;

function autoType(object) {
  for (var key in object) {
    var value = object[key].trim(),
        number,
        m;
    if (!value) value = null;else if (value === "true") value = true;else if (value === "false") value = false;else if (value === "NaN") value = NaN;else if (!isNaN(number = +value)) value = number;else if (m = value.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/)) {
      if (fixtz && !!m[4] && !m[7]) value = value.replace(/-/g, "/").replace(/T/, " ");
      value = new Date(value);
    } else continue;
    object[key] = value;
  }

  return object;
} // https://github.com/d3/d3-dsv/issues/45


var fixtz = new Date("2019-01-01T00:00").getHours() || new Date("2019-07-01T00:00").getHours();
},{}],"node_modules/d3-dsv/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "dsvFormat", {
  enumerable: true,
  get: function () {
    return _dsv.default;
  }
});
Object.defineProperty(exports, "csvParse", {
  enumerable: true,
  get: function () {
    return _csv.csvParse;
  }
});
Object.defineProperty(exports, "csvParseRows", {
  enumerable: true,
  get: function () {
    return _csv.csvParseRows;
  }
});
Object.defineProperty(exports, "csvFormat", {
  enumerable: true,
  get: function () {
    return _csv.csvFormat;
  }
});
Object.defineProperty(exports, "csvFormatBody", {
  enumerable: true,
  get: function () {
    return _csv.csvFormatBody;
  }
});
Object.defineProperty(exports, "csvFormatRows", {
  enumerable: true,
  get: function () {
    return _csv.csvFormatRows;
  }
});
Object.defineProperty(exports, "csvFormatRow", {
  enumerable: true,
  get: function () {
    return _csv.csvFormatRow;
  }
});
Object.defineProperty(exports, "csvFormatValue", {
  enumerable: true,
  get: function () {
    return _csv.csvFormatValue;
  }
});
Object.defineProperty(exports, "tsvParse", {
  enumerable: true,
  get: function () {
    return _tsv.tsvParse;
  }
});
Object.defineProperty(exports, "tsvParseRows", {
  enumerable: true,
  get: function () {
    return _tsv.tsvParseRows;
  }
});
Object.defineProperty(exports, "tsvFormat", {
  enumerable: true,
  get: function () {
    return _tsv.tsvFormat;
  }
});
Object.defineProperty(exports, "tsvFormatBody", {
  enumerable: true,
  get: function () {
    return _tsv.tsvFormatBody;
  }
});
Object.defineProperty(exports, "tsvFormatRows", {
  enumerable: true,
  get: function () {
    return _tsv.tsvFormatRows;
  }
});
Object.defineProperty(exports, "tsvFormatRow", {
  enumerable: true,
  get: function () {
    return _tsv.tsvFormatRow;
  }
});
Object.defineProperty(exports, "tsvFormatValue", {
  enumerable: true,
  get: function () {
    return _tsv.tsvFormatValue;
  }
});
Object.defineProperty(exports, "autoType", {
  enumerable: true,
  get: function () {
    return _autoType.default;
  }
});

var _dsv = _interopRequireDefault(require("./dsv.js"));

var _csv = require("./csv.js");

var _tsv = require("./tsv.js");

var _autoType = _interopRequireDefault(require("./autoType.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./dsv.js":"node_modules/d3-dsv/src/dsv.js","./csv.js":"node_modules/d3-dsv/src/csv.js","./tsv.js":"node_modules/d3-dsv/src/tsv.js","./autoType.js":"node_modules/d3-dsv/src/autoType.js"}],"node_modules/d3-fetch/src/blob.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function responseBlob(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  return response.blob();
}

function _default(input, init) {
  return fetch(input, init).then(responseBlob);
}
},{}],"node_modules/d3-fetch/src/buffer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function responseArrayBuffer(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  return response.arrayBuffer();
}

function _default(input, init) {
  return fetch(input, init).then(responseArrayBuffer);
}
},{}],"node_modules/d3-fetch/src/text.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function responseText(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  return response.text();
}

function _default(input, init) {
  return fetch(input, init).then(responseText);
}
},{}],"node_modules/d3-fetch/src/dsv.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = dsv;
exports.tsv = exports.csv = void 0;

var _d3Dsv = require("d3-dsv");

var _text = _interopRequireDefault(require("./text"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function dsvParse(parse) {
  return function (input, init, row) {
    if (arguments.length === 2 && typeof init === "function") row = init, init = undefined;
    return (0, _text.default)(input, init).then(function (response) {
      return parse(response, row);
    });
  };
}

function dsv(delimiter, input, init, row) {
  if (arguments.length === 3 && typeof init === "function") row = init, init = undefined;
  var format = (0, _d3Dsv.dsvFormat)(delimiter);
  return (0, _text.default)(input, init).then(function (response) {
    return format.parse(response, row);
  });
}

var csv = dsvParse(_d3Dsv.csvParse);
exports.csv = csv;
var tsv = dsvParse(_d3Dsv.tsvParse);
exports.tsv = tsv;
},{"d3-dsv":"node_modules/d3-dsv/src/index.js","./text":"node_modules/d3-fetch/src/text.js"}],"node_modules/d3-fetch/src/image.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(input, init) {
  return new Promise(function (resolve, reject) {
    var image = new Image();

    for (var key in init) image[key] = init[key];

    image.onerror = reject;

    image.onload = function () {
      resolve(image);
    };

    image.src = input;
  });
}
},{}],"node_modules/d3-fetch/src/json.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function responseJson(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  return response.json();
}

function _default(input, init) {
  return fetch(input, init).then(responseJson);
}
},{}],"node_modules/d3-fetch/src/xml.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.svg = exports.html = exports.default = void 0;

var _text = _interopRequireDefault(require("./text"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parser(type) {
  return function (input, init) {
    return (0, _text.default)(input, init).then(function (text) {
      return new DOMParser().parseFromString(text, type);
    });
  };
}

var _default = parser("application/xml");

exports.default = _default;
var html = parser("text/html");
exports.html = html;
var svg = parser("image/svg+xml");
exports.svg = svg;
},{"./text":"node_modules/d3-fetch/src/text.js"}],"node_modules/d3-fetch/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "blob", {
  enumerable: true,
  get: function () {
    return _blob.default;
  }
});
Object.defineProperty(exports, "buffer", {
  enumerable: true,
  get: function () {
    return _buffer.default;
  }
});
Object.defineProperty(exports, "dsv", {
  enumerable: true,
  get: function () {
    return _dsv.default;
  }
});
Object.defineProperty(exports, "csv", {
  enumerable: true,
  get: function () {
    return _dsv.csv;
  }
});
Object.defineProperty(exports, "tsv", {
  enumerable: true,
  get: function () {
    return _dsv.tsv;
  }
});
Object.defineProperty(exports, "image", {
  enumerable: true,
  get: function () {
    return _image.default;
  }
});
Object.defineProperty(exports, "json", {
  enumerable: true,
  get: function () {
    return _json.default;
  }
});
Object.defineProperty(exports, "text", {
  enumerable: true,
  get: function () {
    return _text.default;
  }
});
Object.defineProperty(exports, "xml", {
  enumerable: true,
  get: function () {
    return _xml.default;
  }
});
Object.defineProperty(exports, "html", {
  enumerable: true,
  get: function () {
    return _xml.html;
  }
});
Object.defineProperty(exports, "svg", {
  enumerable: true,
  get: function () {
    return _xml.svg;
  }
});

var _blob = _interopRequireDefault(require("./blob"));

var _buffer = _interopRequireDefault(require("./buffer"));

var _dsv = _interopRequireWildcard(require("./dsv"));

var _image = _interopRequireDefault(require("./image"));

var _json = _interopRequireDefault(require("./json"));

var _text = _interopRequireDefault(require("./text"));

var _xml = _interopRequireWildcard(require("./xml"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./blob":"node_modules/d3-fetch/src/blob.js","./buffer":"node_modules/d3-fetch/src/buffer.js","./dsv":"node_modules/d3-fetch/src/dsv.js","./image":"node_modules/d3-fetch/src/image.js","./json":"node_modules/d3-fetch/src/json.js","./text":"node_modules/d3-fetch/src/text.js","./xml":"node_modules/d3-fetch/src/xml.js"}],"node_modules/d3-force/src/center.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x, y) {
  var nodes;
  if (x == null) x = 0;
  if (y == null) y = 0;

  function force() {
    var i,
        n = nodes.length,
        node,
        sx = 0,
        sy = 0;

    for (i = 0; i < n; ++i) {
      node = nodes[i], sx += node.x, sy += node.y;
    }

    for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {
      node = nodes[i], node.x -= sx, node.y -= sy;
    }
  }

  force.initialize = function (_) {
    nodes = _;
  };

  force.x = function (_) {
    return arguments.length ? (x = +_, force) : x;
  };

  force.y = function (_) {
    return arguments.length ? (y = +_, force) : y;
  };

  return force;
}
},{}],"node_modules/d3-force/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-force/src/jiggle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  return (Math.random() - 0.5) * 1e-6;
}
},{}],"node_modules/d3-quadtree/src/add.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.addAll = addAll;

function _default(d) {
  var x = +this._x.call(null, d),
      y = +this._y.call(null, d);
  return add(this.cover(x, y), x, y, d);
}

function add(tree, x, y, d) {
  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points

  var parent,
      node = tree._root,
      leaf = {
    data: d
  },
      x0 = tree._x0,
      y0 = tree._y0,
      x1 = tree._x1,
      y1 = tree._y1,
      xm,
      ym,
      xp,
      yp,
      right,
      bottom,
      i,
      j; // If the tree is empty, initialize the root as a leaf.

  if (!node) return tree._root = leaf, tree; // Find the existing leaf for the new point, or add it.

  while (node.length) {
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
  } // Is the new point is exactly coincident with the existing point?


  xp = +tree._x.call(null, node.data);
  yp = +tree._y.call(null, node.data);
  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree; // Otherwise, split the leaf node until the old and new point are separated.

  do {
    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm));

  return parent[j] = node, parent[i] = leaf, tree;
}

function addAll(data) {
  var d,
      i,
      n = data.length,
      x,
      y,
      xz = new Array(n),
      yz = new Array(n),
      x0 = Infinity,
      y0 = Infinity,
      x1 = -Infinity,
      y1 = -Infinity; // Compute the points and their extent.

  for (i = 0; i < n; ++i) {
    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
    xz[i] = x;
    yz[i] = y;
    if (x < x0) x0 = x;
    if (x > x1) x1 = x;
    if (y < y0) y0 = y;
    if (y > y1) y1 = y;
  } // If there were no (valid) points, abort.


  if (x0 > x1 || y0 > y1) return this; // Expand the tree to cover the new points.

  this.cover(x0, y0).cover(x1, y1); // Add the new points.

  for (i = 0; i < n; ++i) {
    add(this, xz[i], yz[i], data[i]);
  }

  return this;
}
},{}],"node_modules/d3-quadtree/src/cover.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x, y) {
  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points

  var x0 = this._x0,
      y0 = this._y0,
      x1 = this._x1,
      y1 = this._y1; // If the quadtree has no extent, initialize them.
  // Integer extent are necessary so that if we later double the extent,
  // the existing quadrant boundaries don’t change due to floating point error!

  if (isNaN(x0)) {
    x1 = (x0 = Math.floor(x)) + 1;
    y1 = (y0 = Math.floor(y)) + 1;
  } // Otherwise, double repeatedly to cover.
  else {
      var z = x1 - x0,
          node = this._root,
          parent,
          i;

      while (x0 > x || x >= x1 || y0 > y || y >= y1) {
        i = (y < y0) << 1 | x < x0;
        parent = new Array(4), parent[i] = node, node = parent, z *= 2;

        switch (i) {
          case 0:
            x1 = x0 + z, y1 = y0 + z;
            break;

          case 1:
            x0 = x1 - z, y1 = y0 + z;
            break;

          case 2:
            x1 = x0 + z, y0 = y1 - z;
            break;

          case 3:
            x0 = x1 - z, y0 = y1 - z;
            break;
        }
      }

      if (this._root && this._root.length) this._root = node;
    }

  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  return this;
}
},{}],"node_modules/d3-quadtree/src/data.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var data = [];
  this.visit(function (node) {
    if (!node.length) do data.push(node.data); while (node = node.next);
  });
  return data;
}
},{}],"node_modules/d3-quadtree/src/extent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
}
},{}],"node_modules/d3-quadtree/src/quad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(node, x0, y0, x1, y1) {
  this.node = node;
  this.x0 = x0;
  this.y0 = y0;
  this.x1 = x1;
  this.y1 = y1;
}
},{}],"node_modules/d3-quadtree/src/find.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _quad = _interopRequireDefault(require("./quad.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(x, y, radius) {
  var data,
      x0 = this._x0,
      y0 = this._y0,
      x1,
      y1,
      x2,
      y2,
      x3 = this._x1,
      y3 = this._y1,
      quads = [],
      node = this._root,
      q,
      i;
  if (node) quads.push(new _quad.default(node, x0, y0, x3, y3));
  if (radius == null) radius = Infinity;else {
    x0 = x - radius, y0 = y - radius;
    x3 = x + radius, y3 = y + radius;
    radius *= radius;
  }

  while (q = quads.pop()) {
    // Stop searching if this quadrant can’t contain a closer node.
    if (!(node = q.node) || (x1 = q.x0) > x3 || (y1 = q.y0) > y3 || (x2 = q.x1) < x0 || (y2 = q.y1) < y0) continue; // Bisect the current quadrant.

    if (node.length) {
      var xm = (x1 + x2) / 2,
          ym = (y1 + y2) / 2;
      quads.push(new _quad.default(node[3], xm, ym, x2, y2), new _quad.default(node[2], x1, ym, xm, y2), new _quad.default(node[1], xm, y1, x2, ym), new _quad.default(node[0], x1, y1, xm, ym)); // Visit the closest quadrant first.

      if (i = (y >= ym) << 1 | x >= xm) {
        q = quads[quads.length - 1];
        quads[quads.length - 1] = quads[quads.length - 1 - i];
        quads[quads.length - 1 - i] = q;
      }
    } // Visit this point. (Visiting coincident points isn’t necessary!)
    else {
        var dx = x - +this._x.call(null, node.data),
            dy = y - +this._y.call(null, node.data),
            d2 = dx * dx + dy * dy;

        if (d2 < radius) {
          var d = Math.sqrt(radius = d2);
          x0 = x - d, y0 = y - d;
          x3 = x + d, y3 = y + d;
          data = node.data;
        }
      }
  }

  return data;
}
},{"./quad.js":"node_modules/d3-quadtree/src/quad.js"}],"node_modules/d3-quadtree/src/remove.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.removeAll = removeAll;

function _default(d) {
  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points

  var parent,
      node = this._root,
      retainer,
      previous,
      next,
      x0 = this._x0,
      y0 = this._y0,
      x1 = this._x1,
      y1 = this._y1,
      x,
      y,
      xm,
      ym,
      right,
      bottom,
      i,
      j; // If the tree is empty, initialize the root as a leaf.

  if (!node) return this; // Find the leaf node for the point.
  // While descending, also retain the deepest parent with a non-removed sibling.

  if (node.length) while (true) {
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
    if (!node.length) break;
    if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3]) retainer = parent, j = i;
  } // Find the point to remove.

  while (node.data !== d) if (!(previous = node, node = node.next)) return this;

  if (next = node.next) delete node.next; // If there are multiple coincident points, remove just the point.

  if (previous) return next ? previous.next = next : delete previous.next, this; // If this is the root point, remove it.

  if (!parent) return this._root = next, this; // Remove this leaf.

  next ? parent[i] = next : delete parent[i]; // If the parent now contains exactly one leaf, collapse superfluous parents.

  if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
    if (retainer) retainer[j] = node;else this._root = node;
  }

  return this;
}

function removeAll(data) {
  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);

  return this;
}
},{}],"node_modules/d3-quadtree/src/root.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  return this._root;
}
},{}],"node_modules/d3-quadtree/src/size.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var size = 0;
  this.visit(function (node) {
    if (!node.length) do ++size; while (node = node.next);
  });
  return size;
}
},{}],"node_modules/d3-quadtree/src/visit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _quad = _interopRequireDefault(require("./quad.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(callback) {
  var quads = [],
      q,
      node = this._root,
      child,
      x0,
      y0,
      x1,
      y1;
  if (node) quads.push(new _quad.default(node, this._x0, this._y0, this._x1, this._y1));

  while (q = quads.pop()) {
    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
      var xm = (x0 + x1) / 2,
          ym = (y0 + y1) / 2;
      if (child = node[3]) quads.push(new _quad.default(child, xm, ym, x1, y1));
      if (child = node[2]) quads.push(new _quad.default(child, x0, ym, xm, y1));
      if (child = node[1]) quads.push(new _quad.default(child, xm, y0, x1, ym));
      if (child = node[0]) quads.push(new _quad.default(child, x0, y0, xm, ym));
    }
  }

  return this;
}
},{"./quad.js":"node_modules/d3-quadtree/src/quad.js"}],"node_modules/d3-quadtree/src/visitAfter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _quad = _interopRequireDefault(require("./quad.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(callback) {
  var quads = [],
      next = [],
      q;
  if (this._root) quads.push(new _quad.default(this._root, this._x0, this._y0, this._x1, this._y1));

  while (q = quads.pop()) {
    var node = q.node;

    if (node.length) {
      var child,
          x0 = q.x0,
          y0 = q.y0,
          x1 = q.x1,
          y1 = q.y1,
          xm = (x0 + x1) / 2,
          ym = (y0 + y1) / 2;
      if (child = node[0]) quads.push(new _quad.default(child, x0, y0, xm, ym));
      if (child = node[1]) quads.push(new _quad.default(child, xm, y0, x1, ym));
      if (child = node[2]) quads.push(new _quad.default(child, x0, ym, xm, y1));
      if (child = node[3]) quads.push(new _quad.default(child, xm, ym, x1, y1));
    }

    next.push(q);
  }

  while (q = next.pop()) {
    callback(q.node, q.x0, q.y0, q.x1, q.y1);
  }

  return this;
}
},{"./quad.js":"node_modules/d3-quadtree/src/quad.js"}],"node_modules/d3-quadtree/src/x.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultX = defaultX;
exports.default = _default;

function defaultX(d) {
  return d[0];
}

function _default(_) {
  return arguments.length ? (this._x = _, this) : this._x;
}
},{}],"node_modules/d3-quadtree/src/y.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultY = defaultY;
exports.default = _default;

function defaultY(d) {
  return d[1];
}

function _default(_) {
  return arguments.length ? (this._y = _, this) : this._y;
}
},{}],"node_modules/d3-quadtree/src/quadtree.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = quadtree;

var _add = _interopRequireWildcard(require("./add.js"));

var _cover = _interopRequireDefault(require("./cover.js"));

var _data = _interopRequireDefault(require("./data.js"));

var _extent = _interopRequireDefault(require("./extent.js"));

var _find = _interopRequireDefault(require("./find.js"));

var _remove = _interopRequireWildcard(require("./remove.js"));

var _root = _interopRequireDefault(require("./root.js"));

var _size = _interopRequireDefault(require("./size.js"));

var _visit = _interopRequireDefault(require("./visit.js"));

var _visitAfter = _interopRequireDefault(require("./visitAfter.js"));

var _x = _interopRequireWildcard(require("./x.js"));

var _y = _interopRequireWildcard(require("./y.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function quadtree(nodes, x, y) {
  var tree = new Quadtree(x == null ? _x.defaultX : x, y == null ? _y.defaultY : y, NaN, NaN, NaN, NaN);
  return nodes == null ? tree : tree.addAll(nodes);
}

function Quadtree(x, y, x0, y0, x1, y1) {
  this._x = x;
  this._y = y;
  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  this._root = undefined;
}

function leaf_copy(leaf) {
  var copy = {
    data: leaf.data
  },
      next = copy;

  while (leaf = leaf.next) next = next.next = {
    data: leaf.data
  };

  return copy;
}

var treeProto = quadtree.prototype = Quadtree.prototype;

treeProto.copy = function () {
  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
      node = this._root,
      nodes,
      child;
  if (!node) return copy;
  if (!node.length) return copy._root = leaf_copy(node), copy;
  nodes = [{
    source: node,
    target: copy._root = new Array(4)
  }];

  while (node = nodes.pop()) {
    for (var i = 0; i < 4; ++i) {
      if (child = node.source[i]) {
        if (child.length) nodes.push({
          source: child,
          target: node.target[i] = new Array(4)
        });else node.target[i] = leaf_copy(child);
      }
    }
  }

  return copy;
};

treeProto.add = _add.default;
treeProto.addAll = _add.addAll;
treeProto.cover = _cover.default;
treeProto.data = _data.default;
treeProto.extent = _extent.default;
treeProto.find = _find.default;
treeProto.remove = _remove.default;
treeProto.removeAll = _remove.removeAll;
treeProto.root = _root.default;
treeProto.size = _size.default;
treeProto.visit = _visit.default;
treeProto.visitAfter = _visitAfter.default;
treeProto.x = _x.default;
treeProto.y = _y.default;
},{"./add.js":"node_modules/d3-quadtree/src/add.js","./cover.js":"node_modules/d3-quadtree/src/cover.js","./data.js":"node_modules/d3-quadtree/src/data.js","./extent.js":"node_modules/d3-quadtree/src/extent.js","./find.js":"node_modules/d3-quadtree/src/find.js","./remove.js":"node_modules/d3-quadtree/src/remove.js","./root.js":"node_modules/d3-quadtree/src/root.js","./size.js":"node_modules/d3-quadtree/src/size.js","./visit.js":"node_modules/d3-quadtree/src/visit.js","./visitAfter.js":"node_modules/d3-quadtree/src/visitAfter.js","./x.js":"node_modules/d3-quadtree/src/x.js","./y.js":"node_modules/d3-quadtree/src/y.js"}],"node_modules/d3-quadtree/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "quadtree", {
  enumerable: true,
  get: function () {
    return _quadtree.default;
  }
});

var _quadtree = _interopRequireDefault(require("./quadtree.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./quadtree.js":"node_modules/d3-quadtree/src/quadtree.js"}],"node_modules/d3-force/src/collide.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

var _jiggle = _interopRequireDefault(require("./jiggle"));

var _d3Quadtree = require("d3-quadtree");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function x(d) {
  return d.x + d.vx;
}

function y(d) {
  return d.y + d.vy;
}

function _default(radius) {
  var nodes,
      radii,
      strength = 1,
      iterations = 1;
  if (typeof radius !== "function") radius = (0, _constant.default)(radius == null ? 1 : +radius);

  function force() {
    var i,
        n = nodes.length,
        tree,
        node,
        xi,
        yi,
        ri,
        ri2;

    for (var k = 0; k < iterations; ++k) {
      tree = (0, _d3Quadtree.quadtree)(nodes, x, y).visitAfter(prepare);

      for (i = 0; i < n; ++i) {
        node = nodes[i];
        ri = radii[node.index], ri2 = ri * ri;
        xi = node.x + node.vx;
        yi = node.y + node.vy;
        tree.visit(apply);
      }
    }

    function apply(quad, x0, y0, x1, y1) {
      var data = quad.data,
          rj = quad.r,
          r = ri + rj;

      if (data) {
        if (data.index > node.index) {
          var x = xi - data.x - data.vx,
              y = yi - data.y - data.vy,
              l = x * x + y * y;

          if (l < r * r) {
            if (x === 0) x = (0, _jiggle.default)(), l += x * x;
            if (y === 0) y = (0, _jiggle.default)(), l += y * y;
            l = (r - (l = Math.sqrt(l))) / l * strength;
            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
            node.vy += (y *= l) * r;
            data.vx -= x * (r = 1 - r);
            data.vy -= y * r;
          }
        }

        return;
      }

      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
    }
  }

  function prepare(quad) {
    if (quad.data) return quad.r = radii[quad.data.index];

    for (var i = quad.r = 0; i < 4; ++i) {
      if (quad[i] && quad[i].r > quad.r) {
        quad.r = quad[i].r;
      }
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length,
        node;
    radii = new Array(n);

    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.iterations = function (_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };

  force.strength = function (_) {
    return arguments.length ? (strength = +_, force) : strength;
  };

  force.radius = function (_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : radius;
  };

  return force;
}
},{"./constant":"node_modules/d3-force/src/constant.js","./jiggle":"node_modules/d3-force/src/jiggle.js","d3-quadtree":"node_modules/d3-quadtree/src/index.js"}],"node_modules/d3-force/src/link.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

var _jiggle = _interopRequireDefault(require("./jiggle"));

var _d3Collection = require("d3-collection");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function index(d) {
  return d.index;
}

function find(nodeById, nodeId) {
  var node = nodeById.get(nodeId);
  if (!node) throw new Error("missing: " + nodeId);
  return node;
}

function _default(links) {
  var id = index,
      strength = defaultStrength,
      strengths,
      distance = (0, _constant.default)(30),
      distances,
      nodes,
      count,
      bias,
      iterations = 1;
  if (links == null) links = [];

  function defaultStrength(link) {
    return 1 / Math.min(count[link.source.index], count[link.target.index]);
  }

  function force(alpha) {
    for (var k = 0, n = links.length; k < iterations; ++k) {
      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
        link = links[i], source = link.source, target = link.target;
        x = target.x + target.vx - source.x - source.vx || (0, _jiggle.default)();
        y = target.y + target.vy - source.y - source.vy || (0, _jiggle.default)();
        l = Math.sqrt(x * x + y * y);
        l = (l - distances[i]) / l * alpha * strengths[i];
        x *= l, y *= l;
        target.vx -= x * (b = bias[i]);
        target.vy -= y * b;
        source.vx += x * (b = 1 - b);
        source.vy += y * b;
      }
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length,
        m = links.length,
        nodeById = (0, _d3Collection.map)(nodes, id),
        link;

    for (i = 0, count = new Array(n); i < m; ++i) {
      link = links[i], link.index = i;
      if (typeof link.source !== "object") link.source = find(nodeById, link.source);
      if (typeof link.target !== "object") link.target = find(nodeById, link.target);
      count[link.source.index] = (count[link.source.index] || 0) + 1;
      count[link.target.index] = (count[link.target.index] || 0) + 1;
    }

    for (i = 0, bias = new Array(m); i < m; ++i) {
      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
    }

    strengths = new Array(m), initializeStrength();
    distances = new Array(m), initializeDistance();
  }

  function initializeStrength() {
    if (!nodes) return;

    for (var i = 0, n = links.length; i < n; ++i) {
      strengths[i] = +strength(links[i], i, links);
    }
  }

  function initializeDistance() {
    if (!nodes) return;

    for (var i = 0, n = links.length; i < n; ++i) {
      distances[i] = +distance(links[i], i, links);
    }
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.links = function (_) {
    return arguments.length ? (links = _, initialize(), force) : links;
  };

  force.id = function (_) {
    return arguments.length ? (id = _, force) : id;
  };

  force.iterations = function (_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initializeStrength(), force) : strength;
  };

  force.distance = function (_) {
    return arguments.length ? (distance = typeof _ === "function" ? _ : (0, _constant.default)(+_), initializeDistance(), force) : distance;
  };

  return force;
}
},{"./constant":"node_modules/d3-force/src/constant.js","./jiggle":"node_modules/d3-force/src/jiggle.js","d3-collection":"node_modules/d3-collection/src/index.js"}],"node_modules/d3-force/src/simulation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.x = x;
exports.y = y;
exports.default = _default;

var _d3Dispatch = require("d3-dispatch");

var _d3Collection = require("d3-collection");

var _d3Timer = require("d3-timer");

function x(d) {
  return d.x;
}

function y(d) {
  return d.y;
}

var initialRadius = 10,
    initialAngle = Math.PI * (3 - Math.sqrt(5));

function _default(nodes) {
  var simulation,
      alpha = 1,
      alphaMin = 0.001,
      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),
      alphaTarget = 0,
      velocityDecay = 0.6,
      forces = (0, _d3Collection.map)(),
      stepper = (0, _d3Timer.timer)(step),
      event = (0, _d3Dispatch.dispatch)("tick", "end");
  if (nodes == null) nodes = [];

  function step() {
    tick();
    event.call("tick", simulation);

    if (alpha < alphaMin) {
      stepper.stop();
      event.call("end", simulation);
    }
  }

  function tick(iterations) {
    var i,
        n = nodes.length,
        node;
    if (iterations === undefined) iterations = 1;

    for (var k = 0; k < iterations; ++k) {
      alpha += (alphaTarget - alpha) * alphaDecay;
      forces.each(function (force) {
        force(alpha);
      });

      for (i = 0; i < n; ++i) {
        node = nodes[i];
        if (node.fx == null) node.x += node.vx *= velocityDecay;else node.x = node.fx, node.vx = 0;
        if (node.fy == null) node.y += node.vy *= velocityDecay;else node.y = node.fy, node.vy = 0;
      }
    }

    return simulation;
  }

  function initializeNodes() {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.index = i;
      if (node.fx != null) node.x = node.fx;
      if (node.fy != null) node.y = node.fy;

      if (isNaN(node.x) || isNaN(node.y)) {
        var radius = initialRadius * Math.sqrt(i),
            angle = i * initialAngle;
        node.x = radius * Math.cos(angle);
        node.y = radius * Math.sin(angle);
      }

      if (isNaN(node.vx) || isNaN(node.vy)) {
        node.vx = node.vy = 0;
      }
    }
  }

  function initializeForce(force) {
    if (force.initialize) force.initialize(nodes);
    return force;
  }

  initializeNodes();
  return simulation = {
    tick: tick,
    restart: function () {
      return stepper.restart(step), simulation;
    },
    stop: function () {
      return stepper.stop(), simulation;
    },
    nodes: function (_) {
      return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;
    },
    alpha: function (_) {
      return arguments.length ? (alpha = +_, simulation) : alpha;
    },
    alphaMin: function (_) {
      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
    },
    alphaDecay: function (_) {
      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
    },
    alphaTarget: function (_) {
      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
    },
    velocityDecay: function (_) {
      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
    },
    force: function (name, _) {
      return arguments.length > 1 ? (_ == null ? forces.remove(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);
    },
    find: function (x, y, radius) {
      var i = 0,
          n = nodes.length,
          dx,
          dy,
          d2,
          node,
          closest;
      if (radius == null) radius = Infinity;else radius *= radius;

      for (i = 0; i < n; ++i) {
        node = nodes[i];
        dx = x - node.x;
        dy = y - node.y;
        d2 = dx * dx + dy * dy;
        if (d2 < radius) closest = node, radius = d2;
      }

      return closest;
    },
    on: function (name, _) {
      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
    }
  };
}
},{"d3-dispatch":"node_modules/d3-dispatch/src/index.js","d3-collection":"node_modules/d3-collection/src/index.js","d3-timer":"node_modules/d3-timer/src/index.js"}],"node_modules/d3-force/src/manyBody.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

var _jiggle = _interopRequireDefault(require("./jiggle"));

var _d3Quadtree = require("d3-quadtree");

var _simulation = require("./simulation");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var nodes,
      node,
      alpha,
      strength = (0, _constant.default)(-30),
      strengths,
      distanceMin2 = 1,
      distanceMax2 = Infinity,
      theta2 = 0.81;

  function force(_) {
    var i,
        n = nodes.length,
        tree = (0, _d3Quadtree.quadtree)(nodes, _simulation.x, _simulation.y).visitAfter(accumulate);

    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length,
        node;
    strengths = new Array(n);

    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);
  }

  function accumulate(quad) {
    var strength = 0,
        q,
        c,
        weight = 0,
        x,
        y,
        i; // For internal nodes, accumulate forces from child quadrants.

    if (quad.length) {
      for (x = y = i = 0; i < 4; ++i) {
        if ((q = quad[i]) && (c = Math.abs(q.value))) {
          strength += q.value, weight += c, x += c * q.x, y += c * q.y;
        }
      }

      quad.x = x / weight;
      quad.y = y / weight;
    } // For leaf nodes, accumulate forces from coincident quadrants.
    else {
        q = quad;
        q.x = q.data.x;
        q.y = q.data.y;

        do strength += strengths[q.data.index]; while (q = q.next);
      }

    quad.value = strength;
  }

  function apply(quad, x1, _, x2) {
    if (!quad.value) return true;
    var x = quad.x - node.x,
        y = quad.y - node.y,
        w = x2 - x1,
        l = x * x + y * y; // Apply the Barnes-Hut approximation if possible.
    // Limit forces for very close nodes; randomize direction if coincident.

    if (w * w / theta2 < l) {
      if (l < distanceMax2) {
        if (x === 0) x = (0, _jiggle.default)(), l += x * x;
        if (y === 0) y = (0, _jiggle.default)(), l += y * y;
        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
        node.vx += x * quad.value * alpha / l;
        node.vy += y * quad.value * alpha / l;
      }

      return true;
    } // Otherwise, process points directly.
    else if (quad.length || l >= distanceMax2) return; // Limit forces for very close nodes; randomize direction if coincident.


    if (quad.data !== node || quad.next) {
      if (x === 0) x = (0, _jiggle.default)(), l += x * x;
      if (y === 0) y = (0, _jiggle.default)(), l += y * y;
      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
    }

    do if (quad.data !== node) {
      w = strengths[quad.data.index] * alpha / l;
      node.vx += x * w;
      node.vy += y * w;
    } while (quad = quad.next);
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : strength;
  };

  force.distanceMin = function (_) {
    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
  };

  force.distanceMax = function (_) {
    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
  };

  force.theta = function (_) {
    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
  };

  return force;
}
},{"./constant":"node_modules/d3-force/src/constant.js","./jiggle":"node_modules/d3-force/src/jiggle.js","d3-quadtree":"node_modules/d3-quadtree/src/index.js","./simulation":"node_modules/d3-force/src/simulation.js"}],"node_modules/d3-force/src/radial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(radius, x, y) {
  var nodes,
      strength = (0, _constant.default)(0.1),
      strengths,
      radiuses;
  if (typeof radius !== "function") radius = (0, _constant.default)(+radius);
  if (x == null) x = 0;
  if (y == null) y = 0;

  function force(alpha) {
    for (var i = 0, n = nodes.length; i < n; ++i) {
      var node = nodes[i],
          dx = node.x - x || 1e-6,
          dy = node.y - y || 1e-6,
          r = Math.sqrt(dx * dx + dy * dy),
          k = (radiuses[i] - r) * strengths[i] * alpha / r;
      node.vx += dx * k;
      node.vy += dy * k;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length;
    strengths = new Array(n);
    radiuses = new Array(n);

    for (i = 0; i < n; ++i) {
      radiuses[i] = +radius(nodes[i], i, nodes);
      strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function (_) {
    nodes = _, initialize();
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : strength;
  };

  force.radius = function (_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : radius;
  };

  force.x = function (_) {
    return arguments.length ? (x = +_, force) : x;
  };

  force.y = function (_) {
    return arguments.length ? (y = +_, force) : y;
  };

  return force;
}
},{"./constant":"node_modules/d3-force/src/constant.js"}],"node_modules/d3-force/src/x.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(x) {
  var strength = (0, _constant.default)(0.1),
      nodes,
      strengths,
      xz;
  if (typeof x !== "function") x = (0, _constant.default)(x == null ? 0 : +x);

  function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length;
    strengths = new Array(n);
    xz = new Array(n);

    for (i = 0; i < n; ++i) {
      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : strength;
  };

  force.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : x;
  };

  return force;
}
},{"./constant":"node_modules/d3-force/src/constant.js"}],"node_modules/d3-force/src/y.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(y) {
  var strength = (0, _constant.default)(0.1),
      nodes,
      strengths,
      yz;
  if (typeof y !== "function") y = (0, _constant.default)(y == null ? 0 : +y);

  function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length;
    strengths = new Array(n);
    yz = new Array(n);

    for (i = 0; i < n; ++i) {
      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : strength;
  };

  force.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : y;
  };

  return force;
}
},{"./constant":"node_modules/d3-force/src/constant.js"}],"node_modules/d3-force/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "forceCenter", {
  enumerable: true,
  get: function () {
    return _center.default;
  }
});
Object.defineProperty(exports, "forceCollide", {
  enumerable: true,
  get: function () {
    return _collide.default;
  }
});
Object.defineProperty(exports, "forceLink", {
  enumerable: true,
  get: function () {
    return _link.default;
  }
});
Object.defineProperty(exports, "forceManyBody", {
  enumerable: true,
  get: function () {
    return _manyBody.default;
  }
});
Object.defineProperty(exports, "forceRadial", {
  enumerable: true,
  get: function () {
    return _radial.default;
  }
});
Object.defineProperty(exports, "forceSimulation", {
  enumerable: true,
  get: function () {
    return _simulation.default;
  }
});
Object.defineProperty(exports, "forceX", {
  enumerable: true,
  get: function () {
    return _x.default;
  }
});
Object.defineProperty(exports, "forceY", {
  enumerable: true,
  get: function () {
    return _y.default;
  }
});

var _center = _interopRequireDefault(require("./center"));

var _collide = _interopRequireDefault(require("./collide"));

var _link = _interopRequireDefault(require("./link"));

var _manyBody = _interopRequireDefault(require("./manyBody"));

var _radial = _interopRequireDefault(require("./radial"));

var _simulation = _interopRequireDefault(require("./simulation"));

var _x = _interopRequireDefault(require("./x"));

var _y = _interopRequireDefault(require("./y"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./center":"node_modules/d3-force/src/center.js","./collide":"node_modules/d3-force/src/collide.js","./link":"node_modules/d3-force/src/link.js","./manyBody":"node_modules/d3-force/src/manyBody.js","./radial":"node_modules/d3-force/src/radial.js","./simulation":"node_modules/d3-force/src/simulation.js","./x":"node_modules/d3-force/src/x.js","./y":"node_modules/d3-force/src/y.js"}],"node_modules/d3-format/src/formatDecimal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimal(1.23) returns ["123", 0].
function _default(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity

  var i,
      coefficient = x.slice(0, i); // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).

  return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x.slice(i + 1)];
}
},{}],"node_modules/d3-format/src/exponent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _formatDecimal = _interopRequireDefault(require("./formatDecimal.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(x) {
  return x = (0, _formatDecimal.default)(Math.abs(x)), x ? x[1] : NaN;
}
},{"./formatDecimal.js":"node_modules/d3-format/src/formatDecimal.js"}],"node_modules/d3-format/src/formatGroup.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(grouping, thousands) {
  return function (value, width) {
    var i = value.length,
        t = [],
        j = 0,
        g = grouping[0],
        length = 0;

    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }

    return t.reverse().join(thousands);
  };
}
},{}],"node_modules/d3-format/src/formatNumerals.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(numerals) {
  return function (value) {
    return value.replace(/[0-9]/g, function (i) {
      return numerals[+i];
    });
  };
}
},{}],"node_modules/d3-format/src/formatSpecifier.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = formatSpecifier;
exports.FormatSpecifier = FormatSpecifier;
// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}

formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

function FormatSpecifier(specifier) {
  this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
  this.align = specifier.align === undefined ? ">" : specifier.align + "";
  this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === undefined ? undefined : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === undefined ? "" : specifier.type + "";
}

FormatSpecifier.prototype.toString = function () {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === undefined ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};
},{}],"node_modules/d3-format/src/formatTrim.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
function _default(s) {
  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (s[i]) {
      case ".":
        i0 = i1 = i;
        break;

      case "0":
        if (i0 === 0) i0 = i;
        i1 = i;
        break;

      default:
        if (!+s[i]) break out;
        if (i0 > 0) i0 = 0;
        break;
    }
  }

  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}
},{}],"node_modules/d3-format/src/formatPrefixAuto.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.prefixExponent = void 0;

var _formatDecimal = _interopRequireDefault(require("./formatDecimal.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var prefixExponent;
exports.prefixExponent = prefixExponent;

function _default(x, p) {
  var d = (0, _formatDecimal.default)(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1],
      i = exponent - (exports.prefixExponent = prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
      n = coefficient.length;
  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + (0, _formatDecimal.default)(x, Math.max(0, p + i - 1))[0]; // less than 1y!
}
},{"./formatDecimal.js":"node_modules/d3-format/src/formatDecimal.js"}],"node_modules/d3-format/src/formatRounded.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _formatDecimal = _interopRequireDefault(require("./formatDecimal.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(x, p) {
  var d = (0, _formatDecimal.default)(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}
},{"./formatDecimal.js":"node_modules/d3-format/src/formatDecimal.js"}],"node_modules/d3-format/src/formatTypes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _formatPrefixAuto = _interopRequireDefault(require("./formatPrefixAuto.js"));

var _formatRounded = _interopRequireDefault(require("./formatRounded.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  "%": function (x, p) {
    return (x * 100).toFixed(p);
  },
  "b": function (x) {
    return Math.round(x).toString(2);
  },
  "c": function (x) {
    return x + "";
  },
  "d": function (x) {
    return Math.round(x).toString(10);
  },
  "e": function (x, p) {
    return x.toExponential(p);
  },
  "f": function (x, p) {
    return x.toFixed(p);
  },
  "g": function (x, p) {
    return x.toPrecision(p);
  },
  "o": function (x) {
    return Math.round(x).toString(8);
  },
  "p": function (x, p) {
    return (0, _formatRounded.default)(x * 100, p);
  },
  "r": _formatRounded.default,
  "s": _formatPrefixAuto.default,
  "X": function (x) {
    return Math.round(x).toString(16).toUpperCase();
  },
  "x": function (x) {
    return Math.round(x).toString(16);
  }
};
exports.default = _default;
},{"./formatPrefixAuto.js":"node_modules/d3-format/src/formatPrefixAuto.js","./formatRounded.js":"node_modules/d3-format/src/formatRounded.js"}],"node_modules/d3-format/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x;
}
},{}],"node_modules/d3-format/src/locale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent.js"));

var _formatGroup = _interopRequireDefault(require("./formatGroup.js"));

var _formatNumerals = _interopRequireDefault(require("./formatNumerals.js"));

var _formatSpecifier = _interopRequireDefault(require("./formatSpecifier.js"));

var _formatTrim = _interopRequireDefault(require("./formatTrim.js"));

var _formatTypes = _interopRequireDefault(require("./formatTypes.js"));

var _formatPrefixAuto = require("./formatPrefixAuto.js");

var _identity = _interopRequireDefault(require("./identity.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var map = Array.prototype.map,
    prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];

function _default(locale) {
  var group = locale.grouping === undefined || locale.thousands === undefined ? _identity.default : (0, _formatGroup.default)(map.call(locale.grouping, Number), locale.thousands + ""),
      currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
      currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
      decimal = locale.decimal === undefined ? "." : locale.decimal + "",
      numerals = locale.numerals === undefined ? _identity.default : (0, _formatNumerals.default)(map.call(locale.numerals, String)),
      percent = locale.percent === undefined ? "%" : locale.percent + "",
      minus = locale.minus === undefined ? "-" : locale.minus + "",
      nan = locale.nan === undefined ? "NaN" : locale.nan + "";

  function newFormat(specifier) {
    specifier = (0, _formatSpecifier.default)(specifier);
    var fill = specifier.fill,
        align = specifier.align,
        sign = specifier.sign,
        symbol = specifier.symbol,
        zero = specifier.zero,
        width = specifier.width,
        comma = specifier.comma,
        precision = specifier.precision,
        trim = specifier.trim,
        type = specifier.type; // The "n" type is an alias for ",g".

    if (type === "n") comma = true, type = "g"; // The "" type, and any invalid type, is an alias for ".12~g".
    else if (!_formatTypes.default[type]) precision === undefined && (precision = 12), trim = true, type = "g"; // If zero fill is specified, padding goes after sign and before digits.

    if (zero || fill === "0" && align === "=") zero = true, fill = "0", align = "="; // Compute the prefix and suffix.
    // For SI-prefix, the suffix is lazily computed.

    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
        suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : ""; // What format function should we use?
    // Is this an integer type?
    // Can this type generate exponential notation?

    var formatType = _formatTypes.default[type],
        maybeSuffix = /[defgprs%]/.test(type); // Set the default precision if not specified,
    // or clamp the specified precision to the supported range.
    // For significant precision, it must be in [1, 21].
    // For fixed precision, it must be in [0, 20].

    precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));

    function format(value) {
      var valuePrefix = prefix,
          valueSuffix = suffix,
          i,
          n,
          c;

      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value; // Perform the initial formatting.

        var valueNegative = value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision); // Trim insignificant zeros.

        if (trim) value = (0, _formatTrim.default)(value); // If a negative value rounds to zero during formatting, treat as positive.

        if (valueNegative && +value === 0) valueNegative = false; // Compute the prefix and suffix.

        valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + _formatPrefixAuto.prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : ""); // Break the formatted value into the integer “value” part that can be
        // grouped, and fractional or exponential “suffix” part that is not.

        if (maybeSuffix) {
          i = -1, n = value.length;

          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      } // If the fill character is not "0", grouping is applied before padding.


      if (comma && !zero) value = group(value, Infinity); // Compute the padding.

      var length = valuePrefix.length + value.length + valueSuffix.length,
          padding = length < width ? new Array(width - length + 1).join(fill) : ""; // If the fill character is "0", grouping is applied after padding.

      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = ""; // Reconstruct the final output based on the desired alignment.

      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;

        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;

        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;

        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }

      return numerals(value);
    }

    format.toString = function () {
      return specifier + "";
    };

    return format;
  }

  function formatPrefix(specifier, value) {
    var f = newFormat((specifier = (0, _formatSpecifier.default)(specifier), specifier.type = "f", specifier)),
        e = Math.max(-8, Math.min(8, Math.floor((0, _exponent.default)(value) / 3))) * 3,
        k = Math.pow(10, -e),
        prefix = prefixes[8 + e / 3];
    return function (value) {
      return f(k * value) + prefix;
    };
  }

  return {
    format: newFormat,
    formatPrefix: formatPrefix
  };
}
},{"./exponent.js":"node_modules/d3-format/src/exponent.js","./formatGroup.js":"node_modules/d3-format/src/formatGroup.js","./formatNumerals.js":"node_modules/d3-format/src/formatNumerals.js","./formatSpecifier.js":"node_modules/d3-format/src/formatSpecifier.js","./formatTrim.js":"node_modules/d3-format/src/formatTrim.js","./formatTypes.js":"node_modules/d3-format/src/formatTypes.js","./formatPrefixAuto.js":"node_modules/d3-format/src/formatPrefixAuto.js","./identity.js":"node_modules/d3-format/src/identity.js"}],"node_modules/d3-format/src/defaultLocale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultLocale;
exports.formatPrefix = exports.format = void 0;

var _locale = _interopRequireDefault(require("./locale.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var locale;
var format;
exports.format = format;
var formatPrefix;
exports.formatPrefix = formatPrefix;
defaultLocale({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""],
  minus: "-"
});

function defaultLocale(definition) {
  locale = (0, _locale.default)(definition);
  exports.format = format = locale.format;
  exports.formatPrefix = formatPrefix = locale.formatPrefix;
  return locale;
}
},{"./locale.js":"node_modules/d3-format/src/locale.js"}],"node_modules/d3-format/src/precisionFixed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(step) {
  return Math.max(0, -(0, _exponent.default)(Math.abs(step)));
}
},{"./exponent.js":"node_modules/d3-format/src/exponent.js"}],"node_modules/d3-format/src/precisionPrefix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor((0, _exponent.default)(value) / 3))) * 3 - (0, _exponent.default)(Math.abs(step)));
}
},{"./exponent.js":"node_modules/d3-format/src/exponent.js"}],"node_modules/d3-format/src/precisionRound.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, (0, _exponent.default)(max) - (0, _exponent.default)(step)) + 1;
}
},{"./exponent.js":"node_modules/d3-format/src/exponent.js"}],"node_modules/d3-format/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "formatDefaultLocale", {
  enumerable: true,
  get: function () {
    return _defaultLocale.default;
  }
});
Object.defineProperty(exports, "format", {
  enumerable: true,
  get: function () {
    return _defaultLocale.format;
  }
});
Object.defineProperty(exports, "formatPrefix", {
  enumerable: true,
  get: function () {
    return _defaultLocale.formatPrefix;
  }
});
Object.defineProperty(exports, "formatLocale", {
  enumerable: true,
  get: function () {
    return _locale.default;
  }
});
Object.defineProperty(exports, "formatSpecifier", {
  enumerable: true,
  get: function () {
    return _formatSpecifier.default;
  }
});
Object.defineProperty(exports, "FormatSpecifier", {
  enumerable: true,
  get: function () {
    return _formatSpecifier.FormatSpecifier;
  }
});
Object.defineProperty(exports, "precisionFixed", {
  enumerable: true,
  get: function () {
    return _precisionFixed.default;
  }
});
Object.defineProperty(exports, "precisionPrefix", {
  enumerable: true,
  get: function () {
    return _precisionPrefix.default;
  }
});
Object.defineProperty(exports, "precisionRound", {
  enumerable: true,
  get: function () {
    return _precisionRound.default;
  }
});

var _defaultLocale = _interopRequireWildcard(require("./defaultLocale.js"));

var _locale = _interopRequireDefault(require("./locale.js"));

var _formatSpecifier = _interopRequireWildcard(require("./formatSpecifier.js"));

var _precisionFixed = _interopRequireDefault(require("./precisionFixed.js"));

var _precisionPrefix = _interopRequireDefault(require("./precisionPrefix.js"));

var _precisionRound = _interopRequireDefault(require("./precisionRound.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
},{"./defaultLocale.js":"node_modules/d3-format/src/defaultLocale.js","./locale.js":"node_modules/d3-format/src/locale.js","./formatSpecifier.js":"node_modules/d3-format/src/formatSpecifier.js","./precisionFixed.js":"node_modules/d3-format/src/precisionFixed.js","./precisionPrefix.js":"node_modules/d3-format/src/precisionPrefix.js","./precisionRound.js":"node_modules/d3-format/src/precisionRound.js"}],"node_modules/d3-geo/src/adder.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Adds floating point numbers with twice the normal precision.
// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
// 305–363 (1997).
// Code adapted from GeographicLib by Charles F. F. Karney,
// http://geographiclib.sourceforge.net/
function _default() {
  return new Adder();
}

function Adder() {
  this.reset();
}

Adder.prototype = {
  constructor: Adder,
  reset: function () {
    this.s = // rounded value
    this.t = 0; // exact error
  },
  add: function (y) {
    add(temp, y, this.t);
    add(this, temp.s, this.s);
    if (this.s) this.t += temp.t;else this.s = temp.t;
  },
  valueOf: function () {
    return this.s;
  }
};
var temp = new Adder();

function add(adder, a, b) {
  var x = adder.s = a + b,
      bv = x - a,
      av = x - bv;
  adder.t = a - av + (b - bv);
}
},{}],"node_modules/d3-geo/src/math.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acos = acos;
exports.asin = asin;
exports.haversin = haversin;
exports.tan = exports.sqrt = exports.sign = exports.sin = exports.pow = exports.log = exports.floor = exports.exp = exports.ceil = exports.cos = exports.atan2 = exports.atan = exports.abs = exports.radians = exports.degrees = exports.tau = exports.quarterPi = exports.halfPi = exports.pi = exports.epsilon2 = exports.epsilon = void 0;
var epsilon = 1e-6;
exports.epsilon = epsilon;
var epsilon2 = 1e-12;
exports.epsilon2 = epsilon2;
var pi = Math.PI;
exports.pi = pi;
var halfPi = pi / 2;
exports.halfPi = halfPi;
var quarterPi = pi / 4;
exports.quarterPi = quarterPi;
var tau = pi * 2;
exports.tau = tau;
var degrees = 180 / pi;
exports.degrees = degrees;
var radians = pi / 180;
exports.radians = radians;
var abs = Math.abs;
exports.abs = abs;
var atan = Math.atan;
exports.atan = atan;
var atan2 = Math.atan2;
exports.atan2 = atan2;
var cos = Math.cos;
exports.cos = cos;
var ceil = Math.ceil;
exports.ceil = ceil;
var exp = Math.exp;
exports.exp = exp;
var floor = Math.floor;
exports.floor = floor;
var log = Math.log;
exports.log = log;
var pow = Math.pow;
exports.pow = pow;
var sin = Math.sin;
exports.sin = sin;

var sign = Math.sign || function (x) {
  return x > 0 ? 1 : x < 0 ? -1 : 0;
};

exports.sign = sign;
var sqrt = Math.sqrt;
exports.sqrt = sqrt;
var tan = Math.tan;
exports.tan = tan;

function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}

function asin(x) {
  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
}

function haversin(x) {
  return (x = sin(x / 2)) * x;
}
},{}],"node_modules/d3-geo/src/noop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = noop;

function noop() {}
},{}],"node_modules/d3-geo/src/stream.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function streamGeometry(geometry, stream) {
  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
    streamGeometryType[geometry.type](geometry, stream);
  }
}

var streamObjectType = {
  Feature: function (object, stream) {
    streamGeometry(object.geometry, stream);
  },
  FeatureCollection: function (object, stream) {
    var features = object.features,
        i = -1,
        n = features.length;

    while (++i < n) streamGeometry(features[i].geometry, stream);
  }
};
var streamGeometryType = {
  Sphere: function (object, stream) {
    stream.sphere();
  },
  Point: function (object, stream) {
    object = object.coordinates;
    stream.point(object[0], object[1], object[2]);
  },
  MultiPoint: function (object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
  },
  LineString: function (object, stream) {
    streamLine(object.coordinates, stream, 0);
  },
  MultiLineString: function (object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) streamLine(coordinates[i], stream, 0);
  },
  Polygon: function (object, stream) {
    streamPolygon(object.coordinates, stream);
  },
  MultiPolygon: function (object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) streamPolygon(coordinates[i], stream);
  },
  GeometryCollection: function (object, stream) {
    var geometries = object.geometries,
        i = -1,
        n = geometries.length;

    while (++i < n) streamGeometry(geometries[i], stream);
  }
};

function streamLine(coordinates, stream, closed) {
  var i = -1,
      n = coordinates.length - closed,
      coordinate;
  stream.lineStart();

  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);

  stream.lineEnd();
}

function streamPolygon(coordinates, stream) {
  var i = -1,
      n = coordinates.length;
  stream.polygonStart();

  while (++i < n) streamLine(coordinates[i], stream, 1);

  stream.polygonEnd();
}

function _default(object, stream) {
  if (object && streamObjectType.hasOwnProperty(object.type)) {
    streamObjectType[object.type](object, stream);
  } else {
    streamGeometry(object, stream);
  }
}
},{}],"node_modules/d3-geo/src/area.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.areaStream = exports.areaRingSum = void 0;

var _adder = _interopRequireDefault(require("./adder.js"));

var _math = require("./math.js");

var _noop = _interopRequireDefault(require("./noop.js"));

var _stream = _interopRequireDefault(require("./stream.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var areaRingSum = (0, _adder.default)();
exports.areaRingSum = areaRingSum;
var areaSum = (0, _adder.default)(),
    lambda00,
    phi00,
    lambda0,
    cosPhi0,
    sinPhi0;
var areaStream = {
  point: _noop.default,
  lineStart: _noop.default,
  lineEnd: _noop.default,
  polygonStart: function () {
    areaRingSum.reset();
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function () {
    var areaRing = +areaRingSum;
    areaSum.add(areaRing < 0 ? _math.tau + areaRing : areaRing);
    this.lineStart = this.lineEnd = this.point = _noop.default;
  },
  sphere: function () {
    areaSum.add(_math.tau);
  }
};
exports.areaStream = areaStream;

function areaRingStart() {
  areaStream.point = areaPointFirst;
}

function areaRingEnd() {
  areaPoint(lambda00, phi00);
}

function areaPointFirst(lambda, phi) {
  areaStream.point = areaPoint;
  lambda00 = lambda, phi00 = phi;
  lambda *= _math.radians, phi *= _math.radians;
  lambda0 = lambda, cosPhi0 = (0, _math.cos)(phi = phi / 2 + _math.quarterPi), sinPhi0 = (0, _math.sin)(phi);
}

function areaPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  phi = phi / 2 + _math.quarterPi; // half the angular distance from south pole
  // Spherical excess E for a spherical triangle with vertices: south pole,
  // previous point, current point.  Uses a formula derived from Cagnoli’s
  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).

  var dLambda = lambda - lambda0,
      sdLambda = dLambda >= 0 ? 1 : -1,
      adLambda = sdLambda * dLambda,
      cosPhi = (0, _math.cos)(phi),
      sinPhi = (0, _math.sin)(phi),
      k = sinPhi0 * sinPhi,
      u = cosPhi0 * cosPhi + k * (0, _math.cos)(adLambda),
      v = k * sdLambda * (0, _math.sin)(adLambda);
  areaRingSum.add((0, _math.atan2)(v, u)); // Advance the previous points.

  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
}

function _default(object) {
  areaSum.reset();
  (0, _stream.default)(object, areaStream);
  return areaSum * 2;
}
},{"./adder.js":"node_modules/d3-geo/src/adder.js","./math.js":"node_modules/d3-geo/src/math.js","./noop.js":"node_modules/d3-geo/src/noop.js","./stream.js":"node_modules/d3-geo/src/stream.js"}],"node_modules/d3-geo/src/cartesian.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.spherical = spherical;
exports.cartesian = cartesian;
exports.cartesianDot = cartesianDot;
exports.cartesianCross = cartesianCross;
exports.cartesianAddInPlace = cartesianAddInPlace;
exports.cartesianScale = cartesianScale;
exports.cartesianNormalizeInPlace = cartesianNormalizeInPlace;

var _math = require("./math.js");

function spherical(cartesian) {
  return [(0, _math.atan2)(cartesian[1], cartesian[0]), (0, _math.asin)(cartesian[2])];
}

function cartesian(spherical) {
  var lambda = spherical[0],
      phi = spherical[1],
      cosPhi = (0, _math.cos)(phi);
  return [cosPhi * (0, _math.cos)(lambda), cosPhi * (0, _math.sin)(lambda), (0, _math.sin)(phi)];
}

function cartesianDot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}

function cartesianCross(a, b) {
  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
} // TODO return a


function cartesianAddInPlace(a, b) {
  a[0] += b[0], a[1] += b[1], a[2] += b[2];
}

function cartesianScale(vector, k) {
  return [vector[0] * k, vector[1] * k, vector[2] * k];
} // TODO return d


function cartesianNormalizeInPlace(d) {
  var l = (0, _math.sqrt)(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
  d[0] /= l, d[1] /= l, d[2] /= l;
}
},{"./math.js":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/bounds.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _adder = _interopRequireDefault(require("./adder.js"));

var _area = require("./area.js");

var _cartesian = require("./cartesian.js");

var _math = require("./math.js");

var _stream = _interopRequireDefault(require("./stream.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lambda0,
    phi0,
    lambda1,
    phi1,
    // bounds
lambda2,
    // previous lambda-coordinate
lambda00,
    phi00,
    // first point
p0,
    // previous 3D point
deltaSum = (0, _adder.default)(),
    ranges,
    range;
var boundsStream = {
  point: boundsPoint,
  lineStart: boundsLineStart,
  lineEnd: boundsLineEnd,
  polygonStart: function () {
    boundsStream.point = boundsRingPoint;
    boundsStream.lineStart = boundsRingStart;
    boundsStream.lineEnd = boundsRingEnd;
    deltaSum.reset();

    _area.areaStream.polygonStart();
  },
  polygonEnd: function () {
    _area.areaStream.polygonEnd();

    boundsStream.point = boundsPoint;
    boundsStream.lineStart = boundsLineStart;
    boundsStream.lineEnd = boundsLineEnd;
    if (_area.areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);else if (deltaSum > _math.epsilon) phi1 = 90;else if (deltaSum < -_math.epsilon) phi0 = -90;
    range[0] = lambda0, range[1] = lambda1;
  },
  sphere: function () {
    lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);
  }
};

function boundsPoint(lambda, phi) {
  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);
  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
}

function linePoint(lambda, phi) {
  var p = (0, _cartesian.cartesian)([lambda * _math.radians, phi * _math.radians]);

  if (p0) {
    var normal = (0, _cartesian.cartesianCross)(p0, p),
        equatorial = [normal[1], -normal[0], 0],
        inflection = (0, _cartesian.cartesianCross)(equatorial, normal);
    (0, _cartesian.cartesianNormalizeInPlace)(inflection);
    inflection = (0, _cartesian.spherical)(inflection);
    var delta = lambda - lambda2,
        sign = delta > 0 ? 1 : -1,
        lambdai = inflection[0] * _math.degrees * sign,
        phii,
        antimeridian = (0, _math.abs)(delta) > 180;

    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
      phii = inflection[1] * _math.degrees;
      if (phii > phi1) phi1 = phii;
    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
      phii = -inflection[1] * _math.degrees;
      if (phii < phi0) phi0 = phii;
    } else {
      if (phi < phi0) phi0 = phi;
      if (phi > phi1) phi1 = phi;
    }

    if (antimeridian) {
      if (lambda < lambda2) {
        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;
      } else {
        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;
      }
    } else {
      if (lambda1 >= lambda0) {
        if (lambda < lambda0) lambda0 = lambda;
        if (lambda > lambda1) lambda1 = lambda;
      } else {
        if (lambda > lambda2) {
          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;
        } else {
          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;
        }
      }
    }
  } else {
    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);
  }

  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
  p0 = p, lambda2 = lambda;
}

function boundsLineStart() {
  boundsStream.point = linePoint;
}

function boundsLineEnd() {
  range[0] = lambda0, range[1] = lambda1;
  boundsStream.point = boundsPoint;
  p0 = null;
}

function boundsRingPoint(lambda, phi) {
  if (p0) {
    var delta = lambda - lambda2;
    deltaSum.add((0, _math.abs)(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
  } else {
    lambda00 = lambda, phi00 = phi;
  }

  _area.areaStream.point(lambda, phi);

  linePoint(lambda, phi);
}

function boundsRingStart() {
  _area.areaStream.lineStart();
}

function boundsRingEnd() {
  boundsRingPoint(lambda00, phi00);

  _area.areaStream.lineEnd();

  if ((0, _math.abs)(deltaSum) > _math.epsilon) lambda0 = -(lambda1 = 180);
  range[0] = lambda0, range[1] = lambda1;
  p0 = null;
} // Finds the left-right distance between two longitudes.
// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
// the distance between ±180° to be 360°.


function angle(lambda0, lambda1) {
  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
}

function rangeCompare(a, b) {
  return a[0] - b[0];
}

function rangeContains(range, x) {
  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
}

function _default(feature) {
  var i, n, a, b, merged, deltaMax, delta;
  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);
  ranges = [];
  (0, _stream.default)(feature, boundsStream); // First, sort ranges by their minimum longitudes.

  if (n = ranges.length) {
    ranges.sort(rangeCompare); // Then, merge any ranges that overlap.

    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
      b = ranges[i];

      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
      } else {
        merged.push(a = b);
      }
    } // Finally, find the largest gap between the merged ranges.
    // The final bounding box will be the inverse of this gap.


    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
      b = merged[i];
      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];
    }
  }

  ranges = range = null;
  return lambda0 === Infinity || phi0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[lambda0, phi0], [lambda1, phi1]];
}
},{"./adder.js":"node_modules/d3-geo/src/adder.js","./area.js":"node_modules/d3-geo/src/area.js","./cartesian.js":"node_modules/d3-geo/src/cartesian.js","./math.js":"node_modules/d3-geo/src/math.js","./stream.js":"node_modules/d3-geo/src/stream.js"}],"node_modules/d3-geo/src/centroid.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _math = require("./math.js");

var _noop = _interopRequireDefault(require("./noop.js"));

var _stream = _interopRequireDefault(require("./stream.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var W0, W1, X0, Y0, Z0, X1, Y1, Z1, X2, Y2, Z2, lambda00, phi00, // first point
x0, y0, z0; // previous point

var centroidStream = {
  sphere: _noop.default,
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function () {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function () {
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  }
}; // Arithmetic mean of Cartesian vectors.

function centroidPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi);
  centroidPointCartesian(cosPhi * (0, _math.cos)(lambda), cosPhi * (0, _math.sin)(lambda), (0, _math.sin)(phi));
}

function centroidPointCartesian(x, y, z) {
  ++W0;
  X0 += (x - X0) / W0;
  Y0 += (y - Y0) / W0;
  Z0 += (z - Z0) / W0;
}

function centroidLineStart() {
  centroidStream.point = centroidLinePointFirst;
}

function centroidLinePointFirst(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi);
  x0 = cosPhi * (0, _math.cos)(lambda);
  y0 = cosPhi * (0, _math.sin)(lambda);
  z0 = (0, _math.sin)(phi);
  centroidStream.point = centroidLinePoint;
  centroidPointCartesian(x0, y0, z0);
}

function centroidLinePoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi),
      x = cosPhi * (0, _math.cos)(lambda),
      y = cosPhi * (0, _math.sin)(lambda),
      z = (0, _math.sin)(phi),
      w = (0, _math.atan2)((0, _math.sqrt)((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}

function centroidLineEnd() {
  centroidStream.point = centroidPoint;
} // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
// J. Applied Mechanics 42, 239 (1975).


function centroidRingStart() {
  centroidStream.point = centroidRingPointFirst;
}

function centroidRingEnd() {
  centroidRingPoint(lambda00, phi00);
  centroidStream.point = centroidPoint;
}

function centroidRingPointFirst(lambda, phi) {
  lambda00 = lambda, phi00 = phi;
  lambda *= _math.radians, phi *= _math.radians;
  centroidStream.point = centroidRingPoint;
  var cosPhi = (0, _math.cos)(phi);
  x0 = cosPhi * (0, _math.cos)(lambda);
  y0 = cosPhi * (0, _math.sin)(lambda);
  z0 = (0, _math.sin)(phi);
  centroidPointCartesian(x0, y0, z0);
}

function centroidRingPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi),
      x = cosPhi * (0, _math.cos)(lambda),
      y = cosPhi * (0, _math.sin)(lambda),
      z = (0, _math.sin)(phi),
      cx = y0 * z - z0 * y,
      cy = z0 * x - x0 * z,
      cz = x0 * y - y0 * x,
      m = (0, _math.sqrt)(cx * cx + cy * cy + cz * cz),
      w = (0, _math.asin)(m),
      // line weight = angle
  v = m && -w / m; // area weight multiplier

  X2 += v * cx;
  Y2 += v * cy;
  Z2 += v * cz;
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}

function _default(object) {
  W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
  (0, _stream.default)(object, centroidStream);
  var x = X2,
      y = Y2,
      z = Z2,
      m = x * x + y * y + z * z; // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.

  if (m < _math.epsilon2) {
    x = X1, y = Y1, z = Z1; // If the feature has zero length, fall back to arithmetic mean of point vectors.

    if (W1 < _math.epsilon) x = X0, y = Y0, z = Z0;
    m = x * x + y * y + z * z; // If the feature still has an undefined ccentroid, then return.

    if (m < _math.epsilon2) return [NaN, NaN];
  }

  return [(0, _math.atan2)(y, x) * _math.degrees, (0, _math.asin)(z / (0, _math.sqrt)(m)) * _math.degrees];
}
},{"./math.js":"node_modules/d3-geo/src/math.js","./noop.js":"node_modules/d3-geo/src/noop.js","./stream.js":"node_modules/d3-geo/src/stream.js"}],"node_modules/d3-geo/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-geo/src/compose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  function compose(x, y) {
    return x = a(x, y), b(x[0], x[1]);
  }

  if (a.invert && b.invert) compose.invert = function (x, y) {
    return x = b.invert(x, y), x && a.invert(x[0], x[1]);
  };
  return compose;
}
},{}],"node_modules/d3-geo/src/rotation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rotateRadians = rotateRadians;
exports.default = _default;

var _compose = _interopRequireDefault(require("./compose.js"));

var _math = require("./math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function rotationIdentity(lambda, phi) {
  return [(0, _math.abs)(lambda) > _math.pi ? lambda + Math.round(-lambda / _math.tau) * _math.tau : lambda, phi];
}

rotationIdentity.invert = rotationIdentity;

function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
  return (deltaLambda %= _math.tau) ? deltaPhi || deltaGamma ? (0, _compose.default)(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
}

function forwardRotationLambda(deltaLambda) {
  return function (lambda, phi) {
    return lambda += deltaLambda, [lambda > _math.pi ? lambda - _math.tau : lambda < -_math.pi ? lambda + _math.tau : lambda, phi];
  };
}

function rotationLambda(deltaLambda) {
  var rotation = forwardRotationLambda(deltaLambda);
  rotation.invert = forwardRotationLambda(-deltaLambda);
  return rotation;
}

function rotationPhiGamma(deltaPhi, deltaGamma) {
  var cosDeltaPhi = (0, _math.cos)(deltaPhi),
      sinDeltaPhi = (0, _math.sin)(deltaPhi),
      cosDeltaGamma = (0, _math.cos)(deltaGamma),
      sinDeltaGamma = (0, _math.sin)(deltaGamma);

  function rotation(lambda, phi) {
    var cosPhi = (0, _math.cos)(phi),
        x = (0, _math.cos)(lambda) * cosPhi,
        y = (0, _math.sin)(lambda) * cosPhi,
        z = (0, _math.sin)(phi),
        k = z * cosDeltaPhi + x * sinDeltaPhi;
    return [(0, _math.atan2)(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), (0, _math.asin)(k * cosDeltaGamma + y * sinDeltaGamma)];
  }

  rotation.invert = function (lambda, phi) {
    var cosPhi = (0, _math.cos)(phi),
        x = (0, _math.cos)(lambda) * cosPhi,
        y = (0, _math.sin)(lambda) * cosPhi,
        z = (0, _math.sin)(phi),
        k = z * cosDeltaGamma - y * sinDeltaGamma;
    return [(0, _math.atan2)(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), (0, _math.asin)(k * cosDeltaPhi - x * sinDeltaPhi)];
  };

  return rotation;
}

function _default(rotate) {
  rotate = rotateRadians(rotate[0] * _math.radians, rotate[1] * _math.radians, rotate.length > 2 ? rotate[2] * _math.radians : 0);

  function forward(coordinates) {
    coordinates = rotate(coordinates[0] * _math.radians, coordinates[1] * _math.radians);
    return coordinates[0] *= _math.degrees, coordinates[1] *= _math.degrees, coordinates;
  }

  forward.invert = function (coordinates) {
    coordinates = rotate.invert(coordinates[0] * _math.radians, coordinates[1] * _math.radians);
    return coordinates[0] *= _math.degrees, coordinates[1] *= _math.degrees, coordinates;
  };

  return forward;
}
},{"./compose.js":"node_modules/d3-geo/src/compose.js","./math.js":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/circle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.circleStream = circleStream;
exports.default = _default;

var _cartesian = require("./cartesian.js");

var _constant = _interopRequireDefault(require("./constant.js"));

var _math = require("./math.js");

var _rotation = require("./rotation.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generates a circle centered at [0°, 0°], with a given radius and precision.
function circleStream(stream, radius, delta, direction, t0, t1) {
  if (!delta) return;
  var cosRadius = (0, _math.cos)(radius),
      sinRadius = (0, _math.sin)(radius),
      step = direction * delta;

  if (t0 == null) {
    t0 = radius + direction * _math.tau;
    t1 = radius - step / 2;
  } else {
    t0 = circleRadius(cosRadius, t0);
    t1 = circleRadius(cosRadius, t1);
    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * _math.tau;
  }

  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
    point = (0, _cartesian.spherical)([cosRadius, -sinRadius * (0, _math.cos)(t), -sinRadius * (0, _math.sin)(t)]);
    stream.point(point[0], point[1]);
  }
} // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].


function circleRadius(cosRadius, point) {
  point = (0, _cartesian.cartesian)(point), point[0] -= cosRadius;
  (0, _cartesian.cartesianNormalizeInPlace)(point);
  var radius = (0, _math.acos)(-point[1]);
  return ((-point[2] < 0 ? -radius : radius) + _math.tau - _math.epsilon) % _math.tau;
}

function _default() {
  var center = (0, _constant.default)([0, 0]),
      radius = (0, _constant.default)(90),
      precision = (0, _constant.default)(6),
      ring,
      rotate,
      stream = {
    point: point
  };

  function point(x, y) {
    ring.push(x = rotate(x, y));
    x[0] *= _math.degrees, x[1] *= _math.degrees;
  }

  function circle() {
    var c = center.apply(this, arguments),
        r = radius.apply(this, arguments) * _math.radians,
        p = precision.apply(this, arguments) * _math.radians;

    ring = [];
    rotate = (0, _rotation.rotateRadians)(-c[0] * _math.radians, -c[1] * _math.radians, 0).invert;
    circleStream(stream, r, p, 1);
    c = {
      type: "Polygon",
      coordinates: [ring]
    };
    ring = rotate = null;
    return c;
  }

  circle.center = function (_) {
    return arguments.length ? (center = typeof _ === "function" ? _ : (0, _constant.default)([+_[0], +_[1]]), circle) : center;
  };

  circle.radius = function (_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : (0, _constant.default)(+_), circle) : radius;
  };

  circle.precision = function (_) {
    return arguments.length ? (precision = typeof _ === "function" ? _ : (0, _constant.default)(+_), circle) : precision;
  };

  return circle;
}
},{"./cartesian.js":"node_modules/d3-geo/src/cartesian.js","./constant.js":"node_modules/d3-geo/src/constant.js","./math.js":"node_modules/d3-geo/src/math.js","./rotation.js":"node_modules/d3-geo/src/rotation.js"}],"node_modules/d3-geo/src/clip/buffer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _noop = _interopRequireDefault(require("../noop.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var lines = [],
      line;
  return {
    point: function (x, y) {
      line.push([x, y]);
    },
    lineStart: function () {
      lines.push(line = []);
    },
    lineEnd: _noop.default,
    rejoin: function () {
      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
    },
    result: function () {
      var result = lines;
      lines = [];
      line = null;
      return result;
    }
  };
}
},{"../noop.js":"node_modules/d3-geo/src/noop.js"}],"node_modules/d3-geo/src/pointEqual.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _math = require("./math.js");

function _default(a, b) {
  return (0, _math.abs)(a[0] - b[0]) < _math.epsilon && (0, _math.abs)(a[1] - b[1]) < _math.epsilon;
}
},{"./math.js":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/clip/rejoin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _pointEqual = _interopRequireDefault(require("../pointEqual.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Intersection(point, points, other, entry) {
  this.x = point;
  this.z = points;
  this.o = other; // another intersection

  this.e = entry; // is an entry?

  this.v = false; // visited

  this.n = this.p = null; // next & previous
} // A generalized polygon clipping algorithm: given a polygon that has been cut
// into its visible line segments, and rejoins the segments by interpolating
// along the clip edge.


function _default(segments, compareIntersection, startInside, interpolate, stream) {
  var subject = [],
      clip = [],
      i,
      n;
  segments.forEach(function (segment) {
    if ((n = segment.length - 1) <= 0) return;
    var n,
        p0 = segment[0],
        p1 = segment[n],
        x; // If the first and last points of a segment are coincident, then treat as a
    // closed ring. TODO if all rings are closed, then the winding order of the
    // exterior ring should be checked.

    if ((0, _pointEqual.default)(p0, p1)) {
      stream.lineStart();

      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);

      stream.lineEnd();
      return;
    }

    subject.push(x = new Intersection(p0, segment, null, true));
    clip.push(x.o = new Intersection(p0, null, x, false));
    subject.push(x = new Intersection(p1, segment, null, false));
    clip.push(x.o = new Intersection(p1, null, x, true));
  });
  if (!subject.length) return;
  clip.sort(compareIntersection);
  link(subject);
  link(clip);

  for (i = 0, n = clip.length; i < n; ++i) {
    clip[i].e = startInside = !startInside;
  }

  var start = subject[0],
      points,
      point;

  while (1) {
    // Find first unvisited intersection.
    var current = start,
        isSubject = true;

    while (current.v) if ((current = current.n) === start) return;

    points = current.z;
    stream.lineStart();

    do {
      current.v = current.o.v = true;

      if (current.e) {
        if (isSubject) {
          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
        } else {
          interpolate(current.x, current.n.x, 1, stream);
        }

        current = current.n;
      } else {
        if (isSubject) {
          points = current.p.z;

          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
        } else {
          interpolate(current.x, current.p.x, -1, stream);
        }

        current = current.p;
      }

      current = current.o;
      points = current.z;
      isSubject = !isSubject;
    } while (!current.v);

    stream.lineEnd();
  }
}

function link(array) {
  if (!(n = array.length)) return;
  var n,
      i = 0,
      a = array[0],
      b;

  while (++i < n) {
    a.n = b = array[i];
    b.p = a;
    a = b;
  }

  a.n = b = array[0];
  b.p = a;
}
},{"../pointEqual.js":"node_modules/d3-geo/src/pointEqual.js"}],"node_modules/d3-geo/src/polygonContains.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _adder = _interopRequireDefault(require("./adder.js"));

var _cartesian = require("./cartesian.js");

var _math = require("./math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var sum = (0, _adder.default)();

function longitude(point) {
  if ((0, _math.abs)(point[0]) <= _math.pi) return point[0];else return (0, _math.sign)(point[0]) * (((0, _math.abs)(point[0]) + _math.pi) % _math.tau - _math.pi);
}

function _default(polygon, point) {
  var lambda = longitude(point),
      phi = point[1],
      sinPhi = (0, _math.sin)(phi),
      normal = [(0, _math.sin)(lambda), -(0, _math.cos)(lambda), 0],
      angle = 0,
      winding = 0;
  sum.reset();
  if (sinPhi === 1) phi = _math.halfPi + _math.epsilon;else if (sinPhi === -1) phi = -_math.halfPi - _math.epsilon;

  for (var i = 0, n = polygon.length; i < n; ++i) {
    if (!(m = (ring = polygon[i]).length)) continue;
    var ring,
        m,
        point0 = ring[m - 1],
        lambda0 = longitude(point0),
        phi0 = point0[1] / 2 + _math.quarterPi,
        sinPhi0 = (0, _math.sin)(phi0),
        cosPhi0 = (0, _math.cos)(phi0);

    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
      var point1 = ring[j],
          lambda1 = longitude(point1),
          phi1 = point1[1] / 2 + _math.quarterPi,
          sinPhi1 = (0, _math.sin)(phi1),
          cosPhi1 = (0, _math.cos)(phi1),
          delta = lambda1 - lambda0,
          sign = delta >= 0 ? 1 : -1,
          absDelta = sign * delta,
          antimeridian = absDelta > _math.pi,
          k = sinPhi0 * sinPhi1;
      sum.add((0, _math.atan2)(k * sign * (0, _math.sin)(absDelta), cosPhi0 * cosPhi1 + k * (0, _math.cos)(absDelta)));
      angle += antimeridian ? delta + sign * _math.tau : delta; // Are the longitudes either side of the point’s meridian (lambda),
      // and are the latitudes smaller than the parallel (phi)?

      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
        var arc = (0, _cartesian.cartesianCross)((0, _cartesian.cartesian)(point0), (0, _cartesian.cartesian)(point1));
        (0, _cartesian.cartesianNormalizeInPlace)(arc);
        var intersection = (0, _cartesian.cartesianCross)(normal, arc);
        (0, _cartesian.cartesianNormalizeInPlace)(intersection);
        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * (0, _math.asin)(intersection[2]);

        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
          winding += antimeridian ^ delta >= 0 ? 1 : -1;
        }
      }
    }
  } // First, determine whether the South pole is inside or outside:
  //
  // It is inside if:
  // * the polygon winds around it in a clockwise direction.
  // * the polygon does not (cumulatively) wind around it, but has a negative
  //   (counter-clockwise) area.
  //
  // Second, count the (signed) number of times a segment crosses a lambda
  // from the point to the South pole.  If it is zero, then the point is the
  // same side as the South pole.


  return (angle < -_math.epsilon || angle < _math.epsilon && sum < -_math.epsilon) ^ winding & 1;
}
},{"./adder.js":"node_modules/d3-geo/src/adder.js","./cartesian.js":"node_modules/d3-geo/src/cartesian.js","./math.js":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/clip/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _buffer = _interopRequireDefault(require("./buffer.js"));

var _rejoin = _interopRequireDefault(require("./rejoin.js"));

var _math = require("../math.js");

var _polygonContains = _interopRequireDefault(require("../polygonContains.js"));

var _d3Array = require("d3-array");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(pointVisible, clipLine, interpolate, start) {
  return function (sink) {
    var line = clipLine(sink),
        ringBuffer = (0, _buffer.default)(),
        ringSink = clipLine(ringBuffer),
        polygonStarted = false,
        polygon,
        segments,
        ring;
    var clip = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function () {
        clip.point = pointRing;
        clip.lineStart = ringStart;
        clip.lineEnd = ringEnd;
        segments = [];
        polygon = [];
      },
      polygonEnd: function () {
        clip.point = point;
        clip.lineStart = lineStart;
        clip.lineEnd = lineEnd;
        segments = (0, _d3Array.merge)(segments);
        var startInside = (0, _polygonContains.default)(polygon, start);

        if (segments.length) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          (0, _rejoin.default)(segments, compareIntersection, startInside, interpolate, sink);
        } else if (startInside) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
        }

        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
        segments = polygon = null;
      },
      sphere: function () {
        sink.polygonStart();
        sink.lineStart();
        interpolate(null, null, 1, sink);
        sink.lineEnd();
        sink.polygonEnd();
      }
    };

    function point(lambda, phi) {
      if (pointVisible(lambda, phi)) sink.point(lambda, phi);
    }

    function pointLine(lambda, phi) {
      line.point(lambda, phi);
    }

    function lineStart() {
      clip.point = pointLine;
      line.lineStart();
    }

    function lineEnd() {
      clip.point = point;
      line.lineEnd();
    }

    function pointRing(lambda, phi) {
      ring.push([lambda, phi]);
      ringSink.point(lambda, phi);
    }

    function ringStart() {
      ringSink.lineStart();
      ring = [];
    }

    function ringEnd() {
      pointRing(ring[0][0], ring[0][1]);
      ringSink.lineEnd();
      var clean = ringSink.clean(),
          ringSegments = ringBuffer.result(),
          i,
          n = ringSegments.length,
          m,
          segment,
          point;
      ring.pop();
      polygon.push(ring);
      ring = null;
      if (!n) return; // No intersections.

      if (clean & 1) {
        segment = ringSegments[0];

        if ((m = segment.length - 1) > 0) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();

          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);

          sink.lineEnd();
        }

        return;
      } // Rejoin connected segments.
      // TODO reuse ringBuffer.rejoin()?


      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
      segments.push(ringSegments.filter(validSegment));
    }

    return clip;
  };
}

function validSegment(segment) {
  return segment.length > 1;
} // Intersections are sorted along the clip edge. For both antimeridian cutting
// and circle clipping, the same comparison is used.


function compareIntersection(a, b) {
  return ((a = a.x)[0] < 0 ? a[1] - _math.halfPi - _math.epsilon : _math.halfPi - a[1]) - ((b = b.x)[0] < 0 ? b[1] - _math.halfPi - _math.epsilon : _math.halfPi - b[1]);
}
},{"./buffer.js":"node_modules/d3-geo/src/clip/buffer.js","./rejoin.js":"node_modules/d3-geo/src/clip/rejoin.js","../math.js":"node_modules/d3-geo/src/math.js","../polygonContains.js":"node_modules/d3-geo/src/polygonContains.js","d3-array":"node_modules/d3-array/src/index.js"}],"node_modules/d3-geo/src/clip/antimeridian.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _index = _interopRequireDefault(require("./index.js"));

var _math = require("../math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _index.default)(function () {
  return true;
}, clipAntimeridianLine, clipAntimeridianInterpolate, [-_math.pi, -_math.halfPi]); // Takes a line and cuts into visible segments. Return values: 0 - there were
// intersections or the line was empty; 1 - no intersections; 2 - there were
// intersections, and the first and last segments should be rejoined.


exports.default = _default;

function clipAntimeridianLine(stream) {
  var lambda0 = NaN,
      phi0 = NaN,
      sign0 = NaN,
      clean; // no intersections

  return {
    lineStart: function () {
      stream.lineStart();
      clean = 1;
    },
    point: function (lambda1, phi1) {
      var sign1 = lambda1 > 0 ? _math.pi : -_math.pi,
          delta = (0, _math.abs)(lambda1 - lambda0);

      if ((0, _math.abs)(delta - _math.pi) < _math.epsilon) {
        // line crosses a pole
        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? _math.halfPi : -_math.halfPi);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        stream.point(lambda1, phi0);
        clean = 0;
      } else if (sign0 !== sign1 && delta >= _math.pi) {
        // line crosses antimeridian
        if ((0, _math.abs)(lambda0 - sign0) < _math.epsilon) lambda0 -= sign0 * _math.epsilon; // handle degeneracies

        if ((0, _math.abs)(lambda1 - sign1) < _math.epsilon) lambda1 -= sign1 * _math.epsilon;
        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        clean = 0;
      }

      stream.point(lambda0 = lambda1, phi0 = phi1);
      sign0 = sign1;
    },
    lineEnd: function () {
      stream.lineEnd();
      lambda0 = phi0 = NaN;
    },
    clean: function () {
      return 2 - clean; // if intersections, rejoin first and last segments
    }
  };
}

function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
  var cosPhi0,
      cosPhi1,
      sinLambda0Lambda1 = (0, _math.sin)(lambda0 - lambda1);
  return (0, _math.abs)(sinLambda0Lambda1) > _math.epsilon ? (0, _math.atan)(((0, _math.sin)(phi0) * (cosPhi1 = (0, _math.cos)(phi1)) * (0, _math.sin)(lambda1) - (0, _math.sin)(phi1) * (cosPhi0 = (0, _math.cos)(phi0)) * (0, _math.sin)(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;
}

function clipAntimeridianInterpolate(from, to, direction, stream) {
  var phi;

  if (from == null) {
    phi = direction * _math.halfPi;
    stream.point(-_math.pi, phi);
    stream.point(0, phi);
    stream.point(_math.pi, phi);
    stream.point(_math.pi, 0);
    stream.point(_math.pi, -phi);
    stream.point(0, -phi);
    stream.point(-_math.pi, -phi);
    stream.point(-_math.pi, 0);
    stream.point(-_math.pi, phi);
  } else if ((0, _math.abs)(from[0] - to[0]) > _math.epsilon) {
    var lambda = from[0] < to[0] ? _math.pi : -_math.pi;
    phi = direction * lambda / 2;
    stream.point(-lambda, phi);
    stream.point(0, phi);
    stream.point(lambda, phi);
  } else {
    stream.point(to[0], to[1]);
  }
}
},{"./index.js":"node_modules/d3-geo/src/clip/index.js","../math.js":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/clip/circle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _cartesian = require("../cartesian.js");

var _circle = require("../circle.js");

var _math = require("../math.js");

var _pointEqual = _interopRequireDefault(require("../pointEqual.js"));

var _index = _interopRequireDefault(require("./index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(radius) {
  var cr = (0, _math.cos)(radius),
      delta = 6 * _math.radians,
      smallRadius = cr > 0,
      notHemisphere = (0, _math.abs)(cr) > _math.epsilon; // TODO optimise for this common case


  function interpolate(from, to, direction, stream) {
    (0, _circle.circleStream)(stream, radius, delta, direction, from, to);
  }

  function visible(lambda, phi) {
    return (0, _math.cos)(lambda) * (0, _math.cos)(phi) > cr;
  } // Takes a line and cuts into visible segments. Return values used for polygon
  // clipping: 0 - there were intersections or the line was empty; 1 - no
  // intersections 2 - there were intersections, and the first and last segments
  // should be rejoined.


  function clipLine(stream) {
    var point0, // previous point
    c0, // code for previous point
    v0, // visibility of previous point
    v00, // visibility of first point
    clean; // no intersections

    return {
      lineStart: function () {
        v00 = v0 = false;
        clean = 1;
      },
      point: function (lambda, phi) {
        var point1 = [lambda, phi],
            point2,
            v = visible(lambda, phi),
            c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? _math.pi : -_math.pi), phi) : 0;
        if (!point0 && (v00 = v0 = v)) stream.lineStart(); // Handle degeneracies.
        // TODO ignore if not clipping polygons.

        if (v !== v0) {
          point2 = intersect(point0, point1);

          if (!point2 || (0, _pointEqual.default)(point0, point2) || (0, _pointEqual.default)(point1, point2)) {
            point1[0] += _math.epsilon;
            point1[1] += _math.epsilon;
            v = visible(point1[0], point1[1]);
          }
        }

        if (v !== v0) {
          clean = 0;

          if (v) {
            // outside going in
            stream.lineStart();
            point2 = intersect(point1, point0);
            stream.point(point2[0], point2[1]);
          } else {
            // inside going out
            point2 = intersect(point0, point1);
            stream.point(point2[0], point2[1]);
            stream.lineEnd();
          }

          point0 = point2;
        } else if (notHemisphere && point0 && smallRadius ^ v) {
          var t; // If the codes for two points are different, or are both zero,
          // and there this segment intersects with the small circle.

          if (!(c & c0) && (t = intersect(point1, point0, true))) {
            clean = 0;

            if (smallRadius) {
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
            } else {
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
            }
          }
        }

        if (v && (!point0 || !(0, _pointEqual.default)(point0, point1))) {
          stream.point(point1[0], point1[1]);
        }

        point0 = point1, v0 = v, c0 = c;
      },
      lineEnd: function () {
        if (v0) stream.lineEnd();
        point0 = null;
      },
      // Rejoin first and last segments if there were intersections and the first
      // and last points were visible.
      clean: function () {
        return clean | (v00 && v0) << 1;
      }
    };
  } // Intersects the great circle between a and b with the clip circle.


  function intersect(a, b, two) {
    var pa = (0, _cartesian.cartesian)(a),
        pb = (0, _cartesian.cartesian)(b); // We have two planes, n1.p = d1 and n2.p = d2.
    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).

    var n1 = [1, 0, 0],
        // normal
    n2 = (0, _cartesian.cartesianCross)(pa, pb),
        n2n2 = (0, _cartesian.cartesianDot)(n2, n2),
        n1n2 = n2[0],
        // cartesianDot(n1, n2),
    determinant = n2n2 - n1n2 * n1n2; // Two polar points.

    if (!determinant) return !two && a;
    var c1 = cr * n2n2 / determinant,
        c2 = -cr * n1n2 / determinant,
        n1xn2 = (0, _cartesian.cartesianCross)(n1, n2),
        A = (0, _cartesian.cartesianScale)(n1, c1),
        B = (0, _cartesian.cartesianScale)(n2, c2);
    (0, _cartesian.cartesianAddInPlace)(A, B); // Solve |p(t)|^2 = 1.

    var u = n1xn2,
        w = (0, _cartesian.cartesianDot)(A, u),
        uu = (0, _cartesian.cartesianDot)(u, u),
        t2 = w * w - uu * ((0, _cartesian.cartesianDot)(A, A) - 1);
    if (t2 < 0) return;
    var t = (0, _math.sqrt)(t2),
        q = (0, _cartesian.cartesianScale)(u, (-w - t) / uu);
    (0, _cartesian.cartesianAddInPlace)(q, A);
    q = (0, _cartesian.spherical)(q);
    if (!two) return q; // Two intersection points.

    var lambda0 = a[0],
        lambda1 = b[0],
        phi0 = a[1],
        phi1 = b[1],
        z;
    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;

    var delta = lambda1 - lambda0,
        polar = (0, _math.abs)(delta - _math.pi) < _math.epsilon,
        meridian = polar || delta < _math.epsilon;

    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z; // Check that the first point is between a and b.

    if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < ((0, _math.abs)(q[0] - lambda0) < _math.epsilon ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > _math.pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
      var q1 = (0, _cartesian.cartesianScale)(u, (-w + t) / uu);
      (0, _cartesian.cartesianAddInPlace)(q1, A);
      return [q, (0, _cartesian.spherical)(q1)];
    }
  } // Generates a 4-bit vector representing the location of a point relative to
  // the small circle's bounding box.


  function code(lambda, phi) {
    var r = smallRadius ? radius : _math.pi - radius,
        code = 0;
    if (lambda < -r) code |= 1; // left
    else if (lambda > r) code |= 2; // right

    if (phi < -r) code |= 4; // below
    else if (phi > r) code |= 8; // above

    return code;
  }

  return (0, _index.default)(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-_math.pi, radius - _math.pi]);
}
},{"../cartesian.js":"node_modules/d3-geo/src/cartesian.js","../circle.js":"node_modules/d3-geo/src/circle.js","../math.js":"node_modules/d3-geo/src/math.js","../pointEqual.js":"node_modules/d3-geo/src/pointEqual.js","./index.js":"node_modules/d3-geo/src/clip/index.js"}],"node_modules/d3-geo/src/clip/line.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b, x0, y0, x1, y1) {
  var ax = a[0],
      ay = a[1],
      bx = b[0],
      by = b[1],
      t0 = 0,
      t1 = 1,
      dx = bx - ax,
      dy = by - ay,
      r;
  r = x0 - ax;
  if (!dx && r > 0) return;
  r /= dx;

  if (dx < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dx > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = x1 - ax;
  if (!dx && r < 0) return;
  r /= dx;

  if (dx < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dx > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  r = y0 - ay;
  if (!dy && r > 0) return;
  r /= dy;

  if (dy < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dy > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = y1 - ay;
  if (!dy && r < 0) return;
  r /= dy;

  if (dy < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dy > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
  return true;
}
},{}],"node_modules/d3-geo/src/clip/rectangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = clipRectangle;

var _math = require("../math.js");

var _buffer = _interopRequireDefault(require("./buffer.js"));

var _line = _interopRequireDefault(require("./line.js"));

var _rejoin = _interopRequireDefault(require("./rejoin.js"));

var _d3Array = require("d3-array");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var clipMax = 1e9,
    clipMin = -clipMax; // TODO Use d3-polygon’s polygonContains here for the ring check?
// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

function clipRectangle(x0, y0, x1, y1) {
  function visible(x, y) {
    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
  }

  function interpolate(from, to, direction, stream) {
    var a = 0,
        a1 = 0;

    if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0); while ((a = (a + direction + 4) % 4) !== a1);
    } else {
      stream.point(to[0], to[1]);
    }
  }

  function corner(p, direction) {
    return (0, _math.abs)(p[0] - x0) < _math.epsilon ? direction > 0 ? 0 : 3 : (0, _math.abs)(p[0] - x1) < _math.epsilon ? direction > 0 ? 2 : 1 : (0, _math.abs)(p[1] - y0) < _math.epsilon ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
  }

  function compareIntersection(a, b) {
    return comparePoint(a.x, b.x);
  }

  function comparePoint(a, b) {
    var ca = corner(a, 1),
        cb = corner(b, 1);
    return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
  }

  return function (stream) {
    var activeStream = stream,
        bufferStream = (0, _buffer.default)(),
        segments,
        polygon,
        ring,
        x__,
        y__,
        v__,
        // first point
    x_,
        y_,
        v_,
        // previous point
    first,
        clean;
    var clipStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: polygonStart,
      polygonEnd: polygonEnd
    };

    function point(x, y) {
      if (visible(x, y)) activeStream.point(x, y);
    }

    function polygonInside() {
      var winding = 0;

      for (var i = 0, n = polygon.length; i < n; ++i) {
        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];

          if (a1 <= y1) {
            if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding;
          } else {
            if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding;
          }
        }
      }

      return winding;
    } // Buffer geometry within a polygon and then clip it en masse.


    function polygonStart() {
      activeStream = bufferStream, segments = [], polygon = [], clean = true;
    }

    function polygonEnd() {
      var startInside = polygonInside(),
          cleanInside = clean && startInside,
          visible = (segments = (0, _d3Array.merge)(segments)).length;

      if (cleanInside || visible) {
        stream.polygonStart();

        if (cleanInside) {
          stream.lineStart();
          interpolate(null, null, 1, stream);
          stream.lineEnd();
        }

        if (visible) {
          (0, _rejoin.default)(segments, compareIntersection, startInside, interpolate, stream);
        }

        stream.polygonEnd();
      }

      activeStream = stream, segments = polygon = ring = null;
    }

    function lineStart() {
      clipStream.point = linePoint;
      if (polygon) polygon.push(ring = []);
      first = true;
      v_ = false;
      x_ = y_ = NaN;
    } // TODO rather than special-case polygons, simply handle them separately.
    // Ideally, coincident intersection points should be jittered to avoid
    // clipping issues.


    function lineEnd() {
      if (segments) {
        linePoint(x__, y__);
        if (v__ && v_) bufferStream.rejoin();
        segments.push(bufferStream.result());
      }

      clipStream.point = point;
      if (v_) activeStream.lineEnd();
    }

    function linePoint(x, y) {
      var v = visible(x, y);
      if (polygon) ring.push([x, y]);

      if (first) {
        x__ = x, y__ = y, v__ = v;
        first = false;

        if (v) {
          activeStream.lineStart();
          activeStream.point(x, y);
        }
      } else {
        if (v && v_) activeStream.point(x, y);else {
          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];

          if ((0, _line.default)(a, b, x0, y0, x1, y1)) {
            if (!v_) {
              activeStream.lineStart();
              activeStream.point(a[0], a[1]);
            }

            activeStream.point(b[0], b[1]);
            if (!v) activeStream.lineEnd();
            clean = false;
          } else if (v) {
            activeStream.lineStart();
            activeStream.point(x, y);
            clean = false;
          }
        }
      }

      x_ = x, y_ = y, v_ = v;
    }

    return clipStream;
  };
}
},{"../math.js":"node_modules/d3-geo/src/math.js","./buffer.js":"node_modules/d3-geo/src/clip/buffer.js","./line.js":"node_modules/d3-geo/src/clip/line.js","./rejoin.js":"node_modules/d3-geo/src/clip/rejoin.js","d3-array":"node_modules/d3-array/src/index.js"}],"node_modules/d3-geo/src/clip/extent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _rectangle = _interopRequireDefault(require("./rectangle.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var x0 = 0,
      y0 = 0,
      x1 = 960,
      y1 = 500,
      cache,
      cacheStream,
      clip;
  return clip = {
    stream: function (stream) {
      return cache && cacheStream === stream ? cache : cache = (0, _rectangle.default)(x0, y0, x1, y1)(cacheStream = stream);
    },
    extent: function (_) {
      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
    }
  };
}
},{"./rectangle.js":"node_modules/d3-geo/src/clip/rectangle.js"}],"node_modules/d3-geo/src/length.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _adder = _interopRequireDefault(require("./adder.js"));

var _math = require("./math.js");

var _noop = _interopRequireDefault(require("./noop.js"));

var _stream = _interopRequireDefault(require("./stream.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lengthSum = (0, _adder.default)(),
    lambda0,
    sinPhi0,
    cosPhi0;
var lengthStream = {
  sphere: _noop.default,
  point: _noop.default,
  lineStart: lengthLineStart,
  lineEnd: _noop.default,
  polygonStart: _noop.default,
  polygonEnd: _noop.default
};

function lengthLineStart() {
  lengthStream.point = lengthPointFirst;
  lengthStream.lineEnd = lengthLineEnd;
}

function lengthLineEnd() {
  lengthStream.point = lengthStream.lineEnd = _noop.default;
}

function lengthPointFirst(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  lambda0 = lambda, sinPhi0 = (0, _math.sin)(phi), cosPhi0 = (0, _math.cos)(phi);
  lengthStream.point = lengthPoint;
}

function lengthPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var sinPhi = (0, _math.sin)(phi),
      cosPhi = (0, _math.cos)(phi),
      delta = (0, _math.abs)(lambda - lambda0),
      cosDelta = (0, _math.cos)(delta),
      sinDelta = (0, _math.sin)(delta),
      x = cosPhi * sinDelta,
      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,
      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;
  lengthSum.add((0, _math.atan2)((0, _math.sqrt)(x * x + y * y), z));
  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;
}

function _default(object) {
  lengthSum.reset();
  (0, _stream.default)(object, lengthStream);
  return +lengthSum;
}
},{"./adder.js":"node_modules/d3-geo/src/adder.js","./math.js":"node_modules/d3-geo/src/math.js","./noop.js":"node_modules/d3-geo/src/noop.js","./stream.js":"node_modules/d3-geo/src/stream.js"}],"node_modules/d3-geo/src/distance.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _length = _interopRequireDefault(require("./length.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var coordinates = [null, null],
    object = {
  type: "LineString",
  coordinates: coordinates
};

function _default(a, b) {
  coordinates[0] = a;
  coordinates[1] = b;
  return (0, _length.default)(object);
}
},{"./length.js":"node_modules/d3-geo/src/length.js"}],"node_modules/d3-geo/src/contains.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _polygonContains = _interopRequireDefault(require("./polygonContains.js"));

var _distance = _interopRequireDefault(require("./distance.js"));

var _math = require("./math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var containsObjectType = {
  Feature: function (object, point) {
    return containsGeometry(object.geometry, point);
  },
  FeatureCollection: function (object, point) {
    var features = object.features,
        i = -1,
        n = features.length;

    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;

    return false;
  }
};
var containsGeometryType = {
  Sphere: function () {
    return true;
  },
  Point: function (object, point) {
    return containsPoint(object.coordinates, point);
  },
  MultiPoint: function (object, point) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) if (containsPoint(coordinates[i], point)) return true;

    return false;
  },
  LineString: function (object, point) {
    return containsLine(object.coordinates, point);
  },
  MultiLineString: function (object, point) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) if (containsLine(coordinates[i], point)) return true;

    return false;
  },
  Polygon: function (object, point) {
    return containsPolygon(object.coordinates, point);
  },
  MultiPolygon: function (object, point) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;

    return false;
  },
  GeometryCollection: function (object, point) {
    var geometries = object.geometries,
        i = -1,
        n = geometries.length;

    while (++i < n) if (containsGeometry(geometries[i], point)) return true;

    return false;
  }
};

function containsGeometry(geometry, point) {
  return geometry && containsGeometryType.hasOwnProperty(geometry.type) ? containsGeometryType[geometry.type](geometry, point) : false;
}

function containsPoint(coordinates, point) {
  return (0, _distance.default)(coordinates, point) === 0;
}

function containsLine(coordinates, point) {
  var ao, bo, ab;

  for (var i = 0, n = coordinates.length; i < n; i++) {
    bo = (0, _distance.default)(coordinates[i], point);
    if (bo === 0) return true;

    if (i > 0) {
      ab = (0, _distance.default)(coordinates[i], coordinates[i - 1]);
      if (ab > 0 && ao <= ab && bo <= ab && (ao + bo - ab) * (1 - Math.pow((ao - bo) / ab, 2)) < _math.epsilon2 * ab) return true;
    }

    ao = bo;
  }

  return false;
}

function containsPolygon(coordinates, point) {
  return !!(0, _polygonContains.default)(coordinates.map(ringRadians), pointRadians(point));
}

function ringRadians(ring) {
  return ring = ring.map(pointRadians), ring.pop(), ring;
}

function pointRadians(point) {
  return [point[0] * _math.radians, point[1] * _math.radians];
}

function _default(object, point) {
  return (object && containsObjectType.hasOwnProperty(object.type) ? containsObjectType[object.type] : containsGeometry)(object, point);
}
},{"./polygonContains.js":"node_modules/d3-geo/src/polygonContains.js","./distance.js":"node_modules/d3-geo/src/distance.js","./math.js":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/graticule.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = graticule;
exports.graticule10 = graticule10;

var _d3Array = require("d3-array");

var _math = require("./math.js");

function graticuleX(y0, y1, dy) {
  var y = (0, _d3Array.range)(y0, y1 - _math.epsilon, dy).concat(y1);
  return function (x) {
    return y.map(function (y) {
      return [x, y];
    });
  };
}

function graticuleY(x0, x1, dx) {
  var x = (0, _d3Array.range)(x0, x1 - _math.epsilon, dx).concat(x1);
  return function (y) {
    return x.map(function (x) {
      return [x, y];
    });
  };
}

function graticule() {
  var x1,
      x0,
      X1,
      X0,
      y1,
      y0,
      Y1,
      Y0,
      dx = 10,
      dy = dx,
      DX = 90,
      DY = 360,
      x,
      y,
      X,
      Y,
      precision = 2.5;

  function graticule() {
    return {
      type: "MultiLineString",
      coordinates: lines()
    };
  }

  function lines() {
    return (0, _d3Array.range)((0, _math.ceil)(X0 / DX) * DX, X1, DX).map(X).concat((0, _d3Array.range)((0, _math.ceil)(Y0 / DY) * DY, Y1, DY).map(Y)).concat((0, _d3Array.range)((0, _math.ceil)(x0 / dx) * dx, x1, dx).filter(function (x) {
      return (0, _math.abs)(x % DX) > _math.epsilon;
    }).map(x)).concat((0, _d3Array.range)((0, _math.ceil)(y0 / dy) * dy, y1, dy).filter(function (y) {
      return (0, _math.abs)(y % DY) > _math.epsilon;
    }).map(y));
  }

  graticule.lines = function () {
    return lines().map(function (coordinates) {
      return {
        type: "LineString",
        coordinates: coordinates
      };
    });
  };

  graticule.outline = function () {
    return {
      type: "Polygon",
      coordinates: [X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))]
    };
  };

  graticule.extent = function (_) {
    if (!arguments.length) return graticule.extentMinor();
    return graticule.extentMajor(_).extentMinor(_);
  };

  graticule.extentMajor = function (_) {
    if (!arguments.length) return [[X0, Y0], [X1, Y1]];
    X0 = +_[0][0], X1 = +_[1][0];
    Y0 = +_[0][1], Y1 = +_[1][1];
    if (X0 > X1) _ = X0, X0 = X1, X1 = _;
    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
    return graticule.precision(precision);
  };

  graticule.extentMinor = function (_) {
    if (!arguments.length) return [[x0, y0], [x1, y1]];
    x0 = +_[0][0], x1 = +_[1][0];
    y0 = +_[0][1], y1 = +_[1][1];
    if (x0 > x1) _ = x0, x0 = x1, x1 = _;
    if (y0 > y1) _ = y0, y0 = y1, y1 = _;
    return graticule.precision(precision);
  };

  graticule.step = function (_) {
    if (!arguments.length) return graticule.stepMinor();
    return graticule.stepMajor(_).stepMinor(_);
  };

  graticule.stepMajor = function (_) {
    if (!arguments.length) return [DX, DY];
    DX = +_[0], DY = +_[1];
    return graticule;
  };

  graticule.stepMinor = function (_) {
    if (!arguments.length) return [dx, dy];
    dx = +_[0], dy = +_[1];
    return graticule;
  };

  graticule.precision = function (_) {
    if (!arguments.length) return precision;
    precision = +_;
    x = graticuleX(y0, y1, 90);
    y = graticuleY(x0, x1, precision);
    X = graticuleX(Y0, Y1, 90);
    Y = graticuleY(X0, X1, precision);
    return graticule;
  };

  return graticule.extentMajor([[-180, -90 + _math.epsilon], [180, 90 - _math.epsilon]]).extentMinor([[-180, -80 - _math.epsilon], [180, 80 + _math.epsilon]]);
}

function graticule10() {
  return graticule()();
}
},{"d3-array":"node_modules/d3-array/src/index.js","./math.js":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/interpolate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _math = require("./math.js");

function _default(a, b) {
  var x0 = a[0] * _math.radians,
      y0 = a[1] * _math.radians,
      x1 = b[0] * _math.radians,
      y1 = b[1] * _math.radians,
      cy0 = (0, _math.cos)(y0),
      sy0 = (0, _math.sin)(y0),
      cy1 = (0, _math.cos)(y1),
      sy1 = (0, _math.sin)(y1),
      kx0 = cy0 * (0, _math.cos)(x0),
      ky0 = cy0 * (0, _math.sin)(x0),
      kx1 = cy1 * (0, _math.cos)(x1),
      ky1 = cy1 * (0, _math.sin)(x1),
      d = 2 * (0, _math.asin)((0, _math.sqrt)((0, _math.haversin)(y1 - y0) + cy0 * cy1 * (0, _math.haversin)(x1 - x0))),
      k = (0, _math.sin)(d);
  var interpolate = d ? function (t) {
    var B = (0, _math.sin)(t *= d) / k,
        A = (0, _math.sin)(d - t) / k,
        x = A * kx0 + B * kx1,
        y = A * ky0 + B * ky1,
        z = A * sy0 + B * sy1;
    return [(0, _math.atan2)(y, x) * _math.degrees, (0, _math.atan2)(z, (0, _math.sqrt)(x * x + y * y)) * _math.degrees];
  } : function () {
    return [x0 * _math.degrees, y0 * _math.degrees];
  };
  interpolate.distance = d;
  return interpolate;
}
},{"./math.js":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x;
}
},{}],"node_modules/d3-geo/src/path/area.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _adder = _interopRequireDefault(require("../adder.js"));

var _math = require("../math.js");

var _noop = _interopRequireDefault(require("../noop.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var areaSum = (0, _adder.default)(),
    areaRingSum = (0, _adder.default)(),
    x00,
    y00,
    x0,
    y0;
var areaStream = {
  point: _noop.default,
  lineStart: _noop.default,
  lineEnd: _noop.default,
  polygonStart: function () {
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function () {
    areaStream.lineStart = areaStream.lineEnd = areaStream.point = _noop.default;
    areaSum.add((0, _math.abs)(areaRingSum));
    areaRingSum.reset();
  },
  result: function () {
    var area = areaSum / 2;
    areaSum.reset();
    return area;
  }
};

function areaRingStart() {
  areaStream.point = areaPointFirst;
}

function areaPointFirst(x, y) {
  areaStream.point = areaPoint;
  x00 = x0 = x, y00 = y0 = y;
}

function areaPoint(x, y) {
  areaRingSum.add(y0 * x - x0 * y);
  x0 = x, y0 = y;
}

function areaRingEnd() {
  areaPoint(x00, y00);
}

var _default = areaStream;
exports.default = _default;
},{"../adder.js":"node_modules/d3-geo/src/adder.js","../math.js":"node_modules/d3-geo/src/math.js","../noop.js":"node_modules/d3-geo/src/noop.js"}],"node_modules/d3-geo/src/path/bounds.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _noop = _interopRequireDefault(require("../noop.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var x0 = Infinity,
    y0 = x0,
    x1 = -x0,
    y1 = x1;
var boundsStream = {
  point: boundsPoint,
  lineStart: _noop.default,
  lineEnd: _noop.default,
  polygonStart: _noop.default,
  polygonEnd: _noop.default,
  result: function () {
    var bounds = [[x0, y0], [x1, y1]];
    x1 = y1 = -(y0 = x0 = Infinity);
    return bounds;
  }
};

function boundsPoint(x, y) {
  if (x < x0) x0 = x;
  if (x > x1) x1 = x;
  if (y < y0) y0 = y;
  if (y > y1) y1 = y;
}

var _default = boundsStream;
exports.default = _default;
},{"../noop.js":"node_modules/d3-geo/src/noop.js"}],"node_modules/d3-geo/src/path/centroid.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math.js");

// TODO Enforce positive area for exterior, negative area for interior?
var X0 = 0,
    Y0 = 0,
    Z0 = 0,
    X1 = 0,
    Y1 = 0,
    Z1 = 0,
    X2 = 0,
    Y2 = 0,
    Z2 = 0,
    x00,
    y00,
    x0,
    y0;
var centroidStream = {
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function () {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function () {
    centroidStream.point = centroidPoint;
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  },
  result: function () {
    var centroid = Z2 ? [X2 / Z2, Y2 / Z2] : Z1 ? [X1 / Z1, Y1 / Z1] : Z0 ? [X0 / Z0, Y0 / Z0] : [NaN, NaN];
    X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
    return centroid;
  }
};

function centroidPoint(x, y) {
  X0 += x;
  Y0 += y;
  ++Z0;
}

function centroidLineStart() {
  centroidStream.point = centroidPointFirstLine;
}

function centroidPointFirstLine(x, y) {
  centroidStream.point = centroidPointLine;
  centroidPoint(x0 = x, y0 = y);
}

function centroidPointLine(x, y) {
  var dx = x - x0,
      dy = y - y0,
      z = (0, _math.sqrt)(dx * dx + dy * dy);
  X1 += z * (x0 + x) / 2;
  Y1 += z * (y0 + y) / 2;
  Z1 += z;
  centroidPoint(x0 = x, y0 = y);
}

function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}

function centroidRingStart() {
  centroidStream.point = centroidPointFirstRing;
}

function centroidRingEnd() {
  centroidPointRing(x00, y00);
}

function centroidPointFirstRing(x, y) {
  centroidStream.point = centroidPointRing;
  centroidPoint(x00 = x0 = x, y00 = y0 = y);
}

function centroidPointRing(x, y) {
  var dx = x - x0,
      dy = y - y0,
      z = (0, _math.sqrt)(dx * dx + dy * dy);
  X1 += z * (x0 + x) / 2;
  Y1 += z * (y0 + y) / 2;
  Z1 += z;
  z = y0 * x - x0 * y;
  X2 += z * (x0 + x);
  Y2 += z * (y0 + y);
  Z2 += z * 3;
  centroidPoint(x0 = x, y0 = y);
}

var _default = centroidStream;
exports.default = _default;
},{"../math.js":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/path/context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PathContext;

var _math = require("../math.js");

var _noop = _interopRequireDefault(require("../noop.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function PathContext(context) {
  this._context = context;
}

PathContext.prototype = {
  _radius: 4.5,
  pointRadius: function (_) {
    return this._radius = _, this;
  },
  polygonStart: function () {
    this._line = 0;
  },
  polygonEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line === 0) this._context.closePath();
    this._point = NaN;
  },
  point: function (x, y) {
    switch (this._point) {
      case 0:
        {
          this._context.moveTo(x, y);

          this._point = 1;
          break;
        }

      case 1:
        {
          this._context.lineTo(x, y);

          break;
        }

      default:
        {
          this._context.moveTo(x + this._radius, y);

          this._context.arc(x, y, this._radius, 0, _math.tau);

          break;
        }
    }
  },
  result: _noop.default
};
},{"../math.js":"node_modules/d3-geo/src/math.js","../noop.js":"node_modules/d3-geo/src/noop.js"}],"node_modules/d3-geo/src/path/measure.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _adder = _interopRequireDefault(require("../adder.js"));

var _math = require("../math.js");

var _noop = _interopRequireDefault(require("../noop.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lengthSum = (0, _adder.default)(),
    lengthRing,
    x00,
    y00,
    x0,
    y0;
var lengthStream = {
  point: _noop.default,
  lineStart: function () {
    lengthStream.point = lengthPointFirst;
  },
  lineEnd: function () {
    if (lengthRing) lengthPoint(x00, y00);
    lengthStream.point = _noop.default;
  },
  polygonStart: function () {
    lengthRing = true;
  },
  polygonEnd: function () {
    lengthRing = null;
  },
  result: function () {
    var length = +lengthSum;
    lengthSum.reset();
    return length;
  }
};

function lengthPointFirst(x, y) {
  lengthStream.point = lengthPoint;
  x00 = x0 = x, y00 = y0 = y;
}

function lengthPoint(x, y) {
  x0 -= x, y0 -= y;
  lengthSum.add((0, _math.sqrt)(x0 * x0 + y0 * y0));
  x0 = x, y0 = y;
}

var _default = lengthStream;
exports.default = _default;
},{"../adder.js":"node_modules/d3-geo/src/adder.js","../math.js":"node_modules/d3-geo/src/math.js","../noop.js":"node_modules/d3-geo/src/noop.js"}],"node_modules/d3-geo/src/path/string.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PathString;

function PathString() {
  this._string = [];
}

PathString.prototype = {
  _radius: 4.5,
  _circle: circle(4.5),
  pointRadius: function (_) {
    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
    return this;
  },
  polygonStart: function () {
    this._line = 0;
  },
  polygonEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line === 0) this._string.push("Z");
    this._point = NaN;
  },
  point: function (x, y) {
    switch (this._point) {
      case 0:
        {
          this._string.push("M", x, ",", y);

          this._point = 1;
          break;
        }

      case 1:
        {
          this._string.push("L", x, ",", y);

          break;
        }

      default:
        {
          if (this._circle == null) this._circle = circle(this._radius);

          this._string.push("M", x, ",", y, this._circle);

          break;
        }
    }
  },
  result: function () {
    if (this._string.length) {
      var result = this._string.join("");

      this._string = [];
      return result;
    } else {
      return null;
    }
  }
};

function circle(radius) {
  return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
}
},{}],"node_modules/d3-geo/src/path/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _identity = _interopRequireDefault(require("../identity.js"));

var _stream = _interopRequireDefault(require("../stream.js"));

var _area = _interopRequireDefault(require("./area.js"));

var _bounds = _interopRequireDefault(require("./bounds.js"));

var _centroid = _interopRequireDefault(require("./centroid.js"));

var _context = _interopRequireDefault(require("./context.js"));

var _measure = _interopRequireDefault(require("./measure.js"));

var _string = _interopRequireDefault(require("./string.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(projection, context) {
  var pointRadius = 4.5,
      projectionStream,
      contextStream;

  function path(object) {
    if (object) {
      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
      (0, _stream.default)(object, projectionStream(contextStream));
    }

    return contextStream.result();
  }

  path.area = function (object) {
    (0, _stream.default)(object, projectionStream(_area.default));
    return _area.default.result();
  };

  path.measure = function (object) {
    (0, _stream.default)(object, projectionStream(_measure.default));
    return _measure.default.result();
  };

  path.bounds = function (object) {
    (0, _stream.default)(object, projectionStream(_bounds.default));
    return _bounds.default.result();
  };

  path.centroid = function (object) {
    (0, _stream.default)(object, projectionStream(_centroid.default));
    return _centroid.default.result();
  };

  path.projection = function (_) {
    return arguments.length ? (projectionStream = _ == null ? (projection = null, _identity.default) : (projection = _).stream, path) : projection;
  };

  path.context = function (_) {
    if (!arguments.length) return context;
    contextStream = _ == null ? (context = null, new _string.default()) : new _context.default(context = _);
    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
    return path;
  };

  path.pointRadius = function (_) {
    if (!arguments.length) return pointRadius;
    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
    return path;
  };

  return path.projection(projection).context(context);
}
},{"../identity.js":"node_modules/d3-geo/src/identity.js","../stream.js":"node_modules/d3-geo/src/stream.js","./area.js":"node_modules/d3-geo/src/path/area.js","./bounds.js":"node_modules/d3-geo/src/path/bounds.js","./centroid.js":"node_modules/d3-geo/src/path/centroid.js","./context.js":"node_modules/d3-geo/src/path/context.js","./measure.js":"node_modules/d3-geo/src/path/measure.js","./string.js":"node_modules/d3-geo/src/path/string.js"}],"node_modules/d3-geo/src/transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.transformer = transformer;

function _default(methods) {
  return {
    stream: transformer(methods)
  };
}

function transformer(methods) {
  return function (stream) {
    var s = new TransformStream();

    for (var key in methods) s[key] = methods[key];

    s.stream = stream;
    return s;
  };
}

function TransformStream() {}

TransformStream.prototype = {
  constructor: TransformStream,
  point: function (x, y) {
    this.stream.point(x, y);
  },
  sphere: function () {
    this.stream.sphere();
  },
  lineStart: function () {
    this.stream.lineStart();
  },
  lineEnd: function () {
    this.stream.lineEnd();
  },
  polygonStart: function () {
    this.stream.polygonStart();
  },
  polygonEnd: function () {
    this.stream.polygonEnd();
  }
};
},{}],"node_modules/d3-geo/src/projection/fit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fitExtent = fitExtent;
exports.fitSize = fitSize;
exports.fitWidth = fitWidth;
exports.fitHeight = fitHeight;

var _stream = _interopRequireDefault(require("../stream.js"));

var _bounds = _interopRequireDefault(require("../path/bounds.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function fit(projection, fitBounds, object) {
  var clip = projection.clipExtent && projection.clipExtent();
  projection.scale(150).translate([0, 0]);
  if (clip != null) projection.clipExtent(null);
  (0, _stream.default)(object, projection.stream(_bounds.default));
  fitBounds(_bounds.default.result());
  if (clip != null) projection.clipExtent(clip);
  return projection;
}

function fitExtent(projection, extent, object) {
  return fit(projection, function (b) {
    var w = extent[1][0] - extent[0][0],
        h = extent[1][1] - extent[0][1],
        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
    projection.scale(150 * k).translate([x, y]);
  }, object);
}

function fitSize(projection, size, object) {
  return fitExtent(projection, [[0, 0], size], object);
}

function fitWidth(projection, width, object) {
  return fit(projection, function (b) {
    var w = +width,
        k = w / (b[1][0] - b[0][0]),
        x = (w - k * (b[1][0] + b[0][0])) / 2,
        y = -k * b[0][1];
    projection.scale(150 * k).translate([x, y]);
  }, object);
}

function fitHeight(projection, height, object) {
  return fit(projection, function (b) {
    var h = +height,
        k = h / (b[1][1] - b[0][1]),
        x = -k * b[0][0],
        y = (h - k * (b[1][1] + b[0][1])) / 2;
    projection.scale(150 * k).translate([x, y]);
  }, object);
}
},{"../stream.js":"node_modules/d3-geo/src/stream.js","../path/bounds.js":"node_modules/d3-geo/src/path/bounds.js"}],"node_modules/d3-geo/src/projection/resample.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _cartesian = require("../cartesian.js");

var _math = require("../math.js");

var _transform = require("../transform.js");

var maxDepth = 16,
    // maximum depth of subdivision
cosMinDistance = (0, _math.cos)(30 * _math.radians); // cos(minimum angular distance)

function _default(project, delta2) {
  return +delta2 ? resample(project, delta2) : resampleNone(project);
}

function resampleNone(project) {
  return (0, _transform.transformer)({
    point: function (x, y) {
      x = project(x, y);
      this.stream.point(x[0], x[1]);
    }
  });
}

function resample(project, delta2) {
  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
    var dx = x1 - x0,
        dy = y1 - y0,
        d2 = dx * dx + dy * dy;

    if (d2 > 4 * delta2 && depth--) {
      var a = a0 + a1,
          b = b0 + b1,
          c = c0 + c1,
          m = (0, _math.sqrt)(a * a + b * b + c * c),
          phi2 = (0, _math.asin)(c /= m),
          lambda2 = (0, _math.abs)((0, _math.abs)(c) - 1) < _math.epsilon || (0, _math.abs)(lambda0 - lambda1) < _math.epsilon ? (lambda0 + lambda1) / 2 : (0, _math.atan2)(b, a),
          p = project(lambda2, phi2),
          x2 = p[0],
          y2 = p[1],
          dx2 = x2 - x0,
          dy2 = y2 - y0,
          dz = dy * dx2 - dx * dy2;

      if (dz * dz / d2 > delta2 // perpendicular projected distance
      || (0, _math.abs)((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
      || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
        // angular distance
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
        stream.point(x2, y2);
        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
      }
    }
  }

  return function (stream) {
    var lambda00, x00, y00, a00, b00, c00, // first point
    lambda0, x0, y0, a0, b0, c0; // previous point

    var resampleStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function () {
        stream.polygonStart();
        resampleStream.lineStart = ringStart;
      },
      polygonEnd: function () {
        stream.polygonEnd();
        resampleStream.lineStart = lineStart;
      }
    };

    function point(x, y) {
      x = project(x, y);
      stream.point(x[0], x[1]);
    }

    function lineStart() {
      x0 = NaN;
      resampleStream.point = linePoint;
      stream.lineStart();
    }

    function linePoint(lambda, phi) {
      var c = (0, _cartesian.cartesian)([lambda, phi]),
          p = project(lambda, phi);
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
      stream.point(x0, y0);
    }

    function lineEnd() {
      resampleStream.point = point;
      stream.lineEnd();
    }

    function ringStart() {
      lineStart();
      resampleStream.point = ringPoint;
      resampleStream.lineEnd = ringEnd;
    }

    function ringPoint(lambda, phi) {
      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
      resampleStream.point = linePoint;
    }

    function ringEnd() {
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
      resampleStream.lineEnd = lineEnd;
      lineEnd();
    }

    return resampleStream;
  };
}
},{"../cartesian.js":"node_modules/d3-geo/src/cartesian.js","../math.js":"node_modules/d3-geo/src/math.js","../transform.js":"node_modules/d3-geo/src/transform.js"}],"node_modules/d3-geo/src/projection/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = projection;
exports.projectionMutator = projectionMutator;

var _antimeridian = _interopRequireDefault(require("../clip/antimeridian.js"));

var _circle = _interopRequireDefault(require("../clip/circle.js"));

var _rectangle = _interopRequireDefault(require("../clip/rectangle.js"));

var _compose = _interopRequireDefault(require("../compose.js"));

var _identity = _interopRequireDefault(require("../identity.js"));

var _math = require("../math.js");

var _rotation = require("../rotation.js");

var _transform = require("../transform.js");

var _fit = require("./fit.js");

var _resample = _interopRequireDefault(require("./resample.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var transformRadians = (0, _transform.transformer)({
  point: function (x, y) {
    this.stream.point(x * _math.radians, y * _math.radians);
  }
});

function transformRotate(rotate) {
  return (0, _transform.transformer)({
    point: function (x, y) {
      var r = rotate(x, y);
      return this.stream.point(r[0], r[1]);
    }
  });
}

function scaleTranslate(k, dx, dy) {
  function transform(x, y) {
    return [dx + k * x, dy - k * y];
  }

  transform.invert = function (x, y) {
    return [(x - dx) / k, (dy - y) / k];
  };

  return transform;
}

function scaleTranslateRotate(k, dx, dy, alpha) {
  var cosAlpha = (0, _math.cos)(alpha),
      sinAlpha = (0, _math.sin)(alpha),
      a = cosAlpha * k,
      b = sinAlpha * k,
      ai = cosAlpha / k,
      bi = sinAlpha / k,
      ci = (sinAlpha * dy - cosAlpha * dx) / k,
      fi = (sinAlpha * dx + cosAlpha * dy) / k;

  function transform(x, y) {
    return [a * x - b * y + dx, dy - b * x - a * y];
  }

  transform.invert = function (x, y) {
    return [ai * x - bi * y + ci, fi - bi * x - ai * y];
  };

  return transform;
}

function projection(project) {
  return projectionMutator(function () {
    return project;
  })();
}

function projectionMutator(projectAt) {
  var project,
      k = 150,
      // scale
  x = 480,
      y = 250,
      // translate
  lambda = 0,
      phi = 0,
      // center
  deltaLambda = 0,
      deltaPhi = 0,
      deltaGamma = 0,
      rotate,
      // pre-rotate
  alpha = 0,
      // post-rotate
  theta = null,
      preclip = _antimeridian.default,
      // pre-clip angle
  x0 = null,
      y0,
      x1,
      y1,
      postclip = _identity.default,
      // post-clip extent
  delta2 = 0.5,
      // precision
  projectResample,
      projectTransform,
      projectRotateTransform,
      cache,
      cacheStream;

  function projection(point) {
    return projectRotateTransform(point[0] * _math.radians, point[1] * _math.radians);
  }

  function invert(point) {
    point = projectRotateTransform.invert(point[0], point[1]);
    return point && [point[0] * _math.degrees, point[1] * _math.degrees];
  }

  projection.stream = function (stream) {
    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
  };

  projection.preclip = function (_) {
    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;
  };

  projection.postclip = function (_) {
    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
  };

  projection.clipAngle = function (_) {
    return arguments.length ? (preclip = +_ ? (0, _circle.default)(theta = _ * _math.radians) : (theta = null, _antimeridian.default), reset()) : theta * _math.degrees;
  };

  projection.clipExtent = function (_) {
    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, _identity.default) : (0, _rectangle.default)(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  projection.scale = function (_) {
    return arguments.length ? (k = +_, recenter()) : k;
  };

  projection.translate = function (_) {
    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
  };

  projection.center = function (_) {
    return arguments.length ? (lambda = _[0] % 360 * _math.radians, phi = _[1] % 360 * _math.radians, recenter()) : [lambda * _math.degrees, phi * _math.degrees];
  };

  projection.rotate = function (_) {
    return arguments.length ? (deltaLambda = _[0] % 360 * _math.radians, deltaPhi = _[1] % 360 * _math.radians, deltaGamma = _.length > 2 ? _[2] % 360 * _math.radians : 0, recenter()) : [deltaLambda * _math.degrees, deltaPhi * _math.degrees, deltaGamma * _math.degrees];
  };

  projection.angle = function (_) {
    return arguments.length ? (alpha = _ % 360 * _math.radians, recenter()) : alpha * _math.degrees;
  };

  projection.precision = function (_) {
    return arguments.length ? (projectResample = (0, _resample.default)(projectTransform, delta2 = _ * _), reset()) : (0, _math.sqrt)(delta2);
  };

  projection.fitExtent = function (extent, object) {
    return (0, _fit.fitExtent)(projection, extent, object);
  };

  projection.fitSize = function (size, object) {
    return (0, _fit.fitSize)(projection, size, object);
  };

  projection.fitWidth = function (width, object) {
    return (0, _fit.fitWidth)(projection, width, object);
  };

  projection.fitHeight = function (height, object) {
    return (0, _fit.fitHeight)(projection, height, object);
  };

  function recenter() {
    var center = scaleTranslateRotate(k, 0, 0, alpha).apply(null, project(lambda, phi)),
        transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], alpha);
    rotate = (0, _rotation.rotateRadians)(deltaLambda, deltaPhi, deltaGamma);
    projectTransform = (0, _compose.default)(project, transform);
    projectRotateTransform = (0, _compose.default)(rotate, projectTransform);
    projectResample = (0, _resample.default)(projectTransform, delta2);
    return reset();
  }

  function reset() {
    cache = cacheStream = null;
    return projection;
  }

  return function () {
    project = projectAt.apply(this, arguments);
    projection.invert = project.invert && invert;
    return recenter();
  };
}
},{"../clip/antimeridian.js":"node_modules/d3-geo/src/clip/antimeridian.js","../clip/circle.js":"node_modules/d3-geo/src/clip/circle.js","../clip/rectangle.js":"node_modules/d3-geo/src/clip/rectangle.js","../compose.js":"node_modules/d3-geo/src/compose.js","../identity.js":"node_modules/d3-geo/src/identity.js","../math.js":"node_modules/d3-geo/src/math.js","../rotation.js":"node_modules/d3-geo/src/rotation.js","../transform.js":"node_modules/d3-geo/src/transform.js","./fit.js":"node_modules/d3-geo/src/projection/fit.js","./resample.js":"node_modules/d3-geo/src/projection/resample.js"}],"node_modules/d3-geo/src/projection/conic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conicProjection = conicProjection;

var _math = require("../math.js");

var _index = require("./index.js");

function conicProjection(projectAt) {
  var phi0 = 0,
      phi1 = _math.pi / 3,
      m = (0, _index.projectionMutator)(projectAt),
      p = m(phi0, phi1);

  p.parallels = function (_) {
    return arguments.length ? m(phi0 = _[0] * _math.radians, phi1 = _[1] * _math.radians) : [phi0 * _math.degrees, phi1 * _math.degrees];
  };

  return p;
}
},{"../math.js":"node_modules/d3-geo/src/math.js","./index.js":"node_modules/d3-geo/src/projection/index.js"}],"node_modules/d3-geo/src/projection/cylindricalEqualArea.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cylindricalEqualAreaRaw = cylindricalEqualAreaRaw;

var _math = require("../math.js");

function cylindricalEqualAreaRaw(phi0) {
  var cosPhi0 = (0, _math.cos)(phi0);

  function forward(lambda, phi) {
    return [lambda * cosPhi0, (0, _math.sin)(phi) / cosPhi0];
  }

  forward.invert = function (x, y) {
    return [x / cosPhi0, (0, _math.asin)(y * cosPhi0)];
  };

  return forward;
}
},{"../math.js":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/projection/conicEqualArea.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conicEqualAreaRaw = conicEqualAreaRaw;
exports.default = _default;

var _math = require("../math.js");

var _conic = require("./conic.js");

var _cylindricalEqualArea = require("./cylindricalEqualArea.js");

function conicEqualAreaRaw(y0, y1) {
  var sy0 = (0, _math.sin)(y0),
      n = (sy0 + (0, _math.sin)(y1)) / 2; // Are the parallels symmetrical around the Equator?

  if ((0, _math.abs)(n) < _math.epsilon) return (0, _cylindricalEqualArea.cylindricalEqualAreaRaw)(y0);
  var c = 1 + sy0 * (2 * n - sy0),
      r0 = (0, _math.sqrt)(c) / n;

  function project(x, y) {
    var r = (0, _math.sqrt)(c - 2 * n * (0, _math.sin)(y)) / n;
    return [r * (0, _math.sin)(x *= n), r0 - r * (0, _math.cos)(x)];
  }

  project.invert = function (x, y) {
    var r0y = r0 - y;
    return [(0, _math.atan2)(x, (0, _math.abs)(r0y)) / n * (0, _math.sign)(r0y), (0, _math.asin)((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
  };

  return project;
}

function _default() {
  return (0, _conic.conicProjection)(conicEqualAreaRaw).scale(155.424).center([0, 33.6442]);
}
},{"../math.js":"node_modules/d3-geo/src/math.js","./conic.js":"node_modules/d3-geo/src/projection/conic.js","./cylindricalEqualArea.js":"node_modules/d3-geo/src/projection/cylindricalEqualArea.js"}],"node_modules/d3-geo/src/projection/albers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _conicEqualArea = _interopRequireDefault(require("./conicEqualArea.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return (0, _conicEqualArea.default)().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-0.6, 38.7]);
}
},{"./conicEqualArea.js":"node_modules/d3-geo/src/projection/conicEqualArea.js"}],"node_modules/d3-geo/src/projection/albersUsa.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _math = require("../math.js");

var _albers = _interopRequireDefault(require("./albers.js"));

var _conicEqualArea = _interopRequireDefault(require("./conicEqualArea.js"));

var _fit = require("./fit.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// The projections must have mutually exclusive clip regions on the sphere,
// as this will avoid emitting interleaving lines and polygons.
function multiplex(streams) {
  var n = streams.length;
  return {
    point: function (x, y) {
      var i = -1;

      while (++i < n) streams[i].point(x, y);
    },
    sphere: function () {
      var i = -1;

      while (++i < n) streams[i].sphere();
    },
    lineStart: function () {
      var i = -1;

      while (++i < n) streams[i].lineStart();
    },
    lineEnd: function () {
      var i = -1;

      while (++i < n) streams[i].lineEnd();
    },
    polygonStart: function () {
      var i = -1;

      while (++i < n) streams[i].polygonStart();
    },
    polygonEnd: function () {
      var i = -1;

      while (++i < n) streams[i].polygonEnd();
    }
  };
} // A composite projection for the United States, configured by default for
// 960×500. The projection also works quite well at 960×600 if you change the
// scale to 1285 and adjust the translate accordingly. The set of standard
// parallels for each region comes from USGS, which is published here:
// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers


function _default() {
  var cache,
      cacheStream,
      lower48 = (0, _albers.default)(),
      lower48Point,
      alaska = (0, _conicEqualArea.default)().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]),
      alaskaPoint,
      // EPSG:3338
  hawaii = (0, _conicEqualArea.default)().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]),
      hawaiiPoint,
      // ESRI:102007
  point,
      pointStream = {
    point: function (x, y) {
      point = [x, y];
    }
  };

  function albersUsa(coordinates) {
    var x = coordinates[0],
        y = coordinates[1];
    return point = null, (lower48Point.point(x, y), point) || (alaskaPoint.point(x, y), point) || (hawaiiPoint.point(x, y), point);
  }

  albersUsa.invert = function (coordinates) {
    var k = lower48.scale(),
        t = lower48.translate(),
        x = (coordinates[0] - t[0]) / k,
        y = (coordinates[1] - t[1]) / k;
    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates);
  };

  albersUsa.stream = function (stream) {
    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
  };

  albersUsa.precision = function (_) {
    if (!arguments.length) return lower48.precision();
    lower48.precision(_), alaska.precision(_), hawaii.precision(_);
    return reset();
  };

  albersUsa.scale = function (_) {
    if (!arguments.length) return lower48.scale();
    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
    return albersUsa.translate(lower48.translate());
  };

  albersUsa.translate = function (_) {
    if (!arguments.length) return lower48.translate();
    var k = lower48.scale(),
        x = +_[0],
        y = +_[1];
    lower48Point = lower48.translate(_).clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]]).stream(pointStream);
    alaskaPoint = alaska.translate([x - 0.307 * k, y + 0.201 * k]).clipExtent([[x - 0.425 * k + _math.epsilon, y + 0.120 * k + _math.epsilon], [x - 0.214 * k - _math.epsilon, y + 0.234 * k - _math.epsilon]]).stream(pointStream);
    hawaiiPoint = hawaii.translate([x - 0.205 * k, y + 0.212 * k]).clipExtent([[x - 0.214 * k + _math.epsilon, y + 0.166 * k + _math.epsilon], [x - 0.115 * k - _math.epsilon, y + 0.234 * k - _math.epsilon]]).stream(pointStream);
    return reset();
  };

  albersUsa.fitExtent = function (extent, object) {
    return (0, _fit.fitExtent)(albersUsa, extent, object);
  };

  albersUsa.fitSize = function (size, object) {
    return (0, _fit.fitSize)(albersUsa, size, object);
  };

  albersUsa.fitWidth = function (width, object) {
    return (0, _fit.fitWidth)(albersUsa, width, object);
  };

  albersUsa.fitHeight = function (height, object) {
    return (0, _fit.fitHeight)(albersUsa, height, object);
  };

  function reset() {
    cache = cacheStream = null;
    return albersUsa;
  }

  return albersUsa.scale(1070);
}
},{"../math.js":"node_modules/d3-geo/src/math.js","./albers.js":"node_modules/d3-geo/src/projection/albers.js","./conicEqualArea.js":"node_modules/d3-geo/src/projection/conicEqualArea.js","./fit.js":"node_modules/d3-geo/src/projection/fit.js"}],"node_modules/d3-geo/src/projection/azimuthal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.azimuthalRaw = azimuthalRaw;
exports.azimuthalInvert = azimuthalInvert;

var _math = require("../math.js");

function azimuthalRaw(scale) {
  return function (x, y) {
    var cx = (0, _math.cos)(x),
        cy = (0, _math.cos)(y),
        k = scale(cx * cy);
    return [k * cy * (0, _math.sin)(x), k * (0, _math.sin)(y)];
  };
}

function azimuthalInvert(angle) {
  return function (x, y) {
    var z = (0, _math.sqrt)(x * x + y * y),
        c = angle(z),
        sc = (0, _math.sin)(c),
        cc = (0, _math.cos)(c);
    return [(0, _math.atan2)(x * sc, z * cc), (0, _math.asin)(z && y * sc / z)];
  };
}
},{"../math.js":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/projection/azimuthalEqualArea.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.azimuthalEqualAreaRaw = void 0;

var _math = require("../math.js");

var _azimuthal = require("./azimuthal.js");

var _index = _interopRequireDefault(require("./index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var azimuthalEqualAreaRaw = (0, _azimuthal.azimuthalRaw)(function (cxcy) {
  return (0, _math.sqrt)(2 / (1 + cxcy));
});
exports.azimuthalEqualAreaRaw = azimuthalEqualAreaRaw;
azimuthalEqualAreaRaw.invert = (0, _azimuthal.azimuthalInvert)(function (z) {
  return 2 * (0, _math.asin)(z / 2);
});

function _default() {
  return (0, _index.default)(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180 - 1e-3);
}
},{"../math.js":"node_modules/d3-geo/src/math.js","./azimuthal.js":"node_modules/d3-geo/src/projection/azimuthal.js","./index.js":"node_modules/d3-geo/src/projection/index.js"}],"node_modules/d3-geo/src/projection/azimuthalEquidistant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.azimuthalEquidistantRaw = void 0;

var _math = require("../math.js");

var _azimuthal = require("./azimuthal.js");

var _index = _interopRequireDefault(require("./index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var azimuthalEquidistantRaw = (0, _azimuthal.azimuthalRaw)(function (c) {
  return (c = (0, _math.acos)(c)) && c / (0, _math.sin)(c);
});
exports.azimuthalEquidistantRaw = azimuthalEquidistantRaw;
azimuthalEquidistantRaw.invert = (0, _azimuthal.azimuthalInvert)(function (z) {
  return z;
});

function _default() {
  return (0, _index.default)(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180 - 1e-3);
}
},{"../math.js":"node_modules/d3-geo/src/math.js","./azimuthal.js":"node_modules/d3-geo/src/projection/azimuthal.js","./index.js":"node_modules/d3-geo/src/projection/index.js"}],"node_modules/d3-geo/src/projection/mercator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mercatorRaw = mercatorRaw;
exports.default = _default;
exports.mercatorProjection = mercatorProjection;

var _math = require("../math.js");

var _rotation = _interopRequireDefault(require("../rotation.js"));

var _index = _interopRequireDefault(require("./index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function mercatorRaw(lambda, phi) {
  return [lambda, (0, _math.log)((0, _math.tan)((_math.halfPi + phi) / 2))];
}

mercatorRaw.invert = function (x, y) {
  return [x, 2 * (0, _math.atan)((0, _math.exp)(y)) - _math.halfPi];
};

function _default() {
  return mercatorProjection(mercatorRaw).scale(961 / _math.tau);
}

function mercatorProjection(project) {
  var m = (0, _index.default)(project),
      center = m.center,
      scale = m.scale,
      translate = m.translate,
      clipExtent = m.clipExtent,
      x0 = null,
      y0,
      x1,
      y1; // clip extent

  m.scale = function (_) {
    return arguments.length ? (scale(_), reclip()) : scale();
  };

  m.translate = function (_) {
    return arguments.length ? (translate(_), reclip()) : translate();
  };

  m.center = function (_) {
    return arguments.length ? (center(_), reclip()) : center();
  };

  m.clipExtent = function (_) {
    return arguments.length ? (_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  function reclip() {
    var k = _math.pi * scale(),
        t = m((0, _rotation.default)(m.rotate()).invert([0, 0]));
    return clipExtent(x0 == null ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]] : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
  }

  return reclip();
}
},{"../math.js":"node_modules/d3-geo/src/math.js","../rotation.js":"node_modules/d3-geo/src/rotation.js","./index.js":"node_modules/d3-geo/src/projection/index.js"}],"node_modules/d3-geo/src/projection/conicConformal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conicConformalRaw = conicConformalRaw;
exports.default = _default;

var _math = require("../math.js");

var _conic = require("./conic.js");

var _mercator = require("./mercator.js");

function tany(y) {
  return (0, _math.tan)((_math.halfPi + y) / 2);
}

function conicConformalRaw(y0, y1) {
  var cy0 = (0, _math.cos)(y0),
      n = y0 === y1 ? (0, _math.sin)(y0) : (0, _math.log)(cy0 / (0, _math.cos)(y1)) / (0, _math.log)(tany(y1) / tany(y0)),
      f = cy0 * (0, _math.pow)(tany(y0), n) / n;
  if (!n) return _mercator.mercatorRaw;

  function project(x, y) {
    if (f > 0) {
      if (y < -_math.halfPi + _math.epsilon) y = -_math.halfPi + _math.epsilon;
    } else {
      if (y > _math.halfPi - _math.epsilon) y = _math.halfPi - _math.epsilon;
    }

    var r = f / (0, _math.pow)(tany(y), n);
    return [r * (0, _math.sin)(n * x), f - r * (0, _math.cos)(n * x)];
  }

  project.invert = function (x, y) {
    var fy = f - y,
        r = (0, _math.sign)(n) * (0, _math.sqrt)(x * x + fy * fy);
    return [(0, _math.atan2)(x, (0, _math.abs)(fy)) / n * (0, _math.sign)(fy), 2 * (0, _math.atan)((0, _math.pow)(f / r, 1 / n)) - _math.halfPi];
  };

  return project;
}

function _default() {
  return (0, _conic.conicProjection)(conicConformalRaw).scale(109.5).parallels([30, 30]);
}
},{"../math.js":"node_modules/d3-geo/src/math.js","./conic.js":"node_modules/d3-geo/src/projection/conic.js","./mercator.js":"node_modules/d3-geo/src/projection/mercator.js"}],"node_modules/d3-geo/src/projection/equirectangular.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.equirectangularRaw = equirectangularRaw;
exports.default = _default;

var _index = _interopRequireDefault(require("./index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function equirectangularRaw(lambda, phi) {
  return [lambda, phi];
}

equirectangularRaw.invert = equirectangularRaw;

function _default() {
  return (0, _index.default)(equirectangularRaw).scale(152.63);
}
},{"./index.js":"node_modules/d3-geo/src/projection/index.js"}],"node_modules/d3-geo/src/projection/conicEquidistant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conicEquidistantRaw = conicEquidistantRaw;
exports.default = _default;

var _math = require("../math.js");

var _conic = require("./conic.js");

var _equirectangular = require("./equirectangular.js");

function conicEquidistantRaw(y0, y1) {
  var cy0 = (0, _math.cos)(y0),
      n = y0 === y1 ? (0, _math.sin)(y0) : (cy0 - (0, _math.cos)(y1)) / (y1 - y0),
      g = cy0 / n + y0;
  if ((0, _math.abs)(n) < _math.epsilon) return _equirectangular.equirectangularRaw;

  function project(x, y) {
    var gy = g - y,
        nx = n * x;
    return [gy * (0, _math.sin)(nx), g - gy * (0, _math.cos)(nx)];
  }

  project.invert = function (x, y) {
    var gy = g - y;
    return [(0, _math.atan2)(x, (0, _math.abs)(gy)) / n * (0, _math.sign)(gy), g - (0, _math.sign)(n) * (0, _math.sqrt)(x * x + gy * gy)];
  };

  return project;
}

function _default() {
  return (0, _conic.conicProjection)(conicEquidistantRaw).scale(131.154).center([0, 13.9389]);
}
},{"../math.js":"node_modules/d3-geo/src/math.js","./conic.js":"node_modules/d3-geo/src/projection/conic.js","./equirectangular.js":"node_modules/d3-geo/src/projection/equirectangular.js"}],"node_modules/d3-geo/src/projection/equalEarth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.equalEarthRaw = equalEarthRaw;
exports.default = _default;

var _index = _interopRequireDefault(require("./index.js"));

var _math = require("../math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var A1 = 1.340264,
    A2 = -0.081106,
    A3 = 0.000893,
    A4 = 0.003796,
    M = (0, _math.sqrt)(3) / 2,
    iterations = 12;

function equalEarthRaw(lambda, phi) {
  var l = (0, _math.asin)(M * (0, _math.sin)(phi)),
      l2 = l * l,
      l6 = l2 * l2 * l2;
  return [lambda * (0, _math.cos)(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))), l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))];
}

equalEarthRaw.invert = function (x, y) {
  var l = y,
      l2 = l * l,
      l6 = l2 * l2 * l2;

  for (var i = 0, delta, fy, fpy; i < iterations; ++i) {
    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;
    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);
    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;
    if ((0, _math.abs)(delta) < _math.epsilon2) break;
  }

  return [M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / (0, _math.cos)(l), (0, _math.asin)((0, _math.sin)(l) / M)];
};

function _default() {
  return (0, _index.default)(equalEarthRaw).scale(177.158);
}
},{"./index.js":"node_modules/d3-geo/src/projection/index.js","../math.js":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/projection/gnomonic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gnomonicRaw = gnomonicRaw;
exports.default = _default;

var _math = require("../math.js");

var _azimuthal = require("./azimuthal.js");

var _index = _interopRequireDefault(require("./index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function gnomonicRaw(x, y) {
  var cy = (0, _math.cos)(y),
      k = (0, _math.cos)(x) * cy;
  return [cy * (0, _math.sin)(x) / k, (0, _math.sin)(y) / k];
}

gnomonicRaw.invert = (0, _azimuthal.azimuthalInvert)(_math.atan);

function _default() {
  return (0, _index.default)(gnomonicRaw).scale(144.049).clipAngle(60);
}
},{"../math.js":"node_modules/d3-geo/src/math.js","./azimuthal.js":"node_modules/d3-geo/src/projection/azimuthal.js","./index.js":"node_modules/d3-geo/src/projection/index.js"}],"node_modules/d3-geo/src/projection/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _rectangle = _interopRequireDefault(require("../clip/rectangle.js"));

var _identity = _interopRequireDefault(require("../identity.js"));

var _transform = require("../transform.js");

var _fit = require("./fit.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function scaleTranslate(kx, ky, tx, ty) {
  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? _identity.default : (0, _transform.transformer)({
    point: function (x, y) {
      this.stream.point(x * kx + tx, y * ky + ty);
    }
  });
}

function _default() {
  var k = 1,
      tx = 0,
      ty = 0,
      sx = 1,
      sy = 1,
      transform = _identity.default,
      // scale, translate and reflect
  x0 = null,
      y0,
      x1,
      y1,
      // clip extent
  postclip = _identity.default,
      cache,
      cacheStream,
      projection;

  function reset() {
    cache = cacheStream = null;
    return projection;
  }

  return projection = {
    stream: function (stream) {
      return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));
    },
    postclip: function (_) {
      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
    },
    clipExtent: function (_) {
      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, _identity.default) : (0, _rectangle.default)(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
    },
    scale: function (_) {
      return arguments.length ? (transform = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;
    },
    translate: function (_) {
      return arguments.length ? (transform = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];
    },
    reflectX: function (_) {
      return arguments.length ? (transform = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;
    },
    reflectY: function (_) {
      return arguments.length ? (transform = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;
    },
    fitExtent: function (extent, object) {
      return (0, _fit.fitExtent)(projection, extent, object);
    },
    fitSize: function (size, object) {
      return (0, _fit.fitSize)(projection, size, object);
    },
    fitWidth: function (width, object) {
      return (0, _fit.fitWidth)(projection, width, object);
    },
    fitHeight: function (height, object) {
      return (0, _fit.fitHeight)(projection, height, object);
    }
  };
}
},{"../clip/rectangle.js":"node_modules/d3-geo/src/clip/rectangle.js","../identity.js":"node_modules/d3-geo/src/identity.js","../transform.js":"node_modules/d3-geo/src/transform.js","./fit.js":"node_modules/d3-geo/src/projection/fit.js"}],"node_modules/d3-geo/src/projection/naturalEarth1.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.naturalEarth1Raw = naturalEarth1Raw;
exports.default = _default;

var _index = _interopRequireDefault(require("./index.js"));

var _math = require("../math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function naturalEarth1Raw(lambda, phi) {
  var phi2 = phi * phi,
      phi4 = phi2 * phi2;
  return [lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))), phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))];
}

naturalEarth1Raw.invert = function (x, y) {
  var phi = y,
      i = 25,
      delta;

  do {
    var phi2 = phi * phi,
        phi4 = phi2 * phi2;
    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) / (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));
  } while ((0, _math.abs)(delta) > _math.epsilon && --i > 0);

  return [x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))), phi];
};

function _default() {
  return (0, _index.default)(naturalEarth1Raw).scale(175.295);
}
},{"./index.js":"node_modules/d3-geo/src/projection/index.js","../math.js":"node_modules/d3-geo/src/math.js"}],"node_modules/d3-geo/src/projection/orthographic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.orthographicRaw = orthographicRaw;
exports.default = _default;

var _math = require("../math.js");

var _azimuthal = require("./azimuthal.js");

var _index = _interopRequireDefault(require("./index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function orthographicRaw(x, y) {
  return [(0, _math.cos)(y) * (0, _math.sin)(x), (0, _math.sin)(y)];
}

orthographicRaw.invert = (0, _azimuthal.azimuthalInvert)(_math.asin);

function _default() {
  return (0, _index.default)(orthographicRaw).scale(249.5).clipAngle(90 + _math.epsilon);
}
},{"../math.js":"node_modules/d3-geo/src/math.js","./azimuthal.js":"node_modules/d3-geo/src/projection/azimuthal.js","./index.js":"node_modules/d3-geo/src/projection/index.js"}],"node_modules/d3-geo/src/projection/stereographic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stereographicRaw = stereographicRaw;
exports.default = _default;

var _math = require("../math.js");

var _azimuthal = require("./azimuthal.js");

var _index = _interopRequireDefault(require("./index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stereographicRaw(x, y) {
  var cy = (0, _math.cos)(y),
      k = 1 + (0, _math.cos)(x) * cy;
  return [cy * (0, _math.sin)(x) / k, (0, _math.sin)(y) / k];
}

stereographicRaw.invert = (0, _azimuthal.azimuthalInvert)(function (z) {
  return 2 * (0, _math.atan)(z);
});

function _default() {
  return (0, _index.default)(stereographicRaw).scale(250).clipAngle(142);
}
},{"../math.js":"node_modules/d3-geo/src/math.js","./azimuthal.js":"node_modules/d3-geo/src/projection/azimuthal.js","./index.js":"node_modules/d3-geo/src/projection/index.js"}],"node_modules/d3-geo/src/projection/transverseMercator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transverseMercatorRaw = transverseMercatorRaw;
exports.default = _default;

var _math = require("../math.js");

var _mercator = require("./mercator.js");

function transverseMercatorRaw(lambda, phi) {
  return [(0, _math.log)((0, _math.tan)((_math.halfPi + phi) / 2)), -lambda];
}

transverseMercatorRaw.invert = function (x, y) {
  return [-y, 2 * (0, _math.atan)((0, _math.exp)(x)) - _math.halfPi];
};

function _default() {
  var m = (0, _mercator.mercatorProjection)(transverseMercatorRaw),
      center = m.center,
      rotate = m.rotate;

  m.center = function (_) {
    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
  };

  m.rotate = function (_) {
    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
  };

  return rotate([0, 0, 90]).scale(159.155);
}
},{"../math.js":"node_modules/d3-geo/src/math.js","./mercator.js":"node_modules/d3-geo/src/projection/mercator.js"}],"node_modules/d3-geo/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "geoArea", {
  enumerable: true,
  get: function () {
    return _area.default;
  }
});
Object.defineProperty(exports, "geoBounds", {
  enumerable: true,
  get: function () {
    return _bounds.default;
  }
});
Object.defineProperty(exports, "geoCentroid", {
  enumerable: true,
  get: function () {
    return _centroid.default;
  }
});
Object.defineProperty(exports, "geoCircle", {
  enumerable: true,
  get: function () {
    return _circle.default;
  }
});
Object.defineProperty(exports, "geoClipAntimeridian", {
  enumerable: true,
  get: function () {
    return _antimeridian.default;
  }
});
Object.defineProperty(exports, "geoClipCircle", {
  enumerable: true,
  get: function () {
    return _circle2.default;
  }
});
Object.defineProperty(exports, "geoClipExtent", {
  enumerable: true,
  get: function () {
    return _extent.default;
  }
});
Object.defineProperty(exports, "geoClipRectangle", {
  enumerable: true,
  get: function () {
    return _rectangle.default;
  }
});
Object.defineProperty(exports, "geoContains", {
  enumerable: true,
  get: function () {
    return _contains.default;
  }
});
Object.defineProperty(exports, "geoDistance", {
  enumerable: true,
  get: function () {
    return _distance.default;
  }
});
Object.defineProperty(exports, "geoGraticule", {
  enumerable: true,
  get: function () {
    return _graticule.default;
  }
});
Object.defineProperty(exports, "geoGraticule10", {
  enumerable: true,
  get: function () {
    return _graticule.graticule10;
  }
});
Object.defineProperty(exports, "geoInterpolate", {
  enumerable: true,
  get: function () {
    return _interpolate.default;
  }
});
Object.defineProperty(exports, "geoLength", {
  enumerable: true,
  get: function () {
    return _length.default;
  }
});
Object.defineProperty(exports, "geoPath", {
  enumerable: true,
  get: function () {
    return _index.default;
  }
});
Object.defineProperty(exports, "geoAlbers", {
  enumerable: true,
  get: function () {
    return _albers.default;
  }
});
Object.defineProperty(exports, "geoAlbersUsa", {
  enumerable: true,
  get: function () {
    return _albersUsa.default;
  }
});
Object.defineProperty(exports, "geoAzimuthalEqualArea", {
  enumerable: true,
  get: function () {
    return _azimuthalEqualArea.default;
  }
});
Object.defineProperty(exports, "geoAzimuthalEqualAreaRaw", {
  enumerable: true,
  get: function () {
    return _azimuthalEqualArea.azimuthalEqualAreaRaw;
  }
});
Object.defineProperty(exports, "geoAzimuthalEquidistant", {
  enumerable: true,
  get: function () {
    return _azimuthalEquidistant.default;
  }
});
Object.defineProperty(exports, "geoAzimuthalEquidistantRaw", {
  enumerable: true,
  get: function () {
    return _azimuthalEquidistant.azimuthalEquidistantRaw;
  }
});
Object.defineProperty(exports, "geoConicConformal", {
  enumerable: true,
  get: function () {
    return _conicConformal.default;
  }
});
Object.defineProperty(exports, "geoConicConformalRaw", {
  enumerable: true,
  get: function () {
    return _conicConformal.conicConformalRaw;
  }
});
Object.defineProperty(exports, "geoConicEqualArea", {
  enumerable: true,
  get: function () {
    return _conicEqualArea.default;
  }
});
Object.defineProperty(exports, "geoConicEqualAreaRaw", {
  enumerable: true,
  get: function () {
    return _conicEqualArea.conicEqualAreaRaw;
  }
});
Object.defineProperty(exports, "geoConicEquidistant", {
  enumerable: true,
  get: function () {
    return _conicEquidistant.default;
  }
});
Object.defineProperty(exports, "geoConicEquidistantRaw", {
  enumerable: true,
  get: function () {
    return _conicEquidistant.conicEquidistantRaw;
  }
});
Object.defineProperty(exports, "geoEqualEarth", {
  enumerable: true,
  get: function () {
    return _equalEarth.default;
  }
});
Object.defineProperty(exports, "geoEqualEarthRaw", {
  enumerable: true,
  get: function () {
    return _equalEarth.equalEarthRaw;
  }
});
Object.defineProperty(exports, "geoEquirectangular", {
  enumerable: true,
  get: function () {
    return _equirectangular.default;
  }
});
Object.defineProperty(exports, "geoEquirectangularRaw", {
  enumerable: true,
  get: function () {
    return _equirectangular.equirectangularRaw;
  }
});
Object.defineProperty(exports, "geoGnomonic", {
  enumerable: true,
  get: function () {
    return _gnomonic.default;
  }
});
Object.defineProperty(exports, "geoGnomonicRaw", {
  enumerable: true,
  get: function () {
    return _gnomonic.gnomonicRaw;
  }
});
Object.defineProperty(exports, "geoIdentity", {
  enumerable: true,
  get: function () {
    return _identity.default;
  }
});
Object.defineProperty(exports, "geoProjection", {
  enumerable: true,
  get: function () {
    return _index2.default;
  }
});
Object.defineProperty(exports, "geoProjectionMutator", {
  enumerable: true,
  get: function () {
    return _index2.projectionMutator;
  }
});
Object.defineProperty(exports, "geoMercator", {
  enumerable: true,
  get: function () {
    return _mercator.default;
  }
});
Object.defineProperty(exports, "geoMercatorRaw", {
  enumerable: true,
  get: function () {
    return _mercator.mercatorRaw;
  }
});
Object.defineProperty(exports, "geoNaturalEarth1", {
  enumerable: true,
  get: function () {
    return _naturalEarth.default;
  }
});
Object.defineProperty(exports, "geoNaturalEarth1Raw", {
  enumerable: true,
  get: function () {
    return _naturalEarth.naturalEarth1Raw;
  }
});
Object.defineProperty(exports, "geoOrthographic", {
  enumerable: true,
  get: function () {
    return _orthographic.default;
  }
});
Object.defineProperty(exports, "geoOrthographicRaw", {
  enumerable: true,
  get: function () {
    return _orthographic.orthographicRaw;
  }
});
Object.defineProperty(exports, "geoStereographic", {
  enumerable: true,
  get: function () {
    return _stereographic.default;
  }
});
Object.defineProperty(exports, "geoStereographicRaw", {
  enumerable: true,
  get: function () {
    return _stereographic.stereographicRaw;
  }
});
Object.defineProperty(exports, "geoTransverseMercator", {
  enumerable: true,
  get: function () {
    return _transverseMercator.default;
  }
});
Object.defineProperty(exports, "geoTransverseMercatorRaw", {
  enumerable: true,
  get: function () {
    return _transverseMercator.transverseMercatorRaw;
  }
});
Object.defineProperty(exports, "geoRotation", {
  enumerable: true,
  get: function () {
    return _rotation.default;
  }
});
Object.defineProperty(exports, "geoStream", {
  enumerable: true,
  get: function () {
    return _stream.default;
  }
});
Object.defineProperty(exports, "geoTransform", {
  enumerable: true,
  get: function () {
    return _transform.default;
  }
});

var _area = _interopRequireDefault(require("./area.js"));

var _bounds = _interopRequireDefault(require("./bounds.js"));

var _centroid = _interopRequireDefault(require("./centroid.js"));

var _circle = _interopRequireDefault(require("./circle.js"));

var _antimeridian = _interopRequireDefault(require("./clip/antimeridian.js"));

var _circle2 = _interopRequireDefault(require("./clip/circle.js"));

var _extent = _interopRequireDefault(require("./clip/extent.js"));

var _rectangle = _interopRequireDefault(require("./clip/rectangle.js"));

var _contains = _interopRequireDefault(require("./contains.js"));

var _distance = _interopRequireDefault(require("./distance.js"));

var _graticule = _interopRequireWildcard(require("./graticule.js"));

var _interpolate = _interopRequireDefault(require("./interpolate.js"));

var _length = _interopRequireDefault(require("./length.js"));

var _index = _interopRequireDefault(require("./path/index.js"));

var _albers = _interopRequireDefault(require("./projection/albers.js"));

var _albersUsa = _interopRequireDefault(require("./projection/albersUsa.js"));

var _azimuthalEqualArea = _interopRequireWildcard(require("./projection/azimuthalEqualArea.js"));

var _azimuthalEquidistant = _interopRequireWildcard(require("./projection/azimuthalEquidistant.js"));

var _conicConformal = _interopRequireWildcard(require("./projection/conicConformal.js"));

var _conicEqualArea = _interopRequireWildcard(require("./projection/conicEqualArea.js"));

var _conicEquidistant = _interopRequireWildcard(require("./projection/conicEquidistant.js"));

var _equalEarth = _interopRequireWildcard(require("./projection/equalEarth.js"));

var _equirectangular = _interopRequireWildcard(require("./projection/equirectangular.js"));

var _gnomonic = _interopRequireWildcard(require("./projection/gnomonic.js"));

var _identity = _interopRequireDefault(require("./projection/identity.js"));

var _index2 = _interopRequireWildcard(require("./projection/index.js"));

var _mercator = _interopRequireWildcard(require("./projection/mercator.js"));

var _naturalEarth = _interopRequireWildcard(require("./projection/naturalEarth1.js"));

var _orthographic = _interopRequireWildcard(require("./projection/orthographic.js"));

var _stereographic = _interopRequireWildcard(require("./projection/stereographic.js"));

var _transverseMercator = _interopRequireWildcard(require("./projection/transverseMercator.js"));

var _rotation = _interopRequireDefault(require("./rotation.js"));

var _stream = _interopRequireDefault(require("./stream.js"));

var _transform = _interopRequireDefault(require("./transform.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./area.js":"node_modules/d3-geo/src/area.js","./bounds.js":"node_modules/d3-geo/src/bounds.js","./centroid.js":"node_modules/d3-geo/src/centroid.js","./circle.js":"node_modules/d3-geo/src/circle.js","./clip/antimeridian.js":"node_modules/d3-geo/src/clip/antimeridian.js","./clip/circle.js":"node_modules/d3-geo/src/clip/circle.js","./clip/extent.js":"node_modules/d3-geo/src/clip/extent.js","./clip/rectangle.js":"node_modules/d3-geo/src/clip/rectangle.js","./contains.js":"node_modules/d3-geo/src/contains.js","./distance.js":"node_modules/d3-geo/src/distance.js","./graticule.js":"node_modules/d3-geo/src/graticule.js","./interpolate.js":"node_modules/d3-geo/src/interpolate.js","./length.js":"node_modules/d3-geo/src/length.js","./path/index.js":"node_modules/d3-geo/src/path/index.js","./projection/albers.js":"node_modules/d3-geo/src/projection/albers.js","./projection/albersUsa.js":"node_modules/d3-geo/src/projection/albersUsa.js","./projection/azimuthalEqualArea.js":"node_modules/d3-geo/src/projection/azimuthalEqualArea.js","./projection/azimuthalEquidistant.js":"node_modules/d3-geo/src/projection/azimuthalEquidistant.js","./projection/conicConformal.js":"node_modules/d3-geo/src/projection/conicConformal.js","./projection/conicEqualArea.js":"node_modules/d3-geo/src/projection/conicEqualArea.js","./projection/conicEquidistant.js":"node_modules/d3-geo/src/projection/conicEquidistant.js","./projection/equalEarth.js":"node_modules/d3-geo/src/projection/equalEarth.js","./projection/equirectangular.js":"node_modules/d3-geo/src/projection/equirectangular.js","./projection/gnomonic.js":"node_modules/d3-geo/src/projection/gnomonic.js","./projection/identity.js":"node_modules/d3-geo/src/projection/identity.js","./projection/index.js":"node_modules/d3-geo/src/projection/index.js","./projection/mercator.js":"node_modules/d3-geo/src/projection/mercator.js","./projection/naturalEarth1.js":"node_modules/d3-geo/src/projection/naturalEarth1.js","./projection/orthographic.js":"node_modules/d3-geo/src/projection/orthographic.js","./projection/stereographic.js":"node_modules/d3-geo/src/projection/stereographic.js","./projection/transverseMercator.js":"node_modules/d3-geo/src/projection/transverseMercator.js","./rotation.js":"node_modules/d3-geo/src/rotation.js","./stream.js":"node_modules/d3-geo/src/stream.js","./transform.js":"node_modules/d3-geo/src/transform.js"}],"node_modules/d3-hierarchy/src/cluster.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function defaultSeparation(a, b) {
  return a.parent === b.parent ? 1 : 2;
}

function meanX(children) {
  return children.reduce(meanXReduce, 0) / children.length;
}

function meanXReduce(x, c) {
  return x + c.x;
}

function maxY(children) {
  return 1 + children.reduce(maxYReduce, 0);
}

function maxYReduce(y, c) {
  return Math.max(y, c.y);
}

function leafLeft(node) {
  var children;

  while (children = node.children) node = children[0];

  return node;
}

function leafRight(node) {
  var children;

  while (children = node.children) node = children[children.length - 1];

  return node;
}

function _default() {
  var separation = defaultSeparation,
      dx = 1,
      dy = 1,
      nodeSize = false;

  function cluster(root) {
    var previousNode,
        x = 0; // First walk, computing the initial x & y values.

    root.eachAfter(function (node) {
      var children = node.children;

      if (children) {
        node.x = meanX(children);
        node.y = maxY(children);
      } else {
        node.x = previousNode ? x += separation(node, previousNode) : 0;
        node.y = 0;
        previousNode = node;
      }
    });
    var left = leafLeft(root),
        right = leafRight(root),
        x0 = left.x - separation(left, right) / 2,
        x1 = right.x + separation(right, left) / 2; // Second walk, normalizing x & y to the desired size.

    return root.eachAfter(nodeSize ? function (node) {
      node.x = (node.x - root.x) * dx;
      node.y = (root.y - node.y) * dy;
    } : function (node) {
      node.x = (node.x - x0) / (x1 - x0) * dx;
      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
    });
  }

  cluster.separation = function (x) {
    return arguments.length ? (separation = x, cluster) : separation;
  };

  cluster.size = function (x) {
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : nodeSize ? null : [dx, dy];
  };

  cluster.nodeSize = function (x) {
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : nodeSize ? [dx, dy] : null;
  };

  return cluster;
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/count.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function count(node) {
  var sum = 0,
      children = node.children,
      i = children && children.length;
  if (!i) sum = 1;else while (--i >= 0) sum += children[i].value;
  node.value = sum;
}

function _default() {
  return this.eachAfter(count);
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/each.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(callback) {
  var node = this,
      current,
      next = [node],
      children,
      i,
      n;

  do {
    current = next.reverse(), next = [];

    while (node = current.pop()) {
      callback(node), children = node.children;
      if (children) for (i = 0, n = children.length; i < n; ++i) {
        next.push(children[i]);
      }
    }
  } while (next.length);

  return this;
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/eachBefore.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(callback) {
  var node = this,
      nodes = [node],
      children,
      i;

  while (node = nodes.pop()) {
    callback(node), children = node.children;
    if (children) for (i = children.length - 1; i >= 0; --i) {
      nodes.push(children[i]);
    }
  }

  return this;
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/eachAfter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(callback) {
  var node = this,
      nodes = [node],
      next = [],
      children,
      i,
      n;

  while (node = nodes.pop()) {
    next.push(node), children = node.children;
    if (children) for (i = 0, n = children.length; i < n; ++i) {
      nodes.push(children[i]);
    }
  }

  while (node = next.pop()) {
    callback(node);
  }

  return this;
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/sum.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(value) {
  return this.eachAfter(function (node) {
    var sum = +value(node.data) || 0,
        children = node.children,
        i = children && children.length;

    while (--i >= 0) sum += children[i].value;

    node.value = sum;
  });
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/sort.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(compare) {
  return this.eachBefore(function (node) {
    if (node.children) {
      node.children.sort(compare);
    }
  });
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/path.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(end) {
  var start = this,
      ancestor = leastCommonAncestor(start, end),
      nodes = [start];

  while (start !== ancestor) {
    start = start.parent;
    nodes.push(start);
  }

  var k = nodes.length;

  while (end !== ancestor) {
    nodes.splice(k, 0, end);
    end = end.parent;
  }

  return nodes;
}

function leastCommonAncestor(a, b) {
  if (a === b) return a;
  var aNodes = a.ancestors(),
      bNodes = b.ancestors(),
      c = null;
  a = aNodes.pop();
  b = bNodes.pop();

  while (a === b) {
    c = a;
    a = aNodes.pop();
    b = bNodes.pop();
  }

  return c;
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/ancestors.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var node = this,
      nodes = [node];

  while (node = node.parent) {
    nodes.push(node);
  }

  return nodes;
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/descendants.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var nodes = [];
  this.each(function (node) {
    nodes.push(node);
  });
  return nodes;
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/leaves.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var leaves = [];
  this.eachBefore(function (node) {
    if (!node.children) {
      leaves.push(node);
    }
  });
  return leaves;
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/links.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var root = this,
      links = [];
  root.each(function (node) {
    if (node !== root) {
      // Don’t include the root’s parent, if any.
      links.push({
        source: node.parent,
        target: node
      });
    }
  });
  return links;
}
},{}],"node_modules/d3-hierarchy/src/hierarchy/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = hierarchy;
exports.computeHeight = computeHeight;
exports.Node = Node;

var _count = _interopRequireDefault(require("./count.js"));

var _each = _interopRequireDefault(require("./each.js"));

var _eachBefore = _interopRequireDefault(require("./eachBefore.js"));

var _eachAfter = _interopRequireDefault(require("./eachAfter.js"));

var _sum = _interopRequireDefault(require("./sum.js"));

var _sort = _interopRequireDefault(require("./sort.js"));

var _path = _interopRequireDefault(require("./path.js"));

var _ancestors = _interopRequireDefault(require("./ancestors.js"));

var _descendants = _interopRequireDefault(require("./descendants.js"));

var _leaves = _interopRequireDefault(require("./leaves.js"));

var _links = _interopRequireDefault(require("./links.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function hierarchy(data, children) {
  var root = new Node(data),
      valued = +data.value && (root.value = data.value),
      node,
      nodes = [root],
      child,
      childs,
      i,
      n;
  if (children == null) children = defaultChildren;

  while (node = nodes.pop()) {
    if (valued) node.value = +node.data.value;

    if ((childs = children(node.data)) && (n = childs.length)) {
      node.children = new Array(n);

      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new Node(childs[i]));
        child.parent = node;
        child.depth = node.depth + 1;
      }
    }
  }

  return root.eachBefore(computeHeight);
}

function node_copy() {
  return hierarchy(this).eachBefore(copyData);
}

function defaultChildren(d) {
  return d.children;
}

function copyData(node) {
  node.data = node.data.data;
}

function computeHeight(node) {
  var height = 0;

  do node.height = height; while ((node = node.parent) && node.height < ++height);
}

function Node(data) {
  this.data = data;
  this.depth = this.height = 0;
  this.parent = null;
}

Node.prototype = hierarchy.prototype = {
  constructor: Node,
  count: _count.default,
  each: _each.default,
  eachAfter: _eachAfter.default,
  eachBefore: _eachBefore.default,
  sum: _sum.default,
  sort: _sort.default,
  path: _path.default,
  ancestors: _ancestors.default,
  descendants: _descendants.default,
  leaves: _leaves.default,
  links: _links.default,
  copy: node_copy
};
},{"./count.js":"node_modules/d3-hierarchy/src/hierarchy/count.js","./each.js":"node_modules/d3-hierarchy/src/hierarchy/each.js","./eachBefore.js":"node_modules/d3-hierarchy/src/hierarchy/eachBefore.js","./eachAfter.js":"node_modules/d3-hierarchy/src/hierarchy/eachAfter.js","./sum.js":"node_modules/d3-hierarchy/src/hierarchy/sum.js","./sort.js":"node_modules/d3-hierarchy/src/hierarchy/sort.js","./path.js":"node_modules/d3-hierarchy/src/hierarchy/path.js","./ancestors.js":"node_modules/d3-hierarchy/src/hierarchy/ancestors.js","./descendants.js":"node_modules/d3-hierarchy/src/hierarchy/descendants.js","./leaves.js":"node_modules/d3-hierarchy/src/hierarchy/leaves.js","./links.js":"node_modules/d3-hierarchy/src/hierarchy/links.js"}],"node_modules/d3-hierarchy/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shuffle = shuffle;
exports.slice = void 0;
var slice = Array.prototype.slice;
exports.slice = slice;

function shuffle(array) {
  var m = array.length,
      t,
      i;

  while (m) {
    i = Math.random() * m-- | 0;
    t = array[m];
    array[m] = array[i];
    array[i] = t;
  }

  return array;
}
},{}],"node_modules/d3-hierarchy/src/pack/enclose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("../array.js");

function _default(circles) {
  var i = 0,
      n = (circles = (0, _array.shuffle)(_array.slice.call(circles))).length,
      B = [],
      p,
      e;

  while (i < n) {
    p = circles[i];
    if (e && enclosesWeak(e, p)) ++i;else e = encloseBasis(B = extendBasis(B, p)), i = 0;
  }

  return e;
}

function extendBasis(B, p) {
  var i, j;
  if (enclosesWeakAll(p, B)) return [p]; // If we get here then B must have at least one element.

  for (i = 0; i < B.length; ++i) {
    if (enclosesNot(p, B[i]) && enclosesWeakAll(encloseBasis2(B[i], p), B)) {
      return [B[i], p];
    }
  } // If we get here then B must have at least two elements.


  for (i = 0; i < B.length - 1; ++i) {
    for (j = i + 1; j < B.length; ++j) {
      if (enclosesNot(encloseBasis2(B[i], B[j]), p) && enclosesNot(encloseBasis2(B[i], p), B[j]) && enclosesNot(encloseBasis2(B[j], p), B[i]) && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {
        return [B[i], B[j], p];
      }
    }
  } // If we get here then something is very wrong.


  throw new Error();
}

function enclosesNot(a, b) {
  var dr = a.r - b.r,
      dx = b.x - a.x,
      dy = b.y - a.y;
  return dr < 0 || dr * dr < dx * dx + dy * dy;
}

function enclosesWeak(a, b) {
  var dr = a.r - b.r + 1e-6,
      dx = b.x - a.x,
      dy = b.y - a.y;
  return dr > 0 && dr * dr > dx * dx + dy * dy;
}

function enclosesWeakAll(a, B) {
  for (var i = 0; i < B.length; ++i) {
    if (!enclosesWeak(a, B[i])) {
      return false;
    }
  }

  return true;
}

function encloseBasis(B) {
  switch (B.length) {
    case 1:
      return encloseBasis1(B[0]);

    case 2:
      return encloseBasis2(B[0], B[1]);

    case 3:
      return encloseBasis3(B[0], B[1], B[2]);
  }
}

function encloseBasis1(a) {
  return {
    x: a.x,
    y: a.y,
    r: a.r
  };
}

function encloseBasis2(a, b) {
  var x1 = a.x,
      y1 = a.y,
      r1 = a.r,
      x2 = b.x,
      y2 = b.y,
      r2 = b.r,
      x21 = x2 - x1,
      y21 = y2 - y1,
      r21 = r2 - r1,
      l = Math.sqrt(x21 * x21 + y21 * y21);
  return {
    x: (x1 + x2 + x21 / l * r21) / 2,
    y: (y1 + y2 + y21 / l * r21) / 2,
    r: (l + r1 + r2) / 2
  };
}

function encloseBasis3(a, b, c) {
  var x1 = a.x,
      y1 = a.y,
      r1 = a.r,
      x2 = b.x,
      y2 = b.y,
      r2 = b.r,
      x3 = c.x,
      y3 = c.y,
      r3 = c.r,
      a2 = x1 - x2,
      a3 = x1 - x3,
      b2 = y1 - y2,
      b3 = y1 - y3,
      c2 = r2 - r1,
      c3 = r3 - r1,
      d1 = x1 * x1 + y1 * y1 - r1 * r1,
      d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,
      d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,
      ab = a3 * b2 - a2 * b3,
      xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,
      xb = (b3 * c2 - b2 * c3) / ab,
      ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,
      yb = (a2 * c3 - a3 * c2) / ab,
      A = xb * xb + yb * yb - 1,
      B = 2 * (r1 + xa * xb + ya * yb),
      C = xa * xa + ya * ya - r1 * r1,
      r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);
  return {
    x: x1 + xa + xb * r,
    y: y1 + ya + yb * r,
    r: r
  };
}
},{"../array.js":"node_modules/d3-hierarchy/src/array.js"}],"node_modules/d3-hierarchy/src/pack/siblings.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packEnclose = packEnclose;
exports.default = _default;

var _enclose = _interopRequireDefault(require("./enclose.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function place(b, a, c) {
  var dx = b.x - a.x,
      x,
      a2,
      dy = b.y - a.y,
      y,
      b2,
      d2 = dx * dx + dy * dy;

  if (d2) {
    a2 = a.r + c.r, a2 *= a2;
    b2 = b.r + c.r, b2 *= b2;

    if (a2 > b2) {
      x = (d2 + b2 - a2) / (2 * d2);
      y = Math.sqrt(Math.max(0, b2 / d2 - x * x));
      c.x = b.x - x * dx - y * dy;
      c.y = b.y - x * dy + y * dx;
    } else {
      x = (d2 + a2 - b2) / (2 * d2);
      y = Math.sqrt(Math.max(0, a2 / d2 - x * x));
      c.x = a.x + x * dx - y * dy;
      c.y = a.y + x * dy + y * dx;
    }
  } else {
    c.x = a.x + c.r;
    c.y = a.y;
  }
}

function intersects(a, b) {
  var dr = a.r + b.r - 1e-6,
      dx = b.x - a.x,
      dy = b.y - a.y;
  return dr > 0 && dr * dr > dx * dx + dy * dy;
}

function score(node) {
  var a = node._,
      b = node.next._,
      ab = a.r + b.r,
      dx = (a.x * b.r + b.x * a.r) / ab,
      dy = (a.y * b.r + b.y * a.r) / ab;
  return dx * dx + dy * dy;
}

function Node(circle) {
  this._ = circle;
  this.next = null;
  this.previous = null;
}

function packEnclose(circles) {
  if (!(n = circles.length)) return 0;
  var a, b, c, n, aa, ca, i, j, k, sj, sk; // Place the first circle.

  a = circles[0], a.x = 0, a.y = 0;
  if (!(n > 1)) return a.r; // Place the second circle.

  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
  if (!(n > 2)) return a.r + b.r; // Place the third circle.

  place(b, a, c = circles[2]); // Initialize the front-chain using the first three circles a, b and c.

  a = new Node(a), b = new Node(b), c = new Node(c);
  a.next = c.previous = b;
  b.next = a.previous = c;
  c.next = b.previous = a; // Attempt to place each remaining circle…

  pack: for (i = 3; i < n; ++i) {
    place(a._, b._, c = circles[i]), c = new Node(c); // Find the closest intersecting circle on the front-chain, if any.
    // “Closeness” is determined by linear distance along the front-chain.
    // “Ahead” or “behind” is likewise determined by linear distance.

    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;

    do {
      if (sj <= sk) {
        if (intersects(j._, c._)) {
          b = j, a.next = b, b.previous = a, --i;
          continue pack;
        }

        sj += j._.r, j = j.next;
      } else {
        if (intersects(k._, c._)) {
          a = k, a.next = b, b.previous = a, --i;
          continue pack;
        }

        sk += k._.r, k = k.previous;
      }
    } while (j !== k.next); // Success! Insert the new circle c between a and b.


    c.previous = a, c.next = b, a.next = b.previous = b = c; // Compute the new closest circle pair to the centroid.

    aa = score(a);

    while ((c = c.next) !== b) {
      if ((ca = score(c)) < aa) {
        a = c, aa = ca;
      }
    }

    b = a.next;
  } // Compute the enclosing circle of the front chain.


  a = [b._], c = b;

  while ((c = c.next) !== b) a.push(c._);

  c = (0, _enclose.default)(a); // Translate the circles to put the enclosing circle around the origin.

  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;

  return c.r;
}

function _default(circles) {
  packEnclose(circles);
  return circles;
}
},{"./enclose.js":"node_modules/d3-hierarchy/src/pack/enclose.js"}],"node_modules/d3-hierarchy/src/accessors.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.optional = optional;
exports.required = required;

function optional(f) {
  return f == null ? null : required(f);
}

function required(f) {
  if (typeof f !== "function") throw new Error();
  return f;
}
},{}],"node_modules/d3-hierarchy/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.constantZero = constantZero;
exports.default = _default;

function constantZero() {
  return 0;
}

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-hierarchy/src/pack/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _siblings = require("./siblings.js");

var _accessors = require("../accessors.js");

var _constant = _interopRequireWildcard(require("../constant.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function defaultRadius(d) {
  return Math.sqrt(d.value);
}

function _default() {
  var radius = null,
      dx = 1,
      dy = 1,
      padding = _constant.constantZero;

  function pack(root) {
    root.x = dx / 2, root.y = dy / 2;

    if (radius) {
      root.eachBefore(radiusLeaf(radius)).eachAfter(packChildren(padding, 0.5)).eachBefore(translateChild(1));
    } else {
      root.eachBefore(radiusLeaf(defaultRadius)).eachAfter(packChildren(_constant.constantZero, 1)).eachAfter(packChildren(padding, root.r / Math.min(dx, dy))).eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
    }

    return root;
  }

  pack.radius = function (x) {
    return arguments.length ? (radius = (0, _accessors.optional)(x), pack) : radius;
  };

  pack.size = function (x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];
  };

  pack.padding = function (x) {
    return arguments.length ? (padding = typeof x === "function" ? x : (0, _constant.default)(+x), pack) : padding;
  };

  return pack;
}

function radiusLeaf(radius) {
  return function (node) {
    if (!node.children) {
      node.r = Math.max(0, +radius(node) || 0);
    }
  };
}

function packChildren(padding, k) {
  return function (node) {
    if (children = node.children) {
      var children,
          i,
          n = children.length,
          r = padding(node) * k || 0,
          e;
      if (r) for (i = 0; i < n; ++i) children[i].r += r;
      e = (0, _siblings.packEnclose)(children);
      if (r) for (i = 0; i < n; ++i) children[i].r -= r;
      node.r = e + r;
    }
  };
}

function translateChild(k) {
  return function (node) {
    var parent = node.parent;
    node.r *= k;

    if (parent) {
      node.x = parent.x + k * node.x;
      node.y = parent.y + k * node.y;
    }
  };
}
},{"./siblings.js":"node_modules/d3-hierarchy/src/pack/siblings.js","../accessors.js":"node_modules/d3-hierarchy/src/accessors.js","../constant.js":"node_modules/d3-hierarchy/src/constant.js"}],"node_modules/d3-hierarchy/src/treemap/round.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(node) {
  node.x0 = Math.round(node.x0);
  node.y0 = Math.round(node.y0);
  node.x1 = Math.round(node.x1);
  node.y1 = Math.round(node.y1);
}
},{}],"node_modules/d3-hierarchy/src/treemap/dice.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      node,
      i = -1,
      n = nodes.length,
      k = parent.value && (x1 - x0) / parent.value;

  while (++i < n) {
    node = nodes[i], node.y0 = y0, node.y1 = y1;
    node.x0 = x0, node.x1 = x0 += node.value * k;
  }
}
},{}],"node_modules/d3-hierarchy/src/partition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _round = _interopRequireDefault(require("./treemap/round.js"));

var _dice = _interopRequireDefault(require("./treemap/dice.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var dx = 1,
      dy = 1,
      padding = 0,
      round = false;

  function partition(root) {
    var n = root.height + 1;
    root.x0 = root.y0 = padding;
    root.x1 = dx;
    root.y1 = dy / n;
    root.eachBefore(positionNode(dy, n));
    if (round) root.eachBefore(_round.default);
    return root;
  }

  function positionNode(dy, n) {
    return function (node) {
      if (node.children) {
        (0, _dice.default)(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
      }

      var x0 = node.x0,
          y0 = node.y0,
          x1 = node.x1 - padding,
          y1 = node.y1 - padding;
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
      node.x0 = x0;
      node.y0 = y0;
      node.x1 = x1;
      node.y1 = y1;
    };
  }

  partition.round = function (x) {
    return arguments.length ? (round = !!x, partition) : round;
  };

  partition.size = function (x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];
  };

  partition.padding = function (x) {
    return arguments.length ? (padding = +x, partition) : padding;
  };

  return partition;
}
},{"./treemap/round.js":"node_modules/d3-hierarchy/src/treemap/round.js","./treemap/dice.js":"node_modules/d3-hierarchy/src/treemap/dice.js"}],"node_modules/d3-hierarchy/src/stratify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _accessors = require("./accessors.js");

var _index = require("./hierarchy/index.js");

var keyPrefix = "$",
    // Protect against keys like “__proto__”.
preroot = {
  depth: -1
},
    ambiguous = {};

function defaultId(d) {
  return d.id;
}

function defaultParentId(d) {
  return d.parentId;
}

function _default() {
  var id = defaultId,
      parentId = defaultParentId;

  function stratify(data) {
    var d,
        i,
        n = data.length,
        root,
        parent,
        node,
        nodes = new Array(n),
        nodeId,
        nodeKey,
        nodeByKey = {};

    for (i = 0; i < n; ++i) {
      d = data[i], node = nodes[i] = new _index.Node(d);

      if ((nodeId = id(d, i, data)) != null && (nodeId += "")) {
        nodeKey = keyPrefix + (node.id = nodeId);
        nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;
      }
    }

    for (i = 0; i < n; ++i) {
      node = nodes[i], nodeId = parentId(data[i], i, data);

      if (nodeId == null || !(nodeId += "")) {
        if (root) throw new Error("multiple roots");
        root = node;
      } else {
        parent = nodeByKey[keyPrefix + nodeId];
        if (!parent) throw new Error("missing: " + nodeId);
        if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
        if (parent.children) parent.children.push(node);else parent.children = [node];
        node.parent = parent;
      }
    }

    if (!root) throw new Error("no root");
    root.parent = preroot;
    root.eachBefore(function (node) {
      node.depth = node.parent.depth + 1;
      --n;
    }).eachBefore(_index.computeHeight);
    root.parent = null;
    if (n > 0) throw new Error("cycle");
    return root;
  }

  stratify.id = function (x) {
    return arguments.length ? (id = (0, _accessors.required)(x), stratify) : id;
  };

  stratify.parentId = function (x) {
    return arguments.length ? (parentId = (0, _accessors.required)(x), stratify) : parentId;
  };

  return stratify;
}
},{"./accessors.js":"node_modules/d3-hierarchy/src/accessors.js","./hierarchy/index.js":"node_modules/d3-hierarchy/src/hierarchy/index.js"}],"node_modules/d3-hierarchy/src/tree.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./hierarchy/index.js");

function defaultSeparation(a, b) {
  return a.parent === b.parent ? 1 : 2;
} // function radialSeparation(a, b) {
//   return (a.parent === b.parent ? 1 : 2) / a.depth;
// }
// This function is used to traverse the left contour of a subtree (or
// subforest). It returns the successor of v on this contour. This successor is
// either given by the leftmost child of v or by the thread of v. The function
// returns null if and only if v is on the highest level of its subtree.


function nextLeft(v) {
  var children = v.children;
  return children ? children[0] : v.t;
} // This function works analogously to nextLeft.


function nextRight(v) {
  var children = v.children;
  return children ? children[children.length - 1] : v.t;
} // Shifts the current subtree rooted at w+. This is done by increasing
// prelim(w+) and mod(w+) by shift.


function moveSubtree(wm, wp, shift) {
  var change = shift / (wp.i - wm.i);
  wp.c -= change;
  wp.s += shift;
  wm.c += change;
  wp.z += shift;
  wp.m += shift;
} // All other shifts, applied to the smaller subtrees between w- and w+, are
// performed by this function. To prepare the shifts, we have to adjust
// change(w+), shift(w+), and change(w-).


function executeShifts(v) {
  var shift = 0,
      change = 0,
      children = v.children,
      i = children.length,
      w;

  while (--i >= 0) {
    w = children[i];
    w.z += shift;
    w.m += shift;
    shift += w.s + (change += w.c);
  }
} // If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
// returns the specified (default) ancestor.


function nextAncestor(vim, v, ancestor) {
  return vim.a.parent === v.parent ? vim.a : ancestor;
}

function TreeNode(node, i) {
  this._ = node;
  this.parent = null;
  this.children = null;
  this.A = null; // default ancestor

  this.a = this; // ancestor

  this.z = 0; // prelim

  this.m = 0; // mod

  this.c = 0; // change

  this.s = 0; // shift

  this.t = null; // thread

  this.i = i; // number
}

TreeNode.prototype = Object.create(_index.Node.prototype);

function treeRoot(root) {
  var tree = new TreeNode(root, 0),
      node,
      nodes = [tree],
      child,
      children,
      i,
      n;

  while (node = nodes.pop()) {
    if (children = node._.children) {
      node.children = new Array(n = children.length);

      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new TreeNode(children[i], i));
        child.parent = node;
      }
    }
  }

  (tree.parent = new TreeNode(null, 0)).children = [tree];
  return tree;
} // Node-link tree diagram using the Reingold-Tilford "tidy" algorithm


function _default() {
  var separation = defaultSeparation,
      dx = 1,
      dy = 1,
      nodeSize = null;

  function tree(root) {
    var t = treeRoot(root); // Compute the layout using Buchheim et al.’s algorithm.

    t.eachAfter(firstWalk), t.parent.m = -t.z;
    t.eachBefore(secondWalk); // If a fixed node size is specified, scale x and y.

    if (nodeSize) root.eachBefore(sizeNode); // If a fixed tree size is specified, scale x and y based on the extent.
    // Compute the left-most, right-most, and depth-most nodes for extents.
    else {
        var left = root,
            right = root,
            bottom = root;
        root.eachBefore(function (node) {
          if (node.x < left.x) left = node;
          if (node.x > right.x) right = node;
          if (node.depth > bottom.depth) bottom = node;
        });
        var s = left === right ? 1 : separation(left, right) / 2,
            tx = s - left.x,
            kx = dx / (right.x + s + tx),
            ky = dy / (bottom.depth || 1);
        root.eachBefore(function (node) {
          node.x = (node.x + tx) * kx;
          node.y = node.depth * ky;
        });
      }
    return root;
  } // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
  // applied recursively to the children of v, as well as the function
  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
  // node v is placed to the midpoint of its outermost children.


  function firstWalk(v) {
    var children = v.children,
        siblings = v.parent.children,
        w = v.i ? siblings[v.i - 1] : null;

    if (children) {
      executeShifts(v);
      var midpoint = (children[0].z + children[children.length - 1].z) / 2;

      if (w) {
        v.z = w.z + separation(v._, w._);
        v.m = v.z - midpoint;
      } else {
        v.z = midpoint;
      }
    } else if (w) {
      v.z = w.z + separation(v._, w._);
    }

    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
  } // Computes all real x-coordinates by summing up the modifiers recursively.


  function secondWalk(v) {
    v._.x = v.z + v.parent.m;
    v.m += v.parent.m;
  } // The core of the algorithm. Here, a new subtree is combined with the
  // previous subtrees. Threads are used to traverse the inside and outside
  // contours of the left and right subtree up to the highest common level. The
  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
  // superscript o means outside and i means inside, the subscript - means left
  // subtree and + means right subtree. For summing up the modifiers along the
  // contour, we use respective variables si+, si-, so-, and so+. Whenever two
  // nodes of the inside contours conflict, we compute the left one of the
  // greatest uncommon ancestors using the function ANCESTOR and call MOVE
  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
  // Finally, we add a new thread (if necessary).


  function apportion(v, w, ancestor) {
    if (w) {
      var vip = v,
          vop = v,
          vim = w,
          vom = vip.parent.children[0],
          sip = vip.m,
          sop = vop.m,
          sim = vim.m,
          som = vom.m,
          shift;

      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
        vom = nextLeft(vom);
        vop = nextRight(vop);
        vop.a = v;
        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);

        if (shift > 0) {
          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
          sip += shift;
          sop += shift;
        }

        sim += vim.m;
        sip += vip.m;
        som += vom.m;
        sop += vop.m;
      }

      if (vim && !nextRight(vop)) {
        vop.t = vim;
        vop.m += sim - sop;
      }

      if (vip && !nextLeft(vom)) {
        vom.t = vip;
        vom.m += sip - som;
        ancestor = v;
      }
    }

    return ancestor;
  }

  function sizeNode(node) {
    node.x *= dx;
    node.y = node.depth * dy;
  }

  tree.separation = function (x) {
    return arguments.length ? (separation = x, tree) : separation;
  };

  tree.size = function (x) {
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : nodeSize ? null : [dx, dy];
  };

  tree.nodeSize = function (x) {
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : nodeSize ? [dx, dy] : null;
  };

  return tree;
}
},{"./hierarchy/index.js":"node_modules/d3-hierarchy/src/hierarchy/index.js"}],"node_modules/d3-hierarchy/src/treemap/slice.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      node,
      i = -1,
      n = nodes.length,
      k = parent.value && (y1 - y0) / parent.value;

  while (++i < n) {
    node = nodes[i], node.x0 = x0, node.x1 = x1;
    node.y0 = y0, node.y1 = y0 += node.value * k;
  }
}
},{}],"node_modules/d3-hierarchy/src/treemap/squarify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.squarifyRatio = squarifyRatio;
exports.default = exports.phi = void 0;

var _dice = _interopRequireDefault(require("./dice.js"));

var _slice = _interopRequireDefault(require("./slice.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var phi = (1 + Math.sqrt(5)) / 2;
exports.phi = phi;

function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
  var rows = [],
      nodes = parent.children,
      row,
      nodeValue,
      i0 = 0,
      i1 = 0,
      n = nodes.length,
      dx,
      dy,
      value = parent.value,
      sumValue,
      minValue,
      maxValue,
      newRatio,
      minRatio,
      alpha,
      beta;

  while (i0 < n) {
    dx = x1 - x0, dy = y1 - y0; // Find the next non-empty node.

    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);

    minValue = maxValue = sumValue;
    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
    beta = sumValue * sumValue * alpha;
    minRatio = Math.max(maxValue / beta, beta / minValue); // Keep adding nodes while the aspect ratio maintains or improves.

    for (; i1 < n; ++i1) {
      sumValue += nodeValue = nodes[i1].value;
      if (nodeValue < minValue) minValue = nodeValue;
      if (nodeValue > maxValue) maxValue = nodeValue;
      beta = sumValue * sumValue * alpha;
      newRatio = Math.max(maxValue / beta, beta / minValue);

      if (newRatio > minRatio) {
        sumValue -= nodeValue;
        break;
      }

      minRatio = newRatio;
    } // Position and record the row orientation.


    rows.push(row = {
      value: sumValue,
      dice: dx < dy,
      children: nodes.slice(i0, i1)
    });
    if (row.dice) (0, _dice.default)(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);else (0, _slice.default)(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
    value -= sumValue, i0 = i1;
  }

  return rows;
}

var _default = function custom(ratio) {
  function squarify(parent, x0, y0, x1, y1) {
    squarifyRatio(ratio, parent, x0, y0, x1, y1);
  }

  squarify.ratio = function (x) {
    return custom((x = +x) > 1 ? x : 1);
  };

  return squarify;
}(phi);

exports.default = _default;
},{"./dice.js":"node_modules/d3-hierarchy/src/treemap/dice.js","./slice.js":"node_modules/d3-hierarchy/src/treemap/slice.js"}],"node_modules/d3-hierarchy/src/treemap/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _round = _interopRequireDefault(require("./round.js"));

var _squarify = _interopRequireDefault(require("./squarify.js"));

var _accessors = require("../accessors.js");

var _constant = _interopRequireWildcard(require("../constant.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var tile = _squarify.default,
      round = false,
      dx = 1,
      dy = 1,
      paddingStack = [0],
      paddingInner = _constant.constantZero,
      paddingTop = _constant.constantZero,
      paddingRight = _constant.constantZero,
      paddingBottom = _constant.constantZero,
      paddingLeft = _constant.constantZero;

  function treemap(root) {
    root.x0 = root.y0 = 0;
    root.x1 = dx;
    root.y1 = dy;
    root.eachBefore(positionNode);
    paddingStack = [0];
    if (round) root.eachBefore(_round.default);
    return root;
  }

  function positionNode(node) {
    var p = paddingStack[node.depth],
        x0 = node.x0 + p,
        y0 = node.y0 + p,
        x1 = node.x1 - p,
        y1 = node.y1 - p;
    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
    node.x0 = x0;
    node.y0 = y0;
    node.x1 = x1;
    node.y1 = y1;

    if (node.children) {
      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
      x0 += paddingLeft(node) - p;
      y0 += paddingTop(node) - p;
      x1 -= paddingRight(node) - p;
      y1 -= paddingBottom(node) - p;
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
      tile(node, x0, y0, x1, y1);
    }
  }

  treemap.round = function (x) {
    return arguments.length ? (round = !!x, treemap) : round;
  };

  treemap.size = function (x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];
  };

  treemap.tile = function (x) {
    return arguments.length ? (tile = (0, _accessors.required)(x), treemap) : tile;
  };

  treemap.padding = function (x) {
    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
  };

  treemap.paddingInner = function (x) {
    return arguments.length ? (paddingInner = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingInner;
  };

  treemap.paddingOuter = function (x) {
    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
  };

  treemap.paddingTop = function (x) {
    return arguments.length ? (paddingTop = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingTop;
  };

  treemap.paddingRight = function (x) {
    return arguments.length ? (paddingRight = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingRight;
  };

  treemap.paddingBottom = function (x) {
    return arguments.length ? (paddingBottom = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingBottom;
  };

  treemap.paddingLeft = function (x) {
    return arguments.length ? (paddingLeft = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingLeft;
  };

  return treemap;
}
},{"./round.js":"node_modules/d3-hierarchy/src/treemap/round.js","./squarify.js":"node_modules/d3-hierarchy/src/treemap/squarify.js","../accessors.js":"node_modules/d3-hierarchy/src/accessors.js","../constant.js":"node_modules/d3-hierarchy/src/constant.js"}],"node_modules/d3-hierarchy/src/treemap/binary.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      i,
      n = nodes.length,
      sum,
      sums = new Array(n + 1);

  for (sums[0] = sum = i = 0; i < n; ++i) {
    sums[i + 1] = sum += nodes[i].value;
  }

  partition(0, n, parent.value, x0, y0, x1, y1);

  function partition(i, j, value, x0, y0, x1, y1) {
    if (i >= j - 1) {
      var node = nodes[i];
      node.x0 = x0, node.y0 = y0;
      node.x1 = x1, node.y1 = y1;
      return;
    }

    var valueOffset = sums[i],
        valueTarget = value / 2 + valueOffset,
        k = i + 1,
        hi = j - 1;

    while (k < hi) {
      var mid = k + hi >>> 1;
      if (sums[mid] < valueTarget) k = mid + 1;else hi = mid;
    }

    if (valueTarget - sums[k - 1] < sums[k] - valueTarget && i + 1 < k) --k;
    var valueLeft = sums[k] - valueOffset,
        valueRight = value - valueLeft;

    if (x1 - x0 > y1 - y0) {
      var xk = (x0 * valueRight + x1 * valueLeft) / value;
      partition(i, k, valueLeft, x0, y0, xk, y1);
      partition(k, j, valueRight, xk, y0, x1, y1);
    } else {
      var yk = (y0 * valueRight + y1 * valueLeft) / value;
      partition(i, k, valueLeft, x0, y0, x1, yk);
      partition(k, j, valueRight, x0, yk, x1, y1);
    }
  }
}
},{}],"node_modules/d3-hierarchy/src/treemap/sliceDice.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _dice = _interopRequireDefault(require("./dice.js"));

var _slice = _interopRequireDefault(require("./slice.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(parent, x0, y0, x1, y1) {
  (parent.depth & 1 ? _slice.default : _dice.default)(parent, x0, y0, x1, y1);
}
},{"./dice.js":"node_modules/d3-hierarchy/src/treemap/dice.js","./slice.js":"node_modules/d3-hierarchy/src/treemap/slice.js"}],"node_modules/d3-hierarchy/src/treemap/resquarify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _dice = _interopRequireDefault(require("./dice.js"));

var _slice = _interopRequireDefault(require("./slice.js"));

var _squarify = require("./squarify.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function custom(ratio) {
  function resquarify(parent, x0, y0, x1, y1) {
    if ((rows = parent._squarify) && rows.ratio === ratio) {
      var rows,
          row,
          nodes,
          i,
          j = -1,
          n,
          m = rows.length,
          value = parent.value;

      while (++j < m) {
        row = rows[j], nodes = row.children;

        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;

        if (row.dice) (0, _dice.default)(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);else (0, _slice.default)(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);
        value -= row.value;
      }
    } else {
      parent._squarify = rows = (0, _squarify.squarifyRatio)(ratio, parent, x0, y0, x1, y1);
      rows.ratio = ratio;
    }
  }

  resquarify.ratio = function (x) {
    return custom((x = +x) > 1 ? x : 1);
  };

  return resquarify;
}(_squarify.phi);

exports.default = _default;
},{"./dice.js":"node_modules/d3-hierarchy/src/treemap/dice.js","./slice.js":"node_modules/d3-hierarchy/src/treemap/slice.js","./squarify.js":"node_modules/d3-hierarchy/src/treemap/squarify.js"}],"node_modules/d3-hierarchy/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "cluster", {
  enumerable: true,
  get: function () {
    return _cluster.default;
  }
});
Object.defineProperty(exports, "hierarchy", {
  enumerable: true,
  get: function () {
    return _index.default;
  }
});
Object.defineProperty(exports, "pack", {
  enumerable: true,
  get: function () {
    return _index2.default;
  }
});
Object.defineProperty(exports, "packSiblings", {
  enumerable: true,
  get: function () {
    return _siblings.default;
  }
});
Object.defineProperty(exports, "packEnclose", {
  enumerable: true,
  get: function () {
    return _enclose.default;
  }
});
Object.defineProperty(exports, "partition", {
  enumerable: true,
  get: function () {
    return _partition.default;
  }
});
Object.defineProperty(exports, "stratify", {
  enumerable: true,
  get: function () {
    return _stratify.default;
  }
});
Object.defineProperty(exports, "tree", {
  enumerable: true,
  get: function () {
    return _tree.default;
  }
});
Object.defineProperty(exports, "treemap", {
  enumerable: true,
  get: function () {
    return _index3.default;
  }
});
Object.defineProperty(exports, "treemapBinary", {
  enumerable: true,
  get: function () {
    return _binary.default;
  }
});
Object.defineProperty(exports, "treemapDice", {
  enumerable: true,
  get: function () {
    return _dice.default;
  }
});
Object.defineProperty(exports, "treemapSlice", {
  enumerable: true,
  get: function () {
    return _slice.default;
  }
});
Object.defineProperty(exports, "treemapSliceDice", {
  enumerable: true,
  get: function () {
    return _sliceDice.default;
  }
});
Object.defineProperty(exports, "treemapSquarify", {
  enumerable: true,
  get: function () {
    return _squarify.default;
  }
});
Object.defineProperty(exports, "treemapResquarify", {
  enumerable: true,
  get: function () {
    return _resquarify.default;
  }
});

var _cluster = _interopRequireDefault(require("./cluster.js"));

var _index = _interopRequireDefault(require("./hierarchy/index.js"));

var _index2 = _interopRequireDefault(require("./pack/index.js"));

var _siblings = _interopRequireDefault(require("./pack/siblings.js"));

var _enclose = _interopRequireDefault(require("./pack/enclose.js"));

var _partition = _interopRequireDefault(require("./partition.js"));

var _stratify = _interopRequireDefault(require("./stratify.js"));

var _tree = _interopRequireDefault(require("./tree.js"));

var _index3 = _interopRequireDefault(require("./treemap/index.js"));

var _binary = _interopRequireDefault(require("./treemap/binary.js"));

var _dice = _interopRequireDefault(require("./treemap/dice.js"));

var _slice = _interopRequireDefault(require("./treemap/slice.js"));

var _sliceDice = _interopRequireDefault(require("./treemap/sliceDice.js"));

var _squarify = _interopRequireDefault(require("./treemap/squarify.js"));

var _resquarify = _interopRequireDefault(require("./treemap/resquarify.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./cluster.js":"node_modules/d3-hierarchy/src/cluster.js","./hierarchy/index.js":"node_modules/d3-hierarchy/src/hierarchy/index.js","./pack/index.js":"node_modules/d3-hierarchy/src/pack/index.js","./pack/siblings.js":"node_modules/d3-hierarchy/src/pack/siblings.js","./pack/enclose.js":"node_modules/d3-hierarchy/src/pack/enclose.js","./partition.js":"node_modules/d3-hierarchy/src/partition.js","./stratify.js":"node_modules/d3-hierarchy/src/stratify.js","./tree.js":"node_modules/d3-hierarchy/src/tree.js","./treemap/index.js":"node_modules/d3-hierarchy/src/treemap/index.js","./treemap/binary.js":"node_modules/d3-hierarchy/src/treemap/binary.js","./treemap/dice.js":"node_modules/d3-hierarchy/src/treemap/dice.js","./treemap/slice.js":"node_modules/d3-hierarchy/src/treemap/slice.js","./treemap/sliceDice.js":"node_modules/d3-hierarchy/src/treemap/sliceDice.js","./treemap/squarify.js":"node_modules/d3-hierarchy/src/treemap/squarify.js","./treemap/resquarify.js":"node_modules/d3-hierarchy/src/treemap/resquarify.js"}],"node_modules/d3-polygon/src/area.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(polygon) {
  var i = -1,
      n = polygon.length,
      a,
      b = polygon[n - 1],
      area = 0;

  while (++i < n) {
    a = b;
    b = polygon[i];
    area += a[1] * b[0] - a[0] * b[1];
  }

  return area / 2;
}
},{}],"node_modules/d3-polygon/src/centroid.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(polygon) {
  var i = -1,
      n = polygon.length,
      x = 0,
      y = 0,
      a,
      b = polygon[n - 1],
      c,
      k = 0;

  while (++i < n) {
    a = b;
    b = polygon[i];
    k += c = a[0] * b[1] - b[0] * a[1];
    x += (a[0] + b[0]) * c;
    y += (a[1] + b[1]) * c;
  }

  return k *= 3, [x / k, y / k];
}
},{}],"node_modules/d3-polygon/src/cross.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of
// the 3D cross product in a quadrant I Cartesian coordinate system (+x is
// right, +y is up). Returns a positive value if ABC is counter-clockwise,
// negative if clockwise, and zero if the points are collinear.
function _default(a, b, c) {
  return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
}
},{}],"node_modules/d3-polygon/src/hull.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _cross = _interopRequireDefault(require("./cross.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function lexicographicOrder(a, b) {
  return a[0] - b[0] || a[1] - b[1];
} // Computes the upper convex hull per the monotone chain algorithm.
// Assumes points.length >= 3, is sorted by x, unique in y.
// Returns an array of indices into points in left-to-right order.


function computeUpperHullIndexes(points) {
  var n = points.length,
      indexes = [0, 1],
      size = 2;

  for (var i = 2; i < n; ++i) {
    while (size > 1 && (0, _cross.default)(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;

    indexes[size++] = i;
  }

  return indexes.slice(0, size); // remove popped points
}

function _default(points) {
  if ((n = points.length) < 3) return null;
  var i,
      n,
      sortedPoints = new Array(n),
      flippedPoints = new Array(n);

  for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];

  sortedPoints.sort(lexicographicOrder);

  for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];

  var upperIndexes = computeUpperHullIndexes(sortedPoints),
      lowerIndexes = computeUpperHullIndexes(flippedPoints); // Construct the hull polygon, removing possible duplicate endpoints.

  var skipLeft = lowerIndexes[0] === upperIndexes[0],
      skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],
      hull = []; // Add upper hull in right-to-l order.
  // Then add lower hull in left-to-right order.

  for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);

  for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);

  return hull;
}
},{"./cross.js":"node_modules/d3-polygon/src/cross.js"}],"node_modules/d3-polygon/src/contains.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(polygon, point) {
  var n = polygon.length,
      p = polygon[n - 1],
      x = point[0],
      y = point[1],
      x0 = p[0],
      y0 = p[1],
      x1,
      y1,
      inside = false;

  for (var i = 0; i < n; ++i) {
    p = polygon[i], x1 = p[0], y1 = p[1];
    if (y1 > y !== y0 > y && x < (x0 - x1) * (y - y1) / (y0 - y1) + x1) inside = !inside;
    x0 = x1, y0 = y1;
  }

  return inside;
}
},{}],"node_modules/d3-polygon/src/length.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(polygon) {
  var i = -1,
      n = polygon.length,
      b = polygon[n - 1],
      xa,
      ya,
      xb = b[0],
      yb = b[1],
      perimeter = 0;

  while (++i < n) {
    xa = xb;
    ya = yb;
    b = polygon[i];
    xb = b[0];
    yb = b[1];
    xa -= xb;
    ya -= yb;
    perimeter += Math.sqrt(xa * xa + ya * ya);
  }

  return perimeter;
}
},{}],"node_modules/d3-polygon/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "polygonArea", {
  enumerable: true,
  get: function () {
    return _area.default;
  }
});
Object.defineProperty(exports, "polygonCentroid", {
  enumerable: true,
  get: function () {
    return _centroid.default;
  }
});
Object.defineProperty(exports, "polygonHull", {
  enumerable: true,
  get: function () {
    return _hull.default;
  }
});
Object.defineProperty(exports, "polygonContains", {
  enumerable: true,
  get: function () {
    return _contains.default;
  }
});
Object.defineProperty(exports, "polygonLength", {
  enumerable: true,
  get: function () {
    return _length.default;
  }
});

var _area = _interopRequireDefault(require("./area.js"));

var _centroid = _interopRequireDefault(require("./centroid.js"));

var _hull = _interopRequireDefault(require("./hull.js"));

var _contains = _interopRequireDefault(require("./contains.js"));

var _length = _interopRequireDefault(require("./length.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./area.js":"node_modules/d3-polygon/src/area.js","./centroid.js":"node_modules/d3-polygon/src/centroid.js","./hull.js":"node_modules/d3-polygon/src/hull.js","./contains.js":"node_modules/d3-polygon/src/contains.js","./length.js":"node_modules/d3-polygon/src/length.js"}],"node_modules/d3-random/src/defaultSource.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  return Math.random();
}
},{}],"node_modules/d3-random/src/uniform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomUniform(source) {
  function randomUniform(min, max) {
    min = min == null ? 0 : +min;
    max = max == null ? 1 : +max;
    if (arguments.length === 1) max = min, min = 0;else max -= min;
    return function () {
      return source() * max + min;
    };
  }

  randomUniform.source = sourceRandomUniform;
  return randomUniform;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"node_modules/d3-random/src/defaultSource.js"}],"node_modules/d3-random/src/normal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomNormal(source) {
  function randomNormal(mu, sigma) {
    var x, r;
    mu = mu == null ? 0 : +mu;
    sigma = sigma == null ? 1 : +sigma;
    return function () {
      var y; // If available, use the second previously-generated uniform random.

      if (x != null) y = x, x = null; // Otherwise, generate a new x and y.
      else do {
          x = source() * 2 - 1;
          y = source() * 2 - 1;
          r = x * x + y * y;
        } while (!r || r > 1);
      return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);
    };
  }

  randomNormal.source = sourceRandomNormal;
  return randomNormal;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"node_modules/d3-random/src/defaultSource.js"}],"node_modules/d3-random/src/logNormal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

var _normal = _interopRequireDefault(require("./normal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomLogNormal(source) {
  function randomLogNormal() {
    var randomNormal = _normal.default.source(source).apply(this, arguments);

    return function () {
      return Math.exp(randomNormal());
    };
  }

  randomLogNormal.source = sourceRandomLogNormal;
  return randomLogNormal;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"node_modules/d3-random/src/defaultSource.js","./normal":"node_modules/d3-random/src/normal.js"}],"node_modules/d3-random/src/irwinHall.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomIrwinHall(source) {
  function randomIrwinHall(n) {
    return function () {
      for (var sum = 0, i = 0; i < n; ++i) sum += source();

      return sum;
    };
  }

  randomIrwinHall.source = sourceRandomIrwinHall;
  return randomIrwinHall;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"node_modules/d3-random/src/defaultSource.js"}],"node_modules/d3-random/src/bates.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

var _irwinHall = _interopRequireDefault(require("./irwinHall"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomBates(source) {
  function randomBates(n) {
    var randomIrwinHall = _irwinHall.default.source(source)(n);

    return function () {
      return randomIrwinHall() / n;
    };
  }

  randomBates.source = sourceRandomBates;
  return randomBates;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"node_modules/d3-random/src/defaultSource.js","./irwinHall":"node_modules/d3-random/src/irwinHall.js"}],"node_modules/d3-random/src/exponential.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomExponential(source) {
  function randomExponential(lambda) {
    return function () {
      return -Math.log(1 - source()) / lambda;
    };
  }

  randomExponential.source = sourceRandomExponential;
  return randomExponential;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"node_modules/d3-random/src/defaultSource.js"}],"node_modules/d3-random/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "randomUniform", {
  enumerable: true,
  get: function () {
    return _uniform.default;
  }
});
Object.defineProperty(exports, "randomNormal", {
  enumerable: true,
  get: function () {
    return _normal.default;
  }
});
Object.defineProperty(exports, "randomLogNormal", {
  enumerable: true,
  get: function () {
    return _logNormal.default;
  }
});
Object.defineProperty(exports, "randomBates", {
  enumerable: true,
  get: function () {
    return _bates.default;
  }
});
Object.defineProperty(exports, "randomIrwinHall", {
  enumerable: true,
  get: function () {
    return _irwinHall.default;
  }
});
Object.defineProperty(exports, "randomExponential", {
  enumerable: true,
  get: function () {
    return _exponential.default;
  }
});

var _uniform = _interopRequireDefault(require("./uniform"));

var _normal = _interopRequireDefault(require("./normal"));

var _logNormal = _interopRequireDefault(require("./logNormal"));

var _bates = _interopRequireDefault(require("./bates"));

var _irwinHall = _interopRequireDefault(require("./irwinHall"));

var _exponential = _interopRequireDefault(require("./exponential"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./uniform":"node_modules/d3-random/src/uniform.js","./normal":"node_modules/d3-random/src/normal.js","./logNormal":"node_modules/d3-random/src/logNormal.js","./bates":"node_modules/d3-random/src/bates.js","./irwinHall":"node_modules/d3-random/src/irwinHall.js","./exponential":"node_modules/d3-random/src/exponential.js"}],"node_modules/d3-scale/src/init.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initRange = initRange;
exports.initInterpolator = initInterpolator;

function initRange(domain, range) {
  switch (arguments.length) {
    case 0:
      break;

    case 1:
      this.range(domain);
      break;

    default:
      this.range(range).domain(domain);
      break;
  }

  return this;
}

function initInterpolator(domain, interpolator) {
  switch (arguments.length) {
    case 0:
      break;

    case 1:
      this.interpolator(domain);
      break;

    default:
      this.interpolator(interpolator).domain(domain);
      break;
  }

  return this;
}
},{}],"node_modules/d3-scale/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = exports.map = void 0;
var array = Array.prototype;
var map = array.map;
exports.map = map;
var slice = array.slice;
exports.slice = slice;
},{}],"node_modules/d3-scale/src/ordinal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ordinal;
exports.implicit = void 0;

var _d3Collection = require("d3-collection");

var _array = require("./array");

var _init = require("./init");

var implicit = {
  name: "implicit"
};
exports.implicit = implicit;

function ordinal() {
  var index = (0, _d3Collection.map)(),
      domain = [],
      range = [],
      unknown = implicit;

  function scale(d) {
    var key = d + "",
        i = index.get(key);

    if (!i) {
      if (unknown !== implicit) return unknown;
      index.set(key, i = domain.push(d));
    }

    return range[(i - 1) % range.length];
  }

  scale.domain = function (_) {
    if (!arguments.length) return domain.slice();
    domain = [], index = (0, _d3Collection.map)();
    var i = -1,
        n = _.length,
        d,
        key;

    while (++i < n) if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));

    return scale;
  };

  scale.range = function (_) {
    return arguments.length ? (range = _array.slice.call(_), scale) : range.slice();
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function () {
    return ordinal(domain, range).unknown(unknown);
  };

  _init.initRange.apply(scale, arguments);

  return scale;
}
},{"d3-collection":"node_modules/d3-collection/src/index.js","./array":"node_modules/d3-scale/src/array.js","./init":"node_modules/d3-scale/src/init.js"}],"node_modules/d3-scale/src/band.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = band;
exports.point = point;

var _d3Array = require("d3-array");

var _init = require("./init");

var _ordinal = _interopRequireDefault(require("./ordinal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function band() {
  var scale = (0, _ordinal.default)().unknown(undefined),
      domain = scale.domain,
      ordinalRange = scale.range,
      range = [0, 1],
      step,
      bandwidth,
      round = false,
      paddingInner = 0,
      paddingOuter = 0,
      align = 0.5;
  delete scale.unknown;

  function rescale() {
    var n = domain().length,
        reverse = range[1] < range[0],
        start = range[reverse - 0],
        stop = range[1 - reverse];
    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round) step = Math.floor(step);
    start += (stop - start - step * (n - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
    var values = (0, _d3Array.range)(n).map(function (i) {
      return start + step * i;
    });
    return ordinalRange(reverse ? values.reverse() : values);
  }

  scale.domain = function (_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.range = function (_) {
    return arguments.length ? (range = [+_[0], +_[1]], rescale()) : range.slice();
  };

  scale.rangeRound = function (_) {
    return range = [+_[0], +_[1]], round = true, rescale();
  };

  scale.bandwidth = function () {
    return bandwidth;
  };

  scale.step = function () {
    return step;
  };

  scale.round = function (_) {
    return arguments.length ? (round = !!_, rescale()) : round;
  };

  scale.padding = function (_) {
    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
  };

  scale.paddingInner = function (_) {
    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
  };

  scale.paddingOuter = function (_) {
    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
  };

  scale.align = function (_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  };

  scale.copy = function () {
    return band(domain(), range).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
  };

  return _init.initRange.apply(rescale(), arguments);
}

function pointish(scale) {
  var copy = scale.copy;
  scale.padding = scale.paddingOuter;
  delete scale.paddingInner;
  delete scale.paddingOuter;

  scale.copy = function () {
    return pointish(copy());
  };

  return scale;
}

function point() {
  return pointish(band.apply(null, arguments).paddingInner(1));
}
},{"d3-array":"node_modules/d3-array/src/index.js","./init":"node_modules/d3-scale/src/init.js","./ordinal":"node_modules/d3-scale/src/ordinal.js"}],"node_modules/d3-scale/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-scale/src/number.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return +x;
}
},{}],"node_modules/d3-scale/src/continuous.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.identity = identity;
exports.copy = copy;
exports.transformer = transformer;
exports.default = continuous;

var _d3Array = require("d3-array");

var _d3Interpolate = require("d3-interpolate");

var _array = require("./array");

var _constant = _interopRequireDefault(require("./constant"));

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var unit = [0, 1];

function identity(x) {
  return x;
}

function normalize(a, b) {
  return (b -= a = +a) ? function (x) {
    return (x - a) / b;
  } : (0, _constant.default)(isNaN(b) ? NaN : 0.5);
}

function clamper(domain) {
  var a = domain[0],
      b = domain[domain.length - 1],
      t;
  if (a > b) t = a, a = b, b = t;
  return function (x) {
    return Math.max(a, Math.min(b, x));
  };
} // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].


function bimap(domain, range, interpolate) {
  var d0 = domain[0],
      d1 = domain[1],
      r0 = range[0],
      r1 = range[1];
  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  return function (x) {
    return r0(d0(x));
  };
}

function polymap(domain, range, interpolate) {
  var j = Math.min(domain.length, range.length) - 1,
      d = new Array(j),
      r = new Array(j),
      i = -1; // Reverse descending domains.

  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
  }

  while (++i < j) {
    d[i] = normalize(domain[i], domain[i + 1]);
    r[i] = interpolate(range[i], range[i + 1]);
  }

  return function (x) {
    var i = (0, _d3Array.bisect)(domain, x, 1, j) - 1;
    return r[i](d[i](x));
  };
}

function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}

function transformer() {
  var domain = unit,
      range = unit,
      interpolate = _d3Interpolate.interpolate,
      transform,
      untransform,
      unknown,
      clamp = identity,
      piecewise,
      output,
      input;

  function rescale() {
    piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }

  function scale(x) {
    return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
  }

  scale.invert = function (y) {
    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), _d3Interpolate.interpolateNumber)))(y)));
  };

  scale.domain = function (_) {
    return arguments.length ? (domain = _array.map.call(_, _number.default), clamp === identity || (clamp = clamper(domain)), rescale()) : domain.slice();
  };

  scale.range = function (_) {
    return arguments.length ? (range = _array.slice.call(_), rescale()) : range.slice();
  };

  scale.rangeRound = function (_) {
    return range = _array.slice.call(_), interpolate = _d3Interpolate.interpolateRound, rescale();
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = _ ? clamper(domain) : identity, scale) : clamp !== identity;
  };

  scale.interpolate = function (_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function (t, u) {
    transform = t, untransform = u;
    return rescale();
  };
}

function continuous(transform, untransform) {
  return transformer()(transform, untransform);
}
},{"d3-array":"node_modules/d3-array/src/index.js","d3-interpolate":"node_modules/d3-interpolate/src/index.js","./array":"node_modules/d3-scale/src/array.js","./constant":"node_modules/d3-scale/src/constant.js","./number":"node_modules/d3-scale/src/number.js"}],"node_modules/d3-scale/src/tickFormat.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Array = require("d3-array");

var _d3Format = require("d3-format");

function _default(start, stop, count, specifier) {
  var step = (0, _d3Array.tickStep)(start, stop, count),
      precision;
  specifier = (0, _d3Format.formatSpecifier)(specifier == null ? ",f" : specifier);

  switch (specifier.type) {
    case "s":
      {
        var value = Math.max(Math.abs(start), Math.abs(stop));
        if (specifier.precision == null && !isNaN(precision = (0, _d3Format.precisionPrefix)(step, value))) specifier.precision = precision;
        return (0, _d3Format.formatPrefix)(specifier, value);
      }

    case "":
    case "e":
    case "g":
    case "p":
    case "r":
      {
        if (specifier.precision == null && !isNaN(precision = (0, _d3Format.precisionRound)(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
        break;
      }

    case "f":
    case "%":
      {
        if (specifier.precision == null && !isNaN(precision = (0, _d3Format.precisionFixed)(step))) specifier.precision = precision - (specifier.type === "%") * 2;
        break;
      }
  }

  return (0, _d3Format.format)(specifier);
}
},{"d3-array":"node_modules/d3-array/src/index.js","d3-format":"node_modules/d3-format/src/index.js"}],"node_modules/d3-scale/src/linear.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linearish = linearish;
exports.default = linear;

var _d3Array = require("d3-array");

var _continuous = _interopRequireWildcard(require("./continuous"));

var _init = require("./init");

var _tickFormat = _interopRequireDefault(require("./tickFormat"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function linearish(scale) {
  var domain = scale.domain;

  scale.ticks = function (count) {
    var d = domain();
    return (0, _d3Array.ticks)(d[0], d[d.length - 1], count == null ? 10 : count);
  };

  scale.tickFormat = function (count, specifier) {
    var d = domain();
    return (0, _tickFormat.default)(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
  };

  scale.nice = function (count) {
    if (count == null) count = 10;
    var d = domain(),
        i0 = 0,
        i1 = d.length - 1,
        start = d[i0],
        stop = d[i1],
        step;

    if (stop < start) {
      step = start, start = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }

    step = (0, _d3Array.tickIncrement)(start, stop, count);

    if (step > 0) {
      start = Math.floor(start / step) * step;
      stop = Math.ceil(stop / step) * step;
      step = (0, _d3Array.tickIncrement)(start, stop, count);
    } else if (step < 0) {
      start = Math.ceil(start * step) / step;
      stop = Math.floor(stop * step) / step;
      step = (0, _d3Array.tickIncrement)(start, stop, count);
    }

    if (step > 0) {
      d[i0] = Math.floor(start / step) * step;
      d[i1] = Math.ceil(stop / step) * step;
      domain(d);
    } else if (step < 0) {
      d[i0] = Math.ceil(start * step) / step;
      d[i1] = Math.floor(stop * step) / step;
      domain(d);
    }

    return scale;
  };

  return scale;
}

function linear() {
  var scale = (0, _continuous.default)(_continuous.identity, _continuous.identity);

  scale.copy = function () {
    return (0, _continuous.copy)(scale, linear());
  };

  _init.initRange.apply(scale, arguments);

  return linearish(scale);
}
},{"d3-array":"node_modules/d3-array/src/index.js","./continuous":"node_modules/d3-scale/src/continuous.js","./init":"node_modules/d3-scale/src/init.js","./tickFormat":"node_modules/d3-scale/src/tickFormat.js"}],"node_modules/d3-scale/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = identity;

var _array = require("./array");

var _linear = require("./linear");

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function identity(domain) {
  var unknown;

  function scale(x) {
    return isNaN(x = +x) ? unknown : x;
  }

  scale.invert = scale;

  scale.domain = scale.range = function (_) {
    return arguments.length ? (domain = _array.map.call(_, _number.default), scale) : domain.slice();
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function () {
    return identity(domain).unknown(unknown);
  };

  domain = arguments.length ? _array.map.call(domain, _number.default) : [0, 1];
  return (0, _linear.linearish)(scale);
}
},{"./array":"node_modules/d3-scale/src/array.js","./linear":"node_modules/d3-scale/src/linear.js","./number":"node_modules/d3-scale/src/number.js"}],"node_modules/d3-scale/src/nice.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(domain, interval) {
  domain = domain.slice();
  var i0 = 0,
      i1 = domain.length - 1,
      x0 = domain[i0],
      x1 = domain[i1],
      t;

  if (x1 < x0) {
    t = i0, i0 = i1, i1 = t;
    t = x0, x0 = x1, x1 = t;
  }

  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
}
},{}],"node_modules/d3-scale/src/log.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loggish = loggish;
exports.default = log;

var _d3Array = require("d3-array");

var _d3Format = require("d3-format");

var _nice = _interopRequireDefault(require("./nice"));

var _continuous = require("./continuous");

var _init = require("./init");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function transformLog(x) {
  return Math.log(x);
}

function transformExp(x) {
  return Math.exp(x);
}

function transformLogn(x) {
  return -Math.log(-x);
}

function transformExpn(x) {
  return -Math.exp(-x);
}

function pow10(x) {
  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
}

function powp(base) {
  return base === 10 ? pow10 : base === Math.E ? Math.exp : function (x) {
    return Math.pow(base, x);
  };
}

function logp(base) {
  return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function (x) {
    return Math.log(x) / base;
  });
}

function reflect(f) {
  return function (x) {
    return -f(-x);
  };
}

function loggish(transform) {
  var scale = transform(transformLog, transformExp),
      domain = scale.domain,
      base = 10,
      logs,
      pows;

  function rescale() {
    logs = logp(base), pows = powp(base);

    if (domain()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform(transformLogn, transformExpn);
    } else {
      transform(transformLog, transformExp);
    }

    return scale;
  }

  scale.base = function (_) {
    return arguments.length ? (base = +_, rescale()) : base;
  };

  scale.domain = function (_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.ticks = function (count) {
    var d = domain(),
        u = d[0],
        v = d[d.length - 1],
        r;
    if (r = v < u) i = u, u = v, v = i;
    var i = logs(u),
        j = logs(v),
        p,
        k,
        t,
        n = count == null ? 10 : +count,
        z = [];

    if (!(base % 1) && j - i < n) {
      i = Math.round(i) - 1, j = Math.round(j) + 1;
      if (u > 0) for (; i < j; ++i) {
        for (k = 1, p = pows(i); k < base; ++k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      } else for (; i < j; ++i) {
        for (k = base - 1, p = pows(i); k >= 1; --k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      }
    } else {
      z = (0, _d3Array.ticks)(i, j, Math.min(j - i, n)).map(pows);
    }

    return r ? z.reverse() : z;
  };

  scale.tickFormat = function (count, specifier) {
    if (specifier == null) specifier = base === 10 ? ".0e" : ",";
    if (typeof specifier !== "function") specifier = (0, _d3Format.format)(specifier);
    if (count === Infinity) return specifier;
    if (count == null) count = 10;
    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?

    return function (d) {
      var i = d / pows(Math.round(logs(d)));
      if (i * base < base - 0.5) i *= base;
      return i <= k ? specifier(d) : "";
    };
  };

  scale.nice = function () {
    return domain((0, _nice.default)(domain(), {
      floor: function (x) {
        return pows(Math.floor(logs(x)));
      },
      ceil: function (x) {
        return pows(Math.ceil(logs(x)));
      }
    }));
  };

  return scale;
}

function log() {
  var scale = loggish((0, _continuous.transformer)()).domain([1, 10]);

  scale.copy = function () {
    return (0, _continuous.copy)(scale, log()).base(scale.base());
  };

  _init.initRange.apply(scale, arguments);

  return scale;
}
},{"d3-array":"node_modules/d3-array/src/index.js","d3-format":"node_modules/d3-format/src/index.js","./nice":"node_modules/d3-scale/src/nice.js","./continuous":"node_modules/d3-scale/src/continuous.js","./init":"node_modules/d3-scale/src/init.js"}],"node_modules/d3-scale/src/symlog.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.symlogish = symlogish;
exports.default = symlog;

var _linear = require("./linear");

var _continuous = require("./continuous");

var _init = require("./init");

function transformSymlog(c) {
  return function (x) {
    return Math.sign(x) * Math.log1p(Math.abs(x / c));
  };
}

function transformSymexp(c) {
  return function (x) {
    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
  };
}

function symlogish(transform) {
  var c = 1,
      scale = transform(transformSymlog(c), transformSymexp(c));

  scale.constant = function (_) {
    return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;
  };

  return (0, _linear.linearish)(scale);
}

function symlog() {
  var scale = symlogish((0, _continuous.transformer)());

  scale.copy = function () {
    return (0, _continuous.copy)(scale, symlog()).constant(scale.constant());
  };

  return _init.initRange.apply(scale, arguments);
}
},{"./linear":"node_modules/d3-scale/src/linear.js","./continuous":"node_modules/d3-scale/src/continuous.js","./init":"node_modules/d3-scale/src/init.js"}],"node_modules/d3-scale/src/pow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.powish = powish;
exports.default = pow;
exports.sqrt = sqrt;

var _linear = require("./linear");

var _continuous = require("./continuous");

var _init = require("./init");

function transformPow(exponent) {
  return function (x) {
    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
  };
}

function transformSqrt(x) {
  return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
}

function transformSquare(x) {
  return x < 0 ? -x * x : x * x;
}

function powish(transform) {
  var scale = transform(_continuous.identity, _continuous.identity),
      exponent = 1;

  function rescale() {
    return exponent === 1 ? transform(_continuous.identity, _continuous.identity) : exponent === 0.5 ? transform(transformSqrt, transformSquare) : transform(transformPow(exponent), transformPow(1 / exponent));
  }

  scale.exponent = function (_) {
    return arguments.length ? (exponent = +_, rescale()) : exponent;
  };

  return (0, _linear.linearish)(scale);
}

function pow() {
  var scale = powish((0, _continuous.transformer)());

  scale.copy = function () {
    return (0, _continuous.copy)(scale, pow()).exponent(scale.exponent());
  };

  _init.initRange.apply(scale, arguments);

  return scale;
}

function sqrt() {
  return pow.apply(null, arguments).exponent(0.5);
}
},{"./linear":"node_modules/d3-scale/src/linear.js","./continuous":"node_modules/d3-scale/src/continuous.js","./init":"node_modules/d3-scale/src/init.js"}],"node_modules/d3-scale/src/quantile.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = quantile;

var _d3Array = require("d3-array");

var _array = require("./array");

var _init = require("./init");

function quantile() {
  var domain = [],
      range = [],
      thresholds = [],
      unknown;

  function rescale() {
    var i = 0,
        n = Math.max(1, range.length);
    thresholds = new Array(n - 1);

    while (++i < n) thresholds[i - 1] = (0, _d3Array.quantile)(domain, i / n);

    return scale;
  }

  function scale(x) {
    return isNaN(x = +x) ? unknown : range[(0, _d3Array.bisect)(thresholds, x)];
  }

  scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN] : [i > 0 ? thresholds[i - 1] : domain[0], i < thresholds.length ? thresholds[i] : domain[domain.length - 1]];
  };

  scale.domain = function (_) {
    if (!arguments.length) return domain.slice();
    domain = [];

    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);

    domain.sort(_d3Array.ascending);
    return rescale();
  };

  scale.range = function (_) {
    return arguments.length ? (range = _array.slice.call(_), rescale()) : range.slice();
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.quantiles = function () {
    return thresholds.slice();
  };

  scale.copy = function () {
    return quantile().domain(domain).range(range).unknown(unknown);
  };

  return _init.initRange.apply(scale, arguments);
}
},{"d3-array":"node_modules/d3-array/src/index.js","./array":"node_modules/d3-scale/src/array.js","./init":"node_modules/d3-scale/src/init.js"}],"node_modules/d3-scale/src/quantize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = quantize;

var _d3Array = require("d3-array");

var _array = require("./array");

var _linear = require("./linear");

var _init = require("./init");

function quantize() {
  var x0 = 0,
      x1 = 1,
      n = 1,
      domain = [0.5],
      range = [0, 1],
      unknown;

  function scale(x) {
    return x <= x ? range[(0, _d3Array.bisect)(domain, x, 0, n)] : unknown;
  }

  function rescale() {
    var i = -1;
    domain = new Array(n);

    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);

    return scale;
  }

  scale.domain = function (_) {
    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];
  };

  scale.range = function (_) {
    return arguments.length ? (n = (range = _array.slice.call(_)).length - 1, rescale()) : range.slice();
  };

  scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN] : i < 1 ? [x0, domain[0]] : i >= n ? [domain[n - 1], x1] : [domain[i - 1], domain[i]];
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : scale;
  };

  scale.thresholds = function () {
    return domain.slice();
  };

  scale.copy = function () {
    return quantize().domain([x0, x1]).range(range).unknown(unknown);
  };

  return _init.initRange.apply((0, _linear.linearish)(scale), arguments);
}
},{"d3-array":"node_modules/d3-array/src/index.js","./array":"node_modules/d3-scale/src/array.js","./linear":"node_modules/d3-scale/src/linear.js","./init":"node_modules/d3-scale/src/init.js"}],"node_modules/d3-scale/src/threshold.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = threshold;

var _d3Array = require("d3-array");

var _array = require("./array");

var _init = require("./init");

function threshold() {
  var domain = [0.5],
      range = [0, 1],
      unknown,
      n = 1;

  function scale(x) {
    return x <= x ? range[(0, _d3Array.bisect)(domain, x, 0, n)] : unknown;
  }

  scale.domain = function (_) {
    return arguments.length ? (domain = _array.slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
  };

  scale.range = function (_) {
    return arguments.length ? (range = _array.slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
  };

  scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return [domain[i - 1], domain[i]];
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function () {
    return threshold().domain(domain).range(range).unknown(unknown);
  };

  return _init.initRange.apply(scale, arguments);
}
},{"d3-array":"node_modules/d3-array/src/index.js","./array":"node_modules/d3-scale/src/array.js","./init":"node_modules/d3-scale/src/init.js"}],"node_modules/d3-time/src/interval.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = newInterval;
var t0 = new Date(),
    t1 = new Date();

function newInterval(floori, offseti, count, field) {
  function interval(date) {
    return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;
  }

  interval.floor = function (date) {
    return floori(date = new Date(+date)), date;
  };

  interval.ceil = function (date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };

  interval.round = function (date) {
    var d0 = interval(date),
        d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };

  interval.offset = function (date, step) {
    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };

  interval.range = function (start, stop, step) {
    var range = [],
        previous;
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date

    do range.push(previous = new Date(+start)), offseti(start, step), floori(start); while (previous < start && start < stop);

    return range;
  };

  interval.filter = function (test) {
    return newInterval(function (date) {
      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
    }, function (date, step) {
      if (date >= date) {
        if (step < 0) while (++step <= 0) {
          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty

        } else while (--step >= 0) {
          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty

        }
      }
    });
  };

  if (count) {
    interval.count = function (start, end) {
      t0.setTime(+start), t1.setTime(+end);
      floori(t0), floori(t1);
      return Math.floor(count(t0, t1));
    };

    interval.every = function (step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
        return field(d) % step === 0;
      } : function (d) {
        return interval.count(0, d) % step === 0;
      });
    };
  }

  return interval;
}
},{}],"node_modules/d3-time/src/millisecond.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.milliseconds = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var millisecond = (0, _interval.default)(function () {// noop
}, function (date, step) {
  date.setTime(+date + step);
}, function (start, end) {
  return end - start;
}); // An optimized implementation for this simple case.

millisecond.every = function (k) {
  k = Math.floor(k);
  if (!isFinite(k) || !(k > 0)) return null;
  if (!(k > 1)) return millisecond;
  return (0, _interval.default)(function (date) {
    date.setTime(Math.floor(date / k) * k);
  }, function (date, step) {
    date.setTime(+date + step * k);
  }, function (start, end) {
    return (end - start) / k;
  });
};

var _default = millisecond;
exports.default = _default;
var milliseconds = millisecond.range;
exports.milliseconds = milliseconds;
},{"./interval.js":"node_modules/d3-time/src/interval.js"}],"node_modules/d3-time/src/duration.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.durationWeek = exports.durationDay = exports.durationHour = exports.durationMinute = exports.durationSecond = void 0;
var durationSecond = 1e3;
exports.durationSecond = durationSecond;
var durationMinute = 6e4;
exports.durationMinute = durationMinute;
var durationHour = 36e5;
exports.durationHour = durationHour;
var durationDay = 864e5;
exports.durationDay = durationDay;
var durationWeek = 6048e5;
exports.durationWeek = durationWeek;
},{}],"node_modules/d3-time/src/second.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.seconds = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var second = (0, _interval.default)(function (date) {
  date.setTime(date - date.getMilliseconds());
}, function (date, step) {
  date.setTime(+date + step * _duration.durationSecond);
}, function (start, end) {
  return (end - start) / _duration.durationSecond;
}, function (date) {
  return date.getUTCSeconds();
});
var _default = second;
exports.default = _default;
var seconds = second.range;
exports.seconds = seconds;
},{"./interval.js":"node_modules/d3-time/src/interval.js","./duration.js":"node_modules/d3-time/src/duration.js"}],"node_modules/d3-time/src/minute.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.minutes = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var minute = (0, _interval.default)(function (date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * _duration.durationSecond);
}, function (date, step) {
  date.setTime(+date + step * _duration.durationMinute);
}, function (start, end) {
  return (end - start) / _duration.durationMinute;
}, function (date) {
  return date.getMinutes();
});
var _default = minute;
exports.default = _default;
var minutes = minute.range;
exports.minutes = minutes;
},{"./interval.js":"node_modules/d3-time/src/interval.js","./duration.js":"node_modules/d3-time/src/duration.js"}],"node_modules/d3-time/src/hour.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hours = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var hour = (0, _interval.default)(function (date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * _duration.durationSecond - date.getMinutes() * _duration.durationMinute);
}, function (date, step) {
  date.setTime(+date + step * _duration.durationHour);
}, function (start, end) {
  return (end - start) / _duration.durationHour;
}, function (date) {
  return date.getHours();
});
var _default = hour;
exports.default = _default;
var hours = hour.range;
exports.hours = hours;
},{"./interval.js":"node_modules/d3-time/src/interval.js","./duration.js":"node_modules/d3-time/src/duration.js"}],"node_modules/d3-time/src/day.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.days = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var day = (0, _interval.default)(function (date) {
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setDate(date.getDate() + step);
}, function (start, end) {
  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * _duration.durationMinute) / _duration.durationDay;
}, function (date) {
  return date.getDate() - 1;
});
var _default = day;
exports.default = _default;
var days = day.range;
exports.days = days;
},{"./interval.js":"node_modules/d3-time/src/interval.js","./duration.js":"node_modules/d3-time/src/duration.js"}],"node_modules/d3-time/src/week.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.saturdays = exports.fridays = exports.thursdays = exports.wednesdays = exports.tuesdays = exports.mondays = exports.sundays = exports.saturday = exports.friday = exports.thursday = exports.wednesday = exports.tuesday = exports.monday = exports.sunday = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function weekday(i) {
  return (0, _interval.default)(function (date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
    date.setHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function (start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * _duration.durationMinute) / _duration.durationWeek;
  });
}

var sunday = weekday(0);
exports.sunday = sunday;
var monday = weekday(1);
exports.monday = monday;
var tuesday = weekday(2);
exports.tuesday = tuesday;
var wednesday = weekday(3);
exports.wednesday = wednesday;
var thursday = weekday(4);
exports.thursday = thursday;
var friday = weekday(5);
exports.friday = friday;
var saturday = weekday(6);
exports.saturday = saturday;
var sundays = sunday.range;
exports.sundays = sundays;
var mondays = monday.range;
exports.mondays = mondays;
var tuesdays = tuesday.range;
exports.tuesdays = tuesdays;
var wednesdays = wednesday.range;
exports.wednesdays = wednesdays;
var thursdays = thursday.range;
exports.thursdays = thursdays;
var fridays = friday.range;
exports.fridays = fridays;
var saturdays = saturday.range;
exports.saturdays = saturdays;
},{"./interval.js":"node_modules/d3-time/src/interval.js","./duration.js":"node_modules/d3-time/src/duration.js"}],"node_modules/d3-time/src/month.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.months = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var month = (0, _interval.default)(function (date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setMonth(date.getMonth() + step);
}, function (start, end) {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, function (date) {
  return date.getMonth();
});
var _default = month;
exports.default = _default;
var months = month.range;
exports.months = months;
},{"./interval.js":"node_modules/d3-time/src/interval.js"}],"node_modules/d3-time/src/year.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.years = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var year = (0, _interval.default)(function (date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function (start, end) {
  return end.getFullYear() - start.getFullYear();
}, function (date) {
  return date.getFullYear();
}); // An optimized implementation for this simple case.

year.every = function (k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : (0, _interval.default)(function (date) {
    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setFullYear(date.getFullYear() + step * k);
  });
};

var _default = year;
exports.default = _default;
var years = year.range;
exports.years = years;
},{"./interval.js":"node_modules/d3-time/src/interval.js"}],"node_modules/d3-time/src/utcMinute.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcMinutes = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcMinute = (0, _interval.default)(function (date) {
  date.setUTCSeconds(0, 0);
}, function (date, step) {
  date.setTime(+date + step * _duration.durationMinute);
}, function (start, end) {
  return (end - start) / _duration.durationMinute;
}, function (date) {
  return date.getUTCMinutes();
});
var _default = utcMinute;
exports.default = _default;
var utcMinutes = utcMinute.range;
exports.utcMinutes = utcMinutes;
},{"./interval.js":"node_modules/d3-time/src/interval.js","./duration.js":"node_modules/d3-time/src/duration.js"}],"node_modules/d3-time/src/utcHour.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcHours = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcHour = (0, _interval.default)(function (date) {
  date.setUTCMinutes(0, 0, 0);
}, function (date, step) {
  date.setTime(+date + step * _duration.durationHour);
}, function (start, end) {
  return (end - start) / _duration.durationHour;
}, function (date) {
  return date.getUTCHours();
});
var _default = utcHour;
exports.default = _default;
var utcHours = utcHour.range;
exports.utcHours = utcHours;
},{"./interval.js":"node_modules/d3-time/src/interval.js","./duration.js":"node_modules/d3-time/src/duration.js"}],"node_modules/d3-time/src/utcDay.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcDays = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcDay = (0, _interval.default)(function (date) {
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function (start, end) {
  return (end - start) / _duration.durationDay;
}, function (date) {
  return date.getUTCDate() - 1;
});
var _default = utcDay;
exports.default = _default;
var utcDays = utcDay.range;
exports.utcDays = utcDays;
},{"./interval.js":"node_modules/d3-time/src/interval.js","./duration.js":"node_modules/d3-time/src/duration.js"}],"node_modules/d3-time/src/utcWeek.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcSaturdays = exports.utcFridays = exports.utcThursdays = exports.utcWednesdays = exports.utcTuesdays = exports.utcMondays = exports.utcSundays = exports.utcSaturday = exports.utcFriday = exports.utcThursday = exports.utcWednesday = exports.utcTuesday = exports.utcMonday = exports.utcSunday = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function utcWeekday(i) {
  return (0, _interval.default)(function (date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function (start, end) {
    return (end - start) / _duration.durationWeek;
  });
}

var utcSunday = utcWeekday(0);
exports.utcSunday = utcSunday;
var utcMonday = utcWeekday(1);
exports.utcMonday = utcMonday;
var utcTuesday = utcWeekday(2);
exports.utcTuesday = utcTuesday;
var utcWednesday = utcWeekday(3);
exports.utcWednesday = utcWednesday;
var utcThursday = utcWeekday(4);
exports.utcThursday = utcThursday;
var utcFriday = utcWeekday(5);
exports.utcFriday = utcFriday;
var utcSaturday = utcWeekday(6);
exports.utcSaturday = utcSaturday;
var utcSundays = utcSunday.range;
exports.utcSundays = utcSundays;
var utcMondays = utcMonday.range;
exports.utcMondays = utcMondays;
var utcTuesdays = utcTuesday.range;
exports.utcTuesdays = utcTuesdays;
var utcWednesdays = utcWednesday.range;
exports.utcWednesdays = utcWednesdays;
var utcThursdays = utcThursday.range;
exports.utcThursdays = utcThursdays;
var utcFridays = utcFriday.range;
exports.utcFridays = utcFridays;
var utcSaturdays = utcSaturday.range;
exports.utcSaturdays = utcSaturdays;
},{"./interval.js":"node_modules/d3-time/src/interval.js","./duration.js":"node_modules/d3-time/src/duration.js"}],"node_modules/d3-time/src/utcMonth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcMonths = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcMonth = (0, _interval.default)(function (date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function (start, end) {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, function (date) {
  return date.getUTCMonth();
});
var _default = utcMonth;
exports.default = _default;
var utcMonths = utcMonth.range;
exports.utcMonths = utcMonths;
},{"./interval.js":"node_modules/d3-time/src/interval.js"}],"node_modules/d3-time/src/utcYear.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcYears = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcYear = (0, _interval.default)(function (date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function (start, end) {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, function (date) {
  return date.getUTCFullYear();
}); // An optimized implementation for this simple case.

utcYear.every = function (k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : (0, _interval.default)(function (date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k);
  });
};

var _default = utcYear;
exports.default = _default;
var utcYears = utcYear.range;
exports.utcYears = utcYears;
},{"./interval.js":"node_modules/d3-time/src/interval.js"}],"node_modules/d3-time/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "timeInterval", {
  enumerable: true,
  get: function () {
    return _interval.default;
  }
});
Object.defineProperty(exports, "timeMillisecond", {
  enumerable: true,
  get: function () {
    return _millisecond.default;
  }
});
Object.defineProperty(exports, "timeMilliseconds", {
  enumerable: true,
  get: function () {
    return _millisecond.milliseconds;
  }
});
Object.defineProperty(exports, "utcMillisecond", {
  enumerable: true,
  get: function () {
    return _millisecond.default;
  }
});
Object.defineProperty(exports, "utcMilliseconds", {
  enumerable: true,
  get: function () {
    return _millisecond.milliseconds;
  }
});
Object.defineProperty(exports, "timeSecond", {
  enumerable: true,
  get: function () {
    return _second.default;
  }
});
Object.defineProperty(exports, "timeSeconds", {
  enumerable: true,
  get: function () {
    return _second.seconds;
  }
});
Object.defineProperty(exports, "utcSecond", {
  enumerable: true,
  get: function () {
    return _second.default;
  }
});
Object.defineProperty(exports, "utcSeconds", {
  enumerable: true,
  get: function () {
    return _second.seconds;
  }
});
Object.defineProperty(exports, "timeMinute", {
  enumerable: true,
  get: function () {
    return _minute.default;
  }
});
Object.defineProperty(exports, "timeMinutes", {
  enumerable: true,
  get: function () {
    return _minute.minutes;
  }
});
Object.defineProperty(exports, "timeHour", {
  enumerable: true,
  get: function () {
    return _hour.default;
  }
});
Object.defineProperty(exports, "timeHours", {
  enumerable: true,
  get: function () {
    return _hour.hours;
  }
});
Object.defineProperty(exports, "timeDay", {
  enumerable: true,
  get: function () {
    return _day.default;
  }
});
Object.defineProperty(exports, "timeDays", {
  enumerable: true,
  get: function () {
    return _day.days;
  }
});
Object.defineProperty(exports, "timeWeek", {
  enumerable: true,
  get: function () {
    return _week.sunday;
  }
});
Object.defineProperty(exports, "timeWeeks", {
  enumerable: true,
  get: function () {
    return _week.sundays;
  }
});
Object.defineProperty(exports, "timeSunday", {
  enumerable: true,
  get: function () {
    return _week.sunday;
  }
});
Object.defineProperty(exports, "timeSundays", {
  enumerable: true,
  get: function () {
    return _week.sundays;
  }
});
Object.defineProperty(exports, "timeMonday", {
  enumerable: true,
  get: function () {
    return _week.monday;
  }
});
Object.defineProperty(exports, "timeMondays", {
  enumerable: true,
  get: function () {
    return _week.mondays;
  }
});
Object.defineProperty(exports, "timeTuesday", {
  enumerable: true,
  get: function () {
    return _week.tuesday;
  }
});
Object.defineProperty(exports, "timeTuesdays", {
  enumerable: true,
  get: function () {
    return _week.tuesdays;
  }
});
Object.defineProperty(exports, "timeWednesday", {
  enumerable: true,
  get: function () {
    return _week.wednesday;
  }
});
Object.defineProperty(exports, "timeWednesdays", {
  enumerable: true,
  get: function () {
    return _week.wednesdays;
  }
});
Object.defineProperty(exports, "timeThursday", {
  enumerable: true,
  get: function () {
    return _week.thursday;
  }
});
Object.defineProperty(exports, "timeThursdays", {
  enumerable: true,
  get: function () {
    return _week.thursdays;
  }
});
Object.defineProperty(exports, "timeFriday", {
  enumerable: true,
  get: function () {
    return _week.friday;
  }
});
Object.defineProperty(exports, "timeFridays", {
  enumerable: true,
  get: function () {
    return _week.fridays;
  }
});
Object.defineProperty(exports, "timeSaturday", {
  enumerable: true,
  get: function () {
    return _week.saturday;
  }
});
Object.defineProperty(exports, "timeSaturdays", {
  enumerable: true,
  get: function () {
    return _week.saturdays;
  }
});
Object.defineProperty(exports, "timeMonth", {
  enumerable: true,
  get: function () {
    return _month.default;
  }
});
Object.defineProperty(exports, "timeMonths", {
  enumerable: true,
  get: function () {
    return _month.months;
  }
});
Object.defineProperty(exports, "timeYear", {
  enumerable: true,
  get: function () {
    return _year.default;
  }
});
Object.defineProperty(exports, "timeYears", {
  enumerable: true,
  get: function () {
    return _year.years;
  }
});
Object.defineProperty(exports, "utcMinute", {
  enumerable: true,
  get: function () {
    return _utcMinute.default;
  }
});
Object.defineProperty(exports, "utcMinutes", {
  enumerable: true,
  get: function () {
    return _utcMinute.utcMinutes;
  }
});
Object.defineProperty(exports, "utcHour", {
  enumerable: true,
  get: function () {
    return _utcHour.default;
  }
});
Object.defineProperty(exports, "utcHours", {
  enumerable: true,
  get: function () {
    return _utcHour.utcHours;
  }
});
Object.defineProperty(exports, "utcDay", {
  enumerable: true,
  get: function () {
    return _utcDay.default;
  }
});
Object.defineProperty(exports, "utcDays", {
  enumerable: true,
  get: function () {
    return _utcDay.utcDays;
  }
});
Object.defineProperty(exports, "utcWeek", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSunday;
  }
});
Object.defineProperty(exports, "utcWeeks", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSundays;
  }
});
Object.defineProperty(exports, "utcSunday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSunday;
  }
});
Object.defineProperty(exports, "utcSundays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSundays;
  }
});
Object.defineProperty(exports, "utcMonday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcMonday;
  }
});
Object.defineProperty(exports, "utcMondays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcMondays;
  }
});
Object.defineProperty(exports, "utcTuesday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcTuesday;
  }
});
Object.defineProperty(exports, "utcTuesdays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcTuesdays;
  }
});
Object.defineProperty(exports, "utcWednesday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcWednesday;
  }
});
Object.defineProperty(exports, "utcWednesdays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcWednesdays;
  }
});
Object.defineProperty(exports, "utcThursday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcThursday;
  }
});
Object.defineProperty(exports, "utcThursdays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcThursdays;
  }
});
Object.defineProperty(exports, "utcFriday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcFriday;
  }
});
Object.defineProperty(exports, "utcFridays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcFridays;
  }
});
Object.defineProperty(exports, "utcSaturday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSaturday;
  }
});
Object.defineProperty(exports, "utcSaturdays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSaturdays;
  }
});
Object.defineProperty(exports, "utcMonth", {
  enumerable: true,
  get: function () {
    return _utcMonth.default;
  }
});
Object.defineProperty(exports, "utcMonths", {
  enumerable: true,
  get: function () {
    return _utcMonth.utcMonths;
  }
});
Object.defineProperty(exports, "utcYear", {
  enumerable: true,
  get: function () {
    return _utcYear.default;
  }
});
Object.defineProperty(exports, "utcYears", {
  enumerable: true,
  get: function () {
    return _utcYear.utcYears;
  }
});

var _interval = _interopRequireDefault(require("./interval.js"));

var _millisecond = _interopRequireWildcard(require("./millisecond.js"));

var _second = _interopRequireWildcard(require("./second.js"));

var _minute = _interopRequireWildcard(require("./minute.js"));

var _hour = _interopRequireWildcard(require("./hour.js"));

var _day = _interopRequireWildcard(require("./day.js"));

var _week = require("./week.js");

var _month = _interopRequireWildcard(require("./month.js"));

var _year = _interopRequireWildcard(require("./year.js"));

var _utcMinute = _interopRequireWildcard(require("./utcMinute.js"));

var _utcHour = _interopRequireWildcard(require("./utcHour.js"));

var _utcDay = _interopRequireWildcard(require("./utcDay.js"));

var _utcWeek = require("./utcWeek.js");

var _utcMonth = _interopRequireWildcard(require("./utcMonth.js"));

var _utcYear = _interopRequireWildcard(require("./utcYear.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./interval.js":"node_modules/d3-time/src/interval.js","./millisecond.js":"node_modules/d3-time/src/millisecond.js","./second.js":"node_modules/d3-time/src/second.js","./minute.js":"node_modules/d3-time/src/minute.js","./hour.js":"node_modules/d3-time/src/hour.js","./day.js":"node_modules/d3-time/src/day.js","./week.js":"node_modules/d3-time/src/week.js","./month.js":"node_modules/d3-time/src/month.js","./year.js":"node_modules/d3-time/src/year.js","./utcMinute.js":"node_modules/d3-time/src/utcMinute.js","./utcHour.js":"node_modules/d3-time/src/utcHour.js","./utcDay.js":"node_modules/d3-time/src/utcDay.js","./utcWeek.js":"node_modules/d3-time/src/utcWeek.js","./utcMonth.js":"node_modules/d3-time/src/utcMonth.js","./utcYear.js":"node_modules/d3-time/src/utcYear.js"}],"node_modules/d3-time-format/src/locale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = formatLocale;

var _d3Time = require("d3-time");

function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
  }

  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}

function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
  }

  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}

function newDate(y, m, d) {
  return {
    y: y,
    m: m,
    d: d,
    H: 0,
    M: 0,
    S: 0,
    L: 0
  };
}

function formatLocale(locale) {
  var locale_dateTime = locale.dateTime,
      locale_date = locale.date,
      locale_time = locale.time,
      locale_periods = locale.periods,
      locale_weekdays = locale.days,
      locale_shortWeekdays = locale.shortDays,
      locale_months = locale.months,
      locale_shortMonths = locale.shortMonths;
  var periodRe = formatRe(locale_periods),
      periodLookup = formatLookup(locale_periods),
      weekdayRe = formatRe(locale_weekdays),
      weekdayLookup = formatLookup(locale_weekdays),
      shortWeekdayRe = formatRe(locale_shortWeekdays),
      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
      monthRe = formatRe(locale_months),
      monthLookup = formatLookup(locale_months),
      shortMonthRe = formatRe(locale_shortMonths),
      shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  }; // These recursive directive definitions must be deferred.

  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);

  function newFormat(specifier, formats) {
    return function (date) {
      var string = [],
          i = -1,
          j = 0,
          n = specifier.length,
          c,
          pad,
          format;
      if (!(date instanceof Date)) date = new Date(+date);

      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string.push(specifier.slice(j, i));
          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);else pad = c === "e" ? " " : "0";
          if (format = formats[c]) c = format(date, pad);
          string.push(c);
          j = i + 1;
        }
      }

      string.push(specifier.slice(j, i));
      return string.join("");
    };
  }

  function newParse(specifier, Z) {
    return function (string) {
      var d = newDate(1900, undefined, 1),
          i = parseSpecifier(d, specifier, string += "", 0),
          week,
          day;
      if (i != string.length) return null; // If a UNIX timestamp is specified, return it.

      if ("Q" in d) return new Date(d.Q);
      if ("s" in d) return new Date(d.s * 1000 + ("L" in d ? d.L : 0)); // If this is utcParse, never use the local timezone.

      if (Z && !("Z" in d)) d.Z = 0; // The am-pm flag is 0 for AM, and 1 for PM.

      if ("p" in d) d.H = d.H % 12 + d.p * 12; // If the month was not specified, inherit from the quarter.

      if (d.m === undefined) d.m = "q" in d ? d.q : 0; // Convert day-of-week and week-of-year to day-of-year.

      if ("V" in d) {
        if (d.V < 1 || d.V > 53) return null;
        if (!("w" in d)) d.w = 1;

        if ("Z" in d) {
          week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();
          week = day > 4 || day === 0 ? _d3Time.utcMonday.ceil(week) : (0, _d3Time.utcMonday)(week);
          week = _d3Time.utcDay.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = localDate(newDate(d.y, 0, 1)), day = week.getDay();
          week = day > 4 || day === 0 ? _d3Time.timeMonday.ceil(week) : (0, _d3Time.timeMonday)(week);
          week = _d3Time.timeDay.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
      } // If a time zone is specified, all fields are interpreted as UTC and then
      // offset according to the specified time zone.


      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      } // Otherwise, all fields are in local time.


      return localDate(d);
    };
  }

  function parseSpecifier(d, specifier, string, j) {
    var i = 0,
        n = specifier.length,
        m = string.length,
        c,
        parse;

    while (i < n) {
      if (j >= m) return -1;
      c = specifier.charCodeAt(i++);

      if (c === 37) {
        c = specifier.charAt(i++);
        parse = parses[c in pads ? specifier.charAt(i++) : c];
        if (!parse || (j = parse(d, string, j)) < 0) return -1;
      } else if (c != string.charCodeAt(j++)) {
        return -1;
      }
    }

    return j;
  }

  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
  }

  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
  }

  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
  }

  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }

  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }

  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }

  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }

  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }

  function formatQuarter(d) {
    return 1 + ~~(d.getMonth() / 3);
  }

  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }

  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }

  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }

  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }

  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }

  function formatUTCQuarter(d) {
    return 1 + ~~(d.getUTCMonth() / 3);
  }

  return {
    format: function (specifier) {
      var f = newFormat(specifier += "", formats);

      f.toString = function () {
        return specifier;
      };

      return f;
    },
    parse: function (specifier) {
      var p = newParse(specifier += "", false);

      p.toString = function () {
        return specifier;
      };

      return p;
    },
    utcFormat: function (specifier) {
      var f = newFormat(specifier += "", utcFormats);

      f.toString = function () {
        return specifier;
      };

      return f;
    },
    utcParse: function (specifier) {
      var p = newParse(specifier += "", true);

      p.toString = function () {
        return specifier;
      };

      return p;
    }
  };
}

var pads = {
  "-": "",
  "_": " ",
  "0": "0"
},
    numberRe = /^\s*\d+/,
    // note: ignores next directive
percentRe = /^%/,
    requoteRe = /[\\^$*+?|[\]().{}]/g;

function pad(value, fill, width) {
  var sign = value < 0 ? "-" : "",
      string = (sign ? -value : value) + "",
      length = string.length;
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}

function requote(s) {
  return s.replace(requoteRe, "\\$&");
}

function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}

function formatLookup(names) {
  var map = {},
      i = -1,
      n = names.length;

  while (++i < n) map[names[i].toLowerCase()] = i;

  return map;
}

function parseWeekdayNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}

function parseWeekdayNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.u = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberISO(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.V = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}

function parseFullYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}

function parseYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
}

function parseZone(d, string, i) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}

function parseQuarter(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
}

function parseMonthNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}

function parseDayOfMonth(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}

function parseDayOfYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}

function parseHour24(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}

function parseMinutes(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}

function parseSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}

function parseMilliseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}

function parseMicroseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 6));
  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
}

function parseLiteralPercent(d, string, i) {
  var n = percentRe.exec(string.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}

function parseUnixTimestamp(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = +n[0], i + n[0].length) : -1;
}

function parseUnixTimestampSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.s = +n[0], i + n[0].length) : -1;
}

function formatDayOfMonth(d, p) {
  return pad(d.getDate(), p, 2);
}

function formatHour24(d, p) {
  return pad(d.getHours(), p, 2);
}

function formatHour12(d, p) {
  return pad(d.getHours() % 12 || 12, p, 2);
}

function formatDayOfYear(d, p) {
  return pad(1 + _d3Time.timeDay.count((0, _d3Time.timeYear)(d), d), p, 3);
}

function formatMilliseconds(d, p) {
  return pad(d.getMilliseconds(), p, 3);
}

function formatMicroseconds(d, p) {
  return formatMilliseconds(d, p) + "000";
}

function formatMonthNumber(d, p) {
  return pad(d.getMonth() + 1, p, 2);
}

function formatMinutes(d, p) {
  return pad(d.getMinutes(), p, 2);
}

function formatSeconds(d, p) {
  return pad(d.getSeconds(), p, 2);
}

function formatWeekdayNumberMonday(d) {
  var day = d.getDay();
  return day === 0 ? 7 : day;
}

function formatWeekNumberSunday(d, p) {
  return pad(_d3Time.timeSunday.count((0, _d3Time.timeYear)(d) - 1, d), p, 2);
}

function formatWeekNumberISO(d, p) {
  var day = d.getDay();
  d = day >= 4 || day === 0 ? (0, _d3Time.timeThursday)(d) : _d3Time.timeThursday.ceil(d);
  return pad(_d3Time.timeThursday.count((0, _d3Time.timeYear)(d), d) + ((0, _d3Time.timeYear)(d).getDay() === 4), p, 2);
}

function formatWeekdayNumberSunday(d) {
  return d.getDay();
}

function formatWeekNumberMonday(d, p) {
  return pad(_d3Time.timeMonday.count((0, _d3Time.timeYear)(d) - 1, d), p, 2);
}

function formatYear(d, p) {
  return pad(d.getFullYear() % 100, p, 2);
}

function formatFullYear(d, p) {
  return pad(d.getFullYear() % 10000, p, 4);
}

function formatZone(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
}

function formatUTCDayOfMonth(d, p) {
  return pad(d.getUTCDate(), p, 2);
}

function formatUTCHour24(d, p) {
  return pad(d.getUTCHours(), p, 2);
}

function formatUTCHour12(d, p) {
  return pad(d.getUTCHours() % 12 || 12, p, 2);
}

function formatUTCDayOfYear(d, p) {
  return pad(1 + _d3Time.utcDay.count((0, _d3Time.utcYear)(d), d), p, 3);
}

function formatUTCMilliseconds(d, p) {
  return pad(d.getUTCMilliseconds(), p, 3);
}

function formatUTCMicroseconds(d, p) {
  return formatUTCMilliseconds(d, p) + "000";
}

function formatUTCMonthNumber(d, p) {
  return pad(d.getUTCMonth() + 1, p, 2);
}

function formatUTCMinutes(d, p) {
  return pad(d.getUTCMinutes(), p, 2);
}

function formatUTCSeconds(d, p) {
  return pad(d.getUTCSeconds(), p, 2);
}

function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}

function formatUTCWeekNumberSunday(d, p) {
  return pad(_d3Time.utcSunday.count((0, _d3Time.utcYear)(d) - 1, d), p, 2);
}

function formatUTCWeekNumberISO(d, p) {
  var day = d.getUTCDay();
  d = day >= 4 || day === 0 ? (0, _d3Time.utcThursday)(d) : _d3Time.utcThursday.ceil(d);
  return pad(_d3Time.utcThursday.count((0, _d3Time.utcYear)(d), d) + ((0, _d3Time.utcYear)(d).getUTCDay() === 4), p, 2);
}

function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}

function formatUTCWeekNumberMonday(d, p) {
  return pad(_d3Time.utcMonday.count((0, _d3Time.utcYear)(d) - 1, d), p, 2);
}

function formatUTCYear(d, p) {
  return pad(d.getUTCFullYear() % 100, p, 2);
}

function formatUTCFullYear(d, p) {
  return pad(d.getUTCFullYear() % 10000, p, 4);
}

function formatUTCZone() {
  return "+0000";
}

function formatLiteralPercent() {
  return "%";
}

function formatUnixTimestamp(d) {
  return +d;
}

function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1000);
}
},{"d3-time":"node_modules/d3-time/src/index.js"}],"node_modules/d3-time-format/src/defaultLocale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultLocale;
exports.utcParse = exports.utcFormat = exports.timeParse = exports.timeFormat = void 0;

var _locale = _interopRequireDefault(require("./locale.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var locale;
var timeFormat;
exports.timeFormat = timeFormat;
var timeParse;
exports.timeParse = timeParse;
var utcFormat;
exports.utcFormat = utcFormat;
var utcParse;
exports.utcParse = utcParse;
defaultLocale({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});

function defaultLocale(definition) {
  locale = (0, _locale.default)(definition);
  exports.timeFormat = timeFormat = locale.format;
  exports.timeParse = timeParse = locale.parse;
  exports.utcFormat = utcFormat = locale.utcFormat;
  exports.utcParse = utcParse = locale.utcParse;
  return locale;
}
},{"./locale.js":"node_modules/d3-time-format/src/locale.js"}],"node_modules/d3-time-format/src/isoFormat.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.isoSpecifier = void 0;

var _defaultLocale = require("./defaultLocale.js");

var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
exports.isoSpecifier = isoSpecifier;

function formatIsoNative(date) {
  return date.toISOString();
}

var formatIso = Date.prototype.toISOString ? formatIsoNative : (0, _defaultLocale.utcFormat)(isoSpecifier);
var _default = formatIso;
exports.default = _default;
},{"./defaultLocale.js":"node_modules/d3-time-format/src/defaultLocale.js"}],"node_modules/d3-time-format/src/isoParse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isoFormat = require("./isoFormat.js");

var _defaultLocale = require("./defaultLocale.js");

function parseIsoNative(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}

var parseIso = +new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : (0, _defaultLocale.utcParse)(_isoFormat.isoSpecifier);
var _default = parseIso;
exports.default = _default;
},{"./isoFormat.js":"node_modules/d3-time-format/src/isoFormat.js","./defaultLocale.js":"node_modules/d3-time-format/src/defaultLocale.js"}],"node_modules/d3-time-format/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "timeFormatDefaultLocale", {
  enumerable: true,
  get: function () {
    return _defaultLocale.default;
  }
});
Object.defineProperty(exports, "timeFormat", {
  enumerable: true,
  get: function () {
    return _defaultLocale.timeFormat;
  }
});
Object.defineProperty(exports, "timeParse", {
  enumerable: true,
  get: function () {
    return _defaultLocale.timeParse;
  }
});
Object.defineProperty(exports, "utcFormat", {
  enumerable: true,
  get: function () {
    return _defaultLocale.utcFormat;
  }
});
Object.defineProperty(exports, "utcParse", {
  enumerable: true,
  get: function () {
    return _defaultLocale.utcParse;
  }
});
Object.defineProperty(exports, "timeFormatLocale", {
  enumerable: true,
  get: function () {
    return _locale.default;
  }
});
Object.defineProperty(exports, "isoFormat", {
  enumerable: true,
  get: function () {
    return _isoFormat.default;
  }
});
Object.defineProperty(exports, "isoParse", {
  enumerable: true,
  get: function () {
    return _isoParse.default;
  }
});

var _defaultLocale = _interopRequireWildcard(require("./defaultLocale.js"));

var _locale = _interopRequireDefault(require("./locale.js"));

var _isoFormat = _interopRequireDefault(require("./isoFormat.js"));

var _isoParse = _interopRequireDefault(require("./isoParse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
},{"./defaultLocale.js":"node_modules/d3-time-format/src/defaultLocale.js","./locale.js":"node_modules/d3-time-format/src/locale.js","./isoFormat.js":"node_modules/d3-time-format/src/isoFormat.js","./isoParse.js":"node_modules/d3-time-format/src/isoParse.js"}],"node_modules/d3-scale/src/time.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calendar = calendar;
exports.default = _default;

var _d3Array = require("d3-array");

var _d3Time = require("d3-time");

var _d3TimeFormat = require("d3-time-format");

var _array = require("./array");

var _continuous = _interopRequireWildcard(require("./continuous"));

var _init = require("./init");

var _nice = _interopRequireDefault(require("./nice"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var durationSecond = 1000,
    durationMinute = durationSecond * 60,
    durationHour = durationMinute * 60,
    durationDay = durationHour * 24,
    durationWeek = durationDay * 7,
    durationMonth = durationDay * 30,
    durationYear = durationDay * 365;

function date(t) {
  return new Date(t);
}

function number(t) {
  return t instanceof Date ? +t : +new Date(+t);
}

function calendar(year, month, week, day, hour, minute, second, millisecond, format) {
  var scale = (0, _continuous.default)(_continuous.identity, _continuous.identity),
      invert = scale.invert,
      domain = scale.domain;
  var formatMillisecond = format(".%L"),
      formatSecond = format(":%S"),
      formatMinute = format("%I:%M"),
      formatHour = format("%I %p"),
      formatDay = format("%a %d"),
      formatWeek = format("%b %d"),
      formatMonth = format("%B"),
      formatYear = format("%Y");
  var tickIntervals = [[second, 1, durationSecond], [second, 5, 5 * durationSecond], [second, 15, 15 * durationSecond], [second, 30, 30 * durationSecond], [minute, 1, durationMinute], [minute, 5, 5 * durationMinute], [minute, 15, 15 * durationMinute], [minute, 30, 30 * durationMinute], [hour, 1, durationHour], [hour, 3, 3 * durationHour], [hour, 6, 6 * durationHour], [hour, 12, 12 * durationHour], [day, 1, durationDay], [day, 2, 2 * durationDay], [week, 1, durationWeek], [month, 1, durationMonth], [month, 3, 3 * durationMonth], [year, 1, durationYear]];

  function tickFormat(date) {
    return (second(date) < date ? formatMillisecond : minute(date) < date ? formatSecond : hour(date) < date ? formatMinute : day(date) < date ? formatHour : month(date) < date ? week(date) < date ? formatDay : formatWeek : year(date) < date ? formatMonth : formatYear)(date);
  }

  function tickInterval(interval, start, stop, step) {
    if (interval == null) interval = 10; // If a desired tick count is specified, pick a reasonable tick interval
    // based on the extent of the domain and a rough estimate of tick size.
    // Otherwise, assume interval is already a time interval and use it.

    if (typeof interval === "number") {
      var target = Math.abs(stop - start) / interval,
          i = (0, _d3Array.bisector)(function (i) {
        return i[2];
      }).right(tickIntervals, target);

      if (i === tickIntervals.length) {
        step = (0, _d3Array.tickStep)(start / durationYear, stop / durationYear, interval);
        interval = year;
      } else if (i) {
        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
        step = i[1];
        interval = i[0];
      } else {
        step = Math.max((0, _d3Array.tickStep)(start, stop, interval), 1);
        interval = millisecond;
      }
    }

    return step == null ? interval : interval.every(step);
  }

  scale.invert = function (y) {
    return new Date(invert(y));
  };

  scale.domain = function (_) {
    return arguments.length ? domain(_array.map.call(_, number)) : domain().map(date);
  };

  scale.ticks = function (interval, step) {
    var d = domain(),
        t0 = d[0],
        t1 = d[d.length - 1],
        r = t1 < t0,
        t;
    if (r) t = t0, t0 = t1, t1 = t;
    t = tickInterval(interval, t0, t1, step);
    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop

    return r ? t.reverse() : t;
  };

  scale.tickFormat = function (count, specifier) {
    return specifier == null ? tickFormat : format(specifier);
  };

  scale.nice = function (interval, step) {
    var d = domain();
    return (interval = tickInterval(interval, d[0], d[d.length - 1], step)) ? domain((0, _nice.default)(d, interval)) : scale;
  };

  scale.copy = function () {
    return (0, _continuous.copy)(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));
  };

  return scale;
}

function _default() {
  return _init.initRange.apply(calendar(_d3Time.timeYear, _d3Time.timeMonth, _d3Time.timeWeek, _d3Time.timeDay, _d3Time.timeHour, _d3Time.timeMinute, _d3Time.timeSecond, _d3Time.timeMillisecond, _d3TimeFormat.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);
}
},{"d3-array":"node_modules/d3-array/src/index.js","d3-time":"node_modules/d3-time/src/index.js","d3-time-format":"node_modules/d3-time-format/src/index.js","./array":"node_modules/d3-scale/src/array.js","./continuous":"node_modules/d3-scale/src/continuous.js","./init":"node_modules/d3-scale/src/init.js","./nice":"node_modules/d3-scale/src/nice.js"}],"node_modules/d3-scale/src/utcTime.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _time = require("./time");

var _d3TimeFormat = require("d3-time-format");

var _d3Time = require("d3-time");

var _init = require("./init");

function _default() {
  return _init.initRange.apply((0, _time.calendar)(_d3Time.utcYear, _d3Time.utcMonth, _d3Time.utcWeek, _d3Time.utcDay, _d3Time.utcHour, _d3Time.utcMinute, _d3Time.utcSecond, _d3Time.utcMillisecond, _d3TimeFormat.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);
}
},{"./time":"node_modules/d3-scale/src/time.js","d3-time-format":"node_modules/d3-time-format/src/index.js","d3-time":"node_modules/d3-time/src/index.js","./init":"node_modules/d3-scale/src/init.js"}],"node_modules/d3-scale/src/sequential.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.copy = copy;
exports.default = sequential;
exports.sequentialLog = sequentialLog;
exports.sequentialSymlog = sequentialSymlog;
exports.sequentialPow = sequentialPow;
exports.sequentialSqrt = sequentialSqrt;

var _continuous = require("./continuous");

var _init = require("./init");

var _linear = require("./linear");

var _log = require("./log");

var _symlog = require("./symlog");

var _pow = require("./pow");

function transformer() {
  var x0 = 0,
      x1 = 1,
      t0,
      t1,
      k10,
      transform,
      interpolator = _continuous.identity,
      clamp = false,
      unknown;

  function scale(x) {
    return isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
  }

  scale.domain = function (_) {
    return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function (_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function (t) {
    transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);
    return scale;
  };
}

function copy(source, target) {
  return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());
}

function sequential() {
  var scale = (0, _linear.linearish)(transformer()(_continuous.identity));

  scale.copy = function () {
    return copy(scale, sequential());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function sequentialLog() {
  var scale = (0, _log.loggish)(transformer()).domain([1, 10]);

  scale.copy = function () {
    return copy(scale, sequentialLog()).base(scale.base());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function sequentialSymlog() {
  var scale = (0, _symlog.symlogish)(transformer());

  scale.copy = function () {
    return copy(scale, sequentialSymlog()).constant(scale.constant());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function sequentialPow() {
  var scale = (0, _pow.powish)(transformer());

  scale.copy = function () {
    return copy(scale, sequentialPow()).exponent(scale.exponent());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function sequentialSqrt() {
  return sequentialPow.apply(null, arguments).exponent(0.5);
}
},{"./continuous":"node_modules/d3-scale/src/continuous.js","./init":"node_modules/d3-scale/src/init.js","./linear":"node_modules/d3-scale/src/linear.js","./log":"node_modules/d3-scale/src/log.js","./symlog":"node_modules/d3-scale/src/symlog.js","./pow":"node_modules/d3-scale/src/pow.js"}],"node_modules/d3-scale/src/sequentialQuantile.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sequentialQuantile;

var _d3Array = require("d3-array");

var _continuous = require("./continuous");

var _init = require("./init");

function sequentialQuantile() {
  var domain = [],
      interpolator = _continuous.identity;

  function scale(x) {
    if (!isNaN(x = +x)) return interpolator(((0, _d3Array.bisect)(domain, x) - 1) / (domain.length - 1));
  }

  scale.domain = function (_) {
    if (!arguments.length) return domain.slice();
    domain = [];

    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);

    domain.sort(_d3Array.ascending);
    return scale;
  };

  scale.interpolator = function (_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.copy = function () {
    return sequentialQuantile(interpolator).domain(domain);
  };

  return _init.initInterpolator.apply(scale, arguments);
}
},{"d3-array":"node_modules/d3-array/src/index.js","./continuous":"node_modules/d3-scale/src/continuous.js","./init":"node_modules/d3-scale/src/init.js"}],"node_modules/d3-scale/src/diverging.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = diverging;
exports.divergingLog = divergingLog;
exports.divergingSymlog = divergingSymlog;
exports.divergingPow = divergingPow;
exports.divergingSqrt = divergingSqrt;

var _continuous = require("./continuous");

var _init = require("./init");

var _linear = require("./linear");

var _log = require("./log");

var _sequential = require("./sequential");

var _symlog = require("./symlog");

var _pow = require("./pow");

function transformer() {
  var x0 = 0,
      x1 = 0.5,
      x2 = 1,
      t0,
      t1,
      t2,
      k10,
      k21,
      interpolator = _continuous.identity,
      transform,
      clamp = false,
      unknown;

  function scale(x) {
    return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (x < t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));
  }

  scale.domain = function (_) {
    return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), t2 = transform(x2 = +_[2]), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), scale) : [x0, x1, x2];
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function (_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function (t) {
    transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1);
    return scale;
  };
}

function diverging() {
  var scale = (0, _linear.linearish)(transformer()(_continuous.identity));

  scale.copy = function () {
    return (0, _sequential.copy)(scale, diverging());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function divergingLog() {
  var scale = (0, _log.loggish)(transformer()).domain([0.1, 1, 10]);

  scale.copy = function () {
    return (0, _sequential.copy)(scale, divergingLog()).base(scale.base());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function divergingSymlog() {
  var scale = (0, _symlog.symlogish)(transformer());

  scale.copy = function () {
    return (0, _sequential.copy)(scale, divergingSymlog()).constant(scale.constant());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function divergingPow() {
  var scale = (0, _pow.powish)(transformer());

  scale.copy = function () {
    return (0, _sequential.copy)(scale, divergingPow()).exponent(scale.exponent());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function divergingSqrt() {
  return divergingPow.apply(null, arguments).exponent(0.5);
}
},{"./continuous":"node_modules/d3-scale/src/continuous.js","./init":"node_modules/d3-scale/src/init.js","./linear":"node_modules/d3-scale/src/linear.js","./log":"node_modules/d3-scale/src/log.js","./sequential":"node_modules/d3-scale/src/sequential.js","./symlog":"node_modules/d3-scale/src/symlog.js","./pow":"node_modules/d3-scale/src/pow.js"}],"node_modules/d3-scale/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "scaleBand", {
  enumerable: true,
  get: function () {
    return _band.default;
  }
});
Object.defineProperty(exports, "scalePoint", {
  enumerable: true,
  get: function () {
    return _band.point;
  }
});
Object.defineProperty(exports, "scaleIdentity", {
  enumerable: true,
  get: function () {
    return _identity.default;
  }
});
Object.defineProperty(exports, "scaleLinear", {
  enumerable: true,
  get: function () {
    return _linear.default;
  }
});
Object.defineProperty(exports, "scaleLog", {
  enumerable: true,
  get: function () {
    return _log.default;
  }
});
Object.defineProperty(exports, "scaleSymlog", {
  enumerable: true,
  get: function () {
    return _symlog.default;
  }
});
Object.defineProperty(exports, "scaleOrdinal", {
  enumerable: true,
  get: function () {
    return _ordinal.default;
  }
});
Object.defineProperty(exports, "scaleImplicit", {
  enumerable: true,
  get: function () {
    return _ordinal.implicit;
  }
});
Object.defineProperty(exports, "scalePow", {
  enumerable: true,
  get: function () {
    return _pow.default;
  }
});
Object.defineProperty(exports, "scaleSqrt", {
  enumerable: true,
  get: function () {
    return _pow.sqrt;
  }
});
Object.defineProperty(exports, "scaleQuantile", {
  enumerable: true,
  get: function () {
    return _quantile.default;
  }
});
Object.defineProperty(exports, "scaleQuantize", {
  enumerable: true,
  get: function () {
    return _quantize.default;
  }
});
Object.defineProperty(exports, "scaleThreshold", {
  enumerable: true,
  get: function () {
    return _threshold.default;
  }
});
Object.defineProperty(exports, "scaleTime", {
  enumerable: true,
  get: function () {
    return _time.default;
  }
});
Object.defineProperty(exports, "scaleUtc", {
  enumerable: true,
  get: function () {
    return _utcTime.default;
  }
});
Object.defineProperty(exports, "scaleSequential", {
  enumerable: true,
  get: function () {
    return _sequential.default;
  }
});
Object.defineProperty(exports, "scaleSequentialLog", {
  enumerable: true,
  get: function () {
    return _sequential.sequentialLog;
  }
});
Object.defineProperty(exports, "scaleSequentialPow", {
  enumerable: true,
  get: function () {
    return _sequential.sequentialPow;
  }
});
Object.defineProperty(exports, "scaleSequentialSqrt", {
  enumerable: true,
  get: function () {
    return _sequential.sequentialSqrt;
  }
});
Object.defineProperty(exports, "scaleSequentialSymlog", {
  enumerable: true,
  get: function () {
    return _sequential.sequentialSymlog;
  }
});
Object.defineProperty(exports, "scaleSequentialQuantile", {
  enumerable: true,
  get: function () {
    return _sequentialQuantile.default;
  }
});
Object.defineProperty(exports, "scaleDiverging", {
  enumerable: true,
  get: function () {
    return _diverging.default;
  }
});
Object.defineProperty(exports, "scaleDivergingLog", {
  enumerable: true,
  get: function () {
    return _diverging.divergingLog;
  }
});
Object.defineProperty(exports, "scaleDivergingPow", {
  enumerable: true,
  get: function () {
    return _diverging.divergingPow;
  }
});
Object.defineProperty(exports, "scaleDivergingSqrt", {
  enumerable: true,
  get: function () {
    return _diverging.divergingSqrt;
  }
});
Object.defineProperty(exports, "scaleDivergingSymlog", {
  enumerable: true,
  get: function () {
    return _diverging.divergingSymlog;
  }
});
Object.defineProperty(exports, "tickFormat", {
  enumerable: true,
  get: function () {
    return _tickFormat.default;
  }
});

var _band = _interopRequireWildcard(require("./band"));

var _identity = _interopRequireDefault(require("./identity"));

var _linear = _interopRequireDefault(require("./linear"));

var _log = _interopRequireDefault(require("./log"));

var _symlog = _interopRequireDefault(require("./symlog"));

var _ordinal = _interopRequireWildcard(require("./ordinal"));

var _pow = _interopRequireWildcard(require("./pow"));

var _quantile = _interopRequireDefault(require("./quantile"));

var _quantize = _interopRequireDefault(require("./quantize"));

var _threshold = _interopRequireDefault(require("./threshold"));

var _time = _interopRequireDefault(require("./time"));

var _utcTime = _interopRequireDefault(require("./utcTime"));

var _sequential = _interopRequireWildcard(require("./sequential"));

var _sequentialQuantile = _interopRequireDefault(require("./sequentialQuantile"));

var _diverging = _interopRequireWildcard(require("./diverging"));

var _tickFormat = _interopRequireDefault(require("./tickFormat"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
},{"./band":"node_modules/d3-scale/src/band.js","./identity":"node_modules/d3-scale/src/identity.js","./linear":"node_modules/d3-scale/src/linear.js","./log":"node_modules/d3-scale/src/log.js","./symlog":"node_modules/d3-scale/src/symlog.js","./ordinal":"node_modules/d3-scale/src/ordinal.js","./pow":"node_modules/d3-scale/src/pow.js","./quantile":"node_modules/d3-scale/src/quantile.js","./quantize":"node_modules/d3-scale/src/quantize.js","./threshold":"node_modules/d3-scale/src/threshold.js","./time":"node_modules/d3-scale/src/time.js","./utcTime":"node_modules/d3-scale/src/utcTime.js","./sequential":"node_modules/d3-scale/src/sequential.js","./sequentialQuantile":"node_modules/d3-scale/src/sequentialQuantile.js","./diverging":"node_modules/d3-scale/src/diverging.js","./tickFormat":"node_modules/d3-scale/src/tickFormat.js"}],"node_modules/d3-scale-chromatic/src/colors.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(specifier) {
  var n = specifier.length / 6 | 0,
      colors = new Array(n),
      i = 0;

  while (i < n) colors[i] = "#" + specifier.slice(i * 6, ++i * 6);

  return colors;
}
},{}],"node_modules/d3-scale-chromatic/src/categorical/category10.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js"}],"node_modules/d3-scale-chromatic/src/categorical/Accent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js"}],"node_modules/d3-scale-chromatic/src/categorical/Dark2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js"}],"node_modules/d3-scale-chromatic/src/categorical/Paired.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js"}],"node_modules/d3-scale-chromatic/src/categorical/Pastel1.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js"}],"node_modules/d3-scale-chromatic/src/categorical/Pastel2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js"}],"node_modules/d3-scale-chromatic/src/categorical/Set1.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js"}],"node_modules/d3-scale-chromatic/src/categorical/Set2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js"}],"node_modules/d3-scale-chromatic/src/categorical/Set3.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js"}],"node_modules/d3-scale-chromatic/src/categorical/Tableau10.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js"}],"node_modules/d3-scale-chromatic/src/ramp.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Interpolate = require("d3-interpolate");

function _default(scheme) {
  return (0, _d3Interpolate.interpolateRgbBasis)(scheme[scheme.length - 1]);
}
},{"d3-interpolate":"node_modules/d3-interpolate/src/index.js"}],"node_modules/d3-scale-chromatic/src/diverging/BrBG.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("d8b365f5f5f55ab4ac", "a6611adfc27d80cdc1018571", "a6611adfc27df5f5f580cdc1018571", "8c510ad8b365f6e8c3c7eae55ab4ac01665e", "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e", "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e", "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e", "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30", "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/diverging/PRGn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("af8dc3f7f7f77fbf7b", "7b3294c2a5cfa6dba0008837", "7b3294c2a5cff7f7f7a6dba0008837", "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837", "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837", "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837", "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837", "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b", "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/diverging/PiYG.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e9a3c9f7f7f7a1d76a", "d01c8bf1b6dab8e1864dac26", "d01c8bf1b6daf7f7f7b8e1864dac26", "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221", "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221", "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221", "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221", "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419", "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/diverging/PuOr.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("998ec3f7f7f7f1a340", "5e3c99b2abd2fdb863e66101", "5e3c99b2abd2f7f7f7fdb863e66101", "542788998ec3d8daebfee0b6f1a340b35806", "542788998ec3d8daebf7f7f7fee0b6f1a340b35806", "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806", "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806", "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08", "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/diverging/RdBu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("ef8a62f7f7f767a9cf", "ca0020f4a58292c5de0571b0", "ca0020f4a582f7f7f792c5de0571b0", "b2182bef8a62fddbc7d1e5f067a9cf2166ac", "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac", "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac", "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac", "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061", "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/diverging/RdGy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("ef8a62ffffff999999", "ca0020f4a582bababa404040", "ca0020f4a582ffffffbababa404040", "b2182bef8a62fddbc7e0e0e09999994d4d4d", "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d", "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d", "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d", "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a", "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fc8d59ffffbf91bfdb", "d7191cfdae61abd9e92c7bb6", "d7191cfdae61ffffbfabd9e92c7bb6", "d73027fc8d59fee090e0f3f891bfdb4575b4", "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4", "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4", "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4", "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695", "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fc8d59ffffbf91cf60", "d7191cfdae61a6d96a1a9641", "d7191cfdae61ffffbfa6d96a1a9641", "d73027fc8d59fee08bd9ef8b91cf601a9850", "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850", "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850", "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850", "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837", "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/diverging/Spectral.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fc8d59ffffbf99d594", "d7191cfdae61abdda42b83ba", "d7191cfdae61ffffbfabdda42b83ba", "d53e4ffc8d59fee08be6f59899d5943288bd", "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd", "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd", "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd", "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2", "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e5f5f999d8c92ca25f", "edf8fbb2e2e266c2a4238b45", "edf8fbb2e2e266c2a42ca25f006d2c", "edf8fbccece699d8c966c2a42ca25f006d2c", "edf8fbccece699d8c966c2a441ae76238b45005824", "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824", "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e0ecf49ebcda8856a7", "edf8fbb3cde38c96c688419d", "edf8fbb3cde38c96c68856a7810f7c", "edf8fbbfd3e69ebcda8c96c68856a7810f7c", "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b", "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b", "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e0f3dba8ddb543a2ca", "f0f9e8bae4bc7bccc42b8cbe", "f0f9e8bae4bc7bccc443a2ca0868ac", "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac", "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e", "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e", "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fee8c8fdbb84e34a33", "fef0d9fdcc8afc8d59d7301f", "fef0d9fdcc8afc8d59e34a33b30000", "fef0d9fdd49efdbb84fc8d59e34a33b30000", "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000", "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000", "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("ece2f0a6bddb1c9099", "f6eff7bdc9e167a9cf02818a", "f6eff7bdc9e167a9cf1c9099016c59", "f6eff7d0d1e6a6bddb67a9cf1c9099016c59", "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450", "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450", "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("ece7f2a6bddb2b8cbe", "f1eef6bdc9e174a9cf0570b0", "f1eef6bdc9e174a9cf2b8cbe045a8d", "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d", "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b", "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b", "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e7e1efc994c7dd1c77", "f1eef6d7b5d8df65b0ce1256", "f1eef6d7b5d8df65b0dd1c77980043", "f1eef6d4b9dac994c7df65b0dd1c77980043", "f1eef6d4b9dac994c7df65b0e7298ace125691003f", "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f", "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fde0ddfa9fb5c51b8a", "feebe2fbb4b9f768a1ae017e", "feebe2fbb4b9f768a1c51b8a7a0177", "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177", "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177", "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177", "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("edf8b17fcdbb2c7fb8", "ffffcca1dab441b6c4225ea8", "ffffcca1dab441b6c42c7fb8253494", "ffffccc7e9b47fcdbb41b6c42c7fb8253494", "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84", "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84", "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("f7fcb9addd8e31a354", "ffffccc2e69978c679238443", "ffffccc2e69978c67931a354006837", "ffffccd9f0a3addd8e78c67931a354006837", "ffffccd9f0a3addd8e78c67941ab5d238443005a32", "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32", "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fff7bcfec44fd95f0e", "ffffd4fed98efe9929cc4c02", "ffffd4fed98efe9929d95f0e993404", "ffffd4fee391fec44ffe9929d95f0e993404", "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04", "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04", "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("ffeda0feb24cf03b20", "ffffb2fecc5cfd8d3ce31a1c", "ffffb2fecc5cfd8d3cf03b20bd0026", "ffffb2fed976feb24cfd8d3cf03b20bd0026", "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026", "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026", "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-single/Blues.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("deebf79ecae13182bd", "eff3ffbdd7e76baed62171b5", "eff3ffbdd7e76baed63182bd08519c", "eff3ffc6dbef9ecae16baed63182bd08519c", "eff3ffc6dbef9ecae16baed64292c62171b5084594", "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594", "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-single/Greens.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e5f5e0a1d99b31a354", "edf8e9bae4b374c476238b45", "edf8e9bae4b374c47631a354006d2c", "edf8e9c7e9c0a1d99b74c47631a354006d2c", "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32", "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32", "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-single/Greys.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("f0f0f0bdbdbd636363", "f7f7f7cccccc969696525252", "f7f7f7cccccc969696636363252525", "f7f7f7d9d9d9bdbdbd969696636363252525", "f7f7f7d9d9d9bdbdbd969696737373525252252525", "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525", "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-single/Purples.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("efedf5bcbddc756bb1", "f2f0f7cbc9e29e9ac86a51a3", "f2f0f7cbc9e29e9ac8756bb154278f", "f2f0f7dadaebbcbddc9e9ac8756bb154278f", "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486", "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486", "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-single/Reds.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fee0d2fc9272de2d26", "fee5d9fcae91fb6a4acb181d", "fee5d9fcae91fb6a4ade2d26a50f15", "fee5d9fcbba1fc9272fb6a4ade2d26a50f15", "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d", "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d", "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

var _ramp = _interopRequireDefault(require("../ramp.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fee6cefdae6be6550d", "feeddefdbe85fd8d3cd94701", "feeddefdbe85fd8d3ce6550da63603", "feeddefdd0a2fdae6bfd8d3ce6550da63603", "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04", "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04", "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js","../ramp.js":"node_modules/d3-scale-chromatic/src/ramp.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(t) {
  t = Math.max(0, Math.min(1, t));
  return "rgb(" + Math.max(0, Math.min(255, Math.round(-4.54 - t * (35.34 - t * (2381.73 - t * (6402.7 - t * (7024.72 - t * 2710.57))))))) + ", " + Math.max(0, Math.min(255, Math.round(32.49 + t * (170.73 + t * (52.82 - t * (131.46 - t * (176.58 - t * 67.37))))))) + ", " + Math.max(0, Math.min(255, Math.round(81.24 + t * (442.36 - t * (2482.43 - t * (6167.24 - t * (6614.94 - t * 2475.67))))))) + ")";
}
},{}],"node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _d3Color = require("d3-color");

var _d3Interpolate = require("d3-interpolate");

var _default = (0, _d3Interpolate.interpolateCubehelixLong)((0, _d3Color.cubehelix)(300, 0.5, 0.0), (0, _d3Color.cubehelix)(-240, 0.5, 1.0));

exports.default = _default;
},{"d3-color":"node_modules/d3-color/src/index.js","d3-interpolate":"node_modules/d3-interpolate/src/index.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.cool = exports.warm = void 0;

var _d3Color = require("d3-color");

var _d3Interpolate = require("d3-interpolate");

var warm = (0, _d3Interpolate.interpolateCubehelixLong)((0, _d3Color.cubehelix)(-100, 0.75, 0.35), (0, _d3Color.cubehelix)(80, 1.50, 0.8));
exports.warm = warm;
var cool = (0, _d3Interpolate.interpolateCubehelixLong)((0, _d3Color.cubehelix)(260, 0.75, 0.35), (0, _d3Color.cubehelix)(80, 1.50, 0.8));
exports.cool = cool;
var c = (0, _d3Color.cubehelix)();

function _default(t) {
  if (t < 0 || t > 1) t -= Math.floor(t);
  var ts = Math.abs(t - 0.5);
  c.h = 360 * t - 100;
  c.s = 1.5 - 1.5 * ts;
  c.l = 0.8 - 0.9 * ts;
  return c + "";
}
},{"d3-color":"node_modules/d3-color/src/index.js","d3-interpolate":"node_modules/d3-interpolate/src/index.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Color = require("d3-color");

var c = (0, _d3Color.rgb)(),
    pi_1_3 = Math.PI / 3,
    pi_2_3 = Math.PI * 2 / 3;

function _default(t) {
  var x;
  t = (0.5 - t) * Math.PI;
  c.r = 255 * (x = Math.sin(t)) * x;
  c.g = 255 * (x = Math.sin(t + pi_1_3)) * x;
  c.b = 255 * (x = Math.sin(t + pi_2_3)) * x;
  return c + "";
}
},{"d3-color":"node_modules/d3-color/src/index.js"}],"node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(t) {
  t = Math.max(0, Math.min(1, t));
  return "rgb(" + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + ", " + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + ", " + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66))))))) + ")";
}
},{}],"node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.plasma = exports.inferno = exports.magma = exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ramp(range) {
  var n = range.length;
  return function (t) {
    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}

var _default = ramp((0, _colors.default)("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));

exports.default = _default;
var magma = ramp((0, _colors.default)("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
exports.magma = magma;
var inferno = ramp((0, _colors.default)("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
exports.inferno = inferno;
var plasma = ramp((0, _colors.default)("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));
exports.plasma = plasma;
},{"../colors.js":"node_modules/d3-scale-chromatic/src/colors.js"}],"node_modules/d3-scale-chromatic/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "schemeCategory10", {
  enumerable: true,
  get: function () {
    return _category.default;
  }
});
Object.defineProperty(exports, "schemeAccent", {
  enumerable: true,
  get: function () {
    return _Accent.default;
  }
});
Object.defineProperty(exports, "schemeDark2", {
  enumerable: true,
  get: function () {
    return _Dark.default;
  }
});
Object.defineProperty(exports, "schemePaired", {
  enumerable: true,
  get: function () {
    return _Paired.default;
  }
});
Object.defineProperty(exports, "schemePastel1", {
  enumerable: true,
  get: function () {
    return _Pastel.default;
  }
});
Object.defineProperty(exports, "schemePastel2", {
  enumerable: true,
  get: function () {
    return _Pastel2.default;
  }
});
Object.defineProperty(exports, "schemeSet1", {
  enumerable: true,
  get: function () {
    return _Set.default;
  }
});
Object.defineProperty(exports, "schemeSet2", {
  enumerable: true,
  get: function () {
    return _Set2.default;
  }
});
Object.defineProperty(exports, "schemeSet3", {
  enumerable: true,
  get: function () {
    return _Set3.default;
  }
});
Object.defineProperty(exports, "schemeTableau10", {
  enumerable: true,
  get: function () {
    return _Tableau.default;
  }
});
Object.defineProperty(exports, "interpolateBrBG", {
  enumerable: true,
  get: function () {
    return _BrBG.default;
  }
});
Object.defineProperty(exports, "schemeBrBG", {
  enumerable: true,
  get: function () {
    return _BrBG.scheme;
  }
});
Object.defineProperty(exports, "interpolatePRGn", {
  enumerable: true,
  get: function () {
    return _PRGn.default;
  }
});
Object.defineProperty(exports, "schemePRGn", {
  enumerable: true,
  get: function () {
    return _PRGn.scheme;
  }
});
Object.defineProperty(exports, "interpolatePiYG", {
  enumerable: true,
  get: function () {
    return _PiYG.default;
  }
});
Object.defineProperty(exports, "schemePiYG", {
  enumerable: true,
  get: function () {
    return _PiYG.scheme;
  }
});
Object.defineProperty(exports, "interpolatePuOr", {
  enumerable: true,
  get: function () {
    return _PuOr.default;
  }
});
Object.defineProperty(exports, "schemePuOr", {
  enumerable: true,
  get: function () {
    return _PuOr.scheme;
  }
});
Object.defineProperty(exports, "interpolateRdBu", {
  enumerable: true,
  get: function () {
    return _RdBu.default;
  }
});
Object.defineProperty(exports, "schemeRdBu", {
  enumerable: true,
  get: function () {
    return _RdBu.scheme;
  }
});
Object.defineProperty(exports, "interpolateRdGy", {
  enumerable: true,
  get: function () {
    return _RdGy.default;
  }
});
Object.defineProperty(exports, "schemeRdGy", {
  enumerable: true,
  get: function () {
    return _RdGy.scheme;
  }
});
Object.defineProperty(exports, "interpolateRdYlBu", {
  enumerable: true,
  get: function () {
    return _RdYlBu.default;
  }
});
Object.defineProperty(exports, "schemeRdYlBu", {
  enumerable: true,
  get: function () {
    return _RdYlBu.scheme;
  }
});
Object.defineProperty(exports, "interpolateRdYlGn", {
  enumerable: true,
  get: function () {
    return _RdYlGn.default;
  }
});
Object.defineProperty(exports, "schemeRdYlGn", {
  enumerable: true,
  get: function () {
    return _RdYlGn.scheme;
  }
});
Object.defineProperty(exports, "interpolateSpectral", {
  enumerable: true,
  get: function () {
    return _Spectral.default;
  }
});
Object.defineProperty(exports, "schemeSpectral", {
  enumerable: true,
  get: function () {
    return _Spectral.scheme;
  }
});
Object.defineProperty(exports, "interpolateBuGn", {
  enumerable: true,
  get: function () {
    return _BuGn.default;
  }
});
Object.defineProperty(exports, "schemeBuGn", {
  enumerable: true,
  get: function () {
    return _BuGn.scheme;
  }
});
Object.defineProperty(exports, "interpolateBuPu", {
  enumerable: true,
  get: function () {
    return _BuPu.default;
  }
});
Object.defineProperty(exports, "schemeBuPu", {
  enumerable: true,
  get: function () {
    return _BuPu.scheme;
  }
});
Object.defineProperty(exports, "interpolateGnBu", {
  enumerable: true,
  get: function () {
    return _GnBu.default;
  }
});
Object.defineProperty(exports, "schemeGnBu", {
  enumerable: true,
  get: function () {
    return _GnBu.scheme;
  }
});
Object.defineProperty(exports, "interpolateOrRd", {
  enumerable: true,
  get: function () {
    return _OrRd.default;
  }
});
Object.defineProperty(exports, "schemeOrRd", {
  enumerable: true,
  get: function () {
    return _OrRd.scheme;
  }
});
Object.defineProperty(exports, "interpolatePuBuGn", {
  enumerable: true,
  get: function () {
    return _PuBuGn.default;
  }
});
Object.defineProperty(exports, "schemePuBuGn", {
  enumerable: true,
  get: function () {
    return _PuBuGn.scheme;
  }
});
Object.defineProperty(exports, "interpolatePuBu", {
  enumerable: true,
  get: function () {
    return _PuBu.default;
  }
});
Object.defineProperty(exports, "schemePuBu", {
  enumerable: true,
  get: function () {
    return _PuBu.scheme;
  }
});
Object.defineProperty(exports, "interpolatePuRd", {
  enumerable: true,
  get: function () {
    return _PuRd.default;
  }
});
Object.defineProperty(exports, "schemePuRd", {
  enumerable: true,
  get: function () {
    return _PuRd.scheme;
  }
});
Object.defineProperty(exports, "interpolateRdPu", {
  enumerable: true,
  get: function () {
    return _RdPu.default;
  }
});
Object.defineProperty(exports, "schemeRdPu", {
  enumerable: true,
  get: function () {
    return _RdPu.scheme;
  }
});
Object.defineProperty(exports, "interpolateYlGnBu", {
  enumerable: true,
  get: function () {
    return _YlGnBu.default;
  }
});
Object.defineProperty(exports, "schemeYlGnBu", {
  enumerable: true,
  get: function () {
    return _YlGnBu.scheme;
  }
});
Object.defineProperty(exports, "interpolateYlGn", {
  enumerable: true,
  get: function () {
    return _YlGn.default;
  }
});
Object.defineProperty(exports, "schemeYlGn", {
  enumerable: true,
  get: function () {
    return _YlGn.scheme;
  }
});
Object.defineProperty(exports, "interpolateYlOrBr", {
  enumerable: true,
  get: function () {
    return _YlOrBr.default;
  }
});
Object.defineProperty(exports, "schemeYlOrBr", {
  enumerable: true,
  get: function () {
    return _YlOrBr.scheme;
  }
});
Object.defineProperty(exports, "interpolateYlOrRd", {
  enumerable: true,
  get: function () {
    return _YlOrRd.default;
  }
});
Object.defineProperty(exports, "schemeYlOrRd", {
  enumerable: true,
  get: function () {
    return _YlOrRd.scheme;
  }
});
Object.defineProperty(exports, "interpolateBlues", {
  enumerable: true,
  get: function () {
    return _Blues.default;
  }
});
Object.defineProperty(exports, "schemeBlues", {
  enumerable: true,
  get: function () {
    return _Blues.scheme;
  }
});
Object.defineProperty(exports, "interpolateGreens", {
  enumerable: true,
  get: function () {
    return _Greens.default;
  }
});
Object.defineProperty(exports, "schemeGreens", {
  enumerable: true,
  get: function () {
    return _Greens.scheme;
  }
});
Object.defineProperty(exports, "interpolateGreys", {
  enumerable: true,
  get: function () {
    return _Greys.default;
  }
});
Object.defineProperty(exports, "schemeGreys", {
  enumerable: true,
  get: function () {
    return _Greys.scheme;
  }
});
Object.defineProperty(exports, "interpolatePurples", {
  enumerable: true,
  get: function () {
    return _Purples.default;
  }
});
Object.defineProperty(exports, "schemePurples", {
  enumerable: true,
  get: function () {
    return _Purples.scheme;
  }
});
Object.defineProperty(exports, "interpolateReds", {
  enumerable: true,
  get: function () {
    return _Reds.default;
  }
});
Object.defineProperty(exports, "schemeReds", {
  enumerable: true,
  get: function () {
    return _Reds.scheme;
  }
});
Object.defineProperty(exports, "interpolateOranges", {
  enumerable: true,
  get: function () {
    return _Oranges.default;
  }
});
Object.defineProperty(exports, "schemeOranges", {
  enumerable: true,
  get: function () {
    return _Oranges.scheme;
  }
});
Object.defineProperty(exports, "interpolateCividis", {
  enumerable: true,
  get: function () {
    return _cividis.default;
  }
});
Object.defineProperty(exports, "interpolateCubehelixDefault", {
  enumerable: true,
  get: function () {
    return _cubehelix.default;
  }
});
Object.defineProperty(exports, "interpolateRainbow", {
  enumerable: true,
  get: function () {
    return _rainbow.default;
  }
});
Object.defineProperty(exports, "interpolateWarm", {
  enumerable: true,
  get: function () {
    return _rainbow.warm;
  }
});
Object.defineProperty(exports, "interpolateCool", {
  enumerable: true,
  get: function () {
    return _rainbow.cool;
  }
});
Object.defineProperty(exports, "interpolateSinebow", {
  enumerable: true,
  get: function () {
    return _sinebow.default;
  }
});
Object.defineProperty(exports, "interpolateTurbo", {
  enumerable: true,
  get: function () {
    return _turbo.default;
  }
});
Object.defineProperty(exports, "interpolateViridis", {
  enumerable: true,
  get: function () {
    return _viridis.default;
  }
});
Object.defineProperty(exports, "interpolateMagma", {
  enumerable: true,
  get: function () {
    return _viridis.magma;
  }
});
Object.defineProperty(exports, "interpolateInferno", {
  enumerable: true,
  get: function () {
    return _viridis.inferno;
  }
});
Object.defineProperty(exports, "interpolatePlasma", {
  enumerable: true,
  get: function () {
    return _viridis.plasma;
  }
});

var _category = _interopRequireDefault(require("./categorical/category10.js"));

var _Accent = _interopRequireDefault(require("./categorical/Accent.js"));

var _Dark = _interopRequireDefault(require("./categorical/Dark2.js"));

var _Paired = _interopRequireDefault(require("./categorical/Paired.js"));

var _Pastel = _interopRequireDefault(require("./categorical/Pastel1.js"));

var _Pastel2 = _interopRequireDefault(require("./categorical/Pastel2.js"));

var _Set = _interopRequireDefault(require("./categorical/Set1.js"));

var _Set2 = _interopRequireDefault(require("./categorical/Set2.js"));

var _Set3 = _interopRequireDefault(require("./categorical/Set3.js"));

var _Tableau = _interopRequireDefault(require("./categorical/Tableau10.js"));

var _BrBG = _interopRequireWildcard(require("./diverging/BrBG.js"));

var _PRGn = _interopRequireWildcard(require("./diverging/PRGn.js"));

var _PiYG = _interopRequireWildcard(require("./diverging/PiYG.js"));

var _PuOr = _interopRequireWildcard(require("./diverging/PuOr.js"));

var _RdBu = _interopRequireWildcard(require("./diverging/RdBu.js"));

var _RdGy = _interopRequireWildcard(require("./diverging/RdGy.js"));

var _RdYlBu = _interopRequireWildcard(require("./diverging/RdYlBu.js"));

var _RdYlGn = _interopRequireWildcard(require("./diverging/RdYlGn.js"));

var _Spectral = _interopRequireWildcard(require("./diverging/Spectral.js"));

var _BuGn = _interopRequireWildcard(require("./sequential-multi/BuGn.js"));

var _BuPu = _interopRequireWildcard(require("./sequential-multi/BuPu.js"));

var _GnBu = _interopRequireWildcard(require("./sequential-multi/GnBu.js"));

var _OrRd = _interopRequireWildcard(require("./sequential-multi/OrRd.js"));

var _PuBuGn = _interopRequireWildcard(require("./sequential-multi/PuBuGn.js"));

var _PuBu = _interopRequireWildcard(require("./sequential-multi/PuBu.js"));

var _PuRd = _interopRequireWildcard(require("./sequential-multi/PuRd.js"));

var _RdPu = _interopRequireWildcard(require("./sequential-multi/RdPu.js"));

var _YlGnBu = _interopRequireWildcard(require("./sequential-multi/YlGnBu.js"));

var _YlGn = _interopRequireWildcard(require("./sequential-multi/YlGn.js"));

var _YlOrBr = _interopRequireWildcard(require("./sequential-multi/YlOrBr.js"));

var _YlOrRd = _interopRequireWildcard(require("./sequential-multi/YlOrRd.js"));

var _Blues = _interopRequireWildcard(require("./sequential-single/Blues.js"));

var _Greens = _interopRequireWildcard(require("./sequential-single/Greens.js"));

var _Greys = _interopRequireWildcard(require("./sequential-single/Greys.js"));

var _Purples = _interopRequireWildcard(require("./sequential-single/Purples.js"));

var _Reds = _interopRequireWildcard(require("./sequential-single/Reds.js"));

var _Oranges = _interopRequireWildcard(require("./sequential-single/Oranges.js"));

var _cividis = _interopRequireDefault(require("./sequential-multi/cividis.js"));

var _cubehelix = _interopRequireDefault(require("./sequential-multi/cubehelix.js"));

var _rainbow = _interopRequireWildcard(require("./sequential-multi/rainbow.js"));

var _sinebow = _interopRequireDefault(require("./sequential-multi/sinebow.js"));

var _turbo = _interopRequireDefault(require("./sequential-multi/turbo.js"));

var _viridis = _interopRequireWildcard(require("./sequential-multi/viridis.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./categorical/category10.js":"node_modules/d3-scale-chromatic/src/categorical/category10.js","./categorical/Accent.js":"node_modules/d3-scale-chromatic/src/categorical/Accent.js","./categorical/Dark2.js":"node_modules/d3-scale-chromatic/src/categorical/Dark2.js","./categorical/Paired.js":"node_modules/d3-scale-chromatic/src/categorical/Paired.js","./categorical/Pastel1.js":"node_modules/d3-scale-chromatic/src/categorical/Pastel1.js","./categorical/Pastel2.js":"node_modules/d3-scale-chromatic/src/categorical/Pastel2.js","./categorical/Set1.js":"node_modules/d3-scale-chromatic/src/categorical/Set1.js","./categorical/Set2.js":"node_modules/d3-scale-chromatic/src/categorical/Set2.js","./categorical/Set3.js":"node_modules/d3-scale-chromatic/src/categorical/Set3.js","./categorical/Tableau10.js":"node_modules/d3-scale-chromatic/src/categorical/Tableau10.js","./diverging/BrBG.js":"node_modules/d3-scale-chromatic/src/diverging/BrBG.js","./diverging/PRGn.js":"node_modules/d3-scale-chromatic/src/diverging/PRGn.js","./diverging/PiYG.js":"node_modules/d3-scale-chromatic/src/diverging/PiYG.js","./diverging/PuOr.js":"node_modules/d3-scale-chromatic/src/diverging/PuOr.js","./diverging/RdBu.js":"node_modules/d3-scale-chromatic/src/diverging/RdBu.js","./diverging/RdGy.js":"node_modules/d3-scale-chromatic/src/diverging/RdGy.js","./diverging/RdYlBu.js":"node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js","./diverging/RdYlGn.js":"node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js","./diverging/Spectral.js":"node_modules/d3-scale-chromatic/src/diverging/Spectral.js","./sequential-multi/BuGn.js":"node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js","./sequential-multi/BuPu.js":"node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js","./sequential-multi/GnBu.js":"node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js","./sequential-multi/OrRd.js":"node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js","./sequential-multi/PuBuGn.js":"node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js","./sequential-multi/PuBu.js":"node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js","./sequential-multi/PuRd.js":"node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js","./sequential-multi/RdPu.js":"node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js","./sequential-multi/YlGnBu.js":"node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js","./sequential-multi/YlGn.js":"node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js","./sequential-multi/YlOrBr.js":"node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js","./sequential-multi/YlOrRd.js":"node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js","./sequential-single/Blues.js":"node_modules/d3-scale-chromatic/src/sequential-single/Blues.js","./sequential-single/Greens.js":"node_modules/d3-scale-chromatic/src/sequential-single/Greens.js","./sequential-single/Greys.js":"node_modules/d3-scale-chromatic/src/sequential-single/Greys.js","./sequential-single/Purples.js":"node_modules/d3-scale-chromatic/src/sequential-single/Purples.js","./sequential-single/Reds.js":"node_modules/d3-scale-chromatic/src/sequential-single/Reds.js","./sequential-single/Oranges.js":"node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js","./sequential-multi/cividis.js":"node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js","./sequential-multi/cubehelix.js":"node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js","./sequential-multi/rainbow.js":"node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js","./sequential-multi/sinebow.js":"node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js","./sequential-multi/turbo.js":"node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js","./sequential-multi/viridis.js":"node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js"}],"node_modules/d3-shape/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function constant() {
    return x;
  };
}
},{}],"node_modules/d3-shape/src/math.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acos = acos;
exports.asin = asin;
exports.tau = exports.halfPi = exports.pi = exports.epsilon = exports.sqrt = exports.sin = exports.min = exports.max = exports.cos = exports.atan2 = exports.abs = void 0;
var abs = Math.abs;
exports.abs = abs;
var atan2 = Math.atan2;
exports.atan2 = atan2;
var cos = Math.cos;
exports.cos = cos;
var max = Math.max;
exports.max = max;
var min = Math.min;
exports.min = min;
var sin = Math.sin;
exports.sin = sin;
var sqrt = Math.sqrt;
exports.sqrt = sqrt;
var epsilon = 1e-12;
exports.epsilon = epsilon;
var pi = Math.PI;
exports.pi = pi;
var halfPi = pi / 2;
exports.halfPi = halfPi;
var tau = 2 * pi;
exports.tau = tau;

function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}

function asin(x) {
  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
}
},{}],"node_modules/d3-shape/src/arc.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Path = require("d3-path");

var _constant = _interopRequireDefault(require("./constant.js"));

var _math = require("./math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function arcInnerRadius(d) {
  return d.innerRadius;
}

function arcOuterRadius(d) {
  return d.outerRadius;
}

function arcStartAngle(d) {
  return d.startAngle;
}

function arcEndAngle(d) {
  return d.endAngle;
}

function arcPadAngle(d) {
  return d && d.padAngle; // Note: optional!
}

function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
  var x10 = x1 - x0,
      y10 = y1 - y0,
      x32 = x3 - x2,
      y32 = y3 - y2,
      t = y32 * x10 - x32 * y10;
  if (t * t < _math.epsilon) return;
  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
  return [x0 + t * x10, y0 + t * y10];
} // Compute perpendicular offset line of length rc.
// http://mathworld.wolfram.com/Circle-LineIntersection.html


function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1,
      y01 = y0 - y1,
      lo = (cw ? rc : -rc) / (0, _math.sqrt)(x01 * x01 + y01 * y01),
      ox = lo * y01,
      oy = -lo * x01,
      x11 = x0 + ox,
      y11 = y0 + oy,
      x10 = x1 + ox,
      y10 = y1 + oy,
      x00 = (x11 + x10) / 2,
      y00 = (y11 + y10) / 2,
      dx = x10 - x11,
      dy = y10 - y11,
      d2 = dx * dx + dy * dy,
      r = r1 - rc,
      D = x11 * y10 - x10 * y11,
      d = (dy < 0 ? -1 : 1) * (0, _math.sqrt)((0, _math.max)(0, r * r * d2 - D * D)),
      cx0 = (D * dy - dx * d) / d2,
      cy0 = (-D * dx - dy * d) / d2,
      cx1 = (D * dy + dx * d) / d2,
      cy1 = (-D * dx + dy * d) / d2,
      dx0 = cx0 - x00,
      dy0 = cy0 - y00,
      dx1 = cx1 - x00,
      dy1 = cy1 - y00; // Pick the closer of the two intersection points.
  // TODO Is there a faster way to determine which intersection to use?

  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r - 1),
    y11: cy0 * (r1 / r - 1)
  };
}

function _default() {
  var innerRadius = arcInnerRadius,
      outerRadius = arcOuterRadius,
      cornerRadius = (0, _constant.default)(0),
      padRadius = null,
      startAngle = arcStartAngle,
      endAngle = arcEndAngle,
      padAngle = arcPadAngle,
      context = null;

  function arc() {
    var buffer,
        r,
        r0 = +innerRadius.apply(this, arguments),
        r1 = +outerRadius.apply(this, arguments),
        a0 = startAngle.apply(this, arguments) - _math.halfPi,
        a1 = endAngle.apply(this, arguments) - _math.halfPi,
        da = (0, _math.abs)(a1 - a0),
        cw = a1 > a0;

    if (!context) context = buffer = (0, _d3Path.path)(); // Ensure that the outer radius is always larger than the inner radius.

    if (r1 < r0) r = r1, r1 = r0, r0 = r; // Is it a point?

    if (!(r1 > _math.epsilon)) context.moveTo(0, 0); // Or is it a circle or annulus?
    else if (da > _math.tau - _math.epsilon) {
        context.moveTo(r1 * (0, _math.cos)(a0), r1 * (0, _math.sin)(a0));
        context.arc(0, 0, r1, a0, a1, !cw);

        if (r0 > _math.epsilon) {
          context.moveTo(r0 * (0, _math.cos)(a1), r0 * (0, _math.sin)(a1));
          context.arc(0, 0, r0, a1, a0, cw);
        }
      } // Or is it a circular or annular sector?
      else {
          var a01 = a0,
              a11 = a1,
              a00 = a0,
              a10 = a1,
              da0 = da,
              da1 = da,
              ap = padAngle.apply(this, arguments) / 2,
              rp = ap > _math.epsilon && (padRadius ? +padRadius.apply(this, arguments) : (0, _math.sqrt)(r0 * r0 + r1 * r1)),
              rc = (0, _math.min)((0, _math.abs)(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
              rc0 = rc,
              rc1 = rc,
              t0,
              t1; // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.

          if (rp > _math.epsilon) {
            var p0 = (0, _math.asin)(rp / r0 * (0, _math.sin)(ap)),
                p1 = (0, _math.asin)(rp / r1 * (0, _math.sin)(ap));
            if ((da0 -= p0 * 2) > _math.epsilon) p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;else da0 = 0, a00 = a10 = (a0 + a1) / 2;
            if ((da1 -= p1 * 2) > _math.epsilon) p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;else da1 = 0, a01 = a11 = (a0 + a1) / 2;
          }

          var x01 = r1 * (0, _math.cos)(a01),
              y01 = r1 * (0, _math.sin)(a01),
              x10 = r0 * (0, _math.cos)(a10),
              y10 = r0 * (0, _math.sin)(a10); // Apply rounded corners?

          if (rc > _math.epsilon) {
            var x11 = r1 * (0, _math.cos)(a11),
                y11 = r1 * (0, _math.sin)(a11),
                x00 = r0 * (0, _math.cos)(a00),
                y00 = r0 * (0, _math.sin)(a00),
                oc; // Restrict the corner radius according to the sector angle.

            if (da < _math.pi && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
              var ax = x01 - oc[0],
                  ay = y01 - oc[1],
                  bx = x11 - oc[0],
                  by = y11 - oc[1],
                  kc = 1 / (0, _math.sin)((0, _math.acos)((ax * bx + ay * by) / ((0, _math.sqrt)(ax * ax + ay * ay) * (0, _math.sqrt)(bx * bx + by * by))) / 2),
                  lc = (0, _math.sqrt)(oc[0] * oc[0] + oc[1] * oc[1]);
              rc0 = (0, _math.min)(rc, (r0 - lc) / (kc - 1));
              rc1 = (0, _math.min)(rc, (r1 - lc) / (kc + 1));
            }
          } // Is the sector collapsed to a line?


          if (!(da1 > _math.epsilon)) context.moveTo(x01, y01); // Does the sector’s outer ring have rounded corners?
          else if (rc1 > _math.epsilon) {
              t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
              t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
              context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?

              if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.
              else {
                  context.arc(t0.cx, t0.cy, rc1, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t0.y11, t0.x11), !cw);
                  context.arc(0, 0, r1, (0, _math.atan2)(t0.cy + t0.y11, t0.cx + t0.x11), (0, _math.atan2)(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
                  context.arc(t1.cx, t1.cy, rc1, (0, _math.atan2)(t1.y11, t1.x11), (0, _math.atan2)(t1.y01, t1.x01), !cw);
                }
            } // Or is the outer ring just a circular arc?
            else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw); // Is there no inner ring, and it’s a circular sector?
          // Or perhaps it’s an annular sector collapsed due to padding?

          if (!(r0 > _math.epsilon) || !(da0 > _math.epsilon)) context.lineTo(x10, y10); // Does the sector’s inner ring (or point) have rounded corners?
          else if (rc0 > _math.epsilon) {
              t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
              t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
              context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?

              if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.
              else {
                  context.arc(t0.cx, t0.cy, rc0, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t0.y11, t0.x11), !cw);
                  context.arc(0, 0, r0, (0, _math.atan2)(t0.cy + t0.y11, t0.cx + t0.x11), (0, _math.atan2)(t1.cy + t1.y11, t1.cx + t1.x11), cw);
                  context.arc(t1.cx, t1.cy, rc0, (0, _math.atan2)(t1.y11, t1.x11), (0, _math.atan2)(t1.y01, t1.x01), !cw);
                }
            } // Or is the inner ring just a circular arc?
            else context.arc(0, 0, r0, a10, a00, cw);
        }
    context.closePath();
    if (buffer) return context = null, buffer + "" || null;
  }

  arc.centroid = function () {
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - _math.pi / 2;
    return [(0, _math.cos)(a) * r, (0, _math.sin)(a) * r];
  };

  arc.innerRadius = function (_) {
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : innerRadius;
  };

  arc.outerRadius = function (_) {
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : outerRadius;
  };

  arc.cornerRadius = function (_) {
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : cornerRadius;
  };

  arc.padRadius = function (_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : padRadius;
  };

  arc.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : startAngle;
  };

  arc.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : endAngle;
  };

  arc.padAngle = function (_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : padAngle;
  };

  arc.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, arc) : context;
  };

  return arc;
}
},{"d3-path":"node_modules/d3-path/src/index.js","./constant.js":"node_modules/d3-shape/src/constant.js","./math.js":"node_modules/d3-shape/src/math.js"}],"node_modules/d3-shape/src/curve/linear.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function Linear(context) {
  this._context = context;
}

Linear.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
      // proceed

      default:
        this._context.lineTo(x, y);

        break;
    }
  }
};

function _default(context) {
  return new Linear(context);
}
},{}],"node_modules/d3-shape/src/point.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.x = x;
exports.y = y;

function x(p) {
  return p[0];
}

function y(p) {
  return p[1];
}
},{}],"node_modules/d3-shape/src/line.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Path = require("d3-path");

var _constant = _interopRequireDefault(require("./constant.js"));

var _linear = _interopRequireDefault(require("./curve/linear.js"));

var _point = require("./point.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var x = _point.x,
      y = _point.y,
      defined = (0, _constant.default)(true),
      context = null,
      curve = _linear.default,
      output = null;

  function line(data) {
    var i,
        n = data.length,
        d,
        defined0 = false,
        buffer;
    if (context == null) output = curve(buffer = (0, _d3Path.path)());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) output.lineStart();else output.lineEnd();
      }

      if (defined0) output.point(+x(d, i, data), +y(d, i, data));
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  line.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), line) : x;
  };

  line.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), line) : y;
  };

  line.defined = function (_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : (0, _constant.default)(!!_), line) : defined;
  };

  line.curve = function (_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
  };

  line.context = function (_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  };

  return line;
}
},{"d3-path":"node_modules/d3-path/src/index.js","./constant.js":"node_modules/d3-shape/src/constant.js","./curve/linear.js":"node_modules/d3-shape/src/curve/linear.js","./point.js":"node_modules/d3-shape/src/point.js"}],"node_modules/d3-shape/src/area.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Path = require("d3-path");

var _constant = _interopRequireDefault(require("./constant.js"));

var _linear = _interopRequireDefault(require("./curve/linear.js"));

var _line = _interopRequireDefault(require("./line.js"));

var _point = require("./point.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var x0 = _point.x,
      x1 = null,
      y0 = (0, _constant.default)(0),
      y1 = _point.y,
      defined = (0, _constant.default)(true),
      context = null,
      curve = _linear.default,
      output = null;

  function area(data) {
    var i,
        j,
        k,
        n = data.length,
        d,
        defined0 = false,
        buffer,
        x0z = new Array(n),
        y0z = new Array(n);
    if (context == null) output = curve(buffer = (0, _d3Path.path)());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) {
          j = i;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();

          for (k = i - 1; k >= j; --k) {
            output.point(x0z[k], y0z[k]);
          }

          output.lineEnd();
          output.areaEnd();
        }
      }

      if (defined0) {
        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
      }
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  function arealine() {
    return (0, _line.default)().defined(defined).curve(curve).context(context);
  }

  area.x = function (_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : (0, _constant.default)(+_), x1 = null, area) : x0;
  };

  area.x0 = function (_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : (0, _constant.default)(+_), area) : x0;
  };

  area.x1 = function (_) {
    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : (0, _constant.default)(+_), area) : x1;
  };

  area.y = function (_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : (0, _constant.default)(+_), y1 = null, area) : y0;
  };

  area.y0 = function (_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : (0, _constant.default)(+_), area) : y0;
  };

  area.y1 = function (_) {
    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : (0, _constant.default)(+_), area) : y1;
  };

  area.lineX0 = area.lineY0 = function () {
    return arealine().x(x0).y(y0);
  };

  area.lineY1 = function () {
    return arealine().x(x0).y(y1);
  };

  area.lineX1 = function () {
    return arealine().x(x1).y(y0);
  };

  area.defined = function (_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : (0, _constant.default)(!!_), area) : defined;
  };

  area.curve = function (_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
  };

  area.context = function (_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
  };

  return area;
}
},{"d3-path":"node_modules/d3-path/src/index.js","./constant.js":"node_modules/d3-shape/src/constant.js","./curve/linear.js":"node_modules/d3-shape/src/curve/linear.js","./line.js":"node_modules/d3-shape/src/line.js","./point.js":"node_modules/d3-shape/src/point.js"}],"node_modules/d3-shape/src/descending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}
},{}],"node_modules/d3-shape/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(d) {
  return d;
}
},{}],"node_modules/d3-shape/src/pie.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant.js"));

var _descending = _interopRequireDefault(require("./descending.js"));

var _identity = _interopRequireDefault(require("./identity.js"));

var _math = require("./math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var value = _identity.default,
      sortValues = _descending.default,
      sort = null,
      startAngle = (0, _constant.default)(0),
      endAngle = (0, _constant.default)(_math.tau),
      padAngle = (0, _constant.default)(0);

  function pie(data) {
    var i,
        n = data.length,
        j,
        k,
        sum = 0,
        index = new Array(n),
        arcs = new Array(n),
        a0 = +startAngle.apply(this, arguments),
        da = Math.min(_math.tau, Math.max(-_math.tau, endAngle.apply(this, arguments) - a0)),
        a1,
        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
        pa = p * (da < 0 ? -1 : 1),
        v;

    for (i = 0; i < n; ++i) {
      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
        sum += v;
      }
    } // Optionally sort the arcs by previously-computed values or by data.


    if (sortValues != null) index.sort(function (i, j) {
      return sortValues(arcs[i], arcs[j]);
    });else if (sort != null) index.sort(function (i, j) {
      return sort(data[i], data[j]);
    }); // Compute the arcs! They are stored in the original data's order.

    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
        data: data[j],
        index: i,
        value: v,
        startAngle: a0,
        endAngle: a1,
        padAngle: p
      };
    }

    return arcs;
  }

  pie.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : (0, _constant.default)(+_), pie) : value;
  };

  pie.sortValues = function (_) {
    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
  };

  pie.sort = function (_) {
    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
  };

  pie.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), pie) : startAngle;
  };

  pie.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), pie) : endAngle;
  };

  pie.padAngle = function (_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), pie) : padAngle;
  };

  return pie;
}
},{"./constant.js":"node_modules/d3-shape/src/constant.js","./descending.js":"node_modules/d3-shape/src/descending.js","./identity.js":"node_modules/d3-shape/src/identity.js","./math.js":"node_modules/d3-shape/src/math.js"}],"node_modules/d3-shape/src/curve/radial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = curveRadial;
exports.curveRadialLinear = void 0;

var _linear = _interopRequireDefault(require("./linear.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var curveRadialLinear = curveRadial(_linear.default);
exports.curveRadialLinear = curveRadialLinear;

function Radial(curve) {
  this._curve = curve;
}

Radial.prototype = {
  areaStart: function () {
    this._curve.areaStart();
  },
  areaEnd: function () {
    this._curve.areaEnd();
  },
  lineStart: function () {
    this._curve.lineStart();
  },
  lineEnd: function () {
    this._curve.lineEnd();
  },
  point: function (a, r) {
    this._curve.point(r * Math.sin(a), r * -Math.cos(a));
  }
};

function curveRadial(curve) {
  function radial(context) {
    return new Radial(curve(context));
  }

  radial._curve = curve;
  return radial;
}
},{"./linear.js":"node_modules/d3-shape/src/curve/linear.js"}],"node_modules/d3-shape/src/lineRadial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lineRadial = lineRadial;
exports.default = _default;

var _radial = _interopRequireWildcard(require("./curve/radial.js"));

var _line = _interopRequireDefault(require("./line.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function lineRadial(l) {
  var c = l.curve;
  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;

  l.curve = function (_) {
    return arguments.length ? c((0, _radial.default)(_)) : c()._curve;
  };

  return l;
}

function _default() {
  return lineRadial((0, _line.default)().curve(_radial.curveRadialLinear));
}
},{"./curve/radial.js":"node_modules/d3-shape/src/curve/radial.js","./line.js":"node_modules/d3-shape/src/line.js"}],"node_modules/d3-shape/src/areaRadial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _radial = _interopRequireWildcard(require("./curve/radial.js"));

var _area = _interopRequireDefault(require("./area.js"));

var _lineRadial = require("./lineRadial.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _default() {
  var a = (0, _area.default)().curve(_radial.curveRadialLinear),
      c = a.curve,
      x0 = a.lineX0,
      x1 = a.lineX1,
      y0 = a.lineY0,
      y1 = a.lineY1;
  a.angle = a.x, delete a.x;
  a.startAngle = a.x0, delete a.x0;
  a.endAngle = a.x1, delete a.x1;
  a.radius = a.y, delete a.y;
  a.innerRadius = a.y0, delete a.y0;
  a.outerRadius = a.y1, delete a.y1;
  a.lineStartAngle = function () {
    return (0, _lineRadial.lineRadial)(x0());
  }, delete a.lineX0;
  a.lineEndAngle = function () {
    return (0, _lineRadial.lineRadial)(x1());
  }, delete a.lineX1;
  a.lineInnerRadius = function () {
    return (0, _lineRadial.lineRadial)(y0());
  }, delete a.lineY0;
  a.lineOuterRadius = function () {
    return (0, _lineRadial.lineRadial)(y1());
  }, delete a.lineY1;

  a.curve = function (_) {
    return arguments.length ? c((0, _radial.default)(_)) : c()._curve;
  };

  return a;
}
},{"./curve/radial.js":"node_modules/d3-shape/src/curve/radial.js","./area.js":"node_modules/d3-shape/src/area.js","./lineRadial.js":"node_modules/d3-shape/src/lineRadial.js"}],"node_modules/d3-shape/src/pointRadial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x, y) {
  return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];
}
},{}],"node_modules/d3-shape/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = void 0;
var slice = Array.prototype.slice;
exports.slice = slice;
},{}],"node_modules/d3-shape/src/link/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linkHorizontal = linkHorizontal;
exports.linkVertical = linkVertical;
exports.linkRadial = linkRadial;

var _d3Path = require("d3-path");

var _array = require("../array.js");

var _constant = _interopRequireDefault(require("../constant.js"));

var _point = require("../point.js");

var _pointRadial = _interopRequireDefault(require("../pointRadial.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function linkSource(d) {
  return d.source;
}

function linkTarget(d) {
  return d.target;
}

function link(curve) {
  var source = linkSource,
      target = linkTarget,
      x = _point.x,
      y = _point.y,
      context = null;

  function link() {
    var buffer,
        argv = _array.slice.call(arguments),
        s = source.apply(this, argv),
        t = target.apply(this, argv);

    if (!context) context = buffer = (0, _d3Path.path)();
    curve(context, +x.apply(this, (argv[0] = s, argv)), +y.apply(this, argv), +x.apply(this, (argv[0] = t, argv)), +y.apply(this, argv));
    if (buffer) return context = null, buffer + "" || null;
  }

  link.source = function (_) {
    return arguments.length ? (source = _, link) : source;
  };

  link.target = function (_) {
    return arguments.length ? (target = _, link) : target;
  };

  link.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), link) : x;
  };

  link.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), link) : y;
  };

  link.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, link) : context;
  };

  return link;
}

function curveHorizontal(context, x0, y0, x1, y1) {
  context.moveTo(x0, y0);
  context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);
}

function curveVertical(context, x0, y0, x1, y1) {
  context.moveTo(x0, y0);
  context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);
}

function curveRadial(context, x0, y0, x1, y1) {
  var p0 = (0, _pointRadial.default)(x0, y0),
      p1 = (0, _pointRadial.default)(x0, y0 = (y0 + y1) / 2),
      p2 = (0, _pointRadial.default)(x1, y0),
      p3 = (0, _pointRadial.default)(x1, y1);
  context.moveTo(p0[0], p0[1]);
  context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);
}

function linkHorizontal() {
  return link(curveHorizontal);
}

function linkVertical() {
  return link(curveVertical);
}

function linkRadial() {
  var l = link(curveRadial);
  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;
  return l;
}
},{"d3-path":"node_modules/d3-path/src/index.js","../array.js":"node_modules/d3-shape/src/array.js","../constant.js":"node_modules/d3-shape/src/constant.js","../point.js":"node_modules/d3-shape/src/point.js","../pointRadial.js":"node_modules/d3-shape/src/pointRadial.js"}],"node_modules/d3-shape/src/symbol/circle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math.js");

var _default = {
  draw: function (context, size) {
    var r = Math.sqrt(size / _math.pi);
    context.moveTo(r, 0);
    context.arc(0, 0, r, 0, _math.tau);
  }
};
exports.default = _default;
},{"../math.js":"node_modules/d3-shape/src/math.js"}],"node_modules/d3-shape/src/symbol/cross.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  draw: function (context, size) {
    var r = Math.sqrt(size / 5) / 2;
    context.moveTo(-3 * r, -r);
    context.lineTo(-r, -r);
    context.lineTo(-r, -3 * r);
    context.lineTo(r, -3 * r);
    context.lineTo(r, -r);
    context.lineTo(3 * r, -r);
    context.lineTo(3 * r, r);
    context.lineTo(r, r);
    context.lineTo(r, 3 * r);
    context.lineTo(-r, 3 * r);
    context.lineTo(-r, r);
    context.lineTo(-3 * r, r);
    context.closePath();
  }
};
exports.default = _default;
},{}],"node_modules/d3-shape/src/symbol/diamond.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var tan30 = Math.sqrt(1 / 3),
    tan30_2 = tan30 * 2;
var _default = {
  draw: function (context, size) {
    var y = Math.sqrt(size / tan30_2),
        x = y * tan30;
    context.moveTo(0, -y);
    context.lineTo(x, 0);
    context.lineTo(0, y);
    context.lineTo(-x, 0);
    context.closePath();
  }
};
exports.default = _default;
},{}],"node_modules/d3-shape/src/symbol/star.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math.js");

var ka = 0.89081309152928522810,
    kr = Math.sin(_math.pi / 10) / Math.sin(7 * _math.pi / 10),
    kx = Math.sin(_math.tau / 10) * kr,
    ky = -Math.cos(_math.tau / 10) * kr;
var _default = {
  draw: function (context, size) {
    var r = Math.sqrt(size * ka),
        x = kx * r,
        y = ky * r;
    context.moveTo(0, -r);
    context.lineTo(x, y);

    for (var i = 1; i < 5; ++i) {
      var a = _math.tau * i / 5,
          c = Math.cos(a),
          s = Math.sin(a);
      context.lineTo(s * r, -c * r);
      context.lineTo(c * x - s * y, s * x + c * y);
    }

    context.closePath();
  }
};
exports.default = _default;
},{"../math.js":"node_modules/d3-shape/src/math.js"}],"node_modules/d3-shape/src/symbol/square.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  draw: function (context, size) {
    var w = Math.sqrt(size),
        x = -w / 2;
    context.rect(x, x, w, w);
  }
};
exports.default = _default;
},{}],"node_modules/d3-shape/src/symbol/triangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var sqrt3 = Math.sqrt(3);
var _default = {
  draw: function (context, size) {
    var y = -Math.sqrt(size / (sqrt3 * 3));
    context.moveTo(0, y * 2);
    context.lineTo(-sqrt3 * y, -y);
    context.lineTo(sqrt3 * y, -y);
    context.closePath();
  }
};
exports.default = _default;
},{}],"node_modules/d3-shape/src/symbol/wye.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var c = -0.5,
    s = Math.sqrt(3) / 2,
    k = 1 / Math.sqrt(12),
    a = (k / 2 + 1) * 3;
var _default = {
  draw: function (context, size) {
    var r = Math.sqrt(size / a),
        x0 = r / 2,
        y0 = r * k,
        x1 = x0,
        y1 = r * k + r,
        x2 = -x1,
        y2 = y1;
    context.moveTo(x0, y0);
    context.lineTo(x1, y1);
    context.lineTo(x2, y2);
    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
    context.closePath();
  }
};
exports.default = _default;
},{}],"node_modules/d3-shape/src/symbol.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.symbols = void 0;

var _d3Path = require("d3-path");

var _circle = _interopRequireDefault(require("./symbol/circle.js"));

var _cross = _interopRequireDefault(require("./symbol/cross.js"));

var _diamond = _interopRequireDefault(require("./symbol/diamond.js"));

var _star = _interopRequireDefault(require("./symbol/star.js"));

var _square = _interopRequireDefault(require("./symbol/square.js"));

var _triangle = _interopRequireDefault(require("./symbol/triangle.js"));

var _wye = _interopRequireDefault(require("./symbol/wye.js"));

var _constant = _interopRequireDefault(require("./constant.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var symbols = [_circle.default, _cross.default, _diamond.default, _square.default, _star.default, _triangle.default, _wye.default];
exports.symbols = symbols;

function _default() {
  var type = (0, _constant.default)(_circle.default),
      size = (0, _constant.default)(64),
      context = null;

  function symbol() {
    var buffer;
    if (!context) context = buffer = (0, _d3Path.path)();
    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
    if (buffer) return context = null, buffer + "" || null;
  }

  symbol.type = function (_) {
    return arguments.length ? (type = typeof _ === "function" ? _ : (0, _constant.default)(_), symbol) : type;
  };

  symbol.size = function (_) {
    return arguments.length ? (size = typeof _ === "function" ? _ : (0, _constant.default)(+_), symbol) : size;
  };

  symbol.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
  };

  return symbol;
}
},{"d3-path":"node_modules/d3-path/src/index.js","./symbol/circle.js":"node_modules/d3-shape/src/symbol/circle.js","./symbol/cross.js":"node_modules/d3-shape/src/symbol/cross.js","./symbol/diamond.js":"node_modules/d3-shape/src/symbol/diamond.js","./symbol/star.js":"node_modules/d3-shape/src/symbol/star.js","./symbol/square.js":"node_modules/d3-shape/src/symbol/square.js","./symbol/triangle.js":"node_modules/d3-shape/src/symbol/triangle.js","./symbol/wye.js":"node_modules/d3-shape/src/symbol/wye.js","./constant.js":"node_modules/d3-shape/src/constant.js"}],"node_modules/d3-shape/src/noop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {}
},{}],"node_modules/d3-shape/src/curve/basis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.point = point;
exports.Basis = Basis;
exports.default = _default;

function point(that, x, y) {
  that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x) / 6, (that._y0 + 4 * that._y1 + y) / 6);
}

function Basis(context) {
  this._context = context;
}

Basis.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 3:
        point(this, this._x1, this._y1);
      // proceed

      case 2:
        this._context.lineTo(this._x1, this._y1);

        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;

        this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);

      // proceed

      default:
        point(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function _default(context) {
  return new Basis(context);
}
},{}],"node_modules/d3-shape/src/curve/basisClosed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _noop = _interopRequireDefault(require("../noop.js"));

var _basis = require("./basis.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function BasisClosed(context) {
  this._context = context;
}

BasisClosed.prototype = {
  areaStart: _noop.default,
  areaEnd: _noop.default,
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 1:
        {
          this._context.moveTo(this._x2, this._y2);

          this._context.closePath();

          break;
        }

      case 2:
        {
          this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);

          this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);

          this._context.closePath();

          break;
        }

      case 3:
        {
          this.point(this._x2, this._y2);
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          break;
        }
    }
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._x2 = x, this._y2 = y;
        break;

      case 1:
        this._point = 2;
        this._x3 = x, this._y3 = y;
        break;

      case 2:
        this._point = 3;
        this._x4 = x, this._y4 = y;

        this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6);

        break;

      default:
        (0, _basis.point)(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function _default(context) {
  return new BasisClosed(context);
}
},{"../noop.js":"node_modules/d3-shape/src/noop.js","./basis.js":"node_modules/d3-shape/src/curve/basis.js"}],"node_modules/d3-shape/src/curve/basisOpen.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _basis = require("./basis.js");

function BasisOpen(context) {
  this._context = context;
}

BasisOpen.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        var x0 = (this._x0 + 4 * this._x1 + x) / 6,
            y0 = (this._y0 + 4 * this._y1 + y) / 6;
        this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
        break;

      case 3:
        this._point = 4;
      // proceed

      default:
        (0, _basis.point)(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function _default(context) {
  return new BasisOpen(context);
}
},{"./basis.js":"node_modules/d3-shape/src/curve/basis.js"}],"node_modules/d3-shape/src/curve/bundle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _basis = require("./basis.js");

function Bundle(context, beta) {
  this._basis = new _basis.Basis(context);
  this._beta = beta;
}

Bundle.prototype = {
  lineStart: function () {
    this._x = [];
    this._y = [];

    this._basis.lineStart();
  },
  lineEnd: function () {
    var x = this._x,
        y = this._y,
        j = x.length - 1;

    if (j > 0) {
      var x0 = x[0],
          y0 = y[0],
          dx = x[j] - x0,
          dy = y[j] - y0,
          i = -1,
          t;

      while (++i <= j) {
        t = i / j;

        this._basis.point(this._beta * x[i] + (1 - this._beta) * (x0 + t * dx), this._beta * y[i] + (1 - this._beta) * (y0 + t * dy));
      }
    }

    this._x = this._y = null;

    this._basis.lineEnd();
  },
  point: function (x, y) {
    this._x.push(+x);

    this._y.push(+y);
  }
};

var _default = function custom(beta) {
  function bundle(context) {
    return beta === 1 ? new _basis.Basis(context) : new Bundle(context, beta);
  }

  bundle.beta = function (beta) {
    return custom(+beta);
  };

  return bundle;
}(0.85);

exports.default = _default;
},{"./basis.js":"node_modules/d3-shape/src/curve/basis.js"}],"node_modules/d3-shape/src/curve/cardinal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.point = point;
exports.Cardinal = Cardinal;
exports.default = void 0;

function point(that, x, y) {
  that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x), that._y2 + that._k * (that._y1 - y), that._x2, that._y2);
}

function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

Cardinal.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);

        break;

      case 3:
        point(this, this._x1, this._y1);
        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        this._x1 = x, this._y1 = y;
        break;

      case 2:
        this._point = 3;
      // proceed

      default:
        point(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(tension) {
  function cardinal(context) {
    return new Cardinal(context, tension);
  }

  cardinal.tension = function (tension) {
    return custom(+tension);
  };

  return cardinal;
}(0);

exports.default = _default;
},{}],"node_modules/d3-shape/src/curve/cardinalClosed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CardinalClosed = CardinalClosed;
exports.default = void 0;

var _noop = _interopRequireDefault(require("../noop.js"));

var _cardinal = require("./cardinal.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalClosed.prototype = {
  areaStart: _noop.default,
  areaEnd: _noop.default,
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 1:
        {
          this._context.moveTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 2:
        {
          this._context.lineTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 3:
        {
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          this.point(this._x5, this._y5);
          break;
        }
    }
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x, this._y3 = y;
        break;

      case 1:
        this._point = 2;

        this._context.moveTo(this._x4 = x, this._y4 = y);

        break;

      case 2:
        this._point = 3;
        this._x5 = x, this._y5 = y;
        break;

      default:
        (0, _cardinal.point)(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(tension) {
  function cardinal(context) {
    return new CardinalClosed(context, tension);
  }

  cardinal.tension = function (tension) {
    return custom(+tension);
  };

  return cardinal;
}(0);

exports.default = _default;
},{"../noop.js":"node_modules/d3-shape/src/noop.js","./cardinal.js":"node_modules/d3-shape/src/curve/cardinal.js"}],"node_modules/d3-shape/src/curve/cardinalOpen.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CardinalOpen = CardinalOpen;
exports.default = void 0;

var _cardinal = require("./cardinal.js");

function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalOpen.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;

      case 3:
        this._point = 4;
      // proceed

      default:
        (0, _cardinal.point)(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(tension) {
  function cardinal(context) {
    return new CardinalOpen(context, tension);
  }

  cardinal.tension = function (tension) {
    return custom(+tension);
  };

  return cardinal;
}(0);

exports.default = _default;
},{"./cardinal.js":"node_modules/d3-shape/src/curve/cardinal.js"}],"node_modules/d3-shape/src/curve/catmullRom.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.point = point;
exports.default = void 0;

var _math = require("../math.js");

var _cardinal = require("./cardinal.js");

function point(that, x, y) {
  var x1 = that._x1,
      y1 = that._y1,
      x2 = that._x2,
      y2 = that._y2;

  if (that._l01_a > _math.epsilon) {
    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
        n = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
  }

  if (that._l23_a > _math.epsilon) {
    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
        m = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
  }

  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
}

function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRom.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);

        break;

      case 3:
        this.point(this._x2, this._y2);
        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
      // proceed

      default:
        point(this, x, y);
        break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRom(context, alpha) : new _cardinal.Cardinal(context, 0);
  }

  catmullRom.alpha = function (alpha) {
    return custom(+alpha);
  };

  return catmullRom;
}(0.5);

exports.default = _default;
},{"../math.js":"node_modules/d3-shape/src/math.js","./cardinal.js":"node_modules/d3-shape/src/curve/cardinal.js"}],"node_modules/d3-shape/src/curve/catmullRomClosed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _cardinalClosed = require("./cardinalClosed.js");

var _noop = _interopRequireDefault(require("../noop.js"));

var _catmullRom = require("./catmullRom.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomClosed.prototype = {
  areaStart: _noop.default,
  areaEnd: _noop.default,
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 1:
        {
          this._context.moveTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 2:
        {
          this._context.lineTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 3:
        {
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          this.point(this._x5, this._y5);
          break;
        }
    }
  },
  point: function (x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x, this._y3 = y;
        break;

      case 1:
        this._point = 2;

        this._context.moveTo(this._x4 = x, this._y4 = y);

        break;

      case 2:
        this._point = 3;
        this._x5 = x, this._y5 = y;
        break;

      default:
        (0, _catmullRom.point)(this, x, y);
        break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomClosed(context, alpha) : new _cardinalClosed.CardinalClosed(context, 0);
  }

  catmullRom.alpha = function (alpha) {
    return custom(+alpha);
  };

  return catmullRom;
}(0.5);

exports.default = _default;
},{"./cardinalClosed.js":"node_modules/d3-shape/src/curve/cardinalClosed.js","../noop.js":"node_modules/d3-shape/src/noop.js","./catmullRom.js":"node_modules/d3-shape/src/curve/catmullRom.js"}],"node_modules/d3-shape/src/curve/catmullRomOpen.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _cardinalOpen = require("./cardinalOpen.js");

var _catmullRom = require("./catmullRom.js");

function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomOpen.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0:
        this._point = 1;
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;

      case 3:
        this._point = 4;
      // proceed

      default:
        (0, _catmullRom.point)(this, x, y);
        break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomOpen(context, alpha) : new _cardinalOpen.CardinalOpen(context, 0);
  }

  catmullRom.alpha = function (alpha) {
    return custom(+alpha);
  };

  return catmullRom;
}(0.5);

exports.default = _default;
},{"./cardinalOpen.js":"node_modules/d3-shape/src/curve/cardinalOpen.js","./catmullRom.js":"node_modules/d3-shape/src/curve/catmullRom.js"}],"node_modules/d3-shape/src/curve/linearClosed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _noop = _interopRequireDefault(require("../noop.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function LinearClosed(context) {
  this._context = context;
}

LinearClosed.prototype = {
  areaStart: _noop.default,
  areaEnd: _noop.default,
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._point) this._context.closePath();
  },
  point: function (x, y) {
    x = +x, y = +y;
    if (this._point) this._context.lineTo(x, y);else this._point = 1, this._context.moveTo(x, y);
  }
};

function _default(context) {
  return new LinearClosed(context);
}
},{"../noop.js":"node_modules/d3-shape/src/noop.js"}],"node_modules/d3-shape/src/curve/monotone.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.monotoneX = monotoneX;
exports.monotoneY = monotoneY;

function sign(x) {
  return x < 0 ? -1 : 1;
} // Calculate the slopes of the tangents (Hermite-type interpolation) based on
// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
// NOV(II), P. 443, 1990.


function slope3(that, x2, y2) {
  var h0 = that._x1 - that._x0,
      h1 = x2 - that._x1,
      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
      p = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
} // Calculate a one-sided slope.


function slope2(that, t) {
  var h = that._x1 - that._x0;
  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
} // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".


function point(that, t0, t1) {
  var x0 = that._x0,
      y0 = that._y0,
      x1 = that._x1,
      y1 = that._y1,
      dx = (x1 - x0) / 3;

  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
}

function MonotoneX(context) {
  this._context = context;
}

MonotoneX.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x1, this._y1);

        break;

      case 3:
        point(this, this._t0, slope2(this, this._t0));
        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    var t1 = NaN;
    x = +x, y = +y;
    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        point(this, slope2(this, t1 = slope3(this, x, y)), t1);
        break;

      default:
        point(this, this._t0, t1 = slope3(this, x, y));
        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
    this._t0 = t1;
  }
};

function MonotoneY(context) {
  this._context = new ReflectContext(context);
}

(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function (x, y) {
  MonotoneX.prototype.point.call(this, y, x);
};

function ReflectContext(context) {
  this._context = context;
}

ReflectContext.prototype = {
  moveTo: function (x, y) {
    this._context.moveTo(y, x);
  },
  closePath: function () {
    this._context.closePath();
  },
  lineTo: function (x, y) {
    this._context.lineTo(y, x);
  },
  bezierCurveTo: function (x1, y1, x2, y2, x, y) {
    this._context.bezierCurveTo(y1, x1, y2, x2, y, x);
  }
};

function monotoneX(context) {
  return new MonotoneX(context);
}

function monotoneY(context) {
  return new MonotoneY(context);
}
},{}],"node_modules/d3-shape/src/curve/natural.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function Natural(context) {
  this._context = context;
}

Natural.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x = [];
    this._y = [];
  },
  lineEnd: function () {
    var x = this._x,
        y = this._y,
        n = x.length;

    if (n) {
      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);

      if (n === 2) {
        this._context.lineTo(x[1], y[1]);
      } else {
        var px = controlPoints(x),
            py = controlPoints(y);

        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
        }
      }
    }

    if (this._line || this._line !== 0 && n === 1) this._context.closePath();
    this._line = 1 - this._line;
    this._x = this._y = null;
  },
  point: function (x, y) {
    this._x.push(+x);

    this._y.push(+y);
  }
}; // See https://www.particleincell.com/2012/bezier-splines/ for derivation.

function controlPoints(x) {
  var i,
      n = x.length - 1,
      m,
      a = new Array(n),
      b = new Array(n),
      r = new Array(n);
  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];

  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];

  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];

  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];

  a[n - 1] = r[n - 1] / b[n - 1];

  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];

  b[n - 1] = (x[n] + a[n - 1]) / 2;

  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];

  return [a, b];
}

function _default(context) {
  return new Natural(context);
}
},{}],"node_modules/d3-shape/src/curve/step.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.stepBefore = stepBefore;
exports.stepAfter = stepAfter;

function Step(context, t) {
  this._context = context;
  this._t = t;
}

Step.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x = this._y = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
      // proceed

      default:
        {
          if (this._t <= 0) {
            this._context.lineTo(this._x, y);

            this._context.lineTo(x, y);
          } else {
            var x1 = this._x * (1 - this._t) + x * this._t;

            this._context.lineTo(x1, this._y);

            this._context.lineTo(x1, y);
          }

          break;
        }
    }

    this._x = x, this._y = y;
  }
};

function _default(context) {
  return new Step(context, 0.5);
}

function stepBefore(context) {
  return new Step(context, 0);
}

function stepAfter(context) {
  return new Step(context, 1);
}
},{}],"node_modules/d3-shape/src/offset/none.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(series, order) {
  if (!((n = series.length) > 1)) return;

  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
    s0 = s1, s1 = series[order[i]];

    for (j = 0; j < m; ++j) {
      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
    }
  }
}
},{}],"node_modules/d3-shape/src/order/none.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(series) {
  var n = series.length,
      o = new Array(n);

  while (--n >= 0) o[n] = n;

  return o;
}
},{}],"node_modules/d3-shape/src/stack.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("./array.js");

var _constant = _interopRequireDefault(require("./constant.js"));

var _none = _interopRequireDefault(require("./offset/none.js"));

var _none2 = _interopRequireDefault(require("./order/none.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stackValue(d, key) {
  return d[key];
}

function _default() {
  var keys = (0, _constant.default)([]),
      order = _none2.default,
      offset = _none.default,
      value = stackValue;

  function stack(data) {
    var kz = keys.apply(this, arguments),
        i,
        m = data.length,
        n = kz.length,
        sz = new Array(n),
        oz;

    for (i = 0; i < n; ++i) {
      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {
        si[j] = sij = [0, +value(data[j], ki, j, data)];
        sij.data = data[j];
      }

      si.key = ki;
    }

    for (i = 0, oz = order(sz); i < n; ++i) {
      sz[oz[i]].index = i;
    }

    offset(sz, oz);
    return sz;
  }

  stack.keys = function (_) {
    return arguments.length ? (keys = typeof _ === "function" ? _ : (0, _constant.default)(_array.slice.call(_)), stack) : keys;
  };

  stack.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : (0, _constant.default)(+_), stack) : value;
  };

  stack.order = function (_) {
    return arguments.length ? (order = _ == null ? _none2.default : typeof _ === "function" ? _ : (0, _constant.default)(_array.slice.call(_)), stack) : order;
  };

  stack.offset = function (_) {
    return arguments.length ? (offset = _ == null ? _none.default : _, stack) : offset;
  };

  return stack;
}
},{"./array.js":"node_modules/d3-shape/src/array.js","./constant.js":"node_modules/d3-shape/src/constant.js","./offset/none.js":"node_modules/d3-shape/src/offset/none.js","./order/none.js":"node_modules/d3-shape/src/order/none.js"}],"node_modules/d3-shape/src/offset/expand.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series, order) {
  if (!((n = series.length) > 0)) return;

  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
    for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;

    if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
  }

  (0, _none.default)(series, order);
}
},{"./none.js":"node_modules/d3-shape/src/offset/none.js"}],"node_modules/d3-shape/src/offset/diverging.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(series, order) {
  if (!((n = series.length) > 0)) return;

  for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {
    for (yp = yn = 0, i = 0; i < n; ++i) {
      if ((dy = (d = series[order[i]][j])[1] - d[0]) > 0) {
        d[0] = yp, d[1] = yp += dy;
      } else if (dy < 0) {
        d[1] = yn, d[0] = yn += dy;
      } else {
        d[0] = 0, d[1] = dy;
      }
    }
  }
}
},{}],"node_modules/d3-shape/src/offset/silhouette.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series, order) {
  if (!((n = series.length) > 0)) return;

  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
    for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;

    s0[j][1] += s0[j][0] = -y / 2;
  }

  (0, _none.default)(series, order);
}
},{"./none.js":"node_modules/d3-shape/src/offset/none.js"}],"node_modules/d3-shape/src/offset/wiggle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series, order) {
  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;

  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
      var si = series[order[i]],
          sij0 = si[j][1] || 0,
          sij1 = si[j - 1][1] || 0,
          s3 = (sij0 - sij1) / 2;

      for (var k = 0; k < i; ++k) {
        var sk = series[order[k]],
            skj0 = sk[j][1] || 0,
            skj1 = sk[j - 1][1] || 0;
        s3 += skj0 - skj1;
      }

      s1 += sij0, s2 += s3 * sij0;
    }

    s0[j - 1][1] += s0[j - 1][0] = y;
    if (s1) y -= s2 / s1;
  }

  s0[j - 1][1] += s0[j - 1][0] = y;
  (0, _none.default)(series, order);
}
},{"./none.js":"node_modules/d3-shape/src/offset/none.js"}],"node_modules/d3-shape/src/order/appearance.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  var peaks = series.map(peak);
  return (0, _none.default)(series).sort(function (a, b) {
    return peaks[a] - peaks[b];
  });
}

function peak(series) {
  var i = -1,
      j = 0,
      n = series.length,
      vi,
      vj = -Infinity;

  while (++i < n) if ((vi = +series[i][1]) > vj) vj = vi, j = i;

  return j;
}
},{"./none.js":"node_modules/d3-shape/src/order/none.js"}],"node_modules/d3-shape/src/order/ascending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.sum = sum;

var _none = _interopRequireDefault(require("./none.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  var sums = series.map(sum);
  return (0, _none.default)(series).sort(function (a, b) {
    return sums[a] - sums[b];
  });
}

function sum(series) {
  var s = 0,
      i = -1,
      n = series.length,
      v;

  while (++i < n) if (v = +series[i][1]) s += v;

  return s;
}
},{"./none.js":"node_modules/d3-shape/src/order/none.js"}],"node_modules/d3-shape/src/order/descending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  return (0, _ascending.default)(series).reverse();
}
},{"./ascending.js":"node_modules/d3-shape/src/order/ascending.js"}],"node_modules/d3-shape/src/order/insideOut.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _appearance = _interopRequireDefault(require("./appearance.js"));

var _ascending = require("./ascending.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  var n = series.length,
      i,
      j,
      sums = series.map(_ascending.sum),
      order = (0, _appearance.default)(series),
      top = 0,
      bottom = 0,
      tops = [],
      bottoms = [];

  for (i = 0; i < n; ++i) {
    j = order[i];

    if (top < bottom) {
      top += sums[j];
      tops.push(j);
    } else {
      bottom += sums[j];
      bottoms.push(j);
    }
  }

  return bottoms.reverse().concat(tops);
}
},{"./appearance.js":"node_modules/d3-shape/src/order/appearance.js","./ascending.js":"node_modules/d3-shape/src/order/ascending.js"}],"node_modules/d3-shape/src/order/reverse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  return (0, _none.default)(series).reverse();
}
},{"./none.js":"node_modules/d3-shape/src/order/none.js"}],"node_modules/d3-shape/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "arc", {
  enumerable: true,
  get: function () {
    return _arc.default;
  }
});
Object.defineProperty(exports, "area", {
  enumerable: true,
  get: function () {
    return _area.default;
  }
});
Object.defineProperty(exports, "line", {
  enumerable: true,
  get: function () {
    return _line.default;
  }
});
Object.defineProperty(exports, "pie", {
  enumerable: true,
  get: function () {
    return _pie.default;
  }
});
Object.defineProperty(exports, "areaRadial", {
  enumerable: true,
  get: function () {
    return _areaRadial.default;
  }
});
Object.defineProperty(exports, "radialArea", {
  enumerable: true,
  get: function () {
    return _areaRadial.default;
  }
});
Object.defineProperty(exports, "lineRadial", {
  enumerable: true,
  get: function () {
    return _lineRadial.default;
  }
});
Object.defineProperty(exports, "radialLine", {
  enumerable: true,
  get: function () {
    return _lineRadial.default;
  }
});
Object.defineProperty(exports, "pointRadial", {
  enumerable: true,
  get: function () {
    return _pointRadial.default;
  }
});
Object.defineProperty(exports, "linkHorizontal", {
  enumerable: true,
  get: function () {
    return _index.linkHorizontal;
  }
});
Object.defineProperty(exports, "linkVertical", {
  enumerable: true,
  get: function () {
    return _index.linkVertical;
  }
});
Object.defineProperty(exports, "linkRadial", {
  enumerable: true,
  get: function () {
    return _index.linkRadial;
  }
});
Object.defineProperty(exports, "symbol", {
  enumerable: true,
  get: function () {
    return _symbol.default;
  }
});
Object.defineProperty(exports, "symbols", {
  enumerable: true,
  get: function () {
    return _symbol.symbols;
  }
});
Object.defineProperty(exports, "symbolCircle", {
  enumerable: true,
  get: function () {
    return _circle.default;
  }
});
Object.defineProperty(exports, "symbolCross", {
  enumerable: true,
  get: function () {
    return _cross.default;
  }
});
Object.defineProperty(exports, "symbolDiamond", {
  enumerable: true,
  get: function () {
    return _diamond.default;
  }
});
Object.defineProperty(exports, "symbolSquare", {
  enumerable: true,
  get: function () {
    return _square.default;
  }
});
Object.defineProperty(exports, "symbolStar", {
  enumerable: true,
  get: function () {
    return _star.default;
  }
});
Object.defineProperty(exports, "symbolTriangle", {
  enumerable: true,
  get: function () {
    return _triangle.default;
  }
});
Object.defineProperty(exports, "symbolWye", {
  enumerable: true,
  get: function () {
    return _wye.default;
  }
});
Object.defineProperty(exports, "curveBasisClosed", {
  enumerable: true,
  get: function () {
    return _basisClosed.default;
  }
});
Object.defineProperty(exports, "curveBasisOpen", {
  enumerable: true,
  get: function () {
    return _basisOpen.default;
  }
});
Object.defineProperty(exports, "curveBasis", {
  enumerable: true,
  get: function () {
    return _basis.default;
  }
});
Object.defineProperty(exports, "curveBundle", {
  enumerable: true,
  get: function () {
    return _bundle.default;
  }
});
Object.defineProperty(exports, "curveCardinalClosed", {
  enumerable: true,
  get: function () {
    return _cardinalClosed.default;
  }
});
Object.defineProperty(exports, "curveCardinalOpen", {
  enumerable: true,
  get: function () {
    return _cardinalOpen.default;
  }
});
Object.defineProperty(exports, "curveCardinal", {
  enumerable: true,
  get: function () {
    return _cardinal.default;
  }
});
Object.defineProperty(exports, "curveCatmullRomClosed", {
  enumerable: true,
  get: function () {
    return _catmullRomClosed.default;
  }
});
Object.defineProperty(exports, "curveCatmullRomOpen", {
  enumerable: true,
  get: function () {
    return _catmullRomOpen.default;
  }
});
Object.defineProperty(exports, "curveCatmullRom", {
  enumerable: true,
  get: function () {
    return _catmullRom.default;
  }
});
Object.defineProperty(exports, "curveLinearClosed", {
  enumerable: true,
  get: function () {
    return _linearClosed.default;
  }
});
Object.defineProperty(exports, "curveLinear", {
  enumerable: true,
  get: function () {
    return _linear.default;
  }
});
Object.defineProperty(exports, "curveMonotoneX", {
  enumerable: true,
  get: function () {
    return _monotone.monotoneX;
  }
});
Object.defineProperty(exports, "curveMonotoneY", {
  enumerable: true,
  get: function () {
    return _monotone.monotoneY;
  }
});
Object.defineProperty(exports, "curveNatural", {
  enumerable: true,
  get: function () {
    return _natural.default;
  }
});
Object.defineProperty(exports, "curveStep", {
  enumerable: true,
  get: function () {
    return _step.default;
  }
});
Object.defineProperty(exports, "curveStepAfter", {
  enumerable: true,
  get: function () {
    return _step.stepAfter;
  }
});
Object.defineProperty(exports, "curveStepBefore", {
  enumerable: true,
  get: function () {
    return _step.stepBefore;
  }
});
Object.defineProperty(exports, "stack", {
  enumerable: true,
  get: function () {
    return _stack.default;
  }
});
Object.defineProperty(exports, "stackOffsetExpand", {
  enumerable: true,
  get: function () {
    return _expand.default;
  }
});
Object.defineProperty(exports, "stackOffsetDiverging", {
  enumerable: true,
  get: function () {
    return _diverging.default;
  }
});
Object.defineProperty(exports, "stackOffsetNone", {
  enumerable: true,
  get: function () {
    return _none.default;
  }
});
Object.defineProperty(exports, "stackOffsetSilhouette", {
  enumerable: true,
  get: function () {
    return _silhouette.default;
  }
});
Object.defineProperty(exports, "stackOffsetWiggle", {
  enumerable: true,
  get: function () {
    return _wiggle.default;
  }
});
Object.defineProperty(exports, "stackOrderAppearance", {
  enumerable: true,
  get: function () {
    return _appearance.default;
  }
});
Object.defineProperty(exports, "stackOrderAscending", {
  enumerable: true,
  get: function () {
    return _ascending.default;
  }
});
Object.defineProperty(exports, "stackOrderDescending", {
  enumerable: true,
  get: function () {
    return _descending.default;
  }
});
Object.defineProperty(exports, "stackOrderInsideOut", {
  enumerable: true,
  get: function () {
    return _insideOut.default;
  }
});
Object.defineProperty(exports, "stackOrderNone", {
  enumerable: true,
  get: function () {
    return _none2.default;
  }
});
Object.defineProperty(exports, "stackOrderReverse", {
  enumerable: true,
  get: function () {
    return _reverse.default;
  }
});

var _arc = _interopRequireDefault(require("./arc.js"));

var _area = _interopRequireDefault(require("./area.js"));

var _line = _interopRequireDefault(require("./line.js"));

var _pie = _interopRequireDefault(require("./pie.js"));

var _areaRadial = _interopRequireDefault(require("./areaRadial.js"));

var _lineRadial = _interopRequireDefault(require("./lineRadial.js"));

var _pointRadial = _interopRequireDefault(require("./pointRadial.js"));

var _index = require("./link/index.js");

var _symbol = _interopRequireWildcard(require("./symbol.js"));

var _circle = _interopRequireDefault(require("./symbol/circle.js"));

var _cross = _interopRequireDefault(require("./symbol/cross.js"));

var _diamond = _interopRequireDefault(require("./symbol/diamond.js"));

var _square = _interopRequireDefault(require("./symbol/square.js"));

var _star = _interopRequireDefault(require("./symbol/star.js"));

var _triangle = _interopRequireDefault(require("./symbol/triangle.js"));

var _wye = _interopRequireDefault(require("./symbol/wye.js"));

var _basisClosed = _interopRequireDefault(require("./curve/basisClosed.js"));

var _basisOpen = _interopRequireDefault(require("./curve/basisOpen.js"));

var _basis = _interopRequireDefault(require("./curve/basis.js"));

var _bundle = _interopRequireDefault(require("./curve/bundle.js"));

var _cardinalClosed = _interopRequireDefault(require("./curve/cardinalClosed.js"));

var _cardinalOpen = _interopRequireDefault(require("./curve/cardinalOpen.js"));

var _cardinal = _interopRequireDefault(require("./curve/cardinal.js"));

var _catmullRomClosed = _interopRequireDefault(require("./curve/catmullRomClosed.js"));

var _catmullRomOpen = _interopRequireDefault(require("./curve/catmullRomOpen.js"));

var _catmullRom = _interopRequireDefault(require("./curve/catmullRom.js"));

var _linearClosed = _interopRequireDefault(require("./curve/linearClosed.js"));

var _linear = _interopRequireDefault(require("./curve/linear.js"));

var _monotone = require("./curve/monotone.js");

var _natural = _interopRequireDefault(require("./curve/natural.js"));

var _step = _interopRequireWildcard(require("./curve/step.js"));

var _stack = _interopRequireDefault(require("./stack.js"));

var _expand = _interopRequireDefault(require("./offset/expand.js"));

var _diverging = _interopRequireDefault(require("./offset/diverging.js"));

var _none = _interopRequireDefault(require("./offset/none.js"));

var _silhouette = _interopRequireDefault(require("./offset/silhouette.js"));

var _wiggle = _interopRequireDefault(require("./offset/wiggle.js"));

var _appearance = _interopRequireDefault(require("./order/appearance.js"));

var _ascending = _interopRequireDefault(require("./order/ascending.js"));

var _descending = _interopRequireDefault(require("./order/descending.js"));

var _insideOut = _interopRequireDefault(require("./order/insideOut.js"));

var _none2 = _interopRequireDefault(require("./order/none.js"));

var _reverse = _interopRequireDefault(require("./order/reverse.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./arc.js":"node_modules/d3-shape/src/arc.js","./area.js":"node_modules/d3-shape/src/area.js","./line.js":"node_modules/d3-shape/src/line.js","./pie.js":"node_modules/d3-shape/src/pie.js","./areaRadial.js":"node_modules/d3-shape/src/areaRadial.js","./lineRadial.js":"node_modules/d3-shape/src/lineRadial.js","./pointRadial.js":"node_modules/d3-shape/src/pointRadial.js","./link/index.js":"node_modules/d3-shape/src/link/index.js","./symbol.js":"node_modules/d3-shape/src/symbol.js","./symbol/circle.js":"node_modules/d3-shape/src/symbol/circle.js","./symbol/cross.js":"node_modules/d3-shape/src/symbol/cross.js","./symbol/diamond.js":"node_modules/d3-shape/src/symbol/diamond.js","./symbol/square.js":"node_modules/d3-shape/src/symbol/square.js","./symbol/star.js":"node_modules/d3-shape/src/symbol/star.js","./symbol/triangle.js":"node_modules/d3-shape/src/symbol/triangle.js","./symbol/wye.js":"node_modules/d3-shape/src/symbol/wye.js","./curve/basisClosed.js":"node_modules/d3-shape/src/curve/basisClosed.js","./curve/basisOpen.js":"node_modules/d3-shape/src/curve/basisOpen.js","./curve/basis.js":"node_modules/d3-shape/src/curve/basis.js","./curve/bundle.js":"node_modules/d3-shape/src/curve/bundle.js","./curve/cardinalClosed.js":"node_modules/d3-shape/src/curve/cardinalClosed.js","./curve/cardinalOpen.js":"node_modules/d3-shape/src/curve/cardinalOpen.js","./curve/cardinal.js":"node_modules/d3-shape/src/curve/cardinal.js","./curve/catmullRomClosed.js":"node_modules/d3-shape/src/curve/catmullRomClosed.js","./curve/catmullRomOpen.js":"node_modules/d3-shape/src/curve/catmullRomOpen.js","./curve/catmullRom.js":"node_modules/d3-shape/src/curve/catmullRom.js","./curve/linearClosed.js":"node_modules/d3-shape/src/curve/linearClosed.js","./curve/linear.js":"node_modules/d3-shape/src/curve/linear.js","./curve/monotone.js":"node_modules/d3-shape/src/curve/monotone.js","./curve/natural.js":"node_modules/d3-shape/src/curve/natural.js","./curve/step.js":"node_modules/d3-shape/src/curve/step.js","./stack.js":"node_modules/d3-shape/src/stack.js","./offset/expand.js":"node_modules/d3-shape/src/offset/expand.js","./offset/diverging.js":"node_modules/d3-shape/src/offset/diverging.js","./offset/none.js":"node_modules/d3-shape/src/offset/none.js","./offset/silhouette.js":"node_modules/d3-shape/src/offset/silhouette.js","./offset/wiggle.js":"node_modules/d3-shape/src/offset/wiggle.js","./order/appearance.js":"node_modules/d3-shape/src/order/appearance.js","./order/ascending.js":"node_modules/d3-shape/src/order/ascending.js","./order/descending.js":"node_modules/d3-shape/src/order/descending.js","./order/insideOut.js":"node_modules/d3-shape/src/order/insideOut.js","./order/none.js":"node_modules/d3-shape/src/order/none.js","./order/reverse.js":"node_modules/d3-shape/src/order/reverse.js"}],"node_modules/d3-voronoi/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-voronoi/src/point.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.x = x;
exports.y = y;

function x(d) {
  return d[0];
}

function y(d) {
  return d[1];
}
},{}],"node_modules/d3-voronoi/src/RedBlackTree.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RedBlackNode = RedBlackNode;
exports.default = void 0;

function RedBlackTree() {
  this._ = null; // root node
}

function RedBlackNode(node) {
  node.U = // parent node
  node.C = // color - true for red, false for black
  node.L = // left node
  node.R = // right node
  node.P = // previous node
  node.N = null; // next node
}

RedBlackTree.prototype = {
  constructor: RedBlackTree,
  insert: function (after, node) {
    var parent, grandpa, uncle;

    if (after) {
      node.P = after;
      node.N = after.N;
      if (after.N) after.N.P = node;
      after.N = node;

      if (after.R) {
        after = after.R;

        while (after.L) after = after.L;

        after.L = node;
      } else {
        after.R = node;
      }

      parent = after;
    } else if (this._) {
      after = RedBlackFirst(this._);
      node.P = null;
      node.N = after;
      after.P = after.L = node;
      parent = after;
    } else {
      node.P = node.N = null;
      this._ = node;
      parent = null;
    }

    node.L = node.R = null;
    node.U = parent;
    node.C = true;
    after = node;

    while (parent && parent.C) {
      grandpa = parent.U;

      if (parent === grandpa.L) {
        uncle = grandpa.R;

        if (uncle && uncle.C) {
          parent.C = uncle.C = false;
          grandpa.C = true;
          after = grandpa;
        } else {
          if (after === parent.R) {
            RedBlackRotateLeft(this, parent);
            after = parent;
            parent = after.U;
          }

          parent.C = false;
          grandpa.C = true;
          RedBlackRotateRight(this, grandpa);
        }
      } else {
        uncle = grandpa.L;

        if (uncle && uncle.C) {
          parent.C = uncle.C = false;
          grandpa.C = true;
          after = grandpa;
        } else {
          if (after === parent.L) {
            RedBlackRotateRight(this, parent);
            after = parent;
            parent = after.U;
          }

          parent.C = false;
          grandpa.C = true;
          RedBlackRotateLeft(this, grandpa);
        }
      }

      parent = after.U;
    }

    this._.C = false;
  },
  remove: function (node) {
    if (node.N) node.N.P = node.P;
    if (node.P) node.P.N = node.N;
    node.N = node.P = null;
    var parent = node.U,
        sibling,
        left = node.L,
        right = node.R,
        next,
        red;
    if (!left) next = right;else if (!right) next = left;else next = RedBlackFirst(right);

    if (parent) {
      if (parent.L === node) parent.L = next;else parent.R = next;
    } else {
      this._ = next;
    }

    if (left && right) {
      red = next.C;
      next.C = node.C;
      next.L = left;
      left.U = next;

      if (next !== right) {
        parent = next.U;
        next.U = node.U;
        node = next.R;
        parent.L = node;
        next.R = right;
        right.U = next;
      } else {
        next.U = parent;
        parent = next;
        node = next.R;
      }
    } else {
      red = node.C;
      node = next;
    }

    if (node) node.U = parent;
    if (red) return;

    if (node && node.C) {
      node.C = false;
      return;
    }

    do {
      if (node === this._) break;

      if (node === parent.L) {
        sibling = parent.R;

        if (sibling.C) {
          sibling.C = false;
          parent.C = true;
          RedBlackRotateLeft(this, parent);
          sibling = parent.R;
        }

        if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
          if (!sibling.R || !sibling.R.C) {
            sibling.L.C = false;
            sibling.C = true;
            RedBlackRotateRight(this, sibling);
            sibling = parent.R;
          }

          sibling.C = parent.C;
          parent.C = sibling.R.C = false;
          RedBlackRotateLeft(this, parent);
          node = this._;
          break;
        }
      } else {
        sibling = parent.L;

        if (sibling.C) {
          sibling.C = false;
          parent.C = true;
          RedBlackRotateRight(this, parent);
          sibling = parent.L;
        }

        if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
          if (!sibling.L || !sibling.L.C) {
            sibling.R.C = false;
            sibling.C = true;
            RedBlackRotateLeft(this, sibling);
            sibling = parent.L;
          }

          sibling.C = parent.C;
          parent.C = sibling.L.C = false;
          RedBlackRotateRight(this, parent);
          node = this._;
          break;
        }
      }

      sibling.C = true;
      node = parent;
      parent = parent.U;
    } while (!node.C);

    if (node) node.C = false;
  }
};

function RedBlackRotateLeft(tree, node) {
  var p = node,
      q = node.R,
      parent = p.U;

  if (parent) {
    if (parent.L === p) parent.L = q;else parent.R = q;
  } else {
    tree._ = q;
  }

  q.U = parent;
  p.U = q;
  p.R = q.L;
  if (p.R) p.R.U = p;
  q.L = p;
}

function RedBlackRotateRight(tree, node) {
  var p = node,
      q = node.L,
      parent = p.U;

  if (parent) {
    if (parent.L === p) parent.L = q;else parent.R = q;
  } else {
    tree._ = q;
  }

  q.U = parent;
  p.U = q;
  p.L = q.R;
  if (p.L) p.L.U = p;
  q.R = p;
}

function RedBlackFirst(node) {
  while (node.L) node = node.L;

  return node;
}

var _default = RedBlackTree;
exports.default = _default;
},{}],"node_modules/d3-voronoi/src/Edge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createEdge = createEdge;
exports.createBorderEdge = createBorderEdge;
exports.setEdgeEnd = setEdgeEnd;
exports.clipEdges = clipEdges;

var _Diagram = require("./Diagram");

function createEdge(left, right, v0, v1) {
  var edge = [null, null],
      index = _Diagram.edges.push(edge) - 1;
  edge.left = left;
  edge.right = right;
  if (v0) setEdgeEnd(edge, left, right, v0);
  if (v1) setEdgeEnd(edge, right, left, v1);

  _Diagram.cells[left.index].halfedges.push(index);

  _Diagram.cells[right.index].halfedges.push(index);

  return edge;
}

function createBorderEdge(left, v0, v1) {
  var edge = [v0, v1];
  edge.left = left;
  return edge;
}

function setEdgeEnd(edge, left, right, vertex) {
  if (!edge[0] && !edge[1]) {
    edge[0] = vertex;
    edge.left = left;
    edge.right = right;
  } else if (edge.left === right) {
    edge[1] = vertex;
  } else {
    edge[0] = vertex;
  }
} // Liang–Barsky line clipping.


function clipEdge(edge, x0, y0, x1, y1) {
  var a = edge[0],
      b = edge[1],
      ax = a[0],
      ay = a[1],
      bx = b[0],
      by = b[1],
      t0 = 0,
      t1 = 1,
      dx = bx - ax,
      dy = by - ay,
      r;
  r = x0 - ax;
  if (!dx && r > 0) return;
  r /= dx;

  if (dx < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dx > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = x1 - ax;
  if (!dx && r < 0) return;
  r /= dx;

  if (dx < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dx > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  r = y0 - ay;
  if (!dy && r > 0) return;
  r /= dy;

  if (dy < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dy > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = y1 - ay;
  if (!dy && r < 0) return;
  r /= dy;

  if (dy < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dy > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?

  if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];
  if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];
  return true;
}

function connectEdge(edge, x0, y0, x1, y1) {
  var v1 = edge[1];
  if (v1) return true;
  var v0 = edge[0],
      left = edge.left,
      right = edge.right,
      lx = left[0],
      ly = left[1],
      rx = right[0],
      ry = right[1],
      fx = (lx + rx) / 2,
      fy = (ly + ry) / 2,
      fm,
      fb;

  if (ry === ly) {
    if (fx < x0 || fx >= x1) return;

    if (lx > rx) {
      if (!v0) v0 = [fx, y0];else if (v0[1] >= y1) return;
      v1 = [fx, y1];
    } else {
      if (!v0) v0 = [fx, y1];else if (v0[1] < y0) return;
      v1 = [fx, y0];
    }
  } else {
    fm = (lx - rx) / (ry - ly);
    fb = fy - fm * fx;

    if (fm < -1 || fm > 1) {
      if (lx > rx) {
        if (!v0) v0 = [(y0 - fb) / fm, y0];else if (v0[1] >= y1) return;
        v1 = [(y1 - fb) / fm, y1];
      } else {
        if (!v0) v0 = [(y1 - fb) / fm, y1];else if (v0[1] < y0) return;
        v1 = [(y0 - fb) / fm, y0];
      }
    } else {
      if (ly < ry) {
        if (!v0) v0 = [x0, fm * x0 + fb];else if (v0[0] >= x1) return;
        v1 = [x1, fm * x1 + fb];
      } else {
        if (!v0) v0 = [x1, fm * x1 + fb];else if (v0[0] < x0) return;
        v1 = [x0, fm * x0 + fb];
      }
    }
  }

  edge[0] = v0;
  edge[1] = v1;
  return true;
}

function clipEdges(x0, y0, x1, y1) {
  var i = _Diagram.edges.length,
      edge;

  while (i--) {
    if (!connectEdge(edge = _Diagram.edges[i], x0, y0, x1, y1) || !clipEdge(edge, x0, y0, x1, y1) || !(Math.abs(edge[0][0] - edge[1][0]) > _Diagram.epsilon || Math.abs(edge[0][1] - edge[1][1]) > _Diagram.epsilon)) {
      delete _Diagram.edges[i];
    }
  }
}
},{"./Diagram":"node_modules/d3-voronoi/src/Diagram.js"}],"node_modules/d3-voronoi/src/Cell.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCell = createCell;
exports.cellHalfedgeStart = cellHalfedgeStart;
exports.cellHalfedgeEnd = cellHalfedgeEnd;
exports.sortCellHalfedges = sortCellHalfedges;
exports.clipCells = clipCells;

var _Edge = require("./Edge");

var _Diagram = require("./Diagram");

function createCell(site) {
  return _Diagram.cells[site.index] = {
    site: site,
    halfedges: []
  };
}

function cellHalfedgeAngle(cell, edge) {
  var site = cell.site,
      va = edge.left,
      vb = edge.right;
  if (site === vb) vb = va, va = site;
  if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);
  if (site === va) va = edge[1], vb = edge[0];else va = edge[0], vb = edge[1];
  return Math.atan2(va[0] - vb[0], vb[1] - va[1]);
}

function cellHalfedgeStart(cell, edge) {
  return edge[+(edge.left !== cell.site)];
}

function cellHalfedgeEnd(cell, edge) {
  return edge[+(edge.left === cell.site)];
}

function sortCellHalfedges() {
  for (var i = 0, n = _Diagram.cells.length, cell, halfedges, j, m; i < n; ++i) {
    if ((cell = _Diagram.cells[i]) && (m = (halfedges = cell.halfedges).length)) {
      var index = new Array(m),
          array = new Array(m);

      for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, _Diagram.edges[halfedges[j]]);

      index.sort(function (i, j) {
        return array[j] - array[i];
      });

      for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];

      for (j = 0; j < m; ++j) halfedges[j] = array[j];
    }
  }
}

function clipCells(x0, y0, x1, y1) {
  var nCells = _Diagram.cells.length,
      iCell,
      cell,
      site,
      iHalfedge,
      halfedges,
      nHalfedges,
      start,
      startX,
      startY,
      end,
      endX,
      endY,
      cover = true;

  for (iCell = 0; iCell < nCells; ++iCell) {
    if (cell = _Diagram.cells[iCell]) {
      site = cell.site;
      halfedges = cell.halfedges;
      iHalfedge = halfedges.length; // Remove any dangling clipped edges.

      while (iHalfedge--) {
        if (!_Diagram.edges[halfedges[iHalfedge]]) {
          halfedges.splice(iHalfedge, 1);
        }
      } // Insert any border edges as necessary.


      iHalfedge = 0, nHalfedges = halfedges.length;

      while (iHalfedge < nHalfedges) {
        end = cellHalfedgeEnd(cell, _Diagram.edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];
        start = cellHalfedgeStart(cell, _Diagram.edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];

        if (Math.abs(endX - startX) > _Diagram.epsilon || Math.abs(endY - startY) > _Diagram.epsilon) {
          halfedges.splice(iHalfedge, 0, _Diagram.edges.push((0, _Edge.createBorderEdge)(site, end, Math.abs(endX - x0) < _Diagram.epsilon && y1 - endY > _Diagram.epsilon ? [x0, Math.abs(startX - x0) < _Diagram.epsilon ? startY : y1] : Math.abs(endY - y1) < _Diagram.epsilon && x1 - endX > _Diagram.epsilon ? [Math.abs(startY - y1) < _Diagram.epsilon ? startX : x1, y1] : Math.abs(endX - x1) < _Diagram.epsilon && endY - y0 > _Diagram.epsilon ? [x1, Math.abs(startX - x1) < _Diagram.epsilon ? startY : y0] : Math.abs(endY - y0) < _Diagram.epsilon && endX - x0 > _Diagram.epsilon ? [Math.abs(startY - y0) < _Diagram.epsilon ? startX : x0, y0] : null)) - 1);
          ++nHalfedges;
        }
      }

      if (nHalfedges) cover = false;
    }
  } // If there weren’t any edges, have the closest site cover the extent.
  // It doesn’t matter which corner of the extent we measure!


  if (cover) {
    var dx,
        dy,
        d2,
        dc = Infinity;

    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {
      if (cell = _Diagram.cells[iCell]) {
        site = cell.site;
        dx = site[0] - x0;
        dy = site[1] - y0;
        d2 = dx * dx + dy * dy;
        if (d2 < dc) dc = d2, cover = cell;
      }
    }

    if (cover) {
      var v00 = [x0, y0],
          v01 = [x0, y1],
          v11 = [x1, y1],
          v10 = [x1, y0];
      cover.halfedges.push(_Diagram.edges.push((0, _Edge.createBorderEdge)(site = cover.site, v00, v01)) - 1, _Diagram.edges.push((0, _Edge.createBorderEdge)(site, v01, v11)) - 1, _Diagram.edges.push((0, _Edge.createBorderEdge)(site, v11, v10)) - 1, _Diagram.edges.push((0, _Edge.createBorderEdge)(site, v10, v00)) - 1);
    }
  } // Lastly delete any cells with no edges; these were entirely clipped.


  for (iCell = 0; iCell < nCells; ++iCell) {
    if (cell = _Diagram.cells[iCell]) {
      if (!cell.halfedges.length) {
        delete _Diagram.cells[iCell];
      }
    }
  }
}
},{"./Edge":"node_modules/d3-voronoi/src/Edge.js","./Diagram":"node_modules/d3-voronoi/src/Diagram.js"}],"node_modules/d3-voronoi/src/Circle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.attachCircle = attachCircle;
exports.detachCircle = detachCircle;
exports.firstCircle = void 0;

var _RedBlackTree = require("./RedBlackTree");

var _Diagram = require("./Diagram");

var circlePool = [];
var firstCircle;
exports.firstCircle = firstCircle;

function Circle() {
  (0, _RedBlackTree.RedBlackNode)(this);
  this.x = this.y = this.arc = this.site = this.cy = null;
}

function attachCircle(arc) {
  var lArc = arc.P,
      rArc = arc.N;
  if (!lArc || !rArc) return;
  var lSite = lArc.site,
      cSite = arc.site,
      rSite = rArc.site;
  if (lSite === rSite) return;
  var bx = cSite[0],
      by = cSite[1],
      ax = lSite[0] - bx,
      ay = lSite[1] - by,
      cx = rSite[0] - bx,
      cy = rSite[1] - by;
  var d = 2 * (ax * cy - ay * cx);
  if (d >= -_Diagram.epsilon2) return;
  var ha = ax * ax + ay * ay,
      hc = cx * cx + cy * cy,
      x = (cy * ha - ay * hc) / d,
      y = (ax * hc - cx * ha) / d;
  var circle = circlePool.pop() || new Circle();
  circle.arc = arc;
  circle.site = cSite;
  circle.x = x + bx;
  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom

  arc.circle = circle;
  var before = null,
      node = _Diagram.circles._;

  while (node) {
    if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
      if (node.L) node = node.L;else {
        before = node.P;
        break;
      }
    } else {
      if (node.R) node = node.R;else {
        before = node;
        break;
      }
    }
  }

  _Diagram.circles.insert(before, circle);

  if (!before) exports.firstCircle = firstCircle = circle;
}

function detachCircle(arc) {
  var circle = arc.circle;

  if (circle) {
    if (!circle.P) exports.firstCircle = firstCircle = circle.N;

    _Diagram.circles.remove(circle);

    circlePool.push(circle);
    (0, _RedBlackTree.RedBlackNode)(circle);
    arc.circle = null;
  }
}
},{"./RedBlackTree":"node_modules/d3-voronoi/src/RedBlackTree.js","./Diagram":"node_modules/d3-voronoi/src/Diagram.js"}],"node_modules/d3-voronoi/src/Beach.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeBeach = removeBeach;
exports.addBeach = addBeach;

var _RedBlackTree = require("./RedBlackTree");

var _Cell = require("./Cell");

var _Circle = require("./Circle");

var _Edge = require("./Edge");

var _Diagram = require("./Diagram");

var beachPool = [];

function Beach() {
  (0, _RedBlackTree.RedBlackNode)(this);
  this.edge = this.site = this.circle = null;
}

function createBeach(site) {
  var beach = beachPool.pop() || new Beach();
  beach.site = site;
  return beach;
}

function detachBeach(beach) {
  (0, _Circle.detachCircle)(beach);

  _Diagram.beaches.remove(beach);

  beachPool.push(beach);
  (0, _RedBlackTree.RedBlackNode)(beach);
}

function removeBeach(beach) {
  var circle = beach.circle,
      x = circle.x,
      y = circle.cy,
      vertex = [x, y],
      previous = beach.P,
      next = beach.N,
      disappearing = [beach];
  detachBeach(beach);
  var lArc = previous;

  while (lArc.circle && Math.abs(x - lArc.circle.x) < _Diagram.epsilon && Math.abs(y - lArc.circle.cy) < _Diagram.epsilon) {
    previous = lArc.P;
    disappearing.unshift(lArc);
    detachBeach(lArc);
    lArc = previous;
  }

  disappearing.unshift(lArc);
  (0, _Circle.detachCircle)(lArc);
  var rArc = next;

  while (rArc.circle && Math.abs(x - rArc.circle.x) < _Diagram.epsilon && Math.abs(y - rArc.circle.cy) < _Diagram.epsilon) {
    next = rArc.N;
    disappearing.push(rArc);
    detachBeach(rArc);
    rArc = next;
  }

  disappearing.push(rArc);
  (0, _Circle.detachCircle)(rArc);
  var nArcs = disappearing.length,
      iArc;

  for (iArc = 1; iArc < nArcs; ++iArc) {
    rArc = disappearing[iArc];
    lArc = disappearing[iArc - 1];
    (0, _Edge.setEdgeEnd)(rArc.edge, lArc.site, rArc.site, vertex);
  }

  lArc = disappearing[0];
  rArc = disappearing[nArcs - 1];
  rArc.edge = (0, _Edge.createEdge)(lArc.site, rArc.site, null, vertex);
  (0, _Circle.attachCircle)(lArc);
  (0, _Circle.attachCircle)(rArc);
}

function addBeach(site) {
  var x = site[0],
      directrix = site[1],
      lArc,
      rArc,
      dxl,
      dxr,
      node = _Diagram.beaches._;

  while (node) {
    dxl = leftBreakPoint(node, directrix) - x;
    if (dxl > _Diagram.epsilon) node = node.L;else {
      dxr = x - rightBreakPoint(node, directrix);

      if (dxr > _Diagram.epsilon) {
        if (!node.R) {
          lArc = node;
          break;
        }

        node = node.R;
      } else {
        if (dxl > -_Diagram.epsilon) {
          lArc = node.P;
          rArc = node;
        } else if (dxr > -_Diagram.epsilon) {
          lArc = node;
          rArc = node.N;
        } else {
          lArc = rArc = node;
        }

        break;
      }
    }
  }

  (0, _Cell.createCell)(site);
  var newArc = createBeach(site);

  _Diagram.beaches.insert(lArc, newArc);

  if (!lArc && !rArc) return;

  if (lArc === rArc) {
    (0, _Circle.detachCircle)(lArc);
    rArc = createBeach(lArc.site);

    _Diagram.beaches.insert(newArc, rArc);

    newArc.edge = rArc.edge = (0, _Edge.createEdge)(lArc.site, newArc.site);
    (0, _Circle.attachCircle)(lArc);
    (0, _Circle.attachCircle)(rArc);
    return;
  }

  if (!rArc) {
    // && lArc
    newArc.edge = (0, _Edge.createEdge)(lArc.site, newArc.site);
    return;
  } // else lArc !== rArc


  (0, _Circle.detachCircle)(lArc);
  (0, _Circle.detachCircle)(rArc);
  var lSite = lArc.site,
      ax = lSite[0],
      ay = lSite[1],
      bx = site[0] - ax,
      by = site[1] - ay,
      rSite = rArc.site,
      cx = rSite[0] - ax,
      cy = rSite[1] - ay,
      d = 2 * (bx * cy - by * cx),
      hb = bx * bx + by * by,
      hc = cx * cx + cy * cy,
      vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];
  (0, _Edge.setEdgeEnd)(rArc.edge, lSite, rSite, vertex);
  newArc.edge = (0, _Edge.createEdge)(lSite, site, null, vertex);
  rArc.edge = (0, _Edge.createEdge)(site, rSite, null, vertex);
  (0, _Circle.attachCircle)(lArc);
  (0, _Circle.attachCircle)(rArc);
}

function leftBreakPoint(arc, directrix) {
  var site = arc.site,
      rfocx = site[0],
      rfocy = site[1],
      pby2 = rfocy - directrix;
  if (!pby2) return rfocx;
  var lArc = arc.P;
  if (!lArc) return -Infinity;
  site = lArc.site;
  var lfocx = site[0],
      lfocy = site[1],
      plby2 = lfocy - directrix;
  if (!plby2) return lfocx;
  var hl = lfocx - rfocx,
      aby2 = 1 / pby2 - 1 / plby2,
      b = hl / plby2;
  if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
  return (rfocx + lfocx) / 2;
}

function rightBreakPoint(arc, directrix) {
  var rArc = arc.N;
  if (rArc) return leftBreakPoint(rArc, directrix);
  var site = arc.site;
  return site[1] === directrix ? site[0] : Infinity;
}
},{"./RedBlackTree":"node_modules/d3-voronoi/src/RedBlackTree.js","./Cell":"node_modules/d3-voronoi/src/Cell.js","./Circle":"node_modules/d3-voronoi/src/Circle.js","./Edge":"node_modules/d3-voronoi/src/Edge.js","./Diagram":"node_modules/d3-voronoi/src/Diagram.js"}],"node_modules/d3-voronoi/src/Diagram.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Diagram;
exports.edges = exports.circles = exports.cells = exports.beaches = exports.epsilon2 = exports.epsilon = void 0;

var _Beach = require("./Beach");

var _Cell = require("./Cell");

var _Circle = require("./Circle");

var _Edge = require("./Edge");

var _RedBlackTree = _interopRequireDefault(require("./RedBlackTree"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var epsilon = 1e-6;
exports.epsilon = epsilon;
var epsilon2 = 1e-12;
exports.epsilon2 = epsilon2;
var beaches;
exports.beaches = beaches;
var cells;
exports.cells = cells;
var circles;
exports.circles = circles;
var edges;
exports.edges = edges;

function triangleArea(a, b, c) {
  return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);
}

function lexicographic(a, b) {
  return b[1] - a[1] || b[0] - a[0];
}

function Diagram(sites, extent) {
  var site = sites.sort(lexicographic).pop(),
      x,
      y,
      circle;
  exports.edges = edges = [];
  exports.cells = cells = new Array(sites.length);
  exports.beaches = beaches = new _RedBlackTree.default();
  exports.circles = circles = new _RedBlackTree.default();

  while (true) {
    circle = _Circle.firstCircle;

    if (site && (!circle || site[1] < circle.y || site[1] === circle.y && site[0] < circle.x)) {
      if (site[0] !== x || site[1] !== y) {
        (0, _Beach.addBeach)(site);
        x = site[0], y = site[1];
      }

      site = sites.pop();
    } else if (circle) {
      (0, _Beach.removeBeach)(circle.arc);
    } else {
      break;
    }
  }

  (0, _Cell.sortCellHalfedges)();

  if (extent) {
    var x0 = +extent[0][0],
        y0 = +extent[0][1],
        x1 = +extent[1][0],
        y1 = +extent[1][1];
    (0, _Edge.clipEdges)(x0, y0, x1, y1);
    (0, _Cell.clipCells)(x0, y0, x1, y1);
  }

  this.edges = edges;
  this.cells = cells;
  exports.beaches = beaches = exports.circles = circles = exports.edges = edges = exports.cells = cells = null;
}

Diagram.prototype = {
  constructor: Diagram,
  polygons: function () {
    var edges = this.edges;
    return this.cells.map(function (cell) {
      var polygon = cell.halfedges.map(function (i) {
        return (0, _Cell.cellHalfedgeStart)(cell, edges[i]);
      });
      polygon.data = cell.site.data;
      return polygon;
    });
  },
  triangles: function () {
    var triangles = [],
        edges = this.edges;
    this.cells.forEach(function (cell, i) {
      if (!(m = (halfedges = cell.halfedges).length)) return;
      var site = cell.site,
          halfedges,
          j = -1,
          m,
          s0,
          e1 = edges[halfedges[m - 1]],
          s1 = e1.left === site ? e1.right : e1.left;

      while (++j < m) {
        s0 = s1;
        e1 = edges[halfedges[j]];
        s1 = e1.left === site ? e1.right : e1.left;

        if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {
          triangles.push([site.data, s0.data, s1.data]);
        }
      }
    });
    return triangles;
  },
  links: function () {
    return this.edges.filter(function (edge) {
      return edge.right;
    }).map(function (edge) {
      return {
        source: edge.left.data,
        target: edge.right.data
      };
    });
  },
  find: function (x, y, radius) {
    var that = this,
        i0,
        i1 = that._found || 0,
        n = that.cells.length,
        cell; // Use the previously-found cell, or start with an arbitrary one.

    while (!(cell = that.cells[i1])) if (++i1 >= n) return null;

    var dx = x - cell.site[0],
        dy = y - cell.site[1],
        d2 = dx * dx + dy * dy; // Traverse the half-edges to find a closer cell, if any.

    do {
      cell = that.cells[i0 = i1], i1 = null;
      cell.halfedges.forEach(function (e) {
        var edge = that.edges[e],
            v = edge.left;
        if ((v === cell.site || !v) && !(v = edge.right)) return;
        var vx = x - v[0],
            vy = y - v[1],
            v2 = vx * vx + vy * vy;
        if (v2 < d2) d2 = v2, i1 = v.index;
      });
    } while (i1 !== null);

    that._found = i0;
    return radius == null || d2 <= radius * radius ? cell.site : null;
  }
};
},{"./Beach":"node_modules/d3-voronoi/src/Beach.js","./Cell":"node_modules/d3-voronoi/src/Cell.js","./Circle":"node_modules/d3-voronoi/src/Circle.js","./Edge":"node_modules/d3-voronoi/src/Edge.js","./RedBlackTree":"node_modules/d3-voronoi/src/RedBlackTree.js"}],"node_modules/d3-voronoi/src/voronoi.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

var _point = require("./point");

var _Diagram = _interopRequireWildcard(require("./Diagram"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var x = _point.x,
      y = _point.y,
      extent = null;

  function voronoi(data) {
    return new _Diagram.default(data.map(function (d, i) {
      var s = [Math.round(x(d, i, data) / _Diagram.epsilon) * _Diagram.epsilon, Math.round(y(d, i, data) / _Diagram.epsilon) * _Diagram.epsilon];
      s.index = i;
      s.data = d;
      return s;
    }), extent);
  }

  voronoi.polygons = function (data) {
    return voronoi(data).polygons();
  };

  voronoi.links = function (data) {
    return voronoi(data).links();
  };

  voronoi.triangles = function (data) {
    return voronoi(data).triangles();
  };

  voronoi.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), voronoi) : x;
  };

  voronoi.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), voronoi) : y;
  };

  voronoi.extent = function (_) {
    return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];
  };

  voronoi.size = function (_) {
    return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];
  };

  return voronoi;
}
},{"./constant":"node_modules/d3-voronoi/src/constant.js","./point":"node_modules/d3-voronoi/src/point.js","./Diagram":"node_modules/d3-voronoi/src/Diagram.js"}],"node_modules/d3-voronoi/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "voronoi", {
  enumerable: true,
  get: function () {
    return _voronoi.default;
  }
});

var _voronoi = _interopRequireDefault(require("./voronoi"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./voronoi":"node_modules/d3-voronoi/src/voronoi.js"}],"node_modules/d3-zoom/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"node_modules/d3-zoom/src/event.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ZoomEvent;

function ZoomEvent(target, type, transform) {
  this.target = target;
  this.type = type;
  this.transform = transform;
}
},{}],"node_modules/d3-zoom/src/transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Transform = Transform;
exports.default = transform;
exports.identity = void 0;

function Transform(k, x, y) {
  this.k = k;
  this.x = x;
  this.y = y;
}

Transform.prototype = {
  constructor: Transform,
  scale: function (k) {
    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
  },
  translate: function (x, y) {
    return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
  },
  apply: function (point) {
    return [point[0] * this.k + this.x, point[1] * this.k + this.y];
  },
  applyX: function (x) {
    return x * this.k + this.x;
  },
  applyY: function (y) {
    return y * this.k + this.y;
  },
  invert: function (location) {
    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
  },
  invertX: function (x) {
    return (x - this.x) / this.k;
  },
  invertY: function (y) {
    return (y - this.y) / this.k;
  },
  rescaleX: function (x) {
    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
  },
  rescaleY: function (y) {
    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
  },
  toString: function () {
    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
  }
};
var identity = new Transform(1, 0, 0);
exports.identity = identity;
transform.prototype = Transform.prototype;

function transform(node) {
  while (!node.__zoom) if (!(node = node.parentNode)) return identity;

  return node.__zoom;
}
},{}],"node_modules/d3-zoom/src/noevent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nopropagation = nopropagation;
exports.default = _default;

var _d3Selection = require("d3-selection");

function nopropagation() {
  _d3Selection.event.stopImmediatePropagation();
}

function _default() {
  _d3Selection.event.preventDefault();

  _d3Selection.event.stopImmediatePropagation();
}
},{"d3-selection":"node_modules/d3-selection/src/index.js"}],"node_modules/d3-zoom/src/zoom.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Dispatch = require("d3-dispatch");

var _d3Drag = require("d3-drag");

var _d3Interpolate = require("d3-interpolate");

var _d3Selection = require("d3-selection");

var _d3Transition = require("d3-transition");

var _constant = _interopRequireDefault(require("./constant.js"));

var _event = _interopRequireDefault(require("./event.js"));

var _transform = require("./transform.js");

var _noevent = _interopRequireWildcard(require("./noevent.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Ignore right-click, since that should open the context menu.
function defaultFilter() {
  return !_d3Selection.event.ctrlKey && !_d3Selection.event.button;
}

function defaultExtent() {
  var e = this;

  if (e instanceof SVGElement) {
    e = e.ownerSVGElement || e;

    if (e.hasAttribute("viewBox")) {
      e = e.viewBox.baseVal;
      return [[e.x, e.y], [e.x + e.width, e.y + e.height]];
    }

    return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];
  }

  return [[0, 0], [e.clientWidth, e.clientHeight]];
}

function defaultTransform() {
  return this.__zoom || _transform.identity;
}

function defaultWheelDelta() {
  return -_d3Selection.event.deltaY * (_d3Selection.event.deltaMode === 1 ? 0.05 : _d3Selection.event.deltaMode ? 1 : 0.002);
}

function defaultTouchable() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}

function defaultConstrain(transform, extent, translateExtent) {
  var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],
      dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],
      dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],
      dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];
  return transform.translate(dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1), dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1));
}

function _default() {
  var filter = defaultFilter,
      extent = defaultExtent,
      constrain = defaultConstrain,
      wheelDelta = defaultWheelDelta,
      touchable = defaultTouchable,
      scaleExtent = [0, Infinity],
      translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]],
      duration = 250,
      interpolate = _d3Interpolate.interpolateZoom,
      listeners = (0, _d3Dispatch.dispatch)("start", "zoom", "end"),
      touchstarting,
      touchending,
      touchDelay = 500,
      wheelDelay = 150,
      clickDistance2 = 0;

  function zoom(selection) {
    selection.property("__zoom", defaultTransform).on("wheel.zoom", wheeled).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }

  zoom.transform = function (collection, transform, point) {
    var selection = collection.selection ? collection.selection() : collection;
    selection.property("__zoom", defaultTransform);

    if (collection !== selection) {
      schedule(collection, transform, point);
    } else {
      selection.interrupt().each(function () {
        gesture(this, arguments).start().zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform).end();
      });
    }
  };

  zoom.scaleBy = function (selection, k, p) {
    zoom.scaleTo(selection, function () {
      var k0 = this.__zoom.k,
          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return k0 * k1;
    }, p);
  };

  zoom.scaleTo = function (selection, k, p) {
    zoom.transform(selection, function () {
      var e = extent.apply(this, arguments),
          t0 = this.__zoom,
          p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p,
          p1 = t0.invert(p0),
          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
    }, p);
  };

  zoom.translateBy = function (selection, x, y) {
    zoom.transform(selection, function () {
      return constrain(this.__zoom.translate(typeof x === "function" ? x.apply(this, arguments) : x, typeof y === "function" ? y.apply(this, arguments) : y), extent.apply(this, arguments), translateExtent);
    });
  };

  zoom.translateTo = function (selection, x, y, p) {
    zoom.transform(selection, function () {
      var e = extent.apply(this, arguments),
          t = this.__zoom,
          p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;
      return constrain(_transform.identity.translate(p0[0], p0[1]).scale(t.k).translate(typeof x === "function" ? -x.apply(this, arguments) : -x, typeof y === "function" ? -y.apply(this, arguments) : -y), e, translateExtent);
    }, p);
  };

  function scale(transform, k) {
    k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
    return k === transform.k ? transform : new _transform.Transform(k, transform.x, transform.y);
  }

  function translate(transform, p0, p1) {
    var x = p0[0] - p1[0] * transform.k,
        y = p0[1] - p1[1] * transform.k;
    return x === transform.x && y === transform.y ? transform : new _transform.Transform(transform.k, x, y);
  }

  function centroid(extent) {
    return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];
  }

  function schedule(transition, transform, point) {
    transition.on("start.zoom", function () {
      gesture(this, arguments).start();
    }).on("interrupt.zoom end.zoom", function () {
      gesture(this, arguments).end();
    }).tween("zoom", function () {
      var that = this,
          args = arguments,
          g = gesture(that, args),
          e = extent.apply(that, args),
          p = point == null ? centroid(e) : typeof point === "function" ? point.apply(that, args) : point,
          w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),
          a = that.__zoom,
          b = typeof transform === "function" ? transform.apply(that, args) : transform,
          i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
      return function (t) {
        if (t === 1) t = b; // Avoid rounding error on end.
        else {
            var l = i(t),
                k = w / l[2];
            t = new _transform.Transform(k, p[0] - l[0] * k, p[1] - l[1] * k);
          }
        g.zoom(null, t);
      };
    });
  }

  function gesture(that, args, clean) {
    return !clean && that.__zooming || new Gesture(that, args);
  }

  function Gesture(that, args) {
    this.that = that;
    this.args = args;
    this.active = 0;
    this.extent = extent.apply(that, args);
    this.taps = 0;
  }

  Gesture.prototype = {
    start: function () {
      if (++this.active === 1) {
        this.that.__zooming = this;
        this.emit("start");
      }

      return this;
    },
    zoom: function (key, transform) {
      if (this.mouse && key !== "mouse") this.mouse[1] = transform.invert(this.mouse[0]);
      if (this.touch0 && key !== "touch") this.touch0[1] = transform.invert(this.touch0[0]);
      if (this.touch1 && key !== "touch") this.touch1[1] = transform.invert(this.touch1[0]);
      this.that.__zoom = transform;
      this.emit("zoom");
      return this;
    },
    end: function () {
      if (--this.active === 0) {
        delete this.that.__zooming;
        this.emit("end");
      }

      return this;
    },
    emit: function (type) {
      (0, _d3Selection.customEvent)(new _event.default(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);
    }
  };

  function wheeled() {
    if (!filter.apply(this, arguments)) return;
    var g = gesture(this, arguments),
        t = this.__zoom,
        k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),
        p = (0, _d3Selection.mouse)(this); // If the mouse is in the same location as before, reuse it.
    // If there were recent wheel events, reset the wheel idle timeout.

    if (g.wheel) {
      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
        g.mouse[1] = t.invert(g.mouse[0] = p);
      }

      clearTimeout(g.wheel);
    } // If this wheel event won’t trigger a transform change, ignore it.
    else if (t.k === k) return; // Otherwise, capture the mouse point and location at the start.
      else {
          g.mouse = [p, t.invert(p)];
          (0, _d3Transition.interrupt)(this);
          g.start();
        }

    (0, _noevent.default)();
    g.wheel = setTimeout(wheelidled, wheelDelay);
    g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));

    function wheelidled() {
      g.wheel = null;
      g.end();
    }
  }

  function mousedowned() {
    if (touchending || !filter.apply(this, arguments)) return;
    var g = gesture(this, arguments, true),
        v = (0, _d3Selection.select)(_d3Selection.event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true),
        p = (0, _d3Selection.mouse)(this),
        x0 = _d3Selection.event.clientX,
        y0 = _d3Selection.event.clientY;
    (0, _d3Drag.dragDisable)(_d3Selection.event.view);
    (0, _noevent.nopropagation)();
    g.mouse = [p, this.__zoom.invert(p)];
    (0, _d3Transition.interrupt)(this);
    g.start();

    function mousemoved() {
      (0, _noevent.default)();

      if (!g.moved) {
        var dx = _d3Selection.event.clientX - x0,
            dy = _d3Selection.event.clientY - y0;
        g.moved = dx * dx + dy * dy > clickDistance2;
      }

      g.zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = (0, _d3Selection.mouse)(g.that), g.mouse[1]), g.extent, translateExtent));
    }

    function mouseupped() {
      v.on("mousemove.zoom mouseup.zoom", null);
      (0, _d3Drag.dragEnable)(_d3Selection.event.view, g.moved);
      (0, _noevent.default)();
      g.end();
    }
  }

  function dblclicked() {
    if (!filter.apply(this, arguments)) return;
    var t0 = this.__zoom,
        p0 = (0, _d3Selection.mouse)(this),
        p1 = t0.invert(p0),
        k1 = t0.k * (_d3Selection.event.shiftKey ? 0.5 : 2),
        t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments), translateExtent);
    (0, _noevent.default)();
    if (duration > 0) (0, _d3Selection.select)(this).transition().duration(duration).call(schedule, t1, p0);else (0, _d3Selection.select)(this).call(zoom.transform, t1);
  }

  function touchstarted() {
    if (!filter.apply(this, arguments)) return;
    var touches = _d3Selection.event.touches,
        n = touches.length,
        g = gesture(this, arguments, _d3Selection.event.changedTouches.length === n),
        started,
        i,
        t,
        p;
    (0, _noevent.nopropagation)();

    for (i = 0; i < n; ++i) {
      t = touches[i], p = (0, _d3Selection.touch)(this, touches, t.identifier);
      p = [p, this.__zoom.invert(p), t.identifier];
      if (!g.touch0) g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;else if (!g.touch1 && g.touch0[2] !== p[2]) g.touch1 = p, g.taps = 0;
    }

    if (touchstarting) touchstarting = clearTimeout(touchstarting);

    if (started) {
      if (g.taps < 2) touchstarting = setTimeout(function () {
        touchstarting = null;
      }, touchDelay);
      (0, _d3Transition.interrupt)(this);
      g.start();
    }
  }

  function touchmoved() {
    if (!this.__zooming) return;
    var g = gesture(this, arguments),
        touches = _d3Selection.event.changedTouches,
        n = touches.length,
        i,
        t,
        p,
        l;
    (0, _noevent.default)();
    if (touchstarting) touchstarting = clearTimeout(touchstarting);
    g.taps = 0;

    for (i = 0; i < n; ++i) {
      t = touches[i], p = (0, _d3Selection.touch)(this, touches, t.identifier);
      if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
    }

    t = g.that.__zoom;

    if (g.touch1) {
      var p0 = g.touch0[0],
          l0 = g.touch0[1],
          p1 = g.touch1[0],
          l1 = g.touch1[1],
          dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,
          dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
      t = scale(t, Math.sqrt(dp / dl));
      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
    } else if (g.touch0) p = g.touch0[0], l = g.touch0[1];else return;

    g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
  }

  function touchended() {
    if (!this.__zooming) return;
    var g = gesture(this, arguments),
        touches = _d3Selection.event.changedTouches,
        n = touches.length,
        i,
        t;
    (0, _noevent.nopropagation)();
    if (touchending) clearTimeout(touchending);
    touchending = setTimeout(function () {
      touchending = null;
    }, touchDelay);

    for (i = 0; i < n; ++i) {
      t = touches[i];
      if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
    }

    if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
    if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);else {
      g.end(); // If this was a dbltap, reroute to the (optional) dblclick.zoom handler.

      if (g.taps === 2) {
        var p = (0, _d3Selection.select)(this).on("dblclick.zoom");
        if (p) p.apply(this, arguments);
      }
    }
  }

  zoom.wheelDelta = function (_) {
    return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : (0, _constant.default)(+_), zoom) : wheelDelta;
  };

  zoom.filter = function (_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : (0, _constant.default)(!!_), zoom) : filter;
  };

  zoom.touchable = function (_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : (0, _constant.default)(!!_), zoom) : touchable;
  };

  zoom.extent = function (_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : (0, _constant.default)([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
  };

  zoom.scaleExtent = function (_) {
    return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];
  };

  zoom.translateExtent = function (_) {
    return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
  };

  zoom.constrain = function (_) {
    return arguments.length ? (constrain = _, zoom) : constrain;
  };

  zoom.duration = function (_) {
    return arguments.length ? (duration = +_, zoom) : duration;
  };

  zoom.interpolate = function (_) {
    return arguments.length ? (interpolate = _, zoom) : interpolate;
  };

  zoom.on = function () {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? zoom : value;
  };

  zoom.clickDistance = function (_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
  };

  return zoom;
}
},{"d3-dispatch":"node_modules/d3-dispatch/src/index.js","d3-drag":"node_modules/d3-drag/src/index.js","d3-interpolate":"node_modules/d3-interpolate/src/index.js","d3-selection":"node_modules/d3-selection/src/index.js","d3-transition":"node_modules/d3-transition/src/index.js","./constant.js":"node_modules/d3-zoom/src/constant.js","./event.js":"node_modules/d3-zoom/src/event.js","./transform.js":"node_modules/d3-zoom/src/transform.js","./noevent.js":"node_modules/d3-zoom/src/noevent.js"}],"node_modules/d3-zoom/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "zoom", {
  enumerable: true,
  get: function () {
    return _zoom.default;
  }
});
Object.defineProperty(exports, "zoomTransform", {
  enumerable: true,
  get: function () {
    return _transform.default;
  }
});
Object.defineProperty(exports, "zoomIdentity", {
  enumerable: true,
  get: function () {
    return _transform.identity;
  }
});

var _zoom = _interopRequireDefault(require("./zoom.js"));

var _transform = _interopRequireWildcard(require("./transform.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./zoom.js":"node_modules/d3-zoom/src/zoom.js","./transform.js":"node_modules/d3-zoom/src/transform.js"}],"node_modules/d3/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  version: true
};
Object.defineProperty(exports, "version", {
  enumerable: true,
  get: function () {
    return _package.version;
  }
});

var _package = require("./dist/package.js");

var _d3Array = require("d3-array");

Object.keys(_d3Array).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Array[key];
    }
  });
});

var _d3Axis = require("d3-axis");

Object.keys(_d3Axis).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Axis[key];
    }
  });
});

var _d3Brush = require("d3-brush");

Object.keys(_d3Brush).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Brush[key];
    }
  });
});

var _d3Chord = require("d3-chord");

Object.keys(_d3Chord).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Chord[key];
    }
  });
});

var _d3Collection = require("d3-collection");

Object.keys(_d3Collection).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Collection[key];
    }
  });
});

var _d3Color = require("d3-color");

Object.keys(_d3Color).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Color[key];
    }
  });
});

var _d3Contour = require("d3-contour");

Object.keys(_d3Contour).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Contour[key];
    }
  });
});

var _d3Dispatch = require("d3-dispatch");

Object.keys(_d3Dispatch).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Dispatch[key];
    }
  });
});

var _d3Drag = require("d3-drag");

Object.keys(_d3Drag).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Drag[key];
    }
  });
});

var _d3Dsv = require("d3-dsv");

Object.keys(_d3Dsv).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Dsv[key];
    }
  });
});

var _d3Ease = require("d3-ease");

Object.keys(_d3Ease).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Ease[key];
    }
  });
});

var _d3Fetch = require("d3-fetch");

Object.keys(_d3Fetch).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Fetch[key];
    }
  });
});

var _d3Force = require("d3-force");

Object.keys(_d3Force).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Force[key];
    }
  });
});

var _d3Format = require("d3-format");

Object.keys(_d3Format).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Format[key];
    }
  });
});

var _d3Geo = require("d3-geo");

Object.keys(_d3Geo).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Geo[key];
    }
  });
});

var _d3Hierarchy = require("d3-hierarchy");

Object.keys(_d3Hierarchy).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Hierarchy[key];
    }
  });
});

var _d3Interpolate = require("d3-interpolate");

Object.keys(_d3Interpolate).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Interpolate[key];
    }
  });
});

var _d3Path = require("d3-path");

Object.keys(_d3Path).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Path[key];
    }
  });
});

var _d3Polygon = require("d3-polygon");

Object.keys(_d3Polygon).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Polygon[key];
    }
  });
});

var _d3Quadtree = require("d3-quadtree");

Object.keys(_d3Quadtree).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Quadtree[key];
    }
  });
});

var _d3Random = require("d3-random");

Object.keys(_d3Random).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Random[key];
    }
  });
});

var _d3Scale = require("d3-scale");

Object.keys(_d3Scale).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Scale[key];
    }
  });
});

var _d3ScaleChromatic = require("d3-scale-chromatic");

Object.keys(_d3ScaleChromatic).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3ScaleChromatic[key];
    }
  });
});

var _d3Selection = require("d3-selection");

Object.keys(_d3Selection).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Selection[key];
    }
  });
});

var _d3Shape = require("d3-shape");

Object.keys(_d3Shape).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Shape[key];
    }
  });
});

var _d3Time = require("d3-time");

Object.keys(_d3Time).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Time[key];
    }
  });
});

var _d3TimeFormat = require("d3-time-format");

Object.keys(_d3TimeFormat).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3TimeFormat[key];
    }
  });
});

var _d3Timer = require("d3-timer");

Object.keys(_d3Timer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Timer[key];
    }
  });
});

var _d3Transition = require("d3-transition");

Object.keys(_d3Transition).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Transition[key];
    }
  });
});

var _d3Voronoi = require("d3-voronoi");

Object.keys(_d3Voronoi).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Voronoi[key];
    }
  });
});

var _d3Zoom = require("d3-zoom");

Object.keys(_d3Zoom).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Zoom[key];
    }
  });
});
},{"./dist/package.js":"node_modules/d3/dist/package.js","d3-array":"node_modules/d3-array/src/index.js","d3-axis":"node_modules/d3-axis/src/index.js","d3-brush":"node_modules/d3-brush/src/index.js","d3-chord":"node_modules/d3-chord/src/index.js","d3-collection":"node_modules/d3-collection/src/index.js","d3-color":"node_modules/d3-color/src/index.js","d3-contour":"node_modules/d3-contour/src/index.js","d3-dispatch":"node_modules/d3-dispatch/src/index.js","d3-drag":"node_modules/d3-drag/src/index.js","d3-dsv":"node_modules/d3-dsv/src/index.js","d3-ease":"node_modules/d3-ease/src/index.js","d3-fetch":"node_modules/d3-fetch/src/index.js","d3-force":"node_modules/d3-force/src/index.js","d3-format":"node_modules/d3-format/src/index.js","d3-geo":"node_modules/d3-geo/src/index.js","d3-hierarchy":"node_modules/d3-hierarchy/src/index.js","d3-interpolate":"node_modules/d3-interpolate/src/index.js","d3-path":"node_modules/d3-path/src/index.js","d3-polygon":"node_modules/d3-polygon/src/index.js","d3-quadtree":"node_modules/d3-quadtree/src/index.js","d3-random":"node_modules/d3-random/src/index.js","d3-scale":"node_modules/d3-scale/src/index.js","d3-scale-chromatic":"node_modules/d3-scale-chromatic/src/index.js","d3-selection":"node_modules/d3-selection/src/index.js","d3-shape":"node_modules/d3-shape/src/index.js","d3-time":"node_modules/d3-time/src/index.js","d3-time-format":"node_modules/d3-time-format/src/index.js","d3-timer":"node_modules/d3-timer/src/index.js","d3-transition":"node_modules/d3-transition/src/index.js","d3-voronoi":"node_modules/d3-voronoi/src/index.js","d3-zoom":"node_modules/d3-zoom/src/index.js"}],"node_modules/svelte/index.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "SvelteComponent", {
  enumerable: true,
  get: function () {
    return _internal.SvelteComponentDev;
  }
});
Object.defineProperty(exports, "afterUpdate", {
  enumerable: true,
  get: function () {
    return _internal.afterUpdate;
  }
});
Object.defineProperty(exports, "beforeUpdate", {
  enumerable: true,
  get: function () {
    return _internal.beforeUpdate;
  }
});
Object.defineProperty(exports, "createEventDispatcher", {
  enumerable: true,
  get: function () {
    return _internal.createEventDispatcher;
  }
});
Object.defineProperty(exports, "getContext", {
  enumerable: true,
  get: function () {
    return _internal.getContext;
  }
});
Object.defineProperty(exports, "onDestroy", {
  enumerable: true,
  get: function () {
    return _internal.onDestroy;
  }
});
Object.defineProperty(exports, "onMount", {
  enumerable: true,
  get: function () {
    return _internal.onMount;
  }
});
Object.defineProperty(exports, "setContext", {
  enumerable: true,
  get: function () {
    return _internal.setContext;
  }
});
Object.defineProperty(exports, "tick", {
  enumerable: true,
  get: function () {
    return _internal.tick;
  }
});

var _internal = require("./internal");
},{"./internal":"node_modules/svelte/internal/index.mjs"}],"node_modules/topojson-client/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x;
}
},{}],"node_modules/topojson-client/src/transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _identity = _interopRequireDefault(require("./identity"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(transform) {
  if (transform == null) return _identity.default;
  var x0,
      y0,
      kx = transform.scale[0],
      ky = transform.scale[1],
      dx = transform.translate[0],
      dy = transform.translate[1];
  return function (input, i) {
    if (!i) x0 = y0 = 0;
    var j = 2,
        n = input.length,
        output = new Array(n);
    output[0] = (x0 += input[0]) * kx + dx;
    output[1] = (y0 += input[1]) * ky + dy;

    while (j < n) output[j] = input[j], ++j;

    return output;
  };
}
},{"./identity":"node_modules/topojson-client/src/identity.js"}],"node_modules/topojson-client/src/bbox.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _transform = _interopRequireDefault(require("./transform"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(topology) {
  var t = (0, _transform.default)(topology.transform),
      key,
      x0 = Infinity,
      y0 = x0,
      x1 = -x0,
      y1 = -x0;

  function bboxPoint(p) {
    p = t(p);
    if (p[0] < x0) x0 = p[0];
    if (p[0] > x1) x1 = p[0];
    if (p[1] < y0) y0 = p[1];
    if (p[1] > y1) y1 = p[1];
  }

  function bboxGeometry(o) {
    switch (o.type) {
      case "GeometryCollection":
        o.geometries.forEach(bboxGeometry);
        break;

      case "Point":
        bboxPoint(o.coordinates);
        break;

      case "MultiPoint":
        o.coordinates.forEach(bboxPoint);
        break;
    }
  }

  topology.arcs.forEach(function (arc) {
    var i = -1,
        n = arc.length,
        p;

    while (++i < n) {
      p = t(arc[i], i);
      if (p[0] < x0) x0 = p[0];
      if (p[0] > x1) x1 = p[0];
      if (p[1] < y0) y0 = p[1];
      if (p[1] > y1) y1 = p[1];
    }
  });

  for (key in topology.objects) {
    bboxGeometry(topology.objects[key]);
  }

  return [x0, y0, x1, y1];
}
},{"./transform":"node_modules/topojson-client/src/transform.js"}],"node_modules/topojson-client/src/reverse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array, n) {
  var t,
      j = array.length,
      i = j - n;

  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;
}
},{}],"node_modules/topojson-client/src/feature.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.feature = feature;
exports.object = object;

var _reverse = _interopRequireDefault(require("./reverse"));

var _transform = _interopRequireDefault(require("./transform"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(topology, o) {
  return o.type === "GeometryCollection" ? {
    type: "FeatureCollection",
    features: o.geometries.map(function (o) {
      return feature(topology, o);
    })
  } : feature(topology, o);
}

function feature(topology, o) {
  var id = o.id,
      bbox = o.bbox,
      properties = o.properties == null ? {} : o.properties,
      geometry = object(topology, o);
  return id == null && bbox == null ? {
    type: "Feature",
    properties: properties,
    geometry: geometry
  } : bbox == null ? {
    type: "Feature",
    id: id,
    properties: properties,
    geometry: geometry
  } : {
    type: "Feature",
    id: id,
    bbox: bbox,
    properties: properties,
    geometry: geometry
  };
}

function object(topology, o) {
  var transformPoint = (0, _transform.default)(topology.transform),
      arcs = topology.arcs;

  function arc(i, points) {
    if (points.length) points.pop();

    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {
      points.push(transformPoint(a[k], k));
    }

    if (i < 0) (0, _reverse.default)(points, n);
  }

  function point(p) {
    return transformPoint(p);
  }

  function line(arcs) {
    var points = [];

    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);

    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.

    return points;
  }

  function ring(arcs) {
    var points = line(arcs);

    while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.


    return points;
  }

  function polygon(arcs) {
    return arcs.map(ring);
  }

  function geometry(o) {
    var type = o.type,
        coordinates;

    switch (type) {
      case "GeometryCollection":
        return {
          type: type,
          geometries: o.geometries.map(geometry)
        };

      case "Point":
        coordinates = point(o.coordinates);
        break;

      case "MultiPoint":
        coordinates = o.coordinates.map(point);
        break;

      case "LineString":
        coordinates = line(o.arcs);
        break;

      case "MultiLineString":
        coordinates = o.arcs.map(line);
        break;

      case "Polygon":
        coordinates = polygon(o.arcs);
        break;

      case "MultiPolygon":
        coordinates = o.arcs.map(polygon);
        break;

      default:
        return null;
    }

    return {
      type: type,
      coordinates: coordinates
    };
  }

  return geometry(o);
}
},{"./reverse":"node_modules/topojson-client/src/reverse.js","./transform":"node_modules/topojson-client/src/transform.js"}],"node_modules/topojson-client/src/stitch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(topology, arcs) {
  var stitchedArcs = {},
      fragmentByStart = {},
      fragmentByEnd = {},
      fragments = [],
      emptyIndex = -1; // Stitch empty arcs first, since they may be subsumed by other arcs.

  arcs.forEach(function (i, j) {
    var arc = topology.arcs[i < 0 ? ~i : i],
        t;

    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {
      t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;
    }
  });
  arcs.forEach(function (i) {
    var e = ends(i),
        start = e[0],
        end = e[1],
        f,
        g;

    if (f = fragmentByEnd[start]) {
      delete fragmentByEnd[f.end];
      f.push(i);
      f.end = end;

      if (g = fragmentByStart[end]) {
        delete fragmentByStart[g.start];
        var fg = g === f ? f : f.concat(g);
        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;
      } else {
        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
      }
    } else if (f = fragmentByStart[end]) {
      delete fragmentByStart[f.start];
      f.unshift(i);
      f.start = start;

      if (g = fragmentByEnd[start]) {
        delete fragmentByEnd[g.end];
        var gf = g === f ? f : g.concat(f);
        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;
      } else {
        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
      }
    } else {
      f = [i];
      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;
    }
  });

  function ends(i) {
    var arc = topology.arcs[i < 0 ? ~i : i],
        p0 = arc[0],
        p1;
    if (topology.transform) p1 = [0, 0], arc.forEach(function (dp) {
      p1[0] += dp[0], p1[1] += dp[1];
    });else p1 = arc[arc.length - 1];
    return i < 0 ? [p1, p0] : [p0, p1];
  }

  function flush(fragmentByEnd, fragmentByStart) {
    for (var k in fragmentByEnd) {
      var f = fragmentByEnd[k];
      delete fragmentByStart[f.start];
      delete f.start;
      delete f.end;
      f.forEach(function (i) {
        stitchedArcs[i < 0 ? ~i : i] = 1;
      });
      fragments.push(f);
    }
  }

  flush(fragmentByEnd, fragmentByStart);
  flush(fragmentByStart, fragmentByEnd);
  arcs.forEach(function (i) {
    if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]);
  });
  return fragments;
}
},{}],"node_modules/topojson-client/src/mesh.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.meshArcs = meshArcs;

var _feature = require("./feature");

var _stitch = _interopRequireDefault(require("./stitch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(topology) {
  return (0, _feature.object)(topology, meshArcs.apply(this, arguments));
}

function meshArcs(topology, object, filter) {
  var arcs, i, n;
  if (arguments.length > 1) arcs = extractArcs(topology, object, filter);else for (i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i) arcs[i] = i;
  return {
    type: "MultiLineString",
    arcs: (0, _stitch.default)(topology, arcs)
  };
}

function extractArcs(topology, object, filter) {
  var arcs = [],
      geomsByArc = [],
      geom;

  function extract0(i) {
    var j = i < 0 ? ~i : i;
    (geomsByArc[j] || (geomsByArc[j] = [])).push({
      i: i,
      g: geom
    });
  }

  function extract1(arcs) {
    arcs.forEach(extract0);
  }

  function extract2(arcs) {
    arcs.forEach(extract1);
  }

  function extract3(arcs) {
    arcs.forEach(extract2);
  }

  function geometry(o) {
    switch (geom = o, o.type) {
      case "GeometryCollection":
        o.geometries.forEach(geometry);
        break;

      case "LineString":
        extract1(o.arcs);
        break;

      case "MultiLineString":
      case "Polygon":
        extract2(o.arcs);
        break;

      case "MultiPolygon":
        extract3(o.arcs);
        break;
    }
  }

  geometry(object);
  geomsByArc.forEach(filter == null ? function (geoms) {
    arcs.push(geoms[0].i);
  } : function (geoms) {
    if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i);
  });
  return arcs;
}
},{"./feature":"node_modules/topojson-client/src/feature.js","./stitch":"node_modules/topojson-client/src/stitch.js"}],"node_modules/topojson-client/src/merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.mergeArcs = mergeArcs;

var _feature = require("./feature");

var _stitch = _interopRequireDefault(require("./stitch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function planarRingArea(ring) {
  var i = -1,
      n = ring.length,
      a,
      b = ring[n - 1],
      area = 0;

  while (++i < n) a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];

  return Math.abs(area); // Note: doubled area!
}

function _default(topology) {
  return (0, _feature.object)(topology, mergeArcs.apply(this, arguments));
}

function mergeArcs(topology, objects) {
  var polygonsByArc = {},
      polygons = [],
      groups = [];
  objects.forEach(geometry);

  function geometry(o) {
    switch (o.type) {
      case "GeometryCollection":
        o.geometries.forEach(geometry);
        break;

      case "Polygon":
        extract(o.arcs);
        break;

      case "MultiPolygon":
        o.arcs.forEach(extract);
        break;
    }
  }

  function extract(polygon) {
    polygon.forEach(function (ring) {
      ring.forEach(function (arc) {
        (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);
      });
    });
    polygons.push(polygon);
  }

  function area(ring) {
    return planarRingArea((0, _feature.object)(topology, {
      type: "Polygon",
      arcs: [ring]
    }).coordinates[0]);
  }

  polygons.forEach(function (polygon) {
    if (!polygon._) {
      var group = [],
          neighbors = [polygon];
      polygon._ = 1;
      groups.push(group);

      while (polygon = neighbors.pop()) {
        group.push(polygon);
        polygon.forEach(function (ring) {
          ring.forEach(function (arc) {
            polygonsByArc[arc < 0 ? ~arc : arc].forEach(function (polygon) {
              if (!polygon._) {
                polygon._ = 1;
                neighbors.push(polygon);
              }
            });
          });
        });
      }
    }
  });
  polygons.forEach(function (polygon) {
    delete polygon._;
  });
  return {
    type: "MultiPolygon",
    arcs: groups.map(function (polygons) {
      var arcs = [],
          n; // Extract the exterior (unique) arcs.

      polygons.forEach(function (polygon) {
        polygon.forEach(function (ring) {
          ring.forEach(function (arc) {
            if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {
              arcs.push(arc);
            }
          });
        });
      }); // Stitch the arcs into one or more rings.

      arcs = (0, _stitch.default)(topology, arcs); // If more than one ring is returned,
      // at most one of these rings can be the exterior;
      // choose the one with the greatest absolute area.

      if ((n = arcs.length) > 1) {
        for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {
          if ((ki = area(arcs[i])) > k) {
            t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;
          }
        }
      }

      return arcs;
    })
  };
}
},{"./feature":"node_modules/topojson-client/src/feature.js","./stitch":"node_modules/topojson-client/src/stitch.js"}],"node_modules/topojson-client/src/bisect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, x) {
  var lo = 0,
      hi = a.length;

  while (lo < hi) {
    var mid = lo + hi >>> 1;
    if (a[mid] < x) lo = mid + 1;else hi = mid;
  }

  return lo;
}
},{}],"node_modules/topojson-client/src/neighbors.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _bisect = _interopRequireDefault(require("./bisect"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(objects) {
  var indexesByArc = {},
      // arc index -> array of object indexes
  neighbors = objects.map(function () {
    return [];
  });

  function line(arcs, i) {
    arcs.forEach(function (a) {
      if (a < 0) a = ~a;
      var o = indexesByArc[a];
      if (o) o.push(i);else indexesByArc[a] = [i];
    });
  }

  function polygon(arcs, i) {
    arcs.forEach(function (arc) {
      line(arc, i);
    });
  }

  function geometry(o, i) {
    if (o.type === "GeometryCollection") o.geometries.forEach(function (o) {
      geometry(o, i);
    });else if (o.type in geometryType) geometryType[o.type](o.arcs, i);
  }

  var geometryType = {
    LineString: line,
    MultiLineString: polygon,
    Polygon: polygon,
    MultiPolygon: function (arcs, i) {
      arcs.forEach(function (arc) {
        polygon(arc, i);
      });
    }
  };
  objects.forEach(geometry);

  for (var i in indexesByArc) {
    for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {
      for (var k = j + 1; k < m; ++k) {
        var ij = indexes[j],
            ik = indexes[k],
            n;
        if ((n = neighbors[ij])[i = (0, _bisect.default)(n, ik)] !== ik) n.splice(i, 0, ik);
        if ((n = neighbors[ik])[i = (0, _bisect.default)(n, ij)] !== ij) n.splice(i, 0, ij);
      }
    }
  }

  return neighbors;
}
},{"./bisect":"node_modules/topojson-client/src/bisect.js"}],"node_modules/topojson-client/src/untransform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _identity = _interopRequireDefault(require("./identity"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(transform) {
  if (transform == null) return _identity.default;
  var x0,
      y0,
      kx = transform.scale[0],
      ky = transform.scale[1],
      dx = transform.translate[0],
      dy = transform.translate[1];
  return function (input, i) {
    if (!i) x0 = y0 = 0;
    var j = 2,
        n = input.length,
        output = new Array(n),
        x1 = Math.round((input[0] - dx) / kx),
        y1 = Math.round((input[1] - dy) / ky);
    output[0] = x1 - x0, x0 = x1;
    output[1] = y1 - y0, y0 = y1;

    while (j < n) output[j] = input[j], ++j;

    return output;
  };
}
},{"./identity":"node_modules/topojson-client/src/identity.js"}],"node_modules/topojson-client/src/quantize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _bbox = _interopRequireDefault(require("./bbox"));

var _untransform = _interopRequireDefault(require("./untransform"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(topology, transform) {
  if (topology.transform) throw new Error("already quantized");

  if (!transform || !transform.scale) {
    if (!((n = Math.floor(transform)) >= 2)) throw new Error("n must be ≥2");
    box = topology.bbox || (0, _bbox.default)(topology);
    var x0 = box[0],
        y0 = box[1],
        x1 = box[2],
        y1 = box[3],
        n;
    transform = {
      scale: [x1 - x0 ? (x1 - x0) / (n - 1) : 1, y1 - y0 ? (y1 - y0) / (n - 1) : 1],
      translate: [x0, y0]
    };
  } else {
    box = topology.bbox;
  }

  var t = (0, _untransform.default)(transform),
      box,
      key,
      inputs = topology.objects,
      outputs = {};

  function quantizePoint(point) {
    return t(point);
  }

  function quantizeGeometry(input) {
    var output;

    switch (input.type) {
      case "GeometryCollection":
        output = {
          type: "GeometryCollection",
          geometries: input.geometries.map(quantizeGeometry)
        };
        break;

      case "Point":
        output = {
          type: "Point",
          coordinates: quantizePoint(input.coordinates)
        };
        break;

      case "MultiPoint":
        output = {
          type: "MultiPoint",
          coordinates: input.coordinates.map(quantizePoint)
        };
        break;

      default:
        return input;
    }

    if (input.id != null) output.id = input.id;
    if (input.bbox != null) output.bbox = input.bbox;
    if (input.properties != null) output.properties = input.properties;
    return output;
  }

  function quantizeArc(input) {
    var i = 0,
        j = 1,
        n = input.length,
        p,
        output = new Array(n); // pessimistic

    output[0] = t(input[0], 0);

    while (++i < n) if ((p = t(input[i], i))[0] || p[1]) output[j++] = p; // non-coincident points


    if (j === 1) output[j++] = [0, 0]; // an arc must have at least two points

    output.length = j;
    return output;
  }

  for (key in inputs) outputs[key] = quantizeGeometry(inputs[key]);

  return {
    type: "Topology",
    bbox: box,
    transform: transform,
    objects: outputs,
    arcs: topology.arcs.map(quantizeArc)
  };
}
},{"./bbox":"node_modules/topojson-client/src/bbox.js","./untransform":"node_modules/topojson-client/src/untransform.js"}],"node_modules/topojson-client/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "bbox", {
  enumerable: true,
  get: function () {
    return _bbox.default;
  }
});
Object.defineProperty(exports, "feature", {
  enumerable: true,
  get: function () {
    return _feature.default;
  }
});
Object.defineProperty(exports, "mesh", {
  enumerable: true,
  get: function () {
    return _mesh.default;
  }
});
Object.defineProperty(exports, "meshArcs", {
  enumerable: true,
  get: function () {
    return _mesh.meshArcs;
  }
});
Object.defineProperty(exports, "merge", {
  enumerable: true,
  get: function () {
    return _merge.default;
  }
});
Object.defineProperty(exports, "mergeArcs", {
  enumerable: true,
  get: function () {
    return _merge.mergeArcs;
  }
});
Object.defineProperty(exports, "neighbors", {
  enumerable: true,
  get: function () {
    return _neighbors.default;
  }
});
Object.defineProperty(exports, "quantize", {
  enumerable: true,
  get: function () {
    return _quantize.default;
  }
});
Object.defineProperty(exports, "transform", {
  enumerable: true,
  get: function () {
    return _transform.default;
  }
});
Object.defineProperty(exports, "untransform", {
  enumerable: true,
  get: function () {
    return _untransform.default;
  }
});

var _bbox = _interopRequireDefault(require("./src/bbox"));

var _feature = _interopRequireDefault(require("./src/feature"));

var _mesh = _interopRequireWildcard(require("./src/mesh"));

var _merge = _interopRequireWildcard(require("./src/merge"));

var _neighbors = _interopRequireDefault(require("./src/neighbors"));

var _quantize = _interopRequireDefault(require("./src/quantize"));

var _transform = _interopRequireDefault(require("./src/transform"));

var _untransform = _interopRequireDefault(require("./src/untransform"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./src/bbox":"node_modules/topojson-client/src/bbox.js","./src/feature":"node_modules/topojson-client/src/feature.js","./src/mesh":"node_modules/topojson-client/src/mesh.js","./src/merge":"node_modules/topojson-client/src/merge.js","./src/neighbors":"node_modules/topojson-client/src/neighbors.js","./src/quantize":"node_modules/topojson-client/src/quantize.js","./src/transform":"node_modules/topojson-client/src/transform.js","./src/untransform":"node_modules/topojson-client/src/untransform.js"}],"node_modules/topojson-server/src/bounds.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Computes the bounding box of the specified hash of GeoJSON objects.
function _default(objects) {
  var x0 = Infinity,
      y0 = Infinity,
      x1 = -Infinity,
      y1 = -Infinity;

  function boundGeometry(geometry) {
    if (geometry != null && boundGeometryType.hasOwnProperty(geometry.type)) boundGeometryType[geometry.type](geometry);
  }

  var boundGeometryType = {
    GeometryCollection: function (o) {
      o.geometries.forEach(boundGeometry);
    },
    Point: function (o) {
      boundPoint(o.coordinates);
    },
    MultiPoint: function (o) {
      o.coordinates.forEach(boundPoint);
    },
    LineString: function (o) {
      boundLine(o.arcs);
    },
    MultiLineString: function (o) {
      o.arcs.forEach(boundLine);
    },
    Polygon: function (o) {
      o.arcs.forEach(boundLine);
    },
    MultiPolygon: function (o) {
      o.arcs.forEach(boundMultiLine);
    }
  };

  function boundPoint(coordinates) {
    var x = coordinates[0],
        y = coordinates[1];
    if (x < x0) x0 = x;
    if (x > x1) x1 = x;
    if (y < y0) y0 = y;
    if (y > y1) y1 = y;
  }

  function boundLine(coordinates) {
    coordinates.forEach(boundPoint);
  }

  function boundMultiLine(coordinates) {
    coordinates.forEach(boundLine);
  }

  for (var key in objects) {
    boundGeometry(objects[key]);
  }

  return x1 >= x0 && y1 >= y0 ? [x0, y0, x1, y1] : undefined;
}
},{}],"node_modules/topojson-server/src/hash/hashset.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(size, hash, equal, type, empty) {
  if (arguments.length === 3) {
    type = Array;
    empty = null;
  }

  var store = new type(size = 1 << Math.max(4, Math.ceil(Math.log(size) / Math.LN2))),
      mask = size - 1;

  for (var i = 0; i < size; ++i) {
    store[i] = empty;
  }

  function add(value) {
    var index = hash(value) & mask,
        match = store[index],
        collisions = 0;

    while (match != empty) {
      if (equal(match, value)) return true;
      if (++collisions >= size) throw new Error("full hashset");
      match = store[index = index + 1 & mask];
    }

    store[index] = value;
    return true;
  }

  function has(value) {
    var index = hash(value) & mask,
        match = store[index],
        collisions = 0;

    while (match != empty) {
      if (equal(match, value)) return true;
      if (++collisions >= size) break;
      match = store[index = index + 1 & mask];
    }

    return false;
  }

  function values() {
    var values = [];

    for (var i = 0, n = store.length; i < n; ++i) {
      var match = store[i];
      if (match != empty) values.push(match);
    }

    return values;
  }

  return {
    add: add,
    has: has,
    values: values
  };
}
},{}],"node_modules/topojson-server/src/hash/hashmap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(size, hash, equal, keyType, keyEmpty, valueType) {
  if (arguments.length === 3) {
    keyType = valueType = Array;
    keyEmpty = null;
  }

  var keystore = new keyType(size = 1 << Math.max(4, Math.ceil(Math.log(size) / Math.LN2))),
      valstore = new valueType(size),
      mask = size - 1;

  for (var i = 0; i < size; ++i) {
    keystore[i] = keyEmpty;
  }

  function set(key, value) {
    var index = hash(key) & mask,
        matchKey = keystore[index],
        collisions = 0;

    while (matchKey != keyEmpty) {
      if (equal(matchKey, key)) return valstore[index] = value;
      if (++collisions >= size) throw new Error("full hashmap");
      matchKey = keystore[index = index + 1 & mask];
    }

    keystore[index] = key;
    valstore[index] = value;
    return value;
  }

  function maybeSet(key, value) {
    var index = hash(key) & mask,
        matchKey = keystore[index],
        collisions = 0;

    while (matchKey != keyEmpty) {
      if (equal(matchKey, key)) return valstore[index];
      if (++collisions >= size) throw new Error("full hashmap");
      matchKey = keystore[index = index + 1 & mask];
    }

    keystore[index] = key;
    valstore[index] = value;
    return value;
  }

  function get(key, missingValue) {
    var index = hash(key) & mask,
        matchKey = keystore[index],
        collisions = 0;

    while (matchKey != keyEmpty) {
      if (equal(matchKey, key)) return valstore[index];
      if (++collisions >= size) break;
      matchKey = keystore[index = index + 1 & mask];
    }

    return missingValue;
  }

  function keys() {
    var keys = [];

    for (var i = 0, n = keystore.length; i < n; ++i) {
      var matchKey = keystore[i];
      if (matchKey != keyEmpty) keys.push(matchKey);
    }

    return keys;
  }

  return {
    set: set,
    maybeSet: maybeSet,
    // set if unset
    get: get,
    keys: keys
  };
}
},{}],"node_modules/topojson-server/src/hash/point-equal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(pointA, pointB) {
  return pointA[0] === pointB[0] && pointA[1] === pointB[1];
}
},{}],"node_modules/topojson-server/src/hash/point-hash.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
// TODO if quantized, use simpler Int32 hashing?
var buffer = new ArrayBuffer(16),
    floats = new Float64Array(buffer),
    uints = new Uint32Array(buffer);

function _default(point) {
  floats[0] = point[0];
  floats[1] = point[1];
  var hash = uints[0] ^ uints[1];
  hash = hash << 5 ^ hash >> 7 ^ uints[2] ^ uints[3];
  return hash & 0x7fffffff;
}
},{}],"node_modules/topojson-server/src/join.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _hashset = _interopRequireDefault(require("./hash/hashset"));

var _hashmap = _interopRequireDefault(require("./hash/hashmap"));

var _pointEqual = _interopRequireDefault(require("./hash/point-equal"));

var _pointHash = _interopRequireDefault(require("./hash/point-hash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Given an extracted (pre-)topology, identifies all of the junctions. These are
// the points at which arcs (lines or rings) will need to be cut so that each
// arc is represented uniquely.
//
// A junction is a point where at least one arc deviates from another arc going
// through the same point. For example, consider the point B. If there is a arc
// through ABC and another arc through CBA, then B is not a junction because in
// both cases the adjacent point pairs are {A,C}. However, if there is an
// additional arc ABD, then {A,D} != {A,C}, and thus B becomes a junction.
//
// For a closed ring ABCA, the first point A’s adjacent points are the second
// and last point {B,C}. For a line, the first and last point are always
// considered junctions, even if the line is closed; this ensures that a closed
// line is never rotated.
function _default(topology) {
  var coordinates = topology.coordinates,
      lines = topology.lines,
      rings = topology.rings,
      indexes = index(),
      visitedByIndex = new Int32Array(coordinates.length),
      leftByIndex = new Int32Array(coordinates.length),
      rightByIndex = new Int32Array(coordinates.length),
      junctionByIndex = new Int8Array(coordinates.length),
      junctionCount = 0,
      // upper bound on number of junctions
  i,
      n,
      previousIndex,
      currentIndex,
      nextIndex;

  for (i = 0, n = coordinates.length; i < n; ++i) {
    visitedByIndex[i] = leftByIndex[i] = rightByIndex[i] = -1;
  }

  for (i = 0, n = lines.length; i < n; ++i) {
    var line = lines[i],
        lineStart = line[0],
        lineEnd = line[1];
    currentIndex = indexes[lineStart];
    nextIndex = indexes[++lineStart];
    ++junctionCount, junctionByIndex[currentIndex] = 1; // start

    while (++lineStart <= lineEnd) {
      sequence(i, previousIndex = currentIndex, currentIndex = nextIndex, nextIndex = indexes[lineStart]);
    }

    ++junctionCount, junctionByIndex[nextIndex] = 1; // end
  }

  for (i = 0, n = coordinates.length; i < n; ++i) {
    visitedByIndex[i] = -1;
  }

  for (i = 0, n = rings.length; i < n; ++i) {
    var ring = rings[i],
        ringStart = ring[0] + 1,
        ringEnd = ring[1];
    previousIndex = indexes[ringEnd - 1];
    currentIndex = indexes[ringStart - 1];
    nextIndex = indexes[ringStart];
    sequence(i, previousIndex, currentIndex, nextIndex);

    while (++ringStart <= ringEnd) {
      sequence(i, previousIndex = currentIndex, currentIndex = nextIndex, nextIndex = indexes[ringStart]);
    }
  }

  function sequence(i, previousIndex, currentIndex, nextIndex) {
    if (visitedByIndex[currentIndex] === i) return; // ignore self-intersection

    visitedByIndex[currentIndex] = i;
    var leftIndex = leftByIndex[currentIndex];

    if (leftIndex >= 0) {
      var rightIndex = rightByIndex[currentIndex];

      if ((leftIndex !== previousIndex || rightIndex !== nextIndex) && (leftIndex !== nextIndex || rightIndex !== previousIndex)) {
        ++junctionCount, junctionByIndex[currentIndex] = 1;
      }
    } else {
      leftByIndex[currentIndex] = previousIndex;
      rightByIndex[currentIndex] = nextIndex;
    }
  }

  function index() {
    var indexByPoint = (0, _hashmap.default)(coordinates.length * 1.4, hashIndex, equalIndex, Int32Array, -1, Int32Array),
        indexes = new Int32Array(coordinates.length);

    for (var i = 0, n = coordinates.length; i < n; ++i) {
      indexes[i] = indexByPoint.maybeSet(i, i);
    }

    return indexes;
  }

  function hashIndex(i) {
    return (0, _pointHash.default)(coordinates[i]);
  }

  function equalIndex(i, j) {
    return (0, _pointEqual.default)(coordinates[i], coordinates[j]);
  }

  visitedByIndex = leftByIndex = rightByIndex = null;
  var junctionByPoint = (0, _hashset.default)(junctionCount * 1.4, _pointHash.default, _pointEqual.default),
      j; // Convert back to a standard hashset by point for caller convenience.

  for (i = 0, n = coordinates.length; i < n; ++i) {
    if (junctionByIndex[j = indexes[i]]) {
      junctionByPoint.add(coordinates[j]);
    }
  }

  return junctionByPoint;
}
},{"./hash/hashset":"node_modules/topojson-server/src/hash/hashset.js","./hash/hashmap":"node_modules/topojson-server/src/hash/hashmap.js","./hash/point-equal":"node_modules/topojson-server/src/hash/point-equal.js","./hash/point-hash":"node_modules/topojson-server/src/hash/point-hash.js"}],"node_modules/topojson-server/src/cut.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _join = _interopRequireDefault(require("./join"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Given an extracted (pre-)topology, cuts (or rotates) arcs so that all shared
// point sequences are identified. The topology can then be subsequently deduped
// to remove exact duplicate arcs.
function _default(topology) {
  var junctions = (0, _join.default)(topology),
      coordinates = topology.coordinates,
      lines = topology.lines,
      rings = topology.rings,
      next,
      i,
      n;

  for (i = 0, n = lines.length; i < n; ++i) {
    var line = lines[i],
        lineMid = line[0],
        lineEnd = line[1];

    while (++lineMid < lineEnd) {
      if (junctions.has(coordinates[lineMid])) {
        next = {
          0: lineMid,
          1: line[1]
        };
        line[1] = lineMid;
        line = line.next = next;
      }
    }
  }

  for (i = 0, n = rings.length; i < n; ++i) {
    var ring = rings[i],
        ringStart = ring[0],
        ringMid = ringStart,
        ringEnd = ring[1],
        ringFixed = junctions.has(coordinates[ringStart]);

    while (++ringMid < ringEnd) {
      if (junctions.has(coordinates[ringMid])) {
        if (ringFixed) {
          next = {
            0: ringMid,
            1: ring[1]
          };
          ring[1] = ringMid;
          ring = ring.next = next;
        } else {
          // For the first junction, we can rotate rather than cut.
          rotateArray(coordinates, ringStart, ringEnd, ringEnd - ringMid);
          coordinates[ringEnd] = coordinates[ringStart];
          ringFixed = true;
          ringMid = ringStart; // restart; we may have skipped junctions
        }
      }
    }
  }

  return topology;
}

function rotateArray(array, start, end, offset) {
  reverse(array, start, end);
  reverse(array, start, start + offset);
  reverse(array, start + offset, end);
}

function reverse(array, start, end) {
  for (var mid = start + (end-- - start >> 1), t; start < mid; ++start, --end) {
    t = array[start], array[start] = array[end], array[end] = t;
  }
}
},{"./join":"node_modules/topojson-server/src/join.js"}],"node_modules/topojson-server/src/dedup.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _hashmap = _interopRequireDefault(require("./hash/hashmap"));

var _pointEqual = _interopRequireDefault(require("./hash/point-equal"));

var _pointHash = _interopRequireDefault(require("./hash/point-hash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Given a cut topology, combines duplicate arcs.
function _default(topology) {
  var coordinates = topology.coordinates,
      lines = topology.lines,
      line,
      rings = topology.rings,
      ring,
      arcCount = lines.length + rings.length,
      i,
      n;
  delete topology.lines;
  delete topology.rings; // Count the number of (non-unique) arcs to initialize the hashmap safely.

  for (i = 0, n = lines.length; i < n; ++i) {
    line = lines[i];

    while (line = line.next) ++arcCount;
  }

  for (i = 0, n = rings.length; i < n; ++i) {
    ring = rings[i];

    while (ring = ring.next) ++arcCount;
  }

  var arcsByEnd = (0, _hashmap.default)(arcCount * 2 * 1.4, _pointHash.default, _pointEqual.default),
      arcs = topology.arcs = [];

  for (i = 0, n = lines.length; i < n; ++i) {
    line = lines[i];

    do {
      dedupLine(line);
    } while (line = line.next);
  }

  for (i = 0, n = rings.length; i < n; ++i) {
    ring = rings[i];

    if (ring.next) {
      // arc is no longer closed
      do {
        dedupLine(ring);
      } while (ring = ring.next);
    } else {
      dedupRing(ring);
    }
  }

  function dedupLine(arc) {
    var startPoint, endPoint, startArcs, startArc, endArcs, endArc, i, n; // Does this arc match an existing arc in order?

    if (startArcs = arcsByEnd.get(startPoint = coordinates[arc[0]])) {
      for (i = 0, n = startArcs.length; i < n; ++i) {
        startArc = startArcs[i];

        if (equalLine(startArc, arc)) {
          arc[0] = startArc[0];
          arc[1] = startArc[1];
          return;
        }
      }
    } // Does this arc match an existing arc in reverse order?


    if (endArcs = arcsByEnd.get(endPoint = coordinates[arc[1]])) {
      for (i = 0, n = endArcs.length; i < n; ++i) {
        endArc = endArcs[i];

        if (reverseEqualLine(endArc, arc)) {
          arc[1] = endArc[0];
          arc[0] = endArc[1];
          return;
        }
      }
    }

    if (startArcs) startArcs.push(arc);else arcsByEnd.set(startPoint, [arc]);
    if (endArcs) endArcs.push(arc);else arcsByEnd.set(endPoint, [arc]);
    arcs.push(arc);
  }

  function dedupRing(arc) {
    var endPoint, endArcs, endArc, i, n; // Does this arc match an existing line in order, or reverse order?
    // Rings are closed, so their start point and end point is the same.

    if (endArcs = arcsByEnd.get(endPoint = coordinates[arc[0]])) {
      for (i = 0, n = endArcs.length; i < n; ++i) {
        endArc = endArcs[i];

        if (equalRing(endArc, arc)) {
          arc[0] = endArc[0];
          arc[1] = endArc[1];
          return;
        }

        if (reverseEqualRing(endArc, arc)) {
          arc[0] = endArc[1];
          arc[1] = endArc[0];
          return;
        }
      }
    } // Otherwise, does this arc match an existing ring in order, or reverse order?


    if (endArcs = arcsByEnd.get(endPoint = coordinates[arc[0] + findMinimumOffset(arc)])) {
      for (i = 0, n = endArcs.length; i < n; ++i) {
        endArc = endArcs[i];

        if (equalRing(endArc, arc)) {
          arc[0] = endArc[0];
          arc[1] = endArc[1];
          return;
        }

        if (reverseEqualRing(endArc, arc)) {
          arc[0] = endArc[1];
          arc[1] = endArc[0];
          return;
        }
      }
    }

    if (endArcs) endArcs.push(arc);else arcsByEnd.set(endPoint, [arc]);
    arcs.push(arc);
  }

  function equalLine(arcA, arcB) {
    var ia = arcA[0],
        ib = arcB[0],
        ja = arcA[1],
        jb = arcB[1];
    if (ia - ja !== ib - jb) return false;

    for (; ia <= ja; ++ia, ++ib) if (!(0, _pointEqual.default)(coordinates[ia], coordinates[ib])) return false;

    return true;
  }

  function reverseEqualLine(arcA, arcB) {
    var ia = arcA[0],
        ib = arcB[0],
        ja = arcA[1],
        jb = arcB[1];
    if (ia - ja !== ib - jb) return false;

    for (; ia <= ja; ++ia, --jb) if (!(0, _pointEqual.default)(coordinates[ia], coordinates[jb])) return false;

    return true;
  }

  function equalRing(arcA, arcB) {
    var ia = arcA[0],
        ib = arcB[0],
        ja = arcA[1],
        jb = arcB[1],
        n = ja - ia;
    if (n !== jb - ib) return false;
    var ka = findMinimumOffset(arcA),
        kb = findMinimumOffset(arcB);

    for (var i = 0; i < n; ++i) {
      if (!(0, _pointEqual.default)(coordinates[ia + (i + ka) % n], coordinates[ib + (i + kb) % n])) return false;
    }

    return true;
  }

  function reverseEqualRing(arcA, arcB) {
    var ia = arcA[0],
        ib = arcB[0],
        ja = arcA[1],
        jb = arcB[1],
        n = ja - ia;
    if (n !== jb - ib) return false;
    var ka = findMinimumOffset(arcA),
        kb = n - findMinimumOffset(arcB);

    for (var i = 0; i < n; ++i) {
      if (!(0, _pointEqual.default)(coordinates[ia + (i + ka) % n], coordinates[jb - (i + kb) % n])) return false;
    }

    return true;
  } // Rings are rotated to a consistent, but arbitrary, start point.
  // This is necessary to detect when a ring and a rotated copy are dupes.


  function findMinimumOffset(arc) {
    var start = arc[0],
        end = arc[1],
        mid = start,
        minimum = mid,
        minimumPoint = coordinates[mid];

    while (++mid < end) {
      var point = coordinates[mid];

      if (point[0] < minimumPoint[0] || point[0] === minimumPoint[0] && point[1] < minimumPoint[1]) {
        minimum = mid;
        minimumPoint = point;
      }
    }

    return minimum - start;
  }

  return topology;
}
},{"./hash/hashmap":"node_modules/topojson-server/src/hash/hashmap.js","./hash/point-equal":"node_modules/topojson-server/src/hash/point-equal.js","./hash/point-hash":"node_modules/topojson-server/src/hash/point-hash.js"}],"node_modules/topojson-server/src/delta.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Given an array of arcs in absolute (but already quantized!) coordinates,
// converts to fixed-point delta encoding.
// This is a destructive operation that modifies the given arcs!
function _default(arcs) {
  var i = -1,
      n = arcs.length;

  while (++i < n) {
    var arc = arcs[i],
        j = 0,
        k = 1,
        m = arc.length,
        point = arc[0],
        x0 = point[0],
        y0 = point[1],
        x1,
        y1;

    while (++j < m) {
      point = arc[j], x1 = point[0], y1 = point[1];
      if (x1 !== x0 || y1 !== y0) arc[k++] = [x1 - x0, y1 - y0], x0 = x1, y0 = y1;
    }

    if (k === 1) arc[k++] = [0, 0]; // Each arc must be an array of two or more positions.

    arc.length = k;
  }

  return arcs;
}
},{}],"node_modules/topojson-server/src/extract.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Extracts the lines and rings from the specified hash of geometry objects.
//
// Returns an object with three properties:
//
// * coordinates - shared buffer of [x, y] coordinates
// * lines - lines extracted from the hash, of the form [start, end]
// * rings - rings extracted from the hash, of the form [start, end]
//
// For each ring or line, start and end represent inclusive indexes into the
// coordinates buffer. For rings (and closed lines), coordinates[start] equals
// coordinates[end].
//
// For each line or polygon geometry in the input hash, including nested
// geometries as in geometry collections, the `coordinates` array is replaced
// with an equivalent `arcs` array that, for each line (for line string
// geometries) or ring (for polygon geometries), points to one of the above
// lines or rings.
function _default(objects) {
  var index = -1,
      lines = [],
      rings = [],
      coordinates = [];

  function extractGeometry(geometry) {
    if (geometry && extractGeometryType.hasOwnProperty(geometry.type)) extractGeometryType[geometry.type](geometry);
  }

  var extractGeometryType = {
    GeometryCollection: function (o) {
      o.geometries.forEach(extractGeometry);
    },
    LineString: function (o) {
      o.arcs = extractLine(o.arcs);
    },
    MultiLineString: function (o) {
      o.arcs = o.arcs.map(extractLine);
    },
    Polygon: function (o) {
      o.arcs = o.arcs.map(extractRing);
    },
    MultiPolygon: function (o) {
      o.arcs = o.arcs.map(extractMultiRing);
    }
  };

  function extractLine(line) {
    for (var i = 0, n = line.length; i < n; ++i) coordinates[++index] = line[i];

    var arc = {
      0: index - n + 1,
      1: index
    };
    lines.push(arc);
    return arc;
  }

  function extractRing(ring) {
    for (var i = 0, n = ring.length; i < n; ++i) coordinates[++index] = ring[i];

    var arc = {
      0: index - n + 1,
      1: index
    };
    rings.push(arc);
    return arc;
  }

  function extractMultiRing(rings) {
    return rings.map(extractRing);
  }

  for (var key in objects) {
    extractGeometry(objects[key]);
  }

  return {
    type: "Topology",
    coordinates: coordinates,
    lines: lines,
    rings: rings,
    objects: objects
  };
}
},{}],"node_modules/topojson-server/src/geometry.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Given a hash of GeoJSON objects, returns a hash of GeoJSON geometry objects.
// Any null input geometry objects are represented as {type: null} in the output.
// Any feature.{id,properties,bbox} are transferred to the output geometry object.
// Each output geometry object is a shallow copy of the input (e.g., properties, coordinates)!
function _default(inputs) {
  var outputs = {},
      key;

  for (key in inputs) outputs[key] = geomifyObject(inputs[key]);

  return outputs;
}

function geomifyObject(input) {
  return input == null ? {
    type: null
  } : (input.type === "FeatureCollection" ? geomifyFeatureCollection : input.type === "Feature" ? geomifyFeature : geomifyGeometry)(input);
}

function geomifyFeatureCollection(input) {
  var output = {
    type: "GeometryCollection",
    geometries: input.features.map(geomifyFeature)
  };
  if (input.bbox != null) output.bbox = input.bbox;
  return output;
}

function geomifyFeature(input) {
  var output = geomifyGeometry(input.geometry),
      key; // eslint-disable-line no-unused-vars

  if (input.id != null) output.id = input.id;
  if (input.bbox != null) output.bbox = input.bbox;

  for (key in input.properties) {
    output.properties = input.properties;
    break;
  }

  return output;
}

function geomifyGeometry(input) {
  if (input == null) return {
    type: null
  };
  var output = input.type === "GeometryCollection" ? {
    type: "GeometryCollection",
    geometries: input.geometries.map(geomifyGeometry)
  } : input.type === "Point" || input.type === "MultiPoint" ? {
    type: input.type,
    coordinates: input.coordinates
  } : {
    type: input.type,
    arcs: input.coordinates
  }; // TODO Check for unknown types?

  if (input.bbox != null) output.bbox = input.bbox;
  return output;
}
},{}],"node_modules/topojson-server/src/prequantize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(objects, bbox, n) {
  var x0 = bbox[0],
      y0 = bbox[1],
      x1 = bbox[2],
      y1 = bbox[3],
      kx = x1 - x0 ? (n - 1) / (x1 - x0) : 1,
      ky = y1 - y0 ? (n - 1) / (y1 - y0) : 1;

  function quantizePoint(input) {
    return [Math.round((input[0] - x0) * kx), Math.round((input[1] - y0) * ky)];
  }

  function quantizePoints(input, m) {
    var i = -1,
        j = 0,
        n = input.length,
        output = new Array(n),
        // pessimistic
    pi,
        px,
        py,
        x,
        y;

    while (++i < n) {
      pi = input[i];
      x = Math.round((pi[0] - x0) * kx);
      y = Math.round((pi[1] - y0) * ky);
      if (x !== px || y !== py) output[j++] = [px = x, py = y]; // non-coincident points
    }

    output.length = j;

    while (j < m) j = output.push([output[0][0], output[0][1]]);

    return output;
  }

  function quantizeLine(input) {
    return quantizePoints(input, 2);
  }

  function quantizeRing(input) {
    return quantizePoints(input, 4);
  }

  function quantizePolygon(input) {
    return input.map(quantizeRing);
  }

  function quantizeGeometry(o) {
    if (o != null && quantizeGeometryType.hasOwnProperty(o.type)) quantizeGeometryType[o.type](o);
  }

  var quantizeGeometryType = {
    GeometryCollection: function (o) {
      o.geometries.forEach(quantizeGeometry);
    },
    Point: function (o) {
      o.coordinates = quantizePoint(o.coordinates);
    },
    MultiPoint: function (o) {
      o.coordinates = o.coordinates.map(quantizePoint);
    },
    LineString: function (o) {
      o.arcs = quantizeLine(o.arcs);
    },
    MultiLineString: function (o) {
      o.arcs = o.arcs.map(quantizeLine);
    },
    Polygon: function (o) {
      o.arcs = quantizePolygon(o.arcs);
    },
    MultiPolygon: function (o) {
      o.arcs = o.arcs.map(quantizePolygon);
    }
  };

  for (var key in objects) {
    quantizeGeometry(objects[key]);
  }

  return {
    scale: [1 / kx, 1 / ky],
    translate: [x0, y0]
  };
}
},{}],"node_modules/topojson-server/src/topology.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _bounds = _interopRequireDefault(require("./bounds"));

var _cut = _interopRequireDefault(require("./cut"));

var _dedup = _interopRequireDefault(require("./dedup"));

var _delta = _interopRequireDefault(require("./delta"));

var _extract = _interopRequireDefault(require("./extract"));

var _geometry = _interopRequireDefault(require("./geometry"));

var _hashmap = _interopRequireDefault(require("./hash/hashmap"));

var _prequantize = _interopRequireDefault(require("./prequantize"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Constructs the TopoJSON Topology for the specified hash of features.
// Each object in the specified hash must be a GeoJSON object,
// meaning FeatureCollection, a Feature or a geometry object.
function _default(objects, quantization) {
  var bbox = (0, _bounds.default)(objects = (0, _geometry.default)(objects)),
      transform = quantization > 0 && bbox && (0, _prequantize.default)(objects, bbox, quantization),
      topology = (0, _dedup.default)((0, _cut.default)((0, _extract.default)(objects))),
      coordinates = topology.coordinates,
      indexByArc = (0, _hashmap.default)(topology.arcs.length * 1.4, hashArc, equalArc);
  objects = topology.objects; // for garbage collection

  topology.bbox = bbox;
  topology.arcs = topology.arcs.map(function (arc, i) {
    indexByArc.set(arc, i);
    return coordinates.slice(arc[0], arc[1] + 1);
  });
  delete topology.coordinates;
  coordinates = null;

  function indexGeometry(geometry) {
    if (geometry && indexGeometryType.hasOwnProperty(geometry.type)) indexGeometryType[geometry.type](geometry);
  }

  var indexGeometryType = {
    GeometryCollection: function (o) {
      o.geometries.forEach(indexGeometry);
    },
    LineString: function (o) {
      o.arcs = indexArcs(o.arcs);
    },
    MultiLineString: function (o) {
      o.arcs = o.arcs.map(indexArcs);
    },
    Polygon: function (o) {
      o.arcs = o.arcs.map(indexArcs);
    },
    MultiPolygon: function (o) {
      o.arcs = o.arcs.map(indexMultiArcs);
    }
  };

  function indexArcs(arc) {
    var indexes = [];

    do {
      var index = indexByArc.get(arc);
      indexes.push(arc[0] < arc[1] ? index : ~index);
    } while (arc = arc.next);

    return indexes;
  }

  function indexMultiArcs(arcs) {
    return arcs.map(indexArcs);
  }

  for (var key in objects) {
    indexGeometry(objects[key]);
  }

  if (transform) {
    topology.transform = transform;
    topology.arcs = (0, _delta.default)(topology.arcs);
  }

  return topology;
}

function hashArc(arc) {
  var i = arc[0],
      j = arc[1],
      t;
  if (j < i) t = i, i = j, j = t;
  return i + 31 * j;
}

function equalArc(arcA, arcB) {
  var ia = arcA[0],
      ja = arcA[1],
      ib = arcB[0],
      jb = arcB[1],
      t;
  if (ja < ia) t = ia, ia = ja, ja = t;
  if (jb < ib) t = ib, ib = jb, jb = t;
  return ia === ib && ja === jb;
}
},{"./bounds":"node_modules/topojson-server/src/bounds.js","./cut":"node_modules/topojson-server/src/cut.js","./dedup":"node_modules/topojson-server/src/dedup.js","./delta":"node_modules/topojson-server/src/delta.js","./extract":"node_modules/topojson-server/src/extract.js","./geometry":"node_modules/topojson-server/src/geometry.js","./hash/hashmap":"node_modules/topojson-server/src/hash/hashmap.js","./prequantize":"node_modules/topojson-server/src/prequantize.js"}],"node_modules/topojson-server/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "topology", {
  enumerable: true,
  get: function () {
    return _topology.default;
  }
});

var _topology = _interopRequireDefault(require("./src/topology"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./src/topology":"node_modules/topojson-server/src/topology.js"}],"node_modules/topojson-simplify/src/prune.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(topology) {
  var oldObjects = topology.objects,
      newObjects = {},
      oldArcs = topology.arcs,
      oldArcsLength = oldArcs.length,
      oldIndex = -1,
      newIndexByOldIndex = new Array(oldArcsLength),
      newArcsLength = 0,
      newArcs,
      newIndex = -1,
      key;

  function scanGeometry(input) {
    switch (input.type) {
      case "GeometryCollection":
        input.geometries.forEach(scanGeometry);
        break;

      case "LineString":
        scanArcs(input.arcs);
        break;

      case "MultiLineString":
        input.arcs.forEach(scanArcs);
        break;

      case "Polygon":
        input.arcs.forEach(scanArcs);
        break;

      case "MultiPolygon":
        input.arcs.forEach(scanMultiArcs);
        break;
    }
  }

  function scanArc(index) {
    if (index < 0) index = ~index;
    if (!newIndexByOldIndex[index]) newIndexByOldIndex[index] = 1, ++newArcsLength;
  }

  function scanArcs(arcs) {
    arcs.forEach(scanArc);
  }

  function scanMultiArcs(arcs) {
    arcs.forEach(scanArcs);
  }

  function reindexGeometry(input) {
    var output;

    switch (input.type) {
      case "GeometryCollection":
        output = {
          type: "GeometryCollection",
          geometries: input.geometries.map(reindexGeometry)
        };
        break;

      case "LineString":
        output = {
          type: "LineString",
          arcs: reindexArcs(input.arcs)
        };
        break;

      case "MultiLineString":
        output = {
          type: "MultiLineString",
          arcs: input.arcs.map(reindexArcs)
        };
        break;

      case "Polygon":
        output = {
          type: "Polygon",
          arcs: input.arcs.map(reindexArcs)
        };
        break;

      case "MultiPolygon":
        output = {
          type: "MultiPolygon",
          arcs: input.arcs.map(reindexMultiArcs)
        };
        break;

      default:
        return input;
    }

    if (input.id != null) output.id = input.id;
    if (input.bbox != null) output.bbox = input.bbox;
    if (input.properties != null) output.properties = input.properties;
    return output;
  }

  function reindexArc(oldIndex) {
    return oldIndex < 0 ? ~newIndexByOldIndex[~oldIndex] : newIndexByOldIndex[oldIndex];
  }

  function reindexArcs(arcs) {
    return arcs.map(reindexArc);
  }

  function reindexMultiArcs(arcs) {
    return arcs.map(reindexArcs);
  }

  for (key in oldObjects) {
    scanGeometry(oldObjects[key]);
  }

  newArcs = new Array(newArcsLength);

  while (++oldIndex < oldArcsLength) {
    if (newIndexByOldIndex[oldIndex]) {
      newIndexByOldIndex[oldIndex] = ++newIndex;
      newArcs[newIndex] = oldArcs[oldIndex];
    }
  }

  for (key in oldObjects) {
    newObjects[key] = reindexGeometry(oldObjects[key]);
  }

  return {
    type: "Topology",
    bbox: topology.bbox,
    transform: topology.transform,
    objects: newObjects,
    arcs: newArcs
  };
}
},{}],"node_modules/topojson-simplify/src/filter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _prune = _interopRequireDefault(require("./prune"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(topology, filter) {
  var oldObjects = topology.objects,
      newObjects = {},
      key;
  if (filter == null) filter = filterTrue;

  function filterGeometry(input) {
    var output, arcs;

    switch (input.type) {
      case "Polygon":
        {
          arcs = filterRings(input.arcs);
          output = arcs ? {
            type: "Polygon",
            arcs: arcs
          } : {
            type: null
          };
          break;
        }

      case "MultiPolygon":
        {
          arcs = input.arcs.map(filterRings).filter(filterIdentity);
          output = arcs.length ? {
            type: "MultiPolygon",
            arcs: arcs
          } : {
            type: null
          };
          break;
        }

      case "GeometryCollection":
        {
          arcs = input.geometries.map(filterGeometry).filter(filterNotNull);
          output = arcs.length ? {
            type: "GeometryCollection",
            geometries: arcs
          } : {
            type: null
          };
          break;
        }

      default:
        return input;
    }

    if (input.id != null) output.id = input.id;
    if (input.bbox != null) output.bbox = input.bbox;
    if (input.properties != null) output.properties = input.properties;
    return output;
  }

  function filterRings(arcs) {
    return arcs.length && filterExteriorRing(arcs[0]) // if the exterior is small, ignore any holes
    ? [arcs[0]].concat(arcs.slice(1).filter(filterInteriorRing)) : null;
  }

  function filterExteriorRing(ring) {
    return filter(ring, false);
  }

  function filterInteriorRing(ring) {
    return filter(ring, true);
  }

  for (key in oldObjects) {
    newObjects[key] = filterGeometry(oldObjects[key]);
  }

  return (0, _prune.default)({
    type: "Topology",
    bbox: topology.bbox,
    transform: topology.transform,
    objects: newObjects,
    arcs: topology.arcs
  });
}

function filterTrue() {
  return true;
}

function filterIdentity(x) {
  return x;
}

function filterNotNull(geometry) {
  return geometry.type != null;
}
},{"./prune":"node_modules/topojson-simplify/src/prune.js"}],"node_modules/topojson-simplify/src/filterAttached.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(topology) {
  var ownerByArc = new Array(topology.arcs.length),
      // arc index -> index of unique associated ring, or -1 if used by multiple rings
  ownerIndex = 0,
      key;

  function testGeometry(o) {
    switch (o.type) {
      case "GeometryCollection":
        o.geometries.forEach(testGeometry);
        break;

      case "Polygon":
        testArcs(o.arcs);
        break;

      case "MultiPolygon":
        o.arcs.forEach(testArcs);
        break;
    }
  }

  function testArcs(arcs) {
    for (var i = 0, n = arcs.length; i < n; ++i, ++ownerIndex) {
      for (var ring = arcs[i], j = 0, m = ring.length; j < m; ++j) {
        var arc = ring[j];
        if (arc < 0) arc = ~arc;
        var owner = ownerByArc[arc];
        if (owner == null) ownerByArc[arc] = ownerIndex;else if (owner !== ownerIndex) ownerByArc[arc] = -1;
      }
    }
  }

  for (key in topology.objects) {
    testGeometry(topology.objects[key]);
  }

  return function (ring) {
    for (var j = 0, m = ring.length, arc; j < m; ++j) {
      if (ownerByArc[(arc = ring[j]) < 0 ? ~arc : arc] === -1) {
        return true;
      }
    }

    return false;
  };
}
},{}],"node_modules/topojson-simplify/node_modules/topojson-client/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x;
}
},{}],"node_modules/topojson-simplify/node_modules/topojson-client/src/transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _identity = _interopRequireDefault(require("./identity.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(transform) {
  if (transform == null) return _identity.default;
  var x0,
      y0,
      kx = transform.scale[0],
      ky = transform.scale[1],
      dx = transform.translate[0],
      dy = transform.translate[1];
  return function (input, i) {
    if (!i) x0 = y0 = 0;
    var j = 2,
        n = input.length,
        output = new Array(n);
    output[0] = (x0 += input[0]) * kx + dx;
    output[1] = (y0 += input[1]) * ky + dy;

    while (j < n) output[j] = input[j], ++j;

    return output;
  };
}
},{"./identity.js":"node_modules/topojson-simplify/node_modules/topojson-client/src/identity.js"}],"node_modules/topojson-simplify/node_modules/topojson-client/src/bbox.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _transform = _interopRequireDefault(require("./transform.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(topology) {
  var t = (0, _transform.default)(topology.transform),
      key,
      x0 = Infinity,
      y0 = x0,
      x1 = -x0,
      y1 = -x0;

  function bboxPoint(p) {
    p = t(p);
    if (p[0] < x0) x0 = p[0];
    if (p[0] > x1) x1 = p[0];
    if (p[1] < y0) y0 = p[1];
    if (p[1] > y1) y1 = p[1];
  }

  function bboxGeometry(o) {
    switch (o.type) {
      case "GeometryCollection":
        o.geometries.forEach(bboxGeometry);
        break;

      case "Point":
        bboxPoint(o.coordinates);
        break;

      case "MultiPoint":
        o.coordinates.forEach(bboxPoint);
        break;
    }
  }

  topology.arcs.forEach(function (arc) {
    var i = -1,
        n = arc.length,
        p;

    while (++i < n) {
      p = t(arc[i], i);
      if (p[0] < x0) x0 = p[0];
      if (p[0] > x1) x1 = p[0];
      if (p[1] < y0) y0 = p[1];
      if (p[1] > y1) y1 = p[1];
    }
  });

  for (key in topology.objects) {
    bboxGeometry(topology.objects[key]);
  }

  return [x0, y0, x1, y1];
}
},{"./transform.js":"node_modules/topojson-simplify/node_modules/topojson-client/src/transform.js"}],"node_modules/topojson-simplify/node_modules/topojson-client/src/reverse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array, n) {
  var t,
      j = array.length,
      i = j - n;

  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;
}
},{}],"node_modules/topojson-simplify/node_modules/topojson-client/src/feature.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.object = object;

var _reverse = _interopRequireDefault(require("./reverse.js"));

var _transform = _interopRequireDefault(require("./transform.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(topology, o) {
  if (typeof o === "string") o = topology.objects[o];
  return o.type === "GeometryCollection" ? {
    type: "FeatureCollection",
    features: o.geometries.map(function (o) {
      return feature(topology, o);
    })
  } : feature(topology, o);
}

function feature(topology, o) {
  var id = o.id,
      bbox = o.bbox,
      properties = o.properties == null ? {} : o.properties,
      geometry = object(topology, o);
  return id == null && bbox == null ? {
    type: "Feature",
    properties: properties,
    geometry: geometry
  } : bbox == null ? {
    type: "Feature",
    id: id,
    properties: properties,
    geometry: geometry
  } : {
    type: "Feature",
    id: id,
    bbox: bbox,
    properties: properties,
    geometry: geometry
  };
}

function object(topology, o) {
  var transformPoint = (0, _transform.default)(topology.transform),
      arcs = topology.arcs;

  function arc(i, points) {
    if (points.length) points.pop();

    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {
      points.push(transformPoint(a[k], k));
    }

    if (i < 0) (0, _reverse.default)(points, n);
  }

  function point(p) {
    return transformPoint(p);
  }

  function line(arcs) {
    var points = [];

    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);

    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.

    return points;
  }

  function ring(arcs) {
    var points = line(arcs);

    while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.


    return points;
  }

  function polygon(arcs) {
    return arcs.map(ring);
  }

  function geometry(o) {
    var type = o.type,
        coordinates;

    switch (type) {
      case "GeometryCollection":
        return {
          type: type,
          geometries: o.geometries.map(geometry)
        };

      case "Point":
        coordinates = point(o.coordinates);
        break;

      case "MultiPoint":
        coordinates = o.coordinates.map(point);
        break;

      case "LineString":
        coordinates = line(o.arcs);
        break;

      case "MultiLineString":
        coordinates = o.arcs.map(line);
        break;

      case "Polygon":
        coordinates = polygon(o.arcs);
        break;

      case "MultiPolygon":
        coordinates = o.arcs.map(polygon);
        break;

      default:
        return null;
    }

    return {
      type: type,
      coordinates: coordinates
    };
  }

  return geometry(o);
}
},{"./reverse.js":"node_modules/topojson-simplify/node_modules/topojson-client/src/reverse.js","./transform.js":"node_modules/topojson-simplify/node_modules/topojson-client/src/transform.js"}],"node_modules/topojson-simplify/node_modules/topojson-client/src/stitch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(topology, arcs) {
  var stitchedArcs = {},
      fragmentByStart = {},
      fragmentByEnd = {},
      fragments = [],
      emptyIndex = -1; // Stitch empty arcs first, since they may be subsumed by other arcs.

  arcs.forEach(function (i, j) {
    var arc = topology.arcs[i < 0 ? ~i : i],
        t;

    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {
      t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;
    }
  });
  arcs.forEach(function (i) {
    var e = ends(i),
        start = e[0],
        end = e[1],
        f,
        g;

    if (f = fragmentByEnd[start]) {
      delete fragmentByEnd[f.end];
      f.push(i);
      f.end = end;

      if (g = fragmentByStart[end]) {
        delete fragmentByStart[g.start];
        var fg = g === f ? f : f.concat(g);
        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;
      } else {
        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
      }
    } else if (f = fragmentByStart[end]) {
      delete fragmentByStart[f.start];
      f.unshift(i);
      f.start = start;

      if (g = fragmentByEnd[start]) {
        delete fragmentByEnd[g.end];
        var gf = g === f ? f : g.concat(f);
        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;
      } else {
        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
      }
    } else {
      f = [i];
      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;
    }
  });

  function ends(i) {
    var arc = topology.arcs[i < 0 ? ~i : i],
        p0 = arc[0],
        p1;
    if (topology.transform) p1 = [0, 0], arc.forEach(function (dp) {
      p1[0] += dp[0], p1[1] += dp[1];
    });else p1 = arc[arc.length - 1];
    return i < 0 ? [p1, p0] : [p0, p1];
  }

  function flush(fragmentByEnd, fragmentByStart) {
    for (var k in fragmentByEnd) {
      var f = fragmentByEnd[k];
      delete fragmentByStart[f.start];
      delete f.start;
      delete f.end;
      f.forEach(function (i) {
        stitchedArcs[i < 0 ? ~i : i] = 1;
      });
      fragments.push(f);
    }
  }

  flush(fragmentByEnd, fragmentByStart);
  flush(fragmentByStart, fragmentByEnd);
  arcs.forEach(function (i) {
    if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]);
  });
  return fragments;
}
},{}],"node_modules/topojson-simplify/node_modules/topojson-client/src/mesh.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.meshArcs = meshArcs;

var _feature = require("./feature.js");

var _stitch = _interopRequireDefault(require("./stitch.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(topology) {
  return (0, _feature.object)(topology, meshArcs.apply(this, arguments));
}

function meshArcs(topology, object, filter) {
  var arcs, i, n;
  if (arguments.length > 1) arcs = extractArcs(topology, object, filter);else for (i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i) arcs[i] = i;
  return {
    type: "MultiLineString",
    arcs: (0, _stitch.default)(topology, arcs)
  };
}

function extractArcs(topology, object, filter) {
  var arcs = [],
      geomsByArc = [],
      geom;

  function extract0(i) {
    var j = i < 0 ? ~i : i;
    (geomsByArc[j] || (geomsByArc[j] = [])).push({
      i: i,
      g: geom
    });
  }

  function extract1(arcs) {
    arcs.forEach(extract0);
  }

  function extract2(arcs) {
    arcs.forEach(extract1);
  }

  function extract3(arcs) {
    arcs.forEach(extract2);
  }

  function geometry(o) {
    switch (geom = o, o.type) {
      case "GeometryCollection":
        o.geometries.forEach(geometry);
        break;

      case "LineString":
        extract1(o.arcs);
        break;

      case "MultiLineString":
      case "Polygon":
        extract2(o.arcs);
        break;

      case "MultiPolygon":
        extract3(o.arcs);
        break;
    }
  }

  geometry(object);
  geomsByArc.forEach(filter == null ? function (geoms) {
    arcs.push(geoms[0].i);
  } : function (geoms) {
    if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i);
  });
  return arcs;
}
},{"./feature.js":"node_modules/topojson-simplify/node_modules/topojson-client/src/feature.js","./stitch.js":"node_modules/topojson-simplify/node_modules/topojson-client/src/stitch.js"}],"node_modules/topojson-simplify/node_modules/topojson-client/src/merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.mergeArcs = mergeArcs;

var _feature = require("./feature.js");

var _stitch = _interopRequireDefault(require("./stitch.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function planarRingArea(ring) {
  var i = -1,
      n = ring.length,
      a,
      b = ring[n - 1],
      area = 0;

  while (++i < n) a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];

  return Math.abs(area); // Note: doubled area!
}

function _default(topology) {
  return (0, _feature.object)(topology, mergeArcs.apply(this, arguments));
}

function mergeArcs(topology, objects) {
  var polygonsByArc = {},
      polygons = [],
      groups = [];
  objects.forEach(geometry);

  function geometry(o) {
    switch (o.type) {
      case "GeometryCollection":
        o.geometries.forEach(geometry);
        break;

      case "Polygon":
        extract(o.arcs);
        break;

      case "MultiPolygon":
        o.arcs.forEach(extract);
        break;
    }
  }

  function extract(polygon) {
    polygon.forEach(function (ring) {
      ring.forEach(function (arc) {
        (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);
      });
    });
    polygons.push(polygon);
  }

  function area(ring) {
    return planarRingArea((0, _feature.object)(topology, {
      type: "Polygon",
      arcs: [ring]
    }).coordinates[0]);
  }

  polygons.forEach(function (polygon) {
    if (!polygon._) {
      var group = [],
          neighbors = [polygon];
      polygon._ = 1;
      groups.push(group);

      while (polygon = neighbors.pop()) {
        group.push(polygon);
        polygon.forEach(function (ring) {
          ring.forEach(function (arc) {
            polygonsByArc[arc < 0 ? ~arc : arc].forEach(function (polygon) {
              if (!polygon._) {
                polygon._ = 1;
                neighbors.push(polygon);
              }
            });
          });
        });
      }
    }
  });
  polygons.forEach(function (polygon) {
    delete polygon._;
  });
  return {
    type: "MultiPolygon",
    arcs: groups.map(function (polygons) {
      var arcs = [],
          n; // Extract the exterior (unique) arcs.

      polygons.forEach(function (polygon) {
        polygon.forEach(function (ring) {
          ring.forEach(function (arc) {
            if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {
              arcs.push(arc);
            }
          });
        });
      }); // Stitch the arcs into one or more rings.

      arcs = (0, _stitch.default)(topology, arcs); // If more than one ring is returned,
      // at most one of these rings can be the exterior;
      // choose the one with the greatest absolute area.

      if ((n = arcs.length) > 1) {
        for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {
          if ((ki = area(arcs[i])) > k) {
            t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;
          }
        }
      }

      return arcs;
    }).filter(function (arcs) {
      return arcs.length > 0;
    })
  };
}
},{"./feature.js":"node_modules/topojson-simplify/node_modules/topojson-client/src/feature.js","./stitch.js":"node_modules/topojson-simplify/node_modules/topojson-client/src/stitch.js"}],"node_modules/topojson-simplify/node_modules/topojson-client/src/bisect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, x) {
  var lo = 0,
      hi = a.length;

  while (lo < hi) {
    var mid = lo + hi >>> 1;
    if (a[mid] < x) lo = mid + 1;else hi = mid;
  }

  return lo;
}
},{}],"node_modules/topojson-simplify/node_modules/topojson-client/src/neighbors.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _bisect = _interopRequireDefault(require("./bisect.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(objects) {
  var indexesByArc = {},
      // arc index -> array of object indexes
  neighbors = objects.map(function () {
    return [];
  });

  function line(arcs, i) {
    arcs.forEach(function (a) {
      if (a < 0) a = ~a;
      var o = indexesByArc[a];
      if (o) o.push(i);else indexesByArc[a] = [i];
    });
  }

  function polygon(arcs, i) {
    arcs.forEach(function (arc) {
      line(arc, i);
    });
  }

  function geometry(o, i) {
    if (o.type === "GeometryCollection") o.geometries.forEach(function (o) {
      geometry(o, i);
    });else if (o.type in geometryType) geometryType[o.type](o.arcs, i);
  }

  var geometryType = {
    LineString: line,
    MultiLineString: polygon,
    Polygon: polygon,
    MultiPolygon: function (arcs, i) {
      arcs.forEach(function (arc) {
        polygon(arc, i);
      });
    }
  };
  objects.forEach(geometry);

  for (var i in indexesByArc) {
    for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {
      for (var k = j + 1; k < m; ++k) {
        var ij = indexes[j],
            ik = indexes[k],
            n;
        if ((n = neighbors[ij])[i = (0, _bisect.default)(n, ik)] !== ik) n.splice(i, 0, ik);
        if ((n = neighbors[ik])[i = (0, _bisect.default)(n, ij)] !== ij) n.splice(i, 0, ij);
      }
    }
  }

  return neighbors;
}
},{"./bisect.js":"node_modules/topojson-simplify/node_modules/topojson-client/src/bisect.js"}],"node_modules/topojson-simplify/node_modules/topojson-client/src/untransform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _identity = _interopRequireDefault(require("./identity.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(transform) {
  if (transform == null) return _identity.default;
  var x0,
      y0,
      kx = transform.scale[0],
      ky = transform.scale[1],
      dx = transform.translate[0],
      dy = transform.translate[1];
  return function (input, i) {
    if (!i) x0 = y0 = 0;
    var j = 2,
        n = input.length,
        output = new Array(n),
        x1 = Math.round((input[0] - dx) / kx),
        y1 = Math.round((input[1] - dy) / ky);
    output[0] = x1 - x0, x0 = x1;
    output[1] = y1 - y0, y0 = y1;

    while (j < n) output[j] = input[j], ++j;

    return output;
  };
}
},{"./identity.js":"node_modules/topojson-simplify/node_modules/topojson-client/src/identity.js"}],"node_modules/topojson-simplify/node_modules/topojson-client/src/quantize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _bbox = _interopRequireDefault(require("./bbox.js"));

var _untransform = _interopRequireDefault(require("./untransform.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(topology, transform) {
  if (topology.transform) throw new Error("already quantized");

  if (!transform || !transform.scale) {
    if (!((n = Math.floor(transform)) >= 2)) throw new Error("n must be ≥2");
    box = topology.bbox || (0, _bbox.default)(topology);
    var x0 = box[0],
        y0 = box[1],
        x1 = box[2],
        y1 = box[3],
        n;
    transform = {
      scale: [x1 - x0 ? (x1 - x0) / (n - 1) : 1, y1 - y0 ? (y1 - y0) / (n - 1) : 1],
      translate: [x0, y0]
    };
  } else {
    box = topology.bbox;
  }

  var t = (0, _untransform.default)(transform),
      box,
      key,
      inputs = topology.objects,
      outputs = {};

  function quantizePoint(point) {
    return t(point);
  }

  function quantizeGeometry(input) {
    var output;

    switch (input.type) {
      case "GeometryCollection":
        output = {
          type: "GeometryCollection",
          geometries: input.geometries.map(quantizeGeometry)
        };
        break;

      case "Point":
        output = {
          type: "Point",
          coordinates: quantizePoint(input.coordinates)
        };
        break;

      case "MultiPoint":
        output = {
          type: "MultiPoint",
          coordinates: input.coordinates.map(quantizePoint)
        };
        break;

      default:
        return input;
    }

    if (input.id != null) output.id = input.id;
    if (input.bbox != null) output.bbox = input.bbox;
    if (input.properties != null) output.properties = input.properties;
    return output;
  }

  function quantizeArc(input) {
    var i = 0,
        j = 1,
        n = input.length,
        p,
        output = new Array(n); // pessimistic

    output[0] = t(input[0], 0);

    while (++i < n) if ((p = t(input[i], i))[0] || p[1]) output[j++] = p; // non-coincident points


    if (j === 1) output[j++] = [0, 0]; // an arc must have at least two points

    output.length = j;
    return output;
  }

  for (key in inputs) outputs[key] = quantizeGeometry(inputs[key]);

  return {
    type: "Topology",
    bbox: box,
    transform: transform,
    objects: outputs,
    arcs: topology.arcs.map(quantizeArc)
  };
}
},{"./bbox.js":"node_modules/topojson-simplify/node_modules/topojson-client/src/bbox.js","./untransform.js":"node_modules/topojson-simplify/node_modules/topojson-client/src/untransform.js"}],"node_modules/topojson-simplify/node_modules/topojson-client/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "bbox", {
  enumerable: true,
  get: function () {
    return _bbox.default;
  }
});
Object.defineProperty(exports, "feature", {
  enumerable: true,
  get: function () {
    return _feature.default;
  }
});
Object.defineProperty(exports, "mesh", {
  enumerable: true,
  get: function () {
    return _mesh.default;
  }
});
Object.defineProperty(exports, "meshArcs", {
  enumerable: true,
  get: function () {
    return _mesh.meshArcs;
  }
});
Object.defineProperty(exports, "merge", {
  enumerable: true,
  get: function () {
    return _merge.default;
  }
});
Object.defineProperty(exports, "mergeArcs", {
  enumerable: true,
  get: function () {
    return _merge.mergeArcs;
  }
});
Object.defineProperty(exports, "neighbors", {
  enumerable: true,
  get: function () {
    return _neighbors.default;
  }
});
Object.defineProperty(exports, "quantize", {
  enumerable: true,
  get: function () {
    return _quantize.default;
  }
});
Object.defineProperty(exports, "transform", {
  enumerable: true,
  get: function () {
    return _transform.default;
  }
});
Object.defineProperty(exports, "untransform", {
  enumerable: true,
  get: function () {
    return _untransform.default;
  }
});

var _bbox = _interopRequireDefault(require("./bbox.js"));

var _feature = _interopRequireDefault(require("./feature.js"));

var _mesh = _interopRequireWildcard(require("./mesh.js"));

var _merge = _interopRequireWildcard(require("./merge.js"));

var _neighbors = _interopRequireDefault(require("./neighbors.js"));

var _quantize = _interopRequireDefault(require("./quantize.js"));

var _transform = _interopRequireDefault(require("./transform.js"));

var _untransform = _interopRequireDefault(require("./untransform.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./bbox.js":"node_modules/topojson-simplify/node_modules/topojson-client/src/bbox.js","./feature.js":"node_modules/topojson-simplify/node_modules/topojson-client/src/feature.js","./mesh.js":"node_modules/topojson-simplify/node_modules/topojson-client/src/mesh.js","./merge.js":"node_modules/topojson-simplify/node_modules/topojson-client/src/merge.js","./neighbors.js":"node_modules/topojson-simplify/node_modules/topojson-client/src/neighbors.js","./quantize.js":"node_modules/topojson-simplify/node_modules/topojson-client/src/quantize.js","./transform.js":"node_modules/topojson-simplify/node_modules/topojson-client/src/transform.js","./untransform.js":"node_modules/topojson-simplify/node_modules/topojson-client/src/untransform.js"}],"node_modules/topojson-simplify/src/planar.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.planarTriangleArea = planarTriangleArea;
exports.planarRingArea = planarRingArea;

function planarTriangleArea(triangle) {
  var a = triangle[0],
      b = triangle[1],
      c = triangle[2];
  return Math.abs((a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1])) / 2;
}

function planarRingArea(ring) {
  var i = -1,
      n = ring.length,
      a,
      b = ring[n - 1],
      area = 0;

  while (++i < n) a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];

  return Math.abs(area) / 2;
}
},{}],"node_modules/topojson-simplify/src/filterWeight.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _topojsonClient = require("topojson-client");

var _planar = require("./planar");

function _default(topology, minWeight, weight) {
  minWeight = minWeight == null ? Number.MIN_VALUE : +minWeight;
  if (weight == null) weight = _planar.planarRingArea;
  return function (ring, interior) {
    return weight((0, _topojsonClient.feature)(topology, {
      type: "Polygon",
      arcs: [ring]
    }).geometry.coordinates[0], interior) >= minWeight;
  };
}
},{"topojson-client":"node_modules/topojson-simplify/node_modules/topojson-client/src/index.js","./planar":"node_modules/topojson-simplify/src/planar.js"}],"node_modules/topojson-simplify/src/filterAttachedWeight.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _filterAttached = _interopRequireDefault(require("./filterAttached"));

var _filterWeight = _interopRequireDefault(require("./filterWeight"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(topology, minWeight, weight) {
  var a = (0, _filterAttached.default)(topology),
      w = (0, _filterWeight.default)(topology, minWeight, weight);
  return function (ring, interior) {
    return a(ring, interior) || w(ring, interior);
  };
}
},{"./filterAttached":"node_modules/topojson-simplify/src/filterAttached.js","./filterWeight":"node_modules/topojson-simplify/src/filterWeight.js"}],"node_modules/topojson-simplify/src/heap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function compare(a, b) {
  return a[1][2] - b[1][2];
}

function _default() {
  var heap = {},
      array = [],
      size = 0;

  heap.push = function (object) {
    up(array[object._ = size] = object, size++);
    return size;
  };

  heap.pop = function () {
    if (size <= 0) return;
    var removed = array[0],
        object;
    if (--size > 0) object = array[size], down(array[object._ = 0] = object, 0);
    return removed;
  };

  heap.remove = function (removed) {
    var i = removed._,
        object;
    if (array[i] !== removed) return; // invalid request

    if (i !== --size) object = array[size], (compare(object, removed) < 0 ? up : down)(array[object._ = i] = object, i);
    return i;
  };

  function up(object, i) {
    while (i > 0) {
      var j = (i + 1 >> 1) - 1,
          parent = array[j];
      if (compare(object, parent) >= 0) break;
      array[parent._ = i] = parent;
      array[object._ = i = j] = object;
    }
  }

  function down(object, i) {
    while (true) {
      var r = i + 1 << 1,
          l = r - 1,
          j = i,
          child = array[j];
      if (l < size && compare(array[l], child) < 0) child = array[j = l];
      if (r < size && compare(array[r], child) < 0) child = array[j = r];
      if (j === i) break;
      array[child._ = i] = child;
      array[object._ = i = j] = object;
    }
  }

  return heap;
}
},{}],"node_modules/topojson-simplify/src/presimplify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _topojsonClient = require("topojson-client");

var _heap = _interopRequireDefault(require("./heap"));

var _planar = require("./planar");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function copy(point) {
  return [point[0], point[1], 0];
}

function _default(topology, weight) {
  var point = topology.transform ? (0, _topojsonClient.transform)(topology.transform) : copy,
      heap = (0, _heap.default)();
  if (weight == null) weight = _planar.planarTriangleArea;
  var arcs = topology.arcs.map(function (arc) {
    var triangles = [],
        maxWeight = 0,
        triangle,
        i,
        n;
    arc = arc.map(point);

    for (i = 1, n = arc.length - 1; i < n; ++i) {
      triangle = [arc[i - 1], arc[i], arc[i + 1]];
      triangle[1][2] = weight(triangle);
      triangles.push(triangle);
      heap.push(triangle);
    } // Always keep the arc endpoints!


    arc[0][2] = arc[n][2] = Infinity;

    for (i = 0, n = triangles.length; i < n; ++i) {
      triangle = triangles[i];
      triangle.previous = triangles[i - 1];
      triangle.next = triangles[i + 1];
    }

    while (triangle = heap.pop()) {
      var previous = triangle.previous,
          next = triangle.next; // If the weight of the current point is less than that of the previous
      // point to be eliminated, use the latter’s weight instead. This ensures
      // that the current point cannot be eliminated without eliminating
      // previously- eliminated points.

      if (triangle[1][2] < maxWeight) triangle[1][2] = maxWeight;else maxWeight = triangle[1][2];

      if (previous) {
        previous.next = next;
        previous[2] = triangle[2];
        update(previous);
      }

      if (next) {
        next.previous = previous;
        next[0] = triangle[0];
        update(next);
      }
    }

    return arc;
  });

  function update(triangle) {
    heap.remove(triangle);
    triangle[1][2] = weight(triangle);
    heap.push(triangle);
  }

  return {
    type: "Topology",
    bbox: topology.bbox,
    objects: topology.objects,
    arcs: arcs
  };
}
},{"topojson-client":"node_modules/topojson-simplify/node_modules/topojson-client/src/index.js","./heap":"node_modules/topojson-simplify/src/heap.js","./planar":"node_modules/topojson-simplify/src/planar.js"}],"node_modules/topojson-simplify/src/quantile.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(topology, p) {
  var array = [];
  topology.arcs.forEach(function (arc) {
    arc.forEach(function (point) {
      if (isFinite(point[2])) {
        // Ignore endpoints, whose weight is Infinity.
        array.push(point[2]);
      }
    });
  });
  return array.length && quantile(array.sort(descending), p);
}

function quantile(array, p) {
  if (!(n = array.length)) return;
  if ((p = +p) <= 0 || n < 2) return array[0];
  if (p >= 1) return array[n - 1];
  var n,
      h = (n - 1) * p,
      i = Math.floor(h),
      a = array[i],
      b = array[i + 1];
  return a + (b - a) * (h - i);
}

function descending(a, b) {
  return b - a;
}
},{}],"node_modules/topojson-simplify/src/simplify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(topology, minWeight) {
  minWeight = minWeight == null ? Number.MIN_VALUE : +minWeight; // Remove points whose weight is less than the minimum weight.

  var arcs = topology.arcs.map(function (input) {
    var i = -1,
        j = 0,
        n = input.length,
        output = new Array(n),
        // pessimistic
    point;

    while (++i < n) {
      if ((point = input[i])[2] >= minWeight) {
        output[j++] = [point[0], point[1]];
      }
    }

    output.length = j;
    return output;
  });
  return {
    type: "Topology",
    transform: topology.transform,
    bbox: topology.bbox,
    objects: topology.objects,
    arcs: arcs
  };
}
},{}],"node_modules/topojson-simplify/src/spherical.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sphericalRingArea = sphericalRingArea;
exports.sphericalTriangleArea = sphericalTriangleArea;
var pi = Math.PI,
    tau = 2 * pi,
    quarterPi = pi / 4,
    radians = pi / 180,
    abs = Math.abs,
    atan2 = Math.atan2,
    cos = Math.cos,
    sin = Math.sin;

function halfArea(ring, closed) {
  var i = 0,
      n = ring.length,
      sum = 0,
      point = ring[closed ? i++ : n - 1],
      lambda0,
      lambda1 = point[0] * radians,
      phi1 = point[1] * radians / 2 + quarterPi,
      cosPhi0,
      cosPhi1 = cos(phi1),
      sinPhi0,
      sinPhi1 = sin(phi1);

  for (; i < n; ++i) {
    point = ring[i];
    lambda0 = lambda1, lambda1 = point[0] * radians;
    phi1 = point[1] * radians / 2 + quarterPi;
    cosPhi0 = cosPhi1, cosPhi1 = cos(phi1);
    sinPhi0 = sinPhi1, sinPhi1 = sin(phi1); // Spherical excess E for a spherical triangle with vertices: south pole,
    // previous point, current point.  Uses a formula derived from Cagnoli’s
    // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
    // See https://github.com/d3/d3-geo/blob/master/README.md#geoArea

    var dLambda = lambda1 - lambda0,
        sdLambda = dLambda >= 0 ? 1 : -1,
        adLambda = sdLambda * dLambda,
        k = sinPhi0 * sinPhi1,
        u = cosPhi0 * cosPhi1 + k * cos(adLambda),
        v = k * sdLambda * sin(adLambda);
    sum += atan2(v, u);
  }

  return sum;
}

function sphericalRingArea(ring, interior) {
  var sum = halfArea(ring, true);
  if (interior) sum *= -1;
  return (sum < 0 ? tau + sum : sum) * 2;
}

function sphericalTriangleArea(t) {
  return abs(halfArea(t, false)) * 2;
}
},{}],"node_modules/topojson-simplify/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "filter", {
  enumerable: true,
  get: function () {
    return _filter.default;
  }
});
Object.defineProperty(exports, "filterAttached", {
  enumerable: true,
  get: function () {
    return _filterAttached.default;
  }
});
Object.defineProperty(exports, "filterAttachedWeight", {
  enumerable: true,
  get: function () {
    return _filterAttachedWeight.default;
  }
});
Object.defineProperty(exports, "filterWeight", {
  enumerable: true,
  get: function () {
    return _filterWeight.default;
  }
});
Object.defineProperty(exports, "planarRingArea", {
  enumerable: true,
  get: function () {
    return _planar.planarRingArea;
  }
});
Object.defineProperty(exports, "planarTriangleArea", {
  enumerable: true,
  get: function () {
    return _planar.planarTriangleArea;
  }
});
Object.defineProperty(exports, "presimplify", {
  enumerable: true,
  get: function () {
    return _presimplify.default;
  }
});
Object.defineProperty(exports, "quantile", {
  enumerable: true,
  get: function () {
    return _quantile.default;
  }
});
Object.defineProperty(exports, "simplify", {
  enumerable: true,
  get: function () {
    return _simplify.default;
  }
});
Object.defineProperty(exports, "sphericalRingArea", {
  enumerable: true,
  get: function () {
    return _spherical.sphericalRingArea;
  }
});
Object.defineProperty(exports, "sphericalTriangleArea", {
  enumerable: true,
  get: function () {
    return _spherical.sphericalTriangleArea;
  }
});

var _filter = _interopRequireDefault(require("./src/filter"));

var _filterAttached = _interopRequireDefault(require("./src/filterAttached"));

var _filterAttachedWeight = _interopRequireDefault(require("./src/filterAttachedWeight"));

var _filterWeight = _interopRequireDefault(require("./src/filterWeight"));

var _planar = require("./src/planar");

var _presimplify = _interopRequireDefault(require("./src/presimplify"));

var _quantile = _interopRequireDefault(require("./src/quantile"));

var _simplify = _interopRequireDefault(require("./src/simplify"));

var _spherical = require("./src/spherical");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./src/filter":"node_modules/topojson-simplify/src/filter.js","./src/filterAttached":"node_modules/topojson-simplify/src/filterAttached.js","./src/filterAttachedWeight":"node_modules/topojson-simplify/src/filterAttachedWeight.js","./src/filterWeight":"node_modules/topojson-simplify/src/filterWeight.js","./src/planar":"node_modules/topojson-simplify/src/planar.js","./src/presimplify":"node_modules/topojson-simplify/src/presimplify.js","./src/quantile":"node_modules/topojson-simplify/src/quantile.js","./src/simplify":"node_modules/topojson-simplify/src/simplify.js","./src/spherical":"node_modules/topojson-simplify/src/spherical.js"}],"node_modules/topojson/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _topojsonClient = require("topojson-client");

Object.keys(_topojsonClient).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _topojsonClient[key];
    }
  });
});

var _topojsonServer = require("topojson-server");

Object.keys(_topojsonServer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _topojsonServer[key];
    }
  });
});

var _topojsonSimplify = require("topojson-simplify");

Object.keys(_topojsonSimplify).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _topojsonSimplify[key];
    }
  });
});
},{"topojson-client":"node_modules/topojson-client/index.js","topojson-server":"node_modules/topojson-server/index.js","topojson-simplify":"node_modules/topojson-simplify/index.js"}],"static/data/countries50m.json":[function(require,module,exports) {
module.exports = {
  "type": "Topology",
  "objects": {
    "countries": {
      "type": "GeometryCollection",
      "geometries": [{
        "type": "Polygon",
        "arcs": [[0]],
        "id": "533"
      }, {
        "type": "Polygon",
        "arcs": [[1, 2, 3, 4, 5, 6, 7]],
        "id": "004"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[8, 9, 10, 11]], [[12, 13, 14]]],
        "id": "024"
      }, {
        "type": "Polygon",
        "arcs": [[15]],
        "id": "660"
      }, {
        "type": "Polygon",
        "arcs": [[16, 17, 18, 19, 20]],
        "id": "008"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[21]], [[22]], [[23]]],
        "id": "248"
      }, {
        "type": "Polygon",
        "arcs": [[24, 25]],
        "id": "020"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[26]], [[27]], [[28]], [[29]], [[30, 31, 32, 33, 34], [35]]],
        "id": "784"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[36]], [[37, 38]], [[39]], [[40, 41, 42, 43, 44, 45]]],
        "id": "032"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[46]], [[47, 48, 49, 50, 51], [52]]],
        "id": "051"
      }, {
        "type": "Polygon",
        "arcs": [[53]],
        "id": "016"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[54]], [[55]], [[56]], [[57]], [[58]], [[59]], [[60]], [[61]], [[62]], [[63]], [[64]], [[65]], [[66]], [[67]], [[68]], [[69]], [[70]], [[71]], [[72]], [[73]], [[74]], [[75]], [[76]], [[77]], [[78]], [[79]], [[80]], [[81]], [[82]], [[83]], [[84]], [[85]], [[86]], [[87]], [[88]], [[89]], [[90]], [[91]], [[92]], [[93]], [[94]], [[95]], [[96]], [[97]], [[98]], [[99]], [[100]], [[101]], [[102]], [[103]], [[104]], [[105]], [[106]], [[107]], [[108]], [[109]], [[110]], [[111]], [[112]], [[113]], [[114]], [[115]], [[116]], [[117]], [[118]], [[119]], [[120]], [[121]], [[122]], [[123]], [[124]], [[125]], [[126]], [[127]], [[128]], [[129]], [[130]], [[131]], [[132]], [[133]], [[134]], [[135]], [[136]], [[137]], [[138]], [[139]], [[140]], [[141]], [[142]], [[143]], [[144]], [[145]], [[146]], [[147]], [[148]], [[149]], [[150], [151]], [[152]], [[153]], [[154]], [[155]], [[156]], [[157]], [[158]], [[159]], [[160]], [[161]], [[162]]],
        "id": "010"
      }, {
        "type": "Polygon",
        "arcs": [[163]],
        "id": "036"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[164]], [[165]], [[166]]],
        "id": "260"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[167]], [[168]]],
        "id": "028"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[169]], [[170]], [[171]], [[172]], [[173]], [[174]], [[175]], [[176]], [[177]], [[178]], [[179]], [[180]], [[181]], [[182]], [[183]], [[184]], [[185]], [[186]], [[187]], [[188]], [[189]], [[190]], [[191]], [[192]], [[193]], [[194]], [[195]], [[196]], [[197]], [[198]], [[199]], [[200]], [[201]], [[202]], [[203]], [[204]], [[205]], [[206]], [[207]], [[208]], [[209]], [[210]]],
        "id": "036"
      }, {
        "type": "Polygon",
        "arcs": [[211, 212, 213, 214, 215, 216, 217, 218, 219]],
        "id": "040"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[220, 221, -49]], [[-53]], [[222, 223, -52, 224, 225], [-47]]],
        "id": "031"
      }, {
        "type": "Polygon",
        "arcs": [[226, 227, 228]],
        "id": "108"
      }, {
        "type": "Polygon",
        "arcs": [[229, 230, 231, 232, 233, 234, 235]],
        "id": "056"
      }, {
        "type": "Polygon",
        "arcs": [[236, 237, 238, 239, 240]],
        "id": "204"
      }, {
        "type": "Polygon",
        "arcs": [[241, -240, 242, 243, 244, 245]],
        "id": "854"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[246]], [[247]], [[248]], [[249]], [[250]], [[251]], [[252, 253, 254]]],
        "id": "050"
      }, {
        "type": "Polygon",
        "arcs": [[255, 256, 257, 258, 259, 260]],
        "id": "100"
      }, {
        "type": "Polygon",
        "arcs": [[261]],
        "id": "048"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[262]], [[263]], [[264]], [[265]], [[266]], [[267]], [[268]], [[269]], [[270]], [[271]], [[272]], [[273]], [[274]], [[275]], [[276]]],
        "id": "044"
      }, {
        "type": "Polygon",
        "arcs": [[277, 278, 279, 280, 281]],
        "id": "070"
      }, {
        "type": "Polygon",
        "arcs": [[282]],
        "id": "652"
      }, {
        "type": "Polygon",
        "arcs": [[283, 284, 285, 286, 287]],
        "id": "112"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[288]], [[289]], [[290, 291, 292]]],
        "id": "084"
      }, {
        "type": "Polygon",
        "arcs": [[293]],
        "id": "060"
      }, {
        "type": "Polygon",
        "arcs": [[294, -46, 295, 296, 297]],
        "id": "068"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[298]], [[299]], [[300]], [[301]], [[302]], [[303]], [[304]], [[305]], [[306]], [[307]], [[308]], [[309]], [[310]], [[311]], [[312]], [[313]], [[314, 315, 316, 317, -42, 318, -298, 319, 320, 321, 322]]],
        "id": "076"
      }, {
        "type": "Polygon",
        "arcs": [[323]],
        "id": "052"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[324, 325]], [[326, 327]]],
        "id": "096"
      }, {
        "type": "Polygon",
        "arcs": [[328, 329]],
        "id": "064"
      }, {
        "type": "Polygon",
        "arcs": [[330, 331, 332]],
        "id": "072"
      }, {
        "type": "Polygon",
        "arcs": [[333, 334, 335, 336, 337, 338]],
        "id": "140"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[339]], [[340]], [[341]], [[342]], [[343]], [[344]], [[345]], [[346]], [[347]], [[348]], [[349]], [[350]], [[351]], [[352]], [[353]], [[354, 355]], [[356]], [[357]], [[358]], [[359]], [[360]], [[361]], [[362]], [[363]], [[364]], [[365]], [[366]], [[367]], [[368]], [[369]], [[370]], [[371]], [[372]], [[373]], [[374]], [[375]], [[376]], [[377]], [[378]], [[379]], [[380]], [[381]], [[382]], [[383, 384]], [[385]], [[386]], [[387]], [[388]], [[389]], [[390]], [[391]], [[392]], [[393]], [[394]], [[395]], [[396]], [[397]], [[398]], [[399]], [[400]], [[401]], [[402]], [[403]], [[404]], [[405]], [[406]], [[407]], [[408]], [[409]], [[410]], [[411]], [[412]], [[413]], [[414]], [[415]], [[416]], [[417]], [[418]], [[419]], [[420]], [[421]], [[422]], [[423]], [[424]], [[425]], [[426]], [[427]], [[428]], [[429]], [[430]], [[431]], [[432]], [[433]], [[434]], [[435]], [[436]], [[437]], [[438]], [[439]], [[440]], [[441, 442, 443, 444]], [[445]], [[446]], [[447]], [[448]], [[449]], [[450]], [[451]], [[452]], [[453]], [[454]], [[455]], [[456]], [[457]], [[458]], [[459]], [[460]], [[461]], [[462]], [[463]], [[464]], [[465]], [[466]], [[467]], [[468]], [[469]], [[470]], [[471]], [[472]], [[473]], [[474]], [[475]], [[476]], [[477]], [[478]], [[479]], [[480]], [[481]], [[482]], [[483]], [[484]]],
        "id": "124"
      }, {
        "type": "Polygon",
        "arcs": [[-218, 485, -216, 486, 487, 488]],
        "id": "756"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[489]], [[490]], [[491]], [[492]], [[493]], [[494]], [[495]], [[496]], [[497]], [[-38, 498]], [[499]], [[500]], [[501]], [[502]], [[503]], [[504]], [[505]], [[506]], [[507]], [[508]], [[509]], [[510]], [[511]], [[512]], [[513]], [[514]], [[515]], [[516]], [[517]], [[518]], [[-45, 519, 520, -296]]],
        "id": "152"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[521]], [[522]], [[523]], [[524]], [[525]], [[526]], [[527]], [[528]], [[529]], [[530]], [[531]], [[532]], [[533, 534, 535, 536, 537, 538, 539, 540, 541, 542, -330, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, -2, 558, 559, 560, 561, 562, 563]]],
        "id": "156"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[564, 565]], [[-245, 566, 567, 568, 569, 570]]],
        "id": "384"
      }, {
        "type": "Polygon",
        "arcs": [[-338, 571, 572, 573, 574, 575, 576]],
        "id": "120"
      }, {
        "type": "Polygon",
        "arcs": [[577, 578, 579, -228, 580, 581, -12, 582, -15, 583, -336]],
        "id": "180"
      }, {
        "type": "Polygon",
        "arcs": [[-584, -14, 584, 585, -572, -337]],
        "id": "178"
      }, {
        "type": "Polygon",
        "arcs": [[586]],
        "id": "184"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[587]], [[588, -321, 589, 590, 591, 592, 593]]],
        "id": "170"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[594]], [[595]], [[596]]],
        "id": "174"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[597]], [[598]], [[599]], [[600]], [[601]], [[602]], [[603]], [[604]]],
        "id": "132"
      }, {
        "type": "Polygon",
        "arcs": [[605, 606, 607, 608]],
        "id": "188"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[609]], [[610]], [[611]], [[612]], [[613]], [[614]], [[615]]],
        "id": "192"
      }, {
        "type": "Polygon",
        "arcs": [[616]],
        "id": "531"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[617]], [[618]], [[619]]],
        "id": "136"
      }, {
        "type": "Polygon",
        "arcs": [[620, 621]],
        "id": "-99"
      }, {
        "type": "Polygon",
        "arcs": [[-621, 622]],
        "id": "196"
      }, {
        "type": "Polygon",
        "arcs": [[623, 624, -220, 625]],
        "id": "203"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[626, 627]], [[628]], [[629]], [[630]], [[631, 632, -626, -219, -489, 633, 634, -231, 635, 636, 637]], [[638]]],
        "id": "276"
      }, {
        "type": "Polygon",
        "arcs": [[639, 640, 641, 642]],
        "id": "262"
      }, {
        "type": "Polygon",
        "arcs": [[643]],
        "id": "212"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[644]], [[645]], [[646]], [[647]], [[648]], [[649]], [[650]], [[651]], [[652]], [[653]], [[654]], [[-638, 655]]],
        "id": "208"
      }, {
        "type": "Polygon",
        "arcs": [[656, 657]],
        "id": "214"
      }, {
        "type": "Polygon",
        "arcs": [[658, 659, 660, 661, 662, 663, 664, 665]],
        "id": "012"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[666]], [[667]], [[668]], [[669]], [[670]], [[671]], [[672]], [[673]], [[674, 675, -591]]],
        "id": "218"
      }, {
        "type": "Polygon",
        "arcs": [[676, 677, 678, 679, 680, 681]],
        "id": "818"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[682]], [[683]], [[684, -642, 685, 686]]],
        "id": "232"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[687]], [[688]], [[689]], [[690]], [[691]], [[692]], [[693]], [[694]], [[695]], [[696]], [[697]], [[698, -25, 699, 700, 701, 702]]],
        "id": "724"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[703]], [[704]], [[705]], [[706, 707, 708]]],
        "id": "233"
      }, {
        "type": "Polygon",
        "arcs": [[-641, 709, 710, 711, 712, 713, -686]],
        "id": "231"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[714]], [[715]], [[716]], [[717]], [[718]], [[719]], [[720]], [[721, 722, 723, 724]]],
        "id": "246"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[725]], [[726]], [[727]], [[728]], [[729]], [[730]], [[731]], [[732]], [[733]], [[734]], [[735]], [[736]], [[737]], [[738]], [[739]], [[740]], [[741]], [[742]], [[743]], [[744]]],
        "id": "242"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[745]], [[746]], [[747]], [[748]], [[749]], [[750]]],
        "id": "238"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[751]], [[752]], [[-316, 753, 754]], [[755]], [[756]], [[757]], [[758]], [[759]], [[760]], [[761, -634, -488, 762, 763, 764, 765, -700, -26, -699, 766, -233]]],
        "id": "250"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[767]], [[768]], [[769]], [[770]], [[771]]],
        "id": "234"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[772]], [[773]], [[774]], [[775]], [[776]]],
        "id": "583"
      }, {
        "type": "Polygon",
        "arcs": [[-586, 777, 778, -573]],
        "id": "266"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[779]], [[780]], [[781, 782]], [[783]], [[784]], [[785]], [[786]], [[787]], [[788]], [[789]], [[790]], [[791]], [[792]], [[793]], [[794]], [[795]], [[796]], [[797]], [[798]], [[799]], [[800]], [[801]], [[802]]],
        "id": "826"
      }, {
        "type": "Polygon",
        "arcs": [[-225, -51, 803, 804, 805]],
        "id": "268"
      }, {
        "type": "Polygon",
        "arcs": [[806]],
        "id": "831"
      }, {
        "type": "Polygon",
        "arcs": [[807, 808, -565, 809, -567, -244]],
        "id": "288"
      }, {
        "type": "Polygon",
        "arcs": [[810, -570, 811, 812, 813, 814, 815]],
        "id": "324"
      }, {
        "type": "Polygon",
        "arcs": [[816, 817]],
        "id": "270"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[818]], [[819]], [[820]], [[821]], [[822]], [[823]], [[824, 825, -815]]],
        "id": "624"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[826, -574, -779]], [[827]]],
        "id": "226"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[828]], [[829]], [[830]], [[831]], [[832]], [[833]], [[834]], [[835]], [[836]], [[837]], [[838]], [[839]], [[840]], [[841]], [[842]], [[843]], [[844]], [[845]], [[846]], [[847]], [[848]], [[849]], [[850]], [[851]], [[852]], [[853]], [[854]], [[855]], [[856]], [[857]], [[858]], [[859]], [[860]], [[861]], [[862]], [[863]], [[864]], [[865]], [[866]], [[867, -19, 868, -258, 869]]],
        "id": "300"
      }, {
        "type": "Polygon",
        "arcs": [[870]],
        "id": "308"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[871]], [[872]], [[873]], [[874]], [[875]], [[876]], [[877]], [[878]], [[879]], [[880]], [[881]], [[882]], [[883]], [[884]], [[885]], [[886]], [[887]]],
        "id": "304"
      }, {
        "type": "Polygon",
        "arcs": [[-291, 888, 889, 890, 891, 892]],
        "id": "320"
      }, {
        "type": "Polygon",
        "arcs": [[893]],
        "id": "316"
      }, {
        "type": "Polygon",
        "arcs": [[894, -323, 895, 896]],
        "id": "328"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[897]], [[898]], [[-536, 899]]],
        "id": "344"
      }, {
        "type": "Polygon",
        "arcs": [[900]],
        "id": "334"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[901, 902, 903, -890, 904]], [[905]], [[906]]],
        "id": "340"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[907]], [[908]], [[-280, 909, 910]], [[911]], [[912]], [[913]], [[914]], [[915]], [[916]], [[917]], [[918]], [[919]], [[920, -282, 921, 922, 923]]],
        "id": "191"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[924]], [[-657, 925]], [[926]]],
        "id": "332"
      }, {
        "type": "Polygon",
        "arcs": [[927, 928, 929, -924, 930, -213, 931]],
        "id": "348"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[932]], [[933]], [[934]], [[935]], [[936, 937, 938, 939]], [[940]], [[941]], [[942]], [[943]], [[944]], [[945]], [[946]], [[947]], [[948]], [[949]], [[950]], [[951]], [[952]], [[953]], [[954]], [[955]], [[956]], [[957]], [[958]], [[959]], [[960]], [[961]], [[962]], [[963]], [[964]], [[965]], [[966]], [[967]], [[968]], [[969]], [[970]], [[971]], [[972]], [[973]], [[974]], [[975]], [[976]], [[977]], [[978]], [[979]], [[980]], [[981]], [[982]], [[983]], [[984]], [[985]], [[986]], [[987]], [[988]], [[989]], [[990]], [[991]], [[992]], [[993]], [[994]], [[995]], [[996]], [[997]], [[998]], [[999]], [[1000]], [[1001]], [[1002]], [[1003]], [[1004]], [[1005]], [[1006]], [[1007]], [[1008]], [[1009]], [[1010]], [[1011]], [[1012]], [[1013]], [[1014]], [[1015]], [[1016]], [[1017]], [[1018]], [[1019]], [[1020]], [[1021]], [[1022]], [[1023, 1024, 1025]], [[1026]], [[1027]], [[1028]], [[1029]], [[1030]], [[1031]], [[1032]], [[1033]], [[1034]], [[1035]], [[1036]], [[1037]], [[1038]], [[1039]], [[1040]], [[1041]], [[1042]], [[1043]], [[1044]], [[1045]], [[1046]], [[1047]], [[1048]], [[1049]], [[1050]], [[1051]], [[1052]], [[1053]], [[1054]], [[1055]], [[1056]], [[1057]], [[1058]], [[1059]], [[1060]], [[1061]], [[1062]], [[1063]], [[1064, 1065]], [[1066]], [[1067, 1068]], [[1069]], [[1070]], [[1071]]],
        "id": "360"
      }, {
        "type": "Polygon",
        "arcs": [[1072]],
        "id": "833"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1073]], [[1074]], [[1075]], [[1076]], [[1077]], [[1078]], [[1079]], [[1080]], [[1081]], [[1082]], [[1083]], [[1084]], [[1085]], [[1086, -550, 1087, -548, 1088, -546, 1089, -544, -329, -543, 1090, -255, 1091, 1092, 1093, 1094, -555, 1095, -553, 1096, -551]]],
        "id": "356"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1097]], [[1098]], [[1099]]],
        "id": "-99"
      }, {
        "type": "Polygon",
        "arcs": [[1100]],
        "id": "086"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1101]], [[1102, -782]]],
        "id": "372"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1103]], [[-48, -224, 1104, 1105, -5, 1106, 1107, 1108, 1109, 1110, -221]]],
        "id": "364"
      }, {
        "type": "Polygon",
        "arcs": [[-1110, 1111, 1112, 1113, 1114, 1115, 1116]],
        "id": "368"
      }, {
        "type": "Polygon",
        "arcs": [[1117]],
        "id": "352"
      }, {
        "type": "Polygon",
        "arcs": [[1118, 1119, 1120, 1121, -678, 1122, 1123, 1124, 1125]],
        "id": "376"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1126]], [[1127]], [[1128]], [[1129]], [[1130]], [[1131]], [[1132]], [[1133, 1134, -763, -487, -215], [1135]]],
        "id": "380"
      }, {
        "type": "Polygon",
        "arcs": [[1136]],
        "id": "388"
      }, {
        "type": "Polygon",
        "arcs": [[1137]],
        "id": "832"
      }, {
        "type": "Polygon",
        "arcs": [[1138, 1139, -1121, 1140, -1119, 1141, -1115]],
        "id": "400"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1142]], [[1143]], [[1144]], [[1145]], [[1146]], [[1147]], [[1148]], [[1149]], [[1150]], [[1151]], [[1152]], [[1153]], [[1154]], [[1155]], [[1156]], [[1157]], [[1158]], [[1159]], [[1160]], [[1161]], [[1162]], [[1163]], [[1164]], [[1165]], [[1166]], [[1167]], [[1168]], [[1169]], [[1170]], [[1171]], [[1172]], [[1173]], [[1174]], [[1175]]],
        "id": "392"
      }, {
        "type": "Polygon",
        "arcs": [[-1094, 1176, -557]],
        "id": "-99"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1177]], [[1178]], [[1179]], [[-561, 1180, 1181, 1182, 1183, 1184]]],
        "id": "398"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1185]], [[1186, 1187, 1188, 1189, 1190, -712]]],
        "id": "404"
      }, {
        "type": "Polygon",
        "arcs": [[-560, 1191, 1192, -1181], [1193], [1194], [1195]],
        "id": "417"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1196]], [[1197]], [[1198, 1199, 1200, 1201]]],
        "id": "116"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1202]], [[1203]], [[1204]], [[1205]], [[1206]], [[1207]], [[1208]], [[1209]], [[1210]], [[1211]], [[1212]], [[1213]], [[1214]], [[1215]], [[1216]], [[1217]], [[1218]], [[1219]], [[1220]]],
        "id": "296"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1221]], [[1222]]],
        "id": "659"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1223]], [[1224]], [[1225]], [[1226]], [[1227]], [[1228]], [[1229]], [[1230]], [[1231]], [[1232]], [[1233, 1234]]],
        "id": "410"
      }, {
        "type": "Polygon",
        "arcs": [[1235, -17, 1236, 1237]],
        "id": "-99"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1238]], [[1239, -1113, 1240]]],
        "id": "414"
      }, {
        "type": "Polygon",
        "arcs": [[1241, -1201, 1242, 1243, -541]],
        "id": "418"
      }, {
        "type": "Polygon",
        "arcs": [[-1125, 1244, 1245]],
        "id": "422"
      }, {
        "type": "Polygon",
        "arcs": [[-569, 1246, 1247, -812]],
        "id": "430"
      }, {
        "type": "Polygon",
        "arcs": [[-681, 1248, 1249, 1250, -660, 1251, 1252]],
        "id": "434"
      }, {
        "type": "Polygon",
        "arcs": [[1253]],
        "id": "662"
      }, {
        "type": "Polygon",
        "arcs": [[-486, -217]],
        "id": "438"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1254]], [[1255]], [[1256]]],
        "id": "144"
      }, {
        "type": "Polygon",
        "arcs": [[1257]],
        "id": "426"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1258, 1259]], [[-287, 1260, 1261, 1262, 1263]]],
        "id": "440"
      }, {
        "type": "Polygon",
        "arcs": [[-635, -762, -232]],
        "id": "442"
      }, {
        "type": "Polygon",
        "arcs": [[1264, -288, -1264, 1265, -708]],
        "id": "428"
      }, {
        "type": "Polygon",
        "arcs": [[-538, 1266]],
        "id": "446"
      }, {
        "type": "Polygon",
        "arcs": [[1267, 1268]],
        "id": "663"
      }, {
        "type": "Polygon",
        "arcs": [[-665, 1269, 1270]],
        "id": "504"
      }, {
        "type": "Polygon",
        "arcs": [[1271, -765]],
        "id": "492"
      }, {
        "type": "Polygon",
        "arcs": [[1272, 1273]],
        "id": "498"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1274]], [[1275]], [[1276]]],
        "id": "450"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1277]], [[1278]]],
        "id": "462"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1279]], [[1280]], [[1281]], [[1282]], [[1283]], [[1284]], [[1285]], [[1286]], [[1287]], [[1288]], [[1289]], [[1290]], [[1291]], [[1292]], [[1293]], [[1294, -292, -893, 1295, 1296]]],
        "id": "484"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1297]], [[1298]], [[1299]], [[1300]], [[1301]]],
        "id": "584"
      }, {
        "type": "Polygon",
        "arcs": [[-259, -869, -18, -1236, 1302]],
        "id": "807"
      }, {
        "type": "Polygon",
        "arcs": [[1303, -246, -571, -811, 1304, 1305, -662]],
        "id": "466"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1306]], [[1307]]],
        "id": "470"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1308]], [[1309]], [[1310]], [[1311]], [[1312]], [[1313]], [[1314]], [[1315]], [[1316]], [[1317]], [[1318]], [[1319]], [[1320]], [[1321]], [[1322]], [[1323]], [[1324]], [[1325]], [[-1244, 1326, 1327, -253, -1091, -542]]],
        "id": "104"
      }, {
        "type": "Polygon",
        "arcs": [[1328, -1237, -21, 1329, -910, -279]],
        "id": "499"
      }, {
        "type": "Polygon",
        "arcs": [[-563, 1330]],
        "id": "496"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1331]], [[1332]], [[1333]], [[1334]], [[1335]], [[1336]]],
        "id": "580"
      }, {
        "type": "Polygon",
        "arcs": [[1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344], [1345], [1346]],
        "id": "508"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1347]], [[1348, 1349, 1350, -663, -1306]]],
        "id": "478"
      }, {
        "type": "Polygon",
        "arcs": [[1351]],
        "id": "500"
      }, {
        "type": "Polygon",
        "arcs": [[1352]],
        "id": "480"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-1347]], [[-1346]], [[-1343, 1353, 1354]]],
        "id": "454"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1355]], [[1356]], [[1357]], [[-1066, 1358]], [[1359]], [[1360]], [[1361, 1362]], [[-1069, 1363, -327, -326, 1364]], [[1365]]],
        "id": "458"
      }, {
        "type": "Polygon",
        "arcs": [[1366, -333, 1367, 1368, -10]],
        "id": "516"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1369]], [[1370]], [[1371]], [[1372]], [[1373]], [[1374]]],
        "id": "540"
      }, {
        "type": "Polygon",
        "arcs": [[1375, 1376, -241, -242, -1304, -661, -1251]],
        "id": "562"
      }, {
        "type": "Polygon",
        "arcs": [[1377]],
        "id": "574"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1378]], [[1379, -576, 1380, -237, -1377]]],
        "id": "566"
      }, {
        "type": "Polygon",
        "arcs": [[1381, -609, 1382, -902]],
        "id": "558"
      }, {
        "type": "Polygon",
        "arcs": [[1383]],
        "id": "570"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1384]], [[1385]], [[1386]], [[-235, 1387]], [[1388]], [[1389]], [[1390]], [[1391, -636, 1392, -236]], [[1393]], [[1394]], [[1395]], [[1396]]],
        "id": "528"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1397]], [[1398]], [[1399]], [[1400]], [[1401]], [[1402]], [[1403]], [[1404]], [[1405]], [[1406]], [[1407]], [[1408]], [[1409]], [[1410]], [[1411]], [[1412]], [[1413]], [[1414]], [[1415]], [[1416]], [[1417, -725, 1418, 1419]], [[1420]], [[1421]], [[1422]], [[1423]], [[1424]], [[1425]], [[1426]], [[1427]], [[1428]], [[1429]], [[1430]]],
        "id": "578"
      }, {
        "type": "Polygon",
        "arcs": [[-1090, -545]],
        "id": "524"
      }, {
        "type": "Polygon",
        "arcs": [[1431]],
        "id": "520"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1432]], [[1433]], [[1434]], [[1435]], [[1436]], [[1437]], [[1438]], [[1439]], [[1440]], [[1441]], [[1442]], [[1443]], [[1444]]],
        "id": "554"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1445]], [[1446, 1447, 1448, -32]], [[-36]], [[-35, 1449]]],
        "id": "512"
      }, {
        "type": "Polygon",
        "arcs": [[-1177, -1093, 1450, -1108, -3, -558]],
        "id": "586"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1451]], [[1452]], [[1453]], [[1454]], [[-593, 1455, -607, 1456]]],
        "id": "591"
      }, {
        "type": "Polygon",
        "arcs": [[1457]],
        "id": "612"
      }, {
        "type": "Polygon",
        "arcs": [[-320, -297, -521, 1458, -675, -590]],
        "id": "604"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1459]], [[1460]], [[1461]], [[1462]], [[1463]], [[1464]], [[1465]], [[1466]], [[1467]], [[1468]], [[1469]], [[1470]], [[1471]], [[1472]], [[1473]], [[1474]], [[1475]], [[1476]], [[1477]], [[1478]], [[1479]], [[1480]], [[1481]], [[1482]], [[1483]], [[1484]], [[1485]], [[1486]], [[1487]], [[1488]], [[1489]], [[1490]], [[1491]], [[1492]], [[1493]], [[1494]], [[1495]], [[1496]], [[1497]], [[1498]], [[1499]], [[1500]], [[1501]], [[1502]], [[1503]], [[1504]], [[1505]], [[1506]]],
        "id": "608"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1507]], [[1508]]],
        "id": "585"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1509]], [[1510]], [[1511]], [[1512]], [[1513]], [[1514]], [[1515]], [[1516]], [[1517]], [[1518]], [[1519]], [[1520]], [[1521]], [[1522]], [[1523]], [[1524]], [[1525]], [[1526]], [[1527]], [[1528]], [[-1025, 1529, 1530]], [[1531]], [[1532]], [[1533]], [[1534]], [[1535]]],
        "id": "598"
      }, {
        "type": "Polygon",
        "arcs": [[1536, -1261, -286, 1537, 1538, -624, -633, 1539, -628, 1540]],
        "id": "616"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1541]], [[1542]], [[1543]]],
        "id": "630"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1544]], [[1545, 1546, -1235, 1547, -534]]],
        "id": "408"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1548]], [[1549]], [[1550]], [[1551]], [[1552]], [[1553]], [[1554]], [[1555]], [[1556, -702]]],
        "id": "620"
      }, {
        "type": "Polygon",
        "arcs": [[-319, -41, -295]],
        "id": "600"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-677, 1557, -1123]], [[-1120, -1141]]],
        "id": "275"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1558]], [[1559]], [[1560]], [[1561]], [[1562]], [[1563]], [[1564]], [[1565]], [[1566]], [[1567]], [[1568]], [[1569]], [[1570]], [[1571]], [[1572]], [[1573]], [[1574]], [[1575]], [[1576]], [[1577]], [[1578]]],
        "id": "258"
      }, {
        "type": "Polygon",
        "arcs": [[1579, 1580]],
        "id": "634"
      }, {
        "type": "Polygon",
        "arcs": [[1581, 1582, -261, 1583, -929, 1584, -1273]],
        "id": "642"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1585]], [[1586]], [[1587]], [[1588]], [[1589]], [[1590]], [[1591]], [[1592]], [[1593]], [[1594]], [[1595]], [[1596]], [[1597]], [[1598]], [[1599]], [[1600]], [[1601]], [[1602]], [[1603]], [[-1262, -1537, 1604, -1259, 1605]], [[1606]], [[1607]], [[1608]], [[1609]], [[1610]], [[1611]], [[1612]], [[1613]], [[1614]], [[1615]], [[1616]], [[1617]], [[1618]], [[1619]], [[1620]], [[1621]], [[1622]], [[1623]], [[1624]], [[1625]], [[1626]], [[1627]], [[1628]], [[1629]], [[1630]], [[1631]], [[1632]], [[1633]], [[1634]], [[1635]], [[1636]], [[1637]], [[1638]], [[1639]], [[1640]], [[1641]], [[1642]], [[1643]], [[1644]], [[1645]], [[1646]], [[1647]], [[1648]], [[1649]], [[1650]], [[1651]], [[1652]], [[-1546, -564, -1331, -562, -1185, 1653, -226, -806, 1654, 1655, -284, -1265, -707, 1656, -722, -1418, 1657]], [[1658]], [[1659]], [[1660]], [[1661]], [[1662]], [[1663]], [[1664]], [[1665]], [[1666]], [[1667]], [[1668]], [[1669]], [[1670]], [[1671]], [[1672]], [[1673]], [[1674]], [[1675]], [[1676]], [[1677]], [[1678]], [[1679]], [[1680]], [[1681]], [[1682]], [[1683]], [[1684]], [[1685]], [[1686]], [[1687]]],
        "id": "643"
      }, {
        "type": "Polygon",
        "arcs": [[1688, -229, -580, 1689]],
        "id": "646"
      }, {
        "type": "Polygon",
        "arcs": [[-1351, 1690, -1270, -664]],
        "id": "732"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1691]], [[1692]], [[1693]], [[-1240, 1694, -1580, 1695, -33, -1449, 1696, 1697, -1139, -1114]]],
        "id": "682"
      }, {
        "type": "Polygon",
        "arcs": [[1698, -687, -714, 1699, -334, 1700, -1249, -680]],
        "id": "729"
      }, {
        "type": "Polygon",
        "arcs": [[-713, -1191, 1701, -578, -335, -1700]],
        "id": "728"
      }, {
        "type": "Polygon",
        "arcs": [[-1305, -816, -826, 1702, -818, 1703, -1349]],
        "id": "686"
      }, {
        "type": "Polygon",
        "arcs": [[1704]],
        "id": "702"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1705]], [[1706]]],
        "id": "239"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1707]], [[1708]]],
        "id": "654"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1709]], [[1710]], [[1711]], [[1712]], [[1713]], [[1714]], [[1715]], [[1716]], [[1717]], [[1718]], [[1719]], [[1720]], [[1721]], [[1722]], [[1723]], [[1724]], [[1725]], [[1726]], [[1727]], [[1728]], [[1729]]],
        "id": "090"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1730]], [[-1248, 1731, -813]]],
        "id": "694"
      }, {
        "type": "Polygon",
        "arcs": [[-904, 1732, -891]],
        "id": "222"
      }, {
        "type": "Polygon",
        "arcs": [[-1136]],
        "id": "674"
      }, {
        "type": "Polygon",
        "arcs": [[1733, -710, -640, 1734]],
        "id": "-99"
      }, {
        "type": "Polygon",
        "arcs": [[-1187, -711, -1734, 1735]],
        "id": "706"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1736]], [[1737]]],
        "id": "666"
      }, {
        "type": "Polygon",
        "arcs": [[-1584, -260, -1303, -1238, -1329, -278, -921, -930]],
        "id": "688"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1738]], [[1739]]],
        "id": "678"
      }, {
        "type": "Polygon",
        "arcs": [[-754, -315, -895, 1740]],
        "id": "740"
      }, {
        "type": "Polygon",
        "arcs": [[1741, -932, -212, -625, -1539]],
        "id": "703"
      }, {
        "type": "Polygon",
        "arcs": [[-923, 1742, -1134, -214, -931]],
        "id": "705"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1743]], [[1744]], [[1745]], [[1746]], [[1747]], [[1748, -1419, -724]]],
        "id": "752"
      }, {
        "type": "Polygon",
        "arcs": [[-1339, 1749]],
        "id": "748"
      }, {
        "type": "Polygon",
        "arcs": [[-1268, 1750]],
        "id": "534"
      }, {
        "type": "Polygon",
        "arcs": [[1751]],
        "id": "690"
      }, {
        "type": "Polygon",
        "arcs": [[-1116, -1142, -1126, -1246, 1752, 1753]],
        "id": "760"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1754]], [[1755]], [[1756]]],
        "id": "796"
      }, {
        "type": "Polygon",
        "arcs": [[-1701, -339, -577, -1380, -1376, -1250]],
        "id": "148"
      }, {
        "type": "Polygon",
        "arcs": [[-239, 1757, -808, -243]],
        "id": "768"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1758]], [[1759]], [[1760]], [[1761]], [[1762]], [[1763]], [[1764]], [[1765]], [[1766]], [[-1243, -1200, 1767, -1363, 1768, -1327]]],
        "id": "764"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-1194]], [[1769]], [[-1192, -559, -8, 1770]]],
        "id": "762"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1771]], [[-6, -1106, 1772, -1183, 1773]]],
        "id": "795"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1774, -938]], [[-940, 1775]], [[1776]]],
        "id": "626"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1777]], [[1778]], [[1779]]],
        "id": "776"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1780]], [[1781]]],
        "id": "780"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1782]], [[1783]], [[-1252, -659, 1784]]],
        "id": "788"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1785]], [[-804, -50, -222, -1111, -1117, -1754, 1786]], [[1787, -870, -257]]],
        "id": "792"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1788]], [[1789]]],
        "id": "158"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1790]], [[1791]], [[1792]], [[-1189, 1793, -1344, -1355, 1794, -581, -227, -1689, 1795]]],
        "id": "834"
      }, {
        "type": "Polygon",
        "arcs": [[-1796, -1690, -579, -1702, -1190]],
        "id": "800"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1796]], [[1797, -1582, -1274, -1585, -928, -1742, -1538, -285, -1656]]],
        "id": "804"
      }, {
        "type": "Polygon",
        "arcs": [[1798, -43, -318]],
        "id": "858"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1799]], [[1800]], [[1801]], [[1802]], [[1803]], [[1804]], [[1805]], [[1806]], [[1807]], [[1808]], [[1809]], [[1810]], [[1811]], [[1812]], [[1813]], [[1814]], [[1815]], [[1816]], [[1817]], [[1818]], [[1819]], [[1820]], [[1821]], [[1822]], [[1823]], [[1824]], [[1825]], [[1826]], [[1827]], [[1828]], [[1829]], [[1830]], [[1831]], [[1832]], [[1833]], [[1834]], [[1835]], [[1836]], [[1837]], [[1838]], [[1839]], [[1840]], [[1841]], [[1842]], [[1843]], [[1844]], [[1845]], [[1846]], [[1847]], [[1848]], [[1849]], [[1850]], [[1851]], [[1852]], [[1853]], [[1854]], [[1855]], [[1856]], [[-356, 1857, -1297, 1858, -442]], [[1859]], [[1860]], [[1861]], [[1862]], [[1863]], [[1864]], [[1865]], [[1866]], [[1867]], [[1868]], [[1869]], [[1870]], [[1871]], [[1872]], [[1873]], [[1874]], [[1875]], [[1876]], [[1877]], [[1878]], [[1879]], [[1880]], [[1881]], [[1882]], [[1883]], [[1884]], [[1885]], [[1886]], [[1887]], [[1888]], [[1889]], [[1890]], [[1891]], [[1892]], [[1893]], [[1894]], [[1895]], [[1896]], [[1897]], [[1898]], [[1899]], [[1900]], [[1901]], [[1902]], [[1903]], [[1904]], [[1905]], [[1906]], [[1907]], [[1908]], [[1909]], [[1910]], [[1911]], [[1912]], [[1913]], [[1914]], [[1915]], [[1916]], [[1917]], [[1918]], [[1919]], [[1920]], [[1921]], [[1922]], [[1923]], [[1924]], [[1925]], [[-444, 1926, -384, 1927]]],
        "id": "840"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[-1195]], [[-1196]], [[-1193, -1771, -7, -1774, -1182], [-1770]]],
        "id": "860"
      }, {
        "type": "Polygon",
        "arcs": [[1928]],
        "id": "336"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1929]], [[1930]], [[1931]]],
        "id": "670"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1932]], [[1933]], [[1934]], [[1935]], [[-896, -322, -589, 1936]]],
        "id": "862"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1937]], [[1938]], [[1939]]],
        "id": "092"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1940]], [[1941]], [[1942]]],
        "id": "850"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1943]], [[1944]], [[1945]], [[1946]], [[1947]], [[1948]], [[1949]], [[1950, -1202, -1242, -540]]],
        "id": "704"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1951]], [[1952]], [[1953]], [[1954]], [[1955]], [[1956]], [[1957]], [[1958]], [[1959]], [[1960]], [[1961]], [[1962]], [[1963]], [[1964]]],
        "id": "548"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1965]], [[1966]]],
        "id": "876"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1967]], [[1968]]],
        "id": "882"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1969]], [[1970]], [[1971]], [[1972]], [[1973, -1697, -1448]]],
        "id": "887"
      }, {
        "type": "MultiPolygon",
        "arcs": [[[1974]], [[-1340, -1750, -1338, 1975, -1368, -332, 1976], [-1258]]],
        "id": "710"
      }, {
        "type": "Polygon",
        "arcs": [[-1354, -1342, 1977, -1367, -9, -582, -1795]],
        "id": "894"
      }, {
        "type": "Polygon",
        "arcs": [[-1977, -331, -1978, -1341]],
        "id": "716"
      }]
    },
    "land": {
      "type": "GeometryCollection",
      "geometries": [{
        "type": "MultiPolygon",
        "arcs
      }]
    }
  },
  "arcs": [[[30583, 59015], [1, -16], [-13, 9], [-17, 35], [-17, 27], [4, 29], [4, 10], [18, -27], [17, -50], [3, -17]], [[70802, 73289], [-14, -3], [-20, 13], [-8, 22], [-3, 2], [-16, -13], [-31, -18], [-52, -45], [1, -12], [34, -46], [8, -15], [4, -5]], [[70705, 73169], [-30, -22], [-66, -50], [-43, -41], [-11, -2], [-26, 17], [-38, 21], [-11, -1], [-89, -3], [-81, -8], [-35, -10], [-63, -9], [-40, -3], [-25, -16], [-28, -21], [-29, -13], [-21, -5], [-26, -19], [-17, -39], [-49, -57], [-27, -28], [-14, -31], [-15, -3], [-27, 5], [-21, -34], [-23, -48], [-42, -70], [-22, -29], [-13, -46], [10, -24], [34, -35], [15, -34], [8, -27], [16, -68], [10, -68], [14, -29], [5, -50], [3, -30], [-8, -22], [-7, -24], [0, -23], [9, -23], [8, -21], [4, -17], [-5, -18], [-16, -29], [-8, -29], [-17, -48], [-27, -33], [-18, -24], [-19, -51], [-31, -57], [-13, -47], [-14, -26], [-14, -14], [4, -25], [12, -32], [20, -35], [-1, -56], [-1, -40], [1, -48], [-11, -41], [-57, -39], [-54, -17], [-66, -1], [-25, 6], [-20, 9], [-72, 44], [-29, -26], [-6, -63], [52, -103], [22, -57], [24, -95], [18, -50], [-7, -46], [-47, -52], [-47, -49], [-61, -11], [-37, -17], [-19, -26], [-13, -107], [-14, -40], [1, -47], [-13, -53], [-19, -35], [-14, -55], [4, -107], [7, -180], [-26, -56], [-29, -58], [-30, -41], [-29, -19], [-24, 7], [-20, 36], [-11, 29], [-21, 25], [-21, -5], [-22, -23], [-34, 8], [-29, 23], [-15, -3], [-9, -23], [-31, -49], [-77, -74], [-31, -6], [-14, -18], [5, -31], [14, -25], [24, -18], [1, -20], [-21, -18], [-18, -20], [-40, -25], [-46, -10], [-47, 15], [-25, 33], [-29, 3], [-26, -24], [-27, -40], [-30, -86], [-8, -15], [-8, -13], [-19, -19], [-28, -30], [-14, -63], [-17, -112], [4, -61], [2, -104], [-7, -74], [-12, -48], [2, -38], [19, -43], [-8, -28], [-15, -32], [-15, -17], [-60, -33], [-82, -44], [-54, -29], [-81, -43], [-24, -10], [-49, -4], [-25, 7], [-34, 1], [-51, -1], [-36, -12], [-35, -21], [-26, -27], [-15, -27], [-5, -13], [-36, 22], [-112, 40], [-303, -52], [-29, 10], [-103, 60], [-133, 78], [-83, 48], [-106, 63]], [[66900, 69042], [73, 156]], [[66973, 69198], [63, 135], [63, 136], [63, 134], [7, 47], [1, 92], [-16, 122], [-27, 56], [-87, 23], [-65, 17], [-72, 18], [-9, 7], [-8, 95], [3, 43], [-4, 82], [0, 63], [11, 105], [0, 46], [-33, 202], [-18, 112], [-19, 116], [-4, 37], [0, 45], [43, 107], [14, 23], [26, 54], [16, 28], [-3, 19], [-28, 12], [-42, 1], [-23, 16], [-17, 29], [-7, 42], [11, 75], [-11, 145], [23, 72], [21, 51], [68, 7], [-24, 57], [-11, 33], [-8, 9], [-2, 15], [3, 16], [18, 5], [12, 19], [19, 27], [10, 11], [2, 33], [9, 23], [14, 28], [11, 33], [-3, 38], [10, 46], [5, 28], [7, 25], [-6, 36], [-6, 31], [-1, 36], [11, 9], [13, 14], [3, 28], [7, 36], [6, 29], [9, 23], [1, 23], [-5, 38]], [[67017, 72361], [23, 5], [9, -20], [12, -28], [34, -50], [21, -15], [28, -8], [33, 7], [27, 10], [13, -3], [29, -36], [35, -52], [11, -23], [5, -35], [10, -11], [22, 35], [21, 12], [20, -7], [21, -4], [22, 13], [9, 9], [38, 45], [34, 35], [21, 21], [8, 70], [9, 40], [14, 24], [-5, 28], [-6, 23], [-6, 29], [6, 16], [14, 7], [34, 0], [60, 32], [50, 31], [46, 26], [21, 4], [20, -4], [9, 7], [2, 25], [12, 26], [25, 21], [49, 44], [42, 66], [15, 50], [10, 73], [20, 113], [22, 124], [8, 54], [10, 42], [37, 35], [39, 26], [59, 5], [70, 3], [15, 67], [9, 57], [12, 30], [16, 24], [6, 5], [38, -35], [58, -54], [67, -27], [34, -13], [14, 2]], [[68478, 73357], [85, 13], [67, -21], [35, -58], [34, -14], [34, 28], [21, 5], [8, -18], [17, -8], [26, 3], [15, -16], [1, -16]], [[68821, 73255], [2, -18], [19, -44], [35, -53], [30, -13], [40, 41], [14, -5], [6, 14], [4, 30], [25, 28], [44, 27], [25, 23], [9, 20], [15, 5], [16, -5], [12, 7], [4, 18], [5, 8], [8, 7], [7, 3], [14, -5], [25, -34], [36, -62], [24, -29], [10, 5], [14, 19], [17, 34], [4, 48], [-8, 62], [6, 50], [20, 39], [37, 23], [54, 9], [33, -5], [13, -20], [16, -11], [21, -2], [19, 22], [18, 48], [1, 58], [-16, 69], [4, 22], [7, 10], [21, 25], [29, 52], [28, 68], [27, 82], [33, 50], [40, 20], [48, -22], [57, -64], [21, -79], [-14, -93], [-1, -52], [11, -10], [20, 3], [27, 15], [18, 0], [8, -13], [0, -26], [-10, -40], [-11, -111], [-7, -96], [-7, -94], [-6, -84], [11, -64], [16, -98], [18, -65], [19, -21], [19, -7], [19, 6], [39, 41], [59, 78], [57, 47], [83, 27], [28, 82], [38, 55], [88, 81], [47, 31], [28, 6], [34, -15], [8, -5], [7, -4], [17, -7], [4, -25], [-5, -26], [-19, -22], [-6, -17], [8, -13], [26, -5], [56, 30], [35, 19], [25, 8], [10, 25], [16, 24], [25, 2], [26, -13], [22, -8], [38, 7], [20, -21], [28, -41], [12, -26], [4, -6]], [[56657, 45580], [6, -75], [6, -105], [4, -76], [5, -33], [1, -18], [-5, -20], [-4, -45], [-8, -40], [-4, -28], [4, -51], [-3, -74], [-3, -78], [-1, -75], [10, -134], [-1, -41], [-13, -70], [-10, -53], [-6, -62], [-2, -32], [24, -91], [-1, -18], [-18, -6], [-15, -1], [-58, 0], [-83, 0], [-82, 0], [-83, 0], [-76, 0], [-72, 0], [-64, 0], [0, -90], [0, -185], [0, -185], [0, -185], [0, -185], [0, -184], [0, -185], [0, -185], [0, -185], [0, -133], [17, -177], [30, -193], [12, -18], [31, -35], [43, -72], [24, -55], [49, -95], [65, -122], [63, -108], [55, -96]], [[56494, 41681], [-87, -34], [-123, -47], [-83, -32], [-101, -39], [-68, -25], [-83, -30], [-14, 0], [-22, 21], [-49, 4], [-57, -28], [-45, -8], [-33, 13], [-33, 25], [-32, 38], [-55, 14], [-78, -11], [-76, 8], [-73, 25], [-52, 9], [-32, -5], [-33, 8], [-36, 22], [-30, 36], [-36, 77], [-28, 73], [-8, 10], [-9, 12], [-8, 3], [-80, 2], [-76, 2], [-44, 0], [-106, 0], [-106, 1], [-107, 0], [-106, 0], [-106, 1], [-106, 0], [-107, 0], [-106, 1], [-56, 0], [-53, -6], [-58, -7], [-8, 3], [-14, 9], [-9, 16], [-31, 42], [-28, 32], [-36, 53], [-24, 58], [-20, 19], [-36, 10], [-27, 10], [-21, 3], [-39, -28], [-29, -27], [-20, -26], [-36, -30], [-30, -30], [-52, 3], [-12, -4], [-29, 2], [-27, 26], [-28, -2], [-31, -33], [-45, -14]], [[53261, 41906], [11, 218], [11, 96], [0, 116], [-7, 298], [-7, 41], [-5, 48], [27, 37], [14, 27], [19, 50], [13, 69], [16, 153], [58, 352], [27, 345], [35, 163], [13, 183], [96, 236], [24, 145], [50, 72], [70, 75], [51, 135], [24, 94], [28, 179], [-1, 187], [18, 250], [-4, 72], [-26, 99], [-5, 71], [-24, 70], [-27, 53], [-12, 94], [-45, 149], [-13, 99], [-21, 71], [-4, 88], [-11, 93], [-22, 92], [-22, 105], [0, 32], [14, 40], [12, 13], [-4, -20], [-8, -23], [2, -19], [84, 184], [6, 36], [-3, 41], [-1, 49], [4, 57], [-80, 340], [-64, 316], [-10, 159], [-84, 210], [-33, 137], [-19, 96], [-15, 36], [6, 18], [21, 5], [49, 22], [65, 24], [61, 56], [17, 24]], [[53630, 48464], [32, 5], [33, -15], [12, 11], [7, 1], [77, 0], [32, 4], [59, -1], [38, -5], [21, -6], [58, -10], [72, 2], [26, 6], [94, 3], [93, 3], [84, 3], [93, -1], [70, 0], [33, -20], [29, -38], [13, -34], [7, -15], [9, -37], [16, -28], [5, -45], [-4, -60], [2, -72], [9, -85], [20, -89], [29, -93], [13, -73], [-4, -55], [9, -58], [22, -61], [16, -32], [10, -24], [25, -94], [46, -149], [35, -111], [12, -14], [17, 5], [38, 11], [37, 2], [27, -23], [11, 4], [40, 45], [39, 13], [42, 18], [22, 19], [25, 0], [68, -36], [13, -1], [55, 0], [55, 20], [8, 149], [0, 30], [14, 56], [17, 49], [2, 47], [-1, 64], [12, 78], [37, 62], [59, 29], [34, 6], [54, 17], [81, 18], [30, -2], [2, -9], [-17, -108], [0, -35], [6, -35], [14, -20], [84, -2], [78, -2], [89, -7], [66, -5], [9, -5], [7, -8], [10, -53], [-3, -104], [-15, -152], [6, -142], [27, -132], [2, -203], [-9, -121], [-12, -153], [-4, -173], [12, -72], [25, -76], [39, -79], [30, -102], [22, -126], [8, -79], [-6, -33], [0, -56], [7, -81], [-8, -53], [-21, -27], [-7, -36], [11, -69], [2, -63], [9, -24], [6, -18], [10, -2], [22, 22], [26, 42], [20, 18], [30, -2], [41, -12], [73, -4], [22, 7], [67, 57], [18, 4], [27, -5], [38, -17], [38, -4], [19, 18], [1, 23], [6, 30], [11, 11]], [[53392, 48525], [-4, 16], [-12, 57], [7, 54], [7, 41], [-8, 82], [-18, 74], [-20, 93], [-6, 18]], [[53338, 48960], [16, 30], [25, 66], [11, 34], [28, 8], [11, 23], [8, 39], [3, 22], [32, 18], [39, 33], [22, 35], [22, 22], [13, 1], [10, -9], [25, -61], [21, -39], [7, -9]], [[53631, 49173], [-5, -10], [-30, -25], [-33, -24], [-43, -97], [-22, -42], [-6, -11], [-20, -23], [-14, -20], [1, -11], [9, -12], [10, -21], [-1, -159], [-4, -156], [-6, -14], [-27, -5], [-36, -11], [-12, -7]], [[32499, 62339], [-44, -29], [2, 17], [35, 40], [13, -3], [-6, -25]], [[55573, 76351], [11, -13], [23, -57], [15, -50], [30, -17], [16, -19], [22, -30], [10, -30], [15, -91], [2, -55], [-5, -26]], [[55712, 75963], [-3, -6], [-14, -90], [3, -46], [0, -30], [-11, -12], [-7, -19], [12, -74], [-2, -32], [1, -37], [22, -83], [13, -26], [11, -12], [15, -77], [9, -13], [36, 7], [17, -9], [7, -18], [2, -12]], [[55823, 75374], [-3, -43], [9, -33], [12, -35], [0, -20], [-8, -34], [-14, -40], [-19, -15], [-21, -13], [-10, -31], [-5, -33], [-10, -24], [-5, -27], [-9, -55], [-2, -19], [-15, -20], [-22, -8], [-19, -2], [-14, -9], [-6, -19], [-13, -15], [-8, -7], [0, -16], [10, -35], [10, -28], [0, -23], [-5, -6], [-16, 3], [-3, -8], [-2, -26], [-4, -21], [-7, -13], [-12, -15], [-21, 5], [-19, 22], [-11, 6], [-6, 0]], [[55555, 74717], [-1, 52], [-9, 41], [-31, 99], [-102, 96], [-24, 43], [-11, 36], [-10, 35], [10, 1], [10, -9], [13, -11], [5, 18], [-6, 37], [-26, 87], [-2, 24], [13, 74], [21, 82], [-1, 99], [7, 75], [-8, 49], [-3, 60], [15, 79], [14, 20], [8, 25], [1, 85], [-31, 39], [-35, 8]], [[55372, 75961], [1, 28], [5, 46], [-3, 15], [3, 26], [-9, 35], [-14, 25], [14, 44], [19, 53], [18, 42], [22, 45], [15, 42], [16, 36], [14, 11], [6, -7], [4, -16], [-1, -47], [5, -17], [9, -12], [20, 6], [22, 12], [30, 25], [5, -2]], [[55725, 86428], [-2, -13], [-23, -3], [-10, 12], [-21, -2], [-3, 6], [8, 12], [17, 8], [22, -3], [12, -17]], [[55461, 86513], [2, -13], [-11, 3], [-8, -4], [-6, -16], [-12, 5], [-5, 23], [9, 34], [22, 2], [9, -34]], [[55552, 86607], [9, 0], [3, 5], [15, -4], [23, -22], [4, -12], [16, -6], [5, -13], [-18, -39], [-11, 0], [-8, 4], [-15, -4], [-8, -7], [-3, -16], [0, -34], [-65, -7], [-15, 10], [-20, 77], [4, 20], [14, 8], [12, 2], [1, -41], [18, 4], [5, 27], [1, 20], [-4, 9], [-12, 8], [-7, 13], [10, 21], [18, 9], [16, -28], [12, -4]], [[50473, 76326], [-7, -4], [-26, -23], [-14, -8], [-14, -5], [-10, 2], [-6, 14], [1, 21], [-3, 19], [-1, 10], [3, 27]], [[50396, 76379], [9, 15], [12, 12], [18, -4], [39, -18], [9, -16], [0, -11], [-7, -18], [-3, -13]], [[64979, 65770], [0, -20], [-28, 6], [-7, -10], [-24, 5], [-22, 14], [15, 24], [40, 28], [17, -26], [9, -21]], [[64615, 65834], [-5, -4], [-4, 31], [0, 9], [13, 15], [7, -26], [-11, -25]], [[64814, 65816], [-21, -3], [-18, 22], [39, 29], [11, 13], [11, 27], [9, -23], [-10, -36], [-7, -16], [-14, -13]], [[65129, 65923], [-3, -12], [-8, 1], [-19, 11], [-7, 16], [13, 19], [5, 1], [8, -20], [11, -16]], [[65638, 66618], [18, -46], [2, -318], [5, -22]], [[65663, 66232], [-10, -4], [-11, -24], [-13, -37], [-17, -19], [-14, -22], [-14, -27], [-11, -6], [-16, 34], [-10, 35], [2, 8], [8, 2], [3, 18], [-5, 27], [-10, 9], [-13, 1], [-13, -11], [-13, -24], [-8, -24], [-1, -50], [4, -57], [-1, -27], [-7, -34], [-2, -50], [5, -39], [4, -23], [1, -19], [-13, -62], [11, -11], [36, -5], [11, -41], [7, -29], [-2, -17], [-26, -13], [-31, -14], [-23, 4], [-42, -18], [-22, -29], [7, -19], [7, -13], [4, -39], [-7, -54], [-11, -53], [-15, -66], [-17, -75], [-23, -114], [-19, -90], [-2, -64], [0, -42], [-2, -84]], [[65329, 64921], [-19, -46], [-4, -2], [-22, 6], [-7, 2], [-21, 5], [-33, 8], [-42, 11], [-51, 13], [-56, 14], [-59, 15], [-62, 16], [-62, 16], [-60, 15], [-56, 14], [-50, 13], [-43, 10], [-32, 9], [-21, 5], [-8, 2], [-23, 6], [-13, 31], [-15, 38], [-15, 37], [-15, 38], [-16, 38], [-15, 38], [-15, 37], [-16, 38], [-15, 38], [-15, 38], [-15, 37], [-16, 38], [-15, 38], [-15, 37], [-16, 38], [-15, 38], [-15, 38], [-10, 25], [-6, 28], [-1, 75], [0, 16]], [[64324, 65832], [10, 30], [5, -21], [12, -29], [19, 7], [9, -5], [7, -103], [14, -37], [18, -15], [59, -8], [36, 14], [73, 67], [38, 25], [105, -5], [84, -28], [131, -16], [26, 4], [70, 54], [44, 48], [26, 14], [17, 46], [11, 60], [10, 39], [13, 19], [12, 33], [9, 55], [25, 54], [97, 133], [57, 113], [5, 36], [32, 55], [24, 59], [117, 171], [23, 70], [14, 79], [1, 6]], [[65577, 66856], [10, 3], [14, -12], [2, -59], [-5, -56], [-1, -59], [-2, -32], [11, -26], [18, -11], [8, 1], [6, 13]], [[65613, 66366], [9, -2], [11, 15], [2, 25], [-3, 13], [-12, 2], [-5, -22], [-2, -31]], [[32069, 20324], [31, -13], [61, 10], [32, 0], [14, -5], [6, -7], [42, 11], [18, -1], [-5, -25], [-38, -24], [-16, 10], [-82, -2], [-36, -25], [-15, 0], [-36, -36], [-26, 23], [-7, 21], [18, 29], [18, 1], [12, 12], [9, 21]], [[30929, 20245], [2, 130], [2, 175], [1, 156], [0, 152], [0, 158], [1, 157], [0, 169], [1, 171]], [[30936, 21513], [16, -25], [65, -118], [17, -48], [10, -56], [-26, 35], [-27, -20], [-13, -34], [-12, -36], [0, -26], [9, -23], [27, -19], [64, -7], [5, -7], [37, -141], [19, -32], [22, -25], [51, -72], [49, -77], [58, -74], [62, -57], [57, -42], [54, -53], [58, -73], [63, -54], [67, -37], [69, -32], [105, 13], [32, -4], [20, -23], [-20, -64], [-26, -51], [-35, -21], [-36, -8], [-34, 1], [-33, 10], [-31, -6], [-29, -21], [-31, -11], [-32, -2], [-31, -18], [-32, -13], [-32, 11], [-84, 51], [-55, 12], [-185, 20], [-59, 12], [-59, 18], [-31, 0], [-45, -11], [-35, 1], [-10, -11]], [[32812, 29278], [3, -36], [-15, 4], [-34, 35], [-12, 33], [-2, 14], [35, -15], [16, -14], [9, -21]], [[32597, 39035], [7, -16], [0, -16], [23, -35], [47, -51], [44, -100], [41, -148], [38, -109], [36, -71], [33, -50], [31, -29], [16, -24], [2, -18], [28, -38], [54, -57], [35, -57], [14, -57], [54, -59], [93, -61], [67, -29], [42, 2], [61, -48], [79, -100], [48, -69], [17, -39], [52, -62], [128, -129], [57, -33], [27, -29], [16, -38], [16, -11], [15, 14], [33, -13], [49, -42], [38, -50], [49, -110], [16, -45], [7, -39], [-2, -35], [-16, -37], [-27, -40], [-8, -17], [-1, -16], [-7, -34], [-23, -71], [-6, -33], [-1, -24], [-15, -27], [-38, -49], [-8, -24], [-2, -26], [-5, -15], [-5, -7], [-8, -25], [-6, -43], [0, -55], [4, -67], [-1, -21], [-8, -12], [-5, -15], [-2, -31], [-7, -23], [-13, -15], [-4, -16], [3, -19], [-9, -19], [-23, -18], [-13, -27], [-5, -35], [-13, -32], [-19, -27], [-7, -37], [11, -68], [121, 23], [99, -25], [117, -65], [77, -23], [39, 20], [28, -3], [18, -26], [25, -5], [31, 15], [26, -11], [21, -38], [18, 9], [17, 57], [19, 41], [22, 26], [26, 8], [33, -10], [25, -21], [19, -31], [21, 1], [23, 33], [11, 40], [-1, 46], [9, 33], [19, 20], [13, 27], [6, 34], [23, 21], [38, 8], [20, 16], [2, 26], [11, 24], [21, 22], [14, 27], [8, 33], [13, 21], [17, 8], [20, 69], [21, 129], [13, 174], [5, 248]], [[34829, 37110], [21, 0], [10, -19], [16, -9], [17, 21], [14, 9], [23, 1], [12, 24], [15, 3], [10, -12], [9, -16], [20, -3], [16, -40], [18, -13], [7, -46], [12, -121], [21, -71], [21, -82], [1, -36], [-12, -37], [-2, -53], [-7, -128], [-3, -48], [7, -32], [3, -45], [-11, -55], [-22, -82], [-22, -22], [-5, -1], [-29, -48], [-21, -18], [-12, 12], [-13, -20], [-16, -53], [-18, -24], [-34, -14], [-10, -6], [-19, 2], [-17, -13], [-14, -29], [-15, -10], [-16, 7], [-15, -10], [-13, -28], [-7, -31], [-2, -33], [-13, -22], [-23, -12], [-8, -16], [1, -23], [-10, -18], [-40, -18], [-28, -33], [-18, -47], [-19, -30], [-29, -18], [-40, -48], [-5, -30], [15, -27], [5, -24], [-4, -21], [-12, -3], [-21, 15], [-15, 4], [-8, -10], [-5, -17], [1, -25], [-8, -17], [-15, -9], [-9, -21], [-4, -32], [-19, -41], [-35, -49], [-26, -66], [-20, -84], [-23, -55], [-26, -26], [-19, -37], [-9, -49], [-28, -75], [-47, -102], [-41, -70], [-38, -38], [-21, -43], [-5, -48], [-24, -54], [-44, -61], [-13, -28]], [[33997, 34453], [-10, -22], [-1, -39], [-18, -52], [-33, -64], [-11, -55], [15, -70], [2, -84], [-6, -34], [-15, -11], [-3, -22], [8, -32], [0, -43], [-7, -52], [-15, -60], [-24, -67], [-5, -46], [12, -22], [6, -24], [0, -26], [-5, -37], [-10, -49], [-15, -36], [-20, -23], [-6, -30], [8, -36], [1, -37], [-6, -39], [4, -38], [12, -37], [-1, -42], [-21, -86]], [[33833, 33138], [-6, -53], [14, -228], [-8, -32], [-14, -37], [-16, -2], [-19, 6], [-13, -23], [-9, -100], [-25, -218], [4, -51], [21, -84], [7, -53], [6, -41], [5, -76], [-12, -34], [-11, -6], [-14, -19], [16, -93], [13, -43], [38, -87], [144, -122], [60, -72], [68, -97], [37, -100], [3, -83], [-54, -124], [-6, -103], [11, -73], [20, -68], [52, -88], [39, -32], [52, 4], [9, -25], [5, -21], [8, -178], [-1, -67], [-15, -61], [-100, -282], [-86, -172], [-31, -94], [-11, -102], [-27, -48], [-148, -154], [-230, -137], [-186, -71], [-42, -24], [-299, -78], [-58, -11], [-75, 7], [-61, -10], [-68, 21], [-61, 25], [-34, 61], [-41, 7], [-11, -30], [20, -78], [-9, -93], [11, -54], [24, -11], [23, -27], [21, -37], [-35, -4], [13, -29], [15, -18], [-2, -61], [-13, -148], [-34, -32], [-9, -8], [-11, -32], [-21, -142], [-7, -92], [9, -59], [41, -124], [-15, -81], [-26, -44], [-112, -90], [-45, -36], [-70, -25], [-114, -4], [-42, 6], [-97, 82], [-73, 49], [-66, 39], [-64, 23], [9, 12], [4, 21], [-18, 12], [-13, 3], [-42, -43], [-18, -43], [-5, -38], [-1, -92], [8, -76], [30, -189], [3, -103], [-14, -130], [20, -76], [24, -34], [56, -34], [21, -23], [24, 3], [7, -9], [-4, -16], [-14, -33], [1, -35], [42, -10], [43, 7], [46, 16], [11, 24], [0, 50], [-53, 9], [6, 18], [41, 21], [53, 33], [27, 7], [18, -23], [12, -21], [16, -54], [9, -71], [1, -86], [-7, -81], [-7, -28], [-14, -35], [-95, -43], [-26, 11], [-25, 61], [-8, 63], [-21, 42], [-46, 34], [-45, -10], [-45, -59], [-44, -19], [-15, -53], [110, -86], [52, -24], [17, 0], [17, -11], [-15, -32], [-16, -20], [-79, -44], [-34, -31], [-41, -60], [-57, -132], [-17, -28], [-9, -34], [-6, -91], [19, -150], [-20, -63], [12, -70], [-6, -47], [-20, -67], [-80, -106], [-14, -78], [28, -45], [-2, -40], [-9, -36], [-33, 0], [-120, 24], [-44, -39], [-41, -49], [-11, -23], [-14, -14], [-83, -26], [-16, -17], [-88, -184], [-38, -115], [-45, -112], [-12, -47], [-3, -66], [7, -59], [6, -44], [16, -56], [33, -64], [170, -260], [35, -23], [181, -28], [40, -36], [23, -58], [9, -51], [-10, -128], [-11, -41], [-20, -36], [-43, -47], [-51, -25], [14, -18], [21, 2], [46, 16], [19, -16], [15, -50], [-28, -21], [-9, -24], [-20, -38], [-105, -148], [-56, -45], [-52, -59], [-70, -61], [-27, -34], [-37, -73], [-56, -79], [-61, -170], [-2, -33], [9, -22], [-34, -298], [-12, -35], [-24, -37], [-65, -62], [-31, -7], [-41, 35], [-23, 38], [-22, 63], [-28, 66], [-1, -23], [9, -40], [-6, -42], [-70, -19], [-18, -20], [63, 9], [43, -13], [18, -15], [16, -32], [15, -38], [-12, -21], [-35, -18], [-44, -32], [-53, -58], [-29, -68], [-13, -48], [-14, -98], [-4, -64], [-22, -50], [-35, -44], [2, -11], [24, 23], [18, 7], [16, -59], [22, -119], [10, -82], [-2, -25], [-6, -33], [-45, -8], [-39, 1], [-29, -15], [15, -15], [27, 6], [37, -36], [41, 15], [19, -23], [13, -22], [63, -172], [55, -106], [27, -63], [-13, -29]], [[30988, 21683], [-5, 38], [-36, 10], [-35, 11], [-58, 27], [-78, 41], [-79, 0], [-62, 35], [-69, 39], [-145, 3], [-128, 3], [-131, 2], [-84, 2], [-56, 1], [-14, 14], [5, 49], [-21, 35], [-30, 43], [-37, 31], [-18, 40], [-21, 46], [12, 41], [17, 99], [1, 43], [-16, 31], [-5, 43], [5, 20], [14, 16], [9, 71], [-7, 69], [-11, 62], [-14, 27], [-19, 13], [-14, 3], [-31, -23], [-51, 6], [-17, -9], [-25, -25], [-35, -37], [-20, 13], [-6, 39], [-13, 34], [-8, 30], [-6, 50], [-11, 63], [-20, 76], [-32, 61], [-2, 54], [-6, 69], [16, 67], [-9, 56], [-20, 66], [6, 69], [20, 38], [6, 48], [90, 8], [-3, 65], [15, 52], [17, 48], [14, 21], [32, 19], [38, 28], [22, 31], [10, 28], [6, 37], [2, 38], [-6, 83], [7, 25], [23, 33], [40, 30], [17, 79], [-9, 69], [-23, 54], [-28, 24], [-2, 56], [13, 53], [16, 57], [20, 65], [-1, 46], [17, 27], [50, 60], [17, 58], [18, 16], [20, 7], [1, 33], [-15, 33], [-2, 41], [2, 45], [4, 61], [24, 23], [34, 49], [9, 32], [1, 42], [-10, 87], [-8, 62], [-5, 23], [-15, 42], [-12, 27], [19, 33], [34, 35], [15, 51], [-13, 43], [-20, 23], [-6, 66], [7, 84], [15, 25], [51, 13], [5, 43], [39, 61], [-1, 58], [-25, 36], [-24, 58], [-18, 51], [-60, 28], [-64, 15], [-8, 48], [2, 28], [30, -11], [48, 10], [36, 2], [26, 5], [29, 7], [27, -20], [27, 13], [11, 76], [17, 40], [3, 38], [-18, 31], [-31, 9], [-137, 24], [-4, 31], [1, 51], [5, 52], [0, 26], [12, 23], [15, 47], [10, 32], [-10, 41], [-22, 60], [16, 28], [1, 34], [-5, 32], [-23, 36], [-20, 51], [0, 53], [24, 14], [15, 16], [4, 33], [-9, 41], [-32, 12], [-43, 25], [-14, 21], [-12, 44], [9, 123], [-4, 74], [-4, 41], [10, 31], [15, 29], [-7, 66], [-13, 34], [5, 27], [12, 27], [10, 33], [10, 8], [13, -19], [23, 11], [28, 27], [3, 31], [-5, 45], [-21, 113], [-19, 71], [4, 25], [7, 26], [-5, 97], [1, 58], [2, 171], [2, 59], [-19, 60], [3, 56], [13, 41], [13, 55], [9, 49], [10, 22], [17, 11], [3, 27], [-7, 21], [-22, 31], [-5, 39], [5, 30], [10, 18], [17, 0], [12, 42], [4, 53], [2, 24], [-9, 31], [-7, 73], [-7, 41], [8, 18], [11, 6], [18, -10], [14, 5], [2, 22], [1, 24], [5, 16], [12, 53], [13, 67], [3, 47], [-5, 127], [7, 29], [13, 26], [19, 25], [25, 21], [30, 30], [38, 11], [15, 33], [11, 44], [3, 36], [-15, 26], [-19, 29], [-9, 76], [-5, 70], [-2, 88], [-19, 75], [-20, 85], [-5, 76], [6, 41], [8, 66], [-8, 30], [-10, 53], [10, 42], [13, 65], [-2, 34], [-10, 78], [-9, 44], [9, 48], [15, 44], [11, 23], [-2, 38], [5, 32], [22, 21], [20, 38], [14, 5], [18, 0], [11, 11], [5, 30], [3, 33], [28, 41], [16, 38], [29, 8], [15, 41], [0, 52], [-3, 53], [10, 62], [-11, 93], [1, 50], [-12, 41], [3, 44], [-6, 29], [-18, 10], [-6, 35], [8, 18], [17, 13], [20, 27], [15, 129], [8, 39], [7, 46], [-1, 24], [10, 35], [12, 53], [19, 51], [11, 35], [11, 47], [3, 28], [13, 14], [16, 4], [19, 9], [7, 17], [-1, 25], [-1, 56], [-6, 89], [-3, 114], [3, 75], [12, 76], [11, 41], [-3, 31], [-3, 35], [-21, 19], [-20, -16], [-14, 4], [-18, 40], [-6, 43], [3, 58], [15, 36], [5, 46], [-8, 14], [-18, 30], [-17, 105], [2, 89], [-17, 23], [-7, 70], [-18, 25], [-6, 52], [-6, 53], [2, 24], [18, 7], [11, 42], [-8, 24], [-14, 20], [-17, -2], [-16, 25], [-21, 101], [-16, 56], [5, 81], [3, 64], [7, 54], [3, 43], [13, 21], [12, -10], [11, 5], [11, 35], [11, 21], [0, 18], [-7, 19], [-3, 33], [8, 39], [13, 90], [21, 100], [9, 37], [-2, 31], [5, 15], [14, -16], [40, 17], [14, 44], [5, 40], [13, 22], [-6, 31], [-17, 10], [-10, 14], [4, 36], [6, 82], [-1, 61], [-15, 128], [-12, 128], [8, 43], [27, 58], [20, 26], [4, 33], [20, 151], [2, 82], [13, 46], [9, 85], [36, 74], [10, 49], [15, 5], [7, 15], [19, 55], [25, 56], [22, 28], [5, 44], [10, 60], [21, 100], [12, 70], [16, 25], [19, 92], [8, 53], [21, 22], [17, 6], [16, -25], [16, 5], [16, 32], [36, 21], [17, 12], [7, 31], [0, 55], [-15, 41], [-31, 79], [-27, 87], [-3, 28], [0, 30], [5, 38], [13, 43], [32, 71], [-4, 51], [-23, 187], [-9, 51], [-16, 96], [2, 38], [15, 105], [12, 43], [18, 8], [10, 14], [3, 19], [-12, 23], [-5, 30], [-6, 43], [-17, 15], [-9, 35], [0, 52], [15, 68], [17, 19], [6, 30], [18, 27], [17, 22], [13, 39], [57, 48], [44, 38], [88, 71], [60, 49], [5, 34], [5, 23], [28, 174], [36, 224], [22, 140], [-52, 104]], [[31334, 38697], [10, 27], [29, 71], [6, 57], [12, 24], [53, 58], [9, 38], [5, 43], [11, 30], [20, 7], [37, 27], [39, 25], [12, 35], [11, 61], [10, 68], [7, 16], [13, -2], [21, -17], [11, -26], [55, -81], [25, -46], [24, -6], [46, 9], [9, -2], [119, -2], [18, -4], [42, -20], [23, -16], [16, -8], [27, -25], [22, -82], [13, -66], [9, -57], [20, -102], [14, -38], [4, 19], [12, 110], [16, 65], [21, 72], [44, 169], [15, 25], [17, 13], [11, 1], [12, -13], [17, 0], [11, 13], [113, 3], [118, 1], [3, -1], [5, -29], [20, -63], [22, -34], [4, -9]], [[62653, 75239], [-11, -10], [-10, 5], [0, 24], [8, 9], [8, 0], [8, -9], [-3, -19]], [[62913, 74254], [-48, 4], [-41, -25], [-15, 5]], [[62809, 74238], [-10, 44], [-9, 36], [-26, 93], [7, 38], [-15, 21], [-35, 40], [-9, 16], [5, 22], [4, 41], [-4, 33], [-9, 10], [-18, 1], [-21, -8], [-43, -32], [-29, 20], [-18, 21], [-9, 17], [-23, -14], [-5, 7], [-1, 42], [-7, 23], [-13, 27], [-13, 13], [-46, -27], [-27, -9]], [[62435, 74713], [-10, 25], [-48, 81], [-44, 63], [-31, 25], [-31, -2], [-48, -13], [-18, 5], [-41, 28], [-35, 32], [5, 13], [7, 10], [-9, 42], [-19, 67], [2, 22], [-6, 29], [-7, 22], [27, 53], [13, 42], [3, 42], [-8, 43], [-18, 77], [-11, 23], [-20, 21], [-18, 34], [-4, 25]], [[62066, 75522], [14, 5], [43, 0], [41, 9], [32, 16], [47, 13], [19, 12], [23, 6], [68, -13], [25, 10], [77, 2], [2, 5], [-10, 16], [0, 7], [46, 10], [7, 8]], [[62500, 75628], [6, -26], [17, -29], [19, -12], [10, -16], [0, -12], [-33, -15], [-2, -7], [2, -7], [10, -4], [46, -36], [27, -1], [14, -11], [7, -22], [22, -29], [18, -29], [1, -10], [-4, -15], [-49, -56], [-6, -19], [-1, -20], [22, -61], [32, -67], [46, -50], [63, -55], [1, -34], [-10, -41], [-9, -27], [-4, -19], [-7, -7], [-64, 1], [-9, -6], [-4, -8], [-1, -7], [23, -12], [36, -43], [20, -42], [21, -19], [24, -33], [19, -31], [30, -41], [34, 14], [44, -36], [2, -25], [-3, -21], [-28, -24], [-3, -10], [0, -8], [3, -12], [17, -19], [19, -29], [22, -43], [-10, -13], [-20, -2], [-16, 5], [-6, -8], [1, -14], [20, -33], [4, -24], [-1, -41], [1, -53]], [[62491, 75476], [9, -7], [6, 7], [1, 15], [-2, 14], [-7, 4], [-9, -3], [-1, -16], [3, -14]], [[2576, 43576], [-12, -5], [-14, 27], [28, 21], [8, 11], [34, -6], [-20, -8], [-24, -40]], [[5002, 3963], [-87, -13], [-206, 26], [-54, 21], [-30, 22], [-56, 20], [-14, 11], [0, 24], [-9, 14], [-19, 13], [-9, 13], [-17, 8], [277, -12], [108, -20], [20, -14], [195, -60], [-53, -9], [-46, -44]], [[6115, 4547], [-25, -4], [-22, 31], [-108, 63], [-64, 42], [-42, 33], [-18, 23], [21, 0], [158, -70], [24, -27], [118, -48], [-42, -43]], [[5426, 4844], [-29, -5], [-745, 67], [-143, 22], [-34, 12], [-14, 11], [-3, 8], [6, 22], [17, 16], [185, 25], [207, -19], [250, -48], [172, -38], [89, -34], [37, -26], [5, -13]], [[7241, 5741], [-51, -2], [-65, 6], [-50, 14], [-114, 20], [-29, 38], [-134, 31], [-62, 10], [21, 37], [142, -49], [175, -49], [141, -30], [26, -26]], [[33407, 5562], [-11, -124], [1, -56], [-16, -45], [-28, -23], [-55, -39], [-40, -23], [-87, -38], [-400, 34], [-180, 31], [-75, 40], [-12, 18], [-23, 61], [-21, 19], [-159, -13], [-97, -19], [-17, -10], [-26, -38], [-14, -8], [-259, 81], [-273, 95], [-113, 49], [-39, 22], [-11, 15], [25, 19], [26, 12], [29, 9], [30, 1], [22, -7], [22, -14], [14, -51], [14, -8], [38, -14], [961, 7], [80, 2], [166, 15], [89, 21], [33, 29], [-80, 7], [-32, 22], [-27, 41], [-6, 38], [9, 28], [106, 14], [16, 10], [-28, 16], [1, 37], [63, 14], [25, 31], [124, 39], [196, -21], [47, -56], [-13, -36], [-9, -37], [-1, -57], [80, -8], [25, -21], [24, -26], [-29, -1], [-28, -6], [-23, -27], [-20, -35], [-14, -16]], [[41355, 5876], [38, -12], [40, 28], [-6, 26], [23, 45], [33, -49], [219, -52], [71, -50], [-29, -12], [-22, 2], [-64, -5], [-109, -43], [-117, 41], [-209, 29], [-63, 22], [-49, 68], [88, 56], [21, -6], [135, -88]], [[41016, 5948], [-48, -6], [-19, 15], [23, 38], [34, 33], [63, 3], [60, -22], [-6, -21], [-13, -2], [-94, -38]], [[31618, 5715], [-26, -2], [-14, 4], [-14, 12], [-12, 46], [-137, 37], [-16, 21], [-9, 46], [-23, 18], [-178, 82], [-15, 17], [-10, 25], [33, 10], [70, -18], [127, -5], [28, -8], [26, -14], [142, -3], [72, -7], [40, -65], [81, -19], [11, -38], [10, -68], [-110, -50], [-25, -7], [-51, -14]], [[31316, 6075], [-48, -28], [-202, 13], [-69, 9], [-39, 15], [36, 60], [27, 20], [25, 8], [56, 33], [88, 8], [67, -6], [113, -26], [-29, -25], [-19, -9], [-18, -38], [12, -34]], [[40573, 6151], [-32, -21], [-675, 36], [-33, 7], [9, 43], [92, 7], [52, 8], [72, 19], [53, 33], [18, 1], [317, -77], [111, -32], [13, -15], [3, -9]], [[5819, 5871], [-347, -22], [-141, 19], [-294, 63], [-403, 114], [-110, 36], [-72, 31], [-70, 39], [-16, 43], [10, 62], [13, 51], [21, 32], [86, 38], [43, 42], [87, 44], [25, 33], [37, 2], [70, -4], [69, -9], [65, -11], [63, -19], [144, -62], [100, -61], [144, -72], [143, -81], [80, -30], [77, -45], [74, -61], [14, -21], [31, -27], [19, -26], [19, -22], [19, -11], [15, -24], [-3, -26], [-12, -15]], [[30462, 5944], [-60, -2], [-120, 5], [-120, 20], [-31, 10], [-44, 32], [-14, 17], [-12, 21], [-1, 33], [32, 114], [59, 68], [56, 39], [174, 92], [23, 10], [159, 43], [62, 23], [97, 48], [534, 186], [122, 27], [55, -20], [31, -19], [-16, -22], [-72, -53], [-34, -32], [-87, -65], [-188, -109], [-133, -82], [-171, -113], [-40, -40], [-81, -95], [15, -42], [-27, -58], [-107, -28], [-61, -8]], [[96566, 6830], [-34, -43], [-39, -19], [-123, 16], [-86, -36], [-95, -13], [-45, 19], [-20, 35], [-10, 47], [0, 17], [27, 7], [127, -33], [53, -29], [29, 1], [76, 38], [63, 48], [16, 23], [21, 8], [27, -17], [13, -52], [0, -17]], [[37438, 6445], [36, -2], [146, 6], [146, -2], [89, -7], [26, -16], [23, -32], [26, -50], [24, -55], [27, -45], [16, -79], [25, -29], [43, -73], [6, -59], [-13, -128], [-21, -52], [-56, -50], [-64, 5], [-29, -2], [-28, -10], [-11, -7], [-4, -10], [74, -43], [9, -16], [1, -19], [-10, -13], [-10, -7], [-1573, -260], [-61, -14], [-61, -27], [-20, -23], [-20, -18], [-1219, -49], [-11, 3], [-11, 10], [-31, 50], [-6, 79], [7, 31], [61, 30], [23, 17], [103, 117], [53, 55], [25, 46], [13, -3], [47, -27], [35, -8], [68, 11], [67, 33], [29, 18], [29, -6], [5, -28], [12, -9], [162, 88], [147, 98], [144, 111], [73, 66], [18, 19], [12, 28], [-10, 28], [-13, 25], [-12, 10], [-12, 4], [-75, 18], [23, 29], [22, 35], [14, 39], [5, 47], [-3, 24], [3, 18], [34, 15], [23, 24], [16, 28], [-26, 9], [-12, 21], [23, 49], [21, 52], [21, 28], [56, 55], [163, 138], [59, 74], [17, 27], [386, 119], [63, 12], [121, 17], [56, 3], [158, -12], [74, -12], [128, -32], [189, -61], [71, -27], [71, -34], [68, -43], [67, -52], [13, -16], [6, -29], [2, -28], [-3, -27], [-18, -56], [-26, -39], [-311, -37], [-41, -15], [-22, -30], [-16, -30], [36, -11]], [[8550, 7294], [81, -29], [-142, 9], [-62, 41], [40, 15], [40, -3], [35, -21], [8, -12]], [[8223, 7275], [-22, -2], [-241, 44], [-47, 13], [82, 27], [54, 4], [146, -66], [39, -8], [-11, -12]], [[96411, 7303], [105, -42], [275, 4], [229, -39], [21, -40], [-65, -21], [-101, -53], [-65, -17], [-55, 0], [-112, 22], [-146, -3], [-31, -31], [-71, -31], [-82, -54], [-22, 44], [-33, 42], [-82, 89], [-6, 13], [45, 17], [22, 29], [47, 39], [-5, 24], [-39, 26], [-15, 22], [26, 36], [58, 16], [75, -15], [34, -48], [-6, -21], [-1, -8]], [[8723, 7484], [-116, -7], [-64, 15], [-16, 44], [18, 9], [148, -20], [54, -11], [20, -13], [-10, -12], [-34, -5]], [[8547, 7418], [-17, -9], [-121, 5], [-25, 8], [-11, 9], [-168, 13], [-76, 41], [-15, 13], [30, 20], [57, 12], [23, 16], [145, 14], [23, -8], [13, -22], [66, -43], [17, -27], [7, -18], [36, -8], [16, -16]], [[9276, 7510], [-104, -25], [-27, 7], [9, 36], [-16, 25], [-4, 12], [9, 17], [61, 0], [172, -27], [23, -37], [-123, -8]], [[8518, 7651], [113, -8], [74, 6], [77, -14], [18, -16], [-14, -13], [-83, -4], [-40, -22], [-47, -3], [-71, 16], [-64, 35], [37, 23]], [[8269, 7617], [-118, -8], [-48, 16], [-12, 15], [10, 13], [183, 13], [20, -16], [6, -10], [-41, -23]], [[9003, 7690], [3, -8], [-42, 6], [-63, 32], [-12, 11], [28, 11], [36, -10], [33, -20], [17, -22]], [[9225, 7699], [-33, -46], [-87, 24], [-37, 30], [21, 39], [40, 12], [52, -14], [19, -5], [25, -40]], [[9253, 7922], [-57, -8], [-71, 36], [-54, 29], [-18, 25], [-3, 8], [0, 10], [16, 6], [115, -21], [72, -85]], [[95268, 8313], [-50, -74], [-35, 2], [-20, 14], [36, 41], [34, 18], [21, 5], [14, -6]], [[9656, 8230], [-31, -3], [-53, 14], [-140, 46], [-30, 23], [21, 23], [50, 16], [38, -5], [95, -43], [29, -31], [17, -23], [4, -17]], [[95548, 8736], [-37, 0], [-22, 18], [-7, 39], [1, 13], [72, 48], [58, 12], [-31, -72], [-11, -12], [-23, -46]], [[13225, 8961], [-44, -32], [-86, 21], [7, 23], [78, 20], [53, -13], [-8, -19]], [[13592, 8880], [-31, -12], [-116, 29], [-68, 6], [-31, 17], [-20, 15], [-6, 14], [-32, 22], [62, 44], [49, 14], [47, -3], [10, -22], [90, -26], [70, -1], [7, -24], [-3, -34], [-28, -39]], [[14620, 8857], [-42, -10], [-83, 38], [-27, 18], [-24, 31], [-19, 7], [-7, 6], [-11, 80], [25, 9], [53, -11], [102, -42], [71, -12], [24, -32], [-24, -56], [-38, -26]], [[17572, 9121], [-136, -16], [-37, 18], [-10, 22], [6, 23], [277, 125], [49, -17], [14, -8], [-83, -62], [-37, -22], [-6, -7], [20, -9], [6, -7], [-16, -17], [-47, -23]], [[16792, 9152], [-58, -6], [-18, 1], [-18, 13], [-5, 9], [30, 30], [29, 13], [9, 10], [-40, 101], [37, 3], [43, 20], [83, -2], [72, -18], [13, -15], [9, -25], [-31, -51], [-19, -18], [-108, -45], [-28, -20]], [[16512, 9357], [49, -58], [19, -38], [11, -39], [-199, -96], [-9, -10], [-9, -50], [5, -11], [8, -8], [1, -19], [-17, -6], [-340, -38], [-159, 35], [-22, 23], [-5, 36], [19, 7], [35, 5], [-9, 16], [-22, 29], [-2, 24], [48, 61], [23, 16], [-90, 57], [-11, 13], [-12, 4], [-44, -7], [-43, 3], [15, 23], [12, 38], [38, 32], [28, 5], [28, -3], [132, -2], [130, -17], [131, -12], [215, -11], [46, -2]], [[44275, 9281], [-13, -125], [4, -27], [11, -26], [49, -70], [4, -52], [-2, -20], [-20, -29], [-69, 7], [-22, 15], [-8, 10], [-36, 122], [-21, 29], [-32, 25], [-123, 23], [-118, -8], [29, 28], [178, 39], [45, 29], [28, 34], [13, 52], [31, 65], [49, 30], [31, 3], [16, -53], [0, -50], [-24, -51]], [[97178, 9444], [-38, -12], [-51, 37], [-12, 12], [50, 70], [-4, 23], [7, 19], [19, 14], [12, -2], [29, -77], [20, -32], [-28, -31], [-4, -21]], [[14908, 9627], [74, -16], [25, -25], [33, -18], [33, -10], [31, -27], [18, -48], [16, -15], [49, -32], [17, -28], [-3, -14], [-93, -11], [-31, 4], [-29, -9], [-9, -17], [1, -18], [16, -13], [34, -12], [34, 2], [63, 14], [28, -3], [32, -15], [32, -2], [84, 46], [21, 8], [21, -2], [115, -54], [24, -27], [-17, -15], [-14, -22], [6, -15], [55, -22], [23, -28], [14, -11], [-3, -24], [-8, -29], [1, -33], [-28, -18], [-13, 0], [-60, 18], [-187, 10], [-60, 15], [-92, 65], [-36, 4], [-37, 16], [-57, 46], [-99, 37], [-63, 45], [2, 38], [-9, 27], [-12, 11], [-12, 6], [-36, 10], [-35, -3], [-18, -11], [-29, -28], [-32, -5], [-25, 6], [-5, 6], [-1, 74], [-27, 10], [-23, 30], [-4, 40], [10, 37], [35, 45], [40, 5], [40, -7], [41, 10], [65, 6], [74, -4]], [[29478, 9586], [-27, -11], [-17, 6], [-31, 29], [4, 23], [14, 15], [10, 17], [60, 62], [44, 7], [36, -13], [-39, -59], [-10, -41], [-44, -35]], [[20961, 9696], [-33, -26], [-62, 6], [-48, 43], [-19, 58], [-2, 20], [13, 15], [31, 14], [120, -130]], [[29346, 9735], [-40, -75], [-7, -8], [-40, -19], [14, -20], [11, -10], [7, -24], [23, -33], [28, -21], [-23, -59], [-34, -26], [-369, 160], [-28, 26], [-14, 19], [-11, 30], [-1, 30], [9, 24], [13, 14], [33, 17], [34, 1], [75, -32], [10, 5], [14, 28], [40, 1], [9, 24], [-55, 8], [-44, 24], [-29, 24], [-8, 19], [99, 33], [251, -42], [38, -14], [17, -19], [14, -26], [-36, -59]], [[23945, 9838], [-47, 0], [-31, 21], [-10, 14], [19, 21], [11, 2], [57, -36], [12, -15], [-11, -7]], [[24677, 9687], [-51, -14], [-46, 6], [17, 132], [26, 33], [-7, 24], [-47, 66], [-33, 75], [16, 17], [86, 27], [99, -5], [39, -32], [12, -40], [-5, -29], [-32, -53], [33, -18], [7, -36], [-7, -44], [-32, -52], [-30, -31], [-45, -26]], [[23603, 9985], [-53, -3], [-15, 13], [16, 28], [128, 47], [52, 28], [8, -4], [7, -9], [22, -56], [2, -14], [-167, -30]], [[45526, 9977], [-19, -14], [-40, 1], [-38, 28], [-16, 41], [-1, 29], [17, 33], [27, 9], [15, -11], [36, -71], [19, -45]], [[69016, 10195], [-14, 0], [7, 23], [37, 41], [28, 50], [17, 8], [31, -44], [-7, -37], [-41, -27], [-58, -14]], [[46525, 10268], [-22, -13], [-37, 5], [-47, 29], [-15, 22], [-5, 20], [13, 29], [11, 8], [24, -4], [42, -37], [29, -40], [7, -19]], [[69421, 10415], [-35, -74], [-13, 2], [-15, 43], [13, 27], [16, 16], [28, -8], [6, -6]], [[22752, 10418], [-23, -61], [2, -60], [68, 4], [30, 114], [64, 21], [31, -68], [-30, -55], [15, -31], [18, -22], [32, -1], [29, 33], [13, 24], [11, 26], [19, 58], [61, 54], [135, 8], [71, -34], [-48, -86], [-115, -50], [-74, -52], [25, -14], [25, -7], [23, 2], [65, 27], [160, 50], [61, 37], [22, -6], [0, -62], [21, -42], [-12, -93], [-69, -17], [-71, -8], [18, -41], [-4, -17], [-6, -13], [-178, 17], [-31, -6], [-31, -12], [-31, 3], [-62, 30], [-32, 0], [-64, -15], [-65, -6], [-93, 1], [-68, 5], [-64, 33], [-67, 9], [-75, 1], [-79, 38], [-66, 15], [-95, 39], [-25, 15], [-25, 8], [-45, -3], [-346, 59], [-51, -1], [-33, -8], [-33, 4], [-67, 28], [-14, 31], [7, 29], [15, 13], [30, 13], [480, 69], [50, 19], [37, -2], [28, -59], [42, -61], [14, 1], [14, 6], [47, 51], [86, -16], [48, 23], [33, 45], [97, 52], [61, -10], [57, -22], [27, -54]], [[49179, 10821], [-30, -13], [-39, 3], [-30, 17], [-21, 34], [-5, 13], [3, 22], [-2, 11], [38, 6], [14, -14], [6, -11], [66, -68]], [[33180, 10914], [-28, -4], [-38, 10], [-33, 20], [-11, 23], [16, 19], [30, 12], [47, -4], [22, -24], [5, -22], [-6, -23], [-4, -7]], [[49296, 11078], [30, -19], [47, 3], [45, -15], [-7, -20], [-26, -26], [-22, -56], [-22, -26], [-66, -56], [-49, -15], [-11, 31], [1, 32], [4, 25], [2, 18], [-46, 24], [-3, 33], [-9, 19], [-134, 66], [-23, 19], [10, 12], [138, 5], [81, -12], [60, -42]], [[29526, 11154], [43, -51], [-40, -40], [-142, -75], [-83, -29], [-84, -22], [-380, -69], [-27, 0], [-26, 9], [-15, 15], [-25, 57], [3, 29], [34, 27], [35, 18], [60, 16], [229, 36], [23, 12], [19, 27], [6, 31], [8, 24], [15, 11], [16, 0], [30, -23], [55, -93], [18, 13], [16, 25], [3, 80], [16, 6], [49, -22], [30, -23], [1, 45], [21, 14], [22, -5], [22, -10], [48, -33]], [[33127, 11111], [-23, 0], [-20, 12], [-17, 35], [-5, 17], [9, 38], [16, 9], [92, 5], [28, -20], [1, -34], [-10, -25], [-71, -37]], [[48362, 11202], [-73, -34], [-6, 15], [-24, 20], [-48, 56], [54, 4], [49, 24], [27, -10], [6, -6], [15, -69]], [[50843, 11176], [-94, -15], [-21, 17], [-11, 34], [13, 20], [123, 68], [33, -6], [11, -6], [8, -26], [-11, -41], [-14, -20], [-37, -25]], [[49088, 11213], [-45, -1], [-13, 16], [-2, 11], [58, 83], [32, 21], [62, 16], [40, -5], [26, -18], [8, -33], [0, -49], [-15, -26], [-151, -15]], [[30084, 11367], [14, -17], [60, 16], [21, -17], [4, -12], [-27, -42], [-32, -28], [-37, -2], [-27, 71], [-3, 18], [27, 13]], [[70000, 11156], [-20, 0], [-25, 6], [-32, 42], [-18, 30], [-7, 31], [3, 61], [16, 30], [26, 12], [11, -28], [4, -32], [8, -21], [33, -30], [16, -25], [5, -14], [6, -29], [-5, -20], [-21, -13]], [[51257, 11244], [-45, -13], [-51, 29], [-14, 20], [-15, 53], [-2, 20], [12, 13], [40, 15], [66, -6], [25, -24], [9, -43], [-8, -37], [-17, -27]], [[57460, 11301], [-18, -22], [-51, 4], [-39, -21], [-31, 8], [-98, 35], [-11, 45], [-3, 20], [8, 35], [88, 73], [35, 7], [50, -10], [22, -21], [14, -41], [39, -83], [-5, -29]], [[50360, 11373], [-24, -73], [-15, 2], [-15, 43], [-31, 46], [-11, 32], [-1, 43], [22, 25], [80, 16], [27, -10], [13, -55], [-45, -69]], [[33011, 11534], [-42, -1], [-19, 16], [-7, 10], [5, 23], [16, 21], [49, -16], [12, -41], [-14, -12]], [[29170, 11677], [49, -14], [72, -63], [24, -32], [7, -19], [-6, -13], [-33, -15], [-25, -77], [-50, -27], [-116, 17], [-128, 31], [-10, 6], [-11, 27], [-2, 31], [14, 39], [22, 20], [95, 24], [7, 14], [14, 39], [24, 8], [11, -3], [42, 7]], [[54506, 11516], [-18, -37], [-87, 51], [-51, 16], [-13, 9], [-12, 32], [-3, 12], [10, 20], [28, 32], [59, 26], [93, 13], [91, -10], [15, -16], [-86, -54], [-26, -94]], [[30004, 11694], [-60, -24], [-40, 19], [-120, 36], [-50, 66], [5, 35], [23, 21], [36, 11], [73, -22], [37, -23], [96, -119]], [[32778, 11680], [-24, -4], [-24, 53], [-13, 82], [-77, 119], [-20, 62], [14, 15], [21, 5], [56, -17], [34, -23], [38, -49], [46, -44], [9, -37], [-7, -42], [-29, -11], [1, -31], [-17, -60], [-8, -18]], [[30541, 11987], [-8, -70], [46, 25], [17, -5], [40, -26], [81, -151], [18, -48], [33, -139], [40, -105], [100, -183], [49, -100], [26, -58], [3, -78], [31, -22], [7, -32], [10, -107], [7, -124], [7, -238], [-4, -55], [-43, -89], [-18, -63], [-23, -42], [-27, -30], [-141, -125], [-17, -62], [-237, -53], [-134, -22], [-52, 24], [-53, 6], [-66, -8], [-191, -7], [-144, -18], [-19, 7], [-13, 23], [-14, 16], [-38, -3], [-31, 9], [-30, 19], [-33, 36], [-14, 21], [-8, 23], [64, 60], [33, 13], [33, 4], [67, -13], [67, -20], [147, -16], [204, -4], [56, 6], [67, 19], [62, 55], [-30, 21], [-31, 13], [-30, 3], [-30, -4], [-84, -34], [-65, -20], [-65, -12], [-69, 20], [-64, 56], [-2, 18], [220, 43], [20, 7], [40, 27], [13, 24], [6, 23], [-148, 40], [-31, -1], [-30, -7], [-67, 17], [-64, 47], [-59, 57], [-22, 5], [-21, -17], [-143, -150], [-12, -1], [-54, 11], [-68, 30], [-62, 10], [-40, -8], [-15, -12], [39, -34], [33, -30], [10, -24], [-101, -75], [-27, -10], [-43, 7], [-16, 9], [-31, 40], [-30, 10], [-65, -8], [-34, 3], [-34, 18], [-32, 26], [-30, 14], [-36, 29], [-26, 20], [-8, 29], [3, 28], [11, 16], [2, 15], [-8, 27], [5, 19], [12, 18], [54, 34], [65, 7], [63, -43], [42, -13], [19, -1], [7, 2], [5, 12], [-1, 22], [-12, 42], [-1, 29], [14, 24], [19, 9], [20, 6], [13, 3], [41, -15], [29, -16], [59, -46], [49, -32], [19, -3], [14, 11], [13, 18], [-59, 46], [-6, 30], [3, 26], [36, 15], [22, 2], [104, -27], [56, -9], [55, -3], [114, 31], [-61, 35], [-132, 30], [-25, 21], [-18, 34], [97, 31], [99, -1], [177, -40], [59, 19], [55, 58], [32, 15], [125, -5], [101, 27], [16, -3], [15, -8], [97, -97], [13, 5], [10, 19], [3, 34], [1, 34], [-3, 35], [-12, 22], [-16, -3], [-17, -10], [-28, 9], [-28, 18], [-29, 8], [-100, 11], [-71, 18], [-37, 14], [-34, 28], [-5, 31], [36, 71], [138, 76], [65, 25], [66, 6], [32, -5], [76, -32], [12, 2], [11, 8], [-73, 53], [-65, 41], [-33, 31], [-26, 12], [-109, 12], [-57, -31], [-27, -5], [-27, 3], [-160, 74], [-9, 8], [-23, 28], [-12, 21], [-7, 35], [3, 35], [5, 23], [24, 91], [13, 72], [-7, 59], [-25, 32], [-36, 22], [-33, 35], [-9, 24], [-6, 28], [-1, 36], [9, 32], [14, 34], [18, 17], [34, 17], [133, 39], [270, 49], [30, -25], [43, -52], [14, -21], [15, -104], [0, -29]], [[24851, 12213], [-3, -1], [-6, 0], [-4, 0], [-4, -1], [-3, -1], [-3, 0], [-1, 0], [0, 1], [-2, 2], [-3, 5], [-2, 5], [-1, 5], [1, 7], [3, 3], [0, 4], [0, 5], [1, 5], [1, 5], [0, 3], [1, 1], [2, 1], [5, 0], [3, 0], [5, -1], [3, -1], [3, -2], [4, -5], [3, -6], [0, -3], [1, -3], [0, -4], [1, -5], [1, -4], [-1, -7], [-2, -7], [-2, -1], [-1, 0]], [[33151, 12230], [-11, -16], [-35, 10], [-20, 11], [-34, 28], [19, 17], [37, -4], [30, -20], [14, -26]], [[31292, 12807], [-55, -11], [-41, 12], [1, 44], [-11, 5], [-4, 10], [52, 33], [39, 8], [47, -5], [20, -14], [7, -15], [-36, -36], [-6, -14], [-13, -17]], [[95786, 12937], [-24, -16], [-15, 5], [-15, 34], [16, 53], [-6, 69], [3, 17], [39, -39], [7, -21], [16, -32], [3, -17], [-16, -32], [-8, -21]], [[31288, 13309], [-13, -4], [-31, 2], [-20, 13], [26, 41], [-3, 28], [23, 11], [26, -10], [18, -35], [3, -15], [-29, -31]], [[73839, 13275], [-48, -15], [-8, 8], [-1, 9], [-72, 55], [-12, 45], [7, 31], [59, -3], [70, -27], [37, -69], [-32, -34]], [[63484, 13373], [-46, -14], [-21, 6], [-2, 14], [-1, 13], [2, 15], [16, 12], [78, 1], [31, -10], [9, -7], [1, -21], [-3, -6], [-64, -3]], [[95361, 13351], [-5, -35], [-14, 8], [-20, 28], [-20, 69], [18, 7], [23, -12], [9, -34], [8, -18], [1, -13]], [[74039, 13382], [-32, -14], [-25, 3], [-29, 31], [12, 21], [30, 13], [38, -7], [10, -11], [26, -7], [-30, -29]], [[31114, 12975], [-29, -37], [-23, -11], [-21, 10], [-21, 5], [-15, -14], [-16, -58], [-19, -29], [-20, -15], [-12, 6], [-12, 0], [-19, -13], [-24, -5], [-23, 6], [-22, 37], [-32, 44], [-6, 14], [-5, 36], [1, 37], [14, 28], [73, 98], [24, 44], [21, 50], [23, 45], [44, 80], [22, 29], [111, 84], [30, 19], [33, -5], [8, -44], [-16, -22], [-53, -56], [-11, -79], [1, -29], [5, -8], [20, -10], [14, -11], [18, -24], [21, -14], [-45, -41], [-30, -21], [-21, -26], [-40, -25], [-17, -16], [26, -6], [38, -21], [10, -18], [-5, -14]], [[73702, 13472], [-30, -18], [-24, 3], [-16, 19], [-3, 12], [15, 38], [12, -2], [8, -20], [38, -32]], [[77456, 13554], [-26, -7], [-27, 16], [-13, 31], [-3, 10], [42, 8], [56, -30], [-29, -28]], [[95169, 13549], [-15, -27], [-13, 3], [-58, 69], [7, 30], [-8, 25], [1, 23], [2, 8], [71, -105], [13, -26]], [[77851, 13700], [-37, -8], [-14, 15], [-2, 9], [27, 33], [33, 11], [-3, -39], [-4, -21]], [[31501, 13709], [-62, -65], [-9, 4], [-5, 7], [1, 11], [20, 24], [4, 70], [41, 26], [16, -9], [-14, -30], [9, -26], [-1, -12]], [[76836, 13804], [32, -15], [57, 2], [20, -22], [4, -25], [-1, -14], [-23, -21], [-150, -14], [-24, 22], [26, 61], [28, 20], [31, 6]], [[75722, 13935], [-37, -8], [-38, 8], [-19, 27], [-4, 12], [15, 19], [54, 3], [38, -17], [8, -17], [2, -8], [-19, -19]], [[31709, 13915], [-60, -22], [-31, 8], [-2, 23], [8, 31], [29, 16], [-5, 46], [18, 19], [9, 35], [38, 26], [54, -12], [-8, -45], [-1, -16], [-32, -12], [-8, -7], [-7, -30], [1, -43], [-3, -17]], [[78050, 14010], [-121, -14], [-10, 15], [-45, 2], [-16, 12], [-6, 28], [15, 47], [24, 32], [37, 33], [18, 7], [76, 11], [55, -15], [39, -40], [11, -32], [-6, -21], [-71, -65]], [[78721, 14144], [-17, -14], [-45, 8], [-10, 12], [-4, 55], [-3, 16], [-17, 15], [-73, 28], [-8, 40], [10, 18], [27, 4], [67, -35], [15, -27], [-2, -41], [1, -13], [21, -27], [33, -28], [5, -11]], [[32412, 14480], [-44, -26], [-23, 0], [27, 64], [26, 2], [41, 36], [11, -5], [-22, -30], [-16, -41]], [[34100, 14650], [-24, -2], [-30, 17], [-4, 30], [0, 16], [23, 13], [14, 2], [81, 47], [36, 12], [-16, -29], [2, -26], [-13, -23], [-69, -57]], [[32450, 14706], [-27, -60], [40, 1], [28, 21], [29, 9], [25, -30], [-52, -23], [-50, -40], [-20, -21], [-22, -9], [-28, 3], [-28, -4], [-25, -39], [-26, -18], [-8, 15], [-10, 9], [-56, 14], [-26, 20], [-23, 14], [-25, 7], [13, 35], [15, 31], [85, 42], [-8, 13], [-6, 17], [67, 21], [2, 21], [-4, 24], [21, 16], [20, 24], [14, 7], [42, -3], [29, -33], [-12, -33], [26, -51]], [[32687, 14732], [-20, -23], [-16, -4], [-15, 10], [-20, -35], [-40, 11], [-16, 9], [10, 5], [7, 15], [22, 31], [38, 79], [7, 25], [-31, 41], [-5, 13], [7, 24], [11, 17], [26, 19], [34, 0], [17, -16], [0, -29], [58, -27], [-10, -56], [-22, -35], [-3, -42], [-33, -19], [-6, -13]], [[32791, 14932], [-26, -2], [7, 31], [23, 21], [38, 14], [-24, -35], [-7, -16], [-11, -13]], [[33931, 14945], [11, -8], [9, 4], [9, 8], [9, 19], [33, 27], [31, 3], [-10, -28], [74, -50], [-6, -39], [14, -32], [-30, -10], [-24, -33], [21, -13], [12, -28], [-25, -7], [-54, 17], [-28, -4], [3, 26], [-9, 10], [-33, -5], [-14, -57], [-10, -5], [-12, 9], [9, 37], [-14, 6], [-14, -1], [-42, -27], [-12, -1], [-25, 32], [79, 42], [-33, 21], [-7, 26], [5, 36], [-29, -5], [-28, -14], [-13, -2], [-11, 12], [4, 26], [23, 43], [18, 45], [36, 22], [21, 17], [28, 8], [12, 16], [26, 1], [15, -37], [-1, -22], [-12, -24], [-6, -61]], [[34062, 15087], [4, -10], [56, 6], [15, -15], [-31, -20], [-8, 4], [-27, -6], [-76, 15], [-18, 23], [67, 13], [18, -10]], [[33152, 15053], [-35, -20], [-21, 6], [-33, 24], [45, 7], [4, 70], [22, 27], [43, -15], [-26, -37], [-9, -28], [9, -24], [1, -10]], [[34480, 15244], [-24, -26], [-61, 39], [-16, 25], [7, 19], [98, 17], [26, -9], [12, -40], [-42, -25]], [[0, 0], [99608, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0]], [[0, 3253], [447, 8], [89, -8], [94, -25], [207, -2], [194, -11], [50, -33], [65, -20], [137, 17], [110, 9], [89, 1], [823, -46], [843, -81], [172, -26], [154, -61], [162, 9], [957, -47], [148, 0], [586, -50], [1026, -114], [89, -4], [97, 3], [-51, 62], [-96, 56], [-129, 40], [84, 12], [184, 1], [-37, 29], [-101, 16], [-366, 19], [-1463, 144], [-32, 9], [-21, 12], [-38, 13], [-60, 14], [-223, 8], [-61, 13], [-29, 16], [15, 7], [17, -3], [340, 13], [38, 16], [2, 11], [-18, 8], [-59, 10], [-137, 48], [-44, 21], [23, 33], [28, 14], [105, 11], [31, 22], [-20, 40], [-241, 80], [-162, 29], [-107, -20], [-203, -1], [-251, -10], [-68, 11], [-70, 32], [-82, 57], [-42, 15], [-80, 47], [-106, 46], [-561, 111], [-98, 30], [-702, 175], [-29, 30], [-18, 32], [324, -71], [61, 0], [72, 18], [55, -5], [75, 18], [84, 9], [219, -55], [442, -89], [118, -31], [63, -22], [52, -7], [51, -16], [63, 9], [38, -8], [92, 5], [419, 10], [166, -8], [195, -43], [75, -71], [56, -32], [107, 25], [90, 30], [173, 25], [56, -10], [93, -37], [105, -62], [445, 17], [187, -3], [133, -28], [485, 93], [75, 20], [111, 65], [-91, 20], [-65, 7], [-25, 33], [44, 13], [140, 18], [272, 28], [161, 27], [86, 70], [369, 109], [117, 48], [108, 79], [-242, 157], [-232, 136], [74, 42], [73, 33], [35, 26], [29, 37], [-76, 45], [-71, 33], [-117, 32], [-440, 77], [-150, 33], [60, 51], [80, 39], [169, 17], [1079, 60], [1087, 74], [27, 37], [-144, 44], [-123, 11], [-45, 13], [-17, 28], [-1, 38], [-14, 6], [-46, 4], [-196, 44], [-41, 17], [-65, 41], [-17, 32], [39, 82], [60, 35], [104, 19], [75, 7], [225, -1], [88, 10], [37, 11], [-7, 39], [-25, 18], [-1, 24], [38, 14], [47, -1], [13, 29], [-26, 47], [-67, 25], [-176, 43], [-400, 65], [-155, 49], [-89, 38], [-74, 44], [-75, 21], [-52, 23], [11, 28], [-24, 44], [-29, 8], [-127, -19], [-227, 10], [-278, 41], [-192, 47], [-251, 127], [-99, 63], [73, 44], [80, 28], [334, 65], [50, 22], [68, 58], [-112, 24], [-95, -2], [-84, 16], [-342, 4], [-193, -8], [-162, 72], [-121, 71], [-34, 36], [-26, 64], [41, 94], [34, 67], [-4, 83], [9, 113], [58, 38], [45, 7], [105, -87], [90, -7], [131, 17], [83, 45], [44, 17], [81, 4], [156, -20], [71, 8], [80, -4], [251, -58], [55, -27], [30, -21], [9, -30], [31, -31], [107, -15], [299, 17], [78, -7], [212, -85], [180, -91], [62, -23], [102, -15], [36, 13], [31, 34], [97, 42], [218, 52], [52, 52], [-29, 28], [-84, 30], [-51, 10], [-28, 34], [2, 47], [17, 45], [57, 11], [104, -61], [130, -57], [45, -8], [35, 2], [65, 20], [78, 15], [149, -122], [88, -8], [110, -1], [21, 19], [-13, 32], [-18, 35], [-23, 5], [-3, 32], [48, 30], [33, 13], [-13, 22], [-53, 33], [-31, 6], [-28, 14], [9, 23], [35, 10], [49, 34], [-15, 39], [2, 51], [-20, 27], [-116, 53], [-169, 87], [-157, 39], [-350, -31], [-124, 20], [-81, 23], [-88, 30], [103, 32], [108, 22], [32, 20], [41, 40], [48, 29], [39, 8], [128, -15], [289, -108], [61, -12], [198, -49], [55, -3], [68, 11], [-55, 48], [-61, 34], [-145, 96], [16, 46], [94, 76], [245, 6], [107, 27], [139, 58], [179, 96], [154, 12], [192, 30], [65, -22], [164, -93], [103, -32], [35, -3], [37, 3], [-97, 116], [63, 14], [80, 13], [66, 29], [49, 24], [168, 111], [150, 31], [426, 48], [146, -44], [123, -5], [27, 13], [25, 59], [65, 115], [55, 41], [185, 43], [145, -2], [104, -47], [97, -31], [89, -14], [90, 1], [134, 27], [178, 9], [83, 14], [96, -26], [236, -9], [183, -37], [113, 0], [153, 36], [83, 5], [299, 58], [234, 12], [177, -26], [286, 16], [290, -12], [117, -21], [652, 13], [518, 55], [71, 19], [111, 60], [61, 55], [41, 17], [87, 6], [149, -12], [205, -41], [176, 15], [337, -23], [32, 19], [32, 104], [55, 165], [47, 49], [77, -13], [233, -94], [5, -40], [-24, -29], [-38, -11], [-11, -80], [31, -23], [52, 7], [33, -35], [-73, -60], [-52, -34], [-33, -15], [-23, -115], [-31, -38], [-4, -42], [50, 0], [50, 18], [44, 4], [140, 30], [255, 35], [84, 17], [48, 6], [31, 23], [-43, 57], [-14, 47], [26, 39], [-7, 67], [-24, 68], [49, 50], [46, -11], [79, 8], [45, -25], [69, -22], [66, -11], [63, -45], [21, -98], [-19, -100], [-65, -73], [-121, -66], [-137, -105], [29, -50], [71, 17], [309, -5], [199, 8], [125, -12], [158, -27], [125, -39], [149, -8], [93, 15], [87, -20], [339, 84], [138, 48], [79, -24], [128, 20], [71, -18], [133, 30], [84, 3], [97, -12], [296, -6], [22, -55], [90, -83], [73, -32], [93, 14], [67, 25], [106, -9], [153, 35], [153, -11], [64, 6], [29, 23], [25, 51], [-47, 28], [-134, 36], [-123, 74], [-55, 16], [-88, -9], [-41, 13], [-44, 24], [57, 29], [70, 93], [-29, 84], [-33, 18], [-81, -3], [-98, -30], [-39, 21], [-64, 11], [-25, 78], [-68, 146], [-36, 42], [-108, 38], [-93, 19], [-90, 24], [-27, 58], [17, 79], [108, 17], [104, -8], [58, -15], [67, -6], [77, -16], [50, -23], [40, -13], [75, 0], [260, 21], [35, 15], [31, 28], [55, 7], [51, -4], [74, 17], [-85, 23], [-91, 44], [-137, 53], [-115, 29], [-209, 20], [-107, -7], [-67, 11], [-239, -6], [-65, 21], [-46, 58], [-65, 138], [-18, 72], [44, 27], [29, 30], [71, 3], [103, -12], [34, -14], [25, -43], [-25, -44], [-33, -23], [20, -21], [105, -6], [52, -13], [45, -5], [97, 20], [142, 8], [71, -20], [85, -15], [125, 24], [445, -13], [54, -6], [54, -40], [46, -24], [49, 10], [145, -46], [77, -36], [79, -18], [67, -5], [75, 9], [98, 30], [81, 12], [58, -11], [123, -6], [94, -36], [73, 15], [77, 41], [244, 29], [163, -8], [298, -74], [69, -7], [136, 44], [44, 72], [-6, 81], [39, 19], [33, -9], [60, 56], [82, -5], [51, -10], [31, 36], [28, 77], [97, 6], [70, -12], [92, -49], [0, -41], [-38, -43], [-63, -107], [39, -63], [59, 6], [75, -13], [91, 27], [58, 1], [101, -93], [68, -5], [53, 5], [172, 84], [50, 9], [61, -38], [89, -89], [78, -51], [114, -32], [99, -9], [116, -42], [64, -35], [146, 0], [62, -15], [176, -72], [160, 36], [83, 33], [40, 61], [-20, 91], [-7, 92], [24, 38], [42, 7], [191, -103], [-12, 62], [-16, 47], [-49, 82], [7, 61], [41, 19], [80, -32], [96, -16], [79, -36], [155, -128], [50, -112], [105, -28], [73, 5], [83, 18], [111, 16], [86, -5], [79, 21], [24, -61], [-74, -88], [-29, -57], [24, -15], [45, 13], [37, 18], [129, -9], [104, 40], [89, 14], [84, 42], [69, -4], [53, -7], [72, -33], [69, 18], [41, -7], [56, -2], [297, 145], [67, -3], [85, 9], [107, 34], [83, 15], [68, -1], [121, 53], [193, -7], [98, 28], [191, 32], [128, 37], [228, 98], [92, 58], [100, 129], [63, 129], [70, 171], [-34, 111], [-37, 49], [-31, 54], [-73, 111], [-20, 139], [7, 131], [-26, 123], [-26, 91], [-54, 152], [-66, 99], [-77, 133], [0, 121], [-19, 95], [-46, 68], [-20, 54], [36, 11], [33, 17], [89, 21], [213, -37], [19, 54], [54, 40], [38, 50], [-13, 77], [-47, 31], [-56, 65], [26, 52], [45, 0], [22, 57], [-17, 56], [21, 70], [41, 90], [28, 33], [-51, 54], [-48, 70], [12, 54], [24, 57], [29, 80], [40, 57], [26, 20], [-7, 19], [-61, 20], [-56, 4], [-101, -36], [-16, 7], [-5, 19], [-6, 39], [10, 95], [16, 90], [14, 13], [40, 11], [38, 69], [35, 4], [22, -23], [7, -91], [12, -21], [-4, -44], [18, -15], [22, 28], [41, 14], [16, -31], [15, -15], [7, 26], [-5, 74], [-7, 30], [-5, 48], [9, 23], [10, 37], [-17, 78], [6, 29], [37, 47], [18, 9], [35, 0], [63, -31], [30, -2], [22, 14], [14, 30], [11, 98], [-27, 35], [0, 31], [16, 20], [28, 68], [42, 4], [41, -6], [40, 13], [-14, 28], [-12, 43], [45, 21], [29, 6], [77, -27], [30, -15], [28, 35], [-9, 34], [-30, 19], [-5, 30], [7, 39], [48, -20], [11, 8], [13, 34], [-8, 17], [-6, 22], [63, 5], [9, 9], [13, 27], [19, 9], [56, -1], [12, 14], [6, 30], [-31, 7], [-39, 29], [-6, 80], [9, 57], [35, 50], [42, 34], [78, -30], [60, 7], [24, -30], [33, -8], [8, 34], [-15, 30], [-10, 49], [96, 59], [31, -10], [38, 14], [-14, 45], [21, 57], [27, 8], [19, -50], [26, -10], [29, 12], [71, 58], [35, 9], [35, 3], [36, 34], [9, 40], [20, 28], [62, 38], [25, 27], [55, 95], [-10, 24], [16, 20], [163, 86], [80, 8], [133, 52], [81, 61], [51, 25], [45, 68], [55, 11], [128, 47], [96, 77], [133, 53], [62, -5], [25, -16], [16, -63], [26, -77], [40, -38], [-15, -34], [-38, 4], [-41, -8], [-9, 38], [15, 28], [-15, 25], [-37, -6], [-49, -13], [-33, -19], [-43, -41], [-34, -23], [-113, -61], [-74, -88], [-53, -93], [-32, -63], [-47, -5], [-11, -23], [19, -18], [15, -8], [35, -7], [-6, -27], [-24, -7], [3, -22], [25, -32], [5, -46], [-29, -7], [-44, 49], [-50, 5], [-39, 23], [-25, 33], [-24, -7], [-18, -47], [11, -52], [-21, -31], [-24, 14], [-9, 62], [-23, 11], [-32, 1], [-77, -67], [-28, -2], [-14, -34], [-45, -38], [-29, -31], [-71, -102], [-40, -43], [-76, -24], [-30, 3], [-18, 10], [-27, 7], [-28, 1], [-9, -27], [44, -88], [-24, -30], [-53, 2], [-26, 25], [-21, -24], [-17, -23], [-17, -34], [26, -72], [41, -32], [30, -6], [11, -27], [-65, -11], [-44, -63], [-20, -44], [-23, -38], [3, -44], [34, -66], [46, -47], [46, -4], [60, 15], [14, 13], [59, 7], [26, 46], [19, 3], [17, -8], [27, -2], [15, 30], [20, 11], [28, -8], [54, 1], [15, -27], [-17, -30], [-33, -42], [-31, 23], [-27, -4], [-15, -22], [29, -47], [-11, -42], [-24, -42], [-29, 27], [-4, 45], [-40, 27], [-39, 12], [-26, -47], [-41, -13], [-6, -54], [-17, -50], [-24, 15], [-9, 62], [-67, 50], [-35, 7], [-70, -13], [-24, 1], [-28, -11], [-20, -42], [29, -31], [10, -42], [-1, -31], [-6, -12], [-5, -26], [32, -37], [1, -50], [-25, 1], [-21, 15], [-81, 130], [-51, 58], [-22, 51], [-53, 12], [-38, 1], [-46, -21], [18, -24], [9, -36], [-28, -15], [-35, -56], [-23, -48], [-14, -10], [-18, -28], [75, -61], [11, -24], [4, -41], [-24, -22], [-56, -9], [-99, 43], [-43, 1], [-15, 30], [-22, -4], [-13, -51], [-16, -45], [-24, -30], [7, -46], [19, -11], [-15, -19], [-31, -15], [-21, -18], [46, -17], [9, -15], [2, -22], [-72, -16], [-47, -4], [-28, 18], [-26, -9], [-17, -29], [-5, -39], [5, -48], [9, -34], [7, -13], [8, -29], [-43, -74], [-5, -16], [-3, -34], [21, -31], [16, -46], [-23, -23], [-25, -47], [26, -9], [44, -2], [48, 6], [72, 41], [20, 7], [9, -16], [6, -25], [-18, -24], [-130, -68], [-24, -29], [33, -16], [67, -3], [26, -22], [-16, -24], [-24, -23], [-28, -54], [23, -20], [72, -32], [131, -42], [97, -14], [-22, 49], [-3, 60], [68, 49], [35, 16], [162, 29], [44, -1], [34, -13], [-13, -25], [-37, 9], [-65, -16], [-100, -54], [-18, -23], [7, -42], [85, -34], [27, -27], [-37, -81], [6, -52], [43, -57], [57, -65], [28, -43], [43, -25], [70, -61], [38, -61], [12, -140], [57, -116], [67, -53], [8, -46], [-22, -46], [-57, 27], [-32, -27], [-12, -49], [40, -34], [64, -42], [138, 4], [4, -46], [-32, -27], [-25, -34], [-31, -19], [-52, -12], [-13, -41], [22, -58], [72, 26], [53, 3], [55, -10], [17, -77], [65, -95], [16, -45], [-12, -43], [-40, -13], [-25, -34], [-36, -29], [-41, -16], [-76, -79], [-33, -8], [-14, -16], [65, -8], [45, -2], [97, 64], [37, -14], [24, -42], [12, -49], [-24, -42], [-169, -25], [-82, -23], [-88, -66], [101, -31], [74, 11], [37, -12], [51, -23], [56, 12], [44, 24], [33, -1], [31, -12], [4, -41], [4, -72], [7, -54], [-18, -36], [-88, -26], [-64, 1], [-2, -76], [96, -57], [60, 30], [53, -15], [0, -91], [41, -101], [36, -6], [30, 46], [38, 0], [15, -54], [-17, -91], [-29, -50], [-78, 21], [-44, 16], [-35, -34], [-58, -29], [-51, -4], [-45, 45], [-52, 34], [-83, 17], [-78, 8], [26, -39], [35, -23], [14, -69], [28, -72], [65, 19], [90, -41], [56, -43], [24, -57], [-31, -91], [-51, -34], [-32, -16], [-56, 35], [-39, 0], [-41, -16], [-14, -42], [-27, -20], [144, -3], [45, -11], [33, -38], [-52, -50], [-95, 8], [-41, -19], [-35, -36], [142, -22], [59, 12], [93, 38], [22, -38], [-37, -38], [-48, -61], [-100, -19], [-75, -1], [-98, 22], [-26, 13], [-41, 7], [3, -37], [26, -26], [66, -94], [11, -36], [-21, -50], [-58, -37], [-65, -14], [-54, 32], [-39, 91], [-50, 27], [-51, 8], [-30, -4], [3, -46], [12, -49], [-20, -35], [-44, 18], [-57, -16], [-53, -27], [-48, -30], [98, -14], [65, -3], [46, -46], [-17, -23], [-88, -10], [-86, -20], [-117, -50], [86, -21], [81, 1], [57, -5], [47, -9], [13, -27], [-29, -30], [-192, -74], [-201, -91], [-74, -29], [-77, -16], [-179, -78], [-113, -36], [-318, -55], [-497, -139], [-169, -99], [-50, -76], [-32, -11], [-95, -26], [-95, -12], [-251, -8], [-257, 37], [-208, 8], [-113, -12], [-386, 66], [-49, -3], [-60, -12], [-48, 0], [-36, 9], [-78, 4], [-263, -26], [-27, -41], [33, -76], [96, -92], [160, -162], [86, -35], [53, -37], [100, -43], [224, -2], [306, -34], [174, -31], [-6, -60], [-105, -115], [-65, -44], [-155, -80], [-213, -40], [-163, 12], [-289, 65], [-362, 60], [-538, 57], [-118, 26], [-139, 26], [-79, -27], [-60, -25], [-133, -2], [39, -23], [537, -155], [458, -113], [54, -29], [65, -20], [-6, -72], [-26, -57], [-90, -50], [-234, -3], [-293, -40], [-146, -1], [-145, 39], [-309, 113], [-189, 84], [-132, 96], [-91, 76], [-102, 75], [7, -47], [18, -47], [50, -58], [73, -63], [5, -25], [-35, -4], [-53, 30], [-45, -28], [-16, -33], [19, -44], [28, -42], [93, -94], [80, -25], [106, -57], [258, -106], [44, -36], [78, -78], [16, -59], [76, -58], [52, -9], [47, 2], [16, 50], [-3, 61], [20, 15], [74, 15], [193, -21], [821, -12], [78, -35], [31, -45], [21, -93], [-87, -112], [-59, -48], [-97, -29], [-88, -23], [-133, -9], [-275, 8], [-269, 0], [209, -54], [203, -44], [282, 8], [112, 12], [97, 21], [41, -37], [77, -78], [45, -25], [31, -26], [43, -85], [17, -50], [42, -58], [30, -49], [44, -33], [75, -15], [82, 28], [159, 13], [154, -45], [99, -14], [132, 37], [105, 52], [221, 47], [41, 20], [60, 16], [91, -4], [36, -12], [46, -51], [43, -70], [63, -35], [67, -25], [38, -3], [126, -22], [164, 21], [73, -21], [12, -40], [39, -32], [49, -11], [665, -180], [229, -35], [353, -18], [274, -2], [38, -11], [53, -35], [-105, -24], [-112, -3], [-169, 9], [-60, -5], [-129, 10], [-67, -7], [-61, 11], [-91, -25], [-166, -19], [37, -27], [62, -6], [126, -10], [172, 5], [15, -43], [-158, -10], [-336, -9], [-35, -7], [-26, -22], [50, -11], [31, -12], [16, -31], [-36, -79], [56, -55], [39, -9], [41, 8], [71, -22], [69, -30], [146, -2], [173, 40], [85, -1], [228, 25], [207, -4], [289, 48], [48, -1], [44, -6], [-80, -44], [-355, -110], [-127, -21], [-51, -14], [29, -54], [46, -56], [94, -60], [59, -89], [57, -19], [110, 41], [27, -31], [5, -61], [-29, -49], [-37, -28], [-26, -27], [-17, -36], [46, -31], [123, -19], [163, -7], [151, -1], [93, -9], [341, 194], [137, 94], [67, 39], [56, 29], [288, 119], [67, 36], [76, 53], [141, 8], [193, 86], [171, 66], [68, 13], [51, 5], [60, 14], [150, -5], [107, 11], [190, 42], [145, 27], [154, 23], [174, 4], [463, 44], [132, -19], [146, -46], [95, 1], [125, 14], [86, 18], [39, -53], [20, -69], [-42, -64], [-70, -40], [-19, -66], [95, -33], [108, 10], [206, 32], [164, 42], [45, 28], [64, -8], [109, 35], [136, 146], [171, 147], [144, 94], [93, 110], [77, 63], [86, 48], [58, 24], [132, 5], [189, 76], [275, 87], [211, -42], [223, -63], [110, 51], [87, 9], [74, 23], [74, 17], [53, 45], [71, 38], [54, 55], [271, 27], [284, 36], [38, 13], [37, -7], [98, 10], [125, 30], [172, 10], [90, -3], [82, 81], [164, 17], [175, 32], [73, 24], [57, 6], [1413, 63], [61, 31], [124, 25], [47, 61], [-190, 25], [-58, 26], [-65, 7], [-38, -9], [-164, 7], [-1303, 94], [-27, 8], [-45, 57], [9, 105], [-39, 81], [-91, 22], [-94, -2], [-119, -10], [-314, -44], [-125, -4], [-335, 68], [-221, 77], [-145, 25], [-104, 52], [-97, 40], [-7, 91], [23, 85], [187, 246], [117, 118], [78, 9], [71, 53], [73, 119], [59, 56], [135, 66], [59, 17], [212, 81], [58, 2], [95, -13], [108, 73], [329, 156], [75, 59], [91, 35], [266, 132], [238, 64], [118, 19], [144, 39], [160, 59], [139, 57], [497, 109], [298, 29], [203, 32], [144, -19], [143, 6], [123, 29], [57, 23], [83, 59], [276, -28], [178, 40], [74, 4], [78, 18], [-31, 21], [-28, 3], [-28, 28], [-37, 58], [37, 73], [28, 36], [82, 45], [43, 64], [40, 94], [135, 185], [38, 26], [86, 8], [73, -5], [83, 2], [210, -48], [39, 19], [67, 54], [56, 68], [120, 100], [23, 30], [-10, 49], [-180, -21], [-136, -33], [-131, 18], [-17, 28], [28, 21], [49, 8], [19, 34], [-45, 28], [-81, 16], [-36, 21], [3, 51], [20, 75], [44, 21], [36, 31], [96, 105], [57, 32], [164, 29], [190, -44], [44, 12], [46, 59], [-47, 90], [-36, 34], [0, 30], [100, -14], [93, -20], [109, 4], [129, 90], [181, 75], [88, 31], [78, 18], [42, 76], [62, 144], [46, 75], [-1, 45], [-14, 38], [-47, -11], [-43, -5], [-101, 38], [-125, 61], [-38, 68], [-18, 61], [39, 33], [38, 20], [41, 5], [73, -25], [93, -62], [46, -24], [53, -46], [40, 4], [47, 64], [38, 85], [32, 26], [49, 28], [54, 41], [-24, 40], [-58, 21], [-8, 24], [25, 27], [47, 6], [59, -59], [80, -39], [55, -13], [47, -32], [74, -108], [89, -179], [41, -2], [78, 16], [84, 7], [56, 51], [12, 128], [22, 58], [-8, 59], [-38, 60], [-33, 44], [6, 33], [28, 24], [37, 8], [64, 24], [99, -28], [54, -5], [81, 16], [84, 35], [86, 25], [67, -19], [29, -64], [-33, -65], [-54, -48], [-49, -59], [-13, -64], [2, -35], [47, -9], [416, 8], [55, -6], [72, 0], [78, -21], [132, 8], [118, 23], [56, 0], [97, -21], [69, -44], [143, 13], [40, 14], [39, 59], [41, 11], [48, -48], [15, -110], [22, -52], [61, -47], [60, 40], [39, 48], [94, 93], [107, 71], [82, 42], [200, 70], [99, 44], [194, 60], [250, 32], [446, 108], [147, 12], [240, 28], [123, 30], [125, 23], [77, 80], [175, -61], [60, -7], [82, 48], [90, 119], [131, -49], [75, -77], [93, -60], [208, -104], [66, -24], [138, -21], [37, 17], [65, 69], [67, 100], [42, 42], [61, 35], [69, 55], [-18, 30], [-39, 10], [-36, 16], [9, 29], [122, 7], [64, -101], [66, -33], [80, -33], [186, 26], [159, 2], [138, -20], [68, 3], [61, 76], [99, 28], [56, -34], [35, -112], [127, -31], [266, -51], [30, 13], [33, 59], [23, 72], [54, 12], [69, 39], [37, -6], [52, -47], [-18, -114], [-29, -105], [35, -85], [31, -47], [40, -8], [67, -2], [82, 6], [51, -4], [261, 42], [32, 94], [42, 107], [103, 136], [40, -10], [31, -14], [70, -67], [42, -34], [9, -49], [-46, -47], [13, -31], [46, -25], [148, -41], [48, 8], [71, 43], [72, 85], [39, 98], [61, -5], [59, -20], [41, -51], [0, -97], [57, -66], [46, -42], [120, -45], [128, -11], [90, -27], [146, 10], [71, 30], [46, 8], [80, 24], [84, 57], [52, 23], [192, 52], [145, 57], [154, 102], [150, 61], [230, 31], [64, 13], [88, -1], [217, 73], [82, 42], [46, 15], [52, 52], [28, 102], [22, 63], [-4, 61], [-20, 80], [-46, 71], [-47, 104], [21, 119], [37, 49], [96, 54], [95, 11], [108, -7], [94, -11], [8, -51], [-41, -55], [-52, -54], [-31, -23], [11, -46], [68, -7], [149, 10], [43, -42], [106, -184], [26, -87], [37, -25], [58, 12], [125, -1], [87, 13], [71, 1], [37, -9], [38, -42], [72, -49], [72, 36], [52, 17], [63, -4], [99, -57], [99, -133], [107, -67], [7, 43], [-14, 53], [44, 47], [53, 79], [77, 103], [61, 105], [15, 145], [29, 119], [49, 57], [48, 37], [75, 38], [92, 8], [88, 86], [62, 35], [130, 47], [163, 47], [114, 131], [39, 16], [58, 21], [107, 8], [173, 42], [54, 6], [91, 33], [80, 78], [58, 22], [104, -3], [88, 44], [74, 2], [68, 22], [10, 49], [-32, 33], [-1, 43], [38, 56], [30, 21], [90, -4], [75, -48], [55, -2], [14, -27], [-48, -34], [-32, -61], [55, -53], [49, -36], [59, 7], [71, 32], [70, -23], [31, -49], [0, -76], [15, -41], [49, 36], [27, 76], [-8, 97], [3, 60], [117, 97], [46, 73], [-82, 15], [-58, -10], [-32, 27], [-37, 73], [101, 61], [116, -2], [67, -52], [144, -83], [80, 2], [72, -13], [15, 26], [-27, 122], [3, 68], [-60, 38], [-17, 87], [25, 91], [71, 51], [97, 24], [208, 140], [55, 30], [137, 29], [160, 14], [199, 50], [355, -34], [95, -21], [59, -28], [57, -45], [74, -74], [107, -94], [139, -30], [39, -29], [51, -80], [-55, -52], [-45, -5], [-87, 31], [-60, 32], [-42, -13], [41, -55], [45, -34], [7, -46], [-24, -66], [-164, -130], [98, -37], [59, 30], [54, 55], [55, 25], [37, 10], [130, 2], [74, 22], [56, -16], [55, -35], [81, -35], [116, -38], [143, -147], [111, 15], [60, 32], [171, 10], [147, -65], [83, -24], [240, -20], [143, -42], [91, 50], [61, 20], [128, 10], [65, -10], [178, -54], [315, -55], [217, -29], [191, -1], [91, -24], [166, -26], [63, -20], [159, 16], [74, 21], [70, 47], [39, -11], [27, -59], [-15, -101], [29, -69], [23, -69], [33, -57], [21, -49], [-15, -41], [-46, -37], [-64, -79], [4, -69], [27, -44], [-32, -53], [24, -74], [4, -45], [-22, -36], [-50, -22], [-85, -3], [-44, -21], [-7, -55], [22, -41], [49, -22], [14, -44], [-7, -66], [-22, -56], [-45, -26], [-49, -6], [-91, 12], [-66, 37], [-42, -33], [-31, -34], [-95, -77], [-44, -52], [-41, -55], [108, -31], [79, -55], [172, 6], [55, 24], [73, 26], [39, -5], [24, -56], [-14, -89], [-3, -69], [-87, -190], [-29, -32], [-41, -52], [-48, -41], [-39, -20], [-75, -60], [-46, -109], [-50, -90], [-73, -154], [-42, -165], [-18, -99], [-28, -103], [-62, -177], [-40, -30], [-69, -72], [20, -48], [54, -5], [66, -11], [89, -37], [118, 76], [62, 48], [13, 96], [-13, 97], [38, 57], [87, 78], [205, 56], [42, 6], [68, 19], [60, 70], [53, 70], [93, 44], [77, 72], [12, 51], [32, 11], [96, 50], [25, 37], [30, 28], [21, 63], [8, 118], [24, 89], [47, 118], [38, 86], [37, 54], [99, 29], [43, 33], [57, 73], [39, 44], [-5, 90], [22, 83], [61, 50], [78, 92], [98, 13], [74, 48], [79, -33], [95, -46], [161, 14], [76, -21], [59, 25], [52, 71], [19, 87], [61, 50], [69, -1], [114, 87], [118, 77], [96, 18], [77, 60], [55, 102], [59, 79], [73, 75], [20, 133], [46, 67], [85, 59], [71, 32], [298, 100], [229, 66], [231, 82], [71, -1], [93, 45], [153, 2], [40, 4], [53, 93], [114, 86], [71, 28], [90, 74], [73, 7], [103, -13], [87, -20], [78, -1], [113, 62], [176, 10], [54, 30], [38, 26], [249, 87], [93, -17], [132, 15], [80, -4], [76, -11], [96, -3], [166, 31], [70, 20], [132, 76], [146, 18], [64, 20], [82, 17], [67, -29], [48, -27], [29, -6], [39, -5], [95, 30], [79, -8], [101, -33], [67, -27], [35, 0], [62, 24], [76, 60], [71, 24], [67, -15], [46, -25], [81, -34], [126, 5], [120, 13], [101, 28], [87, 30], [80, -46], [92, -17], [149, 81], [57, -18], [39, -21], [32, -10], [39, -68], [142, 13], [126, 57], [108, 43], [105, 28], [83, 39], [122, 148], [-2, 46], [17, 28], [26, 12], [194, -1], [60, 12], [79, 39], [137, -30], [131, -47], [34, 5], [53, 1], [93, -29], [105, -57], [93, -15], [385, -142], [218, -35], [110, -47], [28, -16], [32, -48], [58, -5], [46, 19], [61, -73], [148, -55], [154, -27], [100, 43], [170, 123], [52, 55], [-10, 122], [89, 136], [151, 67], [188, 35], [116, 30], [154, 28], [74, -29], [38, -21], [57, -25], [68, -76], [106, -172], [79, -62], [69, -5], [60, -10], [63, -39], [90, -121], [-54, -108], [-46, -40], [-196, -46], [-86, -37], [-75, -23], [-21, -90], [31, -42], [81, 21], [95, 10], [74, 18], [68, 28], [59, 40], [140, 21], [91, 34], [82, 20], [57, 35], [58, -5], [58, -34], [46, 3], [124, -11], [58, 25], [51, 2], [52, -19], [54, -26], [54, -7], [70, 16], [98, 42], [125, 46], [117, 15], [28, -1], [24, -9], [-117, -53], [-187, -72], [-100, -69], [59, -29], [352, 77], [160, 58], [142, 26], [35, 19], [116, 90], [42, 24], [125, 32], [163, 34], [124, 39], [84, 40], [63, 4], [49, -29], [63, -33], [62, 8], [76, 31], [53, 72], [31, 53], [57, 18], [73, 16], [59, -18], [96, -38], [67, -20], [58, -151], [136, -133], [49, -35], [119, 13], [128, -52], [55, 7], [52, 15], [47, -10], [70, 32], [73, 167], [67, 163], [66, 72], [40, 30], [50, 14], [77, 34], [104, 10], [77, -14], [167, -12], [136, 41], [154, -7], [76, 48], [82, 7], [111, -41], [32, -29], [61, -42], [15, -41], [16, -74], [30, -2], [103, 73], [56, 13], [106, 117], [56, -30], [127, -50], [51, -15], [100, -85], [51, 18], [42, 40], [124, -4], [116, -35], [48, -29], [59, -50], [37, -12], [29, 14], [240, -19], [104, -37], [79, -45], [278, -21], [107, -46], [64, 22], [127, -7], [52, -39], [46, -43], [101, -37], [55, 7], [78, 30], [78, 41], [78, 0], [37, -35], [13, -88], [58, 2], [64, 40], [56, -10], [20, -61], [-30, -81], [-71, -114], [-29, -95], [-59, -86], [10, -41], [59, -20], [59, 61], [132, 42], [69, 55], [119, 20], [117, -19], [83, -73], [154, -123], [6, -44], [13, -46], [-5, -41], [-23, -47], [82, -55], [73, -9], [59, 5], [247, -53], [118, 21], [106, 0], [126, 8], [97, -2], [77, -9], [91, 19], [74, 26], [36, -16], [15, -137], [5, -81], [42, -30], [44, 30], [32, 41], [195, -19], [78, -2], [74, -22], [75, -51], [72, 22], [43, 31], [58, 20], [17, 51], [7, 85], [-2, 83], [34, 15], [35, -15], [46, -39], [105, -125], [80, -81], [34, -38], [49, -31], [99, -75], [136, -31], [133, -60], [155, 4], [121, -77], [82, 60], [43, 14], [63, -16], [76, -52], [60, -12], [205, -86], [110, -30], [41, -63], [54, -60], [0, -61], [24, -77], [123, -61], [48, -59], [59, -78], [107, -293], [56, -52], [81, 5], [76, -76], [24, 11], [3, 30], [-69, 198], [-5, 107], [54, 61], [127, 17], [98, -114], [90, -69], [60, -12], [120, 3], [113, 73], [86, -26], [138, -9], [179, -43], [77, 8], [137, -18], [167, -62], [95, -23], [20, -25], [44, -41], [22, -50], [24, -46], [58, -52], [58, -9], [115, -44], [241, -136], [87, -40], [51, -29], [25, 35], [7, 72], [44, 15], [47, -107], [49, -81], [22, -71], [-51, -58], [-74, 12], [-52, 0], [-53, -96], [-22, -166], [49, 3], [36, 15], [8, -61], [-22, -51], [-44, -20], [-76, 39], [-93, 27], [-102, 10], [-99, 49], [-39, 3], [-41, -3], [53, -51], [55, -46], [125, -40], [156, -62], [4, -38], [-37, -47], [-46, -100], [-142, -86], [-83, 62], [-98, 15], [-49, -37], [-98, 4], [-194, -14], [-76, 79], [-119, 43], [4, -36], [102, -130], [109, -30], [108, -35], [26, -33], [-49, -31], [-66, 5], [-83, -61], [-158, 10], [-75, -3], [-44, -25], [-39, -9], [31, -22], [38, -60], [-54, -51], [-50, -25], [-51, 12], [-56, -20], [-27, 56], [-2, 122], [-32, 109], [-34, 4], [-54, -13], [-17, -93], [38, -161], [26, -50], [-21, -45], [-36, -14], [73, -136], [62, -93], [38, -31], [3, -46], [-30, -20], [-83, 18], [-41, -9], [-46, 6], [-77, 20], [-66, 6], [-66, -26], [-56, 2], [-50, 85], [-44, 20], [-36, -26], [-28, -101], [-57, -31], [-58, -46], [-41, -50], [-20, -198], [-34, -41], [-51, 2], [-39, -16], [-49, 16], [-64, 10], [-214, -68], [34, -35], [54, 6], [188, -11], [80, -36], [13, -89], [32, -38], [63, -41], [48, -20], [18, -30], [-20, -61], [-27, -56], [-59, -61], [17, -31], [64, -10], [27, -137], [-42, -61], [20, -51], [5, -51], [-43, -47], [-33, -24], [-11, -50], [64, -29], [47, -10], [66, -5], [45, -54], [58, -82], [42, -68], [3, -113], [41, -67], [77, -43], [-2, -45], [54, -14], [53, -4], [19, -41], [-17, -50], [-89, -61], [-37, -44], [89, -7], [92, -46], [117, 52], [62, 56], [40, 50], [30, -13], [3, -52], [36, -87], [151, -84], [84, -27], [81, -14], [71, 2], [20, -50], [-22, -46], [-56, 3], [-90, -8], [-66, 38], [-47, 33], [-412, -19], [-93, -15], [-111, -50], [-110, -24], [-169, -50], [-71, -30], [-185, 117], [-60, 86], [-25, 5], [-44, -20], [-2, -61], [86, -133], [39, -35], [0, -35], [-25, -18], [-35, 0], [-53, 26], [-99, 21], [-88, -41], [-108, -87], [23, -58], [29, -33], [-7, -39], [-121, -74], [-40, -3], [-25, -15], [30, -27], [66, -1], [7, -33], [-23, -26], [-109, -30], [7, -40], [59, -19], [77, 7], [48, -29], [0, -46], [-49, -26], [-57, -19], [-392, -118], [-57, -32], [3, -43], [137, -11], [410, 10], [27, -14], [-10, -34], [-23, -43], [23, -31], [61, -21], [2, -33], [-30, -13], [-61, -15], [-67, -4], [4, -35], [92, -31], [31, -4], [3, -118], [-3, -50], [-49, -24], [-18, -17], [-2, -40], [122, -29], [187, -127], [41, 0], [74, -24], [119, -65], [42, -39], [68, -19], [9, -32], [42, -27], [166, -88], [22, -38], [-348, -73], [-350, -54], [32, -48], [378, 5], [102, -30], [45, 9], [26, 32], [204, 38], [207, 25], [65, -18], [278, -141], [129, -53], [82, -20], [60, -5], [44, -21], [43, -45], [-10, -42], [18, -19], [29, -8], [55, -28], [63, 10], [73, 32], [51, -7], [92, -45], [-35, -35], [-20, -17], [-24, -32], [-23, -11], [-74, -7], [-41, 0], [-42, 6], [-4, -23], [51, -25], [74, -27], [480, -21], [137, -46], [135, 25], [61, -8], [51, -15], [19, -46], [69, -15], [106, -36], [148, -18], [118, 1], [145, -49], [73, -2], [45, -28], [330, -17], [49, -22], [38, -36], [78, -16], [85, -3], [464, -59], [174, -31], [40, 2], [40, -6], [125, -26], [127, -14], [61, -36], [-99894, -48]], [[34575, 15452], [17, -15], [70, 1], [16, -4], [14, -25], [9, -43], [-23, -17], [-121, 10], [-44, 22], [-22, -1], [-49, -24], [-21, -24], [-82, -32], [-23, 12], [-11, 34], [-1, 14], [8, 9], [4, 9], [-1, 11], [22, 29], [95, 44], [126, 16], [17, -16], [0, -10]], [[34427, 15507], [-55, -54], [-26, 2], [-54, 41], [-15, 21], [-3, 9], [34, 37], [97, -14], [22, -4], [1, -3], [2, -21], [-3, -14]], [[33193, 15571], [-14, -6], [-18, 5], [0, -10], [15, -13], [-16, -5], [-19, 13], [-14, 27], [10, 25], [19, 6], [37, -42]], [[32607, 15512], [-12, -2], [5, 24], [31, 62], [58, 29], [-7, -25], [-19, -31], [-56, -57]], [[33159, 15806], [14, -7], [121, 13], [38, -40], [43, 2], [-103, -75], [-28, 22], [-9, 16], [-7, 36], [-67, -9], [-22, 7], [-27, -24], [-55, -10], [-19, 0], [-24, 26], [-1, 26], [49, -1], [38, 33], [11, 34], [19, -9], [29, -40]], [[33503, 15872], [-38, -4], [-26, 33], [-12, 23], [51, 2], [23, -9], [12, -26], [-10, -19]], [[33656, 15954], [-62, -26], [-32, 27], [-7, 10], [38, 26], [20, -6], [8, -9], [23, -2], [12, -20]], [[33895, 16179], [35, -16], [31, 11], [17, -12], [12, -33], [-1, -12], [-47, 5], [-43, -38], [-51, 8], [-7, -31], [11, -17], [-14, -14], [-44, 30], [-35, -11], [-11, -51], [-16, -10], [-8, -2], [-14, 13], [-29, 4], [-2, 7], [-18, 20], [-51, -22], [13, 26], [68, 69], [8, 21], [79, 40], [37, -9], [80, 24]], [[34980, 16532], [-12, -5], [-19, 22], [-3, 13], [20, 26], [20, 35], [7, 4], [-5, -70], [-8, -25]], [[34676, 16577], [-37, -16], [-13, 22], [-7, 37], [-19, 23], [14, 20], [199, -26], [-11, -13], [-96, -17], [-30, -30]], [[37300, 16980], [61, -14], [31, -21], [8, -24], [36, -9], [5, -5], [7, -14], [4, -15], [-1, -20], [-62, 48], [-86, 3], [-20, 34], [-44, -20], [-5, 13], [0, 17], [6, 24], [28, -10], [32, 13]], [[84331, 44685], [0, -6], [-6, 1], [0, 6], [6, -1]], [[69244, 23583], [-17, -5], [-5, 19], [1, 25], [-10, 20], [-5, 22], [4, 20], [28, 3], [28, -7], [8, -35], [-21, -48], [-11, -14]], [[69217, 23554], [23, -4], [13, 6], [62, 76], [16, 2], [-2, -59], [16, -26], [-20, -6], [-38, 2], [-9, -33], [39, -42], [19, -6], [15, 0], [29, 10], [23, 15], [36, 36], [22, 14], [41, 0], [21, 34], [10, 10], [24, -1], [21, -13], [13, -31], [7, -37], [-5, -37], [-15, -36], [-26, -22], [6, -26], [-7, -13], [-13, -1], [-12, 6], [-16, 31], [-20, 16], [-48, -1], [-22, -2], [-3, -23], [-12, -18], [-12, -10], [-16, 4], [-3, -10], [9, -24], [21, -31], [36, -22], [21, -5], [3, 42], [26, 4], [23, -12], [16, -30], [-13, -10], [-12, -16], [-3, -21], [-23, -23], [-13, -2], [-44, 11], [-26, 25], [-6, 18], [-16, 7], [-18, -23], [-19, -5], [-37, 19], [-35, 31], [-22, 12], [-33, 8], [-19, -71], [-26, -30], [-33, -3], [-16, 6], [-9, 28], [2, 29], [5, 29], [11, 29], [6, 32], [-2, 30], [-12, 22], [6, 40], [-12, 30], [4, 23], [20, 16], [-9, 13], [-10, 4], [-7, 18], [-6, 22], [7, 41], [12, 39], [-2, 45], [19, 42], [17, 47], [12, 19], [15, 3], [7, -13], [3, -26], [-6, -17], [14, -7], [4, -55], [-9, -22], [-1, -22], [-19, -46], [5, -37], [37, -16]], [[64398, 25092], [-20, -5], [-18, 11], [-11, 32], [23, 27], [12, -19], [9, -20], [5, -26]], [[32856, 61657], [-9, -23], [-31, 9], [-6, 29], [-1, 20], [19, 41], [22, -18], [9, -19], [6, -4], [0, -17], [-3, -12], [-6, -6]], [[32848, 61966], [-4, -15], [-23, 28], [-7, 51], [1, 11], [3, 6], [9, -10], [12, -4], [8, -17], [1, -50]], [[94132, 20328], [-9, -23], [-3, 26], [17, 114], [17, 20], [-3, -60], [-19, -77]], [[90931, 26844], [-13, -59], [-21, 10], [-22, -10], [-13, 40], [0, 10], [16, -10], [6, 13], [4, 17], [5, 4], [4, 24], [14, 29], [8, 0], [9, -38], [3, -30]], [[90953, 26934], [-17, 0], [-7, 5], [-3, 29], [-11, 12], [6, 9], [2, 18], [7, 20], [13, -22], [10, -71]], [[91139, 27240], [-15, -5], [-6, 2], [1, 30], [-2, 13], [13, 27], [20, -13], [7, -20], [-19, -17], [1, -17]], [[90289, 28348], [32, -2], [18, 14], [16, -2], [19, -33], [22, -18], [16, 3], [13, -6], [12, -24], [30, -20], [14, -13], [11, -20], [13, -16], [81, -54], [57, -26], [71, 12], [21, 15], [21, 22], [17, -20], [17, -32], [-3, 34], [6, 30], [17, 23], [20, 15], [32, -2], [31, 7], [14, 13], [14, 2], [19, -17], [19, -9], [13, 22], [21, 51], [12, 18], [55, -16], [15, 0], [27, 53], [17, -1], [51, -42], [22, -53], [-3, -97], [2, -34], [4, -34], [2, -67], [-6, -67], [-1, -52], [3, -52], [-3, -98], [8, -64], [-4, -44], [0, -21], [7, -19], [4, -22], [-3, -28], [3, -32], [-3, -27], [-11, 4], [-4, 21], [2, 26], [-2, 22], [-6, 19], [-20, 22], [6, 13], [10, 12], [-7, 29], [-13, -24], [-8, -33], [5, -11], [-8, -9], [-17, -38], [-12, -51], [-5, -50], [1, -52], [-10, -40], [-14, -39], [-3, -49], [1, -91], [11, -83], [7, -113], [-10, -15], [-30, -7], [-14, -15], [-24, 57], [-15, 58], [11, 24], [24, -14], [8, 13], [2, 16], [-2, 15], [-30, 32], [-33, 15], [-11, -19], [4, -55], [-3, -13], [-24, -21], [-12, 80], [-31, 60], [1, -29], [13, -50], [-1, -21], [-5, -29], [-13, -10], [-5, -23], [0, -32], [-5, -51], [-20, -23], [-48, 57], [-4, -19], [1, -17], [25, -33], [-12, -25], [-8, -29], [-14, -76], [-23, -64], [-11, -4], [-37, 10], [-42, 54], [-38, -6], [-62, 4], [-40, -20], [-9, 59], [-8, 21], [3, 18], [32, 13], [33, -1], [-6, 23], [-8, 8], [-15, -5], [-41, 19], [-29, -8], [-19, 28], [-34, 96], [-20, 45], [-12, 18], [-13, 9], [-9, 14], [-61, 221], [-8, 51], [-11, 129], [48, -62], [18, -39], [9, -50], [16, 61], [-3, 19], [-43, 73], [-6, 21], [-2, 25], [-10, -25], [-17, -3], [7, 51], [-6, 51], [-51, 111], [-39, 105], [-38, 130], [-3, 16], [-1, 28], [-18, 87], [-10, 65], [-4, 56], [17, 114], [3, 64], [27, -29], [63, -37]], [[91176, 28504], [-14, -44], [-17, 28], [-2, 13], [21, 10], [7, -1], [5, -6]], [[90217, 28509], [-10, -47], [-11, 60], [12, 8], [9, 21], [2, -3], [-2, -39]], [[91201, 28624], [26, -34], [15, -38], [-20, -31], [-14, -6], [-9, 36], [-29, -13], [-31, 3], [-23, 27], [-3, 14], [14, 14], [38, -1], [36, 29]], [[91110, 28941], [50, -104], [25, -17], [8, -11], [-2, -45], [-11, -20], [20, -26], [-3, -17], [-4, 1], [-24, -35], [-29, -17], [-9, 12], [-8, 17], [-6, 23], [-37, 91], [4, 25], [-8, 38], [-18, -3], [-12, 23], [20, 22], [26, 61], [18, -18]], [[89979, 28734], [-8, -2], [-6, 32], [3, 47], [-14, 45], [8, 46], [-1, 50], [5, 22], [16, 24], [3, 43], [14, 2], [25, -33], [9, -85], [-4, -51], [9, -46], [-8, -40], [-21, -32], [-30, -22]], [[90364, 29671], [10, -28], [2, -11], [-24, 22], [-39, -5], [24, 40], [20, -8], [7, -10]], [[90412, 29749], [-42, -38], [-15, 17], [1, 29], [3, 13], [36, 2], [17, -23]], [[88220, 31256], [67, -14], [26, 21], [32, -17], [22, -56], [-16, -27], [-15, -4], [-49, 23], [-46, -18], [-13, -23], [-9, -51], [-40, -28], [-18, 31], [-48, 22], [-17, -32], [-34, 9], [-32, -14], [-43, 8], [-46, 57], [-14, 26], [11, 47], [16, 34], [126, 49], [67, 41], [55, -7], [15, -9], [14, -21], [-10, -38], [-1, -9]], [[92649, 36038], [-24, -158], [-7, 3], [-9, 24], [1, 91], [10, 58], [24, -10], [5, -8]], [[92622, 36108], [-6, -9], [-12, 55], [-4, 56], [5, 51], [14, 11], [10, -4], [-11, -94], [4, -66]], [[81439, 36835], [-7, -24], [-54, 180], [-15, 123], [10, 22], [10, 6], [32, -170], [10, -39], [0, -40], [4, -12], [10, -46]], [[92521, 37009], [-7, -16], [-13, 29], [-8, 102], [6, 59], [14, 55], [3, 30], [-6, 62], [42, 71], [10, 37], [4, 48], [-15, 52], [-12, 10], [10, 29], [12, 15], [9, 6], [7, -5], [5, -102], [17, -36], [-3, -50], [-58, -259], [-16, -97], [-1, -40]], [[91984, 38311], [10, -15], [8, 2], [8, -9], [-3, -38], [13, -42], [6, -30], [-10, -24], [-6, -8], [-15, 20], [-42, 121], [7, 41], [24, -18]], [[91809, 38984], [-8, -1], [-7, 10], [6, 23], [1, 32], [10, -10], [7, -45], [-9, -9]], [[91646, 39059], [-10, -18], [-6, 42], [1, 44], [10, 15], [5, -58], [0, -25]], [[82068, 39868], [-17, -45], [-19, 9], [-3, 23], [13, 37], [22, 45], [7, -28], [-3, -41]], [[91400, 40154], [-6, -6], [-10, 0], [-13, 11], [12, 74], [6, -39], [12, -32], [-1, -8]], [[91370, 40236], [-6, -3], [-7, 6], [5, 24], [7, 19], [10, 14], [-3, -52], [-6, -8]], [[90632, 41341], [6, -55], [12, -42], [-5, -28], [-7, -21], [-18, 19], [-12, 51], [-21, 41], [-5, 23], [25, -2], [12, 8], [5, 9], [8, -3]], [[88738, 41984], [-11, -10], [-3, 24], [14, 24], [9, 34], [19, -30], [3, -30], [-31, -12]], [[88751, 42296], [-21, -51], [-11, 7], [-10, -27], [-20, -13], [-12, 0], [-22, -13], [-4, 16], [4, 51], [19, 56], [18, 35], [46, 16], [36, 25], [4, -4], [26, -65], [-38, -8], [-15, -25]], [[88081, 42754], [-12, -27], [-15, 28], [-3, 29], [-12, 8], [6, 27], [6, 7], [6, 33], [16, -39], [1, -43], [7, -23]], [[87941, 42840], [-17, -2], [-4, 3], [-3, 25], [5, 23], [18, 6], [7, -6], [-6, -49]], [[88017, 42845], [-5, -4], [0, 48], [8, 24], [4, -50], [-7, -18]], [[84610, 42971], [-11, -17], [-10, 5], [0, 23], [-11, 24], [6, 28], [4, 14], [9, -2], [3, -23], [12, -26], [-2, -26]], [[84777, 43444], [-18, -36], [-12, 29], [7, 58], [12, 20], [10, -10], [-1, -45], [2, -16]], [[87975, 43891], [12, -24], [13, 2], [12, 53], [7, -8], [5, -13], [4, -23], [-17, -40], [-8, -6], [-7, -23], [-12, -73], [1, -24], [11, -25], [27, -22], [13, 10], [5, -3], [-5, -36], [-11, -27], [-36, 12], [-32, -4], [-52, 26], [-27, 3], [-8, 10], [16, 21], [10, 28], [-5, 67], [4, 84], [30, 41], [14, 42], [20, 26], [13, -3], [-2, -26], [5, -45]], [[87843, 43879], [-7, -6], [-25, 11], [0, 21], [3, 15], [7, 10], [16, 41], [11, -24], [5, -49], [-10, -19]], [[87871, 45159], [-44, -43], [24, 58], [51, 52], [8, 12], [-2, -25], [-26, -43], [-11, -11]], [[86238, 45115], [23, -14], [10, -19], [7, -21], [1, -25], [-29, -11], [-52, 37], [-51, -31], [-15, 0], [-10, 22], [8, 61], [19, -9], [16, 22], [-3, 67], [-9, 37], [27, 68], [12, 13], [12, 0], [11, -48], [2, -51], [13, -48], [8, -50]], [[86282, 45290], [37, -5], [45, 43], [21, -18], [9, 4], [33, 41], [21, 12], [15, 30], [14, -33], [32, -38], [11, -40], [13, -19], [5, -12], [-20, -42], [-3, -45], [-21, 3], [-25, -74], [-95, -124], [-85, 106], [-37, 71], [-24, 99], [-5, 82], [-10, 51], [4, 14], [5, 6], [7, -1], [25, -56], [12, -15], [16, -40]], [[87943, 45288], [-20, -35], [-1, 26], [10, 21], [25, 84], [11, 20], [6, 11], [5, 31], [1, 46], [14, 7], [-11, -105], [-40, -106]], [[86831, 45332], [-6, -9], [-22, 89], [6, 27], [-9, 46], [15, 5], [12, 34], [4, -16], [1, -63], [9, -36], [-10, -77]], [[89771, 44956], [-7, -69], [-14, -55], [-1, -32], [3, -45], [22, -33], [18, -21], [10, -58], [31, -81], [-1, -56], [16, -69], [16, -137], [4, -121], [16, -80], [-10, -172], [11, -70], [15, -58], [18, -116], [13, -106], [19, -30], [38, -36], [41, 40], [28, 53], [31, 13], [43, 28], [31, -71], [17, -80], [74, -104], [42, -68], [32, -37], [30, -50], [-3, -50], [-7, -39], [7, -61], [4, -71], [-6, -86], [22, -130], [7, -103], [23, -101], [-2, -104], [-4, -40], [-3, -58], [18, -72], [17, -54], [24, -58], [33, -89], [23, -17], [20, -2], [-3, -90], [41, -179], [22, -147], [-15, -197], [-14, -114], [3, -56], [53, -137], [30, -25], [-6, -65], [-4, -101], [24, -78], [27, -58], [30, -35], [29, -28], [38, -28], [48, -12], [25, -44], [13, -35], [39, -12], [17, 7], [22, 14], [14, -24], [11, -31], [21, -86], [44, -85], [30, -14], [18, -43], [24, -11], [22, -6], [30, -33], [49, -75], [45, -13], [20, -21], [44, -83], [17, -44], [18, -66], [-22, -6], [-21, 13], [-13, -64], [29, -90], [35, -63], [41, -67], [40, -94], [10, -72], [11, -29], [13, -101], [35, -59], [2, -108], [18, -149], [19, -135], [14, -40], [17, -65], [18, 8], [14, 21], [28, -64], [15, -28], [8, 16], [-17, 123], [11, 72], [10, 9], [16, 2], [18, -58], [26, -62], [47, -55], [38, -52], [11, 2], [-4, 40], [1, 59], [15, 9], [14, -29], [25, -91], [5, -188], [0, -158], [17, -162], [24, -43], [16, -40], [28, -54], [18, -51], [23, -23], [74, -108], [20, -13], [32, -2], [40, -49], [19, -45], [43, -169], [20, -59], [43, -59], [19, -19], [29, -40], [10, -59], [3, -34], [17, -63], [25, -75], [38, -41], [34, -91], [2, -148], [18, -73], [12, -32], [27, -30], [11, -24], [-23, -195], [22, -391], [-12, -122], [22, -121], [52, -210], [12, -74], [7, -87], [34, -111], [-2, -169], [13, -80], [-3, -105], [-40, -112], [-31, -139], [-1, -118], [-20, -228], [-14, -62], [-10, -95], [-43, -230], [-2, -90], [6, -108], [-7, -103], [-11, -71], [-10, -130], [-44, -202], [-63, -150], [-4, -114], [-8, -50], [-13, -62], [-39, -69], [-23, -29], [-9, -40], [-22, 0], [0, -13], [15, -12], [-7, -21], [-58, -36], [-40, -47], [-40, -113], [-17, -60], [-21, -57], [-13, -27], [-6, -28], [-8, -72], [-21, -13], [-18, -21], [8, -68], [-9, -78], [-3, -53], [-10, -34], [-11, 12], [-10, -5], [-12, -19], [19, -5], [11, -9], [-39, -76], [-36, -78], [-10, -51], [-15, -65], [-14, -144], [-11, -83], [8, -58], [-2, -11], [-8, -4], [-5, 7], [-17, -20], [-4, -20], [7, -25], [4, -8], [-2, -12], [-6, -13], [-16, 0], [-19, -21], [-53, -213], [-23, -57], [-27, -87], [-10, -79], [-8, -86], [-10, -145], [-9, -103], [-21, -99], [-7, -71], [-3, -135], [10, -103], [-7, -54], [0, -52], [-8, -49], [-34, -11], [-28, -40], [-40, -65], [-23, -24], [-51, -18], [-99, 8], [-189, -24], [-37, -15], [-70, -45], [-68, -70], [-66, -94], [-149, -256], [-117, -28], [-22, 0], [-18, 7], [-21, -16], [0, -32], [19, -33], [14, -31], [25, 43], [11, -12], [4, -79], [1, -50], [-8, -27], [-15, -20], [-17, 13], [-2, 27], [-22, 65], [-26, 57], [-25, 18], [-14, -19], [-23, -20], [-20, 72], [-20, 63], [-28, 7], [-24, -1], [-19, 27], [-39, 43], [8, 33], [10, 35], [22, 13], [-6, 48], [-12, 39], [-30, 10], [-21, -7], [-12, -30], [-16, -54], [-64, -67], [-32, 37], [-36, 55], [18, -4], [36, 2], [30, 49], [13, 31], [15, 66], [-19, 46], [-18, 34], [-26, 30], [-98, -102], [-21, -15], [-19, -20], [34, -17], [20, 5], [21, -30], [-34, -42], [-26, -12], [-34, -25], [-63, -66], [-80, -136], [-35, -39], [-41, -32], [-56, 37], [-31, 8], [-40, 56], [-67, 38], [-63, 74], [-44, 38], [-31, 8], [-43, -16], [-73, 67], [-56, 7], [-36, -67], [-29, 5], [-18, 9], [-59, 110], [-56, 55], [-107, 28], [-66, 76], [-49, 146], [-94, 168], [-25, 61], [-12, 60], [-1, 47], [13, 90], [17, 89], [3, 50], [-35, 167], [-50, 159], [-23, 49], [-62, 106], [-57, 79], [-15, 42], [-4, 21], [27, -10], [12, 32], [19, 11], [14, -43], [17, -8], [0, 72], [10, 35], [-7, 15], [-5, 14], [-25, 16], [-28, -24], [-21, -31], [-28, -26], [-11, -28], [-29, -1], [-12, -7], [-58, -53], [-36, -1], [-57, 18], [18, 73], [23, 43], [19, 50], [30, 173], [-5, 151], [-15, 61], [-48, 125], [-22, 76], [-27, 80], [-13, -46], [-8, -49], [-26, -70], [-13, -157], [-50, -239], [-35, -3], [-30, 10], [-52, -28], [-35, -33], [-32, 0], [-18, -10], [-23, 8], [37, 187], [31, -5], [35, 7], [15, -3], [23, 2], [18, 86], [11, 96], [-7, 62], [-3, 64], [7, 73], [3, 53], [43, 174], [37, 89], [42, 72], [-5, 68], [-14, 85], [-4, 65], [20, 20], [19, 41], [-22, 187], [-14, 55], [-22, 55], [0, -71], [2, -70], [-30, -89], [-40, -64], [-26, -60], [-25, -136], [-32, -115], [-30, -43], [-27, -9], [-27, -18], [-42, -45], [-42, -39], [-30, -50], [-26, -27], [-86, -230], [-40, -76], [-8, -31], [-16, -26], [3, -37], [13, -24], [13, -102], [-8, -22], [-14, 11], [-35, 57], [-22, -21], [-18, -23], [-46, 105], [-20, 24], [-24, 42], [-26, 36], [-11, 5], [-19, -8], [2, 28], [13, 23], [11, 6], [21, -34], [24, -30], [14, -2], [6, 12], [-23, 118], [-15, 104], [-7, 30], [-19, 106], [-9, 30], [-40, 74], [-43, 88], [-11, 104], [-16, 67], [-20, 42], [-31, 38], [-85, 14], [-35, 107], [-21, 133], [16, 9], [19, 2], [7, 41], [-5, 64], [-84, 78], [-40, 83], [-34, 35], [-31, 14], [-42, -3], [-53, 3], [-126, 131], [-30, 4], [-90, -41], [-31, 7], [-137, 179], [-91, 86], [-30, 15], [-39, 15], [-32, -21], [-22, -19], [-46, -22], [-182, 14], [-156, -28], [-105, -19], [-67, -24], [-112, -107], [-133, -103], [-108, -49], [-99, -65], [-66, -19], [-84, -8], [-179, 32], [-61, -24], [-97, -120], [-29, -29], [-55, -33], [-141, -155], [-65, -33], [-42, -11], [-36, -32], [-32, -66], [-45, -183], [-27, -86], [-61, -138], [-39, -46], [-40, 6], [-44, -48], [-38, 51], [-31, 9], [-50, -4], [-174, -58], [-25, 68], [-32, 10], [-60, -3], [-90, 20], [-164, -25], [-79, -28], [-31, -25], [-58, 16], [-99, -23], [-35, -38], [-26, -35], [-51, -154], [-56, -51], [-47, -1], [-51, -12], [-105, -148], [-106, -144], [-36, -15], [-40, -24], [-52, -12], [-26, -13], [-122, 37], [-77, 4], [-97, 22], [-83, 71], [-64, 40], [-73, 155], [-44, 58], [-80, 70], [-23, -2], [-19, -19], [-33, 49], [-1, 64], [-9, 54], [1, 142], [5, 167], [29, -38], [23, -36], [49, 2], [44, 62], [25, 92], [21, 103], [-3, 110], [-15, 193], [10, 41], [15, 16], [5, 96], [4, 296], [-11, 111], [-68, 226], [-45, 197], [-32, 88], [-28, 143], [-23, 198], [-7, 100], [-7, 185], [8, 105], [-4, 61], [-28, 167], [-64, 156], [-10, 58], [0, 61], [-15, 71], [-51, 143], [-52, 123], [-9, 60], [-10, 249], [-19, 114], [-89, 287], [-104, 248], [-29, 102], [-13, 34], [8, 4], [11, -13], [13, -25], [7, -2], [6, 21], [-1, 47], [4, 26], [9, -14], [11, -53], [33, -138], [10, -70], [42, -21], [13, 18], [15, 36], [5, 97], [-21, 44], [-20, 19], [-32, 72], [-21, 115], [-33, 107], [0, 38], [15, 28], [25, -15], [23, -62], [25, -57], [-4, -100], [-4, -27], [2, -23], [9, -22], [12, -17], [13, 25], [11, 58], [7, -7], [18, -133], [14, -36], [27, -42], [24, 32], [11, 28], [-4, 94], [7, 91], [-4, 67], [-61, 177], [-56, 218], [-34, 109], [-28, 164], [-18, 56], [-24, 92], [-1, 104], [2, 71], [19, 151], [18, 79], [56, 181], [3, 78], [0, 59], [8, 90], [0, 63], [-8, 59], [-23, 100], [31, 177], [45, 226], [18, 33], [28, 31], [5, -47], [-13, -157], [19, -81], [-6, -92], [18, 15], [27, 18], [21, 48], [11, 46], [51, 184], [30, 69], [41, 50], [85, 61], [81, 80], [39, 77], [49, 66], [34, 73], [32, 49], [166, 183], [28, 34], [36, 4], [44, -6], [40, 10], [43, -42], [31, -5], [77, 46], [41, 40], [71, 89], [31, 25], [72, 28], [82, 37], [98, 154], [70, -10], [63, -15], [51, 46], [119, 28], [66, 39], [124, 102], [33, 35], [50, 73], [44, 91], [43, 123], [27, 110], [11, 57], [26, 90], [17, 71], [14, 34], [48, 48], [71, 135], [23, 28], [4, 43], [-15, 24], [-19, 15], [-13, 143], [-12, 99], [-1, 69], [5, 66], [28, 103], [19, 44], [28, 51], [25, 16], [21, 45], [34, 44], [15, 45], [21, 91], [19, 69], [15, -3], [28, -160], [19, -85], [35, -100], [32, -148], [27, -67], [13, -44], [10, -20], [3, 28], [-3, 33], [13, 112], [-6, 79], [2, 31], [6, 12], [13, -8], [25, -44], [13, -16], [9, 3], [-1, 72], [13, 45], [-5, 31], [-22, -2], [-9, 39], [-18, 44], [-21, 32], [-24, 74], [-8, 28], [10, 14], [15, -2], [13, 31], [5, 42], [-11, 69], [12, 25], [22, -7], [36, -109], [16, 11], [13, 44], [23, 12], [24, -8], [15, -31], [32, -32], [42, 4], [22, -8], [45, 6], [22, -10], [-4, 17], [-25, 20], [-27, 4], [-32, -2], [-14, 21], [-5, 55], [8, 40], [5, 17], [21, -7], [19, 2], [2, 53], [7, 48], [11, 39], [0, 37], [-12, -10], [-28, -86], [-14, 70], [-20, 53], [4, 77], [12, 76], [18, 10], [16, -12], [23, 45], [13, 34], [-3, 28], [3, 21], [16, -6], [62, -69], [12, -36], [13, 14], [4, 39], [-1, 39], [-14, -5], [-32, 3], [-7, 22], [3, 19], [-15, 46], [21, 29], [17, 2], [13, 20], [0, 27], [4, 12], [10, -17], [32, -7], [31, -35], [15, -8], [6, 19], [2, 41], [-39, 41], [-1, 40], [-17, 47], [0, 45], [24, 39], [5, 37], [15, 15], [27, 0], [19, 32], [21, 11], [6, 70], [-1, 48], [9, 12], [21, -20], [-6, -55], [0, -53], [-6, -29], [8, 2], [5, 12], [9, 35], [22, -14], [6, -37], [3, -37], [11, -12], [15, 56], [21, 15], [-1, 71], [8, 51], [2, 38], [13, 19], [3, 40], [-10, 28], [-6, 51], [18, 11], [18, -25], [13, -64], [8, -29], [11, 16], [7, 42], [22, 25], [22, -34], [24, -48], [31, 42], [28, 77], [-5, 47], [4, 49], [35, 26], [29, -19], [25, -52], [54, -39], [46, -56], [20, -36], [40, -58], [25, -60], [34, -107], [82, -131], [5, -23], [-11, -43], [-10, -56], [-12, -95], [-3, -139], [12, 10], [12, 50], [13, -10], [14, -32], [2, 31], [-9, 18], [-15, 64], [0, 34], [12, 28], [19, 32], [20, 22], [13, 18], [2, 24], [18, 23], [28, 8], [16, -4], [118, -59], [29, -60], [3, -73], [11, -26], [7, 46], [-2, 100], [10, 20], [31, -15], [22, -20], [30, -66], [6, -32], [13, -21], [4, 30], [-6, 43], [-4, 50], [6, 43], [36, 3], [23, 10], [-11, 16], [-15, 6], [-25, 40], [-17, 42], [27, 42], [-1, 10], [-25, -1], [-34, 40], [-29, 56], [22, 103], [45, 101], [25, 34], [2, 34], [12, 62], [8, 53], [2, 42], [11, 43], [28, 41], [37, 15], [18, 16], [18, 38], [16, 46], [-34, 90], [3, 50], [6, 59], [42, 43], [22, 112], [15, 17], [33, -3], [13, 10], [-2, 89], [3, 35], [14, 14], [18, -12], [11, -39], [25, -36], [9, 20], [-4, 39], [-3, 51], [23, 11], [19, 3], [1, 41], [-3, 33], [8, 14], [48, 7], [13, 34], [7, 29], [6, -16], [8, -66], [27, -38], [80, -1], [45, 27], [19, -16], [30, -13], [32, 31], [20, 24], [33, -31], [11, -32], [8, 69], [20, 24], [20, 14], [26, -12], [10, 4], [-23, 51], [1, 46], [-1, 69], [4, 62], [8, 45], [-55, 91], [-55, 14], [-40, -19], [-17, 15], [-36, 72], [-34, 27], [-2, 18], [41, 52], [16, -9], [24, -49], [14, -17], [12, 4], [7, 38], [11, 20], [20, -12], [62, -82], [34, -80], [18, 21], [31, 45], [29, -9], [17, -27], [25, -97], [20, -48], [48, -13], [24, -19], [25, -32], [33, 3], [70, -12], [65, -62], [27, -39], [32, -11], [18, -15], [34, -5], [53, 44], [24, -40], [11, -28], [48, -52], [53, -16], [37, 53], [55, 39], [38, 60], [28, 29], [27, 49], [10, -2], [-22, -46], [-2, -26], [17, -11], [-2, -14], [-23, -35], [-29, -56], [1, -34], [11, -18], [13, 8], [18, 28], [23, 16], [19, -23], [7, -80], [14, -53], [30, -7], [19, 0], [19, 74], [-10, 63], [-12, 14], [6, 23], [48, 104], [27, -3], [19, -102], [31, -53], [32, 4], [17, -14], [14, -61], [-114, -251], [-5, -28], [15, -45], [6, -53], [-37, -128], [-14, -6], [-13, 35], [-19, 22], [-18, -16], [-18, -9], [-66, -71], [0, -183], [17, -109], [-10, -71], [-19, -126], [-22, -47], [-17, -30], [-57, -172], [-18, -41], [-19, -59], [6, -56], [7, -39], [22, -44], [83, -92], [38, -64], [66, -76], [15, -53], [9, -43], [47, -49], [34, -30], [10, 8], [7, 10], [8, 0], [9, -6], [-2, -38], [-3, -21], [3, -27], [24, -34], [38, 1], [22, 8], [25, -36], [22, -24], [36, -48], [63, -58], [49, -38], [58, -140], [44, -81], [49, -59], [72, -41], [33, 7], [54, -48], [53, -22], [28, -66], [9, -50], [3, -39], [26, -92], [54, -30], [69, -92], [57, -41], [14, -24], [25, -29], [48, -1], [84, 46], [38, 47], [51, 74], [23, 128], [14, 103], [71, 212], [20, 105], [18, 140], [15, 87], [-5, 95], [16, 172], [36, 237], [13, 79], [-7, 118], [-22, 220], [10, 77], [10, 106], [-16, 77], [-16, 53], [-2, 75], [17, 140], [15, 74], [16, 96], [-9, 182], [34, 63], [13, 32], [26, 0], [12, -14], [3, 36], [-10, 34], [-4, 39], [-8, 20], [-16, 7], [-13, 21], [-19, 22], [3, 81], [33, 156], [18, 60], [11, -25], [14, -20], [2, 45], [-5, 46], [25, 152], [27, 207], [8, 188], [44, 36], [23, 47], [13, 55], [25, 0], [17, -24], [-11, -41], [-4, -31], [47, -79], [16, -60], [7, -57], [9, -54], [4, -72], [0, -115], [6, -109], [17, -34], [15, -22], [22, -3], [31, -18]], [[89520, 45676], [-23, -33], [-15, 18], [-4, 36], [2, 16], [19, 28], [21, -65]], [[89538, 45972], [-17, -36], [-17, 11], [-6, 20], [6, 29], [23, 5], [11, -29]], [[89490, 45994], [-7, -16], [-12, 34], [14, 40], [12, -19], [-7, -39]], [[54709, 79837], [-2, -6], [-1, -21], [-11, -28], [-11, -35], [0, -32], [30, -109], [27, -66], [5, -25], [17, -19]], [[54763, 79496], [-17, -25], [-3, -36], [-10, -16], [-3, -20], [4, -19], [0, -24], [6, -32], [-26, -7], [-30, 1], [-11, -2], [-11, -9], [-10, 5], [-28, 30], [-16, 7], [-11, -2], [-8, -13], [-15, -17], [-13, -12], [3, -11], [58, -27], [10, -42], [-11, -34], [-4, -17], [-14, -13], [-16, -12], [-20, -3], [-2, -18], [7, -54], [-6, -12], [-6, -17], [6, -45], [12, -3], [3, -10], [-2, -18], [-3, -19], [-4, -21], [-2, -9], [-8, -5], [-26, 3], [-22, -18], [-44, -62]], [[54470, 78838], [-16, -11], [-17, -25], [1, -55], [-2, -5], [-4, -11], [-53, 19], [-2, 0], [-35, -7], [-24, -26], [-30, -14], [-62, 8], [-60, -10], [-14, -7], [-16, -5], [-14, -14], [-9, -21], [-14, -26], [-22, -21], [-23, -16], [-5, -13], [-8, -7], [-13, 10], [-10, -1], [-13, 7], [-42, 7], [-47, 12], [-22, 12], [-25, 9], [-27, 8], [-25, 2], [-12, 3]], [[53805, 78640], [-58, 20], [-39, 2], [-51, 8], [-100, 31], [-30, 12], [-28, 4], [-33, 11], [-25, 17], [-17, 33], [-17, 44], [-31, 57], [-7, 29], [10, 25], [10, 18], [-1, 9], [-8, 4], [-56, -25], [-54, -31], [-21, -1], [-20, 7], [-27, 1], [-27, -8], [-52, -5], [-31, -22], [-19, -45], [-11, -36], [-9, -11], [-18, -4], [-28, 3], [-19, 10], [-19, 31], [-31, 4], [-28, 1], [-7, 6]], [[52903, 78839], [1, 19], [-11, 38], [-19, 12], [-47, -71], [-13, -6], [-38, 19], [-33, 30], [-3, 22], [-6, 19], [-28, 17], [-34, 11], [-11, 0]], [[52661, 78949], [4, 11], [4, 18], [-3, 14], [-8, 15], [-4, 16], [-1, 16], [-3, 12], [-1, 12], [-3, 9]], [[52646, 79072], [23, 70], [4, 43], [-20, 26], [-8, 7]], [[52645, 79218], [7, 6], [28, -5], [18, 15], [10, 14], [25, -14], [36, -27], [18, -18], [7, -14], [4, -12], [-2, -20], [8, -8], [17, -3], [12, -6], [-4, -27], [-1, -22], [16, 3], [20, 17], [16, 30], [9, 30], [8, 71], [2, 6], [12, -6], [49, 4], [23, -14], [37, -2], [-1, -11], [7, -18], [16, -25], [8, -16], [17, -3], [26, 9], [15, 9], [6, -6], [24, 6], [21, 20], [5, 16], [22, 11], [28, 25], [40, 19], [130, 21], [5, 16], [-2, 36], [4, 5], [16, -9], [27, -8], [20, -13], [13, -17], [12, 0], [19, 11], [25, 8], [24, -17], [7, -19], [-4, -10], [0, -15], [8, -12], [19, -21], [25, -18], [13, 2], [4, 17], [5, 41], [2, 44], [-6, 25], [-13, 6], [-16, 2], [-9, 5], [3, 14], [13, 36], [0, 47], [-29, 55], [-25, 52], [0, 18], [15, 31], [23, 25], [51, 41], [17, 8], [20, 7], [30, 17], [15, 18], [9, 18], [14, 99], [4, 4], [4, 6], [52, -34], [5, 5], [9, 6], [17, 26], [3, 19], [0, 38], [2, 35], [3, 11]], [[53837, 79934], [8, -4], [22, -18], [18, -21], [17, -52], [39, -13], [49, -2], [18, 23], [16, 6], [18, -7], [38, -8], [5, 41], [22, 44], [10, 15], [28, -1], [7, 32], [6, 90], [6, 10], [21, -2], [20, -16], [6, -14], [11, 2], [14, 9], [16, 5], [26, -9], [55, -41], [28, -15], [18, 3], [16, -1], [65, -63], [45, -9], [41, 0], [13, 19], [18, 16], [18, -2], [16, -8], [31, -28], [14, -7], [19, -4], [14, -6], [13, -48], [7, -13]], [[62809, 74238], [-54, 17], [-96, 37], [-26, 20], [-25, 51], [-15, 25], [-23, 32], [-18, 12], [-13, 23], [-8, 33], [-12, 29], [-20, 35], [-45, 118], [-5, 13]], [[62449, 74683], [-10, 19], [-4, 11]], [[63492, 75947], [25, -34], [45, -90], [63, -147], [15, -42], [10, -48], [9, -59], [14, -52], [64, -130], [28, -48], [45, -63], [16, -14], [21, -3], [39, -1], [35, -24], [18, -17], [18, -25], [16, -28], [17, -77], [-62, 25], [-62, -4], [-36, -16], [-34, -22], [-32, -32], [-21, -62], [-17, -142], [-25, -134], [0, -61], [12, -59], [-2, -29], [-11, -12], [-15, -25], [-19, -122], [-10, -25], [-12, -15], [-3, 15], [0, 32], [-27, 28], [-14, -32], [-10, -67], [-20, -71], [-1, -13], [5, -219]], [[63574, 73983], [-8, 1], [-57, -22], [-12, 7], [-48, 101], [-10, 11], [-21, 4], [-13, 17], [-10, 27], [-5, 20], [-51, 55], [-7, 20], [-1, 17], [7, 16], [9, 14], [24, 13], [29, 12], [9, 8], [5, 15], [0, 23], [-5, 23], [-41, 42], [-5, 18], [-1, 22], [2, 23], [6, 18], [34, 25], [18, 25], [-11, 28], [-36, 65], [-43, 71], [-29, 1], [-33, -21], [-53, -61], [-30, -26], [-38, -43], [-42, -48], [-34, -50], [-21, -42], [-38, -18], [-19, -36], [-64, -105], [-18, 1]], [[62500, 75628], [60, 76], [17, 15], [40, -14], [81, -50], [-5, -28], [8, -16], [19, -22], [35, -21], [31, -12], [15, 10], [24, 8], [30, -25], [28, -32], [14, -13], [7, -3], [22, 10], [25, 41], [10, 50], [3, 23], [-15, 33], [-31, 36], [-34, 31], [-22, 28], [-14, 54], [-14, 6], [-4, 7], [-2, 19], [0, 26], [5, 20], [14, 8], [14, 3], [13, 19], [16, 38], [7, 20]], [[62897, 75973], [30, -12], [4, -33], [5, -7], [12, 4], [21, 14], [16, -11], [21, -40], [30, -42], [16, -28], [6, -19], [15, -19], [22, -23], [17, -34], [15, -81], [16, -19], [57, -31], [19, -6], [56, -11], [19, 8], [29, 69], [25, 72], [24, 15], [44, 35], [25, 33], [11, 35], [25, 67], [15, 38]], [[58487, 50460], [-6, -15], [-25, -108], [-5, -16], [2, -10], [11, -20], [-6, -34], [-3, -9], [-4, -32], [2, -29], [6, -11], [17, -14], [25, -10], [29, -24], [19, -5], [5, -17], [-1, -31], [5, -28], [0, -48], [-6, -43], [-30, -20], [-15, -22], [-5, -11], [4, -12], [2, -18], [-28, -42], [-29, -56], [-7, -37], [-6, -44], [-8, -29], [-23, -40], [-22, -82], [-11, -54], [-56, -128], [-49, -63], [-15, -22], [-87, 4]], [[58167, 49280], [-7, 86], [-13, 118], [-30, 106], [-3, 44], [1, 86], [0, 121], [-2, 64], [1, 48], [4, 82], [-1, 49], [-19, 56], [-25, 60], [-13, 30], [-1, 24], [0, 22]], [[58059, 50276], [4, 32], [10, 35], [10, 4], [27, -14], [27, -30], [15, -68], [11, -10], [21, 0], [52, 9], [13, -1], [24, 16], [23, 29], [7, 30], [5, 67], [5, 120], [12, 1], [33, -42], [7, -3], [7, 1], [12, 21], [14, 18], [10, -1], [38, 20], [21, -36], [13, -11], [7, -3]], [[51581, 81091], [0, 3], [38, 17], [17, -33], [28, -1]], [[51664, 81077], [4, -11], [31, -30], [10, -24], [23, -24], [-19, -29], [3, -14], [7, -13], [25, -8], [13, -19], [1, -30], [5, -48], [-52, -49], [-15, -53], [-1, -11]], [[51699, 80714], [-2, 2], [-6, 17], [-10, 0], [-21, 8], [-31, -49], [-14, -40], [-8, -30], [-12, -24], [-2, -25], [1, -11], [-4, -14], [0, -14], [17, -28], [5, -16], [21, -50], [-7, -19], [-5, -19], [-6, -15], [-7, -9]], [[51608, 80378], [-22, 1], [-28, -6], [-19, -10], [-10, 0], [-20, 25], [-22, 37], [-15, 18], [-6, 16], [-18, 6], [-25, 19], [-18, 20], [-15, 13], [-21, 6], [-17, -1], [-6, 34], [-2, 39], [-14, 26], [20, 102], [-12, 10], [-13, -8], [-18, -25], [-9, -29], [-5, -25], [-31, -24], [-49, -9], [-53, 9], [-8, 6], [-3, 7], [0, 9], [3, 14], [10, 17], [2, 24], [-10, 20], [-6, 8], [3, 20], [7, 25], [1, 14], [-36, 44], [-26, 8], [-26, 1], [-19, 5], [-11, -2], [-8, -12], [-9, -9], [-6, 11], [-11, 76], [-9, 11], [-33, 13], [-44, 5], [-12, 14], [-7, 34], [-4, 41], [-15, 40], [-7, 10], [-13, 17], [-24, -7], [-28, -23], [-16, -6], [-7, -3], [-22, 23], [-25, 35], [-20, 37], [-5, 21], [6, 25], [-7, 19], [-11, 35], [-3, 27]], [[50701, 81276], [121, 97], [73, 50], [35, 15]], [[50930, 81438], [8, -50], [7, -16], [8, -10], [11, -2], [12, 12], [18, 13], [28, -6], [21, -12], [7, -12], [14, -12], [19, -3], [39, 23], [37, 34], [10, 24], [4, 22]], [[51173, 81443], [22, -14], [19, -3], [9, 6], [-6, 35], [16, 18], [17, 9], [8, -15], [16, -15], [13, -1], [34, 40], [7, -8], [8, -14], [1, -11], [2, -12], [7, -5], [27, 2], [13, 22], [11, 14], [8, -10], [4, -26], [7, -35], [32, -39], [27, -11], [33, 8], [13, 7], [9, -6], [8, -21], [19, -23], [40, -17], [13, -9], [8, -16], [-2, -23], [-19, -56], [-3, -17], [3, -5], [-4, -11], [-25, -37], [-2, -14], [8, -21], [7, -18]], [[50998, 58580], [-11, -37], [-18, -76], [-1, -60], [42, -126], [5, -13], [11, -20], [6, -23], [5, -62], [3, -70], [3, -47], [20, -66], [2, -27], [-14, -99], [-4, -10], [-3, -3], [-22, 8], [-10, -10], [-11, -34], [-8, -34], [0, -13], [19, -63], [-12, -89], [-12, -56], [-23, -32], [-20, -8], [-14, -15], [-8, -20], [1, -64], [-29, -58], [-16, -41], [-8, -25], [3, -75], [-10, -77], [-19, -60], [-40, -13], [-35, -7], [-11, -153], [0, -97], [-3, -100], [-6, -40], [3, -57], [-3, -128], [-4, -102], [6, -27], [3, -60], [0, -61], [9, -43], [9, -37], [0, -20], [-5, -12], [-4, -16], [0, -145], [1, -43], [-2, -28], [-8, -22], [3, -74], [6, -47], [6, -34], [-6, -29], [-5, -38], [-7, -97], [-1, -33]], [[50751, 55512], [-116, -24], [-130, -39], [-55, -25]], [[50450, 55424], [-3, 19], [46, 26], [-9, 75], [-29, 90], [-11, 16], [-6, 45], [7, 29], [-4, 20], [-2, 60], [-14, 67], [26, 2], [0, 215], [0, 205], [0, 175], [0, 139], [-5, 166], [-1, 122], [-1, 161], [-9, 50], [-40, 85], [-11, 44], [-1, 59], [-9, 60], [-1, 105], [0, 123], [-4, 19], [-43, 59], [-60, 82], [-46, 64], [-4, 4], [-4, 16], [6, 186], [10, 25], [14, 76], [8, 62]], [[50250, 58175], [6, 0], [10, 20], [7, 30], [8, -7], [14, -5], [6, 10], [-1, 23], [4, 23], [11, 10], [3, 21], [0, 24], [9, 6], [15, -1], [13, 8], [10, 12], [14, 48], [7, 17], [2, 12], [8, 11], [21, 4], [16, -3], [11, -28], [71, 24], [35, -14], [69, 121], [16, 36], [21, 86], [7, 33]], [[50663, 58696], [7, 59], [-14, 109], [1, 19], [28, 23], [36, 19], [14, 1], [9, 9], [13, 24], [22, 17], [12, -6], [8, -3], [75, -144], [33, -73], [9, -37], [17, -27], [25, -16], [23, -37], [17, -53]], [[50060, 60432], [-4, -27], [0, -47], [-5, -75], [-6, -89], [24, -59], [29, -62], [8, -24], [-8, -62], [5, -36], [16, -60], [26, -76], [26, -79], [19, -10], [17, -6], [11, -14], [15, -14], [16, -9], [13, -17], [9, -17], [11, -48], [30, -32], [21, -32], [-8, -16], [-26, 6], [-25, 14], [-3, -23], [-1, -89], [4, -74], [5, -10], [25, -13], [59, -96], [53, -91], [18, -24], [30, -9], [33, -4], [14, 9], [32, 46], [17, 5], [16, -2], [8, -7], [15, -37], [15, -57], [4, -41], [-1, -23], [-5, -8], [-27, -11], [-11, -9], [-3, -12], [4, -28], [5, -18], [29, -81], [41, -110], [13, -28]], [[50250, 58175], [-72, -6], [-26, -16], [-16, 0], [0, 13], [-2, 8], [-90, 45], [-64, 27]], [[49980, 58246], [-64, 29], [-3, -27], [-10, -18], [-13, -2], [-10, 5], [-6, -22], [-11, -28], [-15, -13], [-15, -18], [-8, -15], [-6, 0], [-14, 36], [-20, 3], [-36, -6], [-17, 10], [-22, 5], [-53, -8], [-84, 15], [-14, -8], [-4, -6], [-83, -2], [-92, -2], [-77, -1], [-68, -2], [0, 6], [-22, 1], [-2, -12], [-19, -144], [-2, -78], [10, -48], [11, -31], [13, -13], [1, -17], [-10, -23], [1, -23], [12, -24], [3, -25], [-6, -26], [1, -63], [9, -100], [1, -65], [-9, -29], [4, -51], [17, -71], [3, -31]], [[49251, 57304], [-6, -14], [-14, -18], [-14, 0], [-16, 44], [-7, 19], [-13, 44], [-12, 44], [-15, 19], [-14, 18], [-18, 56], [-18, 27], [-18, -8], [-27, 11], [-54, 13], [-58, -4], [-25, -13], [-23, -20], [-61, -45], [-24, -22], [-18, -56], [-20, 1], [-21, 18], [-13, 26], [-27, -6], [-27, 25], [-26, 48], [-19, 17], [-24, 35], [-7, 67], [-15, 47], [-14, 65], [-21, 30], [-24, 15], [-34, -3], [-22, 26], [-17, 38]], [[48465, 57848], [5, 33], [8, 48], [0, 45], [6, 73], [-4, 92], [-6, 64], [19, 27], [21, 24], [13, 44], [14, 97], [6, 85], [-4, 31], [-7, 25], [-6, 37], [-3, 44], [4, 39], [16, 36], [20, 30], [14, 14], [38, 15], [48, 23], [27, 25], [20, 25], [11, 20], [12, 42], [18, 31], [14, 33], [2, 89], [0, 51], [-10, 28], [-6, 24], [70, 70], [1, 50], [-10, 55], [-14, 44], [-5, 39], [20, 45], [17, 34], [12, 28], [28, 44], [29, 12], [26, -17], [77, -103], [14, -7], [16, 8], [20, 27], [26, 22], [10, 69], [-1, 102], [6, 46], [14, 9], [44, -20], [12, -1], [13, 7], [9, 18], [0, 32], [-2, 29], [14, 95], [27, 71], [53, 88], [17, 18], [19, 9], [95, -61], [16, 15], [23, 151], [26, 14], [31, 3], [21, 13], [10, 11], [46, 57], [80, 78], [43, 33], [8, 13], [31, 55], [41, 64], [26, 12], [36, 5], [23, -10], [6, -18], [8, -10], [47, 27], [68, -43], [58, -42]], [[75541, 64232], [-17, -3], [-8, 17], [4, 24], [-5, 78], [14, 8], [7, -1], [5, -22], [3, -42], [-3, -59]], [[75520, 64419], [-10, -47], [-5, 34], [4, 43], [4, 24], [3, 0], [6, -25], [-2, -29]], [[75319, 64616], [-30, -40], [10, 239], [22, -89], [6, -48], [-8, -62]], [[75432, 64736], [-13, -17], [-12, 14], [-16, 56], [8, 71], [5, 11], [7, -23], [11, -50], [7, -38], [3, -24]], [[75215, 64567], [-48, -20], [-25, 6], [46, 151], [-1, 68], [-7, 55], [-24, 44], [-1, 32], [-11, 43], [-5, 51], [26, 16], [21, -29], [3, -16], [4, -42], [11, -43], [36, -88], [0, -55], [-10, -132], [-15, -41]], [[75178, 65070], [4, -25], [-15, 15], [-12, 17], [-7, 23], [12, 12], [18, -42]], [[75714, 64503], [3, -22], [0, -191], [3, -81], [8, -68], [2, -25], [-9, -21], [-8, -4], [-8, 33], [-19, 24], [-28, 27], [-11, 18], [-15, -7], [-19, -40], [-8, -38], [3, -52], [6, -52], [14, -29], [1, -33], [5, -42], [7, -39], [4, -42]], [[75645, 63819], [-5, 0], [-16, 53], [-15, 58], [-39, 110], [-12, 197], [-1, 97], [-26, 114], [-18, 158], [-7, 41], [9, 51], [2, 19], [-5, -4], [-14, -26], [-17, 63], [-11, 56], [-46, 117], [-13, 52], [-1, 50], [-19, -50], [-27, -36], [-27, -54], [-18, -16], [-57, -10], [-33, 72], [-47, 175], [-7, 40], [6, 103], [-11, 97], [0, 52], [-3, 34], [-8, -8], [-4, -23], [2, -36], [-3, -31], [-41, 6], [-39, 14], [34, -51], [36, -12], [19, -46], [3, -36], [-1, -40], [-19, -29], [-17, -17], [3, -39], [21, -47], [-26, -14], [-6, -31], [-1, -43], [13, -39], [5, -29], [-3, -26], [12, -29], [18, -60], [5, -42], [-7, -60], [-10, -23], [-16, -23], [-39, -75], [-19, -86], [-16, -40], [-20, -7], [-7, 18], [-17, 22], [0, 42], [5, 33], [33, 81], [-18, -11], [-21, -23], [-31, -43], [-11, 53], [-6, 50], [0, 61], [25, 91], [-29, -45], [-8, -57], [4, -67], [-4, -47], [-11, -62], [-15, -37], [-25, -24], [-11, -37], [-17, -27], [0, 54], [-5, 71], [-18, 168], [-4, -36], [9, -104], [0, -68], [-14, -54], [-27, -57], [-21, -8], [-12, 8], [-19, 36], [-20, 51], [-4, 82], [-8, 45]], [[74736, 64569], [1, 54], [-2, 51], [-21, 136], [-15, 69], [2, 23], [-1, 9], [-6, 90], [-9, 55], [-5, 59], [22, 84], [-9, 14], [-25, 11], [-23, 14], [-6, 22], [10, 83], [-12, 32], [-17, 33], [-5, 13], [-6, 17], [-8, 42], [16, 87], [21, 102], [4, 39], [4, 67], [1, 26], [-2, 25], [-23, 29], [-40, 12], [-28, 25], [-17, 37], [-14, 15], [-17, -11], [-22, 14], [-18, 37], [-16, 45], [2, 21], [4, 28], [29, 116], [11, 4], [25, -22], [10, -1], [16, 46], [23, 131], [33, 0], [29, -5], [19, -6], [20, 4], [20, 11], [11, 16], [6, 21], [-2, 18], [-25, 25], [-9, 18], [-7, 52], [-8, 20], [-48, 3], [-26, 24], [-14, 21], [-24, 72], [-31, 52], [-29, 13], [-12, 17], [-6, 27], [4, 39], [9, 36], [6, 40], [23, 52], [27, 46], [13, 31], [17, 33], [2, 19], [-3, 20], [-14, 20], [-10, 7], [-1, 12], [6, 35], [14, 4], [28, -31], [28, -50], [17, -45], [0, -35], [11, -6], [11, -1], [19, -16], [19, 5], [12, -9], [8, 3], [3, 20], [-9, 30], [-7, 22], [8, 21], [9, 4], [10, -5], [13, -19], [10, -40], [2, -61], [21, -55], [29, -40], [22, -18], [27, -13], [23, 13], [12, 38], [-5, 35], [3, 31], [9, 17], [15, -1], [11, -25], [31, -132], [-6, -59], [7, -161], [-8, -106], [1, -23], [4, -18], [5, -7], [9, 0], [38, -20], [32, -22], [37, -20], [52, -16], [32, 6], [17, 0], [32, -5], [86, 9], [70, 2], [29, -15], [23, -6], [79, 11], [80, 5], [43, -34], [47, -55], [26, -41], [5, -23], [-3, -20], [-9, -11], [-16, -1], [-37, 27], [-7, -8], [1, -55], [-1, -8], [-8, -49], [-23, -111], [-4, -49], [-5, -13], [-5, -7], [-18, -2], [-14, -8], [-5, -18], [-9, -37], [-6, -38], [-9, -12], [-20, 21], [-13, -3], [-16, -9], [-16, -21], [-11, -27], [-13, -9], [-37, 5], [-7, -4], [-5, -19], [-4, -24], [-29, -56], [-11, -91], [-8, -59], [1, -46], [25, -119], [17, -155], [6, -16], [6, -5], [2, 3], [0, 33], [1, 39], [8, 9], [10, -8], [10, -34], [11, -62], [12, -24], [18, -7], [21, 14], [16, 28], [6, 31], [-4, 59], [-1, 45], [9, 42], [36, 64], [6, 19], [-3, 54], [0, 51], [14, 3], [18, -8], [23, 25], [7, 0], [10, -26], [16, 4], [12, -110], [13, -97], [0, -47], [2, -99], [5, -81], [9, -19], [10, -43], [10, -51], [7, -28], [5, -92], [7, -66], [8, -209], [3, -40]], [[57940, 77040], [-7, -139], [-27, -65], [-40, 22], [-52, -18], [-27, -73], [-16, -22], [-14, -26], [-9, -95], [-2, -156], [-19, -19], [-18, -6], [-75, -137], [43, -39], [19, -29], [32, -82], [44, -93], [9, -45]], [[57781, 76018], [-37, 10], [-13, -3], [-9, -14], [-17, 3], [-22, 0], [-22, -17], [-13, -6], [-17, 15], [-31, 45], [-19, 31], [-14, 8], [-14, -9], [-50, -11], [-12, -18], [-24, -21], [-23, -9], [-34, -7], [-17, 1], [-10, -10], [-9, -29], [-5, -29], [-5, -12], [-42, -14], [-9, -17], [-3, -16], [1, -16]], [[57311, 75873], [-34, 16], [-26, -11], [-6, -12], [-5, -18], [3, -19], [10, -19], [9, -49], [3, -50], [-6, -29], [-19, -20], [-40, -22], [-38, 10], [-17, -8], [-28, -3], [-27, -6], [-40, -21], [-36, -12], [-33, 42], [-39, 28], [-41, 17], [-14, -12], [-6, -10], [-34, 37], [-15, 13], [-8, 14], [-14, 49], [-8, 2], [-28, -18], [-27, 1], [-17, 3], [-48, -2], [-7, -34], [-6, -5], [-10, -4], [-26, 2], [-33, -25], [-35, -15], [-28, -1], [-28, 8], [-17, -5], [-37, -3], [-23, -36], [-37, 2], [-30, 6]], [[56365, 75654], [4, 11], [6, 144], [15, 64], [-1, 13], [-3, 10], [-13, 11], [-10, 34], [-20, 91], [-11, 19], [-32, 19], [-28, 27], [-23, 34], [-43, 86]], [[56206, 76217], [22, 9], [6, 17], [22, 47], [2, 23], [-2, 13], [-14, 23], [-10, 50], [7, 46], [1, 24], [-7, 23], [7, 29], [16, 16], [10, 5], [41, 3], [26, 59], [16, 19], [16, 33], [7, 12], [7, 26], [3, 26], [-33, 38], [-11, 27], [-14, 31], [-20, 21], [-39, 37], [-16, 37], [-7, 48], [-10, 37], [-12, 23], [-2, 20], [-5, 23], [-1, 47], [9, 62], [6, 21], [14, 7], [36, 33], [1, 42], [7, 26], [11, 15], [10, 10]], [[56306, 77325], [20, -24], [47, -39], [23, -29], [-1, -18], [-11, -17], [-20, -17], [-12, -23], [-4, -28], [4, -20], [14, -17], [85, 23], [86, -12], [115, -39], [77, -13], [57, 18], [105, -32], [97, -30], [94, -9], [52, 23], [37, 32], [32, 60], [79, 78], [76, 45], [99, 35], [67, 13], [9, -13], [85, -72], [37, 0], [31, -13], [11, -19], [8, -5], [40, 18], [18, -40], [28, -55], [48, -29], [42, -16], [14, -2], [45, 1]], [[64057, 66752], [-9, -44], [-9, 16], [-21, 76], [6, 53], [-10, 76], [5, 22], [26, 11], [6, -4], [-8, -24], [15, -43], [2, -70], [-3, -69]], [[29714, 64050], [-8, -42], [-30, -81], [-65, -20], [-73, -4], [-5, 22], [-2, 20], [5, 30], [0, 12], [-3, 12], [26, 13], [18, 37], [27, 7], [34, -27], [19, -1], [27, 29], [22, 63], [13, -8], [-5, -62]], [[29745, 64231], [-37, -28], [-3, 33], [18, 27], [22, -32]], [[29711, 64763], [17, -9], [9, 1], [32, -17], [19, -24], [4, -10], [-10, -21], [-29, 40], [-26, 5], [-36, -1], [-14, 8], [10, 43], [24, -15]], [[29387, 64639], [-20, -18], [5, 30], [37, 51], [21, 44], [11, 16], [5, 12], [16, 17], [8, 28], [-2, 24], [-17, 38], [0, 27], [6, 20], [29, 9], [-8, -29], [12, -82], [-39, -103], [-33, -31], [-31, -53]], [[29428, 64932], [6, -10], [-17, -23], [-40, 28], [-9, -2], [-8, 31], [-3, 22], [2, 21], [24, -16], [12, -30], [33, -21]], [[29211, 65031], [-2, -15], [-35, 115], [-44, 28], [-26, 28], [6, 15], [17, 7], [3, 37], [-7, 39], [-24, 80], [-13, 54], [-6, 12], [-1, 45], [27, -70], [12, -62], [18, -61], [13, -105], [35, -36], [25, -51], [2, -60]], [[28982, 65351], [-12, -4], [-21, 16], [-48, 70], [-23, 6], [8, 39], [17, -14], [39, -60], [15, -30], [25, -23]], [[29325, 65707], [-22, -63], [-12, 6], [7, 78], [15, 12], [6, 0], [6, -33]], [[28428, 65811], [1, -13], [-28, -36], [20, -26], [19, 56], [15, -46], [8, -86], [-1, -15], [1, -12], [3, -17], [1, -24], [-16, -75], [-54, 8], [-2, 63], [-8, 12], [-13, 91], [-17, 29], [-24, 74], [14, 19], [18, -6], [10, 9], [25, 7], [16, 10], [12, -22]], [[29081, 65783], [2, -30], [-19, 6], [-28, -11], [-9, 0], [6, 20], [19, 27], [1, 26], [-24, 37], [-27, 92], [-13, 22], [-6, 35], [-23, 38], [5, 20], [4, 4], [16, -9], [35, -134], [2, -12], [59, -131]], [[28514, 66252], [-31, -12], [-23, 11], [-5, 10], [9, 16], [21, 13], [34, 1], [15, -15], [2, -7], [-22, -17]], [[28404, 66075], [0, -70], [3, -52], [-3, -19], [-30, -34], [-8, -20], [-28, -20], [-17, -27], [-9, 45], [-17, 27], [-2, 47], [-13, -16], [-19, 10], [-30, 35], [-19, 48], [27, 8], [5, -30], [22, 37], [-5, 19], [-4, 3], [-7, 36], [32, 94], [7, 60], [-15, 98], [14, 6], [36, -34], [16, -34], [0, -46], [16, -35], [21, -86], [27, -50]], [[28708, 66524], [46, -65], [39, -24], [42, -82], [18, -29], [4, -26], [-7, -120], [-10, -73], [2, -63], [-10, 18], [-10, 42], [-17, 24], [-5, 13], [29, 2], [3, 66], [14, 51], [-2, 54], [-34, 59], [-24, 53], [-36, 16], [-34, 52], [-20, 7], [-24, -10], [9, 31], [6, 41], [4, 8], [17, -45]], [[28196, 67240], [34, -18], [18, 2], [11, 12], [49, -5], [41, 17], [6, -30], [-1, -16], [-86, -15], [-78, -45], [-43, -31], [-21, -3], [-15, 16], [-52, 93], [14, -10], [38, -52], [24, 10], [22, 34], [4, 26], [-4, 13], [10, 41], [29, -39]], [[28548, 66764], [-6, -5], [-24, 58], [-19, 17], [30, 41], [13, 35], [0, 76], [7, 42], [-2, 36], [7, 37], [-9, 42], [-26, 33], [-50, 131], [-79, 32], [-41, 1], [22, 21], [21, -2], [32, -13], [39, -6], [23, -39], [22, -51], [21, -20], [8, -14], [-1, -14], [3, -14], [27, -24], [26, -39], [8, -113], [-36, -54], [-6, -164], [-10, -30]], [[55279, 77689], [10, 1], [25, 16], [29, 9], [21, -10], [10, -9], [2, -13], [-6, -45], [-12, -48], [-19, -51], [-20, -47], [-5, -25], [-1, -40], [-3, -31], [3, -18], [6, -16], [23, -12], [29, -32], [26, -41], [32, -46], [10, -18], [0, -18], [-9, -14], [-28, -5], [-29, 4], [-11, 4], [-10, -5], [-7, -11], [4, -12], [29, -57], [35, -82], [2, -35], [-4, -27], [-8, -19], [-15, 3], [-11, 15], [-16, -1], [-13, -4], [-17, -30]], [[55331, 76919], [-8, 2], [-14, -5], [-10, -6], [-14, 9], [-15, 6], [-6, -9], [-3, -18], [9, -31], [17, -49], [-2, -37], [-14, -4], [-12, 31], [-11, 5], [-12, -1], [-28, -36], [-21, -31], [-5, -21], [-8, -23], [-2, -17], [1, -56], [-38, -9], [-8, -8], [-4, -17], [3, -72], [3, -38], [21, -60], [1, -18], [-3, -13], [-15, -23], [-7, -9], [-5, -2]], [[55121, 76359], [-25, 15], [-12, 7], [-50, 53], [-22, 29], [-35, 38], [-22, 22], [-11, 33], [-17, 7], [-20, -10]], [[54907, 76553], [-23, 24]], [[54884, 76577], [16, 12], [4, 12], [-2, 15], [-7, 21], [-62, 90], [-30, 61], [-5, 22], [0, 59], [-7, 14], [-46, 27], [-51, 76], [-52, 75], [-7, 21], [-27, 56], [-33, 52], [-26, 33], [-22, 37], [-24, 52], [-12, 79], [-11, 70], [-7, 27], [-15, 10], [-47, 83], [-40, 48], [0, 53], [7, 87], [7, 98], [10, 14], [18, 8], [21, -3], [18, -13], [36, -67], [20, -26], [17, -11], [20, 29], [25, 60], [21, 31], [73, -11], [35, 46], [58, -61], [23, -9], [14, 8], [18, -3], [40, -18], [9, -7], [12, 1], [30, 23], [10, -3], [34, -46], [18, 0], [20, 20], [13, 17], [40, -13], [22, 8], [19, 1], [20, -8], [18, -11], [18, -9], [49, -5], [23, -29], [9, -29], [0, -17], [2, -19], [14, -18], [29, -10], [18, 2]], [[32546, 62140], [-4, -1], [-3, 5], [-3, 9], [-2, 8], [1, 6], [2, -3], [18, -5], [-2, -7], [-3, -7], [-4, -5]], [[57818, 84183], [38, -50], [9, -2], [21, 20], [4, 1], [44, 2], [20, -18], [15, -34], [14, -27], [15, -7], [42, 34], [24, 11], [15, 0], [55, -31], [25, -17], [6, -15], [1, -18], [-7, -27], [-6, -29], [17, -34], [19, -23], [41, 38], [15, 11], [17, 0], [22, 15], [16, 21], [15, 8], [30, -6], [53, 5], [61, -33], [6, -11], [31, -39], [11, -20], [10, -6], [16, -19], [22, -12], [16, 4], [7, -7], [7, -15], [0, -26], [-2, -73], [-11, -22], [-11, -17], [-3, -14], [1, -16], [17, -32], [23, -49], [5, -29], [0, -21], [-30, -64], [-11, -14], [-7, -32], [-4, -31], [3, -13], [51, -51], [38, -27], [9, -13], [1, -9], [-21, -54], [-2, -14], [31, -23], [17, -35], [15, -57], [29, -56], [62, -48], [46, -32], [9, -15], [3, -17], [-3, -38], [-12, -46], [-8, -26], [19, -10], [47, 3], [58, -9], [69, -51], [1, -23], [-8, -21], [5, -22], [8, -18], [60, -57], [6, -17], [1, -28], [-2, -20], [-17, -4], [-18, -10], [-30, -24], [-12, -34], [-49, -48], [-30, -21], [-24, -1], [-57, 10], [-21, 23], [-8, 22], [-22, 9], [-29, 1], [-40, -4], [-9, -6], [-6, -26], [-17, -45], [-13, -26], [11, -15], [16, -33], [25, -41], [25, -37], [8, -22], [0, -16], [-12, -19], [2, -38], [25, -50], [-9, -8], [-2, -61], [0, -66], [7, -15], [13, -13], [11, -24], [19, -55], [2, -14]], [[58823, 81855], [-53, 4], [-63, -2], [-36, -32], [-14, 8], [-24, 8], [-28, -18], [-37, -54], [-25, -33], [-25, -47], [-8, -25], [-15, -47], [-14, -53], [8, -37], [11, -35], [3, -37], [5, -30], [-15, -21], [-9, -31], [-26, 5], [-33, 30], [-6, 43], [-25, 29], [-17, 16], [-27, 2], [-43, -14], [-56, -10], [-42, -3], [-24, -15], [-34, -15], [-13, 17], [-19, 49], [-16, 48], [-10, 21], [-10, 6], [-11, -1], [-13, -16], [-10, -15], [-14, -6], [-22, -12], [-15, -18], [-18, -44], [-11, 3], [-12, 10], [-13, 50], [-19, 11], [-30, 1], [-37, 11], [-30, 15], [-11, -4], [-18, -21], [-19, -3], [-42, 19], [-8, -9], [-11, -28], [-14, -27], [-11, -2], [-7, 7], [4, 47], [-25, 17], [-41, 3], [-29, -7], [-14, 2], [-8, 9], [-35, 80], [-19, 5], [-34, -4], [-50, 9], [-57, 18], [-31, 7], [-17, 18], [-35, 6], [-95, 34], [-39, 6], [-57, 0], [-87, 8], [-56, -5], [-25, -11], [-30, -7], [-51, -6], [-20, 1], [-32, -4], [-37, -9], [-11, -17], [-12, -36], [-43, -64], [-41, -42], [-7, -4], [-25, 23], [-20, 7], [-23, 3], [-17, -7], [-11, -11], [2, -49], [-3, -4]], [[56556, 81519], [-18, 58], [2, 53], [10, 30], [12, 27], [-5, 40], [12, 54], [1, 39], [-6, 17], [-10, 19], [-26, 21], [-12, 17], [-37, 23], [-36, 27], [-6, 18], [2, 11], [6, 18], [28, 52], [29, 51], [20, 20], [101, 65], [16, 23], [4, 38], [0, 28], [-2, 50], [-6, 70], [-8, 49], [-19, 92], [-53, 189], [-32, 196]], [[56523, 82914], [21, -12], [48, -4], [39, 14], [20, 1], [17, -4], [27, 8], [24, 3], [13, -18], [22, -15], [45, 22], [40, 28], [40, -3], [6, 14], [10, 69], [13, 15], [49, -7], [18, 13], [19, 34], [29, 21], [24, 0], [25, 24], [12, -16], [6, -29], [-8, -22], [4, -9], [17, -12], [30, 0], [19, 10], [4, 13], [0, 24], [-4, 22], [-13, 19], [-24, 10], [-16, 1], [-3, 12], [6, 26], [14, 48], [18, 43], [11, 17], [2, 15], [-2, 26], [0, 47], [16, 67], [22, 49], [29, 16], [35, 9], [23, 23], [12, 28], [4, 23], [5, 19], [12, 9], [86, -5], [13, 42], [7, 12], [17, 13], [11, 15], [-4, 12], [-22, 7], [-52, 7], [-10, 14], [3, 17], [14, 44], [13, 56], [7, 44], [1, 26]], [[57387, 83909], [7, 7], [42, 8], [14, 9], [36, 60], [28, 10], [71, -15], [33, 1], [9, -2], [33, -2], [3, 6], [15, 59], [14, 17], [56, 78], [38, 32], [24, 8], [8, -2]], [[25596, 61879], [-21, -81], [-2, 23], [9, 60], [12, 21], [8, 22], [2, 26], [10, -13], [-3, -25], [-15, -33]], [[25569, 62168], [-13, -11], [11, 34], [1, 21], [16, 89], [10, -1], [3, -8], [-28, -124]], [[25307, 60996], [-12, 0], [-49, 6], [-33, -7], [-1, 3], [2, 143], [5, 222], [3, 162], [3, 159], [2, 119], [3, 162], [3, 140]], [[25233, 62105], [-1, 50], [8, 39], [24, 17], [29, -34], [13, -15], [11, 8], [14, 21], [18, 62], [43, 126], [18, 89], [17, 18], [25, 3], [21, -6]], [[25473, 62483], [-15, -65], [15, -9], [14, 7], [32, -3], [13, -71], [-4, -61], [-30, -158], [-4, -55], [-14, -81], [19, -54], [-18, -72], [-6, -46], [-1, -69], [9, -132], [-15, -190], [-25, -83], [-16, -32], [-28, -82], [-37, -25], [-51, -133], [-9, -35], [5, -38]], [[32019, 70445], [-25, -20], [-7, 2], [-5, 7], [26, 19], [21, 46], [7, -3], [-17, -51]], [[33844, 40227], [6, 96], [-6, 83], [-5, 21], [-82, 99], [-74, 90], [-97, 117], [-125, -3], [-130, -3], [-123, -53], [-122, -52], [-57, -24], [-116, -49], [-68, -23], [-18, -94], [-26, -142], [-27, -83], [-30, -87], [-43, -122], [0, -149], [0, -141], [-31, -199], [-25, -169], [-25, -164], [-17, -112], [-6, -29]], [[31334, 38697], [-46, -20], [-61, -21], [-35, 2], [-24, 5], [-7, 13], [-17, 20], [-2, 22], [-1, 32], [5, 57], [-2, 79], [-19, 92], [1, 29], [-2, 45], [-10, 85], [-25, 43], [-6, 70], [-3, 62], [-21, 78], [-3, 98], [0, 85], [-32, 98], [-34, 105], [-27, 14], [-7, 12], [-3, 30], [-1, 47], [2, 28], [21, 46], [1, 7], [-4, 9], [-54, 69], [-14, 20], [-4, 24], [0, 22], [13, 23], [7, 16], [-13, 49], [1, 44], [-8, 19], [1, 15], [8, 12], [35, 14], [11, 45], [0, 37], [-5, 27], [-33, 66], [0, 12], [34, 92], [25, 61], [6, 13], [-2, 13], [-6, 16], [-15, 23], [-21, 26], [-16, 31], [-22, 47], [-28, 39], [-20, 39], [-10, 33], [0, 34], [-3, 56], [-13, 90], [-4, 61], [-6, 68], [-5, 44], [-4, 42], [-9, 46], [-5, 34], [7, 24], [8, 18], [-1, 12], [-52, 49], [-9, 13], [-12, 99], [-38, 87], [-5, 66]], [[30691, 41759], [0, 26], [-3, 41], [-12, 32], [-17, 22], [-5, 27], [5, 28], [34, 55], [18, 9], [5, 28], [11, 22], [32, 81], [19, 53], [18, 32], [22, 23], [9, 18], [-5, 57], [2, 39], [7, 24], [22, 26], [20, 20], [4, 9], [-2, 15], [-18, 29], [-37, 26], [-24, -3], [-15, 23], [-8, 19], [-49, 238], [-8, 55], [1, 22], [32, 117], [13, 38], [23, 56], [-4, 22], [-40, 92], [-12, 43], [0, 44], [4, 53], [23, 28], [7, 44], [5, 42], [10, 14], [10, 24], [12, 35], [18, 31], [11, 23], [3, 64], [9, 18], [25, 21], [3, 16], [-6, 44], [-13, 46], [-10, 22], [-13, 113], [-15, 56], [6, 22], [10, 29], [10, 56], [3, 66], [-3, 242], [1, 47], [12, 34], [19, 38], [15, 15], [15, 24], [-1, 46], [10, 27], [11, 34], [-37, 133], [-32, 118], [-31, 110], [-35, 127], [-24, 84], [-29, 105], [-25, 91], [-35, 125]], [[30672, 45534], [33, 2], [65, -4], [63, -22], [42, -10], [18, -19], [4, -31], [12, -14], [13, 5], [16, 2], [34, 32], [28, 20], [24, 26], [13, 24], [30, 85], [24, 47], [22, 17], [44, 6], [13, -13], [18, 2], [15, 48], [24, 54], [46, 67], [23, 18], [15, 24], [25, 3], [22, 24], [106, 169], [43, 44], [26, 8], [22, 10], [38, 24], [94, 24], [61, 10], [19, -24], [22, 7], [18, 38], [16, 12], [11, -1], [16, -45], [8, -47], [-5, -37], [1, -52], [7, -69], [-4, -61], [-23, -81], [-11, -32], [-3, -34], [2, -45], [10, -74], [19, -103], [3, -76], [-13, -49], [-6, -43], [1, -36], [5, -25], [8, -14], [5, -29], [1, -43], [11, -41], [21, -40], [8, -38], [-4, -37], [2, -22], [6, -10], [5, 8], [8, 10], [7, -4], [15, -51], [2, -10], [8, -42], [2, -32], [22, -17], [23, -14], [13, -17], [26, -50], [22, -33], [27, -27], [9, -44], [17, -65], [46, -25], [54, -13], [34, -14], [42, 35], [27, -5], [29, -24], [12, -16], [21, -33], [33, -44], [27, -16], [19, 24], [18, 9], [14, -10], [7, -47], [7, -32], [16, -24], [34, -61], [20, -25], [22, 1], [44, -40], [48, -39], [25, -7], [25, 6], [16, -15], [6, -47], [42, -95], [19, -37], [24, -32], [59, 1], [18, -10], [27, 9], [79, 16], [15, 5], [45, -41], [53, -60], [36, -46], [24, -26], [13, -42], [11, -43], [5, -47], [-7, -46], [-10, -19], [-3, -30], [4, -45], [18, -41], [6, -49], [10, -87], [11, -28], [7, -271], [-36, -2], [-50, -4], [15, -25], [41, -101], [39, -93], [6, -149], [4, -94], [5, -133], [3, -79], [96, -7], [110, -8], [133, -10], [116, -9], [12, 1], [20, 11], [13, 14], [9, -1], [1, -32], [-3, -40], [0, -47], [-33, -91], [-2, -30], [5, -121], [12, -97], [6, -89], [13, -27], [39, -47], [60, -86], [24, -12], [20, 12], [12, -35], [3, -57], [33, -159], [20, -100], [10, -35], [16, -19], [-3, -13], [-13, -5], [-6, -19], [-18, -113], [-24, -148], [-16, -105], [14, -1], [1, -29], [3, -44], [-18, -6], [-5, -16], [-21, -85], [-27, -112], [-27, -116], [-17, -69], [28, -51], [47, -84], [-7, -24], [-20, -12], [-17, -8], [-13, -32], [-7, -23], [-19, -8]], [[36531, 35848], [-19, -26], [4, 137], [10, 45], [11, 34], [14, 21], [10, -29], [-8, -67], [-25, -81], [3, -34]], [[36504, 36634], [-5, -7], [-18, 72], [35, 69], [12, -28], [-9, -55], [-10, -38], [-5, -13]], [[37427, 38082], [0, -30], [-11, 15], [-31, -12], [-11, 23], [42, 97], [8, -14], [6, -18], [5, -25], [-5, -16], [-3, -20]], [[37741, 38512], [9, -16], [-16, 2], [-18, -14], [-28, -12], [-11, 23], [24, 32], [9, 24], [6, -5], [8, -17], [17, -17]], [[39193, 44081], [-9, -33], [-11, 5], [-5, 22], [-8, 22], [4, 18], [8, 10], [20, -2], [1, -42]], [[39237, 44298], [-10, -12], [-2, 36], [29, 47], [4, 54], [15, -25], [4, -28], [0, -12], [-40, -60]], [[37639, 50149], [-28, -56], [9, 65], [-4, 45], [3, 35], [19, 34], [6, 5], [-2, -41], [1, -13], [-4, -74]], [[37532, 51083], [-18, -27], [-5, -15], [-15, 11], [3, 16], [4, -2], [5, 47], [25, -6], [1, -24]], [[35602, 51017], [-30, -11], [38, 144], [34, 67], [1, 133], [36, 118], [34, 49], [47, 14], [26, -72], [-32, -205], [-9, -1], [-43, -108], [-48, -75], [-54, -53]], [[36214, 51711], [26, -3], [37, 11], [24, 27], [28, 5], [27, -3], [92, -30], [55, -9], [20, -9], [20, -14], [14, -15], [4, -32], [-14, -51], [-10, -53], [-9, -75], [-7, -16], [-12, 4], [7, -67], [-2, -27], [-6, -26], [-15, -54], [-22, -69], [-7, -14], [-17, -24], [-14, -31], [3, -29], [7, -29], [-8, -36], [-27, -53], [-16, -13], [-14, -6], [-14, 6], [-23, 53], [-3, -42], [-6, -42], [-8, -24], [-31, 3], [-17, 23], [-28, 25], [-5, -69], [-18, -47], [-17, -15], [-27, -10], [-16, -20], [-30, 16], [-27, 31], [-16, 3], [-12, -25], [-63, -5], [-29, -26], [-18, 8], [-26, 52], [-5, 34], [-15, 70], [-14, 84], [-10, 75], [8, 66], [17, -3], [20, -9], [4, 4], [1, 21], [-4, 18], [-32, -3], [-21, 39], [-3, 60], [4, 124], [2, 26], [15, 36], [4, 31], [-3, 34], [6, 61], [13, 52], [52, 67], [59, 24], [172, -65]], [[35929, 51767], [-76, -113], [-25, 37], [-6, 22], [5, 21], [-1, 9], [8, 39], [43, 32], [21, 5], [27, -10], [5, -27], [-1, -15]], [[36265, 51778], [-73, -18], [-34, 29], [8, 24], [25, 38], [30, 28], [28, 12], [28, -15], [8, -33], [-2, -32], [-18, -33]], [[36183, 51997], [12, -30], [-40, -120], [-21, -18], [-24, -3], [-31, 36], [-48, -3], [-15, 9], [-1, 52], [20, 56], [40, -3], [69, 45], [39, -21]], [[35992, 51923], [-5, -85], [-50, 36], [4, 87], [24, 24], [20, 46], [7, 56], [1, 77], [8, 14], [6, 5], [6, -5], [3, -116], [2, -70], [-26, -69]], [[36068, 52069], [-30, -19], [-5, 18], [0, 72], [8, 40], [38, 11], [4, 12], [11, 7], [7, -25], [-1, -41], [-32, -75]], [[36028, 52959], [-28, -26], [-16, 10], [-15, 69], [5, 57], [20, 19], [16, -4], [6, -8], [14, -93], [-2, -24]], [[34310, 52961], [8, -5], [19, -5], [44, -22], [58, -25], [15, 8], [10, 18], [2, 51], [2, 36], [-13, 33], [-16, 36], [-15, 45], [-18, 13], [2, 23], [12, 24], [12, 14], [6, 16], [8, 60], [5, 11], [5, 3], [6, -3], [12, -15], [45, -48], [20, 7], [76, 13], [11, 27], [16, 7], [28, 27], [11, 2], [9, -7], [12, 6], [18, 25], [8, 3], [3, -28], [11, -30], [14, -27], [7, -6], [24, 9], [12, -8], [5, -25], [2, -22], [10, -19], [12, 0]], [[34828, 53183], [7, -8], [12, -11], [10, -28], [22, -22], [39, -30], [18, -1], [17, -9], [11, -10], [11, 17], [40, 48], [19, 26], [13, 20], [10, 19], [7, 5], [5, -11], [4, -16], [15, -9], [33, -17], [15, -5], [21, 15], [19, 25], [9, 9], [13, -25], [9, -36], [7, -16], [13, 3], [28, -5], [20, -12], [12, 1], [17, 17], [9, 31], [25, 29], [23, 27], [13, 36], [19, 59], [7, 26], [1, 43], [28, 124], [10, 23], [6, 40], [11, 45], [0, 39], [8, 36], [16, 32], [11, 20], [19, 54], [13, 50], [32, 112], [3, 32], [13, 19], [4, 24], [14, 30], [14, 24], [6, 34], [11, 37], [23, 27], [9, 12]], [[35652, 54182], [26, 99], [3, 45], [24, 2], [37, -52], [30, -75], [40, -243], [6, -225], [17, -118], [46, -245], [3, -45], [7, -55], [15, -58], [16, -96], [1, -18], [-11, -26], [16, -2], [14, -15], [9, -61], [11, -41], [21, -56], [43, -19], [33, -7], [37, -31], [27, -41], [21, -138], [-7, -87], [2, -61], [-11, -24], [-30, -40], [-7, -22], [-62, -103], [-14, -49], [-33, -65], [-33, -125], [-48, -114], [-17, -29], [-26, -7], [-16, -17], [-37, -93], [-51, -31], [-4, -54], [-29, -124], [-26, -67], [-16, -23], [-41, -122], [-5, -54], [0, -94], [-28, -57], [-28, -37], [-4, -80], [-12, -27], [-11, -18], [-58, 21], [-91, -88], [-30, -21], [98, -5], [32, -46], [69, 31], [83, 110], [32, 24], [65, 75], [27, 50], [48, 60], [10, 26], [27, 29], [15, -36], [1, -23], [-22, -44], [6, -28], [14, -36], [5, -49], [2, -37], [9, -66], [30, -88], [1, -30], [-4, -38], [14, -32], [15, -19], [51, -95], [39, 53], [25, 15], [15, 23], [33, 14], [27, -22], [51, -32], [37, 34], [75, 78], [-23, -138], [-17, -127], [-13, -51], [-13, -138], [-13, -37], [-10, -42], [17, 15], [14, 20], [18, 53], [14, 92], [55, 247], [16, 22], [45, 28], [78, 197], [31, -1], [19, -45], [19, -27], [4, 54], [27, 22], [-28, 27], [-5, 24], [-2, 40], [19, 55], [-12, 48], [40, 61], [-3, 45], [14, 38], [18, 39], [21, 19], [3, 33], [13, 14], [10, 4], [20, -37], [22, 44], [21, 17], [9, -7], [12, -20], [12, -8], [10, 4], [26, 28], [24, -46], [15, -10], [-4, 26], [-8, 23], [6, 20], [11, 12], [36, -11], [19, -20], [21, -38], [28, -3], [23, 4], [14, -21], [23, 1], [11, -33], [35, -46], [7, -31], [28, -16], [27, -19], [28, -5], [28, 5], [1, -40], [21, -11], [26, 9], [21, -48], [53, -37], [38, -56], [24, 10], [27, -15], [30, -121], [6, -87], [13, 12], [12, 39], [16, 71], [29, 23], [14, -27], [30, -44], [25, -47], [11, -31], [19, -5], [-16, -38], [16, 4], [19, 27], [17, -55], [13, -60], [2, -62], [-12, -35], [-10, -22], [-12, -44], [-13, -7], [-14, -14], [16, -32], [10, -30], [24, 82], [16, 23], [23, 13], [13, -59], [2, -55], [-38, -23], [0, -44], [-12, -24], [-7, -29], [-6, -59], [-8, -50], [-23, -218], [0, -36], [27, 38], [52, 112], [16, 118], [20, 117], [22, 37], [14, 0], [20, -13], [1, -38], [-3, -22], [-22, -58], [-9, -32], [9, -32], [50, 97], [22, 33], [19, -6], [38, 44], [76, 9], [5, 51], [16, 22], [41, -6], [82, -45], [29, -37], [43, -35], [23, -41], [96, -76], [69, -8], [34, 35], [43, -36], [23, -41], [44, -21], [45, -12], [35, 29], [88, 10], [112, 42], [66, -10], [75, -28], [54, -71], [45, -41], [27, -40], [44, -41], [94, -111], [33, -64], [58, -88], [59, -37], [32, -91], [25, -42], [61, -154], [71, -108], [47, -109], [90, -69], [35, -115], [61, -14], [26, -17], [32, -49], [44, -27], [56, 8], [63, -6], [50, 23], [120, -43], [19, -21], [24, -49], [44, -182], [26, -202], [13, -154], [30, -120], [16, -226], [14, -71], [1, -54], [12, -13], [7, -152], [-3, -61], [-11, -80], [-1, -35], [2, -23], [-5, -33], [-2, -32], [12, -72], [0, -57], [-15, -70], [-21, -181], [-53, -302], [-51, -173], [-71, -178], [-47, -93], [-18, -10], [-17, 19], [12, -50], [-11, -43], [-47, -131], [-46, -86], [-49, -150], [-4, -3], [-62, -58], [-37, -47], [-47, -85], [-43, -135], [-9, -18], [-16, 10], [0, -69], [-37, -108], [-11, -16], [0, 30], [7, 24], [3, 25], [-1, 29], [-10, -21], [-22, -82], [7, -59], [-16, -90], [-60, -257], [-75, -217], [-17, -66], [-62, -146], [-45, -70], [-12, -1], [-15, 6], [-7, 112], [-36, 68], [-10, 12], [-15, -72], [-12, -20], [-18, -4], [19, -31], [6, -36], [-19, -73], [-1, -66], [-34, -72], [-20, -53], [-10, -67], [-7, -62], [16, 17], [7, -13], [5, -19], [-3, -29], [-11, -54], [2, -134], [-4, -30], [11, -33], [12, 56], [6, -16], [-32, -359], [13, -162], [4, -183], [15, -179], [16, -160], [1, -13], [-22, -185], [-28, -183], [-17, -150], [-11, -161], [-11, -78], [-4, -79], [13, -188], [4, -35], [-34, -84], [-37, -41], [-21, -40], [-45, -151], [-25, -224], [-1, -118], [12, -249], [-9, -102], [-14, -67], [-17, -45], [-44, -53], [-39, -131], [-17, -137], [-27, -50], [-5, -76], [-21, -83], [-56, -124], [-36, -36], [-18, -34], [-11, -72], [-35, -119], [-25, -154], [6, -53], [1, -8], [9, -178], [-3, -46], [-34, -49], [-128, -91], [-34, -39], [-77, -156], [-4, -36], [3, -53], [12, -30], [-13, -33], [-15, -59], [-22, 4], [-127, 0], [-69, -19], [-36, 4], [-16, 14], [-18, 23], [-6, 30], [10, 46], [-6, 27], [-19, -1], [-20, -13], [-4, -27], [1, -20], [8, -28], [4, -35], [-8, -30], [-40, -4], [-46, -28], [-56, -12], [-45, -20], [-21, 26], [21, 13], [29, -7], [32, 21], [-7, 25], [-45, 32], [-51, -19], [-28, -39], [-61, 4], [-75, -29], [-12, -30], [2, -57], [15, -13], [14, -26], [-14, -24], [-13, -11], [-79, -27], [-73, -112], [-31, -14], [-27, -49], [-3, -42], [-8, -25], [-18, -2], [-38, 23], [-50, 1], [-35, -18], [-183, -182], [-66, -72], [-75, -148], [-126, -166], [-67, -99], [-12, -26], [-11, -1], [-21, -21], [9, -17], [14, -2], [-6, -57], [-26, -40], [-50, -103], [-11, 7], [16, 54], [-25, 2], [-36, 20], [-15, -22], [9, -54], [-14, -22], [-24, -3], [-23, 6], [-24, 39], [11, -70], [51, -18], [22, -16], [8, -27], [-40, -126], [-34, -17], [-3, -17], [18, 0], [10, -35], [-12, -141], [-16, -26], [-10, -1], [-10, -24], [14, -46], [13, -33], [-2, -65], [-5, -54], [0, -52], [17, -101], [6, -104], [7, -37], [4, -42], [-11, -39], [6, -63], [-19, -107], [10, -154], [-4, -144], [-8, -76], [-12, -59], [-29, -76], [-1, -77], [-62, -71], [-69, -99], [-63, -118], [-69, -166], [-80, -252], [-73, -360], [-89, -272], [-36, -98], [-48, -109], [-64, -128], [-86, -128], [-94, -114], [-34, -51], [-33, -73], [-8, 30], [7, 49], [-4, 37], [-1, 48], [19, 9], [28, -30], [14, 20], [11, 21], [34, 12], [65, 125], [48, 47], [28, 79], [4, 42], [-1, 85], [16, 22], [35, -8], [7, 24], [-3, 27], [6, 59], [48, 52], [22, 63], [-7, 160], [8, 7], [20, -25], [9, 11], [10, 70], [-5, 36], [-23, 10], [-79, -79], [-26, 3], [-4, 62], [-39, 29], [-15, 52], [-4, 35], [-14, 14], [1, -61], [4, -59], [34, -69], [-8, -28], [-17, -32], [-11, -71], [1, -92], [-9, 28], [-12, 16], [-5, -99], [-23, -38], [-7, -38], [6, -43], [-12, -30], [-58, -80], [-58, -55], [-13, -26], [-6, -61], [-9, -63], [-26, -55], [-21, -110], [1, -47], [7, -69], [11, -46], [-18, -31], [-23, -59], [-19, -67], [-46, -251], [-40, -151], [-31, -74], [-44, -78], [-125, -196]], [[35174, 32406], [-7, 3], [-18, 16], [-16, 18], [-3, 13], [-2, 19], [2, 70], [0, 190], [5, 36], [8, 23], [25, 33], [23, 48], [27, 62], [25, 48], [-9, 33], [-21, 31], [-36, 26], [-36, 45], [-31, 57], [-14, 60], [-13, 65], [-13, 51], [-4, 24], [-12, 9], [-20, 27], [-12, 24], [-18, 14], [-32, 15], [-34, 27], [-41, 63], [-30, 71], [-15, 46], [-16, 33], [-85, 54], [-39, 65], [-15, -20], [-23, 19], [-23, 32], [-7, 23], [-9, 25], [-9, 28], [-6, 27], [-23, 47], [-30, 51], [-13, 14], [-6, -4], [-7, -19], [-4, -19], [-11, -13], [-14, -23], [-15, -29], [-18, -19], [-22, -6], [-14, 1], [-3, 11], [-1, 39], [5, 89], [-12, 35], [-17, 36], [-20, 50], [-64, 104], [-87, 150], [-31, 46], [-29, 3], [-27, -5], [-24, -20], [-19, -69], [-7, -11], [-47, 2], [-47, 11], [-16, 42]], [[34829, 37110], [1, 82], [38, 123], [10, 57], [-4, 32], [11, 114], [28, 196], [9, 127], [-10, 61], [-1, 42], [15, 36], [6, 11], [-35, 43], [-20, 40], [-24, 29], [-27, 23], [-13, -10], [-14, -13], [-26, -21], [-31, -36], [-15, -14], [-28, -13], [-31, -11], [-26, 7], [-22, 8], [-14, 23], [-7, 49], [0, 42], [-5, 61], [-16, 35], [-6, 26], [-1, 33], [2, 36], [5, 26], [-3, 33], [-7, 23], [2, 40], [-4, 55], [-11, 34], [-6, 40], [0, 40], [-8, 40], [-1, 44], [8, 40], [2, 40], [-8, 29], [-16, 17], [-12, 46], [-1, 59], [-13, 32], [-14, 27], [-16, 0], [-24, 15], [-21, -2], [-34, 2], [-15, 9], [-9, 21], [-21, 29], [-12, 49], [-14, 10], [-21, -15], [-8, -19], [-8, -27], [-15, -30], [-19, 1], [-20, -17], [-20, -2], [-25, -3], [-26, 15], [-31, 17], [-27, 11], [-26, -11], [-17, 10], [-23, 5], [-26, 4], [-20, 31], [-22, 17], [-12, -6], [-16, -19], [-16, 4], [-21, 15], [-8, 36], [1, 23], [5, 23], [8, 32], [-4, 35], [1, 30], [4, 27], [4, 30], [-3, 29], [-1, 30], [-2, 29], [-2, 30], [11, 44], [9, 36], [-6, 31], [2, 21], [7, 34], [10, 42], [-1, 78], [-9, 46], [-9, 12], [-2, 14], [5, 18], [-5, 19], [-2, 19], [5, 16], [-7, 33], [-13, 10], [-5, 9], [-4, 37], [-4, 41], [2, 33], [-7, 28], [-9, 17], [-9, 31], [-9, 23], [-4, 32], [-6, 42]], [[30672, 45534], [-26, -1], [-46, 12], [-34, 2], [-29, -31], [-43, -37], [-19, -10], [-15, -1], [-14, 4], [-16, 20], [-23, 45], [-17, -17], [-13, -20], [0, 98], [0, 147], [1, 129], [0, 104], [0, 121], [0, 85], [12, 32], [8, 36], [-9, 49], [2, 44], [6, 31], [8, 30], [-19, -15], [-8, -8], [-10, -23], [-23, -31], [-16, -31], [-19, -25], [-24, -56], [-20, -30], [-21, -20], [-34, -65], [-28, -13], [-74, -10], [-78, 0], [-71, 0], [-11, 1], [1, 54], [2, 38], [-25, 40], [-1, 50], [-7, 34], [-8, 42], [-17, 26], [-23, 11], [-39, 23], [-58, 24], [-56, 2], [-54, -3], [33, 84], [33, 84], [-1, 73], [-27, 64], [-14, 39], [-22, 55], [-28, 38], [-15, 50], [1, 30], [-2, 20], [-11, 12], [-10, 18], [-15, 20], [-17, 27], [0, 27], [-6, 28], [-11, 34], [0, 27], [-9, 41], [-11, 30], [-10, 21], [-16, 28], [1, 23], [12, 12], [4, 27], [-1, 27], [-13, 16], [-15, 9], [-21, 48], [-14, 25], [-10, 15], [-5, 17], [5, 12], [7, 17], [1, 26], [-3, 25], [0, 22], [10, 7], [10, -4], [11, 14], [13, 5], [16, 3], [8, 15], [-1, 27], [-10, 52], [-9, 22], [-4, 31], [8, 62], [5, 39], [18, 41], [54, 89], [49, 60], [23, 7], [18, 22], [11, 34], [3, 38], [-3, 32], [-9, 48], [-10, 60], [-9, 34], [8, 40], [13, 55], [26, 83], [25, 89], [2, 26], [3, 54], [12, 111], [6, 60], [-3, 24], [5, 20], [16, 16], [37, 16], [25, 33], [38, 62], [33, 67], [26, 21], [49, 62], [28, 39], [10, 12], [28, 28], [49, 10], [41, 10], [23, 18], [33, 8], [23, 21], [25, 0], [48, 22], [16, 31], [14, 38], [18, 33], [22, 8], [24, -6], [29, 1], [35, 10], [17, -25], [7, -31], [22, -31], [15, 2], [15, 6], [21, -26], [14, 3], [9, 15], [2, 38]], [[30565, 49403], [5, 20], [10, 117], [17, 194], [15, 176], [18, 195], [17, 201], [18, 204], [15, 167], [12, 143], [8, 88], [12, 116], [5, 101], [5, 29], [-3, 25], [-11, 35], [0, 15], [2, 21], [-2, 17], [-11, 19], [-8, 12], [-7, 16], [-3, 23], [-6, 23], [-2, 24], [-8, 19], [-2, 24], [5, 23], [3, 24], [-3, 23], [-3, 27], [-6, 25], [-9, 16], [-23, 17], [-22, 41], [-26, 37], [-34, 70], [-7, 33], [0, 90], [1, 99], [2, 148], [1, 76], [19, 4], [17, 2], [18, 5], [15, 6], [14, 10], [10, 14], [13, 9], [10, -3], [9, 12], [11, 11], [11, 9], [15, 8], [14, -18], [8, -18], [9, -9], [9, 2], [6, -2], [6, -14], [8, -1], [12, 3], [11, 3], [5, 4], [0, 9], [-2, 16], [-4, 15], [3, 24], [0, 28], [1, 35], [-9, 20], [-8, 37], [-10, 31], [-15, 20], [-13, 8], [-12, -13], [-11, -2], [-8, 11], [-13, 1], [-14, 4], [-14, 4], [-27, -8], [-10, 10], [-13, 1], [-15, -11], [1, 144], [0, 135], [0, 95], [14, -2], [17, 17], [24, 3], [20, 18], [10, 1], [20, -9], [21, -18], [21, -3], [55, 0], [58, 0], [65, 0], [66, 0], [56, 0], [18, -1], [-10, 32], [-12, 41], [4, 32], [6, 32], [7, 17], [18, -18], [14, -55], [13, -41], [12, -21], [15, -2], [16, 7], [17, 17], [29, 76], [28, 65], [15, 22], [16, 20], [11, 7], [16, -2], [14, -18], [9, -31], [31, -108], [24, -81], [9, -51], [0, -124], [-1, -109], [3, -15], [4, -4], [53, 26]], [[31423, 52547], [71, -133], [53, -98], [23, -31], [13, -9], [30, 6], [37, 13], [17, 14], [20, 31], [32, 43], [26, 23], [10, 3], [10, -7], [22, -26], [12, -48], [-11, -55], [2, -34], [23, 2], [18, 57], [13, 45], [27, 36], [26, 52], [18, 50], [22, 29], [32, 35], [26, 22], [24, -2], [18, 23], [23, 44], [16, 35], [11, 12], [22, -3], [28, 5], [28, 43], [25, 51], [13, 88], [9, 77], [8, 15], [9, 13], [10, 8], [26, 5], [45, 41], [31, 42], [30, 9], [9, 11], [10, 39], [6, 68], [-4, 41], [-55, 13], [-35, 0], [-59, 10], [-28, 17], [-6, 12], [-1, 13], [6, 30], [5, 55], [-8, 74], [-29, 118], [-21, 115], [-3, 80], [1, 85], [1, 55], [-15, 43], [-81, 137], [-28, 65], [-9, 44], [-32, 83], [8, 25], [18, -1], [16, -22], [14, -45], [11, -11], [14, 0], [75, 1], [17, -8], [11, -16], [9, -19], [14, -53], [14, -26], [30, 1], [46, 1], [26, 5], [16, -15], [19, -12], [41, 28], [12, 0], [12, -12], [44, -96], [25, -40], [21, -53], [31, 0], [26, 45], [7, 154], [8, 45], [13, 13], [15, 1], [18, 24], [20, 32], [17, 10], [72, -34], [20, 17], [72, 40], [74, 53], [21, 65], [31, 18], [24, 49], [20, -6], [30, -2], [18, 9], [9, 9], [11, 23], [16, 64], [21, 25], [25, 26], [17, 30], [15, 38], [6, 33], [0, 26], [-8, 50], [-11, 47], [-11, 16], [-8, 6]], [[33127, 54839], [25, 11], [21, -16], [32, -3], [14, 13], [21, -6], [26, 33], [17, -11], [11, 0], [10, -25], [7, -29], [25, -35], [-3, -54], [-4, -47], [-3, -55], [-2, -42], [-10, -42], [-16, -40], [-4, -16], [-2, -21], [10, -13], [18, -4], [23, -1], [16, -13], [20, -2], [25, -34], [11, -21], [1, -16], [-7, -38], [-3, -35], [6, -22], [7, -16], [19, -79], [10, -27], [8, -9], [2, -15], [-7, -29], [-8, -37], [-18, -39], [-3, -30], [-14, -19], [-35, -46], [6, -72], [2, -37], [-1, -28], [-12, -38], [-20, -113], [-7, -56], [-7, -129], [1, -44], [9, -58], [20, -130], [11, -21], [26, -30], [3, -88], [-2, -92], [-1, -36], [4, -15], [12, -7], [8, -11], [1, -27], [0, -28], [19, -17], [17, -10], [16, -39], [28, -61], [11, -11], [6, -25], [24, -51], [36, -18], [37, -23], [14, -32], [15, -26], [11, -1], [10, 4], [16, 22], [12, 20], [22, -2], [26, 4], [5, 16], [2, 20], [-5, 52], [9, 16], [22, 9], [4, 28], [5, 15], [6, 18], [7, 3], [9, -10], [15, -7], [15, -9], [9, -18], [14, -1], [16, 3], [6, 12], [5, 20], [3, 42], [10, 1], [21, 10], [21, 19], [29, 3], [27, -1], [14, 13], [12, 27], [25, 78], [12, 18], [14, 14], [12, -3], [24, 13], [19, 19], [8, -5], [15, -40], [8, -9], [11, -2], [37, -21], [19, 7], [21, 12], [21, 5], [15, -9], [10, 12], [12, 8]], [[33474, 59378], [-8, -11], [-25, 23], [-9, 28], [-1, 88], [15, 8], [29, -70], [17, -25], [-18, -41]], [[81951, 54665], [32, 0]], [[81983, 54665], [7, -19], [17, -67], [11, -67], [3, -102], [13, -44], [-2, -9], [-8, -7], [-12, -3], [-21, 10], [-18, 15], [-15, 110], [-7, 63], [1, 75], [-1, 45]], [[81951, 54665], [-23, -25], [-22, -31], [-22, -27], [-11, -22], [4, -29], [5, -66], [3, -51], [8, -20], [6, -21], [-2, -22], [-14, -42], [8, -9], [-10, -56], [-14, -42], [-19, -34], [-13, -7], [-10, 14], [-17, 37], [-18, 52], [-8, 30], [-26, 4], [-10, 24], [0, 29], [-8, 34], [-10, 37], [-15, 28], [-21, 22], [-8, 16]], [[81684, 54488], [31, -1], [34, 10], [35, 30], [33, 37], [28, 43], [27, 47], [27, 38], [43, 44], [15, -4], [0, -31], [-6, -36]], [[75453, 67833], [-2, -13], [-8, -34], [-5, -38], [4, -31], [18, -37], [23, -29], [30, -3], [28, 12], [11, -5], [15, -49], [11, -43], [-15, -44], [-7, -39], [-3, -27], [1, -12], [9, -22], [11, -38], [1, -34], [-6, -23], [-15, -12], [-15, 3], [-12, 0], [-16, -4], [-25, -13], [-22, -16], [-43, 3], [-17, 34], [-8, 0], [-39, -44], [-43, 7], [-77, -14], [-32, -4], [-33, 5], [-17, 9], [-31, 32], [-29, 22], [-28, -20], [-11, -4], [-23, -54], [-50, -17], [-49, -13], [-15, 7], [-28, 3], [-1, 12], [1, 13], [-7, 9], [-11, 10], [-20, 4], [-25, 14], [-14, 12], [-51, -18], [-30, 28], [-34, 39], [-17, 16], [-6, 60], [-6, 20], [-14, 20], [-7, 24], [6, 24], [34, 46], [2, 11]], [[74691, 67578], [16, 85], [22, 31], [21, 43], [16, 68], [31, 71], [34, 72], [24, 58], [16, 28], [32, 29], [27, 17], [18, 39], [23, 22], [23, 10], [34, -5], [33, -14], [35, -20], [4, -16], [-3, -27], [-5, -29], [0, -14], [5, -8], [35, -6], [42, 5], [24, -4], [53, -26], [16, -18], [16, -15], [16, 3], [20, 30], [21, 26], [13, 4], [9, -8], [17, -25], [35, -23], [31, -17], [10, -17], [-3, -70], [1, -24]], [[57016, 41593], [-6, -29], [-4, -41], [5, -31], [11, -42], [16, -36], [13, -22], [14, -53], [15, -67], [19, -52], [56, -120], [7, -43], [7, -42], [36, -82], [5, -27], [-2, -55], [36, -166], [24, -97], [21, -18], [64, -103], [57, -83], [66, -56], [49, -37], [24, -27], [12, -26], [10, -50], [5, -86], [1, -56], [53, 2], [43, -5], [15, -11], [6, -16], [-2, -37], [1, -54], [2, -45], [-4, -47], [-4, -55], [-2, -69], [7, -27], [42, -87], [17, -56], [19, -85], [11, -27], [9, -11], [38, -10], [97, -35], [60, -33], [48, -33], [19, -9], [10, -9], [3, -8], [-6, -75], [2, -23], [6, -22], [8, -16], [10, -11], [36, -8], [22, -45], [13, -21]], [[58156, 39058], [-65, -11], [-32, -38], [-19, -67], [-30, -49], [-40, -32], [-42, -21], [-45, -12], [-47, -58], [-51, -103], [-26, -66], [-1, -27], [-11, -23], [-22, -19], [-12, -24], [-3, -28], [-11, -13], [-21, 1], [-14, -20], [-8, -41], [-18, -25], [-28, -9], [-24, -24], [-20, -37], [-15, -20], [-11, 0], [-17, -31], [-27, -73], [-5, -34], [-37, -275], [-21, -32], [-40, -57], [-32, -68], [-14, -40], [-15, -18], [-74, -33], [-28, -18], [-33, -26], [-8, -23], [-8, -85], [-23, -122], [-19, -89], [-12, -78], [-21, -97], [-18, -33], [-21, -30], [-27, -14], [-37, -10], [-33, 3], [-26, -2], [-36, -34], [-34, -2], [-53, 20], [-44, 19], [-19, 4], [-38, 63], [-25, -1], [-37, 5], [-21, 15], [-20, 32], [-42, 64], [-42, 51], [-37, 31], [-34, 14], [-32, -13], [-26, -13], [-10, -7], [-19, -27], [-20, -50], [-17, -79], [-6, -48], [-19, -103], [-25, -123], [-11, -36], [-14, -26], [-22, -23], [-70, -98], [-35, -110], [-22, -33], [-27, -15], [-23, -9], [-12, -18], [-14, -56], [-12, -20], [-14, -7], [-40, 6], [-13, 6], [-107, -11], [-32, 18], [-23, 7], [-36, -23], [-16, 15], [-12, 46], [-6, 93], [2, 79], [20, 60], [16, 44], [16, 57], [3, 25], [-4, 23], [-3, 47], [-2, 48], [-23, 105], [-28, 140], [-38, 155], [-11, 43], [-24, 68], [-88, 128], [-13, 17]], [[55550, 37570], [0, 15], [-1, 124], [0, 165], [0, 165], [0, 166], [0, 165], [0, 165], [0, 165], [0, 165], [0, 165], [0, 140], [63, 0], [78, 0], [94, 0], [41, 0], [2, 22], [0, 102], [0, 235], [0, 235], [0, 235], [-1, 235], [0, 235], [0, 235], [0, 235], [0, 235], [0, 116], [71, 7], [83, 24], [134, 39], [124, 47], [82, 28], [96, 33], [33, 6], [9, -4], [13, -12], [45, -117], [28, -90], [6, -38], [5, -4], [13, 6], [15, 15], [45, 89], [10, 23], [29, 43], [35, 44], [32, 31], [32, 27], [15, -7], [17, -22], [15, -14], [73, 108], [33, 25], [85, 19], [12, -3]], [[56349, 58133], [20, -72], [9, -25], [81, -169], [16, -41], [40, -123], [25, -83], [28, -119], [3, -65], [-4, -55], [-6, -158], [-7, -45], [-36, -85], [-1, -38], [7, -32], [11, -13], [7, -16], [-4, -73], [12, -29], [27, -19], [67, -13], [35, -11], [28, -15]], [[56707, 56834], [13, -7], [7, -26], [-11, -84], [8, -53], [23, -45], [23, -19], [23, -11], [78, -28], [32, -31], [43, -99], [54, -91], [13, -48], [-3, -43], [-16, -53], [3, -22], [24, -53], [29, -54], [51, -60], [90, -95], [41, -63], [14, -48], [23, -52], [32, -47], [21, -37], [-15, -104], [5, -34], [8, -29], [18, -41], [8, -53], [18, -65], [23, -30], [36, -11], [20, -31], [40, -52], [40, -45], [16, -31], [11, -27], [9, -33], [4, -32], [1, -70], [7, -87], [21, -60], [19, -44]], [[57611, 54786], [-80, 51], [-12, 1], [-14, -9], [-42, -63], [-13, -7], [-15, 5], [-38, 8], [-127, 49], [-98, 48], [-30, 17], [-52, 17], [-35, -33], [-32, -111], [-10, -22], [-51, -33], [-24, 9], [-59, -30], [-91, 46], [-33, -10], [-26, -23], [-65, -50], [-40, -29], [-46, -26], [-44, -40], [-30, -22], [-29, 0], [-26, 23], [-28, 19], [-35, 4], [-35, -11], [-31, -45], [-12, -31], [-26, -85], [-31, -137], [-12, -27], [-4, -3], [-7, -11], [-143, 68], [-61, 16], [-42, -21], [-52, 38], [-23, 7], [-10, -12], [-29, 17], [-48, 47], [-45, 19], [-40, -6], [-25, 15], [-20, 46], [-26, 83], [-46, 83], [-62, 66], [-39, 50], [-16, 33], [-33, 19], [-52, 3], [-49, -32], [-71, -104], [-66, -212], [-36, -81], [-30, -21], [-7, -51], [15, -81], [3, -94], [-10, -158], [4, -116]], [[55169, 53846], [-16, 19], [-15, 54], [-7, 11], [-43, -25], [-23, -22], [-12, -21], [-9, -3], [-14, 29], [-10, 6], [-18, -6], [-17, 1], [-11, 3], [-8, -2], [-20, 17], [-75, 45], [-13, 15], [-15, -2], [-38, -39], [-21, -11], [-62, -24], [-66, -11], [-25, -1], [-17, -17], [-12, -25], [-7, -53], [-13, -93], [-6, -25], [1, -37], [-4, -62], [-1, -56], [2, -37], [-19, -75], [-22, -92], [-19, -78], [-19, -79]], [[54495, 53150], [-13, 54], [-8, 63], [-4, 73], [2, 19], [-5, 22], [0, 4], [-7, 55], [7, 38], [-5, 40], [-16, 39], [-14, 30], [-8, 27], [-7, 12], [-15, 4], [-21, 14], [-27, 59], [-27, 57], [-34, 74], [-27, 63], [-33, 78], [-31, 72], [-19, 69], [-7, 40], [9, 4], [13, 1], [6, 7], [0, 19], [-14, 54], [-6, 70], [-12, 42], [-35, 66], [-35, 49], [-11, 26], [-6, 36], [-13, 231], [-6, 65], [-10, 29], [-8, 13], [-3, 16], [1, 41], [5, 37], [-1, 14], [10, 32], [0, 213], [-5, 11], [-6, 18], [-10, -1], [-11, 2], [-11, 31], [-9, 39], [3, 28], [9, 23], [11, 20], [13, 17], [39, 34], [11, 17], [7, 21], [4, 29], [23, 109], [33, 109], [15, 23], [14, 72], [20, 89], [8, 41], [6, 41], [10, 33], [37, 54], [28, 96]], [[54299, 56177], [31, -5], [31, -16], [40, -7], [31, 18], [20, 37], [45, 30], [52, 35], [7, 51], [16, 27], [17, 23], [6, 3], [2, -17], [10, -53], [23, -53], [32, -58], [9, 4], [20, 44], [51, 27], [12, 12], [36, 64], [43, 41], [10, 4], [16, 11], [43, 42], [31, -5], [50, 7], [83, 20], [60, 6], [30, 8], [8, 9], [11, 62], [10, 17], [22, 26], [44, 93], [29, 79], [8, 26], [1, 2], [6, 5], [12, 33], [-12, 34], [-49, 70], [0, 9], [-3, 12], [3, 9], [19, 29], [26, 32], [27, 12], [70, -2], [61, 7], [14, -2], [47, 16], [32, 15], [33, 34], [75, -4], [62, 85], [18, 16], [8, 13], [3, 13], [29, 34], [33, 70], [25, 62], [7, 45], [71, 150], [25, -3], [12, 19], [28, 100], [8, 19], [14, 6], [16, 11], [13, 30], [12, 44], [0, 55], [-5, 44], [0, 21], [7, 20], [11, 19], [54, 54], [13, 26], [9, 24], [15, 4], [16, -2], [10, 14], [12, 25], [37, 33], [35, 26], [36, -11], [29, -13], [25, -16], [11, -4]], [[33392, 77153], [-37, -20], [-32, 1], [-22, 19], [-1, 8], [51, -8], [19, 5], [39, 32], [-17, -37]], [[31590, 77357], [-14, -21], [4, 20], [17, 51], [11, 7], [-18, -57]], [[31455, 77581], [-38, -31], [15, 78], [12, 24], [15, -8], [-2, -47], [-2, -16]], [[33066, 78046], [-12, -4], [-2, 8], [-18, 24], [-1, 12], [15, 11], [32, -6], [-12, -30], [-2, -15]], [[29529, 78102], [-34, -12], [-11, 5], [37, 56], [42, 13], [-34, -62]], [[29565, 78034], [-22, -11], [-36, 11], [-41, -15], [-11, 0], [30, 42], [46, 27], [46, 80], [13, 2], [-18, -91], [-3, -33], [-4, -12]], [[30270, 78843], [-25, -5], [6, 20], [35, 36], [25, 20], [15, 0], [-24, -44], [-32, -27]], [[33026, 78308], [9, -4], [38, 28], [20, -1], [-1, -20], [-32, -22], [-15, -17], [18, -15], [0, -10], [-22, -25], [-11, -27], [9, -26], [36, 26], [14, 0], [20, -6], [19, 8], [11, 13], [63, 99], [3, 13], [-68, -20], [-8, 13], [45, 61], [-4, 31], [23, 51], [20, 30], [15, 16], [22, 16], [15, -24], [5, -43], [37, 6], [37, -9], [26, -18], [5, -10], [0, -17], [-9, -29], [-15, -25], [30, -31], [-4, -13], [-48, -36], [-28, -35], [-25, -44], [-50, -51], [-80, -36], [-25, 0], [-30, 11], [-30, -3], [-29, -13], [-29, 1], [-13, -7], [-14, 1], [-11, 14], [-23, 41], [-12, 27], [-12, 130], [4, 68], [20, 63], [29, 43], [17, 34], [72, 200], [14, 45], [17, 39], [31, 39], [40, 64], [12, 14], [23, 6], [23, -4], [-7, -23], [2, -23], [26, -89], [0, -18], [-15, -71], [-27, -116], [-7, -63], [4, -19], [-11, -32], [-12, -25], [-47, -45], [-24, -11], [-22, -17], [-54, -58]], [[32274, 78610], [8, -8], [13, 15], [15, 47], [41, -12], [22, -21], [12, 4], [12, -2], [23, -28], [44, -22], [46, 4], [70, 13], [8, 5], [72, 11], [72, 5], [25, -12], [9, -12], [5, -14], [-41, -38], [-41, -44], [-58, -44], [-7, -21], [4, -39], [-1, -40], [11, -3], [7, -14], [-15, -13], [-59, -6], [-17, 4], [-21, 16], [-7, 39], [-25, -6], [-7, 5], [35, 32], [-16, 42], [-18, -3], [-11, 19], [1, 27], [16, 13], [5, 14], [-22, -13], [-17, -24], [-21, -9], [-22, -22], [33, -6], [-17, -17], [-17, -3], [-81, 32], [-20, 12], [-26, 34], [-19, 45], [11, 2], [3, 8], [-2, 7], [-28, 6], [-45, -2], [-25, 12], [1, 79], [-8, 22], [-28, 18], [-42, 5], [-4, 30], [13, 44], [21, 39], [16, 37], [18, 31], [46, 62], [-1, -46], [4, -40], [-30, -79], [52, -79], [6, -17], [5, -21], [-4, -19], [-8, -18], [20, -8], [6, -15]], [[32801, 79080], [10, -11], [18, 1], [12, -4], [-17, -21], [-33, -3], [-16, 9], [23, 110], [27, 26], [56, 71], [22, 22], [21, 9], [21, -5], [-22, -43], [-30, -2], [-28, -35], [-18, -40], [-23, -22], [-15, -27], [-8, -35]], [[34937, 79171], [-14, -20], [-14, 0], [2, 18], [17, 34], [8, 24], [1, 15], [3, 11], [13, 13], [11, 23], [-5, -43], [-22, -75]], [[32081, 79427], [-7, -42], [-25, -36], [-12, -2], [-5, 3], [6, 23], [0, 40], [20, 6], [7, -4], [16, 12]], [[32090, 79469], [-32, -30], [14, 45], [6, 11], [5, 5], [5, -4], [2, -27]], [[15712, 79927], [-11, -15], [-7, 2], [-5, 10], [-18, 102], [8, -3], [24, -31], [-5, -12], [18, -31], [4, -21], [-8, -1]], [[15730, 80003], [-4, -7], [-43, 41], [-29, 54], [-12, 32], [57, -81], [29, -26], [2, -13]], [[29247, 77766], [40, 22], [82, 85], [61, 30], [80, 89], [57, 17], [11, 20], [9, 73], [6, 26], [26, 73], [33, 61], [26, 84], [47, 54], [71, 45], [66, 98], [36, 30], [35, 22], [15, 40], [21, 23], [58, 46], [64, 13], [64, 38], [50, 21], [30, 36], [44, 19], [132, 104], [36, 49], [48, 99], [41, 51], [14, 54], [60, 87], [62, 116], [30, 83], [46, 45], [89, 132], [47, 52], [20, 6], [53, 47], [34, 48], [54, 49], [97, 60], [91, 72], [123, 63], [144, 93], [117, 50], [82, 7], [100, 24], [35, -3], [156, -40], [74, -50], [85, -106], [13, -27], [2, -39], [-45, 19], [-40, 1], [28, -22], [47, -65], [-3, -81], [-26, -73], [-79, -36], [-20, -29], [-16, -47], [-16, -18], [-39, -22], [-21, -30], [-62, -49], [-28, -6], [-32, 11], [-78, 47], [-47, 44], [-24, -24], [-20, -25], [-46, 8], [-21, -11], [-34, 12], [-71, -56], [20, -6], [56, 32], [19, -4], [42, -41], [100, -45], [26, -29], [25, -95], [16, -15], [35, 10], [39, 47], [32, 25], [63, 20], [-13, -31], [48, 3], [48, -42], [-18, -30], [-24, -59], [-16, -116], [-49, -78], [-64, -76], [16, -19], [19, -11], [41, 22], [28, -1], [31, -15], [-10, -59], [-11, -40], [7, -38], [18, -71], [25, -16], [10, -92], [14, -50], [-2, -40], [25, -25], [4, -41], [92, -12], [19, -16], [63, -15], [12, -12], [12, -22], [-63, -49], [51, -36], [47, -59], [38, 12], [16, -2], [42, -36], [12, -19], [6, -16], [21, 4], [31, 14], [54, -4], [59, -20], [-5, -32], [-9, -21], [46, 7], [28, -23], [10, 11], [7, 14], [57, 38], [73, 79], [9, -9], [3, -30], [10, -49], [28, -34], [33, -8], [45, 26], [18, -22], [22, -43], [20, -57], [-1, -20], [-26, -17], [-24, -26], [99, -10], [10, -11], [10, -22], [-10, -22], [-9, -11], [-18, 13], [-33, -12], [-28, -29], [-31, -16], [-20, -2], [-22, -14], [-20, -20], [-20, -6], [-65, -52], [-66, -33], [-69, -54], [-71, -34], [-73, -40], [-16, -4], [-19, 2], [-41, -40], [-21, 6], [-21, -7], [-25, 9], [-16, 16], [13, -42], [3, -39], [-6, -16], [-12, -20], [-42, 3], [-16, 14], [-20, 21], [-9, 33], [-21, 24], [-13, -33], [1, -25], [-16, -33], [-18, 57], [-34, -21], [-14, -61], [7, -17], [10, -46], [-16, -25], [-12, 7], [-25, -68], [-31, -25], [-31, -69], [-37, -53], [-11, -36], [-62, -81], [-24, 2], [-17, -2], [-26, -34], [-5, -68], [-11, 9], [-12, -2], [-6, -22], [-9, -3], [-23, 20], [-27, -11], [-21, 15], [-27, 100], [-14, 35], [-26, 12], [-6, -22], [-10, -20], [-25, 41], [-18, 153], [0, 37], [26, 129], [64, 116], [-21, 4], [-56, -81], [6, 20], [9, 20], [19, 33], [29, 31], [39, 17], [27, 3], [18, 17], [27, 30], [5, 16], [-24, -18], [-39, -18], [10, 23], [10, 13], [209, 208], [42, 34], [84, 44], [12, 28], [-12, 19], [33, -17], [-3, -23], [-5, -18], [-2, -29], [3, -28], [34, -14], [27, -52], [-13, 71], [25, 40], [96, 54], [80, 6], [25, 25], [-68, 17], [-81, -9], [-50, 19], [-70, -12], [-73, 11], [-22, -15], [-19, -34], [-23, 15], [-12, 3], [-11, 11], [24, 58], [74, 87], [46, 75], [12, 15], [10, 31], [-24, -5], [-22, -12], [-15, 34], [-27, 47], [-2, -20], [13, -57], [-51, -101], [-34, -7], [-44, -47], [-62, -41], [-73, -78], [-95, -66], [-19, -1], [-43, 55], [12, 24], [11, 34], [-11, -10], [-7, -14], [-25, -24], [21, -45], [-11, -17], [-30, -22], [-27, -32], [-25, -22], [-20, 28], [-54, -35], [-46, -9], [-10, 17], [-3, 28], [-16, 7], [-30, -8], [-11, 15]], [[31354, 77862], [-13, 7], [-12, 6], [-10, 5], [-6, -8], [-5, -11], [-7, -8], [-14, 11], [-9, 21], [-15, 22], [-6, 16], [3, 19], [7, 18], [3, 22], [-7, 25], [-7, 14], [-5, 16], [2, 16], [9, 7], [9, 10], [3, 20], [-6, 22], [-15, 8], [-12, -3], [-18, 5], [-17, 13], [-12, 16], [-8, 9], [-7, 0], [-8, 8], [-5, 15], [0, 25], [3, 15], [4, 12], [1, 15], [-2, 10], [-1, 8], [2, 10], [3, 20], [-5, 15], [-1, 52], [-1, 96], [-1, 74], [0, 92], [-1, 68], [-1, 95], [0, 89], [-2, 85], [-35, 49], [-45, 62], [-39, 41], [-21, 5], [-13, -6], [-5, -17], [-29, -17], [-52, -19], [-44, -29], [-17, 0], [-14, 5], [-18, 15], [-12, 21], [-5, 37], [4, 51], [-27, 11], [-26, 10], [-17, -35], [-16, -30], [-31, -64], [-44, -91], [-24, -50], [-43, -87], [-38, -77], [-8, -80], [-8, -75], [-32, -57], [-19, -52], [-8, -58], [-7, -54], [-1, -44], [5, -24], [-2, -19], [-10, -22], [-21, -38], [-4, -37], [-12, -18], [-36, -36], [-30, -53], [-1, -30], [4, -25], [1, -16], [-6, -11], [-12, 1], [-13, -4], [-10, -22], [0, -32], [-8, -23], [-9, -5], [-8, 17], [-9, 24], [-11, 3], [-17, -17], [-21, -26], [-19, -2], [-34, 17], [-26, -51], [-27, -111], [-116, -1], [-115, 0], [-116, 0], [-116, -1], [-115, 0], [-116, 0], [-115, 0], [-65, -1], [-13, 0]], [[14974, 80272], [8, -52], [-34, 9], [-12, 10], [0, 25], [6, 23], [26, -8], [6, -7]], [[34846, 80408], [-43, -34], [-10, -13], [-12, -7], [-9, 11], [-12, 35], [2, 12], [12, 2], [7, -5], [1, -11], [5, -6], [9, 0], [32, 35], [16, 5], [6, -6], [-4, -18]], [[34974, 80497], [20, -37], [11, -10], [-72, -41], [-8, -2], [-5, 4], [-1, 38], [4, 29], [5, 5], [16, -18], [17, 36], [13, -4]], [[15513, 80374], [4, -12], [-62, 45], [-27, 27], [-10, 19], [-6, 11], [-32, 28], [-5, 13], [7, 10], [21, -6], [35, -21], [32, -35], [43, -79]], [[14822, 80417], [-11, -2], [-18, 7], [-19, 16], [-35, 44], [-3, 10], [3, 9], [9, 7], [3, 11], [-8, 32], [27, 20], [25, -17], [11, -20], [13, -36], [6, -41], [1, -28], [-4, -12]], [[32833, 80122], [-117, -8], [-92, 36], [-69, 17], [-67, 31], [-146, 100], [-16, 35], [-14, 43], [-28, 39], [-30, 32], [-154, 98], [-13, 34], [31, 23], [36, 10], [31, -1], [104, -38], [130, -34], [56, -26], [64, -38], [62, -47], [140, -125], [24, -10], [63, -61], [23, -46], [11, -38], [-14, -19], [-15, -7]], [[15284, 80661], [-7, -5], [-7, 66], [9, 23], [2, 12], [-1, 13], [15, -30], [6, -20], [2, -27], [0, -8], [-19, -24]], [[15226, 80700], [-3, -30], [-17, 49], [-28, 105], [4, 24], [12, 35], [11, 2], [18, -16], [16, -29], [3, -11], [10, -30], [5, -27], [-11, -33], [-20, -39]], [[34573, 81059], [-9, -6], [-9, 0], [-8, 7], [-1, 11], [8, 23], [21, 12], [17, -3], [-1, -12], [-9, -19], [-9, -13]], [[14667, 81013], [138, -72], [138, -35], [102, -42], [62, -13], [22, -9], [15, -15], [17, -36], [29, -85], [23, -55], [46, -94], [37, -67], [8, -27], [-8, -8], [1, -16], [28, -65], [52, -59], [41, -28], [86, -45], [53, -45], [16, -30], [23, -30], [9, -21], [19, -76], [35, -73], [36, -139], [7, 11], [4, 42], [4, 9], [8, 5], [7, -17], [6, -36], [23, -87], [-7, -26], [-7, -2], [-31, 11], [-10, -15], [-15, -32], [-10, -13], [-6, 6], [-90, 31], [-55, 29], [-72, 45], [-87, 47], [-50, 33], [-41, 33], [-29, 29], [-5, 24], [1, 11], [56, 77], [23, 42], [9, 31], [5, 34], [-3, 41], [-3, -3], [-5, -40], [-8, -34], [-10, -28], [-6, -9], [-67, -14], [-54, 4], [-27, -33], [-8, -4], [-15, 11], [-33, 44], [-47, 36], [5, 9], [31, 19], [16, 26], [-3, 5], [-11, -2], [-10, 6], [-19, 34], [-10, 10], [-23, -16], [-10, -1], [-9, 23], [13, 53], [1, 13], [-24, -20], [-8, 7], [-7, 17], [-7, 7], [-19, -3], [-21, 15], [-7, -6], [-3, -23], [-7, -6], [-31, 39], [-8, 1], [-15, -29], [-5, -2], [-9, 13], [-4, 71], [2, 21], [4, 7], [28, 16], [79, 18], [7, 13], [-60, -7], [-15, 10], [-17, 24], [-17, 0], [-9, 8], [-10, 18], [-25, 64], [-17, 17], [-29, 10], [-15, 12], [-6, -5], [-6, -19], [-9, -11], [-19, -7], [-19, 5], [-14, 18], [-8, 22], [-4, 25], [8, 33], [0, 14], [-3, 15], [-7, 12], [-9, 10], [-5, -5], [-1, -20], [-5, -14], [-17, -11], [-13, 19], [-9, 27], [-11, 19], [-57, 0], [-27, -25], [-13, -2], [-13, 6], [-2, 13], [12, 35], [-3, 47], [-3, 12], [-27, 7], [-4, 12], [15, 57], [9, 11], [12, 4], [53, 4], [17, -8], [26, -34], [-1, 13], [-9, 39], [-2, 24], [18, 26], [-17, 8], [-63, 6], [1, -17], [5, -24], [-37, -21], [-28, -4], [-26, 4], [-21, 12], [-37, 51], [-23, 51], [1, 27], [13, 29], [16, 19], [39, 18], [51, 1], [57, -23], [143, -104]], [[34594, 81530], [-20, -58], [-14, -28], [-13, -9], [-28, -8], [-59, -9], [-25, -8], [-3, -39], [4, -20], [8, -16], [11, -4], [24, 9], [9, -1], [7, -8], [6, -15], [3, -20], [0, -25], [-4, -31], [-20, -73], [-25, -40], [-33, -33], [-7, -12], [-5, -15], [-4, -48], [-16, -38], [-52, -96], [-20, -22], [0, -17], [-8, -46], [-16, -36], [-43, -85], [-10, -30], [-5, -24], [1, -33], [-2, -15], [-10, -28], [-14, -27], [-3, -13], [6, -23], [5, -8], [1, -22], [-4, -34], [18, 22], [40, 78], [31, 47], [20, 16], [15, 21], [15, 46], [20, 44], [19, 15], [9, -9], [7, -21], [-1, -28], [-10, -33], [0, -10], [24, 24], [41, 21], [15, -3], [30, -30], [26, 3], [40, 18], [7, -8], [-7, -27], [-15, -26], [-37, -36], [-90, -72], [-28, -49], [5, 2], [20, 21], [20, 11], [21, 2], [9, -7], [-3, -14], [-3, -37], [-54, -74], [13, 3], [62, 33], [39, -46], [52, 16], [31, 16], [0, -10], [6, -20], [0, -33], [3, -5], [15, 11], [3, 12], [-1, 58], [5, 6], [10, -9], [6, -15], [2, -42], [-7, -43], [-9, -39], [-23, -57], [3, -24], [-6, -27], [5, -1], [23, 25], [1, 10], [-2, 24], [3, 11], [19, 26], [31, 31], [11, 4], [4, -7], [-2, -19], [10, 5], [20, 28], [18, 16], [17, 6], [18, 19], [19, 32], [20, 27], [21, 21], [9, 2], [-3, -35], [4, -40], [1, -34], [4, -7], [17, 36], [9, 13], [11, 6], [12, -3], [87, 13], [27, -9], [30, -24], [37, -36], [14, -33], [3, -42], [-4, -29], [-27, -37], [-24, -24], [-14, -24], [-5, -25], [-5, -15], [-16, -20], [-72, -59], [17, -2], [41, 13], [28, 3], [1, -9], [-11, -16], [-21, -17], [-2, -8], [1, -11], [22, -12], [29, 6], [24, -9], [-3, -14], [-19, -46], [-5, -28], [-26, -25], [-50, -37], [-13, -15], [3, -3], [46, 28], [24, 7], [14, 0], [17, 27], [26, 9], [26, -17], [39, 46], [14, 6], [24, -5], [15, 8], [26, 32], [20, 15], [4, -1], [4, -13], [2, -36], [-5, -32], [-6, -21], [-21, -45], [-13, -16], [-12, -6], [-21, 2], [-9, -7], [-20, -35], [-35, -36], [-22, -14], [14, -20], [5, -37], [-8, -12], [-37, -12], [-2, -6], [-13, -8], [-31, -13], [21, -6], [39, 9], [4, -6], [-5, -27], [-11, -27], [-46, -70], [0, -7], [7, -35], [9, -26], [11, -18], [26, -1], [19, 8], [27, 47], [62, 146], [55, 41], [45, 45], [11, -9], [5, -11], [-2, -11], [-23, -37], [-12, -31], [-31, -94], [-12, -45], [-6, -47], [1, -81], [4, -14], [9, -19], [19, 17], [31, 40], [20, 38], [15, 63], [10, 24], [10, -1], [10, -13], [2, -30], [8, -42], [6, -41], [-4, -46], [-5, -25], [-63, -186], [6, -33], [2, -20], [-2, -22], [-20, -89], [-19, -55], [-11, -24], [-12, -15], [-15, -5], [-13, 8], [-11, 21], [-10, 11], [-9, 1], [-17, -4], [-42, -45], [-9, -3], [-6, 6], [-8, 24], [6, 120], [4, 40], [-9, 30], [9, 52], [1, 19], [-6, 7], [-10, -4], [-17, -26], [-22, -47], [-23, -42], [-42, -57], [-18, -11], [-8, 2], [-8, 8], [-12, 24], [1, 22], [5, 29], [17, 68], [34, 101], [28, 72], [5, 31], [-7, 13], [-7, 27], [-11, 78], [-13, 64], [-16, 28], [-41, 32], [-7, -8], [-4, -43], [-48, -124], [-8, -54], [-6, -20], [-9, -14], [-21, -17], [6, 29], [22, 64], [-3, 6], [-28, -51], [-21, -29], [-26, -7], [-16, 2], [-15, -8], [-65, -121], [-3, -41], [-11, -33], [-32, -60], [-17, -21], [-24, -4], [-21, 11], [-15, -2], [-33, -19], [-38, -8], [-16, 4], [-10, 7], [-19, 24], [-2, 16], [1, 10], [10, 25], [22, 32], [18, 11], [45, 16], [33, 24], [25, 35], [12, 21], [47, 110], [60, 39], [29, 31], [21, 40], [3, 14], [-30, -20], [-15, -5], [-25, 7], [-11, 14], [-34, -4], [-47, 6], [-7, -10], [-6, -54], [-6, -28], [-7, -9], [-11, -6], [-21, -6], [-55, 19], [-11, 11], [-14, 8], [-60, -18], [-13, 2], [12, 12], [60, 40], [6, 112], [-3, 18], [-17, -16], [-28, -16], [-20, 5], [-9, 10], [-8, -9], [-19, -59], [-12, -7], [-17, -3], [-38, -21], [-73, -15], [-14, -15], [-49, 5], [-145, 33], [-52, -3], [-62, 20], [-12, 8], [-87, -3], [-26, 4], [2, 25], [-3, 6], [-25, -27], [-23, -18], [-29, -15], [-91, -26], [-49, -6], [-28, 18], [-11, 19], [-17, 59], [-12, 74], [0, 13], [6, 26], [19, 36], [87, 94], [69, 96], [30, 49], [28, 18], [46, 41], [2, 5], [-45, -5], [-32, 11], [-32, 5], [-62, -11], [-62, 0], [0, 21], [29, 40], [62, 68], [6, 1], [-19, -32], [-5, -24], [8, -16], [9, -10], [36, -4], [8, 14], [12, 73], [27, 85], [14, 61], [25, 47], [13, 7], [11, -9], [37, -11], [38, -43], [12, -3], [4, 3], [-14, 13], [-11, 20], [-5, 19], [14, 59], [16, 17], [3, 12], [-32, 0], [-26, 16], [-8, 27], [1, 47], [9, 28], [21, 37], [25, 25], [15, -6], [30, -34], [18, 10], [-3, 10], [-27, 53], [-9, 39], [1, 19], [59, 187], [29, 100], [40, 153], [9, 24], [20, 45], [9, 12], [25, 0], [16, 6], [-23, 19], [-8, 14], [-1, 15], [6, 15], [9, 12], [31, 24], [22, 40], [13, 48], [-2, 16], [-7, 16], [0, 9], [17, 10], [42, 56], [5, 11], [16, 75], [19, 33], [17, 17], [28, 21], [86, 52], [51, 46], [34, -3], [10, -32], [49, -21], [9, 23], [-12, 28], [10, 11], [40, 10], [7, -4], [12, -16], [-2, -14]], [[14465, 81493], [-4, -9], [-11, 0], [-18, 10], [-13, 21], [-16, 66], [2, 12], [5, 12], [25, 24], [10, -3], [3, -18], [15, -39], [5, -11], [0, -46], [-3, -19]], [[34622, 81733], [-14, -1], [-3, 7], [6, 22], [15, 26], [20, 7], [-6, -38], [-18, -23]], [[27949, 81769], [-12, -4], [-26, 4], [-22, 15], [-13, 18], [86, 51], [18, -6], [0, -10], [-13, -27], [-3, -18], [-6, -14], [-9, -9]], [[13603, 81774], [-5, -1], [-9, 12], [-7, 19], [-4, 51], [3, 20], [3, 8], [24, -32], [-5, -77]], [[14342, 82027], [-21, -7], [7, 31], [2, 18], [-4, 17], [-3, 33], [-1, 79], [21, 49], [33, 1], [-1, -25], [-14, -111], [-7, -51], [-5, -19], [-7, -15]], [[14184, 82090], [-9, -26], [-37, 63], [-13, 18], [-28, 67], [-5, 29], [1, 17], [5, 6], [9, -4], [8, -8], [53, -74], [15, -35], [1, -53]], [[14079, 82368], [-4, -5], [-11, 8], [-11, 15], [-19, 43], [-6, 18], [-4, 29], [3, 5], [9, -3], [5, -5], [30, -70], [8, -35]], [[27574, 82227], [-19, -8], [-58, 16], [-24, 11], [-71, 41], [-135, 61], [-46, 31], [-10, 22], [25, 48], [13, 19], [15, 12], [143, 22], [55, -11], [65, -97], [38, -66], [15, -52], [0, -26], [-6, -23]], [[13402, 82485], [28, -53], [8, -48], [-3, -56], [-45, -22], [-23, 17], [-11, -3], [-15, -17], [19, -7], [26, -28], [23, -36], [32, -6], [44, -25], [-33, -45], [-5, -26], [41, -72], [4, -18], [13, -4], [30, 6], [4, -6], [0, -15], [-19, -42], [2, -8], [17, -7], [32, 0], [8, -41], [-30, -38], [-55, 49], [-25, 48], [-14, 45], [-17, 25], [-52, 57], [-78, 121], [-21, 18], [-20, 48], [-6, 23], [1, 15], [7, 9], [24, 5], [0, 24], [-90, 42], [-10, 8], [-12, 30], [7, 4], [49, -5], [53, 14], [33, 11], [13, 13], [27, 17], [11, -1], [28, -20]], [[14291, 82338], [13, -184], [-1, -59], [-19, -38], [-13, -65], [-15, -29], [-15, 39], [-1, 64], [-4, 51], [-5, 24], [6, 95], [-6, -7], [-18, -41], [-19, -3], [-34, 47], [-17, 38], [-3, 40], [-22, 42], [-3, 15], [2, 16], [19, 42], [7, 28], [7, 58], [7, 23], [18, -3], [31, -27], [33, -28], [30, -39], [22, -99]], [[14120, 82440], [-2, -4], [-28, 0], [-8, 6], [-5, 12], [-2, 19], [4, 22], [17, 42], [1, 18], [3, 8], [12, -22], [5, -19], [3, -82]], [[27795, 82548], [-1, -17], [-18, 3], [-9, 10], [-8, 15], [-2, 12], [7, 11], [21, -7], [10, -27]], [[13931, 82469], [-6, -2], [-18, 7], [-60, 98], [-43, 35], [-29, 48], [-30, 31], [18, 50], [16, -6], [56, -41], [44, -39], [25, -26], [53, -110], [-4, -16], [-22, -29]], [[13823, 82925], [-8, -21], [-20, -32], [-13, -13], [-6, 6], [-18, 4], [-19, 32], [-14, 13], [-10, 1], [-5, -12], [-1, -15], [3, -20], [-2, -9], [-6, 2], [-5, 9], [-6, 16], [-1, 17], [4, 17], [13, 24], [42, 47], [13, 9], [14, -2], [23, -22], [5, -7], [17, -44]], [[13151, 83022], [26, -34], [61, 22], [11, -4], [12, -13], [12, -28], [14, -42], [3, -46], [-5, -17], [-11, -18], [-98, -73], [-2, -7], [2, -7], [9, -7], [19, 1], [77, 18], [5, 13], [5, 57], [11, 31], [0, 23], [-7, 55], [1, 22], [54, 5], [33, 20], [35, 38], [8, -1], [-5, -68], [-5, -21], [-33, -84], [-19, -73], [-9, -73], [-2, -120], [-8, -41], [-15, -25], [-93, -43], [-48, 2], [-43, 40], [-20, 27], [15, 33], [10, 2], [30, -7], [24, -12], [10, 0], [-2, 7], [-66, 63], [-49, 28], [-14, 32], [-1, 24], [-4, 14], [-38, 86], [-8, 34], [-5, 48], [0, 49], [10, 80], [4, 8], [16, -1], [27, -9], [66, -8]], [[13631, 83225], [-6, -1], [-3, 12], [2, 25], [9, 42], [4, 9], [36, -7], [5, -3], [1, -8], [-2, -13], [-12, -19], [-34, -37]], [[13729, 83392], [23, 37], [50, 64], [27, 47]], [[13829, 83540], [3, -46], [-40, -76], [-52, -38], [-11, 12]], [[33057, 84123], [3, -14], [-43, 10], [-15, 9], [-1, 9], [2, 15], [8, 17], [20, 13], [11, -7], [23, -17], [3, -11], [-11, -24]], [[28103, 84184], [-14, -8], [-10, 1], [2, 19], [14, 38], [8, 34], [2, 28], [6, 25], [10, 22], [11, 11], [15, -1], [4, -70], [-5, -32], [-10, -28], [-14, -22], [-19, -17]], [[27784, 84220], [-14, -4], [-17, 8], [9, 42], [14, 18], [36, 17], [7, 11], [11, 6], [17, 0], [19, 15], [21, 32], [7, 4], [-14, -46], [-16, -34], [-80, -69]], [[28073, 84254], [-23, -58], [-18, -56], [-25, -106], [-15, -3], [-13, 25], [37, 123], [1, 14], [-1, 12], [-11, 18], [-11, -21], [-52, -139], [-13, -22], [-11, -13], [-9, -2], [-22, 3], [-44, -40], [74, 165], [1, 13], [-14, 8], [-6, -5], [-60, -104], [-34, -40], [-23, 13], [-6, 10], [2, 13], [59, 104], [54, 75], [22, 48], [9, 44], [4, 33], [0, 36], [3, 10], [3, -2], [3, -14], [1, -38], [-12, -77], [-10, -38], [-12, -32], [5, -7], [22, 18], [18, 38], [15, 57], [9, 50], [10, 80], [3, -3], [4, -16], [10, -11], [15, -7], [9, -10], [6, -26], [7, -12], [23, -10], [9, -8], [6, -29], [-1, -16], [3, -9], [7, -5], [-8, -31]], [[27911, 84479], [-9, -7], [-7, 0], [7, 51], [-8, 18], [-1, 9], [4, 9], [5, 2], [11, -16], [6, -17], [2, -16], [0, -16], [-4, -11], [-6, -6]], [[27814, 84547], [-7, -10], [-14, 11], [0, 29], [13, 22], [10, -1], [10, -12], [-3, -15], [-9, -24]], [[32849, 84996], [23, -17], [6, -63], [-44, 4], [-50, 42], [-10, 31], [1, 5], [7, 5], [13, -7], [12, 11], [13, 3], [29, -14]], [[27856, 84974], [-4, -5], [-12, 4], [-5, -38], [-4, -3], [-9, 23], [7, 20], [-1, 14], [2, 10], [12, 23], [7, 5], [4, -2], [4, -29], [-1, -22]], [[30789, 85852], [-17, -42], [-23, 5], [-8, -8], [-6, -1], [10, 39], [1, 27], [-5, 27], [8, 13], [30, 1], [0, -31], [4, -11], [7, -6], [-1, -13]], [[27698, 86188], [-9, -2], [-2, 7], [7, 24], [12, 3], [13, 26], [12, -9], [-4, -15], [-16, -22], [-13, -12]], [[27760, 86273], [-29, -4], [13, 34], [10, 16], [12, 11], [24, 4], [16, -14], [-15, -25], [-31, -22]], [[32109, 86616], [-10, -40], [-32, 15], [-50, 30], [-20, 20], [-7, 22], [0, 30], [15, 5], [37, 3], [32, -42], [9, -6], [26, -37]], [[31046, 86544], [-25, -5], [-12, 12], [0, 35], [8, 26], [29, 55], [25, 62], [15, 14], [31, -10], [18, -17], [18, -30], [8, -22], [-7, -34], [-22, -29], [-25, -21], [-61, -36]], [[28185, 86824], [-38, -6], [0, 8], [16, 24], [59, 20], [44, 6], [-10, -20], [-26, -16], [-45, -16]], [[31991, 87192], [-7, -7], [-6, 2], [-21, 30], [-28, 13], [-10, 12], [-84, 63], [-9, 28], [-2, 22], [28, 11], [56, 10], [49, -1], [46, -13], [9, -14], [24, -26], [-6, -30], [-2, -40], [-10, -19], [-15, -14], [-12, -27]], [[24154, 87467], [-11, -1], [-26, 29], [-5, 15], [33, 9], [23, -26], [-2, -12], [-12, -14]], [[31936, 87487], [6, -5], [7, 6], [6, -5], [4, -16], [6, -12], [17, -14], [5, -11], [0, -11], [-14, -16], [-9, 0], [-66, 37], [-18, 39], [-1, 19], [7, 18], [10, 8], [13, 0], [16, -10], [11, -27]], [[27904, 87794], [22, -16], [36, -52], [14, -26], [4, -36], [-10, -48], [-5, -44], [-13, -34], [-25, -42], [-22, -50], [-20, -56], [-15, -38], [-13, -18], [-14, -10], [-14, -1], [-23, 21], [-30, 42], [-24, 25], [-31, 18], [-17, 23], [-3, 23], [-1, 76], [1, 37], [4, 32], [7, 25], [16, 34], [44, 75], [26, 29], [16, 7], [43, -6], [18, 2], [14, 9], [15, -1]], [[31993, 87879], [53, -6], [33, 2], [14, -9], [13, -28], [-17, -40], [-19, -16], [-31, -4], [-50, 13], [-17, 8], [-16, 22], [7, 15], [25, 5], [4, 7], [-6, 12], [0, 10], [7, 9]], [[29444, 87913], [-15, -5], [-55, 7], [-69, 27], [-35, 25], [2, 8], [15, 4], [18, -4], [29, -17], [80, -9], [25, -10], [8, -16], [-3, -10]], [[30462, 87873], [-20, -2], [-37, 4], [-40, 12], [-23, 14], [-19, 29], [-4, 33], [-38, 48], [-42, 16], [-23, 33], [24, 3], [34, -8], [49, -14], [45, -19], [64, -42], [21, -40], [21, -28], [7, -22], [-6, -10], [-13, -7]], [[27222, 88107], [11, -17], [3, -24], [-4, -32], [-7, -30], [-10, -27], [-25, -44], [-76, -77], [-28, -42], [-22, -25], [-124, -111], [-16, -6], [-16, 2], [-34, 17], [-34, 3], [-90, -45], [-4, 8], [-4, 48], [-9, 27], [-40, 57], [-2, 13], [0, 16], [3, 13], [45, 54], [101, 193], [24, 10], [49, -22], [24, -7], [17, 1], [72, 41], [68, -5], [63, 24], [29, 0], [23, -4], [13, -9]], [[28367, 88404], [24, -25], [24, 2], [14, -20], [32, -63], [3, -10], [-1, -21], [-17, -26], [-18, -13], [-37, -20], [-42, -9], [-23, 14], [-64, 58], [-59, 68], [-19, 38], [8, 16], [25, 11], [51, 11], [83, -6], [16, -5]], [[28700, 88360], [-29, -6], [-38, 13], [-38, 25], [-85, 80], [64, 54], [102, -63], [31, -40], [-7, -63]], [[28432, 88704], [-20, -26], [-59, 9], [-8, 8], [-2, 10], [9, 12], [61, 12], [26, 1], [14, -4], [1, -4], [-22, -18]], [[26411, 89435], [10, -7], [11, 4], [20, 29], [44, 82], [13, 7], [18, -1], [65, -52], [24, -30], [13, -41], [14, -16], [51, -21], [49, -7], [65, -21], [23, -16], [51, -78], [6, -5], [59, -32], [89, -72], [23, -10], [87, -24], [32, -17], [30, -27], [34, -49], [39, -77], [31, -123], [2, -24], [-3, -14], [-12, -16], [-50, -50], [4, -9], [48, 4], [105, 31], [65, -23], [22, -3], [5, 1], [24, 39], [25, -6], [38, -38], [24, -30], [10, -23], [-2, -13], [-25, -5], [60, -22], [53, -35], [-11, -23], [-57, -51], [-57, -45], [-67, -66], [-17, -11], [-9, 0], [-37, 12], [-54, 32], [-164, 73], [-51, 15], [-64, 9], [-9, 17], [-16, 110], [-29, 19], [-99, 23], [-29, 13], [-2, 22], [7, 38], [-14, 19], [-33, -1], [-33, -8], [-53, -26], [-25, -24], [-9, -25], [-6, -55], [-7, -26], [-18, -35], [-82, -88], [-33, -27], [-33, -7], [-13, -9], [-22, -32], [-33, -80], [-14, -23], [-21, -24], [-46, -36], [-46, -29], [-77, -33], [-42, -11], [-29, 11], [-20, 76], [-41, 223], [-7, 15], [-8, 9], [-10, 4], [-138, -29], [-76, 3], [-75, -50], [-19, -3], [-39, 1], [-27, 8], [-7, 6], [-5, 21], [2, 23], [9, 25], [34, 66], [28, 41], [13, 13], [129, 74], [31, 24], [16, 25], [0, 25], [-6, 33], [-23, 80], [-5, 73], [0, 36], [8, 55], [33, 135], [11, 66], [20, 234], [11, 67], [16, 62], [15, 37], [42, 73], [31, 30], [41, 20], [8, -2], [8, -9], [15, -31], [56, -29], [18, -28], [12, -31], [7, -40], [-7, -18], [-26, -27], [-5, -11], [1, -9], [51, -42], [38, -102]], [[26479, 89616], [-15, -6], [-15, 3], [-13, 17], [-11, 30], [-17, 22], [-39, 28], [-7, 11], [-11, 37], [-2, 37], [-9, 34], [0, 16], [7, 25], [33, 6], [26, -10], [5, -7], [8, -14], [6, -18], [31, -47], [18, -38], [25, -78], [0, -15], [-7, -16], [-13, -17]], [[26743, 89744], [35, -23], [36, -13], [57, -6], [8, -5], [0, -11], [-8, -16], [-19, -22], [-14, 0], [-31, 15], [-12, 7], [-13, 17], [-6, 2], [-9, -6], [-2, -7], [4, -10], [-5, -2], [-39, 6], [-6, 6], [3, 18], [27, 27], [-23, 8], [-8, 10], [-35, -17], [-19, -4], [-30, 12], [-4, 60], [-3, 23], [-14, 15], [-9, 16], [-13, 12], [-27, 12], [-23, 30], [-4, 14], [3, 10], [13, 14], [79, -30], [48, -29], [46, -36], [23, -26], [2, -17], [-5, -17], [-14, -17], [11, -20]], [[26910, 90024], [28, -7], [21, 1], [4, -9], [-22, -28], [-13, -5], [-25, 20], [-18, 25], [-5, 15], [-2, 16], [4, 3], [28, -31]], [[19974, 90440], [35, -5], [45, 1], [-8, -44], [-17, -29], [-14, -8], [-6, 16], [-26, 35], [-9, 34]], [[32588, 90469], [-34, -15], [-19, 19], [13, 6], [19, 23], [26, 20], [11, 17], [43, 8], [15, -1], [5, -6], [-24, -26], [-55, -45]], [[20028, 90668], [-14, -48], [-6, 5], [-9, 23], [-20, 11], [-21, 25], [0, 55], [8, 25], [-2, 35], [22, 21], [16, -25], [5, -42], [-4, -20], [16, -22], [7, -5], [4, -17], [-2, -21]], [[19676, 91003], [31, -6], [23, 4], [17, -23], [7, -23], [-2, -8], [-8, -4], [-49, 26], [-18, 16], [-6, 14], [5, 4]], [[29549, 90889], [-135, -1], [-74, 4], [-29, 9], [-26, 13], [-29, 45], [-19, 45], [-1, 20], [5, 17], [7, 11], [91, 15], [74, -19], [64, -22], [83, -4], [25, -9], [9, -6], [7, -11], [9, -53], [1, -28], [-2, -21], [-60, -5]], [[19632, 91008], [-10, -2], [-38, 34], [8, 30], [35, -31], [5, -18], [0, -13]], [[25945, 90861], [-11, -1], [-19, 9], [-43, 35], [-9, 15], [-4, 17], [0, 21], [3, 20], [14, 42], [-26, 33], [-6, 19], [3, 10], [14, 26], [4, 16], [14, 22], [37, 44], [37, -10], [32, -36], [9, -24], [-3, -26], [3, -37], [8, -49], [3, -36], [-4, -22], [-14, -41], [-12, -20], [-16, -18], [-14, -9]], [[28979, 91199], [145, -51], [14, -19], [7, -16], [4, -19], [0, -38], [-3, -15], [-14, -36], [-1, -12], [11, -123], [-1, -67], [-10, -56], [-21, -45], [-31, -34], [-24, -20], [-105, -48], [-75, -12], [-79, -2], [-100, -13], [-46, 3], [-24, 5], [-17, 10], [-19, 30], [-23, 51], [-18, 58], [-23, 102], [0, 12], [21, 83], [29, 56], [50, 82], [57, 81], [14, 14], [26, 14], [64, 23], [54, -6], [23, 3], [29, 10], [33, 3], [53, -8]], [[28060, 91124], [-23, -6], [-30, 30], [0, 17], [6, 41], [55, 10], [24, -24], [11, -24], [-43, -44]], [[20961, 91247], [-16, -2], [-28, 9], [-43, 21], [-31, 21], [-21, 23], [-3, 16], [16, 9], [24, 4], [57, -3], [28, -8], [36, -34], [7, -19], [2, -12], [-5, -11], [-23, -14]], [[29199, 91214], [-21, -4], [-32, 36], [-66, 40], [-25, 30], [-1, 14], [2, 22], [8, 27], [23, 30], [24, 5], [35, -7], [25, -21], [27, -59], [19, -29], [5, -21], [-9, -10], [1, -10], [4, -6], [-1, -11], [-8, -16], [-10, -10]], [[21709, 91351], [-11, -1], [-16, 10], [-90, 35], [-11, 11], [10, 15], [33, 19], [22, 19], [17, 30], [51, -16], [19, -14], [8, -12], [3, -17], [-3, -41], [-17, -9], [-15, -29]], [[22162, 91478], [-9, -18], [-11, -6], [-22, -21], [-8, -3], [-13, 14], [-11, 22], [-4, 3], [-7, 0], [-14, -15], [-7, 1], [-5, 9], [-3, 19], [0, 29], [7, 43], [1, 16], [-4, 12], [3, 12], [10, 10], [12, 4], [30, -4], [23, -17], [12, -23], [23, -18], [7, -13], [-10, -56]], [[22223, 91597], [-6, -34], [-34, 9], [-15, 12], [-13, 28], [-2, 8], [3, 10], [14, 25], [9, 9], [23, -11], [10, -14], [8, -23], [3, -19]], [[24863, 91716], [-23, -6], [-14, 24], [-12, 5], [-5, 16], [-24, 3], [2, 25], [7, 12], [22, 10], [17, -4], [17, -25], [8, -20], [7, -25], [-2, -15]], [[27997, 91500], [-19, -4], [-23, 11], [-8, 19], [-4, 19], [4, 10], [10, 9], [13, 21], [18, 32], [27, 22], [60, 21], [8, 7], [27, 58], [9, 9], [30, 6], [3, 8], [-10, 14], [0, 14], [10, 15], [15, 12], [39, 10], [35, -2], [9, -4], [7, -10], [11, -27], [1, -6], [-16, -24], [-42, -36], [-26, -31], [-5, -10], [-3, -13], [-9, -15], [-31, -38], [-20, -36], [-21, -20], [-56, -19], [-43, -22]], [[24944, 91831], [6, -36], [-24, -49], [-8, -8], [-10, -4], [-9, 6], [-28, 38], [-8, 24], [10, 12], [22, 15], [15, 7], [20, -6], [6, 10], [8, -9]], [[28612, 91672], [-35, -7], [-26, 4], [-17, 13], [-13, 19], [-16, 46], [6, 22], [2, 38], [3, 15], [6, 7], [37, 14], [21, -2], [32, -15], [69, -4], [18, -14], [4, -8], [-1, -10], [-4, -12], [-34, -35], [-17, -24], [-12, -29], [-23, -18]], [[21897, 91818], [-23, -5], [-4, 1], [2, 16], [-2, 8], [-6, 5], [20, 13], [3, 10], [-7, 7], [-27, 14], [-8, 13], [2, 11], [10, 10], [19, -2], [41, -18], [19, -26], [8, -20], [-13, -3], [-11, -8], [-11, -16], [-12, -10]], [[23468, 91920], [37, -39], [0, -19], [-5, -31], [-11, -24], [-16, -16], [-23, -8], [-29, -1], [-13, 7], [10, 24], [7, 8], [1, 21], [-5, 35], [-6, 22], [-16, 12], [-12, 1], [-3, -12], [5, -23], [-4, -30], [-13, -38], [-9, -17], [-18, 9], [-8, 14], [2, 23], [-4, 22], [4, 22], [12, 34], [17, 22], [21, 12], [26, -1], [29, -13], [24, -16]], [[11377, 91921], [-23, -21], [-37, 22], [-9, 11], [42, 30], [19, -1], [39, -18], [14, -15], [-45, -8]], [[31134, 91901], [-7, -4], [-72, 26], [-6, 21], [36, 24], [29, 12], [22, 2], [22, -4], [21, -25], [-25, -23], [-20, -29]], [[28325, 92001], [14, -29], [3, -15], [-20, -17], [-74, -33], [-46, -28], [-22, -7], [-31, 7], [-37, -14], [-15, 2], [17, 23], [58, 67], [49, 7], [16, 14], [14, -5], [8, 12], [1, 17], [17, 13], [16, 0], [32, -14]], [[27936, 92043], [11, -33], [7, -11], [-11, -15], [-41, -31], [-92, -13], [-46, 14], [22, -44], [4, -19], [-6, -8], [-20, 2], [-31, 13], [-19, 15], [-4, 18], [-7, 4], [-9, -10], [-8, 2], [-19, 27], [-14, 9], [-92, 16], [-4, 7], [5, 12], [14, 18], [20, 5], [52, -7], [4, 4], [4, 22], [4, 9], [36, -3], [22, 5], [13, -11], [12, -26], [17, 5], [26, -4], [28, 9], [43, 23], [33, 9], [46, -13]], [[22933, 91959], [9, -7], [16, 6], [12, 19], [8, 4], [12, -4], [39, -34], [29, -35], [32, -25], [50, -23], [110, -73], [32, -49], [34, -77], [31, -58], [26, -41], [29, -32], [46, -36], [41, 26], [18, 7], [15, -11], [14, -27], [-7, -12], [-18, -16], [-29, -17], [-42, -2], [-20, -5], [-32, -28], [-26, -35], [-36, -11], [-67, -57], [-37, -22], [-55, -5], [-114, 44], [-71, -6], [-58, 9], [-64, 48], [-51, 26], [-97, 39], [-6, 6], [-4, 13], [-2, 20], [-5, 14], [-6, 7], [-16, -1], [-15, -14], [-30, -11], [-46, 2], [-20, 9], [-15, 12], [-8, 15], [-1, 17], [-5, 13], [-7, 9], [-16, 0], [-26, -8], [-10, -11], [5, -13], [-4, -8], [-46, 0], [-18, 8], [-34, 24], [-15, 24], [-19, 43], [2, 11], [12, 26], [16, 19], [103, 10], [48, 11], [53, 29], [61, 52], [13, 15], [1, 11], [-4, 12], [-19, 30], [-7, 20], [6, 9], [25, 1], [-13, 12], [-11, 16], [-4, 10], [1, 16], [19, 4], [24, -8], [47, -47], [18, -9], [32, -7], [-34, 32], [-35, 67], [-4, 24], [1, 13], [9, 36], [8, 14], [11, 10], [33, 21], [53, 14], [28, 2], [27, -11], [24, -23], [54, -37], [8, -15], [-1, -7], [-20, -10], [-3, -9], [8, -14]], [[25857, 92230], [32, -4], [30, 5], [22, -5], [13, -16], [9, -17], [5, -18], [-12, -13], [-49, -11], [-34, 6], [-35, 15], [-17, -7], [-41, 11], [-20, 14], [-17, 21], [0, 13], [43, 14], [17, 12], [54, -20]], [[22136, 92451], [-3, -5], [-60, 22], [-23, 12], [-8, 10], [-5, 19], [-3, 28], [12, 14], [27, -1], [28, -11], [44, -31], [-12, -10], [-1, -20], [5, -20], [-1, -7]], [[29247, 77766], [-15, -2], [-26, 2], [-39, -19], [-50, -41], [-62, -73], [-109, -158], [-7, -17], [-16, -30], [-40, -31], [-36, -34], [-10, -35], [-17, -16], [-60, -91], [-34, -76], [-31, -81], [-34, -90], [-71, -1], [-53, 1], [-92, 0], [-78, 1], [-94, 0], [-67, 1], [-73, -4], [-35, -24], [-43, -32], [-47, -35], [24, -78], [7, -31], [-2, -99], [5, -11], [5, -14], [1, -26], [4, -12], [9, -9], [9, -11], [7, -15], [2, -15], [-7, -26], [-27, -36], [-38, -31], [-76, -56], [-87, -64], [-76, -57], [-59, -43], [-121, -38], [-96, -30], [-69, -22], [-64, -61], [-71, -67], [-59, -57], [-66, -63], [-63, -60], [-70, 0], [-49, 45], [-45, 46], [-31, 82], [-2, 96], [11, 63], [10, 28], [19, 18], [38, 31], [34, 62], [28, 38], [27, 38], [16, 66], [20, 160], [3, 32], [28, 110], [32, 121], [15, 56], [-17, 145], [-12, 111], [-11, 102], [-13, 115], [-11, 104], [-11, 99], [-11, 99], [-11, 96], [-8, 70], [-10, 82], [-58, 58], [-44, 41], [-73, 66], [-60, 55], [-54, 51], [34, 102], [-3, 17], [-13, 20], [-25, 34], [-15, 3], [-26, -8], [-41, -21], [-18, 7], [-15, 36], [-16, 46], [-6, 36], [-2, 47], [-9, 42], [6, 23], [1, 11], [0, 14], [-7, 9], [-12, 4], [-40, -18], [-18, -2], [-11, -10], [-17, -21], [-17, -2], [-29, 49], [-31, 54], [-13, 75], [-14, 77], [-54, 46], [-54, 46], [-54, 46], [-54, 46], [-53, 46], [-54, 46], [-54, 46], [-54, 46], [-19, 16], [-49, 40], [-69, 57], [-80, 65], [-79, 65], [-70, 57], [-49, 40], [-18, 16], [-48, 39], [-61, 45], [-65, -23], [-79, -62], [-46, -36], [-34, -26], [-24, -16], [-51, -14], [-26, 2], [-63, 9], [-35, -11], [-25, 11], [-13, 36], [-15, 23], [-63, -11], [-80, 8], [-38, -4], [-15, 15], [-12, 40], [-21, 5], [-35, -9], [-49, -51], [-47, -27], [-36, 0], [-36, 27], [-58, 53], [-41, 60], [-47, 21], [-35, -5], [-14, -30], [-18, 0], [-13, 51], [-11, 40], [-23, 17], [-41, 39], [-29, 20], [-45, 26], [-15, 4], [-29, 4], [-28, 2], [-34, -7], [-23, -32], [-28, -14], [-40, -7], [-27, 14], [-13, 33], [-57, 30], [-99, 26], [-58, 22], [-15, 18], [-8, 20], [-2, 31], [0, 1], [-26, 80], [-10, 67], [-5, 80], [1, 27], [-5, 8], [-18, 18], [-60, 11], [-1, -96], [-1, -121], [-66, 0], [-118, 0], [-119, 0], [-118, 0], [-118, 0], [-119, 0], [-118, 0], [-119, 0], [-118, 0], [-119, 0], [-118, 0], [-118, 0], [-119, 0], [-118, 0], [-119, 0], [-118, 0], [-119, 0], [-118, 0], [-119, 0], [-118, 0], [-118, 0], [-119, 0], [-118, 0], [-119, 0], [-118, 0], [-119, 0], [-118, 0], [-118, 0], [-119, 0], [-118, 0], [-119, 0], [-118, 0], [-119, 0], [-118, 0], [-119, 0], [-118, 0], [-118, 0], [-119, 0], [-118, 0], [-119, 0], [-118, 0], [-119, 0], [-118, 0], [-119, 0], [-118, 0], [-118, 0], [-119, 0], [-118, 0], [-119, 0], [-118, 0], [-119, 0], [-118, 0], [-118, 0], [-119, 0], [-118, 0], [-119, 0], [-118, 0], [-119, 0], [-118, 0], [-119, 0], [-118, 0], [-118, 0], [-119, 0], [-118, 0], [-119, 0], [-28, 0]], [[15892, 80064], [-11, 21], [-27, 26], [-10, 0], [-11, -8], [-7, -12], [-6, -27], [-4, -8], [-4, 1], [-3, 7], [-8, 37], [2, 16], [9, 20], [-1, 7], [-20, -6], [-8, 5], [-4, 10], [1, 42], [-11, 23], [13, 10], [32, 8], [34, 1], [9, 18], [10, 43], [-24, -40], [-14, -4], [-44, 15], [-29, -2], [-4, 8], [2, 9], [6, 9], [4, 31], [7, 85], [9, 31], [3, 16], [-2, 4], [-38, -59], [-3, -19], [4, -16], [-4, -33], [-18, -10], [-10, 5], [-20, -28], [-6, -3], [-91, 50], [-10, 6], [-15, 23], [-23, 40], [-7, 34], [9, 28], [8, 14], [10, 0], [10, -10], [21, -47], [8, -29], [22, 4], [35, 37], [8, 14], [-35, -14], [-15, 1], [-15, 15], [-16, 30], [-8, 34], [0, 107], [5, 20], [17, 16], [11, 25], [-1, 11], [-10, 22], [-15, 16], [-15, 9], [-4, -3], [23, -46], [0, -18], [-26, -46], [-4, -13], [0, -45], [-3, -9], [-21, -13], [-23, -35], [-39, -12], [-36, 4], [-20, 17], [-61, 86], [-22, 36], [0, 30], [-42, 107], [0, 23], [-14, 33], [-16, 5], [-4, 32], [33, 68], [21, 58], [2, 18], [-1, 28], [-5, 62], [5, 27], [-21, -36], [-4, -26], [5, -27], [-3, -30], [-12, -43], [-21, -45], [-42, -21], [-74, 12], [-8, 6], [-5, 15], [-4, 66], [-5, -8], [-8, -35], [-7, -51], [-9, -11], [-15, -1], [-12, 8], [-9, 17], [-19, 2], [-34, -14], [-17, 6], [-19, 0], [-40, 15], [-47, 4], [-12, 11], [1, 22], [8, 11], [49, 10], [48, 23], [47, 12], [-2, 11], [-21, 4], [-108, -26], [-34, 4], [-6, 4], [-1, 26], [13, 24], [21, 23], [6, 18], [-12, 7], [-20, -5], [-9, 14], [10, 55], [-9, 55], [-13, -52], [-19, -29], [-91, -13], [-15, -15], [-12, 0], [-58, 28], [-25, 17], [-23, 25], [-42, 57], [-33, 37], [-1, 67], [7, 43], [15, 49], [59, 104], [21, 19], [18, 7], [87, 9], [65, 13], [12, 7], [-95, 7], [-85, -5], [-29, -16], [-37, -67], [-9, -28], [-10, -21], [-7, 0], [-12, 7], [-4, 9], [-6, 22], [-19, 34], [-9, 40], [-5, 59], [1, 26], [10, 34], [28, 66], [-36, -2], [4, 55], [13, 61], [34, 35], [34, 26], [31, 34], [55, 22], [18, -46], [47, -14], [13, -21], [17, -38], [20, -36], [25, -35], [7, -3], [-11, 30], [-40, 65], [-2, 23], [-10, 25], [-52, 36], [-10, 14], [-9, 36], [-4, 24], [6, 22], [53, 69], [13, 37], [0, 17], [-5, 19], [-11, 34], [-3, 0], [3, -51], [-2, -20], [-6, -22], [-8, -17], [-12, -11], [-114, -158], [-12, -9], [-42, -14], [-22, -17], [-12, -22], [-19, -58], [-25, -115], [-30, -93], [-25, 121], [-46, 92], [89, 92], [2, 14], [-8, 49], [2, 15], [8, 21], [23, 32], [-1, 3], [-26, -12], [-41, -71], [-16, -22], [-8, -3], [-1, 41], [22, 109], [18, 105], [6, 30], [16, 30], [-15, -2], [-72, -47], [-24, 29], [-20, 153], [-36, 59], [-60, 49], [-59, 22], [-13, 43], [-12, 53], [16, 62], [26, 29], [23, 14], [23, -7], [1, -22], [-15, -61], [20, -6], [81, -74], [17, -6], [34, 28], [18, -1], [44, -23], [15, -28], [42, -54], [-6, 32], [-46, 66], [-25, 22], [-45, 4], [-28, -11], [-12, 3], [-24, 17], [-21, 28], [-21, 61], [-5, 29], [1, 21], [5, 19], [9, 17], [17, 13], [26, 7], [7, 8], [-32, 35], [-15, 0], [-52, -51], [-10, -5], [-5, 10], [-4, 1], [-15, -25], [-12, -11], [-42, -79], [-7, -37], [-2, -57], [-5, -35], [-7, -14], [-50, -27], [-28, -55], [-34, 48], [-38, 45], [-25, 80], [-45, 14], [-52, 45], [-20, 41], [28, 82], [41, 63], [6, 74], [6, 16], [70, 19], [46, 37], [-47, 4], [-29, -6], [-52, -26], [-57, 51], [-29, 47], [-10, 40], [10, 34], [2, 34], [5, 47], [5, 20], [12, 26], [25, 17], [22, 54], [9, 37], [44, 111], [16, 48], [31, 67], [61, 105], [-20, -6], [-10, -9], [-9, 1], [-9, 11], [-9, 24], [-8, 35], [-5, -16], [-1, -66], [-6, -57], [-11, -39], [-30, -80], [-18, -31], [-12, 29], [10, 50], [17, 40], [3, 54], [-16, 65], [-10, 53], [-4, 40], [-1, 36], [3, 33], [7, 35], [11, 39], [-1, 4]], [[13882, 84036], [3, 36], [-3, 37], [-9, 29], [-11, 26], [-33, -16], [-55, 23], [-18, 62], [-48, 20], [-25, 44], [-53, 22], [-42, 15], [-32, 25], [-38, 30], [-38, 32], [-29, 25], [-21, -2], [-48, -4], [-2, 55], [-15, 33], [5, 29], [-26, 15], [-40, 22], [12, 56], [8, 42], [-34, 12], [-51, 18], [17, 38], [13, 31], [-20, 45], [-39, 75], [-30, 54], [-39, 83], [-34, 74], [-28, 60], [-24, 41], [-33, 74], [-43, 84], [-41, 66], [6, 42], [-40, 54], [-36, 54], [-41, 62], [-40, 30], [-29, 22], [-41, 31], [-22, 28], [-9, 24], [-9, 17], [-9, 23], [-4, 27], [-9, 17], [-50, 40], [-15, 26], [-35, 29], [-29, 12], [-11, 10], [-35, 88], [6, 31], [4, 32], [-4, 16], [-59, 67], [-29, 28], [-30, 29], [-63, -37], [-65, -39], [-45, -14], [-62, -19], [20, -41], [-8, -31], [-20, -14], [-32, 2], [-1, -103], [-31, -74], [-65, -1], [-35, -25], [-52, -38], [-42, -30], [-44, -49], [-23, 7], [10, 44], [-17, 74], [-13, 61], [-29, 32], [-48, 53], [-37, 40], [-52, 57], [-36, 40], [-37, 41], [-50, 55], [-20, 71], [-46, 26], [-48, 27], [-40, 52], [14, 51], [16, 62], [0, 37], [-43, -3], [-65, -3], [-58, -3], [-43, -44], [-40, -40], [-62, 32], [-71, 35], [-20, -46], [-66, 23], [-66, 24], [0, 168], [0, 168], [0, 169], [0, 168], [0, 168], [0, 169], [0, 168], [0, 168], [0, 169], [0, 168], [0, 168], [0, 169], [0, 168], [0, 168], [0, 169], [0, 168], [0, 168], [0, 168], [0, 169], [0, 168], [0, 168], [0, 169], [0, 168], [0, 168], [0, 169], [0, 168], [0, 168], [0, 169], [0, 168], [0, 168], [0, 169], [0, 168]], [[10833, 91964], [39, -9], [126, -19], [119, 11], [221, -61], [137, -114], [111, -57], [45, -38], [72, -34], [169, -75], [53, -7], [98, -36], [61, 5], [104, -9], [71, -28], [140, -79], [29, -7], [8, 6], [-49, 78], [-8, 7], [-56, 29], [-67, 14], [-5, 6], [-12, 27], [4, 11], [14, 5], [50, -1], [29, 5], [4, 11], [-21, 2], [-25, 11], [-30, 18], [-17, 17], [61, 115], [21, -11], [32, 26], [58, -17], [10, 10], [7, 58], [9, 14], [16, 11], [80, 10], [99, -10], [11, 5], [-10, 39], [-1, 16], [6, 35], [6, 18], [12, 10], [46, -8], [15, -17], [15, -30], [16, -17], [49, -17], [6, -11], [-19, -45], [-19, -24], [-41, -62], [-3, -16], [63, 28], [71, 38], [60, 22], [51, 4], [36, 12], [22, 21], [16, 22], [31, 70], [21, 12], [87, -4], [21, 2], [13, 7], [-2, 8], [-19, 11], [-25, 3], [0, 5], [9, 12], [14, 6], [42, 8], [29, -25], [19, -2], [63, 28], [98, 74], [39, 21], [34, 3], [29, -13], [22, 4], [29, 41], [12, 23], [17, 19], [73, 43], [46, 10], [29, -8], [33, -18], [28, -7], [37, 5], [27, -2], [13, 8], [47, 50], [15, 0], [14, -14], [24, -36], [0, -18], [-31, -44], [-225, -126], [-69, -54], [-34, -20], [-36, -11], [-69, -9], [-27, -11], [-46, -10], [-109, -17], [-21, -9], [-14, -10], [-39, -66], [-18, -22], [-38, -33], [-41, -20], [-58, -7], [-36, -31], [-42, -60], [-33, -42], [-39, -36], [-42, -46], [-11, -25], [13, -32], [7, -10], [42, -18], [16, 4], [-15, 17], [-35, 25], [-5, 9], [9, 7], [166, -19], [36, 19], [12, 16], [-2, 9], [-45, 3], [-10, 15], [-7, 29], [-2, 23], [4, 17], [10, 22], [49, 35], [52, 15], [40, 20], [22, 19], [60, 32], [23, 27], [13, 20], [2, 10], [-11, 7], [9, 18], [43, 16], [20, 1], [61, -15], [11, -12], [-6, -31], [8, 2], [24, 39], [13, 13], [14, 3], [13, -5], [14, -13], [8, -38], [1, -63], [3, -25], [16, 43], [11, 20], [59, 93], [40, 51], [46, 50], [65, 37], [152, 61], [85, 17], [43, 15], [21, 13], [14, 17], [24, 19], [4, -2], [-9, -39], [-6, -12], [-56, -24], [-5, -19], [6, -29], [9, -19], [13, -9], [23, 6], [33, 23], [41, 34], [89, 86], [8, 16], [22, 69], [51, 31], [92, 35], [22, 22], [-80, 19], [-17, 13], [-3, 8], [15, 19], [-36, 20], [-14, 12], [1, 36], [11, 25], [24, 24], [14, 5], [36, -15], [30, -18], [104, -85], [42, -42], [25, -33], [58, -102], [26, -59], [21, -61], [21, -44], [20, -27], [100, -107], [52, -45], [44, -28], [49, -22], [57, -16], [38, -2], [60, 46], [1, 29], [-26, 50], [-27, 35], [4, 21], [35, 40], [-3, 14], [8, 42], [24, -8], [10, 1], [13, 15], [17, 29], [22, 24], [27, 19], [7, 12], [-26, 9], [-16, 0], [-12, 4], [-8, 8], [11, 9], [57, 22], [11, 22], [19, 14], [23, 5], [15, -6], [16, -17], [1, -28], [-7, -46], [-2, -37], [18, -87], [16, -19], [63, -25], [-4, -22], [-72, -91], [-16, -23], [-7, -17], [2, -14], [13, -12], [24, -9], [63, -3], [18, 8], [122, 3], [22, 6], [19, 18], [28, 44], [31, 14], [10, 12], [19, 52], [10, 61], [9, 26], [14, 16], [19, 5], [48, -6], [22, 5], [88, -5], [88, 4], [92, -11], [58, -12], [54, -20], [104, -46], [41, -26], [145, -113], [43, -23], [79, -22], [274, -49], [34, -13], [72, -51], [50, -30], [59, -29], [73, -25], [144, -37], [24, -13], [26, -3], [30, 5], [132, -22], [35, 1], [25, -4], [31, -15], [45, -6], [-2, 11], [-51, 59], [2, 9], [21, 1], [64, -10], [15, 17], [21, -1], [49, -8], [53, -18], [56, -28], [68, -24], [104, -60], [57, -50], [55, -62], [29, -43], [6, -24], [11, -12], [17, 0], [7, -9], [-16, -53], [-9, -14], [-12, -9], [-49, -11], [-136, 13], [-25, -43], [-76, -37], [-13, -16], [-4, -11], [6, -38], [-10, -12], [-62, -43], [-2, -12], [40, -18], [43, -30], [34, -7], [43, 4], [54, -11], [65, -25], [45, -12], [25, 2], [35, -4], [44, -12], [59, -4], [129, 1], [39, -8], [54, -4], [105, 1], [19, 1], [33, 21], [22, 6], [38, 1], [108, 14], [38, 0], [34, 11], [45, 23], [27, 4], [10, -14], [19, -6], [27, 2], [52, 23], [120, 71], [43, 0], [32, 22], [8, 0], [8, -9], [30, -52], [9, -8], [20, -4], [20, -27], [20, -39], [16, -11], [113, -2], [39, -11], [12, -11], [13, -31], [7, -60], [5, -22], [16, -33], [11, -9], [10, 9], [28, 84], [10, 13], [18, -4], [6, -5], [28, -62], [40, -46], [100, -84], [16, -31], [6, -23], [-6, -21], [-17, -18], [-27, -15], [-37, -11], [-34, 4], [-32, 19], [-10, 1], [11, -17], [66, -70], [17, -28], [16, -18], [14, -10], [13, -15], [12, -21], [55, -56], [16, -27], [62, -84], [30, -33], [23, -19], [8, -1], [-5, 15], [-79, 111], [-41, 70], [-5, 17], [-3, 26], [-2, 85], [6, 13], [28, 11], [35, -39], [13, -5], [9, 2], [5, 10], [20, -9], [36, -29], [12, 0], [-27, 54], [-19, 27], [-7, 19], [18, 28], [-10, 14], [-45, 41], [-24, 42], [-21, 65], [-2, 25], [3, 26], [-3, 22], [-29, 43], [-31, 30], [-24, 35], [-5, 19], [3, 50], [19, 21], [36, 29], [9, 30], [-16, 31], [-3, 14], [10, -2], [70, 15], [18, -5], [26, 6], [35, 19], [28, 9], [36, -2], [20, 5], [24, 8], [13, 9], [22, 36], [12, 6], [37, -4], [21, -8], [9, 3], [-1, 50], [7, 18], [37, 37], [39, 4], [25, 10], [30, 20], [21, 19], [21, 29], [9, 38], [-7, 11], [-44, 15], [-26, -8], [-59, -27], [-61, -34], [-24, -33], [-6, -41], [-12, -18], [-47, 17], [-21, 0], [-25, -7], [-27, -16], [-29, -25], [-42, -4], [-56, 15], [-33, 5], [-34, -26], [2, -20], [15, -28], [-15, -17], [-82, -6], [-21, 4], [-44, -12], [-17, 3], [-12, 13], [-89, 58], [-9, 11], [22, 47], [82, 126], [9, 8], [152, 22], [91, 23], [169, 69], [32, 6], [108, 46], [45, 12], [41, -8], [60, -24], [32, -21], [22, -26], [18, -37], [23, -81], [8, -69], [14, -26], [51, -48], [26, -18], [16, -6], [14, 11], [9, 2], [7, -4], [7, -31], [9, -3], [30, 4], [32, -12], [5, -10], [-7, -37], [9, -16], [40, -34], [37, -12], [44, -6], [81, 6], [68, 16], [51, 26], [42, -29], [84, -71], [50, -51], [41, -23], [84, -29], [19, -15], [31, -2], [43, 12], [48, -5], [54, -21], [37, -9], [127, 40], [20, 2], [47, 19], [31, 6], [36, 0], [27, 5], [17, 13], [68, -1], [122, -14], [84, -17], [49, -23], [41, -12], [32, -3], [31, 4], [30, 11], [32, 20], [68, 11], [11, 5], [-1, 11], [-14, 17], [-39, 32], [-27, 31], [-5, 20], [1, 24], [8, 14], [16, 4], [26, -15], [34, -34], [98, -126], [24, -17], [13, -17], [90, -45], [42, -9], [50, 29], [22, 17], [11, 17], [0, 17], [4, 24], [-5, 14], [-13, 20], [-36, 26], [-59, 34], [-53, 10], [-48, -14], [-55, -29], [-23, 12], [-68, 81], [-17, 31], [0, 8], [31, -9], [2, 9], [-19, 40], [-12, 13], [-39, 62], [-5, 18], [24, 5], [11, 7], [15, -1], [70, -37], [35, 17], [83, 23], [-33, 36], [-7, 35], [3, 8], [27, 5], [53, -29], [25, -4], [19, 11], [19, 1], [21, -10], [19, -15], [37, -43], [17, -26], [20, -39], [7, -6], [97, -3], [54, 35], [-1, -12], [-12, -27], [-68, -105], [1, -13], [36, 6], [17, 8], [10, 13], [9, 29], [6, 9], [101, 49], [29, 8], [-18, -53], [-37, -188], [-8, -65], [-8, -23], [-40, -72], [1, -25], [43, -61], [8, -17], [4, -50], [8, -9], [36, -1], [37, 16], [44, 11], [7, -11], [-24, -60], [1, -6], [42, 16], [19, 2], [8, -3], [31, -31], [3, -23], [0, -35], [-3, -24], [-11, -14], [-13, -6], [-16, -4], [-14, 2], [-44, -5], [-26, 6], [-25, 19], [-18, 5], [-21, -15], [-34, 3], [-37, 41], [-15, -4], [-5, -6], [0, -9], [17, -27], [132, -143], [20, -29], [4, -43], [3, 0], [12, 43], [-8, 20], [-67, 83], [-9, 31], [3, 8], [18, 9], [96, -21], [38, 4], [25, 15], [13, 18], [9, 99], [17, 63], [-10, 57], [-26, 90], [-21, 54], [-47, 53], [-5, 20], [53, 163], [9, 14], [12, 6], [42, 2], [30, 14], [47, -19], [26, -5], [33, 17], [72, 69], [28, 21], [36, 40], [43, 59], [48, 43], [76, 40], [47, 32], [10, 12], [-44, 2], [-10, 6], [-9, 30], [4, 57], [-1, 31], [-5, 28], [-9, 25], [-14, 23], [-13, 13], [-11, 4], [-8, -2], [-4, -8], [-12, -54], [-15, -39], [-20, -21], [-43, -14], [-72, -10], [-30, 19], [-4, 16], [10, 62], [25, 27], [66, 53], [42, 42], [1, 7], [-39, 1], [-9, 8], [-9, 52], [3, 20], [6, 22], [27, 16], [84, 20], [65, 23], [2, -8], [-52, -70], [-5, -16], [20, -16], [50, 41], [32, 34], [6, 11], [-30, 4], [-1, 14], [5, 26], [-2, 17], [-33, 22], [-40, -12], [-34, -23], [-28, -7], [-41, 0], [-30, 5], [-18, 11], [-23, 25], [-26, 38], [-33, 38], [-12, 4], [-10, -4], [-22, -37], [-9, -4], [-130, 52], [-56, 28], [-26, 22], [-34, 13], [-39, 4], [-32, 11], [-24, 16], [-19, 23], [-15, 31], [-27, 38], [-62, 77], [-16, 49], [-2, 19], [4, 49], [58, 82], [10, 24], [20, 17], [29, 11], [21, 4], [47, -11], [-28, 26], [-3, 13], [29, 45], [-6, 2], [-78, -34], [-20, 2], [-28, 21], [-52, 75], [-1, 47], [17, 65], [5, 38], [-15, 33], [6, 10], [16, 9], [7, 10], [-7, 36], [11, 20], [38, 38], [36, 33], [22, 10], [19, -2], [19, -10], [21, -19], [34, -19], [26, -5], [19, 10], [33, 71], [11, 18], [-11, 8], [-63, 0], [-28, 5], [-16, 7], [-11, 27], [9, 15], [62, 50], [29, 53], [86, 73], [87, 34], [43, 11], [34, 3], [15, -5], [18, -36], [4, -39], [47, -48], [38, -4], [24, 7], [76, -2], [18, -14], [-1, -15], [-9, -24], [6, -21], [51, -40], [47, -28], [42, -34], [63, -72], [13, -21], [10, -22], [16, -80], [2, -31], [-6, -88], [-5, -17], [-16, -20], [5, -8], [50, -23], [39, -46], [21, -15], [49, -24], [9, -9], [12, -16], [28, -66], [46, -59], [3, -13], [-10, -28], [7, -9], [18, -10], [16, 5], [14, 21], [15, 6], [17, -9], [12, -16], [17, -38], [25, -31], [-2, -10], [-12, -8], [-68, -8], [-37, 6], [-35, 15], [-25, 16], [-22, 24], [-9, -2], [-12, -20], [-25, -29], [-16, -27], [18, -12], [89, 1], [19, -8], [23, -19], [-26, -31], [-60, -53], [-129, -103], [-38, -26], [9, -8], [14, -2], [45, 5], [41, 14], [51, -6], [22, -12], [-8, -11], [14, -17], [83, -42], [52, 8], [53, 40], [41, 20], [51, -2], [14, -5], [-5, -10], [-38, -22], [-34, -25], [-3, -7], [42, 10], [94, -16], [45, -4], [34, 4], [31, -6], [29, -17], [9, -11], [-27, -6], [-25, 0], [-22, -11], [-18, -20], [-13, -26], [-8, -33], [-19, -13], [-31, 6], [-13, 9], [7, 13], [-9, 2], [-25, -10], [-20, 0], [-5, -9], [137, -104], [44, -91], [30, -38], [3, -10], [-20, -26], [-1, -19], [9, -56], [-4, -45], [-14, -78], [13, -25], [29, -22], [18, -27], [12, -10], [9, -22], [10, -14], [12, -6], [8, 8], [5, 20], [11, 19], [31, 34], [30, 54], [5, 17], [-5, 42], [4, 18], [28, 64], [9, 44], [8, 69], [15, 48], [32, 40], [56, 82], [20, 16], [22, 8], [40, -2], [28, -26], [39, -49], [49, -44], [90, -60], [25, -23], [51, -59], [21, -59], [15, -84], [13, -50], [10, -17], [5, -25], [-1, -34], [-4, -26], [-7, -19], [-11, -11], [-27, -4], [-34, 6], [-9, 8], [-18, 40], [-7, 2], [-31, -29], [-4, -16], [12, -54], [-2, -102], [3, -23], [33, -106], [55, -81], [138, -155], [8, -18], [15, -64], [7, -13], [9, -8], [11, -2], [15, 6], [51, 48], [44, 51], [31, 27], [18, 2], [18, 9], [21, 17], [13, 18], [7, 19], [9, 77], [8, 37], [21, 50], [8, 14], [107, 127], [9, 16], [45, 147], [17, 67], [2, 41], [-6, 36], [3, 30], [12, 24], [13, 16], [22, 17], [13, 24], [7, 2], [19, 0], [24, -16], [17, -3], [113, 19], [0, 9], [-66, 31], [1, 16], [5, 21], [21, 24], [26, 7], [6, 15], [0, 19], [9, 31], [-8, 11], [-62, 42], [-36, -2], [-9, 5], [-31, 35], [-11, 50], [-1, 20], [4, 33], [4, 9], [-2, 15], [-8, 20], [0, 19], [6, 16], [-4, 19], [-14, 22], [-6, 18], [15, 56], [1, 17], [-15, 24], [-10, 9], [8, 6], [25, 2], [31, -7], [36, -18], [43, 0], [52, 17], [52, 9], [91, -4], [21, -5], [90, -52], [70, -26], [32, 3], [156, -11], [68, 6], [35, -3], [68, -28], [-4, -24], [-30, -39], [-38, -8], [-34, -14], [32, -21], [92, -28], [22, -44], [6, -21], [-11, -18], [6, -10], [21, 0], [55, 16], [61, -10], [89, -35], [10, -7], [15, -27], [-2, -11], [-78, -67], [-41, -27], [-54, -27], [-1, -15], [75, -3], [58, -7], [27, -9], [14, -13], [19, -27], [3, -22], [-2, -29], [-6, -20], [-69, -59], [-31, -18], [-53, -21], [-23, -17], [-26, 3], [-28, 20], [-28, 5], [-52, -17], [-29, 1], [-13, -6], [-2, -13], [25, -37], [14, -14], [6, -11], [-11, -18], [3, -6], [8, -7], [47, -80], [10, -6], [10, 3], [20, 23], [13, 9], [5, -1], [0, -12], [-22, -70], [-2, -19], [0, -17], [11, -35], [23, -38], [30, -35], [45, -46], [60, -49], [22, -24], [33, -56], [7, -22], [-9, -59], [-24, -97], [-15, -55], [-7, -14], [-45, -39], [-26, -9], [-42, 1], [-14, -8], [-22, -31], [-30, -55], [-24, -35], [-17, -14], [-32, -17], [-50, -51], [-24, -20], [-86, -21], [-69, -68], [-28, -23], [-30, -12], [-32, -2], [-19, 11], [-10, 42], [-7, 14], [-24, 29], [-50, 83], [-22, 29], [-14, 6], [-30, -5], [-14, 3], [-33, 26], [-11, 17], [1, 7], [25, 9], [-11, 14], [-43, 37], [-18, 20], [-2, 6], [-43, 26], [-43, 7], [-53, -42], [-21, -29], [1, -9], [26, -11], [11, 6], [22, 26], [11, 8], [33, -4], [28, -18], [10, -16], [4, -11], [75, -83], [26, -17], [12, -20], [8, -33], [16, -37], [36, -61], [39, -75], [8, -30], [-20, -14], [-10, -1], [-30, 11], [-78, 35], [-9, -1], [-20, -18], [-17, -42], [-5, -4], [-42, 17], [-78, 36], [-52, 31], [-27, 26], [-32, 41], [-37, 56], [-45, 17], [-52, -20], [-76, -7], [-158, 6], [-21, -5], [-8, -7], [14, -30], [-4, -9], [-10, -6], [-3, -9], [18, -32], [27, -23], [79, -30], [52, -25], [32, -22], [10, -19], [1, -20], [-15, -41], [-8, -15], [-183, -203], [-70, -82], [-35, -50], [-32, -33], [-27, -17], [-45, -9], [-62, -2], [-81, 8], [-42, 26], [-76, 70], [-54, 41], [-23, 14], [-20, 39], [-18, 7], [-39, 7], [-39, 21], [-92, 70], [-48, 28], [-44, 15], [-39, 3], [-15, -4], [27, -36], [-12, -2], [-31, 8], [-32, 0], [-55, 26], [-55, -4], [-39, 5], [-48, 14], [-51, 7], [-82, 0], [-29, -3], [-5, -7], [40, -31], [68, -37], [-9, 32], [2, 8], [23, 11], [107, -19], [122, -42], [31, -4], [34, -15], [38, -25], [52, -51], [99, -116], [32, -29], [43, -27], [215, -40], [75, 0], [149, -11], [79, -21], [22, -15], [7, -51], [-7, -26], [-43, -79], [-27, -58], [-168, -245], [-22, -57], [-9, -34], [-30, -34], [-76, -55], [-76, -46], [-46, -10], [-41, 11], [-26, 14], [-39, 45], [-3, -4], [29, -72], [-7, -7], [-23, 9], [-53, 32], [-17, -6], [-10, -9], [-14, 0], [-18, 10], [-32, 26], [-9, 13], [-7, 40], [-6, 7], [-64, -23], [-10, -7], [26, -16], [9, -12], [25, -58], [2, -13], [-19, -8], [-61, 23], [-7, -2], [30, -59], [12, -27], [1, -15], [-39, -66], [-25, -27], [-35, -10], [-21, 6], [-24, 17], [-18, -2], [-11, -22], [-20, -15], [-29, -9], [-37, 4], [-45, 17], [-120, 62], [-37, 9], [-70, 9], [-9, 9], [1, 8], [10, 8], [-3, 7], [-15, 6], [-15, -6], [-16, -16], [-28, -5], [-40, 7], [-59, 24], [-116, 62], [-128, 53], [-74, 68], [28, -62], [-3, -20], [-14, -19], [-2, -18], [29, -44], [40, -15], [40, 1], [1, 7], [-16, 11], [-15, 16], [-7, 24], [7, 4], [36, -12], [23, -15], [177, -81], [53, -15], [40, -15], [11, -10], [-14, -20], [-71, -50], [-1, -8], [49, 4], [59, 45], [33, 20], [32, 13], [43, -22], [55, -56], [44, -32], [63, -18], [37, -19], [62, -53], [10, -27], [6, -111], [-2, -27], [-8, -27], [-14, -26], [-26, -15], [-38, -3], [-30, -11], [-65, -59], [-28, -9], [-117, 18], [-45, 16], [-21, -1], [-12, -13], [-12, -6], [-46, -5], [-8, -11], [3, -16], [9, -22], [11, -13], [18, -16], [26, -11], [53, -12], [6, -30], [-2, -10], [-18, -20], [-20, 2], [-35, 24], [-18, 1], [-15, -13], [-21, -4], [-27, 4], [-15, -10], [-3, -25], [-9, -19], [-31, -30], [-17, -22], [0, -18], [18, -12], [21, -28], [23, -45], [5, -19], [-15, 5], [-19, 18], [-24, 29], [-36, 27], [-80, 35], [-15, -1], [8, -9], [53, -36], [20, -24], [3, -17], [-45, -38], [-1, -13], [12, -11], [3, -9], [-16, -18], [-26, -16], [-51, -2], [-4, -9], [19, -19], [6, -12], [-16, -16], [-11, -2], [-58, 7], [15, -40], [9, -14], [18, -20], [32, -19], [1, -7], [-11, -16], [-19, -20], [-81, -59], [-56, -70], [-8, -22], [14, -45], [1, -12], [-15, -21], [-33, 6], [-7, -8], [8, -22], [2, -31], [-5, -42], [-24, -66], [-43, -88], [-33, -81], [-23, -73], [-16, -36], [-31, -2], [-23, -23], [16, -12], [9, -14], [7, -21], [-7, -67], [-19, -111], [-13, -89], [3, -274], [-3, -121], [-9, -67], [-14, -37], [-24, -11], [30, -10], [20, -17], [9, -26], [8, -42], [12, -19], [13, 3], [13, -4], [11, -12], [33, -59], [37, -17], [2, -33], [-15, -184], [0, -24], [17, 46], [18, 144], [23, 63], [19, 14], [77, 7], [81, -16], [31, -2], [27, 8], [28, -17], [6, -18], [8, -75], [8, -43], [48, -153], [23, -86], [29, -133], [10, -38], [59, -178], [11, -49], [5, -37], [-2, -26], [-11, -40], [-19, -54], [-18, -42], [-17, -28], [-18, -22], [-18, -14], [1, -3], [21, 6], [20, 15], [39, 37], [15, 8], [43, 5], [1, -13], [-20, -28], [4, -2], [30, 22], [64, 31], [252, 103], [59, 9], [85, -19], [69, -43], [75, -56], [79, -41], [124, -38], [37, -18], [73, -19], [34, -21], [40, -52], [65, -67], [49, -42], [54, -39], [55, -73], [88, -164], [22, -20], [54, -27], [102, -35], [151, -81], [66, -32], [43, -13], [43, -22], [43, -32], [32, -35], [23, -38], [19, -25], [35, -28], [18, -19], [2, -30], [-42, -116], [-1, -10], [42, 84], [24, 24], [19, 11], [39, -1], [59, -14], [53, 0], [44, 13], [39, 6], [31, -1], [23, 4], [14, 10], [17, 0], [68, -29], [27, -2], [99, -27], [63, 10], [11, -5], [22, -36], [19, -3], [31, 6], [31, -10], [51, -46], [23, -40], [23, -82], [2, -25], [-42, -190], [-13, -73], [-2, -65], [8, -36], [37, -62], [6, -17], [22, -91], [6, -39], [-3, -45], [-11, -75], [3, -56], [9, -85], [-3, -58], [-17, -31], [-11, -29], [-9, -54], [0, -21], [9, -40], [16, -23], [26, -25], [24, -38], [45, -92], [33, -51], [39, -75], [8, -38], [-11, -25], [-14, -17], [-32, -23], [-14, -17], [3, -4], [47, 12], [27, -1], [23, -19], [19, -36], [32, -30], [43, -25], [44, -43], [74, -100], [13, -23], [19, -52], [26, -82], [13, -54], [1, -25], [-14, -25], [-49, -46], [-50, -81], [16, 4], [32, 34], [56, 67], [30, 13], [29, -7], [45, -20], [39, -27], [35, -36], [51, -95], [55, -76], [30, -65], [-9, 41], [-20, 48], [-51, 76], [-22, 39], [-5, 19], [-2, 21], [4, 37], [10, 55], [13, 39], [16, 22], [10, 24], [6, 25], [8, 19], [44, 33], [12, -3], [9, -41], [10, -8], [21, -6], [17, -15], [14, -21], [10, -23], [6, -22], [13, -73], [9, -34], [2, 41], [11, 65], [8, 26], [27, 39], [-2, 17], [-11, 22], [-56, 97], [-1, 24], [15, 14], [11, 26], [5, 40], [12, 28], [35, 40], [30, 62], [16, 42], [12, 23], [13, 5], [-18, 17], [-4, 11], [-1, 51], [-8, 54], [-12, 25], [-34, 53], [-6, 16], [-6, 60], [4, 30], [9, 26], [-5, 24], [-32, 45], [-12, 39], [-14, 93], [-13, 118], [-14, 86], [-16, 56], [-3, 35], [9, 14], [11, 44], [10, 10], [16, -2], [1, 5], [-25, 23], [-12, 30], [1, 11], [21, 29], [-3, 12], [-16, 16], [-49, 28], [18, 10], [11, 23], [-2, 7], [-20, 10], [-22, 17], [-17, 27], [-20, 42], [-13, 34], [-12, 56], [-22, 63], [-9, 16], [-11, 10], [-12, 5], [0, 10], [13, 14], [210, 106], [18, 16], [103, 59], [48, 33], [48, 48], [66, 49], [32, 31], [21, 31], [105, 122], [44, 62], [26, 53], [37, 64], [49, 75], [31, 63], [13, 54], [16, 91], [4, 82], [3, 119], [-1, 106], [-14, 167], [-7, 53], [-15, 62], [-37, 125], [-6, 35], [-23, 57], [-74, 151], [-92, 101], [-18, 26], [-36, 30], [-56, 34], [-36, 28], [-94, 104], [-31, 13], [-11, 27], [-3, 19], [4, 50], [5, 34], [7, 26], [7, 16], [52, 77], [29, 61], [20, 34], [22, 26], [41, 34], [23, 44], [-6, 17], [-18, 19], [-4, 19], [31, 47], [4, 13], [-4, 45], [6, 10], [38, 3], [54, -64], [13, 5], [-17, 18], [-21, 43], [3, 18], [40, 47], [1, 21], [-12, 29], [-1, 24], [23, 55], [-6, 12], [-65, 11], [-11, 16], [4, 7], [31, 19], [2, 7], [-54, 125], [-9, 37], [23, 46], [26, 20], [-3, 12], [-35, 2], [-21, 7], [-21, 35], [8, 23], [8, 10], [20, 54], [20, 11], [-4, 9], [-74, -23], [-35, 19], [-35, -5], [-16, 6], [6, 19], [62, 86], [29, 47], [18, 43], [10, 28], [1, 14], [-6, 93], [3, 26], [25, 24], [37, 44], [-51, 41], [-32, 39], [-21, 20], [-16, 19], [-21, 40], [-15, 53], [-17, 106], [-3, 58], [4, 42], [7, 21], [11, 22], [47, 41], [82, 60], [64, 24], [47, -13], [90, -15], [73, -34], [222, -86], [40, -38], [-37, -33], [5, -8], [84, 62], [22, 12], [19, 3], [63, -24], [25, -4], [32, -20], [76, -66], [6, 6], [-21, 34], [12, 15], [60, 35], [62, 29], [44, 28], [47, 37], [32, 20], [16, 2], [21, -11], [56, -49], [36, -25], [29, -26], [40, -47], [16, -10], [31, -32], [41, 3], [13, -3], [4, -7], [7, -21], [4, -14], [0, -14], [-9, -42], [-30, -66], [13, -1], [18, 14], [24, 25], [19, 9], [40, -20], [38, -32], [13, -17], [15, -28], [12, -15], [12, -27], [-1, -9], [-11, -14], [-46, -22], [9, -9], [53, 14], [17, 14], [11, 24], [16, 6], [63, -41], [9, -14], [-4, -11], [-10, -13], [-27, -14], [-24, -35], [-4, -15], [17, -11], [41, -4], [0, -8], [-24, -16], [-3, -20], [53, -71], [36, -32], [21, -5], [48, -2], [39, -12], [86, -40], [51, -8], [44, 13], [29, 2], [25, -16], [8, -11], [4, -23], [0, -34], [14, -24], [28, -14], [23, 2], [31, 27], [25, 5], [9, 20], [7, 37], [8, 20], [18, 6], [15, -11], [9, -17], [16, -51], [4, -23], [-1, -20], [-8, -19], [-16, -20], [-23, -21], [-19, -31], [-22, -70], [-9, -46], [-2, -28], [1, -29], [4, -33], [9, -27], [21, -37], [1, -13], [2, -30], [-2, -14], [-12, -27], [-34, -26], [-46, -7], [-152, -1], [-41, 6], [10, -24], [43, -8], [38, 0], [145, -15], [20, -15], [17, -28], [12, -28], [12, -57], [2, -27], [-6, -31], [-15, -33], [-10, -44], [-5, -55], [8, -29], [78, -3], [15, -20], [-1, -15], [-28, -56], [-3, -15], [13, -38], [-2, -11], [-7, -11], [-8, -28], [-7, -46], [-9, -30], [-21, -22], [-11, -5], [-8, 6], [-21, 62], [-9, 9], [-8, -6], [-4, -9], [0, -14], [-4, -14], [-7, -14], [-31, -23], [-50, -16], [1, -16], [34, -9], [43, -28], [25, -4], [38, 22], [75, 71], [31, 19], [27, 7], [30, 1], [34, -5], [68, 9], [17, -7], [20, -15], [25, -25], [17, -23], [9, -23], [15, -85], [21, -23], [4, -16], [2, -25], [-1, -49], [-23, -100], [-11, -36], [-31, -50], [-36, -23], [-64, -21], [-33, -18], [-25, -25], [-1, -13], [72, 42], [79, 20], [23, 24], [17, 22], [17, 50], [32, 130], [18, 40], [25, 7], [11, -14], [26, -76], [0, -19], [-7, -16], [-42, -74], [15, 7], [43, 70], [9, 21], [5, 32], [14, 23], [5, -11], [13, -82], [0, -60], [3, -19], [-5, -56], [5, -10], [13, 49], [4, 37], [6, 26], [7, 16], [52, 50], [61, 40], [40, 36], [33, 17], [50, 17], [31, 33], [14, 50], [12, 35], [10, 20], [33, 34], [17, 2], [17, -12], [20, -26], [21, -40], [13, -30], [4, -23], [4, -78], [4, 0], [19, 60], [3, 21], [-2, 23], [-6, 22], [-20, 49], [-7, 31], [1, 18], [22, 11], [31, 4], [5, 8], [-23, 21], [-1, 11], [22, 36], [13, 1], [26, -5], [-5, 18], [0, 12], [7, 5], [42, -11], [5, 14], [36, 1], [4, 12], [-32, 18], [-30, 12], [-10, 9], [-7, 15], [-9, 35], [2, 9], [9, 0], [14, -9], [9, 18], [9, 43], [9, 18], [28, -21], [1, 9], [-23, 68], [4, 13], [35, 5], [21, -9], [55, -49], [11, 5], [-9, 14], [-28, 29], [-26, 19], [-23, 9], [-17, 16], [-19, 45], [-3, 18], [2, 24], [13, 50], [7, 11], [14, 8], [19, 5], [21, -5], [44, -33], [7, 11], [-23, 18], [-13, 16], [-6, 21], [2, 24], [19, 49], [9, 40], [39, 109], [12, 20], [12, 12], [8, 13], [31, 3], [57, -39], [18, -23], [4, -32], [-30, -45], [-51, -33], [-16, -14], [10, -9], [49, 27], [42, 12], [34, 0], [28, -53], [4, -73], [-16, -60], [21, 30], [26, 17], [22, -40], [2, -32], [12, -31], [24, -40], [25, -36], [-28, -37], [-33, -23], [7, -16], [46, -18], [6, -18], [-5, -24], [7, 1], [32, 36], [27, -5], [34, -79], [-25, -46], [-39, -21], [-30, -9], [-43, 2], [-17, -7], [8, -15], [41, -1], [63, 12], [47, 19], [20, 1], [22, -8], [7, -6], [-23, -13], [-1, -5], [8, -13], [18, -44], [-2, -10], [-17, -25], [27, -5], [38, 12], [11, -14], [23, -52], [15, -53], [-64, -73], [-32, -15], [-48, -39], [-13, -31], [-28, -39], [18, 0], [49, 64], [24, 15], [18, -4], [7, -11], [-3, -18], [16, 3], [66, 37], [28, 7], [36, 3], [3, -13], [-22, -89], [-38, -69], [-70, -42], [-24, -25], [-31, -40], [12, -7], [66, 52], [45, 21], [64, 17], [28, -3], [51, -104], [28, -10], [24, 5], [44, -30], [16, -29], [-4, -21], [-15, -13], [-7, -19], [18, -58], [-11, -33], [-32, -29], [-23, -14], [-24, -5], [-24, -25], [-10, -4], [-33, 6], [11, -15], [16, -8], [26, -4], [30, 8], [30, -1], [46, -19], [20, -23], [0, -6], [-10, -13], [-15, -42], [-10, -15], [9, -12], [23, -18], [17, -6], [23, 6], [25, -8], [82, -99], [-4, -51], [-12, -40], [5, -44], [0, -55], [-44, -15], [-148, 25], [-84, 39], [-5, 12], [24, 26], [-21, 2], [-24, -10], [-11, -10], [29, -41], [77, -36], [35, -44], [38, -4], [11, -8], [21, -25], [-6, -9], [-39, -3], [-30, -30], [19, -17], [69, -16], [49, -4], [25, -17], [-20, -19], [-58, -22], [-2, -33], [43, -14], [38, 8], [16, -3], [11, -80], [7, -17], [-41, -14], [-1, -16], [28, -13], [45, -10], [15, -15], [3, -24], [9, -12], [26, -3], [29, 30], [17, 25], [25, -9], [1, -31], [30, -36], [10, -6], [9, -51], [24, 45], [17, -9], [20, -2], [-7, -44], [-11, -34], [15, -22], [12, -32], [33, -43], [-9, -21], [-38, -45], [-20, -72], [-5, -24], [-20, -41], [-26, -40], [16, 4], [60, 73], [36, 25], [78, 13], [19, 20], [29, 9], [18, -23], [1, -42], [24, -14], [24, 14], [22, -12], [-13, -26], [-71, -108], [-21, -44], [-6, -31], [24, 43], [90, 97], [9, 14], [20, 42], [18, 27], [48, -10], [25, -19], [11, -55], [19, -59], [30, -65], [78, -32], [28, -6], [49, 23], [7, 30], [38, 10], [27, -4], [9, -59], [29, -31], [28, -26], [27, -14], [40, -6], [22, -28], [0, -12], [-22, -30], [-22, -45], [-38, -31], [-53, -1], [-72, -20], [-3, -17], [-16, -19], [-39, -20], [-21, -14], [-35, -72], [-20, -31], [-24, -6], [-34, 3], [-22, -6], [-16, -14], [-10, -19], [-7, -7], [-45, -20], [-82, -55], [-44, -2], [-26, 7], [-21, -5], [-14, -15], [-39, -27], [-12, -16], [-7, -19], [-5, -38], [-5, -14], [-7, -8], [-33, 8], [-37, 25], [7, -27], [58, -44], [17, -25], [-16, -21], [-37, -34], [-4, -18], [15, -10], [-6, -15], [-20, -16], [2, -7], [2, -6], [51, 23], [45, 50], [29, 50], [14, 14], [58, 19], [34, 22], [49, 39], [54, 58], [58, 76], [74, 59], [91, 42], [66, 22], [42, 1], [2, 7], [-37, 14], [-32, 2], [-39, -10], [-12, 24], [2, 10], [12, 17], [33, 15], [161, -21], [55, -17], [60, -137], [14, -44], [4, -32], [-6, -20], [-24, -24], [-69, -48], [-9, -12], [-1, -7], [30, -9], [9, -14], [15, -52], [31, 34], [58, 83], [48, 38], [40, 11], [47, 5], [17, -1], [6, -27], [25, -54], [23, -14], [45, -7], [40, -67], [15, -46], [14, -27], [-1, -19], [2, -15], [11, -23], [5, -19], [-3, -45], [-23, -77], [17, -71], [-7, -31], [-4, -51], [14, -33], [5, -20], [-13, -11], [-88, -28], [-35, -1], [-9, -17], [27, -5], [48, 1], [59, -17], [27, -19], [11, -27], [-3, -21], [-17, -16], [-33, 3], [-32, 15], [2, -14], [47, -35], [14, -17], [26, -22], [5, -30], [-6, -30], [-90, -120], [-73, -76], [-74, -67], [-119, -129], [-12, -6], [-21, -3], [-57, 21], [-45, -5], [-85, -25], [-24, -15], [-47, -45], [-18, -6], [-51, -9], [-47, 6], [-19, -7], [-23, -21], [-6, -12], [-7, -38], [-115, -168], [-31, -57], [-59, -60], [-65, -106], [-57, -43], [-19, -58], [-54, -36], [-100, -9], [-47, -10], [-55, 16], [-42, -25], [-62, -8], [-30, 6], [-121, -57], [-31, 54], [-23, 21], [-68, 3], [-55, 22], [-50, 4], [-48, 10], [-32, 0], [-33, -6], [-52, 2], [-29, -30], [-96, 9], [-41, 27], [-34, 6], [-44, -6], [-43, -20], [-94, 22], [-100, -19], [-87, 13], [-24, 13], [-138, -35], [-53, 20], [-48, -54], [-32, 11], [-35, -8], [-12, 11], [-23, -8], [-15, -29], [-20, -3], [-33, -52], [-56, -41], [-82, -226], [-7, -87], [-31, -59], [-27, -8], [-22, -1], [-141, -44], [-63, -34], [18, -27], [-21, -21], [-33, -8], [-36, -25], [-24, -28], [-11, -39], [-72, -64], [-84, -147], [-40, -108], [-49, -78], [-34, -30], [-25, -5], [-25, 10], [-41, 36], [-30, 4], [-76, 51], [-177, 52], [27, -19], [23, -32], [47, -8], [47, 0], [99, -63], [48, -22], [30, -19], [25, -43], [-18, -84], [-19, -69], [-24, -53], [-85, -137], [-41, -46], [-72, -163], [-74, -77], [-40, -47], [-42, -74], [-99, -56], [-37, -15], [-34, 8], [-41, -46], [-49, -28], [-15, -42], [-117, -114], [-45, -15], [-39, -30], [-11, -51], [-34, -32], [-10, -23], [-29, -72], [-53, -94], [-66, -15], [-24, -32], [-27, -53], [-39, -36], [-77, 17], [18, -22], [69, -34], [7, -51], [-34, -12], [-72, -68], [-98, -117]], [[23116, 93857], [-45, -6], [-41, 40], [-2, 38], [3, 21], [5, 18], [15, 16], [43, 18], [19, -13], [7, -17], [6, -6], [28, -14], [13, -16], [-2, -19], [-8, -28], [-10, -18], [-11, -8], [-20, -6]], [[18188, 93659], [18, -7], [32, 6], [47, 19], [60, 15], [74, 13], [19, -15], [12, 3], [22, 24], [4, 16], [-3, 18], [1, 40], [12, 23], [44, 50], [23, 18], [37, 9], [89, -6], [84, -28], [112, -28], [165, -71], [52, -30], [5, -26], [-29, -55], [-71, -79], [-57, -28], [-22, -18], [37, -12], [24, -20], [36, 29], [27, 33], [38, 27], [13, 3], [3, -6], [-7, -14], [-2, -14], [1, -13], [4, -8], [23, -4], [13, 5], [50, 38], [49, 59], [75, 38], [20, 19], [65, 16], [-1, 12], [3, 44], [-22, 19], [-77, 40], [-37, 48], [8, 37], [42, -5], [115, -4], [24, -5], [111, -62], [39, -39], [31, -19], [65, -28], [22, -23], [16, -9], [5, -10], [-5, -10], [-2, -23], [12, -8], [42, -9], [12, -9], [16, -30], [19, -50], [17, -55], [27, -103], [54, -137], [18, -86], [7, -16], [12, -11], [34, -16], [27, -22], [31, -7], [7, 2], [8, 19], [20, 31], [94, 59], [5, 9], [-11, 14], [-3, 9], [1, 7], [20, 5], [-66, 75], [-43, 71], [-27, 89], [-4, 25], [-4, 55], [-9, 15], [-15, 13], [-6, 17], [2, 21], [-3, 18], [-17, 37], [-67, 261], [0, 26], [9, 19], [24, 11], [38, 2], [13, 6], [-15, 10], [-25, 27], [-3, 13], [17, 26], [86, -11], [62, -24], [106, -55], [11, 3], [12, 28], [22, 17], [34, -6], [96, -40], [112, -71], [74, -36], [53, -48], [35, -45], [23, -35], [1, -13], [-5, -14], [5, -19], [16, -22], [8, -20], [7, -43], [15, -56], [3, -28], [99, -250], [19, -45], [12, -20], [69, -97], [37, -70], [3, -48], [5, -13], [2, -22], [-2, -30], [-8, -25], [-14, -22], [-14, -30], [-22, -67], [-1, -16], [15, -23], [97, -79], [59, -95], [28, -16], [74, -59], [81, -34], [27, -15], [26, -21], [7, -1], [16, 4], [4, 6], [1, 9], [-22, 45], [-2, 17], [11, 3], [83, -76], [45, -31], [61, -32], [105, -74], [15, -6], [57, 7], [15, -5], [10, -7], [4, -10], [2, -44], [16, -21], [90, 9], [25, -2], [16, -7], [13, -14], [20, -47], [17, -92], [1, -33], [-8, -56], [-13, -20], [-17, -7], [-48, 7], [-33, 17], [-18, 23], [-16, 48], [-7, 10], [-7, -10], [-16, -45], [-10, -19], [-13, -14], [-24, 4], [-35, 19], [-66, 50], [-23, 12], [-15, -2], [-31, -17], [-49, -31], [-20, -23], [8, -15], [6, -19], [3, -22], [-2, -17], [-6, -10], [-16, -13], [-34, -2], [-49, 9], [-39, 18], [-68, 46], [-15, 6], [-21, -10], [-8, -14], [13, -19], [34, -24], [42, -41], [11, -8], [11, 0], [4, -7], [5, -22], [-2, -38], [-21, -76], [-2, -18], [9, 4], [57, 75], [29, 21], [65, 32], [27, 24], [82, 7], [30, -13], [18, -23], [1, -10], [-21, -27], [-4, -14], [-1, -17], [2, -15], [5, -13], [14, -13], [26, 6], [8, -4], [14, -13], [9, -20], [0, -29], [-19, -62], [-34, -21], [-105, -37], [-36, -20], [-70, -14], [-26, -18], [-17, -5], [-74, 2], [-85, -11], [-98, 23], [-69, 10], [-79, 36], [-30, -9], [-31, -24], [-148, 28], [-18, 20], [6, 14], [35, 42], [2, 9], [-1, 8], [-68, 7], [-75, 23], [-75, 11], [-57, -3], [-37, 8], [-36, 19], [-19, 17], [-4, 16], [0, 17], [3, 34], [-5, 24], [-16, 18], [-34, 17], [-33, -2], [-28, -18], [-26, -35], [-50, -96], [-24, -16], [-65, -70], [-24, -17], [-117, -27], [-140, -11], [-52, -22], [-49, -40], [-60, -39], [-146, -48], [-135, -27], [-142, -12], [-105, -18], [-31, 9], [-47, -3], [-51, -27], [-57, -5], [-219, -10], [-100, -17], [-55, -5], [-44, 2], [-30, 8], [-28, 23], [-30, 37], [-60, 97], [-17, 41], [6, 70], [-4, 40], [-20, 88], [-4, 7], [-105, 33], [-70, 10], [-104, 2], [-128, -4], [-127, 10], [-68, 12], [-67, 19], [-114, 51], [-7, 5], [-8, 17], [-12, 28], [-28, 37], [-78, 82], [-31, 49], [-5, 13], [-7, 36], [-10, 59], [-3, 36], [9, 22], [7, 5], [162, 43], [284, 47], [261, 32], [118, -3], [69, -15], [70, -7], [126, -3], [160, -22], [31, 2], [72, 15], [21, 12], [113, -2], [22, 8], [20, 13], [-26, 25], [-108, 55], [-286, 97], [-70, 21], [-100, 22], [-58, 3], [-74, -12], [-28, 0], [-72, -19], [-69, -12], [-131, -12], [-189, -8], [-26, 2], [-39, 15], [-28, 4], [-185, -11], [-165, 15], [-188, 149], [-32, 46], [7, 18], [23, 20], [93, 58], [34, 13], [139, 31], [138, 38], [110, 35], [53, 12], [52, 2], [42, 11], [-9, 11], [-34, 13], [0, 18], [18, 9], [69, 9], [72, -11], [37, 3], [10, 13], [-10, 9], [-69, 21], [-331, -59], [-155, -5], [-107, -26], [-59, 1], [-70, 25], [-10, 8], [-1, 10], [22, 34], [75, 20], [38, 57], [-41, 1], [-134, -12], [-59, 5], [-79, 22], [-23, 26], [-10, 18], [-2, 23], [3, 63], [6, 34], [5, 8], [98, 105], [62, 22], [43, 33], [1, 13], [-10, 14], [-40, 34], [-17, 17], [-9, 17], [7, 25], [23, 36], [67, 57], [162, 114], [82, 48], [79, 26], [110, 55], [284, 91], [254, 92], [93, -24], [27, -19], [12, -16], [10, -23], [9, -29], [12, -63], [1, -32], [-2, -33], [-6, -29], [-9, -27], [-19, -32], [-29, -38], [-60, -65], [-7, -19]], [[20753, 93847], [-14, -3], [-26, 14], [-39, 29], [-63, 60], [-75, 59], [-12, 36], [-19, 26], [-96, 63], [-62, 26], [-48, 13], [-7, 17], [33, 51], [37, 41], [23, 15], [70, 13], [236, 27], [54, 1], [56, -13], [78, -56], [32, -6], [20, -13], [17, -21], [9, -21], [0, -44], [-8, -64], [-11, -25], [-47, -82], [-49, -46], [-10, -29], [-20, -23], [-35, -29], [-24, -16]], [[27906, 94270], [47, -7], [300, 14], [63, -11], [189, -64], [48, -21], [25, -28], [21, -45], [10, -10], [69, -26], [28, -32], [10, -17], [14, -38], [31, -22], [36, -12], [11, -11], [-5, -48], [15, -22], [33, -27], [13, -18], [-26, -22], [-61, -13], [-170, 13], [-228, 31], [-133, -9], [-67, -14], [-161, -49], [-51, -8], [-51, -1], [-89, 40], [-32, 22], [-11, 16], [-21, 49], [-17, 58], [-9, 48], [-10, 37], [-31, 12], [-90, 14], [-30, 20], [-14, 17], [-13, 27], [0, 27], [7, 25], [6, 6], [11, 1], [-25, 29], [-9, 33], [-1, 46], [4, 29], [7, 13], [17, 8], [39, 5], [58, -1], [81, -33], [64, -4], [98, -27]], [[25947, 92747], [11, -12], [64, 16], [54, 18], [84, 45], [50, 15], [152, 0], [26, -9], [-11, -26], [-7, -8], [5, -11], [17, -16], [33, -17], [13, 16], [9, 37], [23, 153], [9, 46], [5, 44], [-1, 41], [-11, 26], [-39, 16], [-53, -3], [-28, 4], [-33, 8], [-25, 13], [-16, 17], [-31, 52], [-24, 28], [-60, 52], [-28, 17], [14, 21], [55, 23], [33, 23], [39, 65], [23, 11], [84, -9], [114, -51], [72, -44], [19, -5], [0, 8], [-18, 21], [-82, 54], [-38, 40], [-17, 29], [8, 12], [46, 13], [6, 14], [-63, 17], [-31, 0], [-26, -12], [-28, -1], [-51, 22], [-14, 13], [-30, 38], [-15, 34], [-17, 21], [-7, 16], [-3, 51], [2, 30], [7, 26], [12, 22], [33, 39], [19, 12], [35, 5], [76, -20], [203, -71], [-5, 23], [-227, 96], [-81, 24], [-20, 35], [122, 133], [111, 31], [56, 38], [91, 2], [85, -25], [1, 7], [-38, 46], [3, 12], [48, 27], [89, 32], [108, 26], [22, 13], [28, 9], [51, 9], [127, 3], [71, -3], [95, -20], [55, -35], [17, -21], [30, -69], [24, -95], [35, -40], [56, -21], [39, -24], [22, -26], [6, -32], [-10, -39], [7, -40], [25, -41], [20, -24], [42, -26], [1, -14], [-13, -16], [-28, -23], [-70, -69], [-90, -76], [-64, -66], [-3, -20], [133, 104], [42, -4], [2, -15], [-28, -50], [-33, -45], [-33, -29], [6, -11], [63, -50], [-11, -9], [-31, 5], [-12, -5], [-9, -9], [-6, -14], [0, -20], [5, -25], [-1, -18], [-6, -13], [7, -5], [18, 2], [16, 10], [27, 34], [88, 93], [57, 34], [18, 4], [52, -23], [13, 1], [-58, 72], [-5, 18], [12, 26], [7, 9], [32, 20], [26, 10], [15, -4], [24, -36], [11, -25], [19, -11], [44, 14], [28, 30], [36, -20], [54, -48], [-5, -48], [0, -49], [3, -35], [65, -65], [44, -28], [9, -1], [-2, 10], [-9, 22], [-24, 21], [-23, 34], [-20, 40], [12, 95], [34, 50], [32, -13], [43, -29], [34, -2], [53, 3], [108, -58], [58, -1], [-5, 23], [-44, 12], [-64, 31], [-101, 38], [-46, 44], [-8, 20], [1, 22], [6, 20], [10, 16], [20, 17], [97, 50], [69, 22], [51, 7], [87, -1], [100, -9], [55, -14], [62, -36], [79, -35], [28, -6], [33, 0], [38, 8], [36, -3], [114, -52], [30, -27], [18, -32], [14, -32], [8, -31], [-3, -24], [-95, -108], [-41, -18], [-28, -41], [-40, -77], [-35, -42], [-3, -8], [7, -2], [21, 19], [36, 53], [26, 46], [47, 38], [78, 45], [68, 22], [58, -2], [49, -6], [39, -11], [24, -10], [7, -7], [16, -34], [-1, -23], [-10, -26], [-19, -29], [-84, -33], [-47, -25], [-29, -10], [-87, -9], [4, -10], [65, -14], [71, 4], [-1, -16], [-34, -44], [-11, -38], [9, -31], [-1, -26], [-26, -53], [-28, -48], [10, -7], [66, 69], [18, 76], [27, 66], [31, 37], [23, 14], [74, 5], [40, 39], [35, 12], [15, 1], [29, -15], [-1, -15], [-43, -70], [-92, -112], [38, 13], [25, 27], [34, 26], [38, 40], [25, -36], [39, -27], [23, -61], [38, -29], [23, -23], [-3, 39], [-33, 77], [9, 31], [25, 16], [79, 65], [55, -22], [34, -19], [17, 5], [43, -3], [69, -10], [67, -19], [66, -25], [50, -31], [35, -34], [21, -24], [8, -14], [12, -34], [-9, -23], [-50, -53], [-27, -24], [-27, -11], [-73, 11], [-23, -7], [-24, -16], [-76, -73], [-42, -32], [-41, -20], [-10, -10], [89, 1], [24, 21], [21, 41], [39, 42], [74, 19], [103, -41], [52, 2], [39, 41], [44, 28], [17, 6], [9, -3], [33, -30], [10, -26], [0, -60], [-5, -18], [-29, -46], [-73, -68], [-47, -25], [-52, -14], [-57, -23], [-20, -19], [-20, -26], [-20, -18], [-25, -14], [33, -22], [12, 1], [13, 13], [33, 50], [24, 23], [14, 4], [14, -2], [14, -10], [14, -18], [-1, -43], [-42, -171], [7, 0], [26, 47], [74, 178], [18, 36], [36, 36], [80, 54], [63, 29], [70, 24], [37, 9], [43, -6], [28, -28], [37, -5], [46, 7], [30, -4], [33, -11], [29, -20], [48, -24], [110, -44], [14, -10], [12, -16], [12, -25], [-1, -24], [-15, -23], [-18, -15], [-22, -5], [-23, -13], [-42, -34], [-13, -6], [-66, -14], [-61, -7], [-38, -14], [-73, -37], [-101, -68], [1, -16], [40, -8], [33, 10], [45, 47], [42, 18], [66, 15], [91, 12], [39, -2], [7, -2], [5, -11], [3, -20], [-15, -26], [-17, -12], [-47, -58], [31, -15], [42, -7], [24, 16], [22, 36], [25, 19], [27, 4], [24, 9], [21, 15], [5, 9], [-30, 19], [-2, 11], [12, 28], [22, 30], [23, 19], [17, 2], [57, -21], [39, -35], [98, -107], [12, -21], [34, -79], [7, -35], [-6, -25], [-8, -15], [-10, -5], [-22, -1], [-130, 33], [-60, -4], [-26, -9], [-21, -14], [-16, -17], [-12, -21], [-23, -12], [-82, 0], [-47, -12], [-80, -28], [-28, -16], [-7, -20], [49, 4], [81, 26], [75, 8], [127, -59], [41, -9], [23, 9], [28, 2], [101, -4], [35, -7], [51, -22], [78, -49], [15, -14], [9, -15], [2, -16], [0, -39], [-8, -13], [-27, -9], [-112, 10], [-35, 9], [-42, -11], [-34, 4], [-44, 15], [-48, 28], [-72, -26], [-58, 17], [-59, -15], [-117, -62], [13, -11], [160, 53], [31, -3], [51, -20], [80, -38], [23, -16], [0, -60], [-12, -41], [-25, -45], [-37, 6], [-85, 28], [-35, 4], [-26, -4], [-34, -19], [-17, 0], [-137, 36], [-31, 2], [-3, -4], [6, -7], [125, -56], [92, -6], [57, -10], [34, -17], [16, -13], [2, -37], [30, -38], [28, -15], [18, -1], [30, 14], [30, 2], [25, -9], [31, -21], [37, -6], [33, -13], [26, -2], [71, 6], [31, -8], [8, -7], [-13, -12], [-66, -29], [-10, -28], [37, -36], [20, -28], [-1, -20], [-20, -47], [-5, -19], [6, -2], [48, 38], [7, -4], [5, -53], [6, 3], [16, 43], [-7, 58], [28, 23], [88, 18], [-15, -91], [-2, -47], [-39, -79], [-32, -25], [1, -6], [23, -10], [14, -1], [14, 13], [33, 60], [66, 64], [12, 1], [0, -23], [-9, -42], [31, -20], [29, 19], [16, 17], [37, -2], [17, -8], [5, -19], [-17, -79], [3, -19], [39, -52], [4, 3], [-8, 25], [-8, 62], [8, 28], [32, 34], [65, 50], [25, 10], [15, -7], [24, -24], [-8, -14], [-26, -15], [-19, -27], [-13, -39], [14, -21], [53, -2], [54, 32], [30, -16], [37, -42], [66, -67], [39, 18], [47, -51], [-64, -40], [20, -86], [-82, 4], [-46, -7], [-31, 8], [-34, -3], [31, -20], [59, -9], [6, -25], [46, 0], [35, 5], [63, -1], [4, 30], [41, 17], [23, 19], [20, -12], [57, -12], [77, -59], [-34, -35], [-9, -33], [-12, -28], [-6, -25], [-14, -17], [-109, -99], [18, -1], [46, 24], [91, 35], [50, 15], [36, -10], [18, 0], [16, 13], [30, -15], [62, -13], [71, 81], [43, -16], [40, -50], [86, -89], [45, -51], [15, -23], [-2, -23], [-41, -25], [-20, -5], [-55, 46], [-50, 24], [-31, -3], [-30, -18], [10, -9], [121, -71], [21, -52], [2, -23], [-81, -35], [-26, -2], [-57, 17], [-32, 31], [-28, 11], [-37, 3], [-12, -6], [41, -52], [-4, -16], [-21, -10], [-11, -25], [81, -46], [61, -46], [9, -19], [-41, -13], [-29, -4], [-62, 7], [-35, 10], [-9, -11], [35, -24], [14, -16], [10, -23], [7, -22], [1, -20], [-28, -17], [-35, -46], [-14, -48], [-31, -5], [-13, 9], [-42, -15], [-55, 21], [-20, 22], [-61, 90], [-1, -10], [15, -46], [-3, -27], [-64, -20], [0, -7], [39, -15], [48, -11], [-8, -42], [1, -181], [-11, -64], [-23, -56], [-34, -53], [-36, 35], [-15, 36], [-12, 18], [-17, 15], [-23, 7], [-23, 0], [-25, -32], [-28, 28], [-26, 33], [10, 88], [11, 44], [-4, -1], [-16, -20], [-36, -64], [-23, -79], [-31, 30], [-28, 38], [-22, 38], [-37, 43], [-36, 51], [-19, 60], [-8, 13], [-21, 50], [-8, 14], [-8, 5], [-17, 31], [6, 34], [28, 39], [26, 28], [42, 28], [50, 16], [22, 36], [28, 66], [30, 46], [33, 26], [-16, 4], [-42, -22], [-30, -32], [-35, -54], [-32, -34], [-84, -40], [-30, -8], [-36, -4], [-78, 5], [-18, 14], [9, 38], [56, 68], [-9, 5], [-20, -24], [-27, -17], [-23, -9], [-34, 3], [-41, 43], [-19, 13], [-39, 15], [-16, 14], [-66, 104], [-13, 28], [-7, 27], [-21, 23], [-35, 18], [-8, -3], [13, -23], [0, -20], [-30, -12], [-31, 4], [-33, 21], [-3, -28], [35, -51], [1, -64], [-10, -6], [-24, -4], [-16, 8], [-53, 48], [-50, 33], [-36, 18], [-4, -13], [23, -57], [27, -57], [44, -47], [69, -56], [32, -32], [-25, -46], [-22, -14], [-13, -5], [-42, 0], [-77, 25], [-37, 28], [-52, 67], [-87, 69], [-19, -1], [-61, -28], [9, -4], [40, -2], [29, -9], [69, -55], [6, -23], [-18, -25], [1, -32], [20, -39], [20, -25], [41, -18], [20, -2], [8, -11], [-25, -87], [-2, -24], [7, -10], [9, 0], [52, 35], [22, 9], [19, 2], [22, -10], [26, -22], [14, -23], [5, -23], [7, -15], [52, -24], [-5, -12], [-53, -37], [-3, -5], [11, -3], [33, -22], [31, -34], [19, -41], [4, -21], [0, -19], [4, -11], [16, -2], [7, 7], [7, -1], [9, -10], [8, -32], [19, -92], [10, -25], [5, -1], [3, 92], [9, 15], [33, -16], [47, -36], [34, -32], [4, -15], [-25, -29], [5, -13], [19, -19], [17, 7], [12, 33], [22, 32], [25, 22], [48, -18], [39, -48], [6, -16], [26, -21], [22, 11], [44, -54], [-21, -25], [-45, -36], [-5, -12], [11, 2], [87, 1], [23, -15], [5, -28], [-38, -76], [-35, 6], [-47, 2], [-24, -4], [4, -10], [65, -35], [18, -29], [25, -30], [12, -25], [-1, -11], [-10, -17], [5, -6], [44, -11], [28, 10], [34, 4], [30, -3], [3, -11], [-5, -28], [-31, -25], [9, -7], [36, 8], [17, -12], [21, -62], [25, -48], [-20, -11], [-22, -5], [3, -61], [14, -64], [1, -60], [-5, -54], [-20, -12], [-22, 1], [-8, 14], [-53, 161], [-13, 29], [-16, 25], [-56, 70], [2, -11], [14, -32], [12, -48], [16, -96], [8, -61], [-4, -23], [-11, -6], [-3, -11], [5, -17], [43, -63], [21, -38], [15, -39], [13, -26], [13, -14], [-3, -11], [-19, -9], [-32, -4], [-16, 5], [-58, 36], [-8, -11], [32, -133], [-1, -32], [-16, -11], [-20, 13], [-24, 38], [-36, 42], [-49, 46], [-47, 37], [-11, -1], [-7, -11], [-7, -2], [-9, 7], [-16, 28], [-16, 18], [-68, 62], [-7, 0], [7, -18], [6, -41], [-7, -8], [-18, 3], [-34, 18], [-23, 40], [-28, 70], [-16, 26], [-1, -17], [8, -67], [-1, -22], [-17, -6], [-8, 6], [-7, 18], [-6, 29], [-17, 23], [-25, 15], [-14, 16], [-7, 29], [-5, 6], [-45, -6], [-23, 20], [-65, 81], [-59, 88], [-38, 46], [-14, 12], [20, -57], [22, -84], [6, -39], [-10, -1], [-22, 17], [-113, 108], [-69, 51], [-39, 9], [-63, 6], [-14, -28], [34, -62], [33, -47], [32, -32], [50, -61], [46, -79], [19, -25], [62, -34], [33, -9], [34, -2], [3, -12], [-16, -23], [-4, -14], [75, -35], [28, -20], [27, -32], [15, -8], [65, -82], [16, -14], [58, -26], [19, -17], [32, -53], [20, -27], [28, -64], [21, -29], [52, -32], [22, -10], [10, -12], [-7, -29], [-6, -12], [-30, -20], [5, -28], [17, -50], [-1, -31], [-18, -12], [-37, -14], [-19, 1], [-28, 12], [-35, 20], [-70, 50], [-105, 35], [-39, 18], [-13, 17], [-20, 10], [-260, 48], [-44, 12], [-27, 15], [-25, 22], [-100, 49], [-12, 11], [-67, 85], [-49, 100], [-17, 13], [-54, 13], [-45, -8], [-30, -11], [-46, 4], [-30, 16], [-63, 45], [-64, 23], [-56, 39], [-29, 14], [3, 10], [41, 58], [-12, 0], [-73, -45], [-26, 14], [-43, 35], [-32, 35], [-66, 97], [-38, 35], [5, 8], [43, 3], [34, -3], [23, 8], [44, 39], [19, 25], [2, 14], [-37, 4], [-8, 7], [-7, 16], [-17, 21], [-27, 25], [-31, 10], [-107, -9], [-19, 11], [0, 17], [21, 47], [12, 19], [3, 10], [-4, 3], [-14, -2], [-62, -42], [-14, 3], [-24, 45], [-15, 51], [-11, 17], [-14, 6], [-51, 50], [-72, 95], [-27, 30], [-30, 27], [-21, 11], [3, 14], [46, 79], [2, 12], [-40, -4], [-59, 16], [-28, -20], [-18, -1], [-21, 11], [-12, -4], [-11, -65], [-9, -16], [-12, -9], [-11, 2], [-9, 11], [0, 15], [-9, 79], [-21, 12], [-58, 3], [-13, 6], [-14, 15], [-12, 27], [-10, 40], [-12, 22], [-13, 3], [-11, -3], [-8, -10], [-18, -6], [-28, -3], [-1, -15], [27, -28], [25, -40], [25, -52], [-15, -35], [-55, -18], [-48, -5], [-41, 7], [-32, 12], [-44, 29], [-63, -9], [-15, -76], [-13, -4], [-60, 1], [-24, -6], [-80, -42], [-25, -6], [-18, 5], [-18, -11], [-27, -24], [-37, -2], [-47, 19], [-39, 8], [-33, -3], [-33, 12], [-34, 25], [-29, 11], [-36, -2], [-9, 4], [-54, 55], [-17, 22], [-35, 68], [-7, 27], [-1, 29], [3, 21], [13, 32], [13, 76], [12, 25], [17, 23], [32, 29], [120, 51], [24, 20], [-1, 14], [-27, 62], [0, 16], [9, 9], [19, 37], [9, 10], [21, 6], [44, -19], [37, -7], [50, -3], [83, -25], [115, -49], [66, -33], [50, -50], [36, -49], [5, -25], [-16, -38], [-9, -11], [1, -13], [9, -15], [29, -21], [7, 8], [-3, 26], [6, 22], [15, 17], [1, 23], [-11, 28], [-13, 24], [-17, 21], [-74, 70], [-7, 23], [25, 11], [108, -24], [42, 6], [16, 27], [17, 19], [18, 10], [37, 4], [51, -13], [25, -2], [23, 5], [29, 15], [42, 50], [28, 11], [41, 8], [31, 1], [56, -20], [35, 0], [-3, 34], [-23, 63], [-28, 66], [-23, 22], [-57, 41], [-68, 78], [-34, 49], [-9, 24], [4, 16], [12, 24], [123, 86], [97, 86], [42, 44], [21, 31], [21, 22], [22, 14], [47, 16], [13, 22], [3, 36], [8, 32], [44, 85], [33, 23], [51, 16], [33, 20], [41, 70], [-4, 17], [-19, 13], [-14, 20], [-62, 182], [-42, 89], [-49, 76], [-45, 94], [-73, 92], [-1, 24], [13, 28], [-6, 6], [-76, -40], [-18, -2], [-29, 17], [-20, 22], [-16, 38], [1, 20], [11, 19], [15, 47], [0, 24], [-5, 22], [-6, 16], [-9, 9], [-23, 6], [-38, 2], [-13, -8], [43, -71], [-7, -17], [-54, -7], [-24, 3], [-22, 8], [-20, 14], [-63, 74], [-13, 27], [4, 20], [-5, 11], [-13, -7], [-17, 0], [-24, 7], [-5, 8], [44, 40], [3, 12], [-21, 13], [-30, 3], [-8, 12], [10, 12], [41, 22], [15, 14], [-25, 11], [-13, 1], [-28, -24], [-42, -48], [-30, -18], [-41, 22], [-27, 8], [-18, -5], [-28, -38], [-61, -27], [-109, -65], [-46, -20], [-51, 4], [-9, 13], [0, 22], [4, 18], [6, 14], [2, 18], [-4, 73], [9, 21], [17, 12], [32, 12], [81, -15], [37, 3], [27, 17], [26, 24], [27, 33], [5, 31], [-28, 50], [-10, 11], [-72, 39], [-40, 14], [-35, 6], [-26, 11], [-16, 17], [-15, 27], [-1, 18], [2, 24], [15, 17], [64, 20], [0, 5], [-53, 14], [-25, -2], [-21, -16], [-27, -37], [-16, -11], [-48, 22], [-29, 3], [-19, 11], [-11, 10], [7, 10], [24, 11], [41, 32], [3, 18], [-29, 28], [-15, 7], [-60, 10], [-72, -10], [-28, 5], [-12, 32], [-7, 37], [-4, 44], [-13, 75], [-14, 39], [-19, 4], [-88, -16], [-20, 0], [-15, 6], [-57, 50], [-24, 18], [-13, 4], [-42, 53], [-16, 10], [-19, 26], [-22, 42], [-24, 13], [-26, -16], [-26, -24], [-26, -30], [-14, -26], [-2, -21], [16, -16], [91, -28], [24, -18], [19, -30], [15, -36], [10, -43], [-1, -32], [-11, -22], [-20, -19], [-57, -30], [-58, -17], [-59, -5], [-28, 4], [-152, 59], [-27, 0], [-35, 8], [-79, 24], [-43, 3], [-76, 20], [-128, 11], [-25, -9], [34, -27], [30, -14], [25, 0], [37, -24], [48, -47], [28, -29], [22, -34], [1, -12], [-23, -23], [-178, 122], [-109, -42], [-51, -16], [-43, -3], [-54, 17], [-121, 59], [-46, 20], [-16, 3], [-106, -25], [-91, -1], [-185, 24], [-67, 17], [-18, 17], [-22, 8], [-40, 0], [-105, 19], [-97, -43], [-116, 40], [-35, 23], [-11, 16], [-33, 66], [-5, 36], [10, 32], [9, 22], [10, 12], [-64, -37], [-22, -6], [-29, -1], [-87, 13], [-14, -7], [5, -12], [23, -19], [2, -12], [-48, -8], [-73, 9], [-33, -4], [-14, -5], [-33, -30], [-14, -7], [-17, 3], [-77, 67], [-62, 43], [-73, 16], [-33, 14], [-18, 16], [-100, 137], [-14, 29], [-32, 107], [-10, 23], [-13, 15], [25, 3], [95, -13], [91, 0], [50, -8], [57, -27], [76, -19], [53, -4], [87, 7], [98, 18], [11, 14], [-63, 24], [-57, 31], [-52, 41], [-31, 17], [-53, 11], [-146, 8], [-137, 27], [-93, 37], [-77, 41], [-31, 22], [-11, 18], [-12, 54], [-13, 90], [-12, 61], [-12, 31], [-1, 27], [26, 57], [74, 63], [2, 10], [-15, 3], [-31, 16], [-10, 23], [-4, 37], [0, 32], [3, 25], [13, 33], [32, 57], [46, 71], [49, 65], [9, 22], [4, 58], [7, 43], [6, 30], [11, 22], [31, 43], [38, 41], [60, 34], [5, 13], [1, 18], [3, 13], [6, 9], [149, 110], [68, 45], [57, 29], [69, 21], [195, 43], [101, 12], [127, -3], [233, -24], [28, -17], [7, -9], [10, -24], [-7, -16], [-64, -52], [-80, -44], [-53, -38], [-88, -86], [-24, -30], [-110, -173], [-26, -28], [-15, -23], [-11, -63], [4, -22], [17, -36], [59, -79], [16, -36], [0, -34], [-7, -81], [-1, -41], [3, -39], [12, -56], [22, -73], [51, -74], [79, -74], [59, -50], [59, -36], [69, -54], [15, -26], [-32, -29], [-74, -44], [-98, -19], [-52, -18], [-65, -39], [-82, -30], [-32, -19]], [[22221, 94438], [235, -123], [33, 10], [71, 6], [73, 19], [102, 15], [63, 27], [26, 8], [45, 5], [25, 0], [70, -15], [29, -11], [15, -11], [16, -19], [28, -49], [4, -18], [-1, -5], [-26, -30], [-17, -13], [-36, -12], [-30, -4], [-27, -21], [-29, 5], [-9, -19], [4, -12], [8, -6], [15, 1], [17, 8], [33, -4], [18, -13], [15, -21], [-11, -20], [-59, -27], [-87, -31], [-105, -98], [-56, -41], [-11, -13], [-6, -13], [2, -24], [2, -10], [16, -4], [51, 34], [34, 16], [33, 9], [60, 0], [25, -5], [44, -20], [41, -32], [9, -11], [-4, -11], [-17, -12], [-2, -8], [39, -15], [43, -43], [3, -26], [-19, -26], [-5, -18], [9, -8], [21, 5], [51, 29], [55, 15], [22, -2], [14, -6], [14, -40], [12, -45], [2, -37], [-9, -31], [-13, -23], [-33, -30], [-30, -11], [-16, 0], [2, -5], [35, -25], [15, -19], [6, -19], [-2, -18], [-5, -16], [-41, -57], [2, -9], [12, -3], [26, -33], [3, -78], [-93, -24], [-22, -18], [-25, -28], [-29, -22], [-67, -22], [-33, -3], [-167, 19], [-17, 11], [-11, 19], [-7, 29], [-1, 22], [2, 16], [0, 9], [-5, 3], [-19, -16], [-19, -29], [11, -33], [52, -91], [10, -39], [2, -16], [-3, -13], [-59, -53], [-34, -18], [-36, -9], [-33, 7], [-32, 22], [-24, 10], [-51, -1], [-15, 11], [-15, 22], [-35, 76], [-50, 54], [-42, 61], [-108, 89], [-56, 53], [-75, 86], [-31, 19], [-26, 8], [-51, 6], [-12, 11], [-19, 29], [-32, 22], [-11, 3], [-19, -6], [-50, -20], [-63, 22], [-14, 15], [-8, 25], [-8, 14], [-21, 13], [-18, 31], [-119, 63], [-71, 72], [-14, 26], [-2, 10], [7, 35], [17, 39], [21, 39], [14, 16], [46, 33], [37, 8], [51, -4], [27, -8], [24, -22], [11, -26], [12, -18], [38, -19], [20, -15], [30, -36], [24, -43], [21, -14], [52, -5], [53, 7], [114, 27], [5, 4], [7, 16], [13, 98], [8, 0], [39, -45], [11, -5], [16, 9], [10, 23], [-1, 10], [-24, 53], [-15, 23], [-13, 15], [-14, 4], [-31, -4], [-24, 10], [-5, 15], [4, 19], [13, 21], [14, 12], [27, 6], [32, -6], [44, -25], [28, -6], [40, 7], [-51, 15], [-70, 58], [-30, 11], [-36, -25], [-25, -9], [-47, -12], [-37, -2], [-156, 89], [-9, 9], [-11, 23], [1, 11], [16, 17], [38, 22], [58, 13], [39, 3], [34, -17], [49, -44], [43, -26], [4, 9], [-8, 26], [-20, 38], [-14, 10], [-34, 11], [-33, 26], [-15, 20], [-8, 20], [-1, 22], [7, 15], [13, 8], [120, 22], [83, -24], [53, -4], [22, 30], [-7, 6], [-28, -8], [-32, 0], [-19, 17], [-1, 9], [25, 23], [37, 10]], [[22702, 94394], [-80, -13], [-36, 6], [-20, -16], [-15, -7], [-44, -3], [-90, 29], [-24, 10], [-9, 9], [4, 9], [16, 9], [69, 12], [25, 10], [11, 13], [17, 11], [24, 8], [65, 8], [146, 41], [72, 5], [28, -3], [9, -11], [2, -10], [-4, -11], [-22, -28], [-30, -21], [-79, -46], [-35, -11]], [[24119, 94562], [109, -27], [53, -18], [26, -12], [50, -40], [25, -12], [97, 24], [68, 8], [151, -10], [127, -34], [48, -24], [28, -23], [-7, -26], [-24, -41], [-27, -38], [-56, -61], [-47, -31], [-11, -14], [-8, -21], [-18, -29], [-50, -65], [-14, -11], [-71, -28], [25, -12], [11, -11], [-10, -29], [-45, -69], [-46, -63], [-33, -39], [-59, -55], [-32, -15], [-44, -5], [-263, 48], [-66, -1], [-176, -25], [17, -12], [64, -19], [41, -20], [55, -63], [8, -16], [3, -18], [-2, -36], [-4, -9], [-87, -97], [-29, -71], [-18, -58], [-29, -16], [-98, 24], [-32, 0], [-110, -17], [-52, 8], [8, 88], [-8, 95], [-16, 90], [-82, 161], [-9, 29], [-6, 31], [-3, 33], [0, 33], [6, 67], [0, 34], [-4, 88], [-11, 132], [-1, 47], [1, 19], [3, 14], [18, 19], [34, 13], [17, 2], [108, -40], [50, -13], [33, 0], [2, 5], [-30, 8], [-27, 18], [-46, 51], [-20, 44], [-5, 14], [-1, 16], [3, 15], [6, 15], [23, 22], [18, 10], [68, 26], [69, 15], [151, 11], [42, -8], [66, 29], [38, 6], [67, -10]], [[16740, 94534], [2, -2], [71, 53], [44, 3], [30, -5], [10, -6], [6, -11], [3, -23], [2, -58], [4, -7], [9, 3], [16, 14], [78, 85], [33, 23], [23, 7], [96, 13], [65, 0], [71, -8], [54, -12], [88, -35], [69, -40], [63, -43], [212, -161], [90, -47], [35, -27], [15, -20], [13, -25], [4, -23], [-5, -21], [-10, -15], [-21, -13], [-130, -54], [-69, -16], [-67, -24], [-162, -84], [-111, -40], [-144, -78], [-272, -126], [-32, -25], [-15, -18], [-77, -143], [-29, -33], [-71, -34], [-89, -9], [-25, -9], [-5, -50], [-32, -82], [-15, -55], [-22, -148], [-5, -15], [-16, -28], [-28, -29], [-86, -35], [-64, -18], [-86, -15], [-21, 10], [-21, 24], [-22, 2], [-13, -4], [-114, -103], [-109, -41], [-47, -38], [-33, -18], [-27, -5], [-44, 3], [-32, 17], [-29, 27], [-22, 28], [-56, 118], [-24, 40], [-21, 20], [-55, 72], [-15, 14], [-209, 91], [-101, 51], [-25, 18], [-23, 11], [-130, -7], [-18, 2], [-4, 8], [15, 27], [6, 16], [2, 17], [-2, 27], [2, 4], [49, 27], [-8, 5], [-5, 10], [-4, 15], [5, 11], [15, 6], [17, 24], [21, 43], [15, 24], [22, 16], [38, 41], [27, 17], [23, 21], [1, 9], [-10, 8], [-3, 16], [5, 50], [-1, 25], [5, 22], [8, 17], [11, 11], [97, 37], [4, 10], [2, 12], [-3, 14], [-5, 9], [-15, 8], [-26, 2], [-23, 21], [-5, 10], [9, 29], [44, 45], [14, 22], [48, 101], [86, 63], [23, 67], [65, 72], [0, 10], [-21, 24], [-60, 17], [-29, 26], [-19, 29], [-87, 170], [-15, 13], [-5, 20], [-18, 13], [4, 12], [341, 51], [235, 16], [243, 44], [68, 2], [52, -8], [52, -23], [69, -40], [90, -39], [170, -58], [106, -12], [-42, -45], [-6, -14], [0, -10]], [[22957, 94772], [-84, -34], [-18, 13], [-8, 12], [65, 53], [28, 14], [27, -16], [7, -13], [-3, -9], [-14, -20]], [[23526, 94760], [-13, -2], [-25, 3], [-93, 26], [-16, 10], [-4, 8], [21, 9], [8, 10], [23, 12], [42, 0], [44, -29], [21, -27], [1, -12], [-9, -8]], [[21078, 95066], [-53, -3], [-90, 18], [-54, 33], [-17, 16], [2, 8], [9, 7], [13, 22], [31, 63], [12, 17], [48, 36], [36, 10], [75, -3], [44, -19], [18, -12], [13, -15], [13, -32], [3, -21], [22, -24], [7, -14], [0, -14], [-6, -14], [-12, -13], [-29, -21], [-85, -25]], [[24016, 95061], [18, -43], [3, -18], [1, -37], [-8, -49], [-5, -9], [-7, -4], [-4, -13], [0, -21], [-7, -12], [-15, -5], [-99, -10], [-62, 2], [-91, -6], [-45, 3], [-30, 11], [-43, 22], [-91, 55], [-45, 2], [-116, 19], [-63, 58], [-24, 11], [-25, -18], [-7, 4], [-6, 12], [-7, 20], [-12, 10], [-48, -5], [-9, 6], [-2, 18], [0, 15], [9, 23], [51, 65], [25, 5], [31, 12], [17, 35], [-2, 33], [48, 49], [28, 15], [51, 34], [172, 54], [48, 4], [63, -4], [62, -17], [47, -28], [97, -70], [44, -43], [23, -43], [21, -25], [26, -54], [-9, -21], [-6, -28], [3, -14]], [[23311, 95339], [-21, -19], [-23, -1], [-30, 18], [-32, -7], [-45, -36], [-16, -22], [-12, -7], [-37, -7], [-16, 6], [-15, 19], [-14, 32], [10, 24], [35, 16], [93, 27], [26, 13], [3, 14], [6, 9], [8, 4], [62, -23], [29, -16], [22, -18], [-2, -8], [-31, -18]], [[16368, 95475], [-22, -3], [-24, 6], [5, 15], [54, 41], [3, 11], [0, 9], [-7, 11], [14, 15], [22, 5], [7, -5], [2, -12], [-5, -36], [-6, -18], [-10, -14], [-14, -14], [-19, -11]], [[23742, 95477], [-27, 0], [-35, 12], [-10, 12], [-8, 17], [-5, 22], [-7, 18], [-10, 13], [-2, 10], [6, 9], [11, 5], [27, 2], [57, 22], [11, -2], [8, -12], [7, -31], [9, -19], [22, -34], [10, -22], [-2, -6], [-7, -6], [-55, -10]], [[17131, 95379], [-79, -37], [-57, 4], [-75, 27], [-61, 10], [-21, 9], [-3, 9], [20, 26], [26, 21], [62, 41], [105, 78], [69, 30], [67, 21], [69, 47], [38, 21], [33, 2], [33, -9], [4, -13], [-35, -64], [-25, -26], [-49, -67], [-93, -112], [-28, -18]], [[28038, 95579], [3, -34], [-20, 1], [-65, -22], [-52, -3], [-26, 10], [-17, 23], [41, 43], [47, 31], [57, 47], [47, 30], [23, -6], [22, -16], [-28, -47], [-30, -23], [-2, -34]], [[21603, 95630], [58, -35], [3, -9], [-11, -6], [-75, -19], [-29, -15], [-25, -35], [-19, -16], [-101, -10], [-103, 1], [20, 33], [56, 56], [-44, 22], [-158, -38], [-60, 24], [51, 60], [-51, 5], [-71, 0], [-46, 36], [16, 42], [94, 24], [122, 20], [131, 31], [103, -3], [40, -14], [14, -49], [12, -59], [18, -5], [55, -41]], [[21105, 95957], [13, -3], [43, 12], [27, 2], [30, -22], [8, -14], [110, -36], [38, -16], [5, -10], [-13, -15], [-33, -20], [-31, -13], [-44, -11], [-222, -2], [-24, 5], [-14, 18], [-28, 65], [-19, 36], [-8, 24], [5, 14], [24, 13], [82, 21], [36, 0], [23, -5], [9, -11], [-3, -14], [-14, -18]], [[22861, 95890], [3, -26], [-4, -19], [-9, -14], [-1, -17], [9, -18], [37, -45], [12, -25], [2, -25], [-2, -17], [-23, -32], [-10, -43], [-1, -22], [14, -35], [0, -16], [-26, -28], [-54, -25], [8, -13], [117, -30], [9, -7], [0, -70], [20, -76], [-8, -1], [-28, 24], [-52, 28], [-63, -53], [7, -90], [42, -40], [12, -23], [-4, -13], [-35, -6], [-12, 2], [-35, 19], [-21, 27], [-7, -1], [-6, -13], [4, -14], [24, -24], [11, -29], [-11, -8], [-36, -8], [-48, 0], [-76, -13], [-38, -2], [-36, 7], [-49, 1], [-41, -3], [-24, 6], [-23, 14], [-26, -3], [-57, -35], [-89, 11], [-80, 3], [-16, 11], [-18, 23], [-35, 70], [6, 18], [86, 9], [2, 6], [-61, 25], [-70, 18], [-32, 15], [7, 27], [-2, 7], [120, 32], [88, 62], [54, 25], [4, 12], [46, 13], [106, 7], [4, 18], [-200, -10], [-274, -35], [-85, -18], [-71, 10], [-300, -54], [-13, 0], [-31, 17], [-27, 33], [19, 22], [88, 43], [44, 37], [-5, 21], [35, 35], [56, 5], [96, -29], [49, -29], [45, -14], [39, 3], [41, 20], [-11, 3], [-69, -11], [-8, 3], [-35, 33], [-15, 20], [-10, 21], [-1, 15], [21, 28], [-79, 9], [-29, 19], [-14, 24], [3, 11], [25, 28], [67, 39], [-8, 10], [-97, -1], [-22, 5], [-42, 24], [9, 27], [39, 39], [30, 23], [19, 7], [31, 0], [73, -15], [21, -8], [56, -38], [14, -21], [-2, -21], [11, -15], [43, -22], [186, -115], [35, -27], [23, -12], [43, -9], [26, 2], [20, 8], [3, 10], [-80, 40], [-20, 22], [-17, 29], [7, 9], [24, 4], [58, -4], [69, 8], [-76, 12], [-50, 16], [-52, 1], [-64, 26], [0, 8], [16, 9], [87, 11], [17, 5], [1, 7], [-29, 18], [-26, 9], [-132, 21], [-47, 24], [-15, 11], [-4, 11], [17, 28], [71, 35], [51, 17], [89, 12], [71, -1], [40, -5], [94, -59], [45, -39], [77, 7], [-22, 40], [-15, 45], [23, 17], [64, 29], [51, -15], [66, -40], [15, -13], [75, -25], [44, -8], [23, -13], [7, -17]], [[21881, 95955], [-72, -2], [-33, 6], [-2, 11], [29, 13], [95, 22], [57, 39], [21, 5], [73, 6], [43, -1], [55, -10], [-132, -49], [-134, -40]], [[19919, 95654], [35, -1], [41, 6], [46, -4], [21, -13], [15, -23], [0, -13], [-3, -10], [-6, -9], [-60, -58], [-14, -20], [19, -5], [10, 3], [59, 44], [45, 13], [34, 4], [57, -9], [22, -8], [15, -8], [9, -11], [22, -41], [16, -54], [2, 5], [1, 31], [3, 23], [55, 16], [1, 5], [-20, 13], [-16, 18], [-12, 33], [4, 12], [12, 14], [35, 28], [42, 17], [36, 4], [137, -29], [54, -25], [21, -12], [8, -9], [12, -28], [23, -78], [-1, -25], [-10, -40], [-44, -76], [-7, -51], [-44, -127], [-31, -35], [-33, -24], [-138, -43], [-104, -43], [-26, -7], [-27, -1], [-86, 15], [-99, 27], [-57, -7], [-56, -20], [-36, -6], [-33, 3], [-33, 7], [-44, 19], [23, 8], [10, 10], [-9, 10], [-46, 14], [-48, -32], [-139, -73], [-187, -25], [-58, -15], [-44, -19], [-22, -16], [-35, -38], [-53, -28], [-96, -31], [-123, -48], [-220, -49], [-138, -8], [-138, 16], [-44, 13], [-46, 21], [-93, 49], [-26, 17], [-31, 39], [18, 25], [50, 30], [75, 26], [150, 36], [135, 58], [49, 11], [130, 9], [66, -5], [48, 3], [31, 8], [47, 20], [68, 42], [50, 39], [12, 18], [-16, 17], [-25, 2], [-81, -40], [-41, -13], [-44, -1], [-61, -14], [-60, -5], [-11, 0], [-62, 39], [-33, 6], [-16, -4], [-14, -10], [-26, -28], [-16, -10], [-27, -8], [-107, -8], [-104, -14], [-23, 9], [-14, 16], [-3, 10], [-1, 33], [-7, 14], [9, 28], [12, 21], [14, 15], [71, 43], [10, 11], [-34, -2], [-80, -21], [-11, 7], [-18, 24], [-9, 2], [-11, -10], [-6, -14], [-13, -58], [-13, -30], [-32, 6], [-40, 18], [-15, 3], [-9, -6], [3, -10], [41, -50], [0, -17], [-26, -31], [-114, -51], [-44, -13], [-16, 5], [-14, 14], [-13, 22], [-29, 31], [-18, 7], [-19, 1], [-18, -7], [-17, -13], [-10, -15], [-10, -26], [-20, -21], [-13, -3], [-115, 42], [-93, 75], [-101, -11], [-46, 2], [-138, 28], [-17, 17], [-10, 22], [1, 12], [6, 12], [17, 25], [35, 37], [15, 12], [21, 10], [29, 8], [73, 4], [189, 2], [37, 5], [206, 72], [24, 12], [30, 23], [7, 10], [-1, 6], [-254, -57], [-109, -12], [-166, 9], [-31, 9], [-8, 16], [35, 42], [18, 16], [48, 15], [114, 21], [154, 19], [100, 0], [84, 15], [51, 17], [-170, -1], [-204, -8], [-30, 5], [-58, 23], [-3, 16], [23, 19], [9, 15], [-17, 33], [5, 13], [38, 27], [68, 29], [42, 5], [81, -11], [230, -10], [45, 4], [-28, 13], [-40, 9], [-178, 17], [-37, 7], [-7, 10], [-3, 15], [2, 19], [13, 20], [55, 42], [162, 35], [64, 5], [65, -3], [65, -15], [29, -14], [15, -16], [7, -16], [1, -26], [3, -11], [12, -17], [37, -42], [28, -13], [128, 24], [53, 6], [54, -8], [78, -24], [101, -75], [130, -77], [-1, -16], [-49, -26], [-10, -11], [7, -7], [50, -5], [46, 4], [45, -6], [10, -7], [16, -28], [23, -49], [27, -37], [31, -24], [31, -13], [45, -1], [46, 8], [74, -3], [381, -28], [23, 5], [16, 15], [9, 26], [4, 22], [-5, 29], [-8, 14], [-236, 94], [-21, 38], [116, 54], [8, 12], [2, 17], [-4, 21], [-15, 21], [-62, 39], [-55, 6], [-82, 38], [-12, 10], [-11, 15], [-8, 21], [1, 16], [11, 12], [80, 39], [33, 21], [100, 98], [46, 39], [33, 19], [34, 11], [74, 5], [77, -36], [17, -2], [7, -10], [-3, -17], [-10, -16], [-27, -29], [-7, -12], [2, -13], [19, -29], [6, -19], [4, -32], [3, -5], [47, -27], [42, -36], [20, -55], [-16, -19], [-35, -27], [-21, -22], [-7, -18], [5, -10], [27, -6]], [[25076, 95914], [-13, -8], [-42, 4], [-14, -8], [-22, 5], [-31, 16], [-36, 32], [-41, 48], [-32, 41], [-1, 12], [10, 19], [32, 13], [76, 15], [52, 0], [48, -31], [14, -11], [8, -13], [1, -12], [-4, -11], [-22, -24], [-10, -16], [0, -17], [5, -23], [9, -16], [13, -8], [0, -7]], [[18455, 96049], [-42, -18], [-289, 27], [-15, 9], [-8, 12], [52, 33], [64, 14], [146, 11], [51, -13], [34, -15], [19, -12], [8, -24], [-20, -24]], [[23807, 96147], [52, -5], [44, 8], [38, -2], [56, -23], [53, -36], [40, -16], [13, -8], [5, -9], [6, -27], [0, -12], [-3, -10], [-18, -25], [-15, -30], [-30, -27], [-16, -20], [-14, -26], [31, 15], [119, 85], [77, -10], [117, 7], [141, 35], [67, 5], [67, -3], [50, -10], [108, -47], [37, -22], [14, -16], [3, -11], [-22, -18], [-67, 11], [-111, 10], [-20, 5], [-18, 0], [-12, -6], [8, -25], [22, -5], [133, -6], [436, -78], [19, -25], [-5, -11], [-16, -12], [-31, -17], [-252, -18], [-143, 16], [-120, 26], [-41, -6], [35, -35], [72, -10], [61, -21], [25, -17], [128, -13], [21, -13], [40, -34], [33, -3], [33, -24], [27, -41], [13, -5], [39, 7], [64, -36], [21, -19], [0, -14], [-15, -22], [-29, -31], [-73, -35], [-6, -11], [86, 4], [16, -5], [101, -63], [13, -1], [8, 6], [10, 23], [-4, 21], [-13, 28], [4, 21], [19, 13], [19, 7], [19, 0], [21, -8], [102, -77], [131, 37], [24, -17], [20, -30], [9, -5], [49, 61], [30, 15], [123, -73], [75, -16], [30, -15], [55, -18], [79, -6], [13, 27], [-45, 35], [26, 15], [109, 29], [58, -4], [107, 42], [66, 5], [40, 0], [133, 63], [31, 10], [23, 22], [52, -3], [141, -36], [40, 3], [150, 36], [56, 8], [55, -1], [141, -21], [105, -22], [33, -12], [-12, -29], [6, -9], [13, -7], [35, -8], [131, -1], [57, -7], [46, -28], [10, -11], [-1, -11], [-45, -30], [7, -7], [45, -6], [100, -4], [22, -7], [21, -37], [21, -52], [0, -20], [-35, -35], [-95, -46], [-106, -39], [-7, -10], [34, -18], [35, -9], [27, 2], [85, 18], [19, -1], [38, -18], [18, -17], [17, -24], [-30, -22], [-121, -27], [-72, 36], [-24, 7], [-16, -3], [9, -15], [35, -28], [11, -18], [-12, -9], [-6, -18], [1, -26], [-3, -27], [-11, -42], [-5, -2], [-263, -8], [-32, -8], [-74, -29], [-56, -15], [-36, -2], [-36, 5], [-96, 31], [-64, -6], [-25, 3], [-55, 20], [-13, 10], [-22, 27], [-16, 37], [1, 22], [7, 32], [-4, 17], [-16, 0], [-17, 6], [-52, 33], [-32, 10], [-6, -6], [10, -25], [6, -8], [34, -19], [6, -21], [-14, -55], [-5, -8], [-34, -40], [-25, -12], [-68, -1], [-105, -28], [-50, -4], [-67, 7], [-42, 12], [-27, 15], [-27, 21], [-13, 2], [-7, -46], [-13, -6], [-23, 1], [-35, 14], [-28, 33], [-9, 0], [-4, -19], [-7, -13], [-8, -6], [-74, -20], [-41, 0], [-43, 23], [-28, -2], [-36, -13], [-87, 24], [-21, 1], [18, -39], [-29, -6], [-62, 1], [-103, 13], [-64, -19], [-114, 11], [-116, 3], [-22, 9], [-15, 18], [-1, 16], [6, 23], [17, 33], [28, 45], [10, 23], [-26, 11], [-15, 15], [-13, 1], [-41, -17], [-27, -50], [-20, -14], [-9, 12], [-7, 30], [-9, 15], [-11, -1], [-11, -8], [-11, -15], [-15, -6], [-22, 4], [-7, -7], [6, -20], [2, -18], [-2, -16], [-18, -17], [-52, -24], [-31, -7], [-79, -4], [-48, 7], [-96, 29], [-53, 1], [-64, 48], [-51, 11], [3, 18], [22, 32], [-1, 9], [-69, -47], [-10, -15], [9, -34], [-10, -3], [-47, 13], [-47, -10], [-12, 3], [-32, 25], [-57, 26], [-25, 28], [-39, 90], [-20, 59], [2, 12], [29, 16], [-4, 13], [-36, 34], [-39, 28], [-12, 19], [-5, 20], [-5, 28], [-1, 21], [5, 13], [22, 42], [62, 76], [8, 14], [3, 13], [-8, 40], [-12, 40], [-12, 29], [-34, 39], [-46, 42], [-66, 73], [-48, 58], [-58, 80], [-28, 7], [-32, -3], [-70, -28], [-24, -13], [-5, -9], [-52, -2], [-148, 7], [-56, 9], [-42, -3], [-72, -20], [-77, 4], [-48, 56], [-110, 31], [-33, 17], [-22, 24], [7, 15], [63, 14], [26, 15], [12, 12], [-62, -10], [-27, 1], [-186, 77], [-57, 14], [-10, 7], [-4, 9], [0, 11], [5, 17], [55, -22], [25, -1], [39, 6], [14, 14], [-9, 7], [-64, 26], [-30, 19], [-12, 15], [12, 20], [3, 13], [21, 8], [37, 1], [48, 10], [88, 26], [59, 10], [59, -2], [142, -27], [142, -34], [89, -26]], [[17902, 96407], [21, -23], [2, -9], [-10, -9], [-33, -15], [-164, -51], [-32, -24], [12, -20], [59, -41], [60, -35], [13, -18], [-28, -17], [-55, 5], [-20, -1], [-20, -8], [6, -16], [60, -52], [20, -28], [0, -14], [-11, -14], [-26, -19], [-40, -25], [-68, -19], [-148, -26], [-5, -21], [1, -15], [-3, -38], [-6, -18], [-17, -29], [-13, -14], [-22, -9], [-32, -6], [-40, 0], [-67, 26], [-30, 16], [-42, 35], [-8, 24], [5, 28], [11, 45], [18, 46], [25, 46], [8, 29], [-10, 12], [-18, 0], [-54, -19], [-35, -7], [-27, -13], [-20, -21], [-11, -22], [-6, -43], [-10, -23], [-29, -13], [-44, 0], [-17, -7], [-8, -16], [6, -12], [43, -27], [6, -30], [-6, -18], [-46, -33], [-11, -11], [-29, -52], [-11, -13], [-24, -12], [-24, 1], [-23, 19], [-33, 36], [-22, 31], [-12, 26], [-9, 11], [-16, -8], [-19, -26], [0, -21], [4, -31], [-1, -19], [-28, -23], [4, -10], [49, -28], [6, -12], [0, -19], [-3, -9], [-20, 1], [-16, -22], [-19, -17], [-49, -33], [-69, -4], [-57, -16], [-12, 1], [-14, 26], [-15, 50], [-14, 29], [-20, 15], [-26, 58], [-12, 18], [-11, 8], [-10, 2], [-15, -12], [-33, -82], [-54, -21], [-29, -4], [-30, 2], [-74, 23], [-60, 8], [-41, -9], [-68, -34], [-27, -9], [-37, 4], [-16, 13], [-14, 21], [-1, 12], [10, 5], [17, 24], [0, 9], [-17, 14], [0, 11], [6, 7], [-2, 6], [-8, 3], [-17, -3], [-61, -16], [7, 17], [29, 37], [71, 72], [26, 21], [16, 6], [209, 24], [15, 7], [99, 97], [28, 22], [29, 18], [143, 58], [13, 14], [22, 40], [13, 10], [31, 16], [102, 82], [94, 59], [47, 37], [65, 37], [75, 16], [227, 28], [163, -37], [38, -2], [19, 10], [17, 17], [25, -7], [60, -5], [14, 4], [25, 19], [-17, 11], [-73, 19], [-5, 10], [2, 9], [26, 23], [31, 14], [90, 11], [41, -3], [43, -15], [55, -32], [127, -56]], [[25046, 96352], [-73, -33], [-37, 1], [-212, 67], [-43, 33], [-8, 23], [-2, 32], [0, 43], [9, 30], [12, 10], [25, 10], [49, 7], [46, -4], [70, -12], [70, -19], [92, -60], [34, -28], [7, -37], [0, -22], [-5, -17], [-10, -10], [-24, -14]], [[20956, 96279], [-43, -10], [-84, 23], [-56, 10], [-45, 42], [-49, 57], [-39, 62], [-14, 37], [-28, 22], [-10, 36], [-51, 57], [8, 9], [48, 8], [77, -11], [36, -20], [47, -34], [60, -54], [18, -24], [4, -33], [11, -17], [51, -4], [63, -43], [12, -17], [13, -34], [-1, -16], [-10, -34], [-18, -12]], [[23476, 96654], [70, -22], [76, 11], [81, 2], [182, -10], [120, 6], [31, -3], [47, -14], [25, -18], [23, -28], [-59, -18], [-50, -89], [-7, -5], [-54, -1], [-27, -7], [-159, 13], [-438, 5], [-19, 11], [-58, 53], [-4, 21], [11, 24], [12, 16], [14, 8], [128, 39], [55, 6]], [[21752, 96599], [-39, -6], [-69, 3], [-83, 21], [-22, 24], [-5, 38], [1, 22], [7, 4], [51, 5], [96, 6], [78, -5], [88, -22], [36, -14], [18, -10], [22, -20], [8, -8], [5, -16], [-110, -4], [-52, -6], [-30, -12]], [[18380, 96632], [-76, -19], [-51, 0], [-89, 28], [-103, 84], [-14, 30], [39, 5], [28, 9], [17, 13], [34, 15], [76, 21], [10, -8], [-2, -18], [6, -16], [28, -4], [26, -11], [53, -36], [36, -7], [13, -8], [6, -12], [22, -21], [0, -11], [-30, -22], [-29, -12]], [[19317, 96833], [223, -14], [9, -3], [1, -10], [-17, -33], [-25, -24], [-119, -30], [-153, -28], [-32, -13], [2, -8], [13, -10], [25, -12], [119, 2], [29, -5], [10, -8], [6, -12], [4, -15], [0, -53], [-6, -30], [-17, -27], [-48, -20], [-86, -26], [-59, -11], [-46, 4], [-46, -3], [-202, -48], [-62, -1], [-55, 12], [-75, 46], [-78, 18], [-34, 21], [-33, 11], [-9, 16], [-3, 13], [6, 11], [14, 10], [4, 9], [-13, 25], [-6, 24], [-22, 35], [-4, 20], [0, 13], [4, 14], [15, 25], [8, 5], [46, 4], [60, 13], [139, 37], [305, 47], [93, -4], [40, 9], [75, 4]], [[21388, 96858], [-32, -12], [-37, 7], [-6, 7], [0, 9], [3, 10], [42, 36], [38, 12], [23, 3], [18, -13], [10, -18], [-59, -41]], [[19495, 97148], [49, -34], [17, 1], [21, -6], [10, -9], [29, -43], [6, -21], [2, -27], [-5, -23], [-10, -19], [-27, -11], [-62, -8], [-87, 11], [-75, -14], [-35, -2], [-93, 9], [-24, 7], [-52, 26], [-40, 11], [-16, -6], [-20, -23], [-37, -28], [-23, -7], [-68, 4], [-103, 48], [-118, -14], [-123, -28], [-48, -5], [-14, 8], [-19, 21], [3, 11], [36, 32], [82, 33], [60, 19], [118, 28], [141, 15], [52, 17], [33, 23], [92, 37], [53, 16], [73, 13], [58, -1], [74, -30], [56, -15], [34, -16]], [[23276, 97079], [66, -15], [113, 7], [41, -11], [106, -39], [32, -23], [8, -17], [0, -9], [-35, -19], [-71, -28], [-17, -22], [63, -27], [32, -24], [15, -17], [0, -18], [-42, -48], [-31, -14], [-48, 2], [-23, -5], [-60, -22], [-95, -21], [-129, -9], [-35, -13], [-65, -22], [-43, -3], [-14, 12], [-6, 18], [3, 13], [9, 15], [-21, 15], [-92, 28], [-54, 39], [-8, 13], [-2, 11], [119, 7], [52, 8], [23, 13], [4, 7], [-23, 3], [-82, 26], [-138, 16], [-7, 19], [-57, 36], [-6, 35], [-12, 10], [-39, 15], [-6, 5], [-12, 22], [-1, 12], [2, 12], [71, 23], [-10, 16], [-54, 61], [-14, 34], [2, 13], [34, 18], [47, 0], [124, -5], [59, -8], [59, -14], [65, -22], [97, -19], [31, -12], [58, -41], [7, -12], [-4, -13], [14, -12]], [[21270, 97531], [65, -11], [77, -37], [73, -79], [4, -10], [0, -13], [-3, -16], [-9, -21], [-13, -12], [37, -15], [4, -8], [-3, -17], [4, -12], [23, 12], [19, 19], [5, 12], [4, 32], [57, 17], [60, 23], [28, 5], [47, -5], [112, -56], [43, -5], [16, -7], [14, -13], [1, -14], [-23, -32], [-9, -20], [6, -13], [58, -11], [134, 22], [117, -53], [65, -63], [47, -21], [8, -11], [-14, -11], [-13, -29], [-39, -22], [-8, -10], [21, -26], [1, -17], [-2, -22], [7, -13], [53, -14], [119, -93], [22, -26], [14, -32], [1, -11], [-17, -18], [-19, -51], [-10, -12], [-49, -10], [-88, -9], [-83, -17], [-88, 22], [-87, 34], [-26, 22], [-22, 28], [-5, 10], [-9, 44], [-4, 9], [-37, 24], [-32, 37], [-63, 3], [-147, 38], [-63, 8], [-64, -2], [-89, -15], [-17, 4], [-15, 11], [-14, 18], [-3, 14], [14, 23], [-262, -29], [-75, -35], [-105, 6], [-53, 14], [-69, 33], [-32, 29], [-30, 38], [-3, 29], [24, 20], [25, 11], [26, 4], [142, -23], [125, -11], [54, 11], [25, 32], [-30, 16], [-120, 7], [26, 17], [101, 16], [53, 26], [-10, 8], [-30, 10], [-137, -2], [-48, 9], [-3, 9], [11, 10], [77, 51], [-3, 10], [-33, 16], [-29, 22], [-11, 3], [-68, -20], [-95, -75], [-22, -11], [-22, 1], [-21, 12], [1, 16], [21, 19], [44, 58], [-4, 21], [-42, 14], [-114, -10], [-63, -1], [-9, 17], [-3, 30], [3, 29], [15, 45], [22, 35], [13, 12], [151, -7], [245, 21], [71, 2], [78, -21]], [[22558, 97915], [6, -75], [-6, -38], [-14, -28], [-12, -7], [-17, 0], [-76, 21], [-23, 13], [-1, 11], [-8, 21], [-50, 27], [-95, -4], [-40, 3], [-16, 8], [-10, 12], [-9, 47], [2, 17], [11, 29], [7, 7], [70, 27], [20, 2], [85, -10], [75, -1], [38, -7], [34, -17], [20, -26], [9, -32]], [[24476, 98578], [36, -48], [134, -115], [61, -42], [103, -51], [13, -19], [1, -8], [-3, -28], [30, -10], [88, -16], [99, -28], [18, 1], [34, 17], [42, 5], [54, -4], [26, -12], [19, -18], [8, -13], [1, -10], [-19, -19], [2, -8], [12, -8], [2, -11], [-20, -41], [5, -15], [50, -37], [45, -19], [89, -20], [58, 2], [36, -13], [1, 8], [-17, 23], [-34, 34], [-65, 18], [-9, 19], [-5, 34], [6, 22], [33, 18], [27, 6], [84, 1], [45, -8], [80, -25], [8, -14], [4, -27], [3, -54], [-2, -12], [-67, -30], [-15, -21], [17, -6], [58, -5], [90, -19], [35, -2], [35, -44], [27, -41], [-20, -52], [-26, -82], [-21, -19], [-21, -28], [15, -6], [88, 12], [18, 4], [59, 28], [86, -7], [29, -7], [15, -10], [26, -31], [22, -41], [16, 3], [40, 51], [15, 12], [20, 12], [9, -2], [40, -47], [91, -82], [31, -34], [6, -26], [-39, -29], [-30, -15], [-223, -62], [-99, -35], [-50, -28], [-25, -9], [-54, 5], [-12, -5], [-16, -44], [-18, -19], [-46, -30], [-65, -55], [-38, -24], [-68, 18], [-17, 25], [-10, 58], [-1, 24], [2, 13], [9, 20], [29, 49], [-3, 6], [-14, -5], [-45, -24], [-18, -13], [-16, -23], [-8, -38], [7, -70], [-6, -28], [-18, -14], [7, -11], [53, -15], [9, -7], [6, -12], [3, -17], [-3, -16], [-16, -25], [-30, -10], [-38, 11], [-82, 61], [-36, -3], [-9, -7], [8, -22], [25, -48], [5, -41], [-12, -33], [-23, -53], [-16, -29], [-9, -3], [-41, -1], [-35, 14], [-104, 93], [-51, 39], [-76, 78], [-19, 15], [-12, 4], [-10, -33], [20, -31], [68, -72], [41, -53], [29, -43], [4, -19], [-9, -7], [-15, 4], [-20, 16], [-62, 25], [-26, 15], [-16, 16], [-31, 13], [-45, 8], [-45, 2], [-45, -5], [-8, -8], [50, -23], [18, -12], [13, -17], [9, -19], [-17, -13], [-63, -7], [-84, 5], [-137, 17], [-136, 28], [-125, 44], [-91, 44], [-36, 23], [-11, 17], [34, 16], [119, 19], [119, 13], [-19, 11], [-217, 25], [-71, 4], [-38, -6], [-44, 4], [-34, 20], [-45, 37], [-23, 25], [3, 10], [17, 5], [99, -4], [13, 3], [-49, 19], [-157, 37], [-59, 33], [-11, 12], [-4, 13], [1, 12], [59, 25], [183, 59], [62, 9], [63, 1], [44, 16], [38, 56], [189, 20], [146, 25], [12, 7], [-109, -4], [-155, 5], [-65, 37], [-45, 7], [-49, 0], [-57, -12], [-98, -35], [-47, -9], [-107, -36], [-29, 3], [-15, 4], [-5, 7], [19, 24], [28, 17], [-5, 5], [-42, 4], [-48, -1], [-34, -6], [-122, -32], [-55, -23], [-17, -3], [-59, 38], [-95, 20], [-21, 16], [20, 63], [27, 13], [73, 11], [217, 57], [13, 11], [20, 29], [-50, -7], [-109, -27], [-90, -14], [-71, 0], [-51, 4], [-33, 8], [-40, 17], [-128, 83], [-36, 39], [-4, 36], [-9, 26], [-38, 65], [276, -40], [107, -8], [208, -2], [10, 3], [3, 11], [-4, 17], [2, 13], [7, 9], [77, 23], [12, 8], [-91, 4], [-168, -39], [-59, 0], [-67, 56], [-71, -10], [-34, 4], [-53, 14], [-26, 12], [-16, 15], [-7, 13], [2, 10], [14, 12], [62, 16], [28, 1], [73, -10], [55, 1], [-18, 17], [-79, 43], [-70, 47], [5, 80], [57, 17], [60, 2], [58, -20], [77, -2], [56, -23], [37, -44], [44, 1], [69, -8], [155, 1], [-28, 15], [-49, 14], [-109, 18], [-53, 63], [-114, 33], [-88, 17], [1, 15], [67, 79], [80, 28], [128, -10], [85, 14], [108, 28], [106, -13], [28, 2], [16, 8], [14, 17], [0, 15], [-14, 14], [-34, 17], [-135, 2], [-60, 7], [-23, 9], [-7, 14], [-4, 14], [0, 15], [4, 9], [11, 5], [33, 6], [126, 0], [76, 8], [83, -10], [173, -39], [55, -20], [60, -34], [31, -30]], [[30697, 99663], [227, -10], [73, 4], [84, -26], [51, -3], [83, 5], [61, -6], [226, -6], [47, -10], [-1, -11], [-48, -26], [-66, -25], [-423, -82], [-31, -13], [83, -4], [121, 3], [94, 9], [111, 28], [37, 2], [70, 13], [137, 38], [109, 20], [49, -9], [42, -14], [28, -2], [15, 11], [23, 30], [14, 11], [36, 7], [22, -1], [35, -14], [40, -33], [36, -23], [20, 0], [83, 26], [41, 3], [96, -9], [39, -12], [7, -12], [-25, -13], [-16, -11], [-6, -10], [14, -11], [58, -23], [83, -51], [-1, -19], [-45, -38], [1, -9], [214, 40], [217, -18], [61, -12], [23, -15], [25, -24], [27, -34], [-19, -35], [-95, -55], [-98, -43], [-58, -38], [-88, -22], [-305, -92], [-149, -30], [-85, -30], [-39, -5], [-181, 6], [-48, -16], [-26, -28], [-58, -13], [-84, -9], [-172, -7], [-39, -31], [-10, -21], [-17, -16], [-15, -8], [-492, -111], [-10, -18], [50, -8], [63, 8], [717, 134], [137, 9], [128, -10], [-14, -31], [-181, -88], [-231, -80], [-115, -61], [-291, -104], [-237, -105], [-92, -52], [-122, -95], [-42, -23], [-51, -9], [-60, 4], [-54, 14], [-72, 35], [-65, 39], [-21, 7], [13, -19], [126, -132], [-14, -25], [-232, -27], [-103, -23], [-53, -6], [-38, 4], [-36, -2], [-36, -10], [-2, -10], [32, -11], [92, -9], [206, 30], [33, -2], [52, -15], [3, -13], [-55, -42], [-166, -50], [21, -2], [48, -18], [-1, -16], [-52, -38], [-25, -12], [-160, -35], [-70, -8], [-62, 4], [-281, 77], [-99, 11], [-94, 19], [-69, -3], [-74, -22], [33, -12], [136, -21], [114, -4], [47, -9], [18, -14], [49, -51], [8, -27], [-11, -25], [-15, -18], [-18, -10], [-30, -5], [-111, 3], [-41, -6], [-48, -15], [-61, -6], [-109, 3], [-128, -22], [-67, -4], [-76, 10], [-81, 24], [-86, 12], [-145, 11], [12, -14], [51, -6], [104, -37], [50, -51], [47, -8], [96, -42], [69, -6], [72, -14], [102, 18], [68, -3], [-14, -102], [-30, -10], [-164, 0], [-79, 15], [-34, 15], [-76, 17], [-68, -10], [-62, 2], [-42, -10], [-67, 1], [-174, -18], [-92, 0], [-68, 11], [-79, 4], [-90, -4], [7, -12], [38, -4], [55, -19], [52, -29], [43, -13], [51, 7], [52, 14], [190, 23], [84, 3], [75, -10], [49, -12], [35, -15], [44, -40], [109, -5], [84, -13], [133, -58], [37, -4], [15, -15], [-28, -38], [-4, -22], [-92, -44], [-144, -12], [-158, 4], [-113, -5], [-12, -6], [78, -11], [180, -51], [69, -28], [13, -16], [-100, -61], [-87, -122], [-29, -10], [-30, -3], [-77, 2], [-98, -30], [-74, -6], [-134, 11], [-154, -1], [-13, -19], [-7, -38], [1, -57], [9, -76], [-8, -56], [-26, -35], [-32, -26], [-58, -25], [-60, -16], [-44, -5], [-75, -1], [-213, -18], [-105, 1], [-81, 8], [-83, 25], [-140, 71], [-40, 16], [-38, 9], [1, -15], [42, -40], [35, -26], [28, -11], [-7, -12], [-62, -20], [-67, -8], [-81, 0], [-2, -7], [27, -21], [35, -19], [24, -6], [61, 6], [72, 24], [44, 8], [89, -6], [35, -9], [110, -54], [16, -2], [82, 27], [118, 1], [44, -21], [16, -43], [2, -34], [-12, -26], [27, -25], [67, -25], [52, -6], [37, 14], [56, 35], [24, 8], [23, -2], [34, -25], [46, -48], [5, -56], [-38, -64], [-46, -42], [-180, -69], [-55, -27], [-43, -28], [-63, -26], [-123, -34], [-64, -6], [-140, -37], [-31, -2], [-45, 6], [-9, 18], [11, 32], [15, 30], [19, 27], [0, 23], [-39, 35], [-28, 16], [-27, 9], [-54, -5], [-30, -10], [-33, -2], [-35, 6], [-29, 15], [-59, 63], [-22, 8], [-29, -2], [-25, 9], [-23, 20], [-38, 19], [10, -15], [38, -35], [26, -36], [15, -35], [-7, -27], [-321, -16], [-138, 8], [-28, 25], [-66, 103], [-14, -183], [-241, -30], [-56, 5], [-93, 20], [-121, 50], [-50, 33], [-20, 32], [-15, 18], [-9, 3], [-30, -39], [-33, -81], [-83, 21], [-104, 20], [-38, 80], [-2, -115], [-169, 15], [-81, -4], [-23, 100], [-4, 112], [-33, -71], [14, -59], [5, -73], [-72, 21], [-157, 10], [-56, 10], [7, 96], [13, 97], [202, 96], [60, 45], [44, 18], [69, 12], [89, 7], [60, -6], [70, 6], [82, 17], [59, 5], [11, 6], [-17, 9], [-63, 62], [-23, 14], [-23, 6], [-45, 3], [-45, 27], [-25, 24], [-28, 32], [-43, 62], [-44, 69], [22, 37], [72, 30], [72, 21], [73, 11], [60, 0], [73, -16], [103, -32], [59, -36], [74, -76], [49, -61], [39, -27], [177, -50], [59, -8], [70, 4], [143, 13], [70, 14], [31, 16], [16, 23], [21, 18], [63, 41], [96, 85], [54, 68], [12, 22], [11, 28], [9, 32], [-30, -17], [-167, -167], [-35, -30], [-97, -51], [-42, -8], [-66, 2], [-89, 23], [-104, -36], [-63, 9], [-56, 25], [0, 118], [-71, 95], [78, 48], [65, 29], [115, 77], [26, 1], [84, -12], [-46, 17], [-45, 26], [-100, -7], [35, 166], [-67, -124], [-68, -65], [-42, -33], [-46, -18], [-176, -17], [43, 61], [40, 90], [-42, -34], [-99, -50], [-74, -27], [-61, -14], [-118, 4], [-59, 25], [17, 62], [0, 77], [36, 35], [54, 46], [59, 61], [40, 63], [158, 29], [153, 11], [128, 34], [63, 6], [60, -16], [244, -26], [100, -20], [44, -15], [33, -5], [34, 22], [44, 21], [152, -2], [42, 3], [39, 10], [47, 20], [56, 30], [8, 15], [-38, -1], [-39, -8], [-58, -21], [-56, -12], [-57, 2], [-115, 19], [-200, 3], [-102, 8], [-47, 9], [-27, 12], [-23, 19], [-20, 25], [10, 17], [41, 10], [35, 2], [57, -14], [63, -23], [69, -3], [-24, 21], [-88, 42], [-60, 36], [-51, 44], [-40, 43], [-87, 68], [-70, 68], [-50, 30], [-52, 15], [-160, 18], [-32, 12], [-76, 59], [-20, 100], [-34, 61], [32, 77], [54, 35], [318, -27], [135, 4], [172, -10], [92, -19], [106, -47], [94, -53], [91, -36], [83, -48], [91, -73], [54, -34], [47, -21], [62, -19], [118, -23], [103, -7], [53, 3], [57, 16], [41, 20], [-45, 6], [-119, -3], [-82, 11], [-47, 23], [-50, 31], [-79, 59], [-60, 39], [-131, 63], [-97, 62], [-78, 60], [-7, 25], [56, 18], [69, 13], [432, 40], [258, 48], [105, 56], [12, 13], [346, 78], [244, 29], [94, 5], [85, 13], [3, 7], [-74, 11], [-75, 5], [-171, 0], [-152, 9], [-46, 18], [10, 28], [14, 25], [46, 40], [49, 31], [209, 88], [140, 38], [41, 25], [-302, -57], [-106, -41], [-106, -62], [-55, -19], [-39, 5], [-35, -6], [-31, -16], [-25, -30], [-21, -44], [-19, -30], [-17, -16], [-43, -23], [-104, -44], [-242, -63], [-82, -16], [-70, -3], [-226, -35], [-68, -2], [-76, 11], [33, 31], [119, 56], [32, 25], [-77, -5], [-78, -16], [-172, -12], [-69, -23], [-66, -42], [-53, -26], [-40, -11], [-55, -6], [-202, -3], [-45, 2], [-116, 32], [-103, -11], [-43, 2], [-78, 23], [-23, 14], [3, 20], [45, 37], [53, 35], [170, 78], [109, 37], [158, 31], [369, 35], [17, 26], [-374, -29], [-318, -36], [-52, -14], [-74, -35], [-235, -129], [-70, -33], [-106, -7], [-81, 11], [-63, 16], [-109, 38], [-83, 21], [-39, 13], [-23, 14], [-18, 17], [-15, 18], [27, 16], [210, 33], [284, -6], [128, 7], [125, 20], [186, 51], [201, 71], [40, 22], [-74, 5], [-54, -5], [-131, -26], [-208, -68], [-181, -24], [-448, -13], [-142, -19], [-63, 4], [-47, 19], [-52, 34], [9, 28], [107, 31], [84, 7], [15, 7], [-119, 30], [-11, 15], [69, 34], [148, 50], [76, 15], [137, 10], [142, -5], [5, 9], [-140, 19], [-105, 4], [-138, -14], [-369, -80], [-31, 2], [-53, 14], [15, 20], [197, 85], [6, 13], [-141, -2], [-42, 4], [-40, 10], [-58, -9], [-75, -27], [-52, -12], [-31, 4], [-78, 33], [10, 27], [62, 35], [57, 25], [77, 23], [126, 29], [90, 10], [148, 0], [70, 13], [62, 22], [78, 36], [86, 25], [140, 20], [118, -6], [65, -18], [51, -31], [56, -24], [5, 19], [46, 24], [58, 10], [69, -3], [61, -12], [79, -28], [63, -13], [30, 0], [38, 16], [99, 1], [-2, 6], [-32, 17], [-40, 12], [-352, 82], [-10, 18], [119, 17], [74, 21], [35, 5], [87, 43], [57, 22], [105, 25], [43, -7], [53, -22], [51, -14], [151, -13], [65, -14], [115, -81], [46, -26], [66, -27], [39, -10], [77, -6], [8, 15], [-92, 38], [-25, 22], [11, 18], [20, 10], [28, 1], [72, -17], [192, -56], [288, -67], [110, -15], [68, -24], [62, -29], [61, -20], [11, 2], [-57, 45], [-139, 55], [-371, 94], [-147, 50], [-72, 33], [-53, 34], [-1, 19], [50, 21], [68, 17], [85, 7], [11, 7], [-78, 26], [-45, 22], [1, 16], [93, 12], [57, -4], [108, -28], [91, -13], [15, 8], [-94, 75], [-9, 17], [14, 9], [33, 10], [98, -5], [161, -37], [290, -18], [79, 3], [-12, 8], [-115, 23], [-121, 30], [-53, 18], [-39, 24], [-47, 21], [-4, 9], [75, 16], [196, -3], [182, -24], [155, 9], [97, -6], [39, -8], [70, -26], [224, -96], [23, -15], [26, -23], [27, -32], [38, -8], [74, 21], [49, 21], [-21, 20], [-124, 46], [-28, 20], [-61, 34], [-139, 59], [-37, 28], [-23, 24], [383, 22], [370, -20], [60, -14], [40, -19], [38, -30], [60, -30], [119, -46], [171, -29], [-33, 20], [-127, 51], [-58, 35], [1, 23], [10, 18], [20, 13], [144, 47], [206, 15], [24, -3], [161, -73], [76, -30], [53, -12], [2, 5], [-74, 34], [-56, 18], [-6, 12], [94, 35], [59, 9], [251, 10], [28, -3], [24, -10], [59, -39], [22, -5]], [[52646, 79072], [-12, -56], [-1, -44], [2, -20], [4, 0], [22, -3]], [[52903, 78839], [-13, -75], [-2, -41], [11, -26], [1, -21], [-3, -19], [-19, -2], [-25, 11], [-21, 32], [-17, -4], [-14, -8], [-7, -31], [-6, -36], [2, -21], [10, -15], [8, -34], [5, -43], [5, -20], [-5, -8], [-13, -6], [-11, 5], [-20, 52], [-9, 20], [-15, 3], [-27, -12], [-41, -29], [-17, 0], [-14, 6], [-13, 24], [-11, 47], [-4, 30], [-8, -1], [-26, 9], [-12, -12], [0, -48], [-3, -61], [-13, -38], [-37, -68], [-13, -29], [-6, -21], [-1, -18], [6, -32], [7, -30], [-6, -18], [-19, -9], [-14, 19], [-5, 32], [-30, 45], [13, 37], [-2, 10], [-49, 19], [-21, 28], [-30, 50], [-6, 21], [2, 69], [-2, 17], [-4, 8], [-14, 0], [-20, -24], [-19, -36], [-38, -41], [-4, -8], [13, -40], [-1, -15], [-30, -63], [-6, -21], [-39, -39], [-18, -15], [-54, 29], [-15, 4], [-25, -20], [-34, -18], [-55, -19], [-21, 14], [-9, 13]], [[51950, 78298], [-5, 19], [-14, 33], [-16, 20], [-11, 22], [-14, 24], [-9, 19], [12, 64], [-9, 22], [-5, 32], [3, 22], [-5, 5], [-50, 12], [-42, -4], [-29, -21], [-25, -35], [-3, -8], [2, -6], [12, -32], [-20, -35], [-32, -26], [-22, -3], [-10, 5], [0, 37], [18, 13], [17, 24], [5, 34], [2, 23], [-17, 29], [2, 17], [11, 34], [6, 29], [9, 25], [34, 42], [35, 41], [5, 45], [3, 54], [5, 13], [47, 32], [11, 13], [6, 18], [37, 60], [37, 60], [7, 20], [6, 12], [0, 10], [-4, 7], [-18, 5], [-6, 19], [19, 34], [24, 21], [23, 0], [9, -9], [-1, -11], [10, -12], [18, -4], [21, 4], [22, 13], [13, 30], [7, 23], [34, 26]], [[52115, 79258], [23, -13], [63, -4], [47, 7], [29, 18], [36, 0], [24, -10], [4, 1], [7, 3], [6, 9], [23, 7], [3, 8], [-1, 8], [-4, 4], [-28, -4], [-11, 6], [-2, 15], [9, 25], [20, 20], [18, 5], [12, -5], [31, -38], [7, -2], [5, 7], [6, 4], [11, -7], [11, -24], [2, -4], [69, 9], [15, 0], [47, -42], [48, -43]], [[31229, 19648], [-10, -1], [-25, 11], [-36, 4], [-5, 5], [0, 8], [4, 9], [20, 7], [60, -6], [8, -4], [2, -7], [-10, -19], [-8, -7]], [[31308, 19713], [-10, -4], [-7, 10], [-12, 8], [-46, 16], [-1, 10], [5, 14], [9, 12], [18, 13], [14, 32], [7, -3], [6, -13], [11, -44], [14, -32], [-2, -11], [-6, -8]], [[31535, 20029], [-22, -25], [-16, 1], [-6, 9], [-1, 12], [3, 12], [7, 11], [16, 14], [5, 2], [24, -14], [-10, -22]], [[31366, 20072], [-8, -22], [-17, -29], [-24, -23], [-23, -6], [-16, 12], [-9, 20], [-4, 21], [-5, 11], [-9, 2], [-11, 0], [-14, -8], [-29, -29], [-13, -8], [-9, -2], [-84, 22], [-8, 9], [-10, 19], [-11, 59], [-35, 52], [54, 29], [65, 0], [125, -22], [49, -5], [39, -50], [6, -30], [1, -22]], [[30638, 20207], [223, -57], [68, 35], [55, -1], [16, -48], [-55, -49], [-5, -16], [8, -13], [57, -8], [14, -16], [13, -20], [-11, -31], [-1, -14], [6, -14], [42, -46], [18, -24], [9, -23], [3, -40], [-1, -32], [-9, -4], [-21, 10], [-20, 18], [-18, 46], [-12, 10], [-36, 9], [-35, 22], [-28, -1], [-25, 10], [-23, -9], [-8, 16], [-10, 30], [0, 14], [12, 48], [0, 13], [-7, 1], [-26, -10], [-11, 7], [-29, 35], [-11, 7], [-29, 3], [-17, -62], [-1, -16], [17, -39], [33, -61], [-17, -1], [-47, 19], [-13, 11], [-14, 31], [-28, 18], [-10, 11], [-3, 13], [-1, 40], [-6, 6], [-40, -11], [-8, 10], [-3, 17], [-6, 9], [-26, 16], [-2, 9], [11, 12], [7, 28], [10, 104], [51, -22]], [[30280, 20237], [13, -37], [4, -6], [35, -15], [15, 9], [37, 4], [23, 14], [32, 7], [38, -90], [-4, -28], [-30, -30], [-20, -6], [-19, 9], [2, 15], [-4, 13], [-13, 17], [-12, -1], [-19, -13], [-10, 2], [-19, 14], [-35, 10], [-7, 13], [0, 19], [-7, 9], [-36, 31], [-23, 25], [-20, 4], [-7, -3], [-7, -13], [-17, -11], [-5, 2], [-6, 9], [-3, 14], [7, 29], [11, 3], [49, -6], [30, -13], [27, 0]], [[30169, 20718], [62, -46], [40, 0], [0, -28], [5, -49], [-6, -20], [-16, -20], [-9, -29], [-7, -5], [-45, 35], [-47, 48], [-24, -9], [-31, 12], [-25, -3], [-16, -27], [-36, -14], [-7, 54], [-33, 51], [-33, 41], [18, 63], [22, 10], [20, 21], [81, -22], [42, -19], [45, -44]], [[29743, 21035], [8, -46], [4, -9], [20, 7], [34, 4], [57, -17], [6, -6], [24, -51], [19, -22], [28, -47], [-28, -32], [-17, -45], [-1, -23], [-11, -13], [-17, -14], [-26, -27], [-31, -3], [-31, -14], [-15, -12], [-8, -1], [-10, 7], [-11, 13], [-4, 15], [22, 14], [28, 50], [5, 52], [-30, 9], [-18, -7], [-14, 0], [-15, 16], [-9, -24], [-4, -24], [4, -36], [-3, -11], [-10, -7], [-26, 14], [-26, 24], [-2, 14], [6, 48], [-1, 25], [-5, 37], [-3, 3], [-10, 0], [-31, -7], [-31, 46], [-16, 49], [-57, 14], [44, 69], [67, 10], [22, -35], [74, -24], [-4, 37], [1, 13], [10, 16], [6, 2], [9, -12], [14, -5], [7, -11], [6, -23]], [[29337, 21357], [5, -5], [10, 1], [16, -9], [58, -11], [52, -27], [27, -26], [35, -7], [29, -33], [13, -8], [15, -2], [39, -60], [2, -7], [44, -47], [2, -7], [-25, -3], [-51, 22], [-25, 1], [-19, 7], [-4, 4], [-4, 27], [-5, 13], [-49, 63], [-21, 14], [-35, 12], [-40, -8], [-28, 8], [-9, -3], [-40, 50], [-40, 42], [-17, 50], [-25, 38], [-1, 11], [12, 9], [27, -22], [27, -37], [15, -14], [10, -36]], [[30929, 20245], [-41, 0], [-12, -13], [-66, -19], [-112, 29], [-28, 27], [-38, 58], [-13, -16], [-36, -25], [-36, -19], [-30, -2], [-28, 24], [-6, 12], [-6, 3], [-60, -34], [-66, 34], [-53, 21], [-84, 12], [-59, 43], [-109, -4], [-19, 14], [-7, 42], [6, 20], [23, 11], [6, 24], [24, -6], [30, -31], [9, 1], [20, 29], [30, 26], [11, 3], [54, -32], [22, 4], [32, 14], [5, 12], [5, 22], [9, 13], [28, 6], [27, -12], [3, -38], [-4, -41], [36, -11], [43, 1], [30, -15], [4, 25], [-48, 65], [-20, 40], [-26, 24], [-35, 12], [-28, 75], [1, 66], [-3, 64], [62, 36], [-14, 55], [21, 41], [25, 16], [24, -153], [18, -54], [-23, -11], [-47, 1], [27, -76], [43, -25], [37, -56], [1, -41], [20, -18], [50, -1], [34, 8], [16, 27], [19, 9], [33, -34], [57, -25], [15, -17], [11, -30], [0, -31], [3, -16], [17, 8], [23, 42], [12, 15], [14, 7], [8, 10], [1, 12], [-42, 31], [-220, 141], [-28, 56], [-18, 71], [1, 73], [16, 23], [39, 29], [72, 41], [84, 58], [10, 11], [-1, 37], [-10, 25], [-33, 18], [-35, 4], [-33, -1], [-33, -8], [-60, -39], [-34, 2], [-32, 21], [-24, 42], [-13, 57], [0, 36], [5, 33], [15, 35], [19, 14], [18, -2], [17, 8], [10, 12], [8, 16], [-3, 13], [-6, 12], [-27, 24], [-10, 23], [-23, 38], [12, 10], [41, 6], [28, -26], [26, -30], [16, 0], [15, 13], [33, 38], [28, 49], [25, 56], [21, 34], [23, 3], [69, -105], [24, -4], [80, 57], [9, -3], [28, -29], [8, -12]], [[29405, 21928], [-9, -6], [-30, 14], [-16, 12], [-24, 30], [-3, 31], [-11, 38], [7, 0], [25, -15], [10, -11], [13, -24], [40, -34], [5, -10], [-1, -13], [-6, -12]], [[29216, 22102], [11, -112], [9, -16], [28, -8], [31, -57], [1, -16], [-37, -96], [-8, -69], [-43, 5], [-19, 68], [-27, 66], [-10, 77], [-15, 66], [27, 38], [26, -8], [1, 50], [25, 12]], [[29289, 22305], [-1, -48], [-8, -15], [-8, -5], [-20, 15], [-11, 1], [-18, -25], [-16, -13], [-23, 3], [-31, 17], [-27, -72], [-13, -25], [-27, -33], [-3, 39], [17, 60], [8, 40], [16, 60], [31, -22], [44, 22], [41, 41], [34, 1], [12, -23], [3, -18]], [[29082, 22649], [-7, -53], [-23, 5], [-7, 13], [-4, 34], [-7, 16], [9, 34], [7, 37], [-2, 29], [34, -2], [41, -7], [11, -8], [-12, -25], [-12, -16], [-25, -9], [-3, -48]], [[29151, 22870], [-54, -46], [-16, 19], [-39, 0], [10, 50], [4, 37], [6, 14], [2, 32], [12, 58], [32, -19], [24, -6], [33, -19], [36, -12], [10, -51], [-34, -23], [-26, -34]], [[29137, 23711], [-3, -46], [-41, -88], [-35, -52], [-32, -41], [-21, 0], [-17, 20], [19, 33], [24, 32], [-8, 42], [-7, 13], [-10, 4], [-17, 22], [5, 33], [10, 15], [14, 12], [12, -7], [54, 23], [17, 18], [32, 4], [4, -37]], [[29312, 23532], [2, -85], [-4, -85], [-11, -104], [2, -21], [12, -5], [4, -13], [-4, -55], [-7, -42], [-13, -35], [-7, -41], [-7, -9], [-30, -7], [-17, 4], [-13, 47], [-4, 29], [1, 38], [-16, 51], [-1, 19], [6, 34], [14, 16], [2, 52], [6, 15], [15, 21], [2, 9], [-1, 8], [-5, 1], [-61, -64], [-5, -18], [-3, -24], [-1, -84], [-10, -49], [-10, -9], [-28, -2], [-37, 5], [-42, 44], [-27, -12], [-6, 54], [14, 44], [51, -4], [8, 77], [-16, 18], [-18, 32], [-10, 28], [9, 21], [30, 31], [15, 3], [15, -17], [36, 13], [-2, 49], [-32, 22], [7, 37], [41, 35], [24, 36], [2, 41], [-10, 40], [3, 16], [20, 34], [29, 16], [13, -2], [26, -24], [24, -3], [5, -7], [5, -26], [15, -193]], [[29025, 23753], [-32, -1], [-7, 103], [36, 149], [3, 56], [-12, 43], [-5, 35], [3, 14], [47, 30], [14, -32], [18, -83], [33, -119], [-1, -114], [-18, -28], [-58, -29], [-21, -24]], [[29287, 23852], [-6, -14], [-34, 9], [-59, -15], [-25, 52], [-11, 83], [-8, 18], [-14, 47], [-8, 31], [-15, 48], [-6, 51], [-3, 16], [13, 30], [62, 29], [22, 48], [19, -6], [-5, -98], [11, -33], [22, -28], [3, -11], [4, -35], [11, -53], [13, -26], [4, -15], [0, -13], [-5, -19], [15, -96]], [[29135, 24286], [-20, -7], [-3, 19], [-18, 31], [16, 21], [31, 21], [24, -2], [22, -17], [3, -19], [-38, -25], [-9, -14], [-8, -8]], [[29357, 25523], [-15, -26], [-27, -12], [-27, 20], [-32, -9], [-3, 43], [12, 36], [24, 43], [18, 58], [-2, 81], [14, 18], [8, 29], [31, 18], [7, -61], [-8, -107], [20, -64], [3, -21], [-4, -24], [-19, -22]], [[29155, 25984], [-7, -9], [-9, 3], [-7, 18], [-5, 31], [10, 12], [7, 0], [9, -17], [4, -26], [-2, -12]], [[29546, 26024], [-9, -7], [-8, 1], [-8, 20], [-3, 26], [-18, 39], [-5, 18], [0, 22], [10, 32], [16, 9], [10, -2], [13, -37], [3, -40], [4, -42], [-5, -39]], [[29726, 26048], [-68, -46], [-33, 15], [-13, 34], [-7, 29], [-7, 48], [12, 26], [24, 37], [10, 24], [4, 28], [-2, 27], [4, 25], [14, 9], [50, -28], [52, -43], [18, -29], [3, -23], [-22, -52], [-15, -42], [-24, -39]], [[29518, 26270], [-14, -25], [-22, -4], [-33, -29], [-4, -25], [-1, -30], [23, -37], [11, -43], [14, -64], [10, -61], [-1, -19], [2, -31], [17, -50], [1, -22], [-1, -22], [-7, -41], [-5, -5], [-17, -4], [-1, -25], [-4, -8], [-46, -3], [-23, 12], [2, 74], [-29, 30], [-20, 49], [-23, 85], [-19, 27], [-22, 67], [-33, 58], [38, 36], [-6, 64], [22, 22], [33, 23], [25, -18], [22, 6], [10, 16], [-3, 65], [7, 52], [25, 26], [26, 3], [10, -29], [13, -28], [32, -23], [-1, -29], [-8, -40]], [[29497, 26597], [6, -29], [-13, -4], [-19, 5], [-10, -23], [-5, -4], [-45, 20], [-7, 9], [1, 29], [48, 3], [31, 19], [4, -3], [9, -22]], [[29258, 26723], [-39, -10], [-9, 17], [0, 15], [7, 12], [20, 7], [13, -9], [7, -15], [2, -12], [-1, -5]], [[29507, 26874], [-21, -12], [-19, -3], [-20, 9], [-35, -1], [-34, 22], [-32, 32], [-9, 19], [3, 26], [24, 61], [22, 116], [15, 166], [-12, 63], [1, 26], [6, 31], [2, 33], [-1, 32], [3, 30], [24, 64], [4, 29], [0, 31], [11, 64], [-3, 21], [-9, 18], [7, 16], [85, -47], [56, -11], [3, -49], [11, -38], [7, -68], [8, -16], [-4, -49], [-26, -21], [2, -45], [15, -42], [-22, -16], [-23, -9], [-6, -11], [-17, -10], [-20, -23], [6, -21], [26, -48], [29, -33], [16, -49], [21, -51], [-10, -33], [-19, -46], [-31, -31], [-27, -19], [3, -76], [-10, -31]], [[28110, 32461], [-50, -12], [-2, 3], [3, 10], [11, 18], [14, 21], [3, 1], [5, -2], [6, -4], [15, -14], [4, -10], [-1, -8], [-8, -3]], [[19644, 36209], [-43, -18], [2, 32], [11, 27], [31, -16], [15, -3], [-16, -22]], [[30988, 21683], [-157, 54], [-35, 30], [-30, 3], [-57, -36], [-32, -88], [-16, -25], [-40, -23], [-40, -5], [-134, -85], [-48, -7], [-33, -23], [-32, -32], [-12, -70], [5, -42], [-36, -152], [-9, -84], [0, -44], [10, -70], [-13, -120], [-25, -26], [-59, -34], [-41, 24], [-69, 22], [-50, 46], [-63, 33], [-21, 20], [-56, 92], [-6, 31], [-4, 39], [30, 56], [16, 4], [46, -2], [39, 9], [25, -30], [6, -65], [-10, -34], [-10, -22], [3, -16], [28, 23], [14, 145], [94, 72], [31, 42], [30, 66], [5, 18], [2, 25], [-20, 20], [-44, 27], [-142, -137], [-64, -36], [-42, -39], [-50, -71], [-9, -21], [-11, -46], [-5, -52], [-49, 24], [-76, 74], [-15, 28], [15, 38], [23, 31], [2, 107], [6, 38], [16, 30], [29, 33], [14, 7], [12, -14], [2, -25], [48, 2], [93, 94], [38, 3], [51, -22], [57, 13], [11, 10], [11, 22], [-42, 26], [-41, 13], [-115, 10], [-25, -10], [-34, -51], [-11, 13], [-7, 25], [-39, 18], [-19, -4], [-18, -24], [3, -37], [-10, -41], [-36, -39], [-25, -64], [1, -49], [-1, -26], [-9, -14], [-19, -16], [-60, 11], [-34, 52], [-13, 35], [-38, 39], [83, 47], [29, 27], [27, 61], [20, 39], [-14, 27], [-17, 0], [1, -43], [-18, -36], [-38, 17], [-57, -52], [-35, 14], [-56, -16], [-28, 28], [-6, 36], [10, 38], [-10, 63], [-16, 15], [-16, -4], [-7, 38], [-17, 66], [-8, 18], [-8, 31], [9, 7], [19, -8], [17, -20], [26, -3], [57, -43], [24, 10], [13, 10], [5, 36], [0, 34], [10, 0], [32, -43], [21, 4], [36, -12], [19, 5], [34, 16], [54, 48], [27, 49], [14, 7], [16, -6], [12, -15], [0, -34], [12, -32], [17, -26], [5, -31], [-3, -32], [-31, -43], [-6, -16], [11, -16], [12, 8], [18, 21], [10, 30], [2, 16], [1, 22], [-1, 27], [-25, 76], [-3, 18], [0, 35], [28, 32], [8, 25], [2, 48], [-15, 33], [-61, 77], [-101, 76], [-12, -8], [-8, -14], [10, -10], [13, -5], [90, -63], [24, -37], [15, -10], [19, -24], [-5, -36], [-91, -34], [-72, -76], [-55, -46], [-37, 17], [-18, 47], [-19, 60], [-28, 35], [-16, -4], [-13, 7], [-11, 18], [-21, -15], [-49, 42], [-13, 18], [35, 58], [39, -22], [9, 165], [-12, 37], [-51, 41], [-24, -5], [-34, 5], [-23, 19], [-26, 8], [-22, 11], [-29, 25], [-34, 14], [-47, 104], [-20, 55], [-11, 60], [72, 2], [42, 10], [10, 25], [-15, 47], [-20, 38], [15, 36], [21, 27], [22, -12], [56, -61], [9, -41], [39, -126], [10, -12], [4, -11], [82, -71], [11, 1], [-5, 59], [23, 81], [23, 26], [11, 0], [1, 13], [-22, 34], [11, 44], [-7, 1], [-19, -28], [-40, -140], [-24, -26], [-33, 64], [-18, 45], [-10, 17], [4, 71], [65, -14], [-22, 23], [-77, 42], [-19, 20], [-14, 7], [-25, 49], [-32, 41], [55, 74], [27, 52], [88, -27], [17, 16], [-15, 38], [-17, -12], [-27, 24], [-43, 72], [2, 36], [7, 67], [17, 14], [36, 14], [41, -22], [17, -17], [16, 8], [-16, 49], [-27, 19], [-29, 35], [3, 39], [9, 33], [8, 35], [5, 50], [-3, 39], [8, 17], [13, 8], [1, 15], [-26, -3], [-9, -49], [-3, -45], [-19, -35], [-7, -41], [-5, -48], [-10, -55], [-23, 21], [-13, 21], [-5, 15], [3, 28], [-6, 175], [-1, 147], [11, 114], [32, 45], [14, 13], [13, -6], [20, 1], [14, 16], [-45, 28], [-28, -16], [-20, -22], [-37, 17], [-7, 58], [-21, 51], [-4, 65], [2, 93], [51, -8], [42, -18], [110, 2], [90, -90], [40, 12], [-2, 18], [-30, 22], [-19, 51], [-11, 14], [-6, 31], [-1, 35], [-23, 129], [-9, -3], [-9, -44], [-18, -74], [-26, -36], [-40, -15], [-40, -8], [-34, 14], [-8, 31], [1, 35], [-15, 17], [-39, 16], [-11, 8], [-13, 32], [19, 49], [15, 29], [18, -6], [18, -13], [23, -38], [22, -7], [25, 30], [5, 21], [-16, 13], [-14, 5], [-23, 16], [-44, 58], [22, 59], [52, 68], [16, 16], [-14, 57], [16, 63], [-16, 51], [-29, 56], [-39, 12], [-8, -16], [-2, -23], [6, -17], [-3, -12], [-9, 0], [-50, 12], [-33, 37], [-54, 34], [-7, 26], [-6, 39], [19, 67], [-10, 1], [-35, -52], [-53, -27], [-40, -9], [-17, -20], [-7, -18], [11, -10], [22, -2], [17, -65], [-4, -25], [-8, -16], [-19, -4], [-38, 45], [-20, 51], [0, 40], [14, 54], [61, 74], [17, 31], [36, 34], [48, 78], [41, 43], [-20, 36], [-21, 53], [2, 75], [84, 30], [37, -13], [47, 3], [26, 18], [18, 3], [40, 21], [17, 29], [4, 22], [0, 20], [-4, 23], [-7, 62], [7, 21], [17, 24], [22, 8], [10, -2], [27, -22], [-6, -32], [-10, -39], [-22, -153], [-11, -35], [-17, -30], [12, -62], [-18, -44], [-76, -47], [-10, -2], [6, -17], [44, 4], [34, 10], [34, 39], [11, 60], [14, 117], [18, 17], [22, 3], [11, -27], [-4, -62], [0, -60], [-28, -176], [-35, -71], [-4, -19], [2, -22], [27, 3], [21, 38], [15, 49], [15, 68], [-2, 49], [5, 30], [6, 100], [11, 50], [-1, 71], [-19, 26], [-26, 16], [-7, 43], [14, 86], [50, -3], [48, 59], [31, 21], [18, -5], [62, -56], [12, -1], [-2, 21], [-9, 14], [-25, 19], [-45, 60], [-61, 10], [11, 78], [12, 72], [30, 9], [49, 24], [94, 107], [17, 81], [4, 91], [-45, 23], [-48, 60], [-39, 31], [-35, 40], [7, 59], [5, 97], [43, 21], [20, 132], [-29, 102], [7, 76], [38, 64], [6, 45], [11, 49], [33, 5], [1, 27], [-3, 49], [-22, 58], [-1, 80], [21, 94], [33, -6], [6, 4], [-23, 57], [-19, 63], [3, 25], [18, 21], [21, 12], [23, -32], [33, -103], [5, 27], [-13, 104], [-11, 130], [-35, -17], [-31, 9], [-12, 20], [-12, 30], [11, 35], [11, 27], [23, 33], [49, 12], [35, 42], [11, 87], [-11, -9], [-19, -76], [-32, -26], [-16, 4], [-19, 14], [-38, 67], [-21, 15], [-20, 2], [-17, -17], [-44, -117], [-19, -20], [-78, -9], [-28, 14], [-31, 17], [3, 29], [10, 31], [17, 16], [1, 17], [-24, 5], [-28, 32], [-13, 41], [-5, 73], [-25, 116], [-5, 83], [17, 59], [38, 232], [12, 119], [20, 104], [0, 68], [52, 63], [20, 38], [45, 211], [6, 114], [-71, 346], [-11, 66], [-3, 82], [17, 136], [2, 52], [-15, 75], [-40, 122], [-1, 62], [17, 64], [-16, 80], [8, 49], [9, 39], [63, -21], [29, 10], [15, 23], [12, 65], [6, 103], [4, 44], [5, 64], [31, 26], [11, 61], [26, 84], [26, 238], [27, 58], [27, 68], [-11, 100], [18, 46], [15, 34], [14, 61], [19, 58], [46, 83], [11, 101], [35, 176], [7, 112], [11, 76], [-3, 71], [21, 86], [20, 73], [7, 40], [46, 97], [8, 76], [-17, 52], [0, 81], [-13, 112], [30, 41], [12, 31], [39, 179], [-3, 70], [11, 87], [-25, 103], [-4, 231], [-14, 179], [-23, 188], [2, 105], [-15, 131], [0, 76], [11, 171], [74, 108], [15, 121], [9, 163], [-3, 119], [-8, 54], [-36, 87], [-10, 157], [7, 41], [31, 44], [21, 61], [11, 95], [23, 75], [9, 181], [18, 144], [10, 50], [30, 63], [5, 17], [5, 48], [-2, 113], [5, 70], [23, 136], [3, 63], [26, 141], [6, 101], [12, 53], [-5, 60], [8, 134], [-18, 76], [-4, 44], [22, 137], [16, 34], [24, 64], [11, 72], [2, 45], [-32, 227], [-4, 78], [7, 180], [11, 116], [-3, 93], [3, 48], [6, 60], [21, 72], [5, 52], [-7, 21], [-26, 27], [-21, 66], [-2, 65], [7, 47], [2, 67], [31, 13], [17, 37], [16, 70], [20, 169], [9, 209], [12, 125], [8, 63], [7, 130], [12, 85], [2, 78], [-2, 60], [-30, 304], [0, 112], [13, 174], [0, 244], [-2, 57], [-12, 54], [-3, 72], [-18, 127], [-17, 253], [0, 134], [-7, 114], [-16, 30]], [[30439, 41275], [11, 7], [27, 5], [27, 0], [35, 24], [37, 44], [24, 65], [10, 60], [0, 52], [-11, 66], [-3, 47], [13, 22], [34, 9], [27, 44], [21, 39]], [[80802, 63359], [13, -26], [9, -37], [8, -68], [4, -63], [-28, -40], [-25, -16], [-50, -154], [-11, -48], [-8, -21], [-3, -21], [1, -21], [-13, -74], [-12, -91], [-7, -37], [-14, -28], [-19, -15], [-11, -2], [-11, -8], [-27, -49], [-30, -38], [5, -17], [0, -16], [-13, -18], [-14, 3], [-42, -14], [-16, -28], [-16, -51], [-6, -7], [-25, -12], [-20, -5], [-33, 36], [-16, 11], [-44, 15], [-43, 24], [-30, 28], [-61, 69], [-7, 123], [-11, 67], [0, 24], [4, 206], [4, 22], [8, 20], [27, 46], [31, 37], [44, 76], [33, 35], [27, 50], [-16, -2], [-12, 6], [12, 43], [12, 23], [14, 12], [29, -9], [27, 9], [19, 38], [19, 8], [71, -12], [49, 17], [24, 35], [12, 2], [36, -10], [14, -37], [-1, 25], [1, 23], [7, -2], [47, -45], [0, 55], [3, 15], [15, 23], [7, -1], [19, -44], [17, -26], [23, -13]], [[80662, 63993], [10, -20], [28, 14], [5, -25], [-1, -12], [-9, -29], [-23, 22], [-23, -5], [-16, 2], [-5, 14], [13, 28], [21, 11]], [[81289, 64308], [-27, -12], [-6, 2], [10, 30], [24, 21], [-1, -41]], [[81330, 64286], [-6, -11], [-8, 20], [-2, 30], [-6, 16], [14, 21], [6, 22], [15, -4], [7, -7], [-14, -23], [-3, -10], [-3, -54]], [[81542, 64979], [3, -27], [-22, 41], [-6, 2], [-11, 15], [-6, 25], [17, 1], [16, -30], [9, -27]], [[82828, 65953], [-10, -34], [-16, 5], [0, 25], [-4, 7], [5, 23], [3, 7], [18, -20], [4, -13]], [[83283, 66507], [-21, -27], [-13, 13], [0, 36], [7, 32], [-8, 23], [7, 28], [16, 8], [5, -17], [9, -10], [3, -9], [0, -18], [-9, -30], [7, -16], [-3, -13]], [[83680, 68021], [-24, -13], [-9, 0], [0, 42], [20, 39], [8, -13], [5, -21], [0, -34]], [[83936, 68939], [-1, -11], [-24, 37], [-11, 7], [5, 21], [16, 5], [13, -47], [2, -12]], [[84000, 69062], [-2, -27], [-8, 4], [-10, 47], [6, 12], [14, -3], [0, -33]], [[83970, 69103], [-4, -12], [-34, 33], [-37, 7], [-13, 29], [-2, 46], [39, -2], [48, -41], [11, -21], [-8, -39]], [[83850, 69983], [-23, -16], [-72, 49], [-51, 55], [-31, 65], [-4, 28], [35, -5], [35, -24], [8, -36], [14, -11], [9, -21], [65, -49], [10, -15], [5, -20]], [[86257, 76345], [-8, 20], [-14, 6], [-25, 29], [-18, 31], [-13, 34], [0, 74], [-2, 11], [-25, 15], [-7, 22], [-12, 10], [-17, -6], [-12, 7], [-10, 12], [-12, 1], [-10, -19], [-6, -41], [-17, -68], [-2, -40], [-7, -59], [-8, -74], [-6, -16], [-19, -2], [-7, -5], [-10, -25], [-12, -4], [-11, 14], [-17, 15], [-16, 2], [-14, -15], [-17, -32], [-10, -26], [-3, -24], [-3, -30], [-17, -29], [-16, -15], [-32, -42], [-11, -18], [-23, 0], [-25, 2], [-34, -12], [-56, -6], [-33, 9], [-41, -8], [-32, -14], [-4, -21], [1, -30], [6, -20], [8, -14], [13, -41], [14, -40], [21, -25], [9, -28], [1, -26], [-10, -32], [-16, -42], [-14, -27], [-10, 1], [-17, 16], [-11, 19], [-26, 7], [-64, -12], [-32, 8], [-15, 16], [-27, 1], [-42, 21], [-25, 6], [-12, 14], [-2, 30], [-12, 21], [-7, 25], [-15, 32], [-15, 15], [-14, 7], [-16, -19], [-16, -17], [-12, 4], [-6, -5], [-7, -14], [-27, -30], [-6, -27], [-11, -56], [-7, -59], [-7, -21], [-10, -3], [-11, -18], [-24, -55], [-20, -51], [-31, -34], [-14, -31], [-7, -29], [-22, -40], [-32, -7], [-25, -12], [-15, -3], [-11, -16], [-9, -24], [-3, -10], [-15, 0], [-14, -21], [-35, -48], [-28, -9], [-36, -31], [-31, -25], [-13, -13], [-4, -15], [-4, -19], [-16, -4], [-14, 1], [-33, -44], [-17, -37], [-64, -79], [-26, -45], [-7, -58]], [[84544, 74886], [-3, 5], [-23, -51], [-45, -48], [-96, -10], [-30, 34], [-11, -24], [-9, -31], [-25, -11], [-39, -2], [-22, -21], [-12, -23], [-54, -8], [-20, -31], [-34, -11], [-140, -135], [-30, -57], [-29, -66], [-21, -34], [-18, -23], [-16, -10], [-17, -23], [-16, -3], [-17, 11], [-19, -4], [-12, -28], [10, -36], [-5, -16], [-37, -19], [-55, -13], [-23, -24], [-8, -14], [-12, -7], [-12, 47], [-4, 62], [23, 15], [20, 8], [116, 86], [-14, 64], [10, 28], [26, 45], [17, 23], [-10, 8], [-75, -15], [-44, 1], [-22, 5], [7, 39], [-4, 38], [-5, 15], [38, 44], [18, 11], [13, -1], [-1, 27], [-11, 40], [12, 52], [79, 61], [19, 55], [31, 51], [58, 128], [4, 22], [16, 60], [3, 24], [-26, 35], [-11, 49], [-78, 89], [-7, 76], [-7, -3], [-12, -53], [-10, -18], [-36, -1], [-18, 20], [-100, 13], [-25, -34], [-23, -53], [-22, -38], [-23, -20], [-19, -35], [-81, -206], [-31, -16], [-144, -124], [-72, -49], [-56, -87], [-19, -52], [-17, -58], [-10, -88], [-51, -107], [-18, -23], [-18, -9], [-23, 3], [-21, -7], [-35, 10], [-43, -34], [-48, -29], [-42, 73], [-30, 19], [-48, -21], [-23, -33], [-47, -162], [-17, -93], [1, -38], [27, -116], [31, -64], [69, -74], [147, -51], [34, 18], [37, 0], [39, -48], [24, -80], [3, -55], [0, -19], [9, -16], [5, -27], [-15, -23], [-12, -12], [-10, -84], [0, -94], [12, -31], [32, -44], [49, -36], [45, -8], [86, 17], [35, 57], [-2, 24], [1, 32], [76, 83], [43, 74], [-7, 19], [-8, 13], [8, 8], [23, 5], [106, 76], [83, -62], [47, -72], [47, -13], [33, -36], [37, -32], [49, -2], [41, -7], [13, 30], [13, 19], [14, -4], [17, -38], [47, -30], [43, 2], [30, 11], [18, -14], [-26, -49], [4, -79], [-20, -25], [-19, -40], [11, -26], [10, -12], [-1, -32], [-17, -18], [-32, -48], [-19, 1], [-9, 9], [-6, 18], [-4, 27], [-12, 18], [-31, 7], [-33, -6], [-73, -71], [-71, -57], [-75, -45], [-25, -28], [-18, -8], [-30, 22], [-19, -2], [-4, -14], [24, -40], [6, -31], [-3, -23], [-13, -11], [-20, 18], [-18, -25], [-8, -42], [0, -99], [-12, -22], [-33, -12], [-35, -32], [-13, 15], [-5, 17], [4, 46], [-4, 22], [-16, -1], [-25, -13], [-18, -31], [-6, -18], [24, -58], [23, -6], [6, -13], [-19, -29], [-45, -42], [-8, -36], [-13, -34], [-19, -27], [-13, -28], [-15, -15], [-25, -17], [-31, -68], [-23, -65], [-27, -32], [-21, -109], [-38, -58], [-14, -94], [10, -58], [41, 1], [21, -21], [44, -76], [52, -49], [53, -28], [66, -71], [19, -29], [15, -61], [29, -174], [20, -86], [2, -46], [31, -85], [33, -146], [37, -127], [8, -99], [-13, -46], [1, -59], [37, -55], [85, -63], [13, -18], [17, -31], [0, -95], [13, -31], [12, -18], [51, -41], [21, -33], [23, -54], [6, -48], [3, -65], [-29, -2], [-23, 7], [-91, 84], [-24, 3], [-33, -12], [-48, 16], [-51, 93], [-36, 28], [-39, 15], [-93, -81], [-24, 6], [-7, -9], [-11, -14], [44, -17], [43, 26], [42, 39], [60, -21], [10, -35], [10, -59], [42, -40], [33, -18], [41, -52], [41, -83], [86, -95], [35, -90], [13, -59], [12, -83], [-30, -27], [-26, -4], [-41, -13], [-30, -29], [-31, -52], [-86, -82], [-17, -51], [-11, -44], [-21, -22], [-54, 21], [-50, -2], [-56, -60], [-14, -24], [9, 4], [9, 8], [25, -9], [40, 32], [38, -98], [76, 16], [71, 82], [27, 1], [23, -13], [25, -32], [69, -142], [37, -16], [37, -33], [20, -4], [18, -10], [-49, -52], [-64, -113], [-28, -27], [-19, -30], [51, 15], [37, 54], [18, 13], [15, -12], [7, -67], [-14, -205], [-18, -3], [-17, 56], [-20, 17], [-18, -11], [-33, 0], [-13, -25], [-11, -36], [20, -7], [40, -62], [4, -33], [-11, -22], [-28, 9], [34, -46], [-9, -48], [-11, -19], [-20, -12], [-12, -42], [18, -69], [18, -89], [2, -43], [-28, 18], [-43, -54], [-23, -4], [-16, 71], [-19, -11], [-13, -21], [-18, -77], [-21, -69], [-19, -19], [-22, 5], [-18, -2], [5, -18], [19, -23], [0, -27], [-41, -84], [-7, -33], [1, -28], [-21, -34], [11, -57], [-6, -40], [-19, -54], [-19, -36], [-24, -58], [-29, -33], [-39, -122], [-11, -61], [-3, -63], [-13, -21], [-20, -28], [-24, 14], [-1, 42], [-10, 4], [-6, 27], [-2, 35], [3, 28], [-10, -8], [-6, -33], [-16, -27], [-16, 11], [-18, 22], [1, -32], [9, -31], [4, -32], [24, -6], [17, -37], [13, -55], [2, -21], [10, -25], [1, -21], [-23, -20], [-29, -36], [-35, -63], [-29, -42], [-26, 0], [-15, 5], [-23, 24], [-26, 10], [35, -85], [19, -15], [24, 3], [23, 32], [33, -3], [8, -49], [-9, -55], [-18, -72], [-3, -62], [22, -88], [1, -27], [-9, -13], [-26, 23], [-21, 29], [-22, -7], [-22, 12], [-23, -10], [-10, -21], [7, -34], [20, -28], [12, -43], [-14, -15], [-58, 10], [-14, -8], [-17, -47], [11, -71], [-13, -43], [-24, -11], [-32, -35], [-19, -8], [1, -15], [14, -16], [8, -21], [-18, -72], [-26, -23], [-42, 12], [-32, -17], [-28, 31], [-30, 1], [-20, -39], [-2, -45], [-20, -4], [-11, 3], [-15, -3], [2, -24], [8, -21], [41, -10], [7, -30], [2, -47], [-43, -80], [-18, -54], [-27, 1], [-20, -43], [-11, -60], [-14, 12], [-31, -9], [-10, -28], [8, -12], [1, -20], [-13, -67], [-14, -18], [-6, 27], [-4, 42], [-11, 3], [-18, -39], [-22, -28], [-18, -11], [-14, 26], [-34, 13], [-13, -112], [-29, -40], [-13, -13], [-23, -4], [15, -15], [5, -29], [-9, -28], [-23, -6], [-13, -22], [-5, -100], [-14, -35], [-35, -2], [-26, 23], [-8, -19], [-4, -17], [-14, -18], [-26, -5], [-59, -45], [-26, 13], [-32, 17], [-23, -17], [-7, -34], [-10, -26], [-32, 0], [-26, 32], [-26, 24], [-29, -20], [-22, -42], [-27, -14], [-5, -26], [-12, -13], [-29, 5], [-11, 65], [-16, 9], [-16, -32], [-6, -26], [-8, -19], [3, -53], [-16, -1], [-21, 32], [-23, 6], [-20, -30]], [[81740, 64827], [-11, 8], [-11, 6], [-18, 0], [-7, -8], [-13, -5], [-9, -16], [-1, -2]], [[81670, 64810], [-23, 11], [-29, 44], [-20, 73], [-26, 39], [-12, 35], [-4, 62], [-5, 29], [2, 33], [7, 29], [-28, -15], [-20, -27], [4, -34], [-5, -32], [-31, -16], [2, -14], [2, -14], [24, -43], [5, -36], [10, -20], [19, -56], [-1, -110], [11, -31], [-4, -30], [-7, -42], [-1, 0], [-6, 12]], [[81534, 64657], [-9, -2], [-3, -14], [-1, -13]], [[81521, 64628], [-1, -1], [-16, -9], [-14, -8], [-11, -11], [-17, -32], [-33, -8], [-16, 76], [-23, -51], [-6, -104], [-9, -18], [-14, -15], [-26, 37], [-23, -25], [-18, -25], [-8, -22], [-13, -25], [-25, 24], [-21, 36], [5, 27], [-2, 17], [-10, 14], [-10, -2], [5, -35], [4, -67], [-10, -19], [-14, -15], [-31, 12], [-21, 25], [-26, 21], [-22, 4], [-5, -42], [-15, -35], [-13, -4], [-14, 6], [-18, -37], [-8, -27], [-22, -29], [-58, -13], [-21, -29], [-27, 5], [-21, -7], [-13, 2], [-10, 15], [-13, 0], [-5, -47], [-33, -20], [-30, -5], [-33, -62], [-24, -37], [-17, -4], [-13, 13], [-7, 56], [-6, 6], [-4, -52], [-6, -43], [-12, -24], [-38, -54], [-11, -54], [7, -49], [51, -12], [7, -27], [-5, -22], [-13, -19], [-3, -28], [55, -88], [2, -34], [-9, -19], [-10, -41], [-29, -35], [-62, -18], [-51, 18], [-16, 40], [1, 28], [13, -8], [14, 3], [-4, 26], [-6, 15], [-24, 23], [-19, 62], [4, 51], [-11, 40], [-11, 34], [-12, 20], [-6, 25], [12, 78], [-7, 45], [22, 56], [6, 63], [39, 22], [3, 60], [-29, 2], [-19, 44], [-5, -18], [-15, -2], [-26, 84], [-8, 11], [-12, 2], [6, -90], [-30, -33], [-25, -15], [-35, -6], [-20, -10], [-18, 8], [4, 27], [10, 33], [-9, 27], [-20, 20], [-30, -1], [-21, 6], [-20, -2], [-8, 12], [-19, 42], [-17, 26], [-7, 26], [7, 31], [-6, 18], [-32, 2], [1, -43], [3, -52], [9, -39], [-6, -22], [-16, -15], [-17, 42], [-8, 10], [-9, -2], [-6, -41], [-15, -37], [-28, 4], [-22, -23], [-26, -10]], [[79992, 64232], [-18, 30], [-30, 49], [-12, 6], [-33, -24], [-47, -9], [-10, 25], [-23, -19], [-22, 59], [-26, 3], [-32, 45], [-12, 23], [-4, 34], [-10, 18], [-12, -3], [-14, 18], [-23, 18], [-18, 11], [-9, -9], [-9, -4], [-2, 23], [1, 68], [-2, 61], [-5, 27], [-12, 20], [-11, 10], [-4, 31], [4, 61], [8, 42], [15, 7], [19, 30], [9, 42], [12, 39], [-43, 55], [-23, 20], [-25, -9], [-31, -17], [-17, -4], [-8, 7], [-18, 50], [-10, 8], [-22, 3], [-19, 0], [-11, -22], [-16, -7], [-17, -1], [-17, 27], [-25, 35], [-40, 24], [-5, 29], [-10, 34], [-15, 31], [-25, 42], [-21, 21], [-10, -13], [-14, -24], [-53, -50], [-24, -19], [-13, -14], [-10, -21], [-4, -51], [-5, -58], [-15, -29], [-15, -22], [-15, -2], [-15, 1], [-15, -9], [-43, -58], [-20, 5], [-17, 32], [-7, 24], [-19, -6], [-25, -27], [-11, -50], [-6, -46], [-6, -20], [-8, -6], [-8, -2], [-77, 134], [-4, 7], [-14, -28], [-13, -70], [-9, -14], [-6, 6], [-32, 90], [-8, 9], [-7, -3], [-10, -30], [-20, -43], [-15, -26], [-1, -29], [-17, -26], [-19, -26], [-7, -2], [-13, 10], [-17, 34], [-12, 36], [-30, 35], [-34, 30], [-23, 23], [-13, 6], [-12, -10], [-6, -15], [-8, -35], [-20, -58], [-19, -46], [-17, -30], [-13, -20]], [[78368, 64734], [-10, 19], [-19, 15], [-22, 1], [-28, -30], [-23, 59], [-6, 3], [-9, -5], [-10, -14], [-7, -33], [-7, -45], [-14, -29], [-13, -13], [4, -26], [7, -27], [-1, -24], [5, -38], [7, -38], [27, -61], [10, -33], [2, -27], [1, -100], [-1, -41], [-5, -80], [0, -46], [11, -21], [11, -25], [-1, -13], [-5, -5], [-15, -28], [-6, -3], [-11, 11], [-13, 9], [-10, 11], [-12, 17], [-27, -2], [-45, -27], [-9, 8], [-7, 15], [-3, 32], [2, 37], [-4, 23], [-9, 14], [6, 66], [-16, 26]], [[78093, 64266], [3, 8], [-6, 72], [1, 17], [-3, 6], [-11, 6], [-17, -11], [-51, -47], [-44, -87], [-20, -19], [-20, -8], [-24, 15], [-27, 10], [-37, -22], [-19, 10], [-9, 18], [-7, 27], [4, 34], [-2, 25], [-16, 13], [-17, 11], [-10, 32], [-5, 36], [4, 47], [3, 50], [-9, 23], [-26, 12], [-64, 23], [-57, 12], [-24, -6], [-19, 6], [-11, 9], [-6, 16], [0, 22], [9, 52], [11, 51], [26, 73], [2, 51], [-2, 59], [13, 79], [23, 59], [11, 18], [-3, 26], [-9, 24], [-13, 13], [-21, 16], [-34, 4], [-45, 16], [-54, 35], [6, 67], [0, 42], [-7, 34], [-11, 24], [-6, 22], [10, 60], [-13, 65], [-14, 27], [-15, 33], [-2, 37], [7, 34], [37, 73], [0, 17], [-9, -1], [-10, -2], [-50, -26], [-6, 16], [-18, 10], [-37, 2], [-43, -5], [-54, -26], [-50, -45], [-22, -32], [-20, -19], [-15, -7], [-19, 14], [2, 45], [34, 82], [4, 56], [-10, 49], [-1, 38], [-12, 25], [-17, 12], [-9, 28], [0, 80], [15, 83], [24, 26], [15, 13], [4, 16], [-8, 57], [1, 37], [15, 72], [14, 54], [28, -9], [12, 13], [13, 19], [15, 33], [10, 38], [12, 90], [8, 13], [35, -15], [10, 11], [19, 52], [18, 64], [26, 20], [18, 2], [9, 21], [-1, 31], [-17, 50], [-8, 39], [2, 24], [26, 15], [6, 29], [-4, 63], [11, 75], [6, 89], [2, 66], [0, 50], [-3, 53], [-4, 96], [-11, 84], [2, 32], [-2, 102], [-7, 86], [-14, 16], [-26, 28], [-15, 5], [-12, -10], [-5, -30], [-11, -28], [-15, 6], [-6, 29], [-10, 37], [-30, 175], [-4, 50], [-5, 51], [-10, 25], [-11, 14], [-25, 59], [-13, 25], [-6, 4], [-14, -4], [-13, 0], [-11, 29], [-9, 36], [-10, 18], [-17, 9], [-17, -3], [-10, -31], [-7, -18], [-12, -41], [-21, -58], [-10, -21]], [[77033, 68097], [-9, 11], [-40, 60], [-19, 16], [-27, -18], [-41, 14], [-16, 3], [-34, 48], [-14, 6], [-48, -31], [-11, -22], [-6, -1], [-13, 11], [-11, 15], [-1, 9], [14, 24], [1, 16], [-1, 16], [19, 47], [51, 91], [-8, 38], [-21, 74], [-2, 37], [-9, 16], [-25, -14], [-51, -67], [-7, 7], [1, 24], [-5, 68], [16, 20], [25, 26], [19, 28], [5, 22], [-5, 7], [-29, -9], [-11, 16], [-18, 62], [-14, 25], [-12, 13], [-42, -32], [-49, -45], [-54, -61], [1, -32], [-7, -8], [-10, -20], [-10, -28], [-9, -10], [-10, -1], [-20, 8], [-38, 32], [-40, 26], [-9, -3], [-55, 18], [-2, 15], [-8, 29], [-16, 26], [-15, 9], [-43, -56], [-48, -41], [-28, -49], [-23, -48], [-26, -10], [-1, -30], [-11, -27], [-20, -33], [-39, -42], [-27, -23], [-84, -21], [-30, -14], [-13, -22], [-14, -57], [-10, -52], [-24, -43], [-42, -57], [-50, -47], [-14, -31], [-2, -18], [6, -7], [6, -14], [0, -21], [-7, -23], [-32, -40], [-19, -19], [-18, -12], [-20, -3], [-20, 6], [-6, 6], [-7, -8], [-18, -9], [-16, -2], [-34, -45], [-19, 0], [-24, 10], [-31, 7], [-22, 0]], [[74691, 67578], [-16, 27], [-19, 38], [-4, 53], [22, 142], [5, 58], [-5, 22], [-7, 58], [-13, 19], [-38, 30], [-12, 0], [-13, -20], [-12, -14], [-17, -13], [-42, -24], [-37, -12], [-9, -9], [-3, -16], [3, -20]], [[74474, 67897], [-24, 7], [-25, 5], [-20, -3], [-49, -37], [-17, -4], [-19, 4], [-25, 1], [-48, -1], [-42, 10], [-33, 52], [-24, 22], [-26, 18], [-25, 13], [-9, 28], [-8, 14], [-21, 5], [-17, -10], [-10, -70], [-9, -14], [-21, -6], [-23, 17], [-30, 36], [-12, 40], [-11, 14], [-16, -18], [-1, -51], [-3, -35], [-19, -14], [-12, 10], [-9, 36], [-22, 84], [-23, 49], [-22, 32], [-75, 0], [-55, 9], [-25, 14], [-9, 32], [9, 65], [11, 50], [0, 12], [-10, 6], [-15, 4], [-60, -32], [-16, 3], [-10, 11], [-13, 10], [-10, 15], [-8, 22], [-51, 53], [-15, 30], [-28, 37], [-23, 25], [-15, 72], [-13, 69], [-7, 36], [-22, 20], [-24, 15], [-41, -30], [-33, -23], [-24, -3], [-35, 71], [-29, 77], [-33, 66], [-22, 34], [-39, 3], [-45, 37], [-59, 85], [-43, 64], [-74, 71], [-17, 29], [-6, 25], [-10, 50], [-16, 47], [-52, 20], [-59, 15], [-63, -29], [-45, -141], [-22, -30], [-18, -2], [-15, 36], [-13, 37]], [[72502, 69218], [-7, 42], [-31, 31], [-35, 40], [-18, 32], [-20, 19], [-19, 9], [-37, 26], [-41, 30], [-19, 4], [-2, 21], [6, 46], [-4, 43], [-12, 18], [-19, -5], [-43, 62]], [[72201, 69636], [-3, 3]], [[72198, 69639], [-12, 17], [-22, 25], [-36, -1], [-27, -10], [-20, 26], [-29, 41], [-6, 9]], [[72046, 69746], [-8, 15]], [[72038, 69761], [-30, 78], [-35, 93], [-17, 13], [-9, -7], [-11, -49], [-7, 5], [-13, -3], [-15, -18], [-15, -4], [-10, 5], [-4, 12], [5, 65], [-9, 21], [8, 45], [13, 39], [-14, 29], [-16, 41], [-2, 38], [9, 47]], [[71866, 70211], [4, 41], [-3, 14], [-13, 23], [-50, 111], [-3, 12], [-9, 37], [-3, 56], [-7, 40], [-8, 30], [1, 15], [6, 7], [31, 8], [29, 4], [20, 11], [10, -23], [4, -34], [5, -18], [19, -32], [22, -31], [22, 4], [19, 13], [17, 51], [12, 12], [14, 2]], [[72005, 70564], [0, 4], [-1, 33]], [[72004, 70601], [5, 80], [-2, 32], [-6, 29], [1, 32], [-2, 47], [-16, 32], [-10, 12], [-2, 17], [6, 32], [3, 37]], [[71981, 70951], [-5, 27], [-1, 4]], [[71975, 70982], [-13, 14], [-15, 24], [-18, 31], [-8, 24], [-15, 25], [-17, 40], [-4, 86], [-1, 92], [-6, 45], [-10, 73], [1, 24], [6, 18], [50, 59], [11, 22], [1, 18], [-2, 25], [-9, 29], [-20, 22], [-28, 36], [-26, 37], [-43, 23], [-52, 28], [-13, 28], [-12, 66], [-22, 102], [-23, 109], [-18, 66], [-1, 33], [11, 82], [-1, 17], [-9, 6], [-18, -10], [-14, -13], [-12, 6], [-12, 14]], [[71613, 72283], [-2, 5], [-1, 2]], [[71610, 72290], [-21, -9], [-42, -5], [-14, 1], [-21, 1], [-42, 19], [-57, 25], [-58, 35], [-32, 28]], [[71323, 72385], [-11, 10], [-26, 29], [-19, 25], [-3, 66], [-14, -5], [-32, -24], [-38, -15], [-20, 0], [-9, 10], [-12, 70], [-9, 19], [-17, 8], [-18, 12], [-9, 18], [-2, 23], [8, 26], [10, 20], [1, 123], [-6, 44], [-5, 36], [-14, 46], [-12, 28], [-19, 26], [-29, 27], [-26, 10], [-32, -19], [-10, 7], [-13, 84], [-8, 17], [-56, 35], [-25, 8], [-30, -11], [-16, -9], [-13, 15], [-21, 19], [-21, 14], [-25, 0], [-17, -8]], [[70802, 73289], [8, 11], [25, 25], [20, 29], [11, 24], [-6, 38], [-31, 45], [-20, 25], [-6, 16], [5, 50], [7, 49], [-4, 19], [-6, 16], [-3, 53], [-13, 65], [-15, 38], [-4, 51], [-1, 47], [18, 75], [-7, 32], [-18, 29], [-64, 52], [-66, 34], [-25, -1], [-16, 2], [-18, -30], [-11, -40], [-15, -4], [-28, 17], [-19, 26], [-13, 53], [-11, 68], [-6, 21], [3, 18], [7, 17], [18, 15], [3, 16], [-3, 19], [-14, 25], [-15, 34], [-23, 72], [4, 40], [4, 57], [-1, 30]], [[70453, 74567], [23, 7], [30, 16], [14, 25], [9, 26], [2, 16], [-9, 63], [-12, 27], [-1, 22], [6, 16], [8, 29], [15, 58], [15, 37], [8, 9], [18, 9], [43, 10], [47, 26], [56, 78], [19, 22], [24, 11], [18, -1], [3, 10], [-12, 48], [3, 17], [7, 14], [8, 6], [39, -25], [30, 3], [36, 15], [77, 85], [10, -2], [8, -11], [9, -51], [11, -108], [6, -14], [54, -1], [37, 39], [16, 9], [26, -6], [14, 18], [14, 13], [17, -45], [22, 22], [23, 34], [11, 36], [16, 38], [12, 49], [5, 46], [6, 21], [13, 22], [32, 95], [24, 24], [21, 9], [55, -17], [28, 2], [83, -12], [38, 18], [27, 18], [39, -3], [46, 15], [62, 118], [1, 25], [4, 27], [22, 27], [28, 24], [55, 58], [113, 91], [40, 37], [17, -1], [42, 23], [73, 45], [20, 56], [19, 11], [86, 10], [5, 6], [3, 10], [-5, 40], [-5, 35]], [[72280, 76146], [6, 10], [7, 16], [-1, 22], [-13, 72], [-8, 69], [-5, 61], [1, 24], [11, 39], [13, 36], [48, 34], [32, 10], [2, 22], [-26, 14], [-19, 22], [-3, 13], [1, 14], [4, 13], [32, 25], [31, 24], [37, -15], [8, 10], [2, 24], [-8, 25], [-8, 40], [-17, 21], [-1, 25], [11, 42], [-15, 79], [-16, 70], [-27, 119], [-18, 34], [-10, 55], [-11, 29], [1, 43], [2, 30], [-3, 59], [-5, 65], [5, 65], [10, 43], [-3, 17], [6, 12], [15, 4], [7, 18], [-7, 18], [-26, 14], [-30, 22], [-35, -3], [-36, -4], [-18, 17], [-16, 20], [-1, 13], [22, 35], [30, 36], [47, 16], [52, 24], [26, 17], [35, 12], [40, 5], [21, -3], [51, 23], [82, 44], [75, 37], [24, 22], [19, -22], [9, -49], [21, -25], [22, -12], [12, 0], [37, 20], [40, 13], [16, -7], [20, -25], [23, -23], [12, 2], [10, 17], [11, 35], [7, 44], [1, 47], [-4, 29], [-8, 10], [-36, 17], [-35, 28], [-4, 25], [1, 18], [9, 44], [22, 81], [23, 112], [12, 88], [38, 131], [30, 137], [49, 197], [8, 39], [4, 62], [3, 25], [17, 14], [28, -13], [70, -45], [53, -38], [22, -13], [33, -13], [51, -16], [30, 5], [25, 9], [35, 1], [53, -12], [17, 0], [21, -2], [14, -19], [8, -43], [11, -19], [20, 7], [43, 38], [27, 30], [34, 43], [34, 6], [36, 10], [13, 21], [13, 51], [22, 38], [3, 48], [-7, 34], [-16, 56], [1, 37], [-8, 108], [-10, 98], [11, 78], [17, 88], [7, 27], [12, 35], [16, 42], [22, 13], [63, 9], [58, 18], [30, 18], [30, 11], [19, 14], [32, 61], [15, 36], [11, 94], [-8, 45], [6, 40], [16, 24], [21, 24], [15, 4], [30, 7], [51, -3], [26, -11]], [[74256, 80118], [26, -5], [16, 8], [11, 18], [17, 6], [26, 8], [26, 11], [14, -2]], [[74392, 80162], [3, -27], [-2, -20], [5, -28], [10, -19], [-3, -19], [-15, -12], [-14, -16], [-4, -21], [19, -26], [6, -26], [31, -15], [23, -17], [9, -16], [-2, -19], [-11, -20], [-11, -21], [-1, -13], [3, -15], [23, -10], [27, -16], [42, -22], [29, -39], [28, -11], [14, -39], [3, -56], [29, -28], [44, -40], [22, -7], [14, -23], [22, -27], [19, -9], [22, -4], [37, 26], [42, 2], [22, -14], [22, -55], [15, -17], [9, -16], [15, -14], [14, -2], [22, 12], [14, 24], [19, -5], [7, -16], [4, -27], [10, -33], [24, -25], [34, -15], [5, -12], [5, -34], [9, -23], [12, -30], [12, -56], [3, -45], [5, -25], [16, -41], [25, -66], [20, -55], [23, -11], [20, -18], [11, -41], [21, -77], [3, -51], [2, -38], [7, -17], [1, -21], [-17, -81], [-15, -37], [-2, -31], [10, -54], [14, -41], [2, -40], [-12, -29], [-20, -37], [-10, -21], [-16, -18], [-24, -71], [-10, -78], [-3, -40], [9, -29], [15, -32], [4, -28], [25, -62], [7, -39], [10, -1], [11, 13], [27, 0], [24, -13], [24, -28], [25, -16], [36, 4], [19, -15], [20, -13], [43, -4], [32, 0], [49, 0], [40, -19], [70, -16], [43, 2], [58, 14], [35, -9], [105, -21], [62, -23], [39, -25], [27, -40], [32, -62], [25, -28], [67, -17], [46, -73], [36, -27], [60, -70], [43, -27], [51, -25], [83, 10], [5, -9], [-6, -38], [-5, -52], [0, -38], [8, -19], [32, -12], [15, -18], [12, -36], [6, -22], [27, -109], [43, -162], [5, -62], [15, -40], [46, -63], [25, -47], [36, -50], [12, -46], [3, -59], [9, -15], [67, 14], [57, 9], [104, 17], [142, -31], [147, -30], [130, -26], [64, -13], [145, -28], [81, 36], [62, 27], [29, -3], [120, -32], [71, -16], [88, -21], [62, -8], [50, 0], [24, -8], [22, -14], [15, -20], [46, -99], [26, -45], [51, -33], [116, -38], [65, -23], [74, -26], [48, -40], [56, -47], [73, -60], [79, 26], [86, 29], [53, 17], [0, -125], [77, -11], [24, 2], [34, -28], [19, 12], [18, 27], [23, 43], [32, 19], [57, 48], [13, 12], [84, 69], [125, 84], [56, 41], [17, 9], [31, 21], [22, 14], [37, 12], [52, 7], [56, 16], [126, 30], [16, 3], [72, 12], [30, 12], [45, -6], [59, -5], [39, -7], [52, 6], [72, 8], [57, -1], [29, 10], [42, 31], [29, 25], [45, 30], [55, 32], [38, 28], [26, 19], [31, 18], [8, 23], [9, 17], [16, 30], [30, 55], [23, 48], [11, 21], [25, 48], [20, 36], [27, 49], [22, 16], [27, 13], [74, 48], [14, 10], [13, 2], [26, 39], [21, 33], [15, 25], [29, 9], [16, 18], [2, 24], [-3, 36], [-14, 36], [-12, 33], [-43, 61], [-22, 38], [-23, 49], [-9, 46], [-16, 29], [-8, 26], [3, 30], [21, 53], [8, 33], [9, 60], [20, 89], [17, 41], [19, 41], [41, 54], [37, 10], [23, -10], [49, 0], [34, -3], [24, -27], [27, -54], [31, -20], [95, -42], [41, -9], [29, -2], [43, -14], [14, -3], [22, -9], [18, 10], [28, 36], [35, 40], [15, 10], [27, 17], [14, 17], [24, 45], [32, 35], [38, 53], [19, 40], [4, 25], [5, 28], [11, 15], [24, 13], [26, 4], [50, -24], [68, 7], [15, 3], [62, 14], [27, 11], [40, 11], [30, 44], [40, 53], [29, 29], [20, 6], [24, 30], [12, 33], [-3, 28], [-4, 24], [14, 44], [26, 77], [24, 36], [20, 29], [13, 46], [15, 14], [20, 5], [27, 31], [20, 7], [33, -15], [49, -4], [32, -2], [18, 6], [6, 17], [0, 26], [10, 58], [4, 19], [9, 9], [30, 1], [21, -21], [14, -17], [19, -2], [20, 11], [27, 47], [45, 27], [24, 7], [42, 22], [26, -8], [49, -6], [19, 5], [21, -5], [18, 32], [15, 7], [32, -14], [20, -25], [37, -31], [47, -14], [39, 7], [41, -13], [24, 1], [11, 13], [34, 25], [8, 35], [-4, 34], [4, 38], [-10, 29], [-20, 41], [-8, 28], [-1, 36], [-13, 35], [-31, 41], [-20, 20], [-42, 72], [-14, 17], [-5, 11], [-4, 25], [-16, 11], [-20, 19], [-11, 19], [-7, 33], [-5, 22], [-17, 18], [-18, 10], [-21, 13], [-33, 19], [-19, 37], [-34, 70], [-20, 23], [-71, 9], [-26, 17], [-29, -6], [-18, -11], [-38, 0], [-20, -7], [-26, -45], [-34, -60], [-27, -37], [-20, -37], [-9, -14], [-18, 8], [-25, 43], [-35, 38], [-33, 17], [-14, 10], [-39, 9], [-31, -3], [-38, -14], [-38, 3], [-16, 9], [-24, -1], [-44, -40], [-22, -45], [-27, -14], [-24, 30], [-28, 35], [-26, 43], [-16, 41], [-10, 107], [32, 32], [41, 35], [3, 57], [-1, 63], [8, 70], [37, 64], [19, 54], [3, 33], [18, 56], [17, 58], [23, 77], [44, 135], [52, 161], [26, 80]], [[82411, 80543], [57, -50], [37, -25], [62, -40], [65, -9], [61, -42], [32, -13], [17, 0], [87, 103], [73, 88], [85, 68], [62, 9], [47, 20], [31, 31], [18, 51], [6, 71], [-13, 43], [-30, 15], [-8, 15], [15, 16], [11, 29], [7, 45], [17, 42], [29, 39], [15, 44], [3, 49], [17, 48], [31, 48], [17, 45], [3, 41], [16, 50], [42, 90], [28, 102], [47, 71], [76, 72], [48, 72], [19, 71], [-2, 63], [-22, 54], [-4, 56], [14, 56], [-12, 42], [-38, 28], [-44, 7], [-53, -14], [-29, 17], [-6, 49], [14, 40], [34, 30], [57, 74], [78, 118], [78, 64], [117, 19], [94, 38], [96, 40], [69, 19], [12, -13], [37, -3], [64, 6], [59, 17], [55, 27], [43, 7], [32, -15], [18, 0], [12, -2], [7, 0], [14, 11], [37, -20], [70, -61], [44, -27], [19, 7], [20, -17], [21, -40], [27, -24], [48, -11], [48, -44], [20, -3], [6, 25], [18, 14], [29, 4], [42, -22], [55, -47], [34, -21], [14, 6], [15, -9], [12, -22], [1, -28], [-5, -14], [14, -23], [15, 0], [25, -11], [19, -41], [17, -19], [13, -17], [2, -13], [1, -14], [-4, -11], [-6, -17], [-2, -19], [8, -21], [31, -16], [10, -15], [3, -21], [9, -22], [21, -26], [8, -22], [-5, -17], [6, -15], [11, -11], [2, -42], [1, -24], [17, -27], [3, -54], [12, -61], [40, -83], [13, -46], [-4, -53], [6, -25], [18, -13], [9, -22], [-1, -33], [7, -21], [6, -22], [-4, -34], [5, -31], [10, -18], [6, -33], [4, -42], [27, -66], [49, -90], [30, -70], [11, -50], [0, -41], [-10, -32], [-1, -23], [10, -15], [2, -20], [-3, -25], [16, -30], [54, -51], [-22, -79], [-5, -56], [2, -58], [14, -42], [24, -24], [15, -25], [5, -26], [29, -28], [52, -31], [66, -5], [80, 20], [49, 3], [18, -13], [6, -20], [-5, -28], [13, -17], [33, -9], [23, -17], [13, -26], [15, -7], [18, 11], [17, -1], [18, -15], [11, 5], [9, 16], [16, 0], [16, -1], [10, -37], [16, -21], [22, -5], [34, -46], [68, -131], [44, -46], [44, -15], [55, -3], [18, -50], [-15, -54], [-3, -45], [12, -16], [17, -52], [25, -31], [4, -24], [12, -27], [-5, -50], [-21, -73], [6, -63], [32, -51], [19, -50], [4, -48], [8, -29], [12, -10], [33, 3], [55, 18], [40, -3], [26, -24], [63, -1], [101, 22], [64, 7], [27, -9], [24, 31], [21, 70], [19, 33], [18, -4], [29, 22], [40, 49], [35, 24], [43, -2], [47, -3], [29, 21], [27, 43], [48, 38], [101, 50], [24, 7], [11, -2], [34, -8], [30, -19], [28, -39], [4, -25], [-3, -33], [-6, -19], [-11, -22], [-11, -35], [7, -27], [16, -58], [13, -42], [15, -50], [-6, -17], [-9, -35], [-28, -58], [-15, -22], [-16, -22], [-28, -5], [-12, -5], [-14, -9], [-8, -21], [-10, -15], [-16, -29], [-1, -25], [7, -37], [4, -38], [-19, -34], [-14, -52], [-4, -16], [-7, -40], [-2, -13], [-4, -84], [-18, -57], [-26, -66], [6, -40], [4, -36], [-6, -18], [-1, -16], [-4, -35], [-8, -14], [-23, -22], [-14, -26], [3, -41], [-7, -35], [-10, -31], [-12, -20], [-15, -13], [-11, -11], [-8, -39], [-2, -30], [-8, -31], [5, -31], [-8, -26], [-23, -19], [-12, -11], [-12, -5], [-23, -29], [-20, -100], [-5, -58], [5, -51], [-28, -33], [-21, -26], [-13, 10], [-14, 8], [-32, 12], [-16, 7], [-33, 17], [-51, 21], [-51, 25], [-31, 13], [-25, 11], [-19, 17], [-16, 31], [-16, -13], [-15, -36], [-24, -21], [-11, -40], [-10, -31], [-26, -40], [-11, -17], [-49, -28], [-12, -9], [-40, -6], [-14, -12], [-14, -25], [-4, -26], [10, -27], [16, -54], [7, -37], [11, -73], [36, -229], [-12, -39], [-11, -172], [3, -31], [-1, -48], [1, -36], [7, -8], [10, -13], [5, -20], [-1, -32], [-5, -23], [-8, -46], [-10, -67], [-11, -26], [-8, -20], [-6, -14], [-1, -47], [-4, -31], [-17, -11], [-18, -18], [-20, 6], [-19, -3], [-22, -12], [-40, -14], [-24, -19], [-11, -14], [-8, -16], [-1, -16], [5, -8], [23, -6], [15, -30], [3, -32], [-16, -18]], [[49142, 54797], [-7, -23]], [[49135, 54774], [-37, 15], [8, 19], [36, -11]], [[49251, 57304], [2, -28], [-5, -47], [1, -28], [8, -11], [-4, -37], [-16, -63], [-1, -37], [16, -12], [12, -39], [6, -67], [7, -23], [1, -14], [11, -163], [14, -164], [-9, -21], [-12, -6], [-8, -8], [-2, -15], [5, -23], [-3, -20], [-16, -14], [-33, -52], [-3, -21], [-9, -44], [-7, -27], [-11, -51], [-17, -132], [-7, -110], [-1, -34], [-7, -24], [-7, -34], [-37, -94], [-18, -77], [2, -34], [1, -33], [-6, -24], [1, -66], [5, -54], [6, -54], [27, -151], [14, -92], [8, -74], [8, -49], [7, -21], [3, -19], [39, -14], [7, -11], [11, -96], [-2, -44], [-7, -16], [0, -37], [-2, -46], [-6, -18], [-22, -2], [-14, -18], [-20, 7]], [[49161, 54798], [-2, 12], [-11, 4], [-29, 26], [5, 83], [-13, 4], [-11, -11], [-20, -101], [-10, -17], [-146, 52], [-31, 42], [-38, 9], [-66, -5], [-54, -12], [-16, -25], [137, 15], [15, -3], [7, -16], [-173, -33], [-67, -19], [-19, 5], [-15, 32], [-72, 4], [-15, -11], [-8, -23], [28, 5], [44, 1], [12, -18], [-139, -24], [-97, -45], [-41, -33], [-135, -110], [-83, -52], [-22, -20], [-37, -53], [-48, -34], [-54, -64], [-33, -14]], [[47904, 54349], [-8, 20], [-1, 107], [-4, 144], [2, 55], [4, 52], [0, 42], [16, 16], [5, 18], [2, 56], [16, 51], [0, 88], [5, 19], [3, 23], [-7, 58], [-8, 109], [-4, 8], [-4, -5], [-9, -2], [-34, 38], [-26, 6], [-18, 33], [-1, 36], [-9, 22], [-7, 42], [-9, 49], [-26, 30], [-24, 7], [-17, -7], [-20, 2], [-23, 17], [-16, 18], [-16, 36], [-14, 28], [-11, -3], [-14, 6], [-13, 13], [-4, 10], [56, 114], [19, 56], [2, 33], [0, 35], [6, 35], [2, 54], [-31, 194], [-8, 60], [-9, 18], [-5, 7]], [[47642, 56197], [16, 25], [22, -7], [33, -19], [7, 19], [25, 98], [0, 37], [-3, 25], [15, 67], [11, 26], [7, 28], [-2, 38], [-9, 15], [-12, -3], [-14, 9], [-21, 22], [-11, 20], [3, 89], [2, 27], [8, 16], [12, 5], [33, 2], [26, -10], [24, -6], [12, 0], [10, -26], [14, -27], [12, 0], [4, 20], [-3, 88], [-8, 46], [-18, 45], [-46, 38], [-1, 54], [4, 57], [10, 22], [35, 37], [-6, 19], [-11, 21], [-22, 22], [5, 69], [1, 62], [-18, -7], [-19, -4], [-16, 19], [-14, 38], [-2, 103], [0, 119], [-3, 53], [5, 28], [17, 26], [18, 33], [6, 22]], [[47780, 57697], [8, 0], [21, 13], [20, 29], [18, 61], [24, 49], [28, -3], [8, 9], [10, 1], [11, -32], [12, -24], [8, -1], [6, -47], [50, -19], [22, -13], [18, -34], [6, 0], [8, 7], [6, 12], [1, 12], [-8, 31], [4, 28], [8, 24], [13, 2], [19, 7], [23, 0], [16, -5], [7, 25], [-6, 69], [1, 38], [3, 32], [6, 13], [25, -40], [23, -15], [16, -1], [5, 8], [-7, 44], [2, 13], [6, 8], [10, 4], [29, 18], [3, -3], [6, -70], [-3, -23], [6, -47], [8, -43], [-1, -18], [-6, -27], [-7, -25], [1, -10], [11, -17], [22, -18], [23, -4], [13, 26], [13, 20], [10, 19], [3, 27], [14, 20], [42, 26], [38, 3], [9, -8]], [[54495, 53150], [0, -4], [-2, -33], [-17, -22], [-10, -35], [-3, -49], [5, -59], [13, -71], [1, -41], [-5, -6], [-8, -13], [-9, -9], [-23, 48], [-26, 33], [-39, 57], [-39, 20], [-51, 4], [-22, -7], [-15, 21], [-22, 25], [-12, 6], [-17, -19], [-12, -1], [-14, 8], [-29, -1], [-3, 33], [-5, 6], [-31, -3], [-9, 27], [-5, -3], [-12, 9], [-25, 38], [-26, -25], [-55, 3], [-70, -1], [-73, -1], [-66, 2], [-67, 1]], [[53692, 53088], [-6, 36], [-14, 18], [-25, 2], [-73, -7], [-56, 6], [-18, 4], [-20, 10], [-47, 8], [-58, -6], [-13, 1], [-46, -1], [-106, 10], [-58, -2], [1, -22], [-4, -16], [-3, -38]], [[53146, 53091], [-64, 0], [-85, 0], [-80, 0], [-54, 0], [-91, 0], [-31, 27], [-9, 16], [-2, 19], [-1, 13], [-7, 4]], [[52722, 53170], [6, 135], [12, 113], [5, 105], [18, 93], [-9, 93], [-11, 40], [-57, 131], [26, 50], [-34, -7], [-7, 49], [-17, 58], [10, 10], [10, 32], [31, -10], [-1, 16], [-27, 49], [3, 25], [11, 27], [-6, 12], [-19, -29], [-14, 1], [-10, 19], [-8, 3], [5, -38], [-11, -33], [-10, -12], [-18, 2], [-14, 8], [-4, 19], [-13, 15], [-38, 24], [-31, 30], [-7, 80], [-12, 34], [-6, 39], [-3, 44], [5, 69], [-8, 11], [-9, 3], [-14, -3], [-13, 4], [-15, 38], [-13, 14], [8, -69], [-9, -20], [-23, 6], [-9, 26], [-2, 20], [10, 84], [-4, 2]], [[52376, 54582], [8, 45], [16, 54], [20, 69], [24, 87], [16, 153], [11, 96], [10, 87], [18, 78], [17, 53], [50, 102], [37, 77], [19, 31], [14, 26], [23, 30], [24, 35], [18, 68], [15, 64], [11, 13], [15, 12], [46, 68], [29, 43], [7, -22], [5, -26], [5, -13], [25, -8], [33, 0], [19, 8], [10, 23], [11, 61], [6, 12], [8, 3], [36, -43], [30, -61], [30, -61], [15, -21], [7, -24], [13, -111], [8, -27], [13, -12], [23, 7], [24, 20], [22, 28], [21, 37], [14, 33], [6, 25], [3, 90], [5, 20], [22, 36], [36, 60], [20, 35], [-2, 12], [-12, 37], [-12, 41], [12, 42], [12, 32], [45, 109], [0, 35], [3, 44], [36, 124], [21, 164], [1, 32], [21, 79], [26, 101], [50, 16], [19, 26], [22, 44], [14, 42], [7, 40], [5, 76], [9, 87], [5, 77], [15, 71], [25, 35], [43, 30], [7, 14], [6, 47], [5, 97], [1, 59], [2, 25], [6, 44], [40, 78], [17, 122], [16, 128], [46, 154], [53, 154], [25, 41], [21, 19], [24, 2], [17, 12], [57, 76], [24, 26], [18, 27], [4, 23], [2, 34], [-6, 79], [10, 58], [6, 90], [3, 71], [-3, 24], [-9, 34], [-1, 7], [-17, 44], [-29, 26], [-40, 7], [-21, 16], [-3, 37], [-2, 21], [-2, 23], [-3, 51], [-27, 268]], [[53906, 59376], [50, 0], [61, -32], [15, -25], [8, -91], [21, -52], [39, -43], [24, -89], [9, -134], [21, -80], [5, -13], [24, -115], [6, -36], [1, -70], [-2, -47], [12, -58], [-18, -100], [-6, -61], [-2, -85], [11, -152], [18, -116], [19, -95], [21, -73], [34, -81], [37, -74], [34, -47], [-32, -27], [-61, -3], [-35, 15], [-17, 1], [-17, -10], [-65, -14], [-67, 7], [-61, 18], [-37, -3], [-29, -45], [-23, -67], [-22, -54], [8, -59], [16, -33], [32, -72], [28, -70], [15, -47], [56, -102], [55, -92], [11, -16], [15, -16], [9, -7], [30, -53], [41, -86], [38, -135], [27, -138], [26, -133], [12, -23], [18, -14], [2, -29], [-1, -42], [-6, -35], [-15, -46]], [[57611, 54786], [10, -41], [15, -41], [48, -70], [15, -39], [12, -43], [7, -34], [15, -27], [21, -17], [18, -21], [11, -30], [16, -32], [32, -42], [15, -1], [18, -6], [15, -12], [17, 4], [27, 28], [32, 47], [24, 29], [59, -11], [33, -23], [26, -34], [20, 3], [45, 61], [23, 65], [23, 14], [35, -28], [29, -61], [25, -89], [17, -34], [25, -52], [48, -113], [63, -56], [24, -28], [8, -28], [5, -37], [1, -40], [8, -17], [17, 6], [14, 6], [16, -12], [11, -29], [6, -23], [6, -25]], [[58566, 53853], [15, -15], [4, -32], [-11, -38], [-11, -34], [-14, -69], [-7, -70], [9, -23], [10, -20], [5, -20], [3, -23], [-1, -26], [-21, -98], [-12, -85], [0, -43], [28, -32], [37, 2], [12, -20], [11, -31], [10, -15], [16, 0], [11, -11], [4, -21], [12, -24], [11, -26], [-5, -33], [-1, -26], [-26, -70], [-60, -138], [-129, -256], [-1, 0], [-43, -31], [-23, -47], [-15, -75], [-38, -63], [-29, -25], [-3, -16], [-2, -68], [3, -101], [-14, -46], [-20, -90], [-10, -56], [-8, -11], [-9, -28], [-5, -91], [-4, -31], [-14, -189], [4, -54], [-11, -90], [-1, -52], [-4, -60], [-8, -52], [1, -83], [4, -136], [-1, -18]], [[58215, 51043], [-11, -12], [-19, -34], [-18, -23], [-14, -6], [-24, -59], [-19, -57], [-15, -55], [-4, -26], [3, -72], [2, -84], [-4, -37], [-7, -22], [-33, -46], [-21, -33], [-10, -17], [-6, -27], [10, -62], [1, -46], [7, -27], [26, -22]], [[58167, 49280], [0, -28], [-10, -99], [-12, -96], [0, -36], [5, -49], [22, -111], [15, -81], [8, -49], [11, -56], [14, -87], [4, -42], [-3, -31], [-30, -109], [-3, -34], [8, -85], [9, -81], [14, -47], [33, -128], [25, -43], [45, -64], [40, -65], [16, -33], [14, -37], [28, -96], [17, -78], [9, -70], [22, -96], [20, -89], [26, -109], [19, -77], [8, -51]], [[58541, 47123], [-48, -15], [-69, -22], [-77, -25], [-79, -25], [-79, -25], [-74, -23], [-68, -21], [-20, -12], [10, -61], [-5, -63], [-13, -49], [-21, -61], [-10, -24], [-22, -47], [-18, -33], [-36, -56], [-24, -32], [0, -29], [39, -135], [18, -98], [7, -88], [0, -50], [-2, -104], [-1, -123], [-3, -49], [11, -88], [-2, -68], [-27, -77], [-7, -75], [-13, -102], [-19, -141], [-13, -74], [8, -48], [6, -33], [7, -43], [14, -66], [17, -38], [9, -17], [54, -82], [22, -40], [35, -79], [25, -53], [35, -12], [42, -20], [24, -15], [16, 7], [5, 19], [-1, 39], [-2, 29], [4, 23], [14, 15], [37, 2], [16, 20], [13, 5], [0, -87], [0, -83], [0, -101], [0, -116], [0, -95], [0, -101], [0, -117], [0, -13], [-6, -26], [-14, -9], [-20, 22], [-1, 24], [-5, 43], [-9, 22], [-12, 7], [-20, -11], [-28, -32], [-36, -27], [-14, -16], [-25, 2], [-27, 15], [-20, 35], [-6, 54], [-17, 54], [-24, 80], [-12, 32], [-16, 37], [-16, 4], [-18, 11], [-11, 54], [-10, 68], [-6, 27], [-11, 34], [-15, 21], [-34, 27], [-47, 38], [-58, 48], [-28, 2], [-32, 9], [-19, 22], [-11, 19], [-13, 66], [-18, 78], [-51, 93], [-12, 103], [-10, 15], [-18, -9], [-14, -13], [-5, -27], [-14, -93], [-8, -43], [-5, -11], [-11, -14], [-18, -13], [-27, -6], [-37, 2], [-46, 14], [-25, 11], [-68, 15], [-19, 7], [-28, 21], [-20, 20], [-65, 44], [-30, -6], [-14, 31], [-13, 15], [-18, 29], [-8, 40], [-11, 86], [3, 46], [8, 51], [-9, 14], [-12, 0], [-17, -18], [-30, -10], [-55, -22], [-20, -13], [-22, -9], [-16, -9], [-42, -49], [-14, -6], [-25, 18], [-12, 26], [12, 30], [5, 37], [-8, 72], [-13, 34], [-37, 24], [-14, 2], [-6, 41], [-10, 37], [-21, 7], [-10, 4]], [[53630, 48464], [-19, 17], [-39, -11], [-19, -13], [-31, -48], [-46, -25], [-17, 2], [-12, 8], [-27, 53], [-20, 50], [-8, 28]], [[53631, 49173], [4, 19], [14, -2], [4, -9], [7, -20], [12, -29], [21, -34], [22, -37], [11, -5], [17, 19], [21, 28], [30, 20], [7, 19], [4, 40], [2, 44], [3, 51], [6, 7], [11, 5], [20, -15], [9, -15], [16, 0], [10, 14], [19, 25], [25, 10], [25, 24], [25, 31], [12, 3], [12, -40], [11, -29], [2, -17], [-11, -34], [-12, -45], [10, -55], [3, -54], [-1, -32], [9, -13], [6, -7], [9, 8], [17, -2], [21, -17], [21, 2], [20, 20], [37, 81], [54, 141], [44, 88], [36, 36], [24, 43], [12, 48], [21, 33], [43, 26], [32, 29], [33, 97], [44, 174], [12, 156], [7, 94], [-4, 326], [-3, 107], [7, 58], [16, 40], [44, 85], [30, 70], [23, 81], [44, 186], [19, 60], [8, 26], [27, 50], [37, 43], [47, 38], [73, 129], [59, 130], [-8, 157], [13, 129], [32, 166], [11, 174], [-11, 184], [4, 151], [31, 175], [13, 65], [4, 106], [-1, 169], [39, 232], [37, 138], [41, 155], [15, 94], [21, 125], [-3, 100]], [[53338, 48960], [-4, 13], [-10, 16], [-21, 51], [-20, 63], [-5, 29], [-6, 17], [-1, 64], [-30, 75], [-77, 135], [-8, 40], [-65, 124]], [[53091, 49587], [17, 89], [12, 41], [15, 28], [60, 70], [9, -3], [42, -90], [13, -8], [14, 3], [18, -4], [8, 18], [2, 23], [-13, 26], [-2, 28], [9, 31], [5, 33], [13, 40], [2, 19], [-14, 20], [-28, 32], [-19, 30], [-8, 28], [6, 37], [15, 30], [-1, 16], [-13, 27], [-10, 29], [-10, 18], [-29, 11], [6, 38], [10, 57], [3, 44], [-8, 114], [1, 21], [7, 10], [17, -12], [17, -18], [46, 25], [16, 4], [13, -22], [19, -17], [106, 47], [2, 49], [6, 44], [1, 33], [-5, 21], [-5, 16], [-3, 33], [0, 36], [10, 16], [34, 42], [10, -1], [24, -23], [22, -36], [20, -76], [14, -65], [21, -79], [47, -32], [55, -21], [30, 6], [42, 67], [25, 53], [7, 28], [14, -15], [16, -69], [11, -27], [2, -25], [-7, -32], [7, -21], [30, -14], [26, 14], [11, 28], [20, 37], [0, 30], [-10, 21], [0, 27], [10, 22], [11, 59], [3, 44], [10, 27], [20, 20], [7, 17], [11, 103], [-6, 37], [0, 31], [13, 39], [2, 65], [-5, 105], [-4, 73], [-4, 76], [10, 99], [10, 104], [-2, 26], [-14, 32], [-17, 29], [-43, 23], [-16, 38], [-13, 40], [-9, 13], [-48, 16], [-11, 23], [5, 64], [4, 96], [-2, 67], [9, 53], [9, 40], [21, 43], [12, 50], [6, 13], [40, 8], [14, 21], [11, 21], [5, 29], [14, 47], [12, 32], [1, 22], [-2, 30], [-12, 59], [-15, 50], [-8, 17], [-18, 116], [-16, 28], [-32, 15], [-60, 13], [-36, -21], [-55, -39], [-42, -27], [-27, -15], [-16, 4], [-8, 18], [11, 15], [5, 35], [-7, 51], [-10, 46], [-6, 65], [2, 81], [11, 76], [22, 99], [1, 40]], [[5628, 39602], [-9, 0], [-12, 4], [-7, 3], [-1, 5], [3, 16], [6, 9], [12, -2], [8, -11], [1, -19], [-1, -5]], [[28301, 53307], [-7, -13], [-14, 23], [-5, 29], [8, 21], [12, -7], [5, -18], [1, -35]], [[30189, 58676], [-10, -7], [-13, -16], [-37, -28], [-51, -27], [-67, -35], [-15, -37], [-65, -234], [-55, -47], [-20, -35], [-15, -44], [-33, -82], [-14, -62], [-36, -136], [-20, -170], [-7, -96], [-11, -138], [-16, -70], [-21, -66], [-23, -64], [-20, -70], [-17, -54], [-3, -19], [8, -15], [40, 15], [16, 16], [22, 21], [13, -11], [14, -60], [15, -8], [15, 8], [15, -15], [20, -150], [17, -128], [39, -79], [30, -62], [7, -55], [8, -77], [1, -38], [-9, -23], [-15, -47], [-4, -90], [-3, -29], [-2, -84], [2, -51], [8, -40], [13, -23], [27, -12], [25, -14], [14, -69], [20, -88], [22, -37], [32, -25], [22, 9], [53, 16], [45, -4], [67, -24], [25, 1], [32, 5], [56, 48], [20, 7], [23, -4], [33, -25], [19, -19], [23, -20], [33, -14], [22, 2], [16, 1], [10, -9], [53, -137], [46, -118], [40, -100], [43, -107], [3, -7], [20, 14], [13, -6], [12, -22], [20, 9], [29, 40], [42, 8], [56, -24], [74, 0], [91, 24], [57, 25], [22, 28], [37, -3], [44, -25], [24, -35], [3, -35], [9, -54], [-10, -55], [-28, -56], [-16, -72], [-3, -86], [-14, -64], [-26, -42], [-11, -60], [6, -80], [-3, -116], [-11, -153], [0, -91], [11, -30], [6, -43], [-1, -56], [4, -49], [14, -64], [20, -128], [16, -55], [14, -21], [15, -24], [42, -131], [10, -28], [-3, -24], [-4, -18], [-5, -11], [-44, -78], [-89, -170], [-8, -22], [1, -35], [26, 23], [27, -19], [14, -4], [6, -14], [8, -46], [9, -7], [13, -20], [27, -48], [22, -51], [16, -24], [12, -23], [4, -33], [-5, -33], [14, -76], [9, -24], [5, -29], [-5, -29], [12, -35], [12, -67], [16, -83], [2, -45], [6, -21], [8, -61], [13, -58], [-3, -39], [5, -39]], [[30565, 49403], [-15, 42], [-21, 40], [-20, 25], [-9, 31], [-11, 65], [-17, 22], [-11, 17], [-11, -2], [-12, -18], [-18, -11], [-12, 1], [-49, 45], [-8, 4], [32, 102], [56, 182], [36, 116], [39, 129], [21, 65], [2, 12], [0, 16], [-8, 25], [-20, 11], [-22, 19], [-14, 31], [-19, 14], [-15, 22], [-27, 22], [-17, 20], [-20, 7], [-16, 37], [-58, 71], [-15, 6], [-16, -10], [-24, -12], [-23, -39], [-29, -12], [-27, 0], [-14, 23], [-13, 9], [-18, 31], [-31, 25], [-23, 17], [-14, -8], [-17, -36], [-19, -35], [-14, -22], [-19, 2], [-23, -33], [-23, -11], [-23, -5], [-26, -11], [-29, 19], [-24, 17], [-11, 8], [-10, -5], [-15, -18], [-27, -8], [-21, -2], [-15, 9], [-13, 31], [-22, 16], [-24, 19], [-5, 41], [3, 30], [10, 43], [-5, 45], [-10, 70], [-5, 29], [-7, 25], [-12, 9], [-23, -7], [-25, 27], [-16, 25], [-8, 32], [9, 58], [-8, 51], [-15, 27], [-10, 49], [-15, 39], [-19, 20], [-20, -2], [-16, 12], [-18, 41], [-16, 16], [-19, 40], [-35, 18], [-18, 16], [-11, 24], [-14, 45], [2, 24], [-7, 24], [-6, 43], [-12, 64], [-13, 36], [-14, 28], [-11, 23], [-17, 34], [-21, 21], [-18, 21], [-7, 31], [-6, 25], [-9, -1], [-15, 2], [-15, 6], [-17, 19], [-14, 22], [-23, 39], [-13, 5], [-11, 0], [-17, -38]], [[29087, 51781], [-50, 40], [-42, 58], [-44, 15], [-29, 36], [-26, 55], [-15, 38], [-11, 19], [-57, 54], [-11, 5], [-21, -25], [-7, -15], [-2, -43], [-2, -25], [-19, -15], [-30, 3], [-21, 16], [-14, 2], [-3, -12], [-8, -5], [-17, 3], [-25, 12], [-23, 16], [-31, 34], [-14, -4], [-35, 7], [-29, 20], [-8, 17], [-12, 122], [-4, 9], [-12, 5], [-21, 17], [-13, 19], [-7, 34], [-8, 32], [-36, -7], [-57, 42], [-40, 41], [-37, 44], [-55, 88], [-21, 22], [-26, 27], [-16, 43], [-25, 44], [-9, 12]], [[28094, 52681], [-8, 40], [-38, 57], [19, 74], [46, 56], [60, -44], [7, 87], [-22, 76], [4, 144], [7, 29], [16, 39], [20, 26], [12, 8], [21, -13], [13, 29], [49, -13], [15, 12], [10, 20], [12, 14], [15, 35], [9, 40], [7, 16], [17, -6], [1, 18], [9, 23], [30, 53], [-1, 23], [-8, 51], [2, 19], [17, 6], [21, 15], [10, 48], [14, 42], [15, 63], [17, 4], [9, 72], [22, 64], [46, 189], [-13, -4], [-11, -26], [-13, 3], [-14, 15], [4, 85], [-8, 10], [-23, -65], [-19, 67], [-2, 40], [8, 40], [-1, 27], [-31, -20], [2, 25], [19, 26], [9, 27], [17, 29], [7, 44], [4, 69], [7, 74], [-5, 36], [-9, 31], [-8, 137], [2, 80], [-4, 62], [-8, 54], [-37, 69], [59, 80], [21, 60], [-27, 124], [-35, 105], [-1, 62], [10, -8], [11, 2], [11, 132], [-3, 41], [-19, 67], [-24, 1], [-21, 83], [-13, 19], [-9, 52], [-34, 102], [-27, 53]], [[28361, 56007], [20, 123], [17, 24], [6, 30], [-7, 76], [2, 17], [4, 8], [4, -1], [8, -11], [13, -33], [11, -40], [9, -12], [13, 13], [52, 80], [-3, 25], [5, 51], [17, 41], [19, 14], [5, 23], [-4, 35], [-20, 89], [-17, 47], [-11, 47], [-6, 44], [-20, 41], [8, 39], [16, 45], [5, 8]], [[28507, 56830], [8, -12], [23, -83], [37, -53], [38, -87], [16, -59], [12, -11], [11, -22], [-5, -16], [-12, -17], [-3, -35], [8, -19], [8, -12], [22, 8], [12, 40], [-8, 178], [-13, 89], [-15, 27], [-13, 35], [9, 27], [24, 12], [31, 31], [115, 170], [39, 159], [30, 58], [34, 37], [41, -9], [33, 20], [10, 51], [-9, 69], [-13, 41], [12, 61], [13, 91], [-1, 76], [16, 46], [-6, 18], [-23, -37], [-18, -16], [10, 30], [33, 76], [16, 115], [13, 48], [46, 67], [10, 32], [34, 50], [56, 108], [22, 30], [108, -69], [34, 4], [-6, -13], [-16, -4], [-23, -19], [-6, -41], [15, -44], [17, -12], [14, 28], [14, 80], [22, 88], [6, 92], [15, 32], [24, 11], [41, -18], [32, -19], [33, -3], [101, 14], [164, 240], [77, 52], [47, 50], [31, 99], [8, 74], [22, 28], [24, 0], [11, 18], [3, 23], [57, 64], [33, 8], [28, -1], [65, -56], [29, -98], [5, -68], [-40, -74], [-10, -32]], [[62163, 44753], [19, -35], [-54, 15], [-8, 31], [-1, 24], [20, -5], [24, -30]], [[62354, 44883], [14, -79], [0, -60], [-6, -19], [-13, 12], [-23, 48], [-43, 46], [20, 4], [12, -4], [12, 4], [8, 26], [1, 16], [11, 12], [7, -6]], [[62073, 44987], [-5, -8], [-25, 33], [-15, 8], [-21, 53], [8, 184], [7, 24], [5, 10], [12, 3], [14, -23], [-4, -119], [19, -79], [12, -63], [-7, -23]], [[43247, 60400], [-21, -22], [-15, 10], [-15, 23], [-7, 33], [6, 28], [29, 33], [17, -11], [10, -51], [-4, -43]], [[43560, 60562], [-8, -2], [-11, 26], [2, 36], [-1, 9], [10, 39], [20, -4], [6, -28], [0, -59], [-18, -17]], [[43487, 60488], [-17, -53], [-36, 4], [-19, 22], [-22, 66], [0, 52], [8, 44], [-1, 39], [3, 10], [11, -6], [2, -26], [34, -64], [12, -13], [25, -75]], [[43634, 61196], [23, -11], [8, 4], [15, -2], [16, -30], [3, -33], [-8, -40], [-30, -33], [-18, 4], [-21, 30], [12, 60], [0, 51]], [[43309, 61418], [11, -17], [4, -12], [-17, -7], [-42, 22], [-11, -13], [-11, -48], [-21, 72], [2, 27], [4, 8], [30, -19], [51, -13]], [[43642, 61439], [-9, -30], [-11, 44], [-6, 10], [-3, 62], [16, 19], [8, 1], [0, -64], [5, -42]], [[43086, 61530], [-22, -13], [-14, 1], [-21, 21], [7, 22], [22, 24], [15, 5], [12, -43], [1, -17]], [[43008, 61604], [-27, -11], [-12, 5], [-3, 46], [-6, 30], [1, 14], [63, 59], [21, -10], [16, -47], [-11, -26], [-42, -60]], [[26766, 58131], [7, -23], [8, -36], [3, -46], [36, -155], [28, -86], [62, -158], [26, -29], [45, -127], [16, -21], [9, -37], [46, -31], [13, -23]], [[27065, 57359], [-1, -10], [-5, -12], [-7, -11], [-9, -8], [-22, 24], [-22, 26], [-11, -12], [-5, -34], [-8, -18], [-10, -7], [-4, -11], [-1, -116], [1, -108], [16, -3], [27, -38], [12, -22], [4, -20], [-4, -10], [-20, -24], [-19, -30], [-10, -38], [17, -60], [4, -41], [-1, -43], [-4, -21], [-38, -49], [-8, -18], [1, -12], [20, -34], [10, -33], [9, -40], [1, -34]], [[26978, 56492], [-19, 64], [-26, 61], [-23, 37], [-2, 88], [-9, 48], [-34, 44], [-30, 30], [-21, -6], [13, -50], [34, -65], [3, -25], [-1, -33], [-23, 5], [-21, 14], [-26, 4], [-17, 20], [-36, 77], [26, 66], [8, 43], [-1, 90], [-6, 43], [-28, 67], [-44, 72], [-61, 60], [-29, 47], [-73, 37], [-27, 24], [-22, 45], [-3, 33], [8, 50], [-20, 63], [-86, 125], [-48, 46], [-11, 26], [-7, 9], [7, -86], [21, -52], [55, -48], [15, -28], [6, -37], [-32, -70], [-16, -18], [-5, -38], [-10, -12], [-11, 22], [-45, 110], [-86, 53], [-16, 32], [-32, 101], [-14, 91], [5, 61], [35, 96], [11, 41], [-2, 26], [1, 37], [-13, 26], [-33, 35], [-21, 27], [6, 14], [38, 37], [2, 33], [0, 11]], [[26182, 58215], [6, 2], [5, 9], [4, 9], [10, 32], [9, 18], [10, 3], [13, -13], [47, -35], [53, -38], [75, -54], [31, 34], [27, 27], [18, -4], [41, -31], [24, -10], [15, 3], [25, -45], [14, -34], [3, -23], [8, -12], [20, -3], [49, -23], [30, 4], [27, 25], [15, 29], [5, 46]], [[27066, 64269], [-26, -31], [-55, -43], [-30, -1], [-30, 16], [-20, 36], [-12, 35], [1, 17], [19, -28], [16, -14], [13, 9], [10, 16], [-31, 114], [2, 25], [24, 62], [65, -19], [11, -11], [10, -40], [14, -31], [17, -83], [2, -29]], [[28425, 64488], [-11, -18], [-13, 26], [-8, 2], [-11, 10], [-21, 29], [-5, 29], [17, 2], [23, -5], [39, -16], [-4, -34], [-6, -25]], [[28367, 64589], [-10, -2], [-27, 24], [-9, 20], [10, 27], [2, 30], [4, 1], [4, -35], [22, -15], [1, -8], [13, -30], [-10, -12]], [[28326, 64680], [-6, -10], [-15, 22], [-22, 9], [-13, 33], [-12, 13], [-1, 12], [20, 9], [14, -4], [16, -26], [9, -46], [10, -12]], [[28158, 64834], [38, -13], [13, 8], [13, 2], [13, -5], [19, -48], [-16, -6], [-13, 0], [-10, 8], [-34, 3], [-23, 14], [-12, 12], [-6, 14], [18, 11]], [[27958, 64898], [1, -15], [-49, 42], [-21, 44], [-8, 10], [13, 1], [55, -72], [9, -10]], [[27267, 65185], [73, -26], [59, 7], [28, 16], [-3, -16], [26, -40], [10, -3], [38, 20], [99, 8], [10, -11], [18, -39], [25, -24], [26, -18], [28, -5], [27, 8], [26, -4], [32, -37], [10, -5], [28, 10], [-8, -34], [48, -49], [36, -95], [25, -39], [28, -35], [23, -24], [25, -11], [79, 5], [18, -3], [17, -14], [15, -5], [9, 5], [151, -149], [48, -79], [30, -41], [63, -59], [25, -13], [14, 7], [-3, 14], [-18, 33], [-3, 12], [24, -11], [43, -67], [12, -24], [21, -23], [22, -17], [-11, -26], [-17, -3], [-34, 11], [27, -43], [5, -31], [12, -3], [19, 35], [11, 29], [48, -75], [25, -34], [-6, -20], [-2, -20], [28, 18], [11, -2], [10, -11], [12, -32], [26, -7], [27, 1], [55, -27], [51, -54], [49, -11], [49, -2], [24, -28], [11, -39], [-12, -27], [-7, -28], [18, -35], [-39, -15], [-6, -21], [2, -23], [8, -12], [23, 11], [33, -10], [51, -8], [35, 7], [71, -24], [21, -13], [42, -44], [19, -30], [42, -79], [35, -31], [31, -8], [11, 5], [10, -8], [9, -11], [8, -35], [-5, -37], [-17, -29], [-10, -22], [-44, -2], [-62, -10], [-60, -32], [-29, -26], [-14, -17], [-31, -15], [-2, 13], [0, 17], [-8, 31], [-7, -28], [-12, -21], [-19, -17], [-73, -1], [-29, 23], [-30, 17], [-109, 16], [-27, -1], [-73, -18], [-73, -9], [-31, -11], [-30, -16], [-59, 0], [-70, -18], [-70, -4], [45, 131], [95, 125], [17, 27], [13, 35], [3, 26], [-4, 23], [-23, 39], [-4, 29], [-7, 19], [-33, 17], [-33, 10], [-35, 0], [-73, 13], [-39, 1], [-33, 27], [-55, 96], [-26, 26], [-13, 22], [-10, 24], [-13, 140], [-11, 68], [-17, 58], [-25, 45], [-27, 15], [-101, -38], [-24, 5], [-23, 13], [-154, 91], [-63, 50], [-26, 25], [-22, 35], [-23, 58], [-25, 52], [0, -21], [-4, -14], [-129, -6], [-20, 12], [-13, 14], [-10, 21], [-7, 42], [-12, 35], [-4, -38], [-6, -34], [-17, -20], [-20, -3], [-24, 46], [-104, 10], [-9, 8], [-34, 44], [-30, 56], [29, 19], [60, 26], [13, 18], [8, 21], [-5, 33], [-12, 24], [-13, 14], [-13, 9], [-18, 4], [-232, 5], [-13, -17], [-21, -37], [-41, -46], [-28, -49], [-10, -25], [-12, -18], [-29, -30], [-24, -46], [-30, -21], [-16, 13], [-16, 0], [-11, -12], [-13, -5], [-59, -6], [-9, -11], [-8, -34], [-10, -64], [-9, -21], [-30, -8], [-28, -18], [-58, -62], [-15, -9], [3, 45], [-3, 44], [-16, 2], [-19, -7], [-15, -13], [-29, -32], [-14, -9], [-14, 17], [3, 21], [95, 79], [11, 6], [17, -6], [17, 3], [13, 22], [-16, 105], [6, 71], [22, 55], [45, 83], [21, 27], [219, 174], [22, 9], [142, 35], [22, 12], [66, 51], [69, 21], [73, -16]], [[30902, 58789], [-14, -8], [-54, 56], [-44, 90], [-1, 47], [11, -4], [12, -18], [17, -64], [52, -42], [21, -57]], [[27397, 62988], [9, -11], [11, 7], [4, 12], [42, -9], [7, -24], [-33, -1], [-14, -15], [-8, -3], [-28, 4], [-4, 55], [8, 6], [6, -21]], [[27783, 63195], [-2, -3], [-9, 2], [-21, -23], [-8, 1], [2, 9], [4, 7], [5, 6], [5, 2], [14, 5], [7, 1], [4, -6], [-1, -1]], [[27827, 63197], [-13, -8], [-10, 3], [22, 24], [6, 8], [5, 4], [5, 0], [7, -5], [0, -3], [-22, -23]], [[59445, 72041], [-11, -4], [-17, 16], [-10, 5], [-10, -15], [-11, -11], [-10, -5], [-8, -2], [-14, -11], [-17, 3], [-25, 9], [-14, -22], [-3, 3], [-2, 55], [-9, 23], [-11, 13], [-16, -6], [-22, 2], [-16, 10], [-31, -16], [-26, -17], [-18, -17], [-14, 1], [-24, 16], [-18, 17], [-2, 14]], [[59086, 72102], [17, -6], [30, 12], [13, 56], [4, 65], [50, -19], [52, -9], [42, -4], [41, 11], [126, 69], [36, 41], [23, 14], [38, 34], [40, 19], [-25, -39], [-145, -174], [-10, -52], [7, -35], [20, -44]], [[59445, 72041], [5, -11], [8, -33], [-32, -10], [-31, -3], [-18, 4], [-17, -1], [-51, -95], [-28, -32], [-33, -19], [-33, -11], [-17, -1], [-15, -12], [-10, -22], [0, -22], [-5, -17], [-18, 4], [-8, 34], [-13, 15], [-32, -8], [-16, 1], [-52, 33], [-16, 13], [-10, 28], [-27, 101], [-4, 75], [25, -19], [23, 23], [23, 38], [27, 15], [16, -7]], [[54113, 81139], [24, 2], [24, 14], [2, 24], [-1, 43], [2, 7], [37, -13], [37, -19], [5, -44], [10, -21], [12, -20], [11, -9], [19, -1], [50, -26], [24, -5], [25, -18], [20, -19], [16, -3], [7, -21], [9, -13], [16, 10], [60, 15], [22, -20], [14, -21], [2, -6], [-7, -19], [-4, -14], [-6, -9], [-21, -10], [-11, -17], [-9, -17], [6, -18], [17, -12], [12, -3], [4, -13], [38, -55], [31, -73], [11, -12], [12, -2], [12, 10], [15, 24], [18, 17], [15, 9], [26, 20], [1, 13], [-22, 49], [-13, 40], [3, 7], [28, -6], [48, -22], [73, -71], [13, 0], [26, 6], [28, 11], [13, 13], [5, -5], [4, -39], [-7, -21], [-34, -21], [2, -10], [9, -14], [15, -9], [18, -25], [13, -29], [11, -13], [12, -7], [30, 16], [9, 12], [3, 9], [6, -2], [11, -14], [3, -9], [29, -16], [17, -20], [11, -9], [12, 9], [47, -16], [13, -13], [4, -22], [-3, -13], [8, -35], [59, -83], [6, -42], [1, -17]], [[55231, 80363], [-7, -1], [-16, -9], [-21, -3], [-22, 1], [-17, -15], [-16, -25], [-17, -17], [-9, -16], [-5, -16], [-57, -45], [-8, -19], [-6, -26], [-3, -35], [-4, -31], [-9, -17], [-31, -14], [-8, -7], [-5, -16], [-18, -25], [-20, -23], [-37, -27], [-39, -8], [-52, 9], [-30, 10], [-15, -11], [-20, -35], [-21, -60], [-9, -45]], [[53837, 79934], [-13, 28], [-23, 35], [-38, 48], [-30, -2], [-11, 12], [-5, 18], [-12, 30], [-14, 22], [-17, 8], [-24, 27], [-33, 58], [-30, 41], [-28, -1], [-18, 21], [-19, 28], [-14, 27], [-21, 66], [-15, 37], [-12, 23], [-14, 19], [-5, 15], [17, 35], [6, 18], [7, 13], [4, 14], [0, 10], [-15, 35], [-20, 25], [-30, 25], [-19, 32], [-8, 29], [-2, 16], [-13, 21], [-10, 32], [0, 19], [2, 6], [10, 0], [11, -13], [16, -26], [13, -36], [8, 14], [14, 39], [27, 44], [26, 25], [24, 2], [20, 7], [16, 13], [29, -5], [21, -9], [6, 5], [9, 23], [5, 20], [46, 11], [16, 39], [8, -1], [11, 6], [9, 15], [10, 6], [7, -8], [10, -4], [10, 9], [15, 44], [8, 6], [40, 7], [55, 26], [28, 23], [27, 12], [29, 23], [47, 21], [2, 9], [-21, 22], [-8, 14], [-5, 15], [8, 15], [10, 5], [13, -6], [39, -10], [11, -9], [4, -23], [10, -20], [8, -3], [-3, -34], [12, -13], [18, -10], [12, 2], [9, 14], [3, 9]], [[53948, 82874], [-12, 2], [-34, -6], [-34, 9], [-7, 34], [6, 34], [-14, 22], [-13, 14], [-2, 19], [2, 20], [59, -54], [48, -48]], [[53947, 82920], [-4, -18], [5, -28]], [[53134, 83189], [-43, -1], [-16, 23], [-17, 6], [9, 29], [12, 10], [41, -19], [13, -36], [1, -12]], [[53808, 83169], [7, -39], [-8, -19], [-31, 32], [-32, 0], [-18, -51], [-14, -2], [-49, 46], [-7, 23], [-2, 18], [7, 65], [-1, 20], [15, 22], [2, 32], [27, 34], [24, 1], [8, -28], [11, -20], [40, -22], [6, -10], [4, -14], [-19, -27], [-6, -14], [6, -23], [30, -24]], [[52385, 83359], [-11, -14], [-26, 2], [-15, 13], [5, 14], [14, 11], [11, 2], [18, -7], [4, -21]], [[52705, 83424], [2, -10], [40, -16], [17, -24], [19, -37], [2, -54], [-24, -38], [-20, -24], [76, 9], [8, -22], [11, -24], [41, 17], [103, -70], [63, 34], [16, 2], [14, -57], [-16, -57], [-55, -61], [13, -38], [17, -8], [52, 8], [82, -37], [17, 11], [67, 86], [26, 18], [88, 14], [16, 33], [35, 33], [23, 36], [55, 70], [56, -13], [33, -13], [37, -7], [33, -74], [83, -81], [77, 7], [27, -77], [12, -96], [24, -30], [20, -19], [63, -21], [2, -1]], [[53960, 82793], [2, -13], [4, -48], [5, -39], [33, -157], [-1, -39], [-1, -10], [-11, -54], [-21, -45], [-28, -26], [-15, -28], [-3, -32], [35, -55], [72, -79], [29, -67], [-13, -56], [-5, -41], [6, -27], [11, -21], [18, -15], [7, -25], [-3, -33], [3, -23], [13, -16], [-1, -7], [-6, -23], [-9, -42], [-5, -30], [-21, -42], [7, -36], [16, -41], [12, -21], [4, -20], [-8, -48], [4, -12], [50, -35], [8, -16], [5, -33], [18, -72], [-15, -91], [-13, -50], [-28, -78], [-2, -8]], [[52115, 79258], [-14, 8], [-10, 38], [3, 58], [15, 76], [4, 56], [-7, 35], [9, 54], [25, 71], [16, 75], [9, 78], [12, 52], [23, 36], [56, 100], [5, 8], [-2, 50], [-15, 7], [-22, 15], [-56, 18], [-52, 11], [-24, 14], [-21, 38], [-13, 1], [-25, -14], [-32, -9], [-22, 8], [-15, -2], [-8, -7], [-4, 6], [-6, 33], [-12, 9], [-18, 7], [-12, -3], [-8, -16], [-12, -12], [-12, 4], [-35, 75], [-9, 17], [-3, 15], [-8, 28], [-22, 27], [-21, 9], [-10, -3]], [[51762, 80329], [1, 35], [8, 50], [8, 26], [11, 21], [11, 15], [2, 27], [-1, 25], [-13, 4], [-33, 19], [-19, 20], [-14, 25], [-18, 34], [-8, 34], [-1, 35], [3, 15]], [[51664, 81077], [16, 89], [-12, 26], [-14, 13], [-17, 6], [-8, 13], [-2, 14], [3, 9], [19, -3], [6, 9], [47, 52], [2, 10], [-6, 6], [-9, 3], [-2, 11], [0, 15], [25, 75], [8, 32], [1, 23], [-1, 22], [-15, 35], [-14, 28], [0, 23], [-10, 12], [-29, 60], [0, 23], [16, 18], [23, 11], [8, 10], [13, 6], [37, -17], [16, -16], [5, 4], [14, 16], [26, -3], [62, 33], [9, 16], [7, 17], [1, 7], [-24, 32], [-1, 12], [3, 14], [7, 10], [14, 8], [16, 14], [34, 40], [11, 35], [4, 37], [1, 29], [-10, 22], [-9, 14], [-13, -2], [-25, 1], [-23, 13], [-13, 20], [-3, 18], [6, 11], [2, 14], [-4, 14], [2, 11], [10, 10], [74, -1], [5, 11], [5, 54], [18, 81], [18, 46], [3, 19], [-1, 108], [3, 55]], [[51999, 82535], [-13, 26], [-27, 28], [6, 59], [9, 45], [27, 57], [22, 15], [96, 9], [105, -4], [44, -84], [-16, -44], [25, -20], [13, 7], [9, 38], [6, 42], [9, 13], [33, -32], [12, -21], [0, -69], [12, 93], [-9, 66], [6, 63], [14, 34], [12, 21], [77, -23], [86, 12], [32, -25], [73, -123], [24, -20], [31, -6], [-42, 26], [-89, 149], [-26, 19], [-41, 5], [-26, 15], [-16, 23], [-4, 20], [1, 150], [-16, 22], [-20, 8], [-12, -10], [-25, -1], [-5, 34], [6, 26], [51, 17], [33, 23], [2, 41], [-22, 32], [-25, 58], [-30, 56], [-3, 64]], [[52408, 83469], [52, -1], [13, -3], [78, -30], [19, -21], [24, -1], [44, 20], [33, 8], [12, -12], [18, -5], [4, 0]], [[52307, 83402], [-6, -12], [3, 82], [30, 86], [13, -2], [-13, -23], [-4, -16], [-5, -33], [2, -17], [70, -5], [-8, -15], [-71, -10], [-11, -35]], [[62012, 58467], [-24, -77], [-31, -99], [-35, -112]], [[61922, 58179], [-21, -1], [-17, 6], [-12, 19], [-24, 21], [-27, 2], [-26, -20], [-43, -24], [-40, -8], [-31, -13], [-27, -16], [-23, 9], [-21, 14], [-4, 119], [-5, 130], [0, 101], [7, 56], [7, 22], [37, 77], [13, 32], [42, 127], [37, 110], [27, 82]], [[61771, 59024], [9, 16], [11, 15], [8, -4], [53, -79], [10, 2], [17, 25], [16, 84], [12, 31], [4, -1], [34, 24], [31, 26]], [[61976, 59163], [4, -27], [47, -114], [15, -56], [16, -102], [-9, -56], [-12, -37], [-18, -33], [-62, -81], [-69, -52], [-44, -103], [-33, 7], [5, -39], [12, -5], [19, 8], [38, 30], [34, 14], [37, 1], [33, -13], [23, -38]], [[32977, 60627], [-26, -13], [-11, 100], [-18, 72], [3, 45], [3, 17], [38, -28], [12, -33], [7, -89], [-8, -71]], [[53155, 83462], [50, -36], [33, 2], [22, -14], [6, -23], [2, -51], [-24, -15], [-26, 5], [-36, -19], [-117, 83], [2, 69], [4, 27], [56, 7], [28, -35]], [[52912, 83437], [-19, -6], [-21, 12], [-35, 48], [-4, 12], [18, -8], [23, -25], [18, -5], [25, -21], [-5, -7]], [[53485, 83505], [-10, -9], [-43, 7], [-48, -40], [-18, 12], [7, 26], [5, 9], [16, 11], [11, 16], [4, 25], [10, -14], [30, -5], [14, -8], [12, -12], [10, -18]], [[52794, 83459], [-29, -8], [-14, 14], [-28, 5], [-9, 89], [2, 5], [14, -6], [47, -41], [16, -45], [1, -13]], [[52981, 83381], [-12, -3], [-17, 46], [-2, 15], [20, 30], [12, 34], [33, 52], [19, 61], [7, -1], [-8, -55], [-43, -151], [-9, -28]], [[54190, 83537], [-10, -10], [-46, 17], [-56, 40], [9, 78], [14, 34], [102, -88], [1, -33], [-14, -38]], [[52956, 83876], [12, -30], [14, -64], [23, -72], [-10, -30], [7, -38], [-7, -41], [-44, -46], [-51, -2], [-52, 22], [-74, 44], [-6, 24], [-10, 13], [-20, 74], [1, 92], [37, 11], [81, 43], [18, -6], [20, -23], [23, -1], [32, 32], [6, -2]], [[53518, 83868], [-26, -24], [-6, 1], [-9, 34], [14, 20], [8, 17], [6, 0], [8, -19], [5, -29]], [[52946, 83976], [-5, -11], [-17, 11], [-2, 37], [6, 34], [-7, 30], [8, 19], [25, -45], [7, -21], [-9, -25], [-6, -29]], [[53491, 83977], [0, -58], [-7, -17], [-10, -11], [-28, -11], [-24, -17], [-22, -29], [-7, -41], [16, -30], [31, -16], [8, -58], [-26, -28], [-64, -28], [-7, -68], [2, -54], [-1, -39], [-5, -54], [-52, -24], [-34, 82], [0, 33], [-11, 38], [-1, 33], [-12, 52], [-50, 14], [-19, 2], [-27, -9], [-6, 3], [-33, 72], [6, 79], [-17, 40], [-3, 18], [1, 20], [-14, 16], [-18, 9], [-8, 44], [20, 11], [48, -5], [15, 3], [13, 9], [39, 73], [-1, 16], [4, 21], [42, 8], [19, -28], [-3, -46], [2, -57], [26, -16], [10, -3], [10, 43], [8, 21], [10, 12], [4, 39], [-6, 24], [-13, 17], [48, 49], [50, 38], [29, 2], [29, -9], [27, -13], [15, -11], [8, -18], [-18, -43], [-5, -23], [12, -77]], [[53070, 84822], [-12, -13], [-38, 19], [17, 26], [42, 13], [24, -4], [-27, -27], [-6, -14]], [[52408, 83469], [-3, 48], [-6, 34], [-18, 51], [27, 12], [-5, 100], [-10, 52], [-75, 53], [-60, 51], [14, 174], [6, 46], [-23, 91], [3, 105], [9, 164], [19, 7], [14, -1], [53, -30], [22, -3], [15, -26], [18, -11], [13, 28], [5, 48], [42, 62], [30, 23], [20, 11], [20, -25], [16, -28], [4, 61], [12, 117], [-40, 19], [-33, -16], [-32, -74], [-29, -94], [-47, -8], [-37, -27], [-34, 28], [-22, 24], [0, 35], [5, 22], [39, 76], [54, 73], [53, -1], [39, 23], [24, 3], [72, -5], [38, 16], [33, 34], [73, 141], [41, 59], [82, 21], [76, 68], [22, 1], [-36, -51], [-6, -19], [-4, -30], [25, -66], [-5, -40], [2, -78], [-24, -41], [-28, -87], [-12, -13], [-2, -101], [3, -25], [-4, -92], [28, -38], [29, -20], [99, 1], [10, -16], [13, -29], [-9, -49], [-11, -36], [-28, -31], [-37, -23], [-23, -1], [-31, 44], [-15, -14], [-15, -23], [-26, -119], [-12, -81], [-6, -7], [-15, 12], [-25, 1], [-31, -19], [16, -17], [17, -30], [-7, -15], [-28, -16], [-24, -32], [-11, -25], [-31, -29], [-19, -37], [9, -46], [4, -40], [9, -45], [-8, -35], [-38, -51], [-14, -45], [32, 1], [21, -10], [12, -13], [12, -19], [-8, -23], [10, -59]], [[30064, 62234], [1, 95], [8, 38], [-7, 41], [-31, 43], [-19, 56], [-16, 49], [3, 7], [34, 2], [12, 18], [22, 50], [5, 41], [-2, 31], [-15, 36], [-6, 39], [18, 34], [24, 49], [3, 19], [0, 18], [-28, 52], [-2, 22], [13, 56], [-1, 38], [-13, 116], [-6, 17]], [[30061, 63201], [12, 10], [8, 34], [11, 31], [14, 17], [17, 10], [32, -1], [44, -27], [13, 1], [43, 24], [35, 14], [34, -16], [13, -21], [28, -33], [14, -10], [43, 1], [12, -3], [37, -55], [30, -22], [18, -1], [32, 21], [16, -1], [18, -47], [4, -67], [15, -61], [24, -39], [115, 16], [25, -32], [-8, -27], [-17, -14], [-54, 6], [-24, -3], [-5, -26], [0, -25], [32, -6], [31, -12], [32, -20], [33, -13], [36, -9], [36, -14], [61, -49], [66, -109], [18, -25], [12, -34], [-6, -43], [-24, -69], [-13, -22], [-20, -14], [-13, -28], [-13, -49], [-8, -4], [-9, 2], [-16, 28], [-12, 42], [-32, 39], [-38, -5], [-56, 24], [-34, -12], [-34, -2], [-35, 12], [-35, 4], [-35, -15], [-34, -25], [-12, -17], [-22, -39], [-12, -15], [-82, -20], [-24, 29], [-22, 40], [-32, 5], [-46, -30], [-28, -11], [-12, -14], [-3, -14], [0, -56], [-7, -33], [-45, -127], [-25, -90], [-10, -28], [-12, -6], [-23, 52], [-14, 19], [-17, 9], [-7, 27], [0, 39], [-5, 38], [-10, 29], [-16, 20]], [[52382, 73120], [6, -31], [1, -29], [-27, -26], [-17, -16], [-21, -74], [-38, -50], [-7, -15], [1, -14], [26, -23], [8, -21], [5, -29], [-12, -103], [-7, -80], [-10, -104], [0, -39], [10, -48], [10, -37], [3, -42], [-3, -103], [12, -60], [9, -55], [-23, -68], [-9, -61], [-7, -87], [-2, -54], [-15, -51], [-19, -47], [-22, -30], [-26, -25], [-31, -34], [-25, -90], [-54, -74], [-11, -26], [-5, -60], [1, -83], [9, -66], [26, -97], [23, -107], [6, -55], [9, -20], [32, -35], [55, -48], [10, -19], [27, -74], [26, -133], [8, -88], [51, -70], [46, -64], [45, -57], [49, -62], [7, -19], [16, -130], [16, -129], [18, -143], [17, -143], [21, -169], [12, -95], [15, -116], [17, -136]], [[52644, 69256], [-28, -29], [-30, -37], [22, -70], [43, -114], [26, -92], [9, -40], [21, -114], [16, -110], [4, -36], [7, -85], [-8, -235], [12, -297], [16, -149], [-25, -134], [-22, -128], [2, -64], [11, -101], [12, -74], [16, -39], [-3, -125], [-7, -45], [-48, -66], [-54, -60], [-15, -51], [-4, -57], [7, -46], [37, -102], [55, -153], [61, -168], [6, -43], [2, -119], [25, -150], [28, -66], [10, -49], [20, -35], [19, -26], [12, -3], [69, 41], [117, -67], [111, -69], [8, -14], [24, -87], [40, -142], [30, -114], [26, -102]], [[53324, 65390], [-144, -176], [-144, -176], [-144, -176], [-144, -176], [-143, -176], [-144, -175], [-144, -176], [-144, -176], [-95, -117], [-61, -103], [-76, -129], [-72, -128], [-56, -101], [-74, -130], [-37, -66], [-81, -146], [-25, -26], [-108, -43], [-99, -39], [-92, -36], [-63, -25], [-60, -24]], [[51174, 62870], [-88, -34], [-63, -25], [-68, -26], [-11, -4], [-12, -1], [-9, 1], [-19, 14], [-23, 34], [-15, 18], [-4, 27], [9, 36], [11, 32], [4, 25], [8, 19], [9, 16], [1, 22], [-8, 36], [-7, 50], [0, 91], [0, 30], [0, 11], [-20, 35], [-38, 38], [-35, 23], [-17, 8], [-38, 13], [-54, 25], [-19, 16], [-35, 84], [-17, 22], [-81, 14], [-26, 14], [-22, 20], [-19, 27], [-11, 47], [-3, 37], [-7, 18], [-89, 91], [-23, 31], [-12, 29], [0, 43], [2, 52], [-4, 46], [-3, 23], [-41, 55], [-91, 124], [-91, 123], [-91, 123], [-91, 124], [-91, 123], [-91, 123], [-91, 124], [-91, 123], [-91, 123], [-91, 124], [-91, 123], [-90, 123], [-91, 124], [-91, 123], [-91, 123], [-91, 124], [-77, 104], [-85, 110]], [[48660, 66241], [-63, 81], [-63, 80], [-67, 86], [-44, 53], [-52, 64], [-52, 63], [-52, 64], [-53, 64], [-52, 64], [-52, 63], [-52, 64], [-53, 64], [-52, 63], [-52, 64], [-52, 64], [-53, 63], [-52, 64], [-52, 64], [-52, 64], [-53, 63]], [[47587, 67560], [0, 118], [0, 96]], [[47587, 67774], [0, 140], [0, 122], [0, 122], [0, 84], [0, 87], [2, 40], [5, 17], [28, 28], [44, 65], [17, 28], [21, 29], [74, 88], [15, 24], [72, 101], [17, 15], [38, 10], [16, 18], [22, 41], [32, 46], [21, 22], [5, 4], [13, 3], [66, -14], [28, -10], [33, -9], [11, 6], [9, 15], [12, 32], [3, 38], [1, 33], [2, 15], [6, 6], [14, -2], [20, -5], [39, 2], [14, 4], [45, 8], [63, 21], [51, 28], [40, 23], [43, 58], [32, 62], [32, 93], [26, 80], [53, 50], [44, 30], [25, 12], [58, 42], [48, 64], [45, 60], [35, 8], [44, 10], [10, 11], [11, 21], [1, 38], [-14, 26], [-16, 14], [-11, 15], [-11, 3], [-6, 18], [3, 33], [2, 31], [7, 30], [-2, 44], [-11, 43], [-4, 31], [1, 31], [6, 24], [16, 16], [19, 6], [26, -8], [46, 11], [117, 74], [8, 23], [8, 52], [8, 45], [13, 15], [6, 4], [39, 12], [56, 17], [20, 3], [61, -5], [44, -4], [71, -6], [50, -3], [44, -3], [56, -3], [14, 11], [0, 33], [-10, 61], [6, 38], [22, 36], [27, 40], [-13, 48], [-22, 32], [-30, 39], [-15, 16], [-27, 47], [-17, 53], [-11, 113], [-21, 63], [-15, 78], [13, 143], [-20, 87], [-3, 37], [0, 44], [6, 76], [-4, 107], [-23, 111], [11, 37], [5, 20], [-2, 17], [-21, 35], [-9, 29], [4, 27], [12, 39], [-1, 17], [-35, 48], [-59, 78], [-16, 34], [-8, 43]], [[49383, 72064], [56, -11], [29, 5], [67, 51], [52, 69], [41, 36], [37, 75], [32, 48], [48, 52], [136, 111], [21, 1], [45, -25], [39, 8], [27, 39], [29, 93], [44, 57], [57, 58], [76, 54], [50, 51], [80, 43], [199, 28], [102, 24], [70, -5], [70, 80], [35, 26], [152, 6], [72, 58], [272, 0], [33, -19], [33, -32], [56, -75], [27, -17], [36, 16], [84, 72], [94, 37], [51, 42], [22, 62], [44, 23], [25, -47], [98, -48], [60, 13], [26, 15], [-9, 71], [63, -19], [49, -34], [51, -69], [33, -14], [60, 31], [125, 16]], [[27741, 50130], [-5, -22], [-27, 2], [-7, 7], [0, 25], [6, 81], [7, 34], [22, 32], [18, 16], [23, -3], [25, -29], [-29, -55], [-16, -8], [-6, -7], [-11, -73]], [[24882, 51071], [-11, -1], [-16, 24], [12, 45], [13, -11], [9, -12], [5, -18], [-12, -27]], [[25161, 51318], [-33, -24], [-11, 11], [-7, 11], [-2, 15], [19, 35], [17, 20], [16, 41], [29, 24], [9, -6], [5, -8], [2, -14], [-9, -33], [-18, -23], [-17, -49]], [[24907, 51398], [-15, -1], [-43, 56], [3, 55], [17, 37], [56, 18], [23, -34], [-2, -66], [-19, -48], [-15, -9], [-5, -8]], [[24604, 51577], [-28, -10], [-24, 20], [-10, 31], [-2, 46], [2, 15], [52, 16], [17, -38], [0, -57], [-7, -23]], [[24840, 51650], [-13, -17], [-52, 20], [-16, 33], [13, 46], [11, 18], [31, -17], [32, -51], [-6, -32]], [[24646, 51857], [18, -37], [9, -106], [56, -112], [7, -62], [-5, -29], [2, -11], [27, -44], [18, -47], [-30, -108], [-62, -46], [-67, 2], [-13, 12], [-18, 41], [-4, 37], [11, 35], [34, 54], [53, 48], [6, 37], [-21, 35], [-14, 71], [-34, 50], [-16, 152], [-11, 8], [-23, -21], [-11, 18], [-2, 10], [25, 35], [5, 24], [36, 12], [15, -20], [9, -38]], [[28080, 52564], [-15, -4], [-7, 28], [19, 32], [6, 6], [-3, -62]], [[29087, 51781], [-15, -20], [-16, -2], [-22, -7], [-30, 20], [-12, 0], [-1, -20], [20, -25], [19, -27], [7, -43], [11, -50], [28, -56], [17, -28], [1, -20], [-5, -37], [-1, -31], [9, -141], [-6, -8], [-11, -1], [-10, 1], [-9, 15], [-8, 9], [-3, -22], [-8, -62], [-18, -142], [-16, -123], [-20, -44], [-28, -70], [-40, -95], [-56, -138], [-42, -64], [-33, -50], [-39, -58], [-50, -76], [-56, -42], [-78, -58], [-55, -42], [-41, -29], [-42, -30], [-56, -40], [-22, -38], [-36, -92], [-17, -44], [-15, -38], [-3, -18], [2, -11], [7, -18], [1, -19], [-10, -12], [-9, -2], [-4, 9], [-3, 21], [-9, 22], [-11, 6], [-6, -5], [0, -20], [-15, -94], [0, -46], [-6, -18], [0, -41], [-14, -38], [-6, -34], [-4, -29], [-12, -20], [-4, -31], [-11, -67], [-12, -52], [-9, -45], [-1, -34], [6, -23], [3, -19], [-6, -35], [-4, -25], [-15, -18], [-33, -42], [-13, -28], [-5, -32], [3, -28], [-1, -23], [-16, -9], [-5, -20], [-11, -35], [-12, -12], [-31, 19], [-22, 0], [-18, 17], [-19, 51], [-15, 42], [-13, 55], [-4, 76], [-17, 22], [-17, 26], [-20, -7], [-24, -5], [-13, 18], [-33, 32], [-28, 36], [-21, 18], [-16, -9], [-10, -22], [-17, -39], [-25, -27], [-11, 2], [-15, 18], [-3, 21], [12, 33], [25, 73], [-28, 2], [-9, 23], [-2, 27], [-4, 28], [5, 35], [15, 18], [22, -14], [15, -1], [10, 32], [10, 14], [11, 11], [4, 16], [-11, 52], [-3, 28], [3, 16], [0, 33], [-1, 23], [-6, 21], [-1, 32], [-5, 17], [-2, 18], [0, 21], [-7, 10], [-8, 11]], [[27687, 49891], [6, 8], [40, 29], [17, 29], [20, 26], [18, 41], [11, 39], [28, 180], [26, 114], [-5, 54], [-21, 74], [-5, 109], [2, 33], [-3, 25], [-14, -45], [4, -160], [-13, -72], [-17, -18], [-12, 13], [7, 117], [-13, -22], [-21, -79], [-34, -59], [-1, -19], [-9, -25], [-26, 23], [-20, 24], [-65, 132], [-43, 28], [-25, 46], [-6, 19], [-3, 27], [26, 27], [28, 37], [2, 82], [0, 65], [-20, 109], [9, 144], [-5, 56], [-23, 119], [17, 60], [60, 44], [20, 29], [13, 95], [14, 56], [27, -22], [21, 2], [-28, 21], [-24, 85], [-3, 40], [44, 116], [24, 30], [28, 62], [25, 93], [6, 147], [-10, 105], [-8, 111], [15, 28], [36, 15], [30, 36], [15, 33], [36, -5], [41, 51], [66, 26], [91, 58], [20, 52], [-9, 92]], [[59499, 69886], [4, -18], [9, -48]], [[59512, 69820], [23, -123], [20, -96], [25, -134], [8, -51], [3, -35], [36, -147], [21, -121], [16, -98], [21, -142], [10, -50]], [[59695, 68823], [-15, -26], [-32, -93], [-33, -296], [-47, -231], [-5, -144], [-8, -52], [-23, -73], [-27, -72], [-49, 37], [-79, 126], [-46, 120], [-49, 77], [-47, 103], [-13, 73], [1, 48], [-21, 115], [-15, 55], [-57, 123], [-16, 65], [-13, 29], [-12, 41], [-21, 160], [-23, 101], [-25, -28], [4, -43], [-22, -59], [-14, -68], [11, -56], [46, -85], [10, -37], [11, -80], [-2, -110], [7, -37], [35, -81], [13, -48], [7, -42], [12, -38], [34, -71], [50, -134], [47, -91], [35, -44], [14, -44], [3, -113], [-2, -55], [30, -101], [11, -52], [29, -42], [13, -48], [12, -78], [18, -231], [26, -56], [77, -303], [66, -192], [32, -144], [48, -174], [95, -383], [56, -118], [22, -66], [41, -51], [44, -74], [-42, 7], [-10, -5], [-15, -12], [-7, -45], [-3, -37], [5, -194], [11, -98], [37, -188], [28, -56], [14, -36], [18, -27], [88, -63], [52, -136], [115, -170], [11, -47], [0, -11]], [[60241, 64514], [-91, -1], [-91, 0], [-91, 0], [-91, 0], [-91, 0], [-91, 0], [-92, 0], [-91, 0], [-91, 0], [-91, 0], [-91, 0], [-91, 0], [-91, 0], [-92, 0], [-91, 0], [-91, 0], [-52, 0], [9, 51], [6, 37], [-7, 25], [-17, 6], [-12, -8], [-27, -107], [-14, -5], [-33, 0], [-106, 0], [-106, 1], [-106, 0], [-106, 0], [-106, 0], [-106, 0], [-107, 0], [-106, 0], [-106, 0], [-106, 0], [-106, 0], [-106, 0], [-106, 0], [-106, 0], [-106, 0], [-107, 0]], [[56938, 64513], [0, 129], [0, 130], [0, 129], [0, 129], [0, 130], [0, 129], [0, 130], [0, 129], [0, 129], [0, 130], [0, 129], [0, 129], [0, 130], [0, 129], [0, 129], [0, 130], [0, 129], [0, 129], [0, 130], [0, 129], [0, 130], [0, 129], [0, 129], [0, 130], [0, 129], [0, 129], [0, 130], [0, 129], [0, 129], [0, 130], [0, 129], [0, 129], [-2, 25], [-15, 87], [-14, 112], [-16, 138], [-2, 44], [-25, 141], [-3, 41], [7, 28], [42, 119], [12, 58], [11, 70], [4, 56], [-13, 86], [-14, 78], [-5, 79], [-2, 79], [21, 53], [26, 50], [10, 30], [15, 35], [11, 16]], [[56986, 70077], [21, -70], [43, -12], [142, 62], [157, -62], [86, -24], [133, -54], [81, -95], [23, -12], [58, 2], [38, -56], [152, -27], [81, -62], [46, -50], [28, -15], [24, 2], [33, 19], [42, 35], [45, 48], [94, 125], [33, 22], [22, -6], [27, 2], [11, 33], [14, 23], [8, 27], [15, 31], [48, 9], [98, 54], [-11, -25], [-89, -61], [38, -8], [39, 21], [45, 13], [8, 26], [6, 49], [9, 6], [30, -9], [92, -74], [23, -2], [65, 41], [13, 9], [21, -23], [48, -93], [-17, 2], [-51, 80], [-4, -40], [-29, -70], [36, -30], [30, -11], [16, -39], [10, -35], [29, 15], [21, 47], [-11, 27], [-8, 27], [10, 1], [20, -23], [58, -89], [20, -19], [22, 3], [48, 26], [13, -4], [63, 33], [8, -25], [10, -24], [51, 27], [80, 0], [66, 29], [76, 71], [6, 11]], [[61150, 60884], [11, -30], [8, 3], [7, 10], [4, 21], [44, -42], [-3, -29], [-26, -1], [-30, 12], [-28, -4], [-33, 12], [-8, 48], [21, -23], [11, 6], [2, 6], [-15, 33], [-21, 6], [1, 26], [10, 10], [6, 12], [-13, 36], [24, -9], [15, -21], [10, -25], [3, -57]], [[61132, 61107], [9, -56], [-27, 21], [-5, 12], [12, 22], [3, 13], [8, -12]], [[60724, 62214], [84, -333], [34, -196], [30, -206], [23, -308], [21, -157], [34, -78], [23, -146], [21, -6], [14, -40], [25, -138], [18, -51], [9, 44], [-1, 25], [-7, 43], [7, 54], [14, 33], [31, -44], [18, -34], [5, -68], [7, -37], [33, -80], [28, -23], [37, -6], [30, -17], [25, -29], [46, -81], [104, -71], [85, -216], [49, -151], [163, -227], [28, -110], [15, -106], [34, 5], [59, -117], [17, -89], [48, -32], [9, 52], [23, -43], [9, -67]], [[61771, 59024], [-24, 60], [-18, 52], [-26, 63], [-24, 29], [-26, 35], [-26, 83], [-26, 91], [-39, 75], [-73, 107], [-67, 136], [-51, 142], [-33, 74], [-14, 19], [-68, 47], [-47, 65], [-37, 53], [-22, 15], [-22, 2], [-47, -11], [-38, 34], [-16, 0], [-26, 9], [-21, 12], [-23, -14], [-49, -24], [-20, 5], [-11, 34], [-7, 25], [-17, 27], [-14, 0], [-7, -24], [-51, -60], [-86, -33], [-20, 2], [-15, 24], [-44, 103], [-12, 17], [-10, 2], [-20, 12], [-18, 20], [-17, 42], [-16, 24], [-18, -83], [-31, -144], [-17, -78], [-21, -100], [-7, -3], [-11, 7], [-43, 125], [-26, 47], [-20, -5], [-15, -23], [-9, -41], [-10, -26], [-11, -10], [-23, 5], [-36, 20], [-37, -5], [-38, -28], [-5, -1]], [[60145, 60055], [-9, 166], [-6, 110], [-6, 118], [-6, 110], [26, 68], [13, 65], [31, 210], [13, 41], [24, 113], [4, 32], [24, 142], [-2, 94], [-5, 95], [13, 56], [12, 45], [-1, 38], [6, 89], [4, 22], [14, 2], [30, -12], [22, 9], [26, 0], [19, 3], [12, 27], [16, 103], [10, 21], [8, 6], [23, 19], [19, 30], [16, 22], [5, 4], [17, 3], [16, 13], [8, 14], [21, 12], [20, -6], [14, 12], [9, 8], [11, 1], [9, 12], [4, 18], [6, 12], [16, 27], [8, 19], [3, 20], [3, 16], [7, 26], [28, 66], [24, 38]], [[45031, 67862], [-27, -94], [-34, 35], [-8, 12], [-7, 19], [33, 4], [33, 47], [10, -23]], [[45722, 68057], [-2, -45], [6, -44], [-1, -69], [-13, -36], [-35, -37], [-26, 6], [-15, 15], [-27, 60], [-1, 61], [25, 41], [10, 51], [64, -9], [6, 9], [4, 3], [5, -6]], [[45226, 67984], [-11, -5], [-14, 15], [-14, 45], [10, 34], [8, 16], [13, -3], [23, -25], [8, -25], [0, -16], [-23, -36]], [[45462, 68190], [-23, -131], [-22, -52], [-13, -17], [-32, -14], [-38, 82], [-19, 83], [-11, 26], [17, 21], [25, -3], [54, 17], [11, 7], [55, 84], [55, 10], [1, -27], [-60, -86]], [[46056, 68069], [-38, -65], [-38, 15], [-6, 11], [38, 16], [34, 50], [22, 110], [35, 121], [7, 52], [13, 20], [19, 2], [8, -4], [9, -27], [0, -61], [-10, -102], [-18, -89], [-75, -49]], [[45046, 68256], [-7, -5], [-7, 46], [-33, 111], [20, 50], [37, 1], [15, -34], [5, -36], [-7, -21], [2, -42], [-4, -27], [-21, -43]], [[46190, 68497], [-19, -38], [-21, 13], [10, 83], [9, 25], [39, 36], [32, 15], [9, 38], [11, 15], [11, -23], [-9, -26], [-6, -84], [-22, -26], [-44, -28]], [[50442, 74119], [-6, -7], [-18, 7], [-28, 0], [-1, 23], [4, 16], [5, 17], [17, -33], [27, -6], [0, -17]], [[50401, 74261], [-10, -35], [-42, 12], [-10, 15], [9, 40], [13, 5], [0, 28], [13, 29], [60, 23], [14, -20], [3, -28], [-36, -61], [-14, -8]], [[50873, 74763], [27, -19], [28, 17], [15, -5], [15, -9], [3, -37], [-13, -41], [-18, -41], [-16, -45], [-13, -52], [-25, -31], [-23, -18], [-48, 38], [-28, 10], [-8, 14], [-7, 58], [-12, 18], [-19, 8], [-16, -14], [-21, -31], [-12, 31], [-17, 5], [-7, 19], [0, 23], [115, 139], [33, 31], [71, 36], [11, -5], [-9, -22], [0, -9], [9, -10], [-2, -17], [-9, -14], [-4, -27]], [[51192, 74793], [-5, -7], [-85, 67], [-28, 7], [-7, 10], [1, 35], [2, 15], [57, 7], [46, -24], [25, -67], [2, -11], [-8, -32]], [[49501, 76847], [1, -20], [10, -28], [12, -10], [24, -14], [18, -2], [25, -7], [17, -16], [1, -24], [-5, -28], [-10, -25], [-6, -20], [6, -11], [9, -9], [9, -2], [7, 3], [5, 15], [9, 19], [5, 2], [0, -10], [4, -13], [31, -23], [67, -41], [26, -1], [22, -5], [6, -17], [43, -64], [10, 2], [19, -1], [23, 5], [16, 12], [11, -2], [12, -13], [14, -10], [19, -21], [16, -26], [11, -9], [67, 18], [15, -16], [16, 0], [18, 4], [39, -8], [32, 2], [3, 7], [3, 57], [5, 21], [7, 5], [19, -4], [68, -34], [28, -21], [27, -17], [24, -2], [15, -11], [22, -55]], [[50473, 76326], [43, -27], [19, -17], [7, -20], [9, -19], [13, -3], [18, 19], [29, 20], [48, -18], [54, -26], [23, -3], [1, 13], [4, 18], [9, 8], [13, 3], [19, 9], [21, 16], [21, 6], [23, -11], [28, -10], [17, 0]], [[50892, 76284], [7, -36], [14, -14], [5, -31], [-24, -17], [-15, -2], [-4, -54], [6, -16], [14, -14], [4, -16], [3, -80], [-28, -48], [-40, -54], [-193, -173], [-46, -84], [-17, -19], [-143, -53], [-101, -57], [-48, -20], [-60, -98], [-28, -40], [23, -11], [26, -47], [-9, -21], [-38, -32], [-17, -10], [-9, 5], [-9, -4], [-64, -170], [-58, -123], [-32, -53], [-32, -79], [-70, -206], [-1, -59], [35, -204], [19, -54], [28, -45], [53, -38], [12, -38], [-18, -36], [-52, -64], [-91, -86], [-39, -68], [-8, -66], [-27, -30], [-10, -92], [-16, -61], [-4, -20], [-17, -47], [-2, -33], [28, -47], [-14, -20], [-14, -9], [-32, -5], [-108, -6], [-87, -100], [-44, -89], [-39, -165], [-48, -98], [-21, -18], [-33, 43], [-41, 7], [-40, -15], [-20, -33], [-33, -19], [-32, 16], [-68, 9], [-31, -2], [-48, -27], [-41, 18], [-69, 9], [-150, -21], [-18, -11], [-19, -41], [-48, -70], [-72, -3], [-66, -45], [-16, -29], [-28, -79], [-9, -58], [-5, -1], [-7, 14], [-11, -4], [-5, -45], [-25, -20], [-20, -7], [-51, 36], [-42, 54], [-22, 3], [-36, 84], [-16, 54], [-11, 57], [2, 22], [-3, 19], [-32, 23], [-8, 53], [24, 68], [19, 30], [12, 8], [-29, -3], [-21, -44], [-27, 71], [-109, 138], [7, 31], [-1, 18], [-18, -37], [-13, -10], [-56, 6], [-64, -17]], [[47942, 73259], [-17, 144], [-8, 55], [-2, 35], [17, 82], [18, 34], [24, 69], [30, 58], [31, 13], [14, 9], [11, 44], [7, 38], [-5, 4], [-36, -8], [-66, 159], [2, 26], [8, 38], [6, 47], [1, 38], [17, 32], [26, 32], [22, 46], [11, 46], [3, 41], [-13, 29], [-36, 16], [-37, 117], [-8, 73], [-8, 8], [-23, 33], [-22, 62], [-3, 10], [23, 11], [93, 1], [20, 13], [3, 5], [17, 49], [18, 80], [4, 49], [-6, 20], [-31, 49], [-1, 15], [5, 23], [18, 25], [25, 28], [14, 25], [-3, 19], [-8, 20], [-1, 18], [5, 23], [1, 79], [4, 20], [-5, 71], [-6, 58], [-20, 75], [4, 17], [9, 14], [29, 26], [24, 62], [35, 51], [45, 41], [31, 46], [13, 35], [9, 10], [-3, 16], [-6, 24], [-18, 23], [-23, 13], [-26, 0], [-16, 4], [-4, 19], [1, 49], [-1, 49], [-5, 22], [-12, 17], [-24, -5], [-20, 14], [-16, 3], [-9, -10], [-45, 3], [-19, 8], [-14, 9], [-8, -5], [-5, -10], [-1, -15], [-3, -19], [-17, -18], [-37, -18], [-30, 2], [-28, 12], [-9, 10], [-13, 8], [-57, -10], [-7, 7], [-19, -18], [-29, -22], [-16, -1], [-6, 4], [-2, 10], [-12, 34], [3, 18], [23, 53], [-2, 12], [-10, 17], [-8, 25], [-3, 12], [-15, 2], [-15, -13], [-60, -26], [-14, -9], [-26, -26], [-27, -39]], [[47561, 76002], [-20, -8], [-8, 12], [-2, 91], [32, 60], [22, 37], [-10, 7], [-24, -1], [1, 29], [12, 13], [11, 31], [-13, 14], [-10, 20], [0, 53], [3, 22], [-3, 23], [-49, -32], [-13, 5], [0, 40], [27, 60], [3, 18], [-32, 9], [-24, 30], [-14, 26], [-16, 38], [0, 34], [16, 79], [23, 24], [20, 14], [42, 55], [57, -10], [36, 11], [32, 28], [19, 7], [29, 24], [-1, 33], [-10, 25], [9, 23], [33, 29], [37, 37], [42, 7], [43, 34], [29, -22], [25, 7], [29, -25], [38, -58], [56, -24], [45, 19], [78, 3], [40, -7], [70, 14], [40, -5], [64, 29], [51, -36], [97, -17], [58, -30], [162, -49], [59, -1], [82, 28], [35, 21], [32, -13], [47, 24], [23, -4], [29, -35], [104, -46], [27, 39], [20, 9], [74, -24], [75, -49], [39, -3], [57, 13], [46, 32], [9, 4]], [[56282, 85611], [20, -14], [18, 4], [18, 10], [40, -9], [92, -71], [8, -19], [-54, -8], [-13, -22], [-13, -15], [-15, -5], [-27, -30], [-35, -29], [-8, -17], [-64, 3], [-35, -11], [-29, -33], [-11, -62], [-21, -49], [-21, -18], [-22, -3], [-6, 19], [3, 18], [46, 69], [10, 23], [-23, 10], [-20, 24], [-42, 28], [-8, 22], [10, 2], [10, 7], [11, 19], [5, 21], [-34, 64], [18, 10], [21, -2], [22, -19], [24, 22], [11, 3], [17, -8], [17, 42], [40, 14], [20, 13], [20, -3]], [[56484, 85570], [-23, -6], [-55, 41], [13, 27], [15, 11], [47, -17], [6, -42], [-3, -14]], [[56367, 85729], [-23, -28], [-13, 11], [-7, 14], [-30, -65], [-33, -11], [-19, 13], [2, 24], [-19, 63], [-29, 19], [-40, 1], [-30, 26], [113, 18], [12, 30], [23, 32], [17, 3], [15, -7], [2, -25], [4, -10], [51, -13], [20, -41], [8, -50], [-24, -4]], [[57781, 86108], [14, -18], [19, -29], [5, -17], [-6, -9], [-19, -9], [-4, -8], [-8, -15], [-22, -3], [-11, -11], [-14, -49], [-25, -81], [-38, -62], [-30, -34], [-14, -26], [-8, -31], [-2, -31], [29, -172], [0, -31], [-7, -31], [-5, -33], [4, -28], [19, -48], [20, -71], [8, -46], [14, -17], [13, -12], [3, -8], [-1, -8], [-6, -9], [-59, -24], [-8, -20], [-6, -23], [-25, -33], [-8, -31], [-5, -36], [-1, -13]], [[57597, 84981], [-7, -2], [-39, 8], [-42, 23], [-19, 18], [-18, -1], [-23, -11], [-79, -33], [-20, 7], [-46, 33], [-23, 35], [-51, 71], [-4, 17], [-7, 13], [-55, 18], [-20, 26], [-17, 4], [-24, 13], [-65, 55], [-16, 6], [-4, -10], [2, -13], [-4, -8], [-9, 1], [-14, 20], [-18, 18], [-56, -34], [-20, -9], [-17, -2], [-88, -44], [-27, -24], [-11, 2]], [[56756, 85178], [2, 23], [37, 113], [7, 89], [13, 13], [4, 12], [-6, 29], [-38, 18], [-15, -3], [-14, -30], [-14, -22], [-34, -14], [-29, 23], [-67, 32], [-18, 41], [-4, 42], [-35, 40], [-15, 48], [6, 33], [32, 22], [9, 19], [-40, -3], [-9, 5], [-2, 17], [-18, 58], [16, 23], [7, 22], [-13, 19], [4, 22], [10, 22], [-6, 50], [40, 27], [40, 19], [83, 10], [-8, 46], [34, 2], [57, 56], [56, -10], [82, 38], [157, 0], [22, 22], [-4, 22], [0, 24], [30, -7], [49, 4], [186, -46], [45, 0], [63, -47], [34, -13], [101, 0], [154, -21], [31, 32], [3, 9]], [[61922, 58179], [-4, -23], [-12, -33], [-15, -33], [-13, -34], [-29, -95], [-1, -12], [4, -19], [15, -44], [17, -70], [9, -65], [7, -31], [20, -36], [28, -74], [15, -50], [31, -26], [11, -63], [23, -93], [25, -74], [25, -58], [27, -23], [11, -2], [57, -107], [44, -82], [11, -13], [79, -54], [90, -61], [73, -50], [92, -63], [92, -62], [85, -59], [120, -84], [97, -67], [77, -53], [16, -17], [91, 0], [92, 0], [95, 0]], [[63327, 56449], [-69, -137], [-77, -155], [-82, -162], [-52, -105], [-83, -166], [-69, -139], [-72, -151], [-64, -137], [-84, -189], [-54, -123], [-85, -192], [-53, -121], [-8, -7], [-77, 9], [-74, 9], [-95, 12], [-10, -1], [-28, -11], [-17, -11], [-68, -33], [-13, -8], [-56, -52], [-58, -61], [-31, -47], [-23, -68], [-10, -48], [-11, -21], [-18, -19], [-121, -46], [-36, -6], [-56, -37], [-30, -61], [-9, -31]], [[61634, 54134], [-41, 1], [-71, -9], [-30, -10], [-15, -2], [-27, 0], [-23, 11], [-15, 17], [-18, 38], [-41, 76], [-30, 48], [-66, -55], [-59, -55], [-84, -77], [-47, -56], [-15, -56], [-37, -101], [-33, -63], [-12, -8], [-75, 14], [-27, 12], [-44, 12], [-60, 22], [-40, 23], [-44, 3], [-62, 8], [-39, 17], [-39, 57], [-51, 68], [-52, 70], [-54, 72], [-63, 82], [-69, 91], [-16, 9], [-7, 2], [-75, 4], [-78, 4], [-53, 3], [-16, 10], [-13, 21], [-16, 67], [-20, 48], [-23, 60], [-2, 82], [6, 90], [6, 29], [-3, 30], [0, 40], [-12, 38], [-77, 43], [-13, -3], [-12, -16], [-15, -12], [-10, 11], [-7, 16], [0, 27], [1, 19]], [[59796, 55006], [-4, 11], [-25, 41], [-23, 53], [-14, 58], [-13, 48], [-7, 108], [-17, 66], [-16, 81], [-25, 154], [-11, 53], [-20, 36], [-21, 33], [-22, 68], [-57, 61], [-21, 47], [-38, 81], [-10, 41], [-2, 41], [-12, 38], [-21, 43], [-66, 93], [-18, 12], [-24, 10], [-34, 9], [-46, 21], [-40, 36], [-19, 26], [-4, 18], [4, 30], [14, 51], [28, 122], [19, 83], [13, 24], [36, 6], [38, -3], [27, -6], [39, -1], [47, 7], [18, 28], [15, 31], [6, 21], [2, 55], [0, 43], [-3, 167], [-2, 102], [-2, 116], [1, 24]], [[59466, 57293], [0, 30], [11, 124], [11, 72], [7, 37], [30, 119], [5, 38], [1, 35], [-11, 159], [19, 75], [25, 75], [21, 32], [18, 21], [8, -9], [20, -34], [27, -34], [13, 7], [18, 30], [14, 31], [-2, 56], [12, 115], [-2, 66], [13, 83], [14, 116], [7, 73], [8, 39], [39, 81], [33, 115], [22, 83], [40, 137], [21, 49], [17, 22], [25, 14], [46, 12], [33, 12], [5, 17], [3, 28], [0, 61], [7, 105], [14, 102], [17, 78], [10, 35], [11, 34], [12, 58], [16, 124], [-1, 84], [22, 155]], [[56007, 86467], [-24, -6], [-15, 17], [6, 12], [17, 14], [18, -2], [4, -16], [-6, -19]], [[56064, 86486], [-28, -20], [-10, 5], [3, 33], [16, 15], [28, 2], [-9, -35]], [[56159, 86618], [35, -13], [15, 5], [17, -30], [-29, -20], [-2, -24], [12, -14], [4, -22], [-29, 0], [-13, 18], [-6, 23], [-13, 16], [-18, 13], [9, 16], [5, 24], [13, 8]], [[56109, 86599], [-20, -3], [-29, 29], [-3, 11], [11, 6], [-8, 23], [3, 10], [22, -18], [12, -21], [-12, -5], [20, -22], [4, -10]], [[55958, 86710], [-4, -27], [-19, 3], [-19, -5], [-15, 27], [-9, 45], [3, 9], [12, 10], [9, -24], [42, -38]], [[55893, 88272], [3, -11], [17, 3], [21, 20], [16, -9], [-2, -28], [-10, 1], [-3, 4], [-14, -16], [-2, -9], [-16, -7], [-29, 28], [-18, 45], [42, 0], [-4, -11], [-1, -10]], [[56902, 89280], [-42, -19], [-33, 12], [-1, 37], [21, 18], [37, 7], [52, -18], [7, -10], [-29, -7], [-12, -20]], [[58045, 91602], [-18, -7], [-58, -28], [-35, -19], [-42, -14], [11, -18], [70, -4], [11, -6], [8, -9], [1, -15], [-7, -25], [-76, -134], [-2, -29], [25, -79], [35, -93], [104, -41], [78, -32], [51, -77], [82, -101], [44, -37], [2, -12], [-13, -70], [-53, -69], [-49, -59], [-51, -71], [-40, -60], [-44, -73], [-5, -23], [-1, -22], [8, -25], [55, -88], [22, -46], [26, -48], [22, -54], [13, -47], [22, -47], [14, -24], [23, -33], [28, -50], [9, -39], [42, -136], [4, -35], [-2, -25], [-18, -7], [-41, -4], [-44, -17], [-2, -5], [29, -32], [-26, -55], [-3, -79], [-28, -41], [-2, -10], [1, -8], [5, -6], [50, -11], [4, -11], [1, -23], [-5, -22], [-25, -16], [-27, -23], [-6, -22], [1, -19], [9, -33], [18, -38], [23, -24], [80, -22], [10, -19], [5, -26], [-2, -25], [-37, -50], [0, -19], [15, -47], [19, -44], [78, -48], [27, -27], [7, -21], [4, -34], [0, -37], [-6, -32], [-25, -42], [-57, -83], [-57, -33], [-4, -7], [18, -26], [101, -107], [66, -50], [89, -67], [57, -53], [18, -38], [25, -43], [28, -35], [20, -30], [8, -19], [-1, -21], [-27, -63], [-15, -49], [-27, -71], [-28, -50], [-69, -91], [-103, -113], [-24, -34], [-48, -59], [-82, -120], [-22, -26], [-67, -96], [-31, -30], [-24, -28], [-67, -90], [-72, -69], [-71, -63], [-21, -33], [-26, -24], [-31, -23], [-14, -14], [-71, -87], [-98, -120]], [[57721, 86714], [-10, -2], [-26, -20], [-40, -5], [-17, -14], [-61, 42], [-11, 3], [-36, -11], [-34, -31], [-64, -9], [-32, -10], [-20, -14], [-4, 33], [9, 43], [14, 29], [1, 18], [-10, -1], [-21, -42], [-11, -49], [-21, -25], [-48, -10], [-47, 39], [-23, 0], [14, -28], [10, -31], [-1, -17], [-25, 3], [-28, -19], [-25, -27], [-11, 0], [-17, 38], [-30, -18], [-26, -24], [-52, -7], [-31, -31], [-55, -22], [-30, 1], [-69, -25], [-23, -40], [-20, -14], [-29, 12], [-88, -19], [-84, -25], [-36, 1], [-36, 11], [-38, -35], [-40, -47], [-45, -16], [-16, 6], [13, 24], [29, 25], [21, 35], [2, 28], [-13, 12], [-19, 3], [-24, 30], [-23, 64], [-13, 3], [-6, -17], [-7, -49], [-7, -14], [-12, -11], [-15, -12], [-14, -5], [-51, 1], [-7, 24], [0, 11], [9, 32], [-7, 6], [7, 26], [12, -2], [14, 4], [7, 13], [0, 16], [-20, 4], [-1, 11], [18, 45], [2, 12], [-7, 3], [-11, -5], [-73, 14], [-90, 57], [-22, 3], [-14, 51], [-21, -6], [-32, -30], [-24, 22], [-25, 15], [-7, 24], [0, 34], [-2, 41], [-7, 47], [-5, 68], [5, 53], [20, 39], [8, 25], [9, 64], [3, 74], [-6, 26], [2, 17], [16, 0], [-4, 14], [-7, 8], [-8, 17], [7, 9], [19, 0], [2, 6], [2, 8], [-15, 43], [-2, 21], [-21, 62], [-23, 60], [-36, 43], [13, 71], [14, 64], [-3, 31], [-5, 37], [-44, 41], [-7, 58], [-10, 63], [4, 38], [7, 29], [14, 29], [73, 92], [4, 48], [50, 4], [-23, 42], [-6, 24], [-1, 29], [71, 19], [27, -16], [62, 20], [55, 38], [-1, 20], [-8, 18], [-12, 35], [8, 10], [21, -7], [-10, 17], [2, 18], [22, -7], [36, 51], [1, 39], [63, 21], [71, 79], [33, 25], [32, 18], [69, 80], [29, 3], [15, 54], [58, 72], [17, 9], [27, 64], [71, 75], [45, 95], [25, 33], [8, 36], [28, 3], [25, 27], [54, 18], [53, -5], [22, -12], [21, 4], [-2, 32], [-15, 20], [12, 19], [28, 14], [-2, 32], [-7, 20], [-23, 25], [12, 58], [2, 63], [11, 73], [-29, 39], [-112, 65], [-21, -2], [-24, 8], [-26, 50], [11, 43], [2, 16], [-11, -1], [-16, -21], [-36, -23], [-46, 18], [-23, -4]], [[56709, 89749], [-29, 106], [-15, 41], [-25, 50], [-43, 25], [-8, 14], [-6, 22], [-2, 29], [-6, 44], [3, 36], [5, 22], [19, 14], [27, 41], [5, 30], [3, 45], [12, 40], [14, 20], [-4, 16], [-9, 23], [-20, 32], [-31, 40], [-23, 37], [-9, 36], [-6, 31], [1, 29], [9, 19], [29, 25], [4, 10], [-12, 55], [-20, 10], [-34, 5], [-20, 0], [-3, 6], [-1, 11], [4, 22], [10, 26], [9, 16], [2, 14], [-12, 47], [-3, 58], [4, 45], [36, 34], [2, 12], [-46, 36], [-33, 41], [-10, 24], [-38, 4], [-23, 69], [-35, 34], [-33, 30], [-20, 13], [-117, 42], [-46, 8], [-55, 25], [-41, 31], [-35, 20], [-30, 24], [-42, 23], [-12, 19], [-45, 37], [-21, 23], [-74, 45], [-3, 18], [0, 17], [-3, 7], [-76, 33]], [[55728, 91610], [15, 19], [59, 1], [49, -17], [11, 7], [6, 16], [-21, 61], [4, 15], [22, 20], [34, 15], [54, 2], [37, -2], [7, -2], [55, -67], [48, -65], [25, -28], [61, -79], [23, -46], [8, -32], [25, 0], [86, -14], [72, -12], [20, -19], [50, 4], [39, 16], [68, 21], [18, 26], [23, 27], [39, -4], [44, -22], [49, -28], [44, -13], [59, -21], [28, -27], [39, -7], [40, 26], [24, 73], [21, 32], [30, 24], [34, 10], [27, 4], [20, 19], [28, 40], [5, 50], [-5, 89], [5, 30], [23, 48], [31, 128], [14, 37], [17, 22], [23, 14], [42, 39], [61, 76], [16, 7], [43, 4], [54, -3], [49, -14], [5, 1], [22, 7], [39, 24], [68, 47], [43, 13], [40, -1], [43, -52], [62, -58], [40, -28], [108, -53], [94, -34], [54, -114], [-27, -46], [-13, -16], [-46, -45], [-50, -64], [-4, -33], [17, -34], [20, -22]], [[98507, 39346], [-2, -7], [-8, 2], [-2, 13], [5, 7], [7, -4], [0, -11]], [[358, 39937], [0, -1], [-1, 0], [-2, 2], [-2, 4], [0, 4], [0, 4], [1, 0], [2, -4], [1, -4], [1, -5]], [[407, 40802], [-3, -5], [-8, 6], [-6, 8], [-1, 8], [3, 10], [6, 6], [3, -2], [-2, -3], [-3, -4], [0, -11], [5, -6], [4, -1], [2, -6]], [[99579, 40913], [0, -25], [-36, -16], [-12, 20], [-8, 4], [-21, -36], [-6, -15], [-2, -11], [-6, -6], [-39, -17], [-17, 17], [12, 12], [14, 23], [14, -3], [15, 22], [14, 33], [21, 8], [14, 13], [24, -10], [19, -13]], [[56, 40932], [0, -17], [-4, 1], [-5, 8], [-2, -4], [-2, -5], [-1, -12], [-1, -7], [-4, 3], [0, 11], [1, 9], [2, 12], [7, 11], [9, -10]], [[344, 41339], [-3, -10], [-15, 17], [-6, 12], [16, 9], [8, -3], [0, -25]], [[99818, 41415], [-2, -5], [-24, 46], [0, 19], [5, 16], [9, 15], [9, -26], [7, -44], [-4, -21]], [[281, 41487], [-8, -8], [-6, 2], [-7, 9], [-4, 16], [9, 14], [13, -16], [3, -17]], [[486, 41501], [-16, -6], [-14, 25], [9, 26], [13, -7], [7, -25], [1, -13]], [[99673, 41630], [-14, -10], [-8, 35], [11, 35], [12, 4], [6, -36], [-7, -28]], [[99521, 41836], [0, -26], [8, -11], [8, -2], [21, -48], [31, -42], [19, -32], [1, -28], [-6, -29], [8, -51], [4, -54], [14, -86], [-20, -16], [-30, -2], [-7, -15], [-11, 8], [-25, -6], [-25, -28], [-23, -38], [-27, 0], [-30, -8], [-30, 5], [-21, 21], [-38, 22], [-49, 19], [-21, 15], [-17, 25], [-16, 63], [-3, 31], [3, 30], [15, 10], [12, 15], [1, 19], [6, 14], [7, 5], [3, 9], [-5, 32], [-1, 29], [29, 53], [31, 45], [56, 42], [34, -4], [52, 33], [17, 15], [16, -10], [9, -24]], [[99839, 41839], [-10, -16], [-4, 79], [9, 0], [7, -8], [4, -20], [-6, -35]], [[290, 41893], [-7, -20], [-6, 7], [8, 33], [1, 15], [-12, 17], [-1, 12], [3, 8], [15, -20], [9, -15], [1, -8], [-2, -15], [-9, -14]], [[99231, 41965], [-15, -9], [8, 45], [8, 15], [5, 3], [9, 3], [-4, -32], [-11, -25]], [[99999, 42071], [-21, -21], [-8, 21], [10, 50], [19, 52], [0, -42], [0, -60]], [[0, 42174], [30, 49], [9, 7], [10, -45], [-12, -49], [-30, -43], [-7, -22], [0, 103]], [[99999, 42315], [-4, -1], [0, 11], [-99995, 19], [16, 28], [12, 5], [-8, -27], [0, -14], [-20, -21], [99999, 0]], [[99999, 42529], [-42, -77], [-15, -39], [-13, -44], [-36, -47], [-15, -63], [1, -63], [36, 66], [40, 54], [12, 11], [13, 0], [-1, -19], [-6, -18], [-5, -48], [11, -45], [-30, 5], [-29, -4], [-35, -25], [-34, -11], [-13, -1], [-13, 9], [-8, 13], [-6, 29], [-6, 5], [-28, -1], [-40, -59], [-14, -49], [-16, -3], [-18, 11], [-23, -38], [-26, -14], [-12, 32], [-7, 40], [-10, 29], [-29, 7], [4, 36], [8, 15], [7, 21], [5, 24], [14, -16], [14, -9], [16, 18], [17, 1], [17, 53], [26, 33], [37, 26], [37, 19], [19, 3], [18, 11], [32, 50], [21, 25], [24, 15], [22, 9], [20, -8], [17, 5], [42, 35], [0, -9]], [[0, 42538], [9, 15], [6, 0], [-3, -13], [-12, -11], [0, 9]], [[99199, 44639], [-10, -6], [-18, 5], [-4, 9], [6, 2], [11, 6], [14, -3], [3, -6], [-2, -7]], [[33421, 21755], [-18, -11], [-5, 5], [-5, 22], [-1, 28], [-2, 12], [12, -4], [20, -22], [-1, -30]], [[33767, 21882], [1, -50], [-22, 16], [-8, 24], [12, 17], [11, -1], [6, -6]], [[33050, 22012], [20, -8], [20, 3], [-11, -59], [-9, -28], [-24, 2], [-23, 39], [-8, 20], [26, 15], [9, 16]], [[33253, 22199], [41, -11], [37, 40], [25, 13], [21, -9], [15, -24], [21, 4], [61, 25], [8, -9], [21, 29], [19, -13], [14, -25], [-7, -30], [-17, -19], [-10, -26], [-13, -21], [-21, -19], [-16, -31], [-40, -73], [-57, -94], [-19, -8], [-40, -6], [-17, 7], [-14, -2], [-12, -51], [-18, -38], [-9, -8], [-19, -4], [-8, -5], [-7, -14], [-50, 3], [-35, 24], [-41, 52], [55, 64], [48, -3], [39, 43], [32, 21], [13, 22], [14, 17], [0, 22], [-11, 10], [-14, -1], [-14, -10], [-34, -12], [-23, 25], [15, 10], [17, -1], [52, 24], [10, 10], [-16, 33], [-31, 21], [-26, 34], [-4, 13], [1, 20], [-14, 41], [15, 2], [19, -26], [44, -36]], [[33302, 22237], [-38, 0], [-8, 19], [1, 47], [28, 4], [29, -20], [-2, -20], [-10, -30]], [[33652, 22309], [43, -33], [53, 11], [22, -9], [13, -28], [-7, -26], [-17, 4], [-15, -7], [3, -35], [10, -14], [56, -38], [10, -2], [-1, 15], [-10, 26], [-4, 28], [9, 24], [14, 7], [64, 11], [15, -11], [32, -66], [-30, -9], [-12, -28], [26, -12], [20, -19], [-11, -28], [-2, -14], [-46, -19], [-40, -13], [-19, -33], [-33, -24], [-96, -41], [11, -34], [1, -16], [-4, -44], [-133, 52], [-18, -5], [36, -90], [-26, -16], [-26, 10], [-24, -7], [-15, -65], [-38, 42], [-32, 58], [-1, 33], [32, 62], [-10, 26], [73, 83], [13, 25], [23, 14], [23, 5], [10, 11], [-1, 20], [-10, 35], [1, 57], [58, 77], [-8, 49], [18, 1]], [[65499, 39550], [-40, -17], [-27, 6], [-54, 49], [-15, 33], [-21, 91], [5, 32], [17, 57], [38, 23], [41, -9], [18, -15], [21, -66], [28, -68], [-4, -80], [-7, -36]], [[62549, 44368], [-17, -5], [-8, 15], [-5, 36], [5, 35], [1, 28], [-14, 49], [14, 28], [12, -32], [6, -2], [18, -23], [-5, -42], [1, -13], [-8, -42], [0, -32]], [[34828, 53183], [4, 5], [10, 4], [9, 0], [14, 42], [23, 27], [40, 145], [17, 60], [2, 33], [5, 68], [-9, 83], [4, 24], [35, 100], [15, 55], [1, 47], [4, 34], [-4, 18], [-8, 5], [-13, 44], [-9, 37], [-23, 37], [-16, 39], [-27, 88], [3, 49], [-8, 18], [-8, 18], [1, 23], [-6, 55], [-7, 52], [-2, 33], [6, 57], [-4, 62], [-8, 33], [-3, 51], [2, 45], [8, 25], [-2, 32], [34, 100], [25, 58], [23, 41]], [[34956, 54930], [20, 30], [27, 152], [19, 54], [20, 7], [109, -126], [51, -11], [103, -68], [38, -88], [86, -145], [45, -45], [1, -39], [-10, -60], [29, 53], [45, -84], [13, -41], [14, -76], [-5, -49], [-6, -25], [-1, -19], [14, 27], [7, 21], [3, 51], [10, 63], [15, 1], [12, -38], [24, -163], [9, -33], [4, -52], [-2, -23], [2, -22]], [[33103, 60192], [-2, -33], [-7, -6], [-11, 27], [-45, -4], [-7, 25], [-1, 11], [22, 42], [-26, 11], [-10, 18], [-22, 87], [2, 26], [9, 13], [15, 2], [28, -28], [20, -40], [7, -1], [3, -11], [-4, -29], [12, -24], [5, -17], [12, -69]], [[32991, 60996], [-15, -2], [-7, 5], [-2, 34], [12, 24], [7, 6], [10, -27], [3, -22], [-8, -18]], [[32891, 61063], [-22, -26], [-11, 8], [-14, 50], [-9, 138], [7, 22], [5, 9], [30, -17], [12, -19], [13, -13], [-7, -25], [4, -103], [-8, -24]], [[32964, 61192], [-32, -6], [-22, 5], [-5, 41], [11, 35], [-8, 42], [5, 25], [11, 17], [18, -22], [3, -32], [11, -29], [51, -61], [-43, -15]], [[52633, 76500], [-7, -84], [5, -25], [10, -18], [5, -19], [8, -225], [-2, -18], [-34, -91], [-7, -26], [-2, -113], [-6, -30], [-12, -30], [-21, -96], [-19, -43], [-51, 53], [-30, 22], [-14, 25], [-10, 17], [6, 23], [14, 23], [2, 19], [-32, 21], [-15, 14], [0, 24], [11, 38], [-5, 32], [-18, -2], [-15, 5], [-1, 17], [10, 21], [14, 27], [-1, 30], [-16, 13], [-15, 25], [-6, 33], [12, 23], [18, 15], [-13, 34], [-10, 1], [-7, 7], [6, 16], [14, 24], [21, 71], [28, 33], [50, 22], [14, 9], [12, 25], [14, 16], [16, -2], [16, -9], [9, -11], [8, 11], [6, 31], [-4, 27], [2, 75], [9, 42], [15, 3], [13, -24], [-1, -20], [5, -49], [1, -32]], [[49672, 78285], [-10, -50], [-18, 46], [-25, 41], [-5, 37], [0, 10], [29, -27], [29, -57]], [[51608, 80378], [9, -19], [22, -8], [7, -8], [9, -13], [14, -5], [18, 5], [12, 18], [17, 8], [17, -3], [10, -10], [19, -14]], [[51950, 78298], [-23, -34], [-37, -31], [-5, -19], [1, -23], [4, -18], [21, -23], [22, -51], [15, -46], [31, -45], [8, -13], [-2, -11], [-9, -19], [-10, -63], [-13, -10], [-14, -4], [-39, -46], [-17, 6], [-25, -1], [-17, -15], [1, -28], [16, -27], [9, -28], [4, -30], [18, -22], [24, -13], [14, -1], [9, -8], [6, -10], [10, -64], [-6, -16], [-13, -7], [-8, -26], [-16, -39], [-9, -31], [10, -27], [4, -20], [-5, -21], [7, -32], [19, -32], [50, -46], [47, -36], [15, -6], [63, 23], [11, -2], [8, -28], [3, -19], [-7, -28], [-17, -40], [-19, -31], [-11, -27], [2, -24], [1, -32]], [[52081, 77054], [-15, -10]], [[52066, 77044], [-1, 7], [-6, 5], [-5, -3], [-4, -7], [-1, -12]], [[52049, 77034], [-32, -21], [-23, -21], [-88, -127], [-41, -38], [-8, -22], [-8, -42], [-24, -36], [-22, -17], [-52, -18], [-53, -38], [-23, 16], [-62, -1], [-38, 46], [-74, 29], [-24, 67], [-33, 4], [-22, -2], [-13, 10], [-4, 23], [0, 22], [-23, -10], [-18, 0], [-11, -9], [-8, -10], [-10, 7], [-6, -3], [1, -13], [-22, -3], [-23, 8], [-61, 35], [-9, 5], [-42, 13], [-17, 14], [-14, 35], [-11, 10], [-6, 7], [-39, -17], [-14, -27], [-21, -32], [-146, -155], [-27, -64], [-31, -96], [-2, -44], [13, -142], [30, -75], [4, -18]], [[49501, 76847], [45, 17], [41, 73], [39, 263], [28, 311], [20, 58], [26, 17], [-21, 42], [-13, -21], [-5, -23], [-7, -12], [15, 285], [11, 105], [19, 109], [39, -43], [32, -44], [17, -39], [21, -127], [15, -27], [24, -26], [-9, 29], [-17, 22], [-25, 170], [-16, 48], [-25, 40], [-80, 85], [-8, 17], [-4, 32], [27, -1], [23, -16], [-3, 18], [-7, 19], [-10, 69], [-9, 161], [1, 28], [-4, 34], [-26, 7], [-20, 2], [-22, 13], [-110, 95], [-37, 98], [-39, 72], [-9, 32], [1, 32], [20, 67], [-18, 43], [-17, 8], [-15, 21], [14, 35], [11, 23], [22, 6], [30, -8], [28, -20], [21, -5], [-64, 54], [-105, -18], [-23, 7], [-19, 12], [-7, 40], [15, 18], [13, 34], [-15, 23], [-20, 9], [-31, -1], [-29, -7], [-7, 14], [17, 37], [-15, 14], [-20, -7], [-29, -7], [-28, 11], [-26, 42], [-17, 0], [-12, -5], [-18, 16], [-19, 4], [-13, -5], [-18, 24], [-109, 49], [-47, 6], [-43, -22], [-24, 7], [-18, 32], [-14, 52], [-70, 41], [14, 27], [32, 6], [37, 19], [14, 23], [-29, 28], [-22, 7], [-9, 10], [-9, 24], [13, 12], [9, -6], [26, -4], [45, 6], [-16, 25], [-18, 6], [-8, 6], [-36, 3], [-17, -9], [-37, 4], [-9, 27], [-3, 23], [11, 51], [53, 46], [131, 51], [56, -7], [40, 9], [47, 31], [20, 28], [67, 16], [63, -29], [59, -109], [28, -37], [68, 64], [102, -2], [21, -36], [8, 30], [19, 36], [15, -16], [8, -22], [107, 6], [17, 6], [-29, 26], [-23, 62], [-5, 229], [-30, 64], [-34, 102], [-16, 60], [-1, 21], [5, 30], [42, -1], [32, -8], [62, 23], [30, -16], [-2, -47], [9, -60], [11, -28], [15, -33], [50, 3], [54, -19], [68, -3], [99, -34], [42, 20], [41, 41], [78, 27], [7, 14], [-45, -6], [-42, 26], [-5, 29], [5, 25], [16, 58], [120, 92], [85, 28], [89, 50], [45, 52], [30, 68], [10, 14], [12, 13], [-12, 24], [8, 256], [9, 46], [17, 38], [27, 29], [40, 32], [148, 44], [22, 17]], [[48139, 87237], [5, -18], [-6, 2], [-19, 20], [-33, 48], [-11, 39], [-2, 18], [8, -2], [7, -16], [31, -11], [8, -8], [0, -19], [10, -23], [2, -30]], [[48160, 87445], [-6, -22], [-7, 1], [-26, 26], [-21, 15], [-7, 13], [-6, 21], [12, 2], [14, -4], [36, -20], [10, -20], [1, -12]], [[48003, 87637], [25, -22], [9, -16], [-14, -15], [-18, -4], [-21, 3], [-34, 17], [-12, 38], [24, -1], [28, 7], [13, -7]], [[48158, 87688], [-7, -77], [-12, 0], [-20, 22], [-15, 4], [-5, -11], [1, -14], [8, -9], [24, -52], [2, -15], [-3, -7], [-23, 15], [-57, 67], [-44, 110], [60, 18], [43, -29], [48, -22]], [[48220, 87706], [-13, -42], [-20, 7], [-5, 4], [-5, 11], [3, 31], [-1, 45], [22, -37], [19, -19]], [[95272, 54910], [3, -27], [-18, 13], [-2, 10], [10, 10], [7, -6]], [[93975, 55768], [-16, -13], [-20, 5], [-6, 47], [-10, 13], [2, 23], [15, 19], [30, -15], [11, -34], [-7, -22], [1, -23]], [[92123, 56074], [-2, -7], [-17, 3], [-2, 4], [1, 3], [8, 4], [1, 10], [-4, 2], [4, 6], [6, 1], [4, -7], [2, -9], [-1, -10]], [[92188, 56124], [-4, -3], [-3, 3], [1, 14], [2, 5], [4, 1], [8, -4], [1, -4], [-9, -12]], [[88372, 57315], [-21, -47], [-1, 16], [6, 28], [9, 32], [8, 19], [11, 6], [8, -27], [-9, -23], [-11, -4]], [[53091, 49587], [-27, 51], [-24, 95], [-27, 58], [-58, 94], [-15, 69], [-66, 153], [-95, 152], [-69, 133], [-10, 29], [12, -3], [66, -66], [9, 7], [7, 15], [-28, 34], [-27, 28], [-26, 17], [-26, -2], [-14, 28], [-9, 43], [-5, 36], [-11, 38], [-37, 79], [-9, 30], [-19, 41], [12, 6], [39, -40], [3, 16], [-3, 23], [-39, 38], [-22, 2], [-5, 27], [3, 30], [-28, 115], [-29, 85], [-4, 41], [78, -186], [11, -4], [13, 2], [33, 21], [-6, 25], [-15, 26], [-14, -12], [-19, -2], [-9, 11], [-5, 19], [19, 90], [-8, -4], [-6, -16], [-10, -8], [-16, -5], [-39, 49], [-34, 130], [-9, 27], [-9, 46], [-9, 18], [-39, 186], [15, -14], [18, -53], [35, 11], [13, 31], [12, -1], [12, 7], [15, 29], [45, 128], [12, 169], [-4, 100], [-7, 100], [15, 32], [6, -21], [3, -36], [7, -26], [16, -23], [29, -7], [46, -36], [16, -24], [4, 47], [53, 40], [-16, 14], [-47, -15], [-64, 59], [-21, 38], [-20, 72], [-20, 38], [1, 34], [46, 31], [12, -4], [5, -37], [12, -15], [5, 5], [2, 31], [0, 86], [-14, 122], [5, 23]], [[52664, 52437], [12, 9], [11, 16], [8, 3], [16, -3], [8, -29], [4, -15], [15, -7], [13, -15], [11, 4], [10, 17], [13, 4], [42, 0], [38, -1], [75, 0], [76, -1], [75, 0], [57, 0], [0, 69], [0, 108], [-1, 127], [0, 122], [0, 113], [-1, 133]], [[49704, 81042], [-24, -20], [-7, -23], [-6, -9], [-15, -6], [-15, -1], [-58, 47], [-14, -2], [13, 22], [37, 17], [20, 23], [47, -22], [22, -26]], [[48834, 82558], [11, -11], [30, 2], [-10, -24], [-32, -27], [-22, -26], [-26, -22], [-13, 25], [-15, -1], [-22, 49], [-4, 72], [29, 19], [41, -1], [33, -55]], [[48272, 83000], [-23, 3], [-17, -10], [-11, -9], [-10, 1], [-30, -3], [-29, 0], [-4, 15], [5, 46], [-6, 12], [-27, 6], [-10, 11], [-16, 31], [-3, 15], [-2, 20], [-16, 26], [-20, 19], [-12, 1], [-23, -31], [-19, -31], [7, -15], [6, -20], [-11, -15], [-31, -34], [-5, -13], [-9, -7], [-15, 10], [-37, -2], [-17, 5], [-20, 25], [-49, 17], [-9, 39], [-9, 7], [-56, 68], [-7, 23], [7, 13], [21, 21], [70, 34], [11, 13], [2, 12], [-21, 14], [-18, 15], [-6, 10], [-1, 9], [11, 11], [21, 1], [16, -5], [13, 10], [24, 10], [15, 13], [14, 33], [14, 30], [1, 16], [13, 57], [6, 14], [44, 37]], [[47994, 83578], [11, -21], [22, -5], [20, 19], [23, 59], [16, 3], [18, -4], [35, 7], [62, 27], [28, 1], [39, -14], [29, 0], [26, -42], [14, -66], [32, -66], [43, -57], [1, -34], [-15, -19], [-32, -23], [1, -25], [20, 13], [18, 5], [44, -5], [15, -26], [10, -37], [6, -31], [-4, -34], [-11, 11], [-12, 30], [-13, 14], [-16, 7], [7, -41], [-3, -56], [7, -5], [21, -1], [-14, -56], [-28, -16], [-33, -6], [-8, -20], [-6, -26], [-17, -38], [-22, -22], [-28, 4], [-28, 18]], [[48581, 83783], [-35, 0], [-12, 5], [-15, 14], [-17, 79], [6, 28], [7, 13], [7, 11], [19, 5], [18, -15], [7, -14], [15, -54], [3, -46], [-3, -26]], [[48297, 84061], [10, -74], [10, -46], [0, -16], [-9, -22], [-45, -29], [-15, 0], [0, 7], [10, 30], [-9, 33], [4, 26], [-4, 4], [-9, -3], [-33, -41], [-11, -4], [-1, 8], [8, 34], [1, 22], [5, 14], [9, 13], [11, 10], [8, 1], [9, -10], [27, 28], [24, 15]], [[48341, 83994], [-6, -6], [-14, 1], [-5, 10], [-3, 14], [0, 26], [8, 19], [36, 28], [-16, 10], [-1, 7], [10, 24], [39, 36], [10, 7], [10, -1], [-20, -65], [-48, -110]], [[48395, 84299], [-111, -32], [-38, 3], [-4, 16], [8, 10], [31, 10], [13, 77], [-47, 36], [-3, 10], [4, 17], [5, 7], [29, 18], [12, 4], [10, -2], [21, -21], [23, -43], [30, -7], [21, -19], [-4, -84]], [[48164, 84438], [-16, -4], [-1, 9], [28, 39], [17, 6], [6, -4], [-12, -22], [-22, -24]], [[47939, 84657], [-24, -8], [-9, 4], [-2, 8], [6, 20], [19, 7], [13, -11], [2, -10], [-5, -10]], [[48255, 84656], [-8, -7], [-10, 1], [-11, 10], [-13, 27], [30, 19], [13, -11], [4, -13], [0, -14], [-5, -12]], [[47986, 84743], [-12, -3], [-15, 3], [-10, 9], [-9, 35], [-2, 22], [4, 40], [-1, 47], [32, 2], [8, -7], [5, -142], [0, -6]], [[48293, 84968], [-1, -26], [-5, -30], [7, -32], [1, -22], [12, -8], [7, -10], [52, -12], [49, 4], [9, -10], [1, -15], [-8, -16], [-27, -30], [-33, -48], [-10, -10], [-11, -1], [-7, 5], [-6, 86], [-35, -11], [-29, 1], [-16, 10], [-11, 20], [-22, 52], [-65, 21], [-18, 28], [-6, 18], [3, 9], [13, 21], [17, -7], [11, 4], [6, 10], [0, 8], [-9, 18], [0, 6], [66, 23], [5, 37], [15, 3], [16, -12], [23, -38], [6, -46]], [[47998, 85070], [31, -32], [-25, -54], [-38, 0], [-54, 39], [0, 8], [4, 12], [8, 10], [9, 2], [13, -7], [19, 11], [15, -4], [18, 15]], [[48278, 85462], [-36, -100], [-13, -3], [-13, -25], [-37, -28], [33, 0], [9, -10], [0, -19], [-6, -12], [-43, -46], [-29, -18], [-31, -48], [-16, 0], [-16, -31], [-13, -13], [-7, 0], [-9, 6], [-19, 30], [35, 30], [4, 16], [24, 18], [-2, 5], [-39, 24], [-15, 17], [2, 8], [18, 19], [-9, 2], [-6, 10], [-10, 4], [-4, 10], [-1, 24], [2, 26], [12, 11], [4, 12], [5, 3], [17, -6], [18, -20], [20, 8], [24, -4], [1, 5], [-18, 49], [3, 10], [10, 12], [55, 35], [68, 60], [17, 9], [5, -8], [7, -31], [-1, -41]], [[49136, 85550], [2, -47], [-3, -15], [-7, -17], [-21, -33], [-55, -47], [-101, -108], [-60, -54], [-8, -26], [-4, -36], [35, -7], [14, -12], [-8, -18], [-53, -63], [-16, -58], [41, 2], [33, 11], [67, 36], [62, 27], [30, 1], [59, -21], [13, -1], [25, 10], [25, 1], [170, -6], [47, 12], [32, -15], [26, -37], [25, -68], [-1, -11], [-15, -31], [-28, -39], [-24, -54], [-7, -29], [-4, -32], [-8, -29], [-47, -138], [-47, -76], [-20, -55], [-26, -43], [-24, -27], [-26, -18], [-76, -20], [-21, -13], [-25, -24], [-27, -12], [31, 2], [31, 13], [56, 5], [65, -46], [-6, -37], [-26, -30], [-59, -5], [-55, -65], [-25, -20], [-26, -10], [-33, 3], [-60, 17], [-26, 18], [24, -29], [26, -16], [156, -37], [9, 4], [49, 39], [66, 0], [126, -71], [36, -55], [52, -78], [28, -31], [21, -28], [12, -41], [25, -138], [27, -134], [37, -146], [16, -40], [22, -28], [110, -66], [24, -21], [43, -63], [41, -67], [38, -51], [41, -41], [-20, -22], [-14, -34], [11, -46], [16, -44], [33, -71], [30, -77], [-11, 12], [-11, 6], [-16, -1], [-15, 3], [-28, 24], [-27, 30], [-53, -12], [-29, 5], [-26, 0], [49, -17], [53, -2], [117, -129], [40, -76], [23, -101], [-16, -46], [-25, -29], [-23, -34], [-22, -38], [65, -56], [14, 2], [15, 8], [13, 19], [24, 46], [12, 16], [40, 6], [34, -3], [34, -10], [30, 3], [60, -20], [30, -18], [77, -80], [16, -44], [8, -57], [1, -63], [-13, -58], [-15, -52], [-9, -67], [-6, -25], [-9, -18], [-41, -54], [-27, -21], [-11, 9], [-12, -1], [-1, -13], [12, -27], [1, -33], [-24, -24], [-25, -10], [-40, 13], [-57, -45], [41, -23], [8, -25], [-10, -43], [-25, -20], [-29, -8], [-29, -2], [-24, -11], [-23, -20], [29, 11], [20, -10], [13, -36], [11, -11], [57, -15], [34, 0], [68, 9], [32, -1], [12, -6], [0, -30], [-5, -75], [-9, -15], [-89, -62], [-19, -44], [-5, -26], [-52, 4], [-24, -27], [-43, -19], [-32, -20], [-32, -25], [-27, -7], [-113, 30], [-69, -3], [-93, -26], [-24, 5], [-35, 24], [-37, 17], [-42, 7], [-37, 23], [23, -44], [-51, -42], [-23, -8], [-24, 1], [-50, -12], [-46, 6], [7, -30], [12, -26], [-9, -11], [-11, -3], [-87, 20], [-13, -4], [-10, -18], [-32, 9], [-31, 31], [-33, 21], [-34, 10], [-28, -4], [-112, -48], [-23, -49], [-11, -69], [-16, -61], [-27, -47], [-31, -7], [-30, 33], [-56, 36], [-20, 25], [-6, 1], [-6, -9], [-22, -11], [-23, 0], [-35, -10], [-62, -29], [-25, -20], [-53, -55], [-11, -15], [-19, -55], [-30, -10], [-27, 35], [-31, 13], [-32, -13], [-20, -18], [-9, 15], [-1, 31], [24, 38], [64, 28], [55, 74], [28, 45], [10, 25], [14, 16], [17, 6], [9, 28], [77, 112], [7, 25], [4, 46], [6, 44], [63, 29], [30, 93], [8, 7], [88, 17], [65, -1], [65, -18], [33, -2], [33, 7], [26, 25], [45, 90], [25, 40], [29, 36], [27, 41], [44, 76], [-30, -26], [-36, -42], [-20, -24], [-66, -24], [-28, -25], [-50, -56], [-9, -5], [-75, 14], [-56, 72], [-35, 30], [-15, 4], [-15, -9], [-33, -9], [-33, 1], [17, 34], [23, 19], [-51, 13], [-15, 10], [-16, 23], [-40, 4], [-19, -6], [-33, -31], [-51, -33], [-62, 46], [-12, 20], [0, 39], [-9, 31], [-17, 10], [22, 40], [26, 27], [58, 27], [89, 62], [49, 27], [46, 46], [19, 28], [14, 39], [13, 47], [20, 39], [-19, 9], [-9, 29], [3, 29], [8, 26], [-7, 33], [-14, 34], [1, 26], [3, 29], [-35, -2], [-36, -9], [-32, -20], [-31, -27], [-27, -5], [0, 22], [12, 27], [31, 38], [34, 32], [12, 25], [9, 28], [17, 23], [44, 43], [83, 48], [13, 3], [33, -6], [32, 7], [28, 18], [29, 4], [63, -51], [-19, 78], [28, 18], [41, -70], [15, -7], [32, 10], [-13, 12], [-14, 1], [-19, 10], [-15, 23], [-27, 71], [2, 42], [17, 44], [20, 41], [-16, 8], [-14, 15], [-3, 41], [5, 35], [35, 32], [10, 48], [5, 53], [-6, 24], [-35, -4], [-17, -10], [-15, -16], [-16, 1], [-43, 59], [-25, 44], [-44, 93], [-6, 56], [35, 120], [55, 77], [64, 27], [-12, 5], [-98, 1], [-33, -10], [-30, -31], [-17, -10], [-17, -3], [-17, -16], [-15, -22], [-17, -14], [-33, 4], [-16, -5], [-11, 13], [-9, 21], [-13, 5], [-14, -6], [-29, -28], [-30, -17], [-36, 18], [-48, 33], [-9, -12], [-11, -31], [-6, -47], [-33, 41], [-29, 56], [-10, 34], [0, 39], [15, 16], [17, -14], [25, 93], [50, 121], [18, 35], [12, 46], [-2, 31], [-11, 25], [-46, 58], [0, 48], [5, 53], [13, 32], [5, 6], [62, -1], [-24, 17], [-48, 48], [1, 17], [11, 45], [-5, -5], [-10, -20], [-20, -50], [-12, -12], [-34, -12], [-6, -24], [-6, -7], [-17, -2], [-5, -23], [-4, -2], [-5, 25], [0, 41], [7, 38], [13, 29], [49, 67], [-24, -21], [-55, -62], [-28, -40], [-7, -14], [-3, -12], [0, -13], [13, -72], [-4, -33], [-47, -219], [-9, -22], [-8, -11], [-8, -3], [-23, 4], [-11, 17], [0, 18], [5, 28], [19, 104], [9, 29], [13, 27], [27, 47], [0, 3], [-19, -9], [-8, 3], [-5, 9], [3, 139], [15, 46], [6, 67], [13, 57], [15, 42], [12, 53], [17, 24], [5, 36], [19, 39], [15, 41], [-8, -4], [-96, -106], [-25, -20], [-33, 5], [-26, 12], [-20, 26], [-9, 48], [-24, 1], [-21, 9], [0, 6], [27, 27], [44, 9], [41, 42], [-37, 29], [3, 9], [32, 24], [40, 82], [9, 75], [-20, 35], [-7, 23], [-38, 26], [-7, 33], [5, 18], [12, 18], [19, 14], [30, 14], [-27, 14], [-10, 17], [-8, 24], [0, 15], [14, 63], [8, 26], [16, 33], [72, -2], [8, 15], [8, 1], [37, -14], [-6, 15], [-60, 79], [-5, 15], [17, 42], [1, 19], [-2, 21], [5, 15], [19, 8], [58, -1], [14, 7], [-6, 21], [-14, 27], [-2, 22], [3, 20], [1, 41], [2, 17], [14, 27], [11, 8], [15, 5], [32, -9], [12, -11], [14, -26], [10, 3], [40, 27], [12, 4], [16, -32], [68, 26], [91, 11], [55, 17], [58, 6], [54, 19], [57, -9], [2, -11], [-3, -15], [-14, -42]], [[49186, 85680], [-3, -2], [-10, 11], [-17, 38], [27, 7], [12, -5], [-5, -16], [-4, -33]], [[49120, 85710], [-16, -7], [-15, 0], [-25, 33], [-9, 25], [2, 16], [10, 5], [24, -8], [12, -28], [1, -18], [3, -7], [15, -7], [-2, -4]], [[49150, 85846], [-3, -14], [21, 0], [30, -12], [19, -2], [15, -15], [-8, -28], [-10, -8], [-10, -1], [-36, 28], [-48, -12], [-10, 4], [-6, 7], [-2, 10], [0, 20], [-3, 6], [-17, -19], [-8, 2], [-4, 9], [-2, 19], [2, 26], [10, 38], [17, 8], [26, -5], [29, -21], [9, -13], [0, -11], [-11, -16]], [[49291, 85962], [-31, -1], [16, 34], [19, 9], [36, -4], [-6, -15], [-34, -23]], [[49241, 85936], [-24, -14], [-10, 12], [-2, 37], [-29, 16], [-14, 10], [-10, 18], [2, 6], [19, 8], [32, -34], [13, -28], [23, -8], [3, -4], [-3, -19]], [[49636, 86714], [6, -40], [14, 10], [22, -39], [11, 0], [18, 16], [-4, -36], [-18, -101], [-6, -17], [-3, -31], [-4, -6], [-6, -61], [-12, -21], [-11, -48], [-4, -5], [-16, 19], [16, 74], [6, 43], [-4, 22], [-9, 20], [-24, 1], [-20, -9], [-4, 12], [-1, 16], [-5, 5], [-27, -1], [-7, 4], [-6, 15], [-1, 12], [25, 9], [22, -4], [34, 24], [-21, 78], [-28, 7], [-6, 8], [5, 13], [15, 7], [24, 40], [14, 6], [17, -1], [-2, -41]], [[49710, 86701], [-7, -7], [-27, 59], [20, 67], [24, -2], [4, -18], [-2, -16], [-13, -2], [-1, -5], [4, -31], [0, -36], [-2, -9]], [[49784, 86873], [0, -7], [-14, -49], [0, -18], [-23, 2], [-4, 5], [-4, 28], [3, 30], [3, 8], [7, 3], [7, -6], [12, 15], [6, 0], [7, -11]], [[62066, 75522], [0, 11], [-2, 17], [-8, 12], [-12, 8], [-23, -3], [-20, 8], [-15, 21], [-3, 17], [8, 13], [-6, 11], [-25, 26], [-42, 66], [-24, 15], [-9, 41], [-9, 9], [-20, 4], [-21, -4], [-5, -5], [-6, -7], [-17, -51], [-11, -18], [-29, 9], [-23, 12], [-19, 6], [-37, 5], [-43, 1], [-28, -37], [-12, 5], [-22, 18], [-35, 15], [-18, 11]], [[61530, 75758], [53, 108], [16, 65], [1, 39], [0, 49], [-27, 102], [-24, 144], [-25, 151], [-19, 45], [-81, 52], [-19, 59], [-62, 77], [-87, 33], [-17, 14], [-76, 96], [-59, 62]], [[61104, 76854], [13, 37], [17, 40], [18, 9], [54, -15], [49, -18], [36, 13], [42, -31], [39, -36], [39, -25], [77, -24], [28, -33], [34, -33], [130, -16], [10, 5], [10, 5], [44, 12], [38, -3], [41, -39], [26, 2], [28, 6], [36, -21], [28, -24], [3, -24], [25, -35], [71, -53], [59, -30], [18, -22], [44, -35], [5, -11], [-1, -14], [-13, -26], [-3, -23], [6, -14], [18, -13], [37, -3], [13, 17], [27, 12], [27, 22], [36, 28], [49, 26], [20, 0], [19, -8], [13, -14], [22, -54], [22, 75], [6, 6], [20, -15], [35, -21], [25, -11], [13, -15], [38, -69], [61, 4], [25, -11], [14, -11], [6, -13], [-10, -68], [-15, -71], [1, -17], [24, -26], [33, -29], [18, -22], [12, -20], [27, -16], [31, -9], [14, -2], [16, -17], [39, -32], [6, -8]], [[49302, 80353], [-10, -38], [-26, 13], [-2, 10], [29, 22], [6, 0], [3, -7]], [[49980, 58246], [18, -35], [4, -20], [-6, -75], [-13, -52], [-9, -49], [2, -24], [7, -25], [27, -38], [14, -25], [17, -38], [19, -37], [32, -48], [13, -9], [0, -13], [-5, -19], [-3, -179], [-2, -47], [-3, -23], [-3, -67], [-3, -10], [-6, 1], [-6, -2], [-1, -14], [2, -13], [20, -10], [-5, -10], [-14, -9], [-7, -20], [3, -24], [-8, -18], [3, -12], [5, -10], [8, 4], [23, 31], [9, 3], [12, -6], [22, -47], [0, -24], [-8, -79], [-9, -61], [-2, -81], [10, -46], [-2, -25], [-10, -21], [-22, -32], [2, -21], [10, -40], [19, -45], [37, -55], [19, -72], [1, -29], [-12, -29], [-13, -25], [-4, -37], [6, -241], [-30, -104], [0, -30], [3, -34], [8, -21], [15, -6], [12, -20], [-4, -74], [-7, -74], [-1, -37], [-4, -17], [-11, -14], [-4, -23], [3, -29], [-3, -22], [7, -28], [13, -35], [21, -86], [9, -7], [3, -18], [-2, -17], [8, -38], [24, -39], [25, -33], [20, -5], [5, -29], [13, -38], [10, -17], [15, -11], [13, -6], [0, -32]], [[50329, 55350], [-22, -22], [-16, -33], [-12, -50], [-16, -55], [-55, -29], [-22, -1], [-114, -1], [-108, -109], [-61, -39], [-38, -61], [-51, -44], [-36, -53], [-74, -25], [-122, -83], [-38, -33], [-38, -58], [-63, -68], [-24, 1], [-49, 63], [-37, 32], [-90, 49], [-67, 18], [-33, 21], [-8, 4]], [[49142, 54797], [19, 1]], [[46836, 58988], [-8, -15], [-8, -34], [-8, -42], [-8, -28], [3, -18], [22, -36], [30, -51], [13, -7], [14, 12], [22, 41], [18, 43], [17, 22], [20, -2], [15, -30], [20, -68], [17, -62], [3, -6], [7, -10], [9, 0], [9, 15], [7, 9], [8, 28], [34, 86], [26, 23], [9, 7], [18, 13], [30, -21], [44, -35], [53, -42], [18, -8], [11, 8], [16, 58], [19, 22], [28, 27], [23, 13], [13, 2], [5, 16], [2, 24], [-2, 24], [-15, 44], [0, 13], [8, 8], [18, 6], [24, -4], [26, -19], [22, -27], [12, -33], [13, -69], [10, -67], [27, -108], [0, -66], [-1, -77], [12, -15], [13, -6], [6, -11], [13, -59], [12, -18], [14, -4], [28, -38], [17, -14], [3, -12], [-1, -15], [-7, -20], [-10, -14], [-16, -26], [-13, -34], [-27, -81], [-1, -16], [6, -10], [11, -2], [12, 5], [24, 30], [20, -11], [19, -22], [6, -24], [2, -31], [-4, -40], [-1, -44], [7, -76], [9, -76], [10, -28], [62, -67], [6, -25], [3, -28], [-4, -38]], [[47642, 56197], [-10, 15], [-11, 23], [-4, 30], [-8, 6], [-15, 0], [-13, -17], [-6, -30], [-1, -36], [-2, -28], [-8, -16], [-17, -43], [-7, -40], [-10, -35], [-13, 2], [-7, 5], [-4, -9], [-21, -19], [-18, -6], [-5, 20], [-10, 16], [-12, 32], [-14, 25], [-25, 18], [-10, -8], [-12, 2], [-8, 10], [1, 16], [13, 39], [8, 35], [4, 39], [0, 37], [-7, 53], [-12, 41], [-2, 24], [1, 34], [-3, 32], [-4, 17], [-1, 32], [-4, 28], [-7, 11], [-4, 49], [2, 49], [-10, 19], [-16, 14], [-9, 19], [-6, 22], [-5, 6], [-5, -1], [-5, -14], [-5, -3], [-9, 47], [-4, 2], [-6, -11], [-72, -51], [-3, 20], [-6, 23], [-14, 8], [-24, -17], [-14, -3]], [[47143, 56730], [-21, 6], [-10, -8], [-28, -68], [-17, -27], [-13, 2], [-14, 6], [-9, -5], [-7, 8], [3, 17], [7, 21], [13, 74], [35, 75], [1, 16], [-15, 44], [-14, 60], [-1, 64], [-2, 46], [-31, 13], [-6, 8], [-1, 15], [8, 42], [10, 38], [1, 17], [-2, 14], [-19, 41], [-29, 75], [-28, 84], [-23, 72], [-19, 33], [-18, 47], [-7, 30], [-19, 11], [-55, -1], [-66, 0], [-56, -1], [-3, -41], [-61, -27], [-38, 32], [-42, -19], [-20, -20], [-6, -44], [-10, -47], [-9, -19], [-3, -22], [-6, -19], [-8, -22], [-9, -45], [-20, -64], [-21, -41], [-35, -22], [-11, -67], [-8, -25], [-14, -20], [-15, -13], [-13, 8], [-16, 5], [-16, -12]], [[46307, 57055], [-3, 17], [10, 53], [-8, 28], [-28, 55], [-2, 27], [-9, 34], [-36, 71], [-35, -4], [10, 59], [-1, 79], [-11, 43], [3, 44], [-7, -2], [-11, -31], [-18, 10], [-38, 47], [-18, 46], [-3, 38], [-4, 15], [-11, -8], [-24, 1], [-71, 69], [-51, 174], [-1, 39], [7, 67], [-1, 19], [-23, -45], [-5, 30], [-18, 70], [-5, 40], [-17, 17], [-14, 4], [-10, -14], [-14, -81], [-11, 0], [-10, 18], [2, 61]], [[45821, 58145], [12, 30], [15, 46], [46, 192], [17, 44], [10, 15], [22, 2], [42, 25], [35, 43], [17, 17], [40, -4], [47, 7], [61, 41], [1, 57], [-1, 72], [-2, 29], [-21, 25], [-13, 23], [-11, 28], [-13, 21], [0, 21], [17, 18], [10, 10], [25, -1], [9, 11], [6, 18], [7, 47], [2, 49], [-16, 66], [1, 46]], [[46186, 59143], [90, -6], [9, -5], [40, -9], [25, 1], [15, -4], [7, -11], [-1, -19], [-5, -26], [5, -27], [14, -7], [7, 8], [7, 13], [9, 11], [11, -7], [26, -40], [23, -10], [26, -22], [24, -11], [21, 1], [16, -22], [30, -7], [39, 28], [30, 12], [43, 3], [23, -9], [65, 23], [32, -5], [19, -8]], [[45343, 59368], [-2, 49], [-15, 111], [21, 48], [22, 29], [15, -23], [5, -45], [12, -31], [39, -20], [40, 14], [24, -6], [-1, 25], [8, 33], [48, 15], [50, 9], [52, 20], [41, -1], [12, 6], [-3, 8], [-36, 10], [-78, -23], [-80, -7], [-60, -60], [-24, 6], [-25, 60], [-9, 74]], [[45399, 59669], [70, 6], [86, -2], [93, -3], [43, -1], [23, 81], [44, 36], [45, 13], [23, -4], [25, -12], [47, -66], [29, -16], [25, -15], [18, -32], [28, -33], [22, -8], [13, 4], [22, 13], [15, 10], [47, 4], [35, -37], [7, -41], [-6, -42], [-46, -22], [-65, -35], [-53, 19], [-65, 48], [-38, 34], [-16, 14], [-23, 21], [-21, 24], [-20, 15], [-15, 10], [-11, -13], [-6, -28], [-9, -33], [-12, -19], [-54, -11], [-49, -12], [-26, -10], [-17, -8], [-6, -97], [-55, 1], [-54, 1], [-57, -1], [-60, -2], [-16, -20], [-16, -32]], [[45584, 58227], [-3, -16], [-16, 2], [4, 16], [-4, 5], [5, 49], [2, 7], [8, -18], [1, -8], [3, -37]], [[45523, 58213], [-22, -8], [-10, 28], [-2, 11], [12, 10], [5, 0], [9, 21], [11, 14], [5, 5], [5, -1], [4, -46], [-5, -20], [-12, -14]], [[45631, 58303], [0, -23], [-11, 4], [-4, 7], [7, 43], [11, 19], [12, -3], [4, -6], [-2, -16], [-6, -14], [-11, -11]], [[45582, 58447], [-13, -18], [-13, 9], [-7, 16], [1, 29], [15, 41], [14, -6], [3, -71]], [[45679, 58488], [-2, -13], [-16, 11], [23, 49], [15, 8], [-1, -37], [-11, -8], [-8, -10]], [[45559, 58687], [-15, -70], [-17, 7], [-13, 42], [-1, 18], [36, 6], [10, -3]], [[45821, 58145], [-14, 40], [11, 76], [-12, -1], [-23, -61], [-12, -2], [2, 72], [-13, 3], [-15, -5], [-21, 37], [-2, 28], [1, 40], [13, 25], [-2, 10], [-12, 3], [-14, -6], [-8, 11], [14, 51], [49, 43], [24, 5], [26, 9], [-14, 37], [-30, 15], [-24, -10], [-12, -27], [-15, -5], [-25, 63], [1, 31], [9, 38], [14, 16], [57, 0], [22, 21], [9, 4], [8, 19], [-2, 12], [-9, 1], [-21, -25], [-69, 10], [-22, -15], [-38, -58], [-47, -31], [-34, 13], [11, 77], [-5, 10], [-10, 13], [-50, -25], [-38, 35], [-15, 43], [3, 53], [17, 36], [3, 18], [-19, 3], [-34, -22], [-77, 86]], [[45357, 58959], [16, 6], [37, -9], [29, 11], [21, 18], [28, 25], [27, 9], [85, -12], [73, 31], [55, 56], [50, 53], [66, -1], [70, 0], [100, -1], [79, -1], [93, -1]], [[52664, 52437], [2, 13], [-25, 35], [-18, 3], [-16, 11], [13, 90], [17, 80], [25, 61], [13, 14], [4, 30], [20, 99], [25, 80], [-8, 81], [6, 136]], [[52426, 54008], [7, -3], [41, 2], [12, -30], [-1, -45], [-43, -131], [-8, -55], [-17, -46], [-14, -4], [-49, 27], [-9, 17], [-3, 22], [5, 52], [4, 16], [23, 10], [8, 9], [13, 56], [4, 51], [10, 39], [17, 13]], [[56625, 72312], [19, -4], [26, 1], [6, 3], [16, 34], [20, 1], [9, -34], [-20, -15], [-5, -9], [4, -7], [16, -13], [21, 5], [1, -26], [4, -22], [11, -13], [11, -2], [26, 4], [25, 8], [25, 17], [26, 9], [79, -9], [28, -36], [53, -5], [50, -19], [26, 13], [45, 12], [7, -13], [-6, -82], [3, -24], [13, -11], [12, 5], [16, 27], [37, 21], [39, 0], [33, 54], [10, 3], [-6, -26], [-5, -63], [-7, -37], [-3, -29], [-22, -15], [-33, -3], [-61, 6], [-60, -10], [-113, -28], [-113, -14], [-15, 9], [0, 37], [-3, 25], [-7, 18], [-35, 15], [-33, 26], [-130, 36], [-31, 14], [-50, -8], [-18, 1], [-13, 13], [-9, 22], [-4, 69], [7, 69], [10, 18], [5, -21], [13, -9], [12, 21], [0, 31], [6, 29], [9, -12], [7, -45], [16, -12]], [[57548, 72272], [-10, -32], [-11, 27], [5, 31], [-13, 50], [24, 74], [0, 36], [18, 19], [-4, -62], [-14, -49], [14, -40], [7, -46], [-16, -8]], [[56403, 72689], [-3, -25], [-28, 17], [-8, 26], [-2, 57], [8, 28], [5, 9], [13, -32], [27, -47], [-12, -33]], [[57734, 72539], [-21, -12], [-6, 2], [-9, 26], [12, 65], [-11, 41], [-1, 18], [17, 24], [11, 36], [27, 40], [72, 46], [17, 5], [-1, -37], [-24, -92], [-21, -46], [6, -37], [-34, -11], [-34, -68]], [[57078, 72806], [-13, -30], [-18, 11], [7, 11], [5, 15], [0, 22], [-5, 13], [3, 5], [17, -22], [4, -25]], [[57350, 72917], [-22, -14], [-14, -29], [-17, 21], [0, 28], [18, -9], [13, 16], [-4, 18], [15, -9], [11, -22]], [[57738, 72899], [-6, -9], [-14, 26], [0, 14], [14, 16], [7, 3], [2, -10], [0, -23], [-3, -17]], [[56815, 73020], [0, -34], [-1, -12], [-57, -16], [5, 38], [3, 13], [19, -18], [7, 9], [3, 10], [21, 10]], [[57050, 72968], [-5, -9], [-21, 37], [-8, 21], [10, 18], [31, -42], [-7, -25]], [[57485, 72999], [-8, -1], [10, 28], [29, 38], [43, 34], [14, 3], [24, -21], [-44, -34], [-12, -18], [-32, -4], [-24, -25]], [[57183, 73035], [-25, -4], [-8, 4], [15, 10], [11, 10], [5, 13], [25, 23], [16, 29], [18, -20], [-23, -13], [-34, -52]], [[56866, 73111], [-5, -3], [-7, 25], [-2, 22], [3, 13], [10, 2], [13, -43], [-12, -16]], [[57505, 73132], [-28, -8], [5, 46], [-13, 36], [21, -20], [14, -24], [7, -5], [-2, -15], [-4, -10]], [[57021, 73195], [-22, -44], [-18, 5], [-8, 20], [12, 42], [24, 24], [11, -7], [-1, -31], [2, -9]], [[57096, 73137], [-25, -22], [-17, 32], [-10, 50], [46, 72], [11, -6], [6, -19], [-1, -65], [-10, -42]], [[56812, 73228], [-11, -9], [-17, 13], [5, 32], [11, 13], [13, -10], [2, -14], [-3, -25]], [[56787, 73354], [-16, -17], [6, 40], [-8, 21], [7, 17], [10, 15], [5, -15], [9, -24], [-13, -37]], [[56928, 73440], [-1, -60], [-8, 1], [-4, 9], [0, 23], [3, 36], [10, -9]], [[57056, 73397], [-27, -3], [2, 44], [10, 11], [31, -22], [-1, -14], [-15, -16]], [[57230, 73461], [-13, -2], [4, 23], [25, 40], [34, 2], [32, 20], [7, 0], [-15, -31], [-25, -30], [-49, -22]], [[57015, 73501], [-10, -37], [-18, 6], [-29, 40], [-10, 18], [-5, 18], [12, 2], [14, -19], [37, -10], [9, -18]], [[56765, 73488], [-19, -28], [-3, 42], [12, 44], [16, 3], [6, -19], [-12, -42]], [[57451, 73623], [34, -19], [9, 2], [16, -6], [5, -35], [-22, -6], [-37, -32], [-15, 7], [-19, 28], [-30, 3], [-9, 8], [16, 33], [29, 16], [23, 1]], [[55802, 73620], [29, -56], [-23, 14], [-26, -39], [-31, 45], [-20, 46], [-4, 18], [20, 43], [19, -44], [22, -7], [14, -20]], [[56942, 73594], [-9, -39], [-21, 45], [-24, 31], [-9, 27], [-14, 16], [-4, 36], [17, 15], [8, 1], [18, -44], [28, -5], [-2, -27], [8, -35], [4, -21]], [[56541, 73689], [-11, -14], [-12, 1], [-9, 5], [-4, 11], [5, 6], [7, 23], [6, 6], [9, -3], [5, -9], [4, -26]], [[55725, 73953], [4, -67], [19, -12], [26, -60], [-2, -31], [-6, -10], [-43, 28], [-10, -13], [-13, 5], [-7, 34], [1, 11], [-8, 20], [-5, 9], [-17, -26], [-11, -5], [0, 24], [16, 66], [7, 11], [13, -22], [10, 8], [8, 36], [1, 36], [3, 11], [14, -53]], [[55766, 73922], [-14, -6], [-17, 55], [-7, 38], [7, 2], [7, -5], [8, -14], [0, -15], [3, -15], [7, -19], [6, -21]], [[57248, 73858], [-27, -33], [-29, 47], [-5, 15], [21, 19], [11, 30], [-8, 36], [-31, 53], [-1, 38], [46, 16], [27, -33], [14, -3], [-5, -31], [2, -10], [2, -96], [-13, -13], [-2, -26], [-2, -9]], [[55746, 74083], [-11, -5], [-9, 3], [-9, -2], [-8, -11], [1, 45], [10, 57], [11, 33], [17, 15], [7, -26], [-1, -92], [-8, -17]], [[56854, 74198], [-30, -14], [-8, 2], [7, 18], [0, 7], [-29, 33], [4, 42], [3, 11], [22, -22], [5, -37], [26, -40]], [[56504, 74284], [15, -62], [15, -21], [31, -25], [15, -4], [52, -45], [62, -8], [8, -13], [7, -35], [13, -27], [3, -22], [-7, -23], [9, -72], [16, -68], [23, -33], [29, -10], [28, 1], [7, -14], [-3, -59], [-12, -24], [-9, -5], [-9, 6], [-7, 14], [-8, 7], [-16, 1], [-12, 24], [-29, 33], [-5, 19], [-1, 31], [-13, 22], [-11, 43], [-11, 11], [-6, 22], [-1, 9], [-43, 6], [-35, 0], [-30, 24], [-9, 63], [-18, 17], [-13, 18], [-11, 25], [-29, 45], [-31, 39], [-30, 25], [-32, 16], [-26, -19], [-15, 4], [-3, 13], [33, 27], [44, 50], [31, 16], [15, 2], [29, -44]], [[56605, 74374], [-12, -20], [-20, 9], [-20, 65], [52, -54]], [[56635, 74399], [-13, -7], [13, 46], [23, 24], [-9, -38], [-14, -25]], [[57336, 74498], [-5, -34], [38, -57], [13, -36], [5, -35], [-3, -10], [-15, 19], [-12, 6], [4, -25], [13, -21], [-22, -13], [-22, 1], [-64, 30], [-14, 32], [38, 48], [8, 19], [-27, -2], [-29, -57], [-46, 25], [-14, 23], [-4, 12], [19, 51], [32, -2], [17, 11], [21, 16], [1, 24], [50, 6], [18, -31]], [[55577, 74557], [6, -32], [-35, 20], [-25, 29], [-21, 71], [-45, 81], [0, 24], [17, 18], [36, 12], [15, -13], [9, -13], [3, -16], [-20, -31], [-5, -14], [16, -28], [0, -11], [7, -55], [8, -20], [20, -16], [14, -6]], [[57065, 74874], [-10, -19], [-8, -34], [-4, -47], [-16, -2], [-10, 10], [-3, 18], [-1, 23], [-7, -1], [-6, -25], [-5, -11], [-16, -2], [-18, 15], [1, 33], [-4, 38], [2, 14], [49, 3], [14, -28], [18, 16], [7, 18], [21, 11], [-4, -30]], [[57134, 75130], [-31, -15], [-35, 47], [34, 19], [15, -14], [11, -16], [6, -21]], [[56881, 75238], [-35, -20], [-37, 39], [1, 23], [19, 47], [10, 14], [27, -4], [15, -32], [4, -15], [-5, -26], [1, -26]], [[57232, 75303], [-7, 24], [-43, 43], [-100, 25], [-48, 32], [-21, -6], [-40, 36], [-28, -16], [-59, -63], [-31, 7], [-34, 38], [-22, 7], [-26, -20], [-42, -73], [-42, -36], [-38, 14], [-51, 0], [-5, -41], [10, -28], [27, -48], [-13, -37], [10, -36], [18, -7], [28, 2], [50, -47], [22, -50], [14, -54], [-30, 39], [-21, 37], [-28, 14], [-40, 32], [-25, 5], [-26, -22], [-3, -25], [29, -47], [26, -29], [14, -23], [9, -52], [-5, -17], [-10, -17], [-31, 33], [-47, 116], [-66, 23], [-11, -24], [13, -61], [9, -24], [58, -67], [-5, -14], [-8, -6], [-65, 38], [-19, 58], [-4, 73], [-59, 50], [-56, 55], [-13, 53], [12, 19], [8, 38], [-31, -7], [-19, -24], [-32, -23], [-1, -39], [5, -36], [-10, -52], [-10, -90], [6, -48], [68, -136], [23, -99], [16, -37], [35, -42], [36, -76], [15, -41], [11, -65], [-30, -41], [-18, -2], [-9, 19], [13, 44], [-2, 28], [-47, 42], [-20, -15], [-22, -27], [13, -51], [14, -34], [8, -46], [28, 4], [-38, -52], [-35, -27], [-35, -1], [-23, -5], [-7, -13], [18, -10], [15, -1], [24, -28], [68, -34], [33, -42], [32, -4], [32, -78], [56, -21], [31, -79], [43, -16], [36, -29], [11, -27], [5, -50], [2, -107], [8, -79], [0, -25], [-2, -37], [-9, -19], [-14, 0], [-26, 58], [-40, 61], [-42, 73], [-12, 13], [-10, 1], [-23, -25], [-63, -19], [-29, -26], [-11, -6], [-4, -14], [14, -15], [17, -33], [0, -45], [14, -56], [18, -14], [24, 1], [13, -10], [4, -22], [14, -26], [9, -19], [-1, -13], [-66, -37], [-13, -16], [-12, -9], [-17, 18], [-1, 44], [-22, 23], [-21, 21], [-25, 9], [-21, 30], [-14, -25], [11, -85], [24, -60], [40, -158], [18, -93], [4, -46], [-9, -75], [19, -56], [14, -57], [-15, 2], [-13, 20], [-21, 24], [-42, 92], [-15, 57], [-17, 4], [-30, -8], [-34, -122], [1, -70], [-18, 17], [-14, 22], [1, 76], [-1, 32], [-40, 104], [-19, 12], [-8, 35], [-15, 38], [-19, -8], [-16, -15], [-4, -56], [-2, -51], [-11, -38], [-43, 72], [-43, 126], [-1, 68], [31, 63], [-4, 45], [-30, 89], [-43, 57], [-24, 17], [-11, 60], [-23, 31], [-19, 15], [-4, 22], [6, 16], [45, 62], [27, 97], [13, 5], [27, -23], [31, 6], [25, 57], [21, 31], [36, -4], [80, -76], [87, -44], [43, -38], [25, -38], [13, -8], [20, -5], [-1, 28], [-6, 25], [17, 14], [46, -1], [9, 14], [8, 21], [-9, 24], [-16, 12], [-16, 3], [-11, 8], [-17, -8], [-28, 19], [-14, 16], [-8, 16], [-47, 32], [-45, 54], [-10, -31], [-19, -16], [-25, -3], [-73, 35], [-45, -27], [-24, -6], [-19, -1], [-23, -12], [-26, -7], [-23, 50], [-9, 39], [-7, 7], [-1, -37], [-7, -29], [-33, -16], [-20, 23], [-15, 68], [-18, 87], [-33, 70], [-27, 18], [-3, 39], [3, 30], [32, 8], [50, -32], [11, 6], [11, 15], [-2, 33], [-7, 29], [-14, 2], [-10, -4], [-31, 6], [-39, -16], [-19, 15], [-6, 19], [-33, 46], [-29, 62], [-46, 41], [-31, 126], [-25, 55], [-28, 40]], [[55823, 75374], [38, 3], [13, 4], [49, 3], [22, 23], [15, -2], [33, -20], [14, 15], [42, 32], [42, 90], [18, 14], [40, 5], [13, 10], [15, -2], [45, -18], [26, -3], [30, 13], [34, 22], [8, 77], [8, 11], [21, 3], [16, 0]], [[57311, 75873], [25, -12], [14, -19], [9, -17], [14, -15], [10, -4], [8, -51], [4, -63], [-6, -28], [-18, -6], [-57, -60], [-2, -55], [1, -27], [1, -19], [6, -16], [0, -23], [-6, -24], [-25, -41], [-18, -33], [-19, -44], [-11, -6], [-9, -7]], [[32856, 58762], [-18, -2], [7, 21], [2, 37], [10, 44], [15, 30], [15, -8], [-6, -98], [-25, -24]], [[37148, 86855], [-32, -70], [-32, 15], [-16, 31], [-31, 15], [-34, -4], [-1, 12], [110, 74], [53, 20], [-4, -31], [-10, -27], [-3, -35]], [[39713, 89591], [-43, 0], [-14, 45], [4, 50], [49, 15], [26, -34], [-10, -50], [-12, -26]], [[35829, 91907], [-43, -20], [-9, 5], [-9, 15], [-22, 70], [-7, 34], [5, 41], [-8, 29], [39, 35], [32, 5], [43, -8], [72, -35], [-5, -11], [-16, -18], [-44, -24], [-15, -53], [-3, -27], [2, -20], [-12, -18]], [[35352, 92133], [93, -47], [98, -32], [9, -15], [8, -22], [2, -12], [-3, -11], [-6, -10], [7, -12], [21, -16], [2, -19], [-25, -31], [-34, -35], [-183, -72], [-64, -13], [-160, -49], [-49, 2], [-11, 2], [-30, 22], [-42, 20], [-19, 16], [-17, 23], [7, 14], [30, 5], [44, 0], [65, 16], [-18, 15], [-17, 9], [-12, 19], [-27, -3], [-20, 11], [-38, 7], [-101, 7], [-66, 19], [-20, 11], [-17, 20], [-15, 28], [22, 109], [15, 27], [34, 9], [84, -24], [11, 11], [-92, 40], [-33, 23], [-10, 19], [-6, 28], [0, 16], [4, 16], [8, 17], [23, 22], [92, 35], [102, -12], [175, -43], [22, -10], [54, -37], [103, -113]], [[35645, 92658], [-37, -2], [-86, 11], [-7, 6], [-1, 13], [12, 37], [38, 5], [45, -20], [49, -29], [6, -13], [-19, -8]], [[42935, 92696], [10, -34], [1, -16], [-2, -14], [-6, -9], [-13, -9], [25, -22], [7, -15], [2, -12], [-16, -24], [-110, -31], [-31, -15], [-38, -37], [-47, -31], [-16, 0], [-18, 33], [-74, 24], [-139, -13], [-162, -30], [-58, -14], [-29, 7], [-9, 12], [0, 15], [19, 47], [8, 12], [37, 15], [25, 41], [-8, 44], [10, 62], [25, 10], [64, -22], [41, -5], [73, -3], [99, 8], [79, 25], [144, 71], [25, -1], [19, -25], [13, -12], [43, -20], [7, -12]], [[35129, 92765], [-26, -4], [-75, 29], [-12, 11], [-5, 14], [3, 16], [24, 30], [45, 43], [32, 8], [20, -27], [20, -37], [2, -18], [-1, -22], [-5, -19], [-9, -15], [-13, -9]], [[34717, 93773], [-39, -39], [-32, -23], [-70, -66], [-12, -3], [-18, 9], [-15, 18], [-26, 4], [-9, 11], [-4, 9], [-12, 6], [-18, 3], [-30, -7], [-27, 7], [-21, 29], [38, 20], [24, 17], [91, 6], [25, -7], [16, 0], [25, 4], [54, 21], [8, 10], [48, -12], [4, -17]], [[44999, 95280], [22, -61], [10, -56], [35, -35], [73, 5], [29, -66], [-53, -26], [-214, 10], [-88, -5], [-61, 41], [2, 71], [8, 71], [61, 41], [51, -36], [62, 26], [63, 20]], [[44838, 95646], [-32, -16], [-108, 239], [0, 87], [7, 66], [49, 5], [42, -36], [20, -137], [22, -208]], [[30092, 96385], [-99, -5], [-97, 22], [-34, 17], [2, 27], [14, 9], [53, 9], [44, 2], [29, -4], [70, -16], [50, -16], [33, -5], [-9, -24], [-56, -16]], [[45012, 96567], [-54, 0], [-20, 15], [13, 27], [75, 85], [25, 7], [37, -9], [11, -44], [-24, -44], [-63, -37]], [[44723, 96758], [-37, -20], [-25, 61], [-22, 81], [-5, 92], [57, 45], [29, 11], [20, -11], [-5, -40], [0, -82], [19, -55], [-31, -82]], [[45107, 97825], [-117, -66], [-174, 5], [-103, 31], [-30, 45], [40, 51], [125, 41], [156, 25], [142, -15], [20, -51], [-59, -66]], [[44815, 98989], [-29, -18], [-73, 7], [-94, 52], [-62, 43], [-5, 50], [32, 22], [50, 4], [69, -43], [71, -58], [41, -59]], [[37537, 99126], [-56, -10], [-118, 61], [-186, 61], [-164, 40], [-154, 107], [-12, 38], [21, 33], [135, 5], [108, 15], [274, -66], [138, -56], [46, -45], [-7, -92], [-25, -91]], [[41679, 99979], [267, -35], [141, -40], [30, 1], [191, -15], [182, -19], [302, -51], [42, -16], [-32, -14], [-75, -9], [-386, -16], [-700, -21], [-401, -39], [-127, -2], [-11, -59], [54, -3], [89, 8], [314, 59], [117, 9], [219, -5], [285, -22], [114, 8], [205, -6], [239, 17], [283, 37], [77, -82], [104, -81], [83, 9], [70, -5], [24, -26], [39, -12], [80, 6], [245, -23], [168, -42], [63, -19], [30, -28], [18, -22], [-27, -28], [-105, -49], [-133, -45], [-179, -34], [-207, -22], [-1588, -73], [-54, -17], [-31, -44], [21, -57], [74, -9], [173, 32], [300, 31], [221, -2], [527, -26], [155, -68], [82, -105], [183, 24], [39, 18], [29, 31], [22, 33], [18, 36], [19, 24], [21, 13], [45, 11], [105, 13], [274, 13], [66, -4], [48, -49], [10, -28], [3, -38], [-1, -45], [-6, -55], [-24, -54], [-76, -94], [-61, -52], [-66, -37], [-126, -84], [-44, -23], [-138, -99], [-35, -45], [-2, -34], [24, -6], [40, 31], [15, 23], [26, 23], [205, 62], [44, 17], [133, 74], [86, 28], [70, 29], [37, 20], [206, 146], [107, 43], [112, 0], [20, -73], [135, -12], [59, 3], [94, -18], [41, -14], [70, -8], [73, -17], [63, 18], [19, 12], [62, 54], [83, 47], [77, 59], [26, 15], [41, 13], [42, 5], [115, 28], [29, 2], [62, -9], [273, -5], [150, -14], [208, -40], [145, -21], [67, -20], [97, -41], [79, -43], [37, -13], [-2, -13], [-27, -19], [-195, -66], [-64, -45], [-185, -83], [-90, -29], [-98, -11], [-109, -2], [-71, -12], [-10, -12], [50, -34], [22, -25], [-3, -22], [-53, -32], [-20, -8], [-192, -24], [-97, -41], [-126, -5], [-89, 5], [-123, -44], [48, -36], [44, -16], [137, -32], [1, -19], [-66, -38], [-89, -44], [-105, -31], [-40, -5], [-50, 8], [-46, -2], [-101, -14], [-97, -2], [-173, 20], [-93, 23], [-49, 8], [-62, -2], [-24, -9], [-98, -56], [-48, -38], [-31, -39], [-13, -42], [5, -46], [12, -32], [19, -17], [23, -10], [41, -6], [89, 6], [35, -3], [11, -10], [19, -29], [-3, -28], [-17, -39], [-12, -45], [-9, -52], [5, -29], [36, -6], [17, 2], [19, -9], [23, -21], [17, -22], [11, -23], [-6, -19], [-23, -15], [-52, -17], [-128, -33], [-13, -10], [-10, -21], [-7, -30], [-16, -28], [-23, -25], [-22, -15], [-42, -6], [-54, -1], [-61, -14], [-144, -84], [-2, -9], [54, -27], [-2, -24], [-67, -101], [-18, -50], [-14, -68], [-24, -58], [-33, -47], [-33, -55], [-31, -61], [5, -47], [41, -33], [56, 26], [69, 86], [74, 38], [81, -12], [70, -17], [90, -34], [76, -21], [65, -28], [26, -23], [27, -33], [1, -20], [-48, -12], [-16, 4], [-119, 54], [-58, 14], [-77, -16], [-67, -25], [60, -99], [65, -45], [117, -21], [62, -22], [44, -28], [35, -14], [47, 6], [64, 28], [88, 1], [40, -13], [28, -26], [13, -47], [-3, -70], [-9, -52], [-16, -35], [-32, -47], [-27, -9], [-37, 3], [-35, 9], [-32, 17], [-49, 13], [-98, 14], [-98, 31], [-56, 8], [-117, -4], [-127, -20], [-5, -25], [-182, -89], [-37, 1], [-50, 30], [-71, 30], [-41, 0], [-62, -38], [-15, -14], [1, -14], [45, -32], [18, -7], [24, -6], [80, -8], [36, -8], [33, -100], [52, -61], [23, -13], [19, -5], [65, 3], [83, 20], [28, -16], [61, -20], [36, -6], [43, 1], [49, -7], [67, -57], [-26, -72], [42, -57], [67, -59], [15, -21], [7, -39], [1, -26], [5, -24], [9, -21], [9, -42], [9, -62], [-2, -51], [-15, -39], [-27, -29], [-42, -18], [-34, 5], [-26, 27], [-37, 29], [-48, 31], [-80, 3], [-117, -90], [-52, -5], [-42, -9], [-46, -39], [-66, -24], [-59, 9], [-103, 46], [37, -30], [54, -36], [33, -19], [25, -4], [27, 4], [39, 15], [88, 41], [23, 6], [20, -3], [16, -12], [19, -35], [21, -58], [-3, -49], [-26, -41], [-23, -26], [-18, -12], [0, -9], [49, -10], [69, 53], [22, 66], [32, 76], [56, 25], [64, -25], [52, -71], [72, -131], [31, -14], [39, -31], [17, -39], [-4, -45], [-9, -33], [-12, -21], [-15, -13], [-27, -8], [-50, -7], [-111, 14], [-58, 0], [7, -45], [-117, -39], [-133, -15], [-125, 30], [-104, 47], [34, 65], [20, 72], [-51, 48], [-11, 1], [18, -74], [-15, -28], [-57, -35], [-40, -15], [-3, -10], [19, -8], [13, -15], [6, -23], [-7, -23], [-19, -24], [-11, -19], [-2, -16], [18, -20], [38, -22], [41, -11], [191, -5], [77, -13], [182, -53], [8, -17], [-31, -96], [-17, -92], [-35, -17], [-191, -4], [-62, -14], [-90, -42], [-87, -51], [-45, -1], [-178, 45], [-68, 29], [-147, 84], [-110, 128], [-51, -53], [-30, -26], [-32, -13], [-31, -2], [-30, 9], [-34, 20], [-56, 47], [-68, 46], [-47, 22], [-1, -6], [27, -27], [41, -32], [103, -92], [37, -23], [-4, -16], [-65, -15], [-79, -31], [-39, -24], [-60, -56], [-20, -9], [-90, -14], [-29, 3], [-67, 32], [-99, 20], [-59, 18], [-82, 33], [29, -36], [157, -55], [17, -17], [-32, -33], [-20, -12], [-37, -3], [-56, 7], [-56, -1], [-58, -10], [-24, -12], [8, -15], [13, -14], [20, -12], [18, 0], [44, 38], [33, 2], [88, -9], [89, 29], [64, 13], [48, 3], [175, 44], [37, 50], [58, 20], [131, 15], [126, -8], [65, -6], [53, -47], [70, -34], [59, -37], [69, -13], [40, -50], [111, -57], [71, -12], [44, -27], [4, -114], [5, -49], [-19, -136], [-57, -31], [11, -72], [-15, -58], [-57, 22], [-58, 38], [-139, 59], [-130, 38], [-50, 35], [-59, 26], [-81, 109], [-52, 135], [-23, 67], [-44, 4], [-57, -18], [-49, -19], [-24, -32], [-168, -45], [-61, -30], [-35, 0], [-125, -45], [50, -22], [23, -3], [51, 12], [31, 16], [114, 44], [92, 7], [33, 19], [70, 26], [48, 8], [7, -7], [5, -12], [33, -165], [-14, -44], [-38, -19], [-80, -31], [-21, -15], [23, -27], [76, 25], [50, 27], [26, -10], [43, -41], [49, -21], [123, -64], [59, -35], [82, -34], [93, -47], [24, -17], [85, -24], [18, -8], [36, -83], [29, -10], [85, -5], [-15, -32], [-83, -72], [-43, -22], [-10, -15], [4, -25], [2, -42], [17, -78], [20, 72], [13, 34], [19, 10], [17, 2], [58, 32], [58, -17], [15, -81], [8, -76], [-5, -66], [6, -101], [-2, -35], [14, -29], [14, -124], [14, -37], [-29, -33], [-88, -14], [-35, 16], [-87, -6], [0, 30], [-5, 33], [0, 24], [-6, 21], [-4, 122], [-25, -31], [-1, -24], [-7, -25], [-15, -132], [-22, -32], [-70, 8], [-69, -5], [-38, 5], [-129, 60], [-50, 54], [-44, 82], [-28, 76], [-10, 71], [-31, 57], [-51, 45], [-61, 36], [-70, 28], [-62, 35], [-53, 44], [-58, 33], [-64, 25], [-90, 10], [-133, -4], [-89, 27], [-22, -2], [-21, -14], [16, -40], [103, -18], [79, -5], [105, 3], [64, -10], [24, -23], [16, -42], [9, -59], [-21, -47], [-76, -52], [-39, -25], [-117, -47], [-39, -10], [-97, -4], [-75, 5], [-98, 23], [-55, 5], [-115, 3], [-27, -8], [30, -25], [49, -14], [34, -17], [4, -32], [-13, -48], [-13, -33], [-21, -25], [-75, -47], [-31, -15], [-141, -50], [-10, -10], [33, 2], [89, 17], [26, 0], [146, -43], [116, 2], [236, 40], [19, -1], [16, -6], [15, -15], [16, -23], [-19, -23], [-54, -22], [-84, -22], [-36, -15], [-35, -22], [-64, -53], [-19, -56], [68, -21], [30, 27], [36, 59], [33, 35], [76, 24], [94, -12], [72, 14], [148, 58], [26, 4], [217, -34], [197, -65], [103, -25], [138, -14], [246, 7], [22, -11], [-8, -23], [-14, -20], [-41, -27], [-50, -18], [-31, -5], [-27, -13], [-59, -13], [-15, -10], [21, -45], [-10, -7], [-52, -1], [-88, -29], [-72, 2], [-15, -5], [14, -10], [14, -21], [16, -32], [-9, -22], [-32, -13], [-24, -4], [-85, 18], [-14, -3], [13, -13], [7, -20], [2, -28], [-21, -23], [-43, -18], [-81, -51], [-35, -15], [-74, -12], [-15, -7], [30, -39], [-4, -16], [-49, -42], [-76, -27], [-10, -14], [-7, -38], [-6, -15], [-20, -22], [-71, -42], [-51, -21], [-25, -17], [-31, -28], [-40, -16], [-47, -1], [-45, -11], [-74, -30], [-51, -10], [-163, -53], [-76, -8], [-66, -19], [-137, -50], [-64, -16], [-45, -19], [-49, -5], [-80, 12], [-43, 1], [-27, -8], [-24, -15], [-40, -42], [-34, -4], [-112, 34], [3, -15], [29, -36], [-1, -26], [-67, -26], [-36, -7], [-52, 11], [-70, 28], [-90, 59], [-109, 89], [-53, 30], [4, -29], [12, -28], [20, -27], [5, -20], [-13, -12], [-16, -6], [-20, 0], [-3, -7], [33, -43], [25, -44], [-2, -41], [-31, -39], [-26, -23], [-22, -7], [-130, -98], [-37, -13], [-16, -12], [-14, -18], [-38, -81], [-15, -25], [-30, -32], [-13, -6], [-4, -13], [6, -21], [-9, -34], [-22, -49], [-76, -133], [-61, -125], [-27, -41], [-20, -17], [-12, 6], [-30, -3], [-15, -22], [-13, -40], [-15, -30], [-16, -21], [-122, -89], [-32, -17], [-28, 11], [-34, -4], [-70, 47], [-12, 17], [-45, 39], [2, -20], [8, -11], [6, -17], [16, -20], [34, -105], [-27, -22], [-25, -25], [-63, -42], [-68, -70], [-25, -19], [-5, 57], [3, 17], [-39, 27], [1, -19], [-4, -19], [-27, -74], [-8, -13], [-14, 3], [-30, -14], [-30, 7], [-26, 33], [-11, 18], [-47, -48], [-23, 1], [-4, -40], [-22, -37], [-30, -16], [-41, 1], [-25, -21], [-55, 23], [-13, 44], [44, 60], [12, 25], [-8, 30], [11, 39], [84, 125], [57, 63], [-3, 12], [-77, 13], [-68, 22], [-66, 8], [-29, -8], [46, -36], [66, -35], [-33, -34], [-27, -36], [-29, -97], [-19, -40], [-72, 46], [-33, 16], [21, -51], [63, -48], [4, -16], [0, -57], [-121, -50], [-125, -8], [-91, -14], [-152, -18], [-59, 0], [-5, -19], [149, -89], [22, -16], [-21, -30], [-31, -19], [-48, -65], [-25, -23], [-63, -31], [-115, 35], [-59, -16], [-57, 11], [-1, -38], [17, -27], [17, -69], [38, 6], [48, 21], [38, -52], [24, -87], [43, -45], [19, -34], [8, -33], [-27, -32], [-55, -46], [-62, -8], [4, -36], [-27, -26], [-56, 7], [-26, 18], [-28, 9], [-112, 10], [113, -70], [40, -32], [18, 19], [39, 5], [58, -18], [-10, -118], [26, -95], [3, -21], [-62, -57], [-1, -54], [-36, -15], [-40, 4], [-2, -59], [-27, -36], [5, -23], [8, -20], [-25, -38], [-22, -45], [-31, -39], [-17, 4], [-50, -3], [-60, 3], [-49, 52], [-20, 17], [-23, 11], [9, -33], [14, -20], [45, -37], [82, -46], [-2, -33], [-22, -14], [-52, -89], [-18, -1], [-23, -23], [-72, 7], [-30, 9], [-88, -5], [-30, 7], [-26, -3], [24, -25], [51, -23], [57, -23], [87, -17], [-3, -32], [-22, -27], [13, -39], [-10, -29], [-4, -34], [-20, -78], [23, -54], [26, -26], [-3, -35], [12, -55], [-38, -50], [-33, 2], [-45, -11], [-16, -22], [73, -20], [-7, -38], [-19, -46], [-21, -100], [-42, -172], [-20, -171], [-91, -141], [-32, -3], [-8, -6], [-45, 7], [-69, 33], [-54, 10], [-36, 1], [-5, -16], [30, -27], [46, -10], [37, -18], [66, -16], [23, -31], [16, -33], [-3, -19], [0, -21], [12, -117], [-31, -40], [-24, -37], [-82, 5], [-15, 13], [-79, 38], [5, -18], [57, -52], [20, -26], [-13, -5], [-23, -2], [-33, -18], [-58, 10], [3, 26], [11, 27], [-27, -4], [-29, -14], [-18, 5], [-14, -1], [-8, 13], [-12, 53], [14, 27], [48, 69], [15, 37], [-13, 16], [-34, -39], [-36, -63], [-16, -38], [-22, -8], [-55, 20], [-158, 88], [5, 53], [-2, 45], [46, 5], [34, 20], [30, 23], [33, 43], [31, 71], [-4, 6], [-90, -91], [-56, -30], [-27, -6], [-14, 14], [-44, 29], [-29, 13], [-67, 22], [-12, 11], [-19, 9], [-27, 93], [35, 113], [23, 32], [15, 38], [9, 50], [-6, 22], [-20, -8], [-9, -17], [1, -27], [-11, -18], [-80, -43], [-79, -35], [-38, -33], [-24, -26], [-19, -25], [-29, 2], [-41, -5], [-27, -16], [-41, 10], [-26, 24], [-32, 3], [-35, -12], [-25, 1], [2, -16], [16, -41], [-27, -3], [-52, -1], [-26, 11], [-20, 16], [-17, 22], [10, 28], [83, 52], [38, 30], [-24, 10], [-80, -9], [-14, 7], [-53, -4], [2, 77], [-13, 19], [-1, 9], [-18, 21], [-18, 6], [-11, 7], [-90, 18], [-12, 43], [-6, 44], [-17, 55], [-43, 14], [-24, 24], [19, 24], [8, 31], [-20, 14], [-13, 22], [2, 14], [-16, 38], [-5, 30], [18, 27], [51, 32], [17, 13], [9, 14], [58, 23], [-50, 16], [-31, 3], [-23, -8], [-21, -31], [-19, -20], [-77, -7], [-11, 11], [-5, 43], [4, 34], [32, 47], [-37, 23], [-33, 8], [-39, 22], [-35, 23], [-30, 27], [-29, 31], [-10, 4], [11, 34], [6, 27], [1, 58], [-12, 25], [26, 50], [36, 54], [78, 82], [-83, -39], [-68, -86], [-15, -4], [-5, 16], [-26, 55], [-19, 15], [-9, 17], [-39, 29], [-17, 23], [-24, 44], [-34, 52], [-48, 103], [-78, 119], [-20, 67], [25, 84], [-27, 58], [74, 27], [106, 31], [55, 25], [32, 7], [68, 5], [22, 25], [-37, -6], [-25, 3], [-2, 12], [9, 21], [6, 27], [-13, -5], [-66, -46], [-97, -37], [-76, -21], [-13, 1], [-26, -13], [-16, -3], [-11, 3], [-27, 36], [-8, 23], [49, 63], [36, 86], [48, 56], [33, 7], [57, -3], [20, -5], [-7, 33], [3, 16], [46, 20], [53, 8], [38, -6], [24, -39], [31, -72], [41, -24], [-2, 34], [-21, 45], [-8, 68], [-27, 29], [-22, 14], [-61, -7], [-36, 50], [-9, 19], [0, 24], [-37, 72], [-12, 36], [-19, 47], [-10, 3], [13, -60], [17, -42], [24, -93], [12, -38], [-16, -29], [-31, -30], [-27, -17], [-64, -21], [14, 46], [8, 45], [-32, -16], [-30, -33], [-10, -45], [-20, -41], [-57, -101], [-23, -56], [-21, -27], [-24, -8], [-21, 22], [-18, 51], [-9, 41], [-1, 104], [3, 49], [-10, 65], [-31, 153], [-7, 54], [-52, 29], [-1, 9], [-14, 31], [-10, 31], [9, 12], [12, 8], [78, 46], [58, 51], [70, 80], [28, 25], [102, 19], [45, 3], [-1, 14], [-15, 6], [-68, -4], [-92, -32], [-16, -12], [-40, -50], [-31, -27], [-87, -62], [-56, 0], [-58, 74], [-65, -14], [-44, 5], [-13, 11], [-10, 102], [36, 119], [-38, 1], [-8, 5], [-20, 27], [-13, 8], [9, 14], [94, 56], [141, 111], [61, 43], [37, 19], [29, 21], [34, 47], [11, 20], [20, 16], [40, 19], [44, 28], [72, 63], [9, 23], [-15, 5], [-34, -21], [-68, -58], [-49, -32], [-166, -145], [-71, -52], [-38, -34], [-30, -32], [-32, -23], [-33, -14], [-71, -10], [-35, -12], [-21, 9], [-10, 69], [7, 40], [-3, 40], [18, 58], [26, 40], [11, 22], [5, 16], [55, 42], [30, 18], [21, 42], [121, 15], [31, -1], [16, 5], [13, 13], [-12, 9], [-36, 7], [-97, -2], [-89, 8], [-40, 7], [-20, -4], [-32, 12], [-35, 23], [-55, 86], [22, 110], [2, 53], [69, 46], [37, 15], [53, 35], [71, 59], [84, 36], [43, 7], [36, -6], [131, -51], [68, -10], [60, 13], [75, -18], [132, -74], [25, 11], [-7, 18], [-148, 78], [1, 23], [38, 6], [40, 22], [-22, 14], [-98, -12], [-29, -18], [-95, -10], [-49, 16], [-45, 8], [-67, 33], [-56, -11], [-35, -13], [-62, -13], [-23, -8], [-122, -106], [-51, -22], [-37, 7], [26, 69], [7, 27], [0, 30], [11, 40], [62, 77], [40, 84], [16, 53], [31, 6], [42, -8], [126, -34], [105, -40], [77, -11], [51, -1], [22, 13], [17, 22], [7, 15], [5, 32], [6, 12], [17, 13], [34, 49], [11, 34], [-11, 20], [-24, -2], [-45, -13], [-6, -6], [1, -10], [-44, -54], [-47, -12], [-110, -18], [-50, -1], [-89, 25], [-13, 9], [-9, 19], [-109, -5], [-33, -5], [-26, 2], [13, 32], [34, 35], [48, 114], [41, 29], [80, 27], [84, -4], [145, -88], [44, -8], [40, 7], [96, 30], [18, 12], [34, 36], [40, 63], [-2, 15], [-61, -35], [-33, -10], [-28, 0], [26, 115], [10, 87], [9, 22], [82, -7], [111, 12], [26, 19], [0, 9], [-45, 11], [-21, 25], [-38, -8], [-50, -16], [-62, 2], [5, 37], [46, 79], [5, 36], [18, 72], [1, 37], [24, 36], [72, 25], [31, 16], [1, 16], [-43, 64], [11, 18], [34, 16], [13, 11], [-9, 8], [-31, 7], [-49, -14], [-53, -7], [-47, 21], [-37, 10], [-24, -3], [-63, -36], [-23, -1], [-27, 10], [-183, 31], [-22, 11], [-65, 54], [-54, 36], [-72, 39], [-93, 30], [-114, 20], [-68, 19], [-34, 27], [-58, 59], [-44, 50], [-8, 24], [26, 30], [26, 22], [50, 18], [85, -6], [46, -8], [50, -17], [38, -3], [79, 4], [80, -10], [48, -12], [63, -25], [172, -106], [72, -37], [32, -4], [129, -39], [20, 0], [53, 19], [6, 12], [-18, 11], [-57, 10], [-67, 43], [-42, 34], [-4, 57], [5, 32], [10, 15], [8, 48], [-39, 29], [-27, 9], [-72, 43], [-6, 10], [34, 5], [34, -3], [73, -21], [38, -3], [28, 8], [3, 9], [-44, 24], [-56, 44], [-115, 6], [-75, -5], [-48, 15], [-51, 24], [-32, 7], [-67, -16], [-34, -1], [-31, 5], [-30, 76], [8, 23], [24, 10], [18, 25], [12, 26], [40, 25], [217, 56], [55, 42], [-2, 7], [-37, -8], [-48, -19], [-31, -4], [-128, 24], [-20, -5], [-52, -35], [-70, -38], [-32, 2], [-44, 23], [-7, 16], [-3, 19], [48, 26], [15, 14], [31, 38], [-2, 18], [-52, -10], [-7, 17], [1, 30], [-5, 37], [-13, 37], [-43, 57], [-18, 14], [-15, 21], [-33, 77], [10, 19], [29, 14], [5, 7], [-69, -12], [-7, -13], [13, -20], [9, -26], [6, -32], [9, -29], [25, -31], [20, -16], [33, -43], [14, -48], [-4, -25], [-26, -26], [-40, -27], [-13, -23], [-5, -23], [-32, -21], [-19, 8], [-16, 1], [18, -37], [12, -39], [-14, -38], [-38, -24], [-20, 0], [-41, -19], [-103, -10], [-36, 4], [-66, 20], [-78, 10], [-31, 26], [-40, 47], [-21, 42], [0, 38], [11, 27], [22, 17], [27, 109], [38, 88], [96, 91], [27, 33], [9, 17], [0, 14], [-15, 8], [-118, -112], [-73, -12], [-21, 25], [6, 45], [13, 11], [59, -5], [23, 25], [-37, 38], [-39, 10], [-9, 9], [40, 29], [93, -2], [21, 20], [34, 22], [37, 40], [14, 34], [3, 29], [-8, 23], [-1, 23], [7, 24], [-10, 26], [-26, 28], [-57, 28], [-17, -31], [-18, -13], [-25, -3], [-24, 13], [-24, 5], [-24, 12], [-24, 3], [-10, 10], [-6, 26], [-1, 34], [28, 16], [39, 13], [26, 23], [17, 34], [3, 38], [-12, 40], [-32, 37], [-58, -36], [-23, -9], [-6, 26], [-8, 19], [-24, 25], [-33, 18], [-31, 13], [-1, 19], [7, 21], [14, 24], [18, 52], [20, -5], [16, 5], [-9, 42], [-16, 36], [-19, 20], [-1, 9], [-4, 10], [-14, 25], [-16, 19], [-29, 52], [-20, 19], [-26, 11], [-28, 0], [-45, -13], [-83, -16], [-66, -8], [-11, 4], [33, 20], [49, 21], [64, 14], [19, 34], [-7, 29], [2, 28], [-17, 30], [17, 16], [58, 16], [27, 3], [26, 21], [-74, 50], [-77, 33], [-20, 14], [-17, 22], [-15, 30], [-24, 31], [-33, 31], [-48, 30], [-125, 54], [-42, 38], [-40, 57], [-19, 25], [-21, 18], [-87, 43], [-10, 18], [89, 50], [9, 20], [-36, 61], [-38, 44], [-41, 16], [-60, 8], [-56, 20], [-50, 31], [-51, 23], [-76, 22], [-126, 56], [-195, 59], [-87, 35], [-52, 13], [-68, 3], [-132, 33], [-111, 10], [-69, -4], [-22, 5], [-51, 33], [-79, 19], [-41, -7], [-51, -36], [-62, -35], [-32, -4], [-49, 32], [-24, 22], [-23, 8], [-23, -8], [-43, -29], [-41, -21], [-61, -25], [-49, -12], [-63, -3], [-16, -9], [-24, -1], [-32, 8], [-31, 17], [-28, 24], [-25, 14], [-22, 2], [-50, -13], [-63, -37], [-29, -9], [-24, 3], [-30, 12], [-59, 30], [-33, -3], [-24, -10], [6, -25], [56, -59], [50, -42], [-42, -5], [-368, 57], [-46, 14], [-68, 34], [-56, 21], [-96, 54], [-74, 30], [-24, 22], [-6, 16], [23, 22], [149, 72], [56, 14], [116, 18], [27, 11], [9, 8], [-30, 16], [-151, -6], [-135, 11], [-117, 28], [-21, 10], [-19, 17], [-20, 26], [5, 28], [28, 32], [16, 22], [5, 11], [-147, -77], [-60, -28], [-48, 9], [-34, 13], [-16, 14], [1, 16], [5, 11], [10, 7], [-78, 33], [-35, 25], [-4, 26], [28, 27], [27, 19], [27, 12], [72, 11], [263, 20], [188, -19], [64, 64], [43, 21], [127, 21], [195, 3], [138, -12], [64, -15], [88, -33], [5, 10], [-21, 30], [-2, 25], [36, 43], [16, 27], [-11, 29], [-38, 29], [-69, 38], [-36, 3], [-41, -9], [-49, -21], [-102, -53], [-49, -11], [-80, -3], [-44, 7], [-43, 8], [-67, 28], [-25, 5], [-29, -12], [-35, -30], [-34, -21], [-32, -12], [-30, -5], [-43, 2], [-173, 47], [-40, 21], [-2, 31], [-53, 30], [-60, 5], [-8, 11], [77, 46], [57, 19], [-10, 6], [-82, 1], [-56, -25], [-32, -4], [-74, -1], [-77, 13], [-33, 11], [-34, 25], [-38, 14], [-115, 21], [-26, 12], [-25, 19], [-94, 55], [-57, 40], [-8, 22], [66, 49], [3, 12], [-28, 21], [-12, 15], [10, 22], [57, 47], [22, 13], [103, 28], [104, 40], [37, 9], [34, 3], [136, -3], [42, 10], [36, 20], [58, 20], [123, 30], [272, 46], [18, 6], [1, 8], [-24, 24], [-5, 12], [55, 21], [126, 33], [86, 16], [55, 2], [45, 7], [63, 21], [35, 4], [214, 8], [95, -12], [46, 1], [30, 8], [40, 24], [74, 59], [38, 36], [37, 56], [48, 88], [35, 85], [24, 83], [18, 51], [13, 18], [44, 23], [47, 18], [79, 16], [-7, 7], [-34, 12], [-31, 5], [-29, -3], [-53, -18], [-69, -13], [-67, 2], [-48, -5], [-44, -17], [-71, -14], [-48, 3], [-86, 25], [-43, 5], [-110, -3], [-32, 10], [-28, 17], [-23, 25], [-16, 32], [2, 34], [40, 60], [15, 16], [107, 68], [66, 31], [66, 24], [48, 13], [45, 7], [43, 14], [80, 47], [82, 40], [102, 75], [50, 20], [173, 32], [47, 1], [40, -9], [38, -16], [106, -74], [9, 2], [-19, 28], [-39, 84], [7, 34], [61, 37], [25, 6], [64, -2], [103, -11], [70, -13], [52, -20], [63, -13], [32, 1], [23, 9], [33, 32], [43, 54], [17, 66], [-8, 78], [-13, 58], [-16, 36], [9, 30], [52, 36], [48, 26], [114, 38], [92, 9], [55, -2], [72, -18], [100, -10], [91, -34], [146, -78], [97, -39], [81, -18], [79, -29], [117, -64], [62, -27], [36, -10], [32, -1], [-12, 18], [-56, 37], [-85, 42], [-191, 75], [-104, 53], [-94, 60], [-69, 36], [-126, 35], [2, 14], [151, 50], [278, 44], [313, 33], [105, -3], [184, 14], [18, 22], [39, 9], [172, 30], [49, 0], [76, -15], [80, -27], [37, -24], [51, -42], [25, -59], [-4, -186], [1, -36], [10, -13], [35, 20], [42, 38], [37, 26], [29, 41], [20, 56], [12, 41], [-49, 46], [-2, 76], [24, 41], [69, 0], [284, -140], [111, -31], [127, -75], [149, 8], [137, -9], [60, 3], [30, 11], [-42, 32], [-195, 85], [-88, 67], [-62, 84], [-15, 45], [47, 8], [217, -1], [327, -39], [418, -133], [205, -45], [369, -154], [111, -23], [45, -5], [34, 19], [21, 21], [1, 27], [-18, 35], [-10, 39], [-3, 46], [25, 89], [60, 30], [26, 33], [-24, 59], [-70, 41], [-271, 105], [-1, 13], [55, 14], [81, 8], [671, -25], [116, -10], [50, -9], [21, -11], [28, -6], [144, 15], [-3, 26], [-18, 16], [-779, 45], [-145, 16], [-74, 1], [-77, -12], [-158, -6], [-73, 2], [-95, 54], [86, 64], [72, -1], [137, -25], [82, 35], [129, 29], [128, 10], [278, 63], [52, 5], [65, -3], [143, -16], [57, -15], [65, -33], [38, -10], [45, -2], [61, -15], [89, 48], [81, 52], [92, 33], [131, -19], [83, -25], [75, -30], [107, -16], [182, -102], [34, 0], [16, 8], [17, 19], [6, 28], [22, 38], [-16, 14], [-152, 42], [-29, 17], [-29, 26], [0, 22], [28, 18], [30, 8], [98, -8], [32, 6], [31, 15], [37, 27], [29, 7], [66, 1], [101, -18], [88, -1], [32, 8], [5, 17], [8, 11], [10, 5], [321, 1], [79, 4], [63, 13], [76, 2], [66, -8], [83, -17], [81, 1], [122, 27], [115, 13], [634, -4], [208, -16]], [[25307, 60996], [15, -12], [12, -4], [24, -32], [30, -25], [18, 50], [-9, 29], [-8, 15], [1, 14], [102, -128]], [[25492, 60903], [-12, -20], [-26, -45], [-47, -78], [-42, -69], [-40, -63], [-37, -57], [-4, -6], [-46, -40], [-8, -19], [-10, -80], [-4, -20], [8, -45], [8, -68], [-2, -36], [-32, -45], [-15, -39], [-6, -26]], [[25177, 60147], [-6, 6], [-10, 2], [-23, -10], [-11, -2], [-9, -11], [-1, -25], [6, -40], [3, -21], [-7, -9], [-28, -25], [-11, -23], [-11, -38], [-12, -15], [-13, 3], [-9, -6], [-19, -27], [-30, -54], [-15, -40], [-1, -30], [3, -27]], [[24973, 59755], [-106, 95], [-36, 16], [-150, -2], [-64, 37], [-73, 72], [-50, 66], [-115, 182]], [[24379, 60221], [7, 15], [6, 34], [8, 35], [-5, 41], [-3, 33], [9, 47], [-1, 36], [4, 22], [13, 15], [6, 27], [-36, 94], [0, 22], [5, 26], [29, 101], [35, 119], [38, 132], [23, 80], [84, 0], [56, 0], [71, 0], [76, 0], [51, 0], [21, 1], [-4, 52], [3, 57], [9, 52], [0, 22], [-15, 28], [-29, 17], [-16, 24], [0, 32], [-8, 38], [-14, 44], [-29, 46], [-44, 46], [-38, 63], [-31, 78], [-27, 50], [-20, 21], [-5, 12], [60, -1], [56, -1], [0, 112], [1, 100], [0, 113], [102, -1], [122, 0], [126, 0], [99, 0], [59, 0]], [[90205, 59480], [-12, -1], [-10, 20], [-3, 13], [-1, 66], [40, 57], [13, 55], [10, -5], [10, -9], [8, -16], [-44, -92], [-11, -88]], [[34112, 55039], [-15, -37], [-2, -23], [-10, -41], [-7, -22], [11, -51], [12, -2], [5, -7], [3, -10], [-1, -11], [-5, -9], [-11, -13], [-12, -29], [1, -33], [-7, -17], [-22, -9], [-44, 0], [-22, -2], [-17, -5], [-12, -21], [-14, -15], [-11, -4], [-10, -24], [-10, -35], [3, -23], [10, -32], [6, -32], [-8, -53], [-8, -40], [-6, -31], [-6, -60], [-17, -65], [-13, -37], [0, -41], [7, -57], [34, -84], [12, -40], [9, -64], [31, -50], [20, -41], [-2, -54], [3, -17], [12, -14], [15, -10], [16, 1], [15, 4], [3, 8], [34, 1], [4, -14], [2, -77], [1, -32], [8, -12], [5, -20], [0, -17], [2, -43], [5, -23], [-1, -47], [4, -17], [9, -11], [12, -34], [4, -4], [2, -12], [11, -47], [5, -14], [3, -2], [2, -16], [7, -45], [5, -11], [10, -32], [3, -36], [13, -40], [13, -28], [5, -29], [17, -64], [15, -45], [22, -12], [18, -6], [11, -18], [11, -19]], [[33127, 54839], [-59, 136], [-59, 136], [-58, 134], [-4, 19], [24, 63], [22, 46], [18, 26], [8, 23], [-6, 99], [0, 35], [-8, 39], [-6, 43], [7, 36], [9, 25], [11, 10], [27, 8], [19, 4], [7, 14], [11, 17], [15, 1], [29, -12], [13, 22], [23, 30], [53, 50], [12, 34], [9, 51], [-1, 24], [-6, 9], [-13, 9], [-20, 1], [-16, -13], [-17, 7], [-14, 31], [-1, 27], [9, 37], [-5, 24], [-27, 78], [0, 22], [20, 35], [11, 29], [14, 72], [12, 23], [37, 9], [10, 15], [19, 38], [28, 42], [40, 35], [12, 62], [7, 17], [32, 33], [6, 18], [-1, 15], [-52, 140]], [[33328, 56767], [10, -9], [40, -92], [23, -20], [4, 0], [0, 24], [21, -10], [52, -63], [77, -103], [108, -195], [31, -75], [20, -35], [33, -85], [9, -41], [-1, -166], [-28, -112], [-7, -84], [-2, -113], [-16, -64], [22, 35], [6, 101], [19, 62], [24, 67], [33, 16], [35, -28], [28, -5], [24, -20], [53, -108], [52, -86], [18, -68], [55, -34], [32, -54], [10, -47], [7, -122], [-11, -185], [3, -9]], [[81730, 64637], [-7, -9], [-19, 42], [-1, 14], [15, 2], [16, -19], [0, -17], [-4, -13]], [[81665, 64637], [-33, 0], [-7, 5], [-4, 13], [12, 22], [45, 30], [-11, -32], [-2, -38]], [[81740, 64827], [1, -2], [6, -22], [-2, -24], [11, -12], [3, -23], [-12, -13], [-1, -28], [-6, -17], [-36, 30], [-29, 16], [-27, -6], [-9, 18], [-2, 18], [31, 32], [2, 16]], [[70474, 21234], [-34, -28], [-34, 1], [-14, 21], [-22, 68], [-14, 4], [-8, 19], [-1, 8], [15, 5], [23, -19], [55, -16], [40, -37], [30, -12], [-12, -10], [-24, -4]], [[26900, 60479], [-71, 9], [-34, -18], [-15, -40], [-12, -18], [-11, 4], [-21, -16], [-33, -35], [-29, -14], [-26, 9], [-7, -9], [-2, -11], [-4, -12], [-10, -6], [-12, 3], [-13, 13], [-7, -5], [-1, -24], [-7, -6], [-13, 11], [-15, -8], [-17, -28], [-23, -6], [-30, 16], [-23, 30], [-17, 44], [-20, 12], [-34, -33], [-15, -39], [-3, -23], [3, -22], [-6, -14], [-16, -7], [-12, -26], [-9, -46], [-1, -35], [5, -24], [-8, -18], [-21, -12], [-25, -39], [-29, -66], [-28, -47], [-29, -26], [-13, -29], [0, -32], [-1, -10], [-6, -4], [-9, -4], [-55, 69], [-15, 49], [-14, -7], [-17, -25], [-24, -55], [-26, -74], [-13, -9], [-65, 11], [-34, -6], [-7, -10], [-3, -27], [2, -37], [9, -131], [5, -54], [-5, -17], [-17, -3], [-23, -7], [-12, -25], [-3, -26], [-1, -35], [-8, -37], [-14, -26], [-13, -10], [-78, -7]], [[25739, 59319], [2, 61], [-23, 25], [-12, 50], [-11, 34], [3, 21], [-1, 24], [-31, 19], [-30, -14], [-17, 9], [-12, 13]], [[25607, 59561], [21, 30], [2, 18], [-7, 14], [-7, 8], [2, 34], [4, 40], [12, 94], [-4, 17], [-20, 28], [-25, 3], [-27, -9], [-13, 14], [-12, 32], [-20, 16], [-34, -26], [-37, -39], [-11, -14], [-10, 2], [-4, 29], [-2, 35], [-2, 8], [-20, 12], [-23, 9], [-11, 10], [-11, 23], [-28, 30], [-6, 22], [-37, 52], [-7, 25], [-8, 19], [-18, 23], [-14, -5], [-46, 29], [-7, 3]], [[25492, 60903], [27, -16], [21, 37], [12, 12], [29, 44], [9, 10], [48, 18], [23, -1], [21, -44], [16, -25], [30, 21], [26, 5], [105, -42], [42, 19], [76, 4], [35, -11], [49, 59], [31, 12], [37, 27], [-5, 29], [-9, 12], [56, -12], [83, -60], [89, 11], [32, 32], [21, 9], [91, -61], [24, -47], [19, -4], [14, 10], [4, 10], [-18, 10], [-8, 15], [72, -29], [135, -222], [3, -18], [-58, 65], [-31, -5], [-8, -10], [2, -36], [3, -17], [13, -2], [10, 10], [24, -12], [15, -24], [19, -36], [12, -40], [12, -1], [12, 24], [23, 3], [15, -26], [11, 1], [-15, 42], [-35, 41], [9, 1], [77, -74], [21, -92], [19, -21], [18, -29]], [[25994, 61277], [-44, -45], [-14, 1], [20, 35], [33, 30], [28, 14], [23, -6], [-46, -29]], [[26147, 61325], [-21, -33], [-4, 15], [10, 31], [13, 17], [12, -1], [-3, -14], [-7, -15]], [[54891, 76479], [37, -39], [-111, 51], [13, 5], [12, 1], [49, -18]], [[54625, 76610], [51, -16], [38, 8], [34, -10], [21, -19], [5, -9], [-28, -1], [-31, 8], [-35, -19], [-31, 10], [-12, 12], [-8, 15], [-4, 21]], [[55121, 76359], [0, -22], [11, -24], [11, -27]], [[55143, 76286], [-51, 54], [-48, 61], [-93, 94], [-67, 23], [-91, 76], [-59, 27], [23, 6], [26, 0], [140, -101], [-16, 27]], [[54776, 76685], [-20, -6], [-123, 4], [-36, 12], [-40, 31], [-9, 9], [41, 9], [37, -9], [12, -22], [101, -18], [37, -10]], [[54662, 76768], [-44, -1], [-38, 10], [-19, 18], [2, 15], [6, 25], [42, -3], [65, -18], [15, -21], [-4, -9], [-25, -16]], [[54269, 77173], [19, -43], [-18, 9], [-18, 27], [-11, 28], [28, -21]], [[54230, 77224], [5, -20], [-35, 38], [-13, 26], [-3, 11], [46, -55]], [[54219, 77143], [4, -8], [-1, -6], [-14, 8], [-4, -2], [-68, 126], [-7, 24], [24, -29], [66, -113]], [[54218, 77382], [-7, -16], [-18, 29], [-16, 20], [-12, 23], [-23, 30], [-8, 34], [-34, 69], [-6, 19], [18, -28], [14, -18], [12, -4], [30, -44], [30, -57], [35, -49], [-8, -2], [-7, -6]], [[54119, 77625], [7, -25], [-26, 23], [-23, 9], [-5, 17], [3, 14], [5, 14], [18, -2], [3, -14], [18, -36]], [[54024, 77568], [-2, -22], [-17, 28], [-9, 51], [-21, 82], [-3, 23], [11, 23], [0, 23], [-15, 72], [12, 11], [8, 2], [3, -50], [7, -29], [20, -35], [-4, -58], [4, -83], [4, -18], [2, -20]], [[54113, 77751], [-34, -12], [-16, 22], [-4, 18], [-29, 6], [-17, 25], [-3, 11], [24, 28], [13, 45], [16, -27], [20, -51], [11, -14], [19, -51]], [[55251, 78301], [-1, -14], [-2, -24], [-15, -17], [15, -40], [15, -64], [-9, -32], [10, -24], [29, -18], [2, -7], [-9, -7], [-7, -21], [0, -39], [24, -36], [50, -34], [16, -5], [6, -13], [8, -9], [5, -10], [1, -14], [-4, -9], [-24, -3], [-27, 0], [-19, 16], [-1, -12], [-1, -13], [-18, -9], [10, -94], [-4, -27], [-7, -9], [-6, 4], [-8, 1], [-4, -9], [3, -20]], [[54884, 76577], [-13, 13], [-58, 88], [-55, 56], [-63, 104], [-84, 41], [-58, 46], [-34, -7], [-39, -14], [-23, -1], [-17, 9], [-12, 28], [2, 22], [-2, 28], [-34, 46], [-46, 44], [-43, 56], [-87, 151], [-18, 49], [17, 9], [13, 0], [15, 10], [24, 0], [28, -10], [-25, 32], [-31, 32], [-80, 127], [-24, 59], [-3, 65], [6, 88], [-14, 63], [-62, 82], [-23, 43], [-45, 25], [-21, -2], [-12, -32], [-9, -71], [-40, -93], [-14, -41], [-21, -52], [-18, -4], [-11, 5], [-33, 88], [-32, 68], [-4, 31], [-3, 40], [-24, 144], [17, 20]], [[53771, 78062], [10, -23], [74, -28], [15, 12], [10, 19], [0, 12], [6, 4], [26, -19], [21, 5], [34, 1], [24, -3], [16, 14], [22, 51], [8, 29], [9, 7], [7, -4], [4, -23], [12, -23], [23, -36], [17, -17], [15, -7], [14, 15], [16, 4], [43, -28], [36, -5], [27, 14], [-3, 21], [-10, 22], [-2, 22], [2, 19], [18, 19], [-1, 8], [-22, 34], [1, 8], [49, 38], [48, 21], [7, 16], [5, 24], [2, 46], [-3, 37], [-19, 35], [-1, 18], [4, 18], [8, 17], [19, 7], [22, 12], [18, 14], [23, 11], [19, 16], [18, 38], [11, 6], [34, -5], [7, 9], [-4, 55], [6, 14], [12, 8], [5, 7], [30, -6], [24, -14]], [[54587, 78628], [15, -8], [50, -40], [34, -44], [19, -50], [26, -38], [32, -27], [26, -37], [19, -46], [27, -26], [34, -6], [21, -15], [9, -27], [19, -23], [28, -21], [43, -12], [84, -3], [7, 0], [19, -7], [22, 8], [27, 17], [8, 10], [28, 54], [16, -5], [31, 7], [19, 12], [1, 0]], [[29776, 62659], [-5, -40], [-71, 48], [-57, 61], [2, 33], [30, 7], [28, -20], [41, -40], [32, -49]], [[30064, 62234], [-23, 46], [-26, 38], [-16, 15], [-16, 10], [-123, -5], [-14, -7], [-11, -12], [-11, -6], [-34, -12], [-34, -2], [-79, 31], [-31, 16], [-31, 10], [-36, -3], [-36, -10], [-29, -22], [-21, -40], [-4, -36], [-13, -10], [-29, 59], [-27, 41], [-30, 31], [-62, 45], [-12, 27], [-5, 32], [26, 101], [28, 19], [16, 3], [35, -12], [35, -23], [31, -15], [49, -6], [27, -25], [187, -38], [35, -12], [14, 4], [12, 15], [10, 27], [12, 21], [56, 4], [11, 9], [8, 29], [0, 29], [-33, 40], [-51, 86], [-45, 103], [20, 34], [-8, 63], [8, 58], [10, 57], [-44, 49], [-53, 49], [-73, 15], [-22, 13], [-12, 36], [11, 49], [23, 28], [27, 16], [28, 12], [67, 14], [67, -16], [57, -50], [59, -40], [73, -13], [34, -14], [15, 12]], [[29815, 63385], [12, -13], [-5, -17], [-28, 10], [-29, 19], [-9, -5], [-6, 2], [-17, 18], [15, 14], [15, 4], [17, -1], [35, -31]], [[56147, 79726], [27, 5], [1, -1], [6, -3], [4, -27], [1, -1], [7, -18], [6, -24], [9, -17], [20, -7], [27, -22], [17, -41], [26, -18], [2, 0], [5, 2], [19, 1], [4, -8], [15, -20], [6, -18], [-3, -18], [2, -22], [6, -7]], [[56354, 79462], [-7, -14], [-48, -71], [-19, -19], [-13, -4], [-20, 7], [-20, -5], [-19, -16], [-17, -4], [-12, -19], [-17, -38], [-20, -33], [-21, -21], [-11, -18], [-1, -63], [-11, -18], [-15, -18], [-9, -16], [-23, -96], [-18, -31], [-16, -23], [-3, -22], [0, -25], [-19, -49], [-25, -51], [-5, -21], [6, -28], [-24, -33], [-14, -15], [-11, -8], [-7, -20], [-12, -50], [3, -22], [0, -20], [-20, -12], [-6, -23], [-5, -27], [-8, -13], [-23, -23], [-56, 10], [-22, -8], [-6, -16], [-1, -14], [-7, -12], [-13, -16], [-14, -7], [-29, 19], [-63, -19], [-11, -14]], [[55622, 78403], [-9, 10], [-13, 9], [-63, 11], [-25, -9], [-34, 4], [-30, 10], [-23, -8], [-21, -39], [-10, -14], [-8, -8], [-17, -12], [-15, -15], [-19, -11], [-17, 2], [-17, 17], [-5, -4], [-6, -16], [-8, -13], [-25, -16], [-6, 0]], [[54587, 78628], [-3, 13], [-24, 49], [-10, 18], [1, 24], [-5, 14], [-9, 10], [-5, 35], [-2, 26], [-7, 17], [-53, 4]], [[54763, 79496], [7, 3], [29, -4], [6, -6], [5, -2], [45, -59], [43, -45], [35, -23], [52, -2], [55, -2], [92, 8], [69, 6], [4, 11], [11, 27], [-9, 23], [1, 26], [11, 36], [34, 29], [98, 12], [56, 22], [8, 30], [19, 29], [17, 6], [23, -14], [28, -25], [25, -14], [14, 9], [50, 43], [57, 43], [39, 115], [4, 18], [43, 13], [62, -2], [32, -15], [23, -8], [36, 2], [52, 25], [19, -1], [15, -17], [16, -15], [11, -19], [8, -26], [5, -9], [7, -14], [13, -18], [13, -5], [95, 32], [6, 7]], [[84152, 45559], [-26, -1], [-8, 6], [-3, 51], [8, 28], [60, 37], [23, 34], [34, 70], [20, 18], [5, 8], [4, -1], [3, -54], [9, -31], [1, -17], [-30, -27], [-26, -62], [-59, -41], [-15, -18]], [[83856, 45742], [-14, -7], [-30, 17], [-6, 10], [25, 28], [20, 39], [23, 4], [14, -8], [-5, -47], [-27, -36]], [[84281, 45908], [-25, -20], [0, 42], [20, 54], [17, 18], [10, -22], [1, -9], [-26, -20], [3, -43]], [[83336, 46442], [13, -25], [45, -50], [7, -21], [3, -35], [9, -26], [21, -4], [22, 5], [16, -16], [15, -26], [21, -50], [19, -56], [23, -31], [14, -46], [-8, -41], [-30, -57], [-16, -12], [-21, -4], [-35, -34], [-12, 18], [-39, 12], [-30, 24], [-26, 45], [-15, 47], [-19, 43], [-33, 28], [-58, 83], [-37, 7], [-15, -6], [-15, 0], [-77, 37], [-12, 22], [-9, 28], [-9, 27], [-5, 31], [10, 27], [10, 19], [43, 32], [31, 10], [35, -2], [53, 10], [51, -16], [15, 12], [25, 34], [9, -12], [11, -31]], [[84740, 46363], [-19, -30], [-10, -58], [-34, -54], [-37, -89], [-29, -46], [-26, -53], [-23, -36], [-28, -13], [-42, -7], [-56, -65], [-32, -28], [-31, -2], [-28, 21], [-11, 24], [2, 31], [10, 28], [12, 22], [7, 29], [-33, 37], [-2, 27], [12, 75], [9, 76], [12, 52], [46, 93], [28, 46], [17, 19]], [[84454, 46462], [4, -20], [11, -24], [7, -3], [5, 5], [41, -8], [10, 8], [16, 37], [10, 20], [7, 44], [2, 28]], [[84567, 46549], [36, 20], [20, 22], [17, 32], [51, 53], [9, 15]], [[84700, 46691], [-2, -51], [6, -12], [10, -7], [35, 35], [7, -7], [7, -15], [0, -47], [-14, -38], [-34, -3], [-5, -11], [0, -23], [3, -23], [8, -18], [10, -33], [9, -75]], [[82113, 46791], [-8, -20], [-22, 35], [-6, 16], [17, 23], [6, 3], [14, -24], [-1, -33]], [[84160, 46920], [-9, -34], [-16, 10], [4, 33], [8, 19], [22, 28], [22, 5], [13, -10], [4, -11], [-34, -11], [-14, -29]], [[83184, 46808], [-11, -6], [-11, 8], [4, 52], [-6, 34], [11, 28], [3, 48], [5, 15], [6, -15], [4, -10], [5, -5], [13, -1], [3, -21], [-1, -19], [-5, -21], [-15, -23], [-11, -25], [6, -39]], [[84254, 47030], [-6, -25], [-75, 2], [2, 33], [21, 36], [7, 12], [23, 11], [33, -20], [-5, -49]], [[82399, 46881], [-35, -120], [13, -19], [7, -18], [-58, -25], [-24, 13], [-14, -3], [-59, 22], [-42, 28], [-5, 21], [3, 26], [13, -8], [32, -4], [13, 11], [0, 77], [-5, 100], [44, 82], [24, 33], [27, 20], [68, -46], [11, -12], [9, -18], [4, -30], [-26, -130]], [[84523, 47045], [-17, -36], [-11, -62], [-11, -19], [-22, -11], [-14, 62], [-24, -3], [12, 54], [11, 21], [16, 0], [7, -22], [4, -4], [36, 92], [7, 1], [6, -4], [5, -11], [-5, -58]], [[84423, 47077], [-39, -15], [-24, -72], [-19, 1], [-11, -32], [-2, -14], [1, -12], [-2, -13], [-8, -12], [-17, 20], [-16, -25], [-6, -7], [-23, 30], [-21, -2], [-6, 5], [26, 52], [36, 50], [6, 18], [-14, 5], [-8, 7], [-2, 12], [23, 7], [16, 2], [12, -16], [8, 1], [48, 58], [20, -14], [14, -14], [8, -20]], [[88581, 47010], [-14, -7], [-69, 17], [-8, 24], [-1, 12], [16, 24], [15, 40], [24, 14], [10, 0], [28, -94], [-1, -30]], [[82654, 47023], [-7, -1], [-12, 11], [5, 24], [-7, 40], [2, 32], [16, 18], [33, 2], [1, -24], [-31, -102]], [[83075, 47097], [-12, -1], [-2, 23], [4, 24], [12, 11], [5, 0], [8, -22], [2, -11], [-8, -15], [-9, -9]], [[84603, 47153], [7, -35], [22, 20], [21, 4], [47, -3], [35, -8], [21, -15], [2, -70], [-10, -15], [-181, -53], [-18, 17], [-7, 17], [20, 52], [-9, 25], [10, 40], [22, 27], [18, -3]], [[85506, 47177], [48, -23], [28, 3], [6, -21], [-27, -49], [-56, 38], [-10, 40], [11, 12]], [[84106, 46882], [-40, -20], [-24, -20], [-23, -26], [-15, -5], [-27, -2], [-37, 5], [-26, -9], [-71, -66], [-28, -6], [-24, -16], [-8, 26], [-10, 19], [-24, 4], [-24, -1], [-24, -59], [-38, 13], [-15, -6], [-14, -12], [-14, -5], [-15, 4], [-56, 45], [-64, 27], [-64, -10], [-55, 25], [-30, -19], [-29, -28], [-8, 29], [-11, 26], [-9, 37], [0, 44], [3, 30], [8, 27], [5, 29], [3, 31], [12, -15], [12, 5], [38, 34], [37, 50], [34, 19], [20, 5], [16, -10], [17, 4], [18, 11], [28, -39], [11, -8], [38, -3], [34, -22], [30, -34], [44, -31], [27, -42], [20, -15], [15, -5], [13, 6], [18, 28], [20, 12], [18, 0], [32, 7], [14, 7], [15, 15], [15, -9], [13, -15], [54, -74], [17, -2], [30, 16], [10, 20], [4, 31], [9, 25], [11, 22], [14, 17], [40, 28], [28, 28], [19, 48], [-44, 20], [9, 34], [15, 20], [20, -7], [17, -27], [7, -102], [-14, -15], [-8, -15], [-6, -20], [-26, -38], [10, -46], [-7, -20], [-10, -9]], [[86350, 47051], [-24, -18], [16, 45], [52, 104], [18, -19], [25, -4], [-37, -47], [-38, -19], [-12, -42]], [[82844, 47051], [14, -22], [13, 2], [26, 34], [16, 13], [17, 1], [17, -6], [16, -25], [6, -40], [6, -13], [10, 49], [13, 14], [14, 8], [22, -3], [17, -23], [16, -69], [-1, -60], [6, -22], [11, -17], [8, -23], [-7, -24], [-7, -11], [-21, -11], [-9, 4], [-9, 17], [-10, 6], [-23, -6], [-21, -13], [3, -22], [17, -10], [5, -11], [-1, -14], [-7, -3], [-22, 19], [-15, -3], [-54, -26], [-14, 1], [-9, 24], [1, 63], [-6, 17], [-40, -77], [-12, -19], [-17, -9], [-16, 3], [-59, -46], [-18, 6], [-18, 0], [-62, -50], [-33, -14], [-17, -1], [-17, 4], [-15, -4], [-14, -21], [-28, -17], [-28, 13], [-25, 18], [-23, 23], [-5, 29], [1, 35], [10, 48], [-7, 84], [5, 39], [9, 38], [15, 14], [18, 2], [31, 34], [28, 45], [16, -4], [37, -31], [22, -4], [37, 5], [15, -19], [6, -44], [8, -16], [11, -11], [26, -74], [24, 4], [21, -14], [38, 45], [28, -1], [8, 34], [-17, 37], [-20, 31], [-11, 6], [-12, -2], [-11, 5], [-45, 67], [-14, 37], [-8, 43], [5, 31], [31, 28], [15, 7], [55, -19], [9, -16], [14, -68], [11, -29]], [[82068, 47145], [28, -31], [40, -89], [3, -25], [-12, -24], [-28, -38], [-63, -58], [-10, -28], [-14, -54], [-3, -23], [-4, -13], [-7, -9], [-14, -8], [-15, 12], [13, 34], [1, 42], [-10, 39], [-14, 32], [-29, 44], [-30, 40], [-31, 19], [-33, 9], [-12, 19], [-19, 49], [-6, 27], [-3, 28], [2, 27], [8, 1], [32, -6], [59, -32], [30, -2], [16, 7], [43, 62], [11, -1], [41, -27], [30, -23]], [[86065, 47261], [-16, -53], [-18, 3], [-34, 71], [2, 50], [3, 16], [13, 5], [43, -15], [9, -40], [-2, -37]], [[85222, 47426], [3, -28], [0, -13], [-33, -9], [-32, -31], [-17, -36], [-13, -46], [-44, 19], [-39, 3], [-18, 16], [-19, -1], [-24, -14], [-35, -40], [-8, -3], [3, 60], [10, 37], [36, 88], [31, -19], [36, -6], [40, 18], [29, 39], [40, 21], [33, -52], [21, -3]], [[85393, 47451], [-17, -13], [5, 43], [-1, 34], [29, -11], [0, -27], [-3, -10], [-13, -16]], [[88481, 47077], [-66, -76], [-87, 13], [-31, 2], [-51, -19], [-11, 15], [10, 71], [41, 190], [49, 168], [20, 43], [29, 41], [31, 33], [69, 34], [62, -7], [9, -13], [27, -56], [18, -44], [7, -63], [-27, -107], [-29, -102], [-49, -80], [-21, -43]], [[86478, 47235], [-4, -7], [-35, 8], [-19, 0], [2, 43], [-10, 33], [14, 48], [0, 56], [15, 7], [2, 32], [17, 84], [10, 19], [15, 7], [17, 49], [10, 15], [10, 37], [15, 17], [-2, 32], [9, 17], [23, 13], [16, -15], [10, -33], [-26, -40], [13, -99], [-19, -108], [-12, -33], [-23, -27], [-6, -27], [-27, -53], [-8, -46], [-2, -19], [-5, -10]], [[86661, 47694], [-4, -28], [-12, 15], [-11, 33], [-17, 5], [-13, 8], [-7, 16], [47, 7], [17, -56]], [[81780, 47733], [-4, -22], [-14, 5], [-13, 38], [6, 10], [8, 4], [9, -4], [8, -31]], [[85741, 47705], [-13, -15], [-20, 30], [-6, 13], [13, 29], [14, 9], [9, -13], [4, -13], [-2, -14], [1, -26]], [[83548, 47742], [-29, -3], [-8, 5], [-3, 56], [32, -24], [10, -2], [-2, -32]], [[81623, 47750], [-6, -9], [-47, 5], [-30, -47], [-21, -14], [-76, 0], [-9, 6], [-7, 0], [-4, -10], [-24, 7], [-77, 42], [-10, 38], [12, 42], [27, 58], [56, 12], [252, 4], [27, -51], [3, -16], [-55, -35], [-11, -32]], [[82048, 47827], [-22, -10], [-21, 21], [0, 27], [5, 25], [32, 13], [17, 0], [18, -18], [12, -18], [6, -21], [-34, -1], [-13, -18]], [[87409, 47955], [-5, -9], [-7, 18], [-1, 12], [10, 32], [9, 18], [11, 1], [-3, -26], [-14, -46]], [[79236, 48018], [-17, -13], [-13, 11], [-6, 16], [19, 40], [10, 10], [9, 3], [5, -22], [-7, -45]], [[87420, 48070], [-15, -6], [-8, 48], [13, 12], [14, -29], [-4, -25]], [[87449, 48136], [-7, -4], [0, 28], [8, 25], [8, 14], [9, 1], [-18, -64]], [[87370, 48132], [-4, -41], [-5, -45], [-25, -51], [-16, -78], [-9, -19], [-34, -35], [-30, 43], [-9, 37], [13, 172], [13, -6], [9, 1], [2, 12], [-19, 19], [-4, 98], [1, 38], [15, 8], [18, -29], [24, -52], [27, -40], [33, -32]], [[79825, 48382], [28, -66], [25, -35], [29, -19], [30, -2], [30, -8], [35, -25], [35, -11], [17, 4], [16, 13], [11, 1], [10, -12], [25, -56], [27, -51], [6, -26], [18, -123], [20, -35], [29, -10], [33, 0], [33, -5], [77, -29], [30, 4], [27, 29], [24, -19], [65, -34], [32, -8], [36, 10], [37, 2], [17, -10], [17, -15], [14, -6], [15, 1], [26, 29], [18, 52], [14, 67], [11, 69], [7, 30], [10, 26], [14, 17], [14, 11], [38, -7], [8, -16], [42, -118], [8, -10], [45, -8], [12, 4], [27, 24], [16, 2], [28, -29], [13, -25], [13, -18], [70, -19], [28, -50], [13, -7], [49, 6], [34, -5], [29, -13], [13, -72], [11, -73], [7, -25], [28, -25], [12, -23], [-3, -73], [3, -70], [61, -60], [65, -35], [69, -4], [70, 12], [35, 15], [45, 26], [9, 0], [87, -80], [8, -12], [9, -60], [0, -62], [-16, -149], [-1, -41], [1, -41], [18, -89], [9, -25], [31, -47], [1, -25], [-4, -24], [-35, 17], [-21, 20], [-12, 33], [-17, 19], [-33, -7], [-61, 34], [-69, 52], [-122, 110], [-33, -1], [-32, -14], [-33, -28], [-35, -20], [-26, -7], [-26, 5], [-65, 27], [-66, 17], [-168, 11], [-47, 25], [-79, 12], [-63, 22], [-62, 30], [-158, 149], [-51, 36], [-159, 71], [-24, 6], [-58, -5], [-36, 21], [-32, 0], [-47, -23], [-15, -17], [-18, -35], [-33, 2], [-32, 7], [-84, 33], [-31, 21], [-30, 30], [-28, 40], [-14, 14], [-72, 41], [-60, 14], [-122, 18], [-27, 12], [-22, 15], [-12, 33], [1, 42], [9, 36], [12, 36], [8, 34], [-89, 73], [-71, 40], [-30, 7], [-31, 0], [-34, -8], [-34, 4], [-16, 11], [-17, 5], [-16, -9], [-13, 3], [-4, 33], [9, 28], [17, 32], [10, 6], [4, -50], [5, -10], [16, -11], [6, 3], [27, 64], [8, 31], [13, 85], [14, -16], [14, 10], [8, 13], [23, 196], [19, 58], [26, 47], [12, 12], [26, -29], [51, -11], [30, -20], [31, -2], [29, -10], [42, -34], [15, 3], [14, 11], [23, 38], [9, 60], [32, -31], [48, -12], [11, -17]], [[84458, 48402], [-3, -28], [-10, 32], [-9, 15], [1, 34], [13, -12], [8, -41]], [[83479, 48215], [-11, -96], [-6, 33], [-2, 88], [-7, 43], [5, 49], [-1, 126], [8, 58], [16, -74], [4, -38], [-6, -189]], [[81310, 48495], [-6, -20], [-26, 1], [-5, 24], [17, 41], [12, 3], [10, -15], [-2, -34]], [[86890, 48472], [-17, -55], [-11, 19], [-7, 1], [-4, 32], [4, 68], [-14, 76], [19, -1], [5, -23], [6, -8], [18, -73], [1, -36]], [[87429, 48555], [-2, -22], [-1, -41], [5, -38], [-12, -39], [11, -57], [2, -29], [-1, -41], [-3, -18], [-8, -54], [-9, -19], [-6, -5], [-7, -16], [-54, 18], [-24, 37], [-21, 40], [-4, 17], [-25, 46], [-6, 16], [0, 25], [20, 7], [21, -1], [-1, 22], [13, 80], [-33, 51], [-6, 21], [12, 15], [26, -18], [32, 89], [10, 19], [4, 50], [18, 6], [13, -6], [8, -31], [3, -27], [-3, -24], [15, -13], [13, -60]], [[86923, 48443], [-22, -50], [21, 117], [4, 59], [20, 36], [29, 179], [7, -5], [10, -17], [-15, -131], [-41, -92], [-13, -96]], [[78435, 48687], [-23, -3], [-42, 71], [-7, 22], [12, 21], [13, -2], [48, -45], [9, -22], [-10, -42]], [[84340, 48806], [-1, -58], [-11, 3], [-9, 20], [-3, 20], [1, 15], [5, 13], [18, -13]], [[83900, 48710], [-18, -15], [-33, 66], [-14, 54], [3, 31], [10, 26], [5, 7], [-2, 28], [13, 14], [15, -2], [9, -38], [11, -10], [6, -36], [-5, -125]], [[84067, 48807], [-7, -38], [-15, -30], [-13, -2], [-12, 6], [-23, 26], [-6, -27], [-18, 1], [-6, 35], [12, 105], [19, 39], [-2, 41], [-15, 88], [10, 46], [43, 34], [37, 42], [12, 9], [11, -32], [5, -149], [-40, -118], [8, -76]], [[84216, 49221], [6, -124], [-2, -32], [-15, 47], [-6, 10], [-4, -10], [-6, -5], [-8, 0], [-10, -48], [-1, -45], [-8, -30], [-4, -101], [3, -28], [12, 14], [7, 3], [27, -39], [15, -28], [-4, -34], [-19, -35], [-21, -15], [-16, 15], [-5, -7], [-9, -18], [-8, -24], [3, -24], [-19, -68], [-10, -19], [-22, 21], [-14, -18], [-11, 1], [-16, 69], [0, 32], [15, 36], [1, 26], [7, 29], [17, 40], [10, 29], [0, 19], [8, 72], [2, 30], [5, 32], [8, 66], [1, 122], [26, 101], [25, 28], [11, 5], [-2, -27], [31, -68]], [[87102, 49397], [14, -31], [-33, 24], [-47, 51], [-3, 34], [40, -52], [29, -26]], [[84233, 49473], [-27, -69], [-19, 4], [-23, 45], [-6, 50], [-1, 18], [16, 28], [52, -9], [9, -25], [-1, -42]], [[85711, 49777], [-48, -30], [11, 56], [6, 15], [24, -15], [7, -26]], [[85631, 49726], [-7, -21], [-16, -14], [-14, 1], [5, 21], [-4, 11], [-10, -5], [-16, -16], [-20, -33], [-13, 16], [-2, 26], [1, 11], [24, 45], [29, 8], [40, 43], [18, -2], [-4, -27], [-6, -20], [-4, -20], [-1, -24]], [[85755, 49800], [0, -25], [-2, -8], [-15, 9], [-11, -1], [-10, 44], [3, 10], [20, -12], [7, -5], [8, -12]], [[82339, 49847], [-10, -99], [-17, 56], [19, 67], [9, 13], [-1, -37]], [[85445, 49933], [7, -25], [-28, 16], [-12, 25], [12, 15], [7, 4], [14, -35]], [[82306, 49614], [-59, -107], [-9, 28], [5, 109], [-17, 67], [2, 51], [11, 89], [15, 68], [34, 46], [8, 5], [-2, -83], [7, -31], [2, -27], [-3, -23], [6, -105], [4, -26], [-8, -33], [4, -28]], [[85238, 50064], [46, -45], [10, -29], [9, -35], [9, -20], [10, -15], [18, -31], [5, -46], [-4, -93], [-21, -8], [-19, -14], [-40, -54], [-20, -10], [-21, -4], [-15, -14], [-15, -6], [-39, 30], [-38, 35], [-54, 61], [-10, 15], [-9, 32], [-25, 59], [-6, 38], [-2, 106], [6, 25], [11, 13], [36, -25], [24, 26], [69, 22], [71, -2], [14, -11]], [[85551, 50151], [-14, -48], [-24, 2], [-4, 7], [29, 30], [13, 9]], [[79690, 50111], [-5, -11], [-15, 6], [-11, 16], [-7, 15], [-2, 16], [15, 20], [32, -20], [-7, -42]], [[79853, 50172], [-11, -14], [-7, 14], [-2, 16], [5, 20], [15, 2], [7, -6], [-7, -32]], [[86042, 50192], [64, -64], [33, -9], [56, 8], [21, -6], [53, -82], [15, -56], [4, -48], [9, -46], [13, -11], [15, -5], [20, -66], [4, -21], [-15, -166], [-63, 63], [-60, 71], [-26, 27], [-69, 60], [-11, 21], [-8, 27], [-30, 37], [-60, 6], [-23, -1], [-9, -6], [2, -20], [0, -40], [-15, -12], [-37, 26], [-34, 9], [-29, 25], [-39, 14], [-4, 12], [3, 19], [-1, 18], [-9, 6], [-18, -3], [-17, -17], [-14, -21], [-20, -55], [-11, -21], [-34, -9], [-14, 5], [-13, 14], [-39, 101], [-13, 22], [-14, 18], [-14, 8], [-13, -16], [-8, -31], [-3, -37], [-4, -22], [-17, -59], [-13, -36], [-5, 6], [7, 57], [0, 32], [-9, 34], [-5, 35], [65, 165], [24, 40], [103, 13], [61, -8], [34, 4], [22, 12], [19, -5], [4, -33], [12, -24], [16, 2], [29, 25], [26, 40], [15, 17], [16, 3], [16, -3], [16, -9], [43, -34]], [[77895, 50009], [11, -84], [-33, 58], [1, 40], [-5, 26], [-20, 33], [-15, 40], [-7, 96], [5, 20], [13, 1], [58, -126], [4, -21], [-1, -45], [-8, -14], [-3, -24]], [[80057, 50116], [-5, -61], [-6, -23], [-24, -30], [-7, -18], [-22, 3], [-3, 32], [-7, 21], [-23, 25], [-6, -6], [-4, -37], [-45, -26], [-13, -2], [6, 49], [-11, 38], [-1, 47], [-2, 21], [-6, 12], [11, 32], [-1, 37], [12, 39], [7, 95], [47, 21], [10, -17], [56, -21], [39, -58], [21, -77], [-23, -96]], [[77834, 50264], [-20, -47], [-33, 1], [-6, 29], [1, 70], [-8, 22], [0, 9], [6, 40], [6, 9], [53, -98], [1, -35]], [[87325, 50619], [-8, -8], [-3, 25], [5, 33], [5, 6], [6, -2], [8, -12], [-13, -42]], [[77733, 50493], [2, -15], [-45, 50], [-22, 14], [-19, 56], [5, 26], [1, 37], [3, 15], [14, 5], [18, -27], [13, -66], [23, -61], [7, -34]], [[85014, 50431], [-4, -11], [-17, 31], [-11, 88], [-10, 24], [-11, 83], [3, 24], [14, 35], [11, 0], [8, -21], [-5, -90], [25, -114], [-3, -49]], [[84401, 50716], [5, -23], [-17, 1], [-7, 43], [1, 24], [18, -45]], [[85006, 50812], [85, -19], [-12, -21], [-92, -33], [-33, 6], [-100, -20], [-12, 1], [-2, 32], [-11, 23], [16, 20], [21, 4], [55, -7], [85, 14]], [[84208, 50796], [-20, -47], [-2, 25], [4, 23], [5, 16], [9, 9], [4, -26]], [[86208, 50869], [4, -34], [16, -32], [-5, -49], [-7, -7], [4, -23], [7, -17], [-13, -12], [-10, 6], [-15, -16], [-10, -22], [-32, -9], [-11, 20], [-57, 24], [-37, 53], [-5, 16], [71, 62], [32, 17], [26, -1], [33, 23], [9, 1]], [[84713, 50860], [26, -20], [9, 0], [9, 24], [5, 4], [12, -12], [2, -39], [17, 6], [13, -14], [4, -9], [-1, -39], [-50, -6], [-36, -32], [-48, 28], [-54, -48], [-33, -16], [-28, 1], [-25, 84], [14, 99], [11, 16], [18, 8], [50, 5], [85, -40]], [[87631, 50926], [110, -29], [29, 4], [63, -12], [52, -38], [91, -7], [28, -12], [21, -26], [-51, -22], [-24, -20], [-45, -10], [-38, 10], [-27, -12], [-10, 20], [-39, 20], [-51, 41], [-105, 49], [-5, 30], [1, 14]], [[80264, 50910], [-32, -25], [-10, 55], [21, 16], [22, -14], [-1, -32]], [[79456, 50881], [10, -40], [13, -35], [10, -39], [13, -185], [43, -159], [126, -63], [-21, -25], [-10, -23], [-8, -27], [-18, -110], [1, -24], [11, -37], [3, -41], [-16, 0], [-17, 10], [-15, 15], [-13, 20], [-14, 16], [-15, 10], [-26, 32], [-34, 22], [-36, 17], [-17, 47], [-8, 58], [9, 86], [-9, 24], [-13, 21], [-15, 62], [-6, 73], [-22, 28], [-30, 17], [-13, 14], [-58, -26], [-14, 6], [-12, 20], [-32, 21], [1, 40], [15, 32], [35, 33], [16, 27], [3, 36], [-6, 26], [3, 28], [11, 27], [13, 21], [34, 27], [16, -48], [7, -40], [10, -30], [14, 42], [-9, 72], [27, 16], [26, 1], [19, -20], [13, -31], [5, -44]], [[84332, 50861], [-19, -4], [-13, 17], [1, 85], [12, 18], [5, -3], [4, -25], [5, -23], [10, -21], [-5, -44]], [[85597, 50886], [-17, -23], [-8, -7], [-41, 16], [-48, -3], [-50, -22], [-29, 18], [-18, 30], [1, 32], [17, 78], [37, 60], [16, 10], [26, -16], [45, -45], [36, -54], [32, -41], [1, -33]], [[84225, 51168], [6, -36], [-10, -31], [11, -59], [28, 78], [27, 10], [15, -13], [10, -15], [6, -30], [-10, -63], [-18, -30], [-22, -5], [-11, 37], [-15, 4], [-10, -81], [-5, -12], [-13, -10], [-12, 22], [-2, 12], [17, 37], [-9, 108], [-13, -20], [-34, -99], [-26, -44], [-8, 23], [-14, 67], [6, 86], [21, 58], [18, -4], [52, 18], [15, -8]], [[80474, 51163], [-55, -59], [-13, 3], [-10, 21], [6, 113], [7, 34], [39, 4], [23, -17], [12, -18], [5, -38], [-2, -23], [-12, -20]], [[87489, 51200], [-13, -11], [-15, 12], [-15, 44], [5, 34], [17, 23], [15, -23], [4, -30], [11, -2], [-9, -47]], [[77545, 50818], [-26, -3], [-55, 69], [-13, 31], [-3, 42], [-52, 159], [-7, 37], [20, 131], [54, 31], [18, -22], [6, -59], [30, -106], [10, -57], [8, -26], [3, -19], [-2, -14], [22, -68], [15, -39], [2, -64], [-30, -23]], [[86389, 51085], [-10, -16], [-34, 15], [-17, 35], [-12, 48], [-8, 39], [-2, 32], [-10, 38], [1, 14], [62, 40], [12, -15], [26, -1], [12, -29], [-8, -127], [-12, -73]], [[86362, 51395], [-7, -30], [-14, -19], [-119, -36], [10, 21], [5, 21], [8, 11], [12, -3], [6, 7], [5, 2], [7, -3], [12, 9], [24, -6], [25, 5], [-2, 28], [28, -7]], [[87606, 51467], [59, -22], [21, 1], [21, -25], [26, 12], [14, -8], [49, -88], [24, -58], [35, -50], [26, -17], [-19, -45], [-39, -24], [-15, -1], [-30, 27], [-25, -5], [-21, 34], [-4, 52], [-21, 119], [-29, -34], [-33, 54], [-9, 1], [-3, -9], [-14, 19], [-12, 37], [-1, 30]], [[85360, 51393], [-3, -12], [-29, 15], [-8, 8], [15, 82], [14, -2], [12, -78], [-1, -13]], [[86284, 51538], [-16, -1], [-28, 25], [16, 22], [11, 5], [9, 13], [5, 0], [12, -11], [7, -19], [-16, -34]], [[83850, 51608], [12, -25], [-7, -30], [-9, 7], [-26, 0], [-9, -2], [-12, -18], [-7, 0], [5, 27], [21, 41], [14, -6], [18, 6]], [[89158, 50339], [0, -111]], [[89158, 50228], [0, -117], [0, -117], [1, -118], [0, -117], [0, -117], [0, -117], [0, -117], [0, -117], [0, -117], [0, -117], [0, -117], [0, -117], [0, -118], [0, -117], [0, -117], [0, -117], [0, -117], [0, -50], [-9, -61], [-19, -92], [-3, -74], [15, -57], [16, -38], [0, -96], [0, -118], [0, -117], [0, -117], [0, -117], [0, -117], [0, -117], [0, -117], [0, -117], [0, -117], [0, -117], [0, -8]], [[89159, 46590], [-14, 19], [-39, 64], [-34, 74], [-23, 68], [-25, 62], [-108, 184], [-27, 61], [-6, 16], [3, 16], [12, 32], [22, 92], [-23, -57], [-27, -45], [-40, -3], [-39, -11], [-37, -27], [-37, -10], [-18, 14], [-11, 34], [-6, 35], [-3, 36], [-15, -59], [-31, -33], [-41, -69], [-12, 14], [-7, 27], [-3, 27], [8, 29], [6, 31], [8, 73], [19, 44], [12, 84], [8, 30], [4, 30], [-11, 34], [-18, 12], [-13, 20], [-15, 57], [-9, 20], [-16, 23], [-13, 28], [14, 20], [19, 8], [15, -1], [27, -13], [13, 0], [31, 21], [-17, -7], [-18, 1], [-57, 37], [-35, 38], [-33, 77], [0, 15], [23, 14], [51, 16], [-16, 39], [-23, 34], [-8, 61], [-15, 38], [-34, 61], [-23, 64], [-19, 129], [-20, 98], [5, 35], [17, 25], [-26, 3], [-23, 19], [12, 47], [27, 28], [-25, -7], [-23, -14], [-11, -2], [-11, 4], [-6, 19], [-1, 27], [3, 48], [-4, 46], [-21, 22], [-17, 33], [-10, 13], [-13, -1], [-12, 22], [-10, 32], [-126, 139], [-8, 40], [-11, -18], [-12, -8], [-14, 23], [-16, 15], [-16, -2], [-15, 12], [-16, 7], [-17, 1], [-66, 43], [-63, 68], [-51, 29], [-31, 38], [-33, 31], [-73, 30], [-74, 20], [-27, 1], [-22, -7], [-22, 2], [-122, 147], [-21, 67], [2, 39], [6, 33], [50, 9], [-36, 9], [-14, -4], [-29, -27], [-16, -2], [-22, 18], [-21, 22], [-35, -20], [-17, 34], [-7, 35], [-9, 17], [-13, -2], [-17, -13], [-18, 2], [-11, 25], [-8, 32], [-12, 23], [-15, 17], [-24, 42], [-12, 56], [1, 98], [4, 36], [24, 57], [16, 54], [-20, 6], [-19, -25], [-8, -25], [-3, -31], [-2, -103], [-15, -30], [-22, 2], [6, -60], [-9, -57], [-26, -67], [-2, -31], [4, -33], [-6, -32], [-42, -94], [-14, -5], [-32, 1], [-32, -15], [-15, 22], [-13, 28], [-9, 34], [-13, 70], [-10, 71], [32, 88], [-11, 80], [-21, 68], [-55, 94], [-57, 90], [-26, 18], [-43, 8], [-13, 9], [-13, 33], [-10, 39], [26, 17], [46, 46], [26, -3], [70, -24], [21, -23], [20, -13], [48, 75], [38, 99], [24, 21], [20, 7], [20, -9], [41, -34], [32, -16], [23, -4], [12, -30], [13, -14], [3, 46], [12, 54], [22, 17], [12, 3], [8, 14], [-2, 50], [-30, 6], [17, 43], [14, 21], [5, 21], [1, 26], [-59, -50], [-62, -21], [-36, 5], [-37, 1], [-73, -33], [-27, 1], [-65, 13], [-36, 17], [-27, -13], [-27, -1], [-28, 38], [-23, 48], [-12, 34], [-16, 25], [-7, 33], [-17, 126], [-2, 89], [-27, 2], [-28, 9], [-121, 85], [-15, -21], [-17, -11], [-17, -4], [-17, 5], [-17, 13], [1, 23], [13, 58], [12, 21], [17, 17], [11, 30], [18, 92], [1, 31], [-2, 32], [1, 24], [11, 12], [46, 30], [95, 45], [24, 27], [20, 43], [24, 26], [10, 27], [12, 21], [74, 57], [32, 4], [32, -6], [65, -34], [61, -54], [53, -72], [57, -52], [70, -8], [35, 5], [34, -7], [14, -15], [24, -44], [-7, -29], [-4, -60], [13, -58], [20, -58], [16, -62], [3, -30], [-6, -65], [-5, -31], [-20, -53], [-11, -58], [7, -71], [4, -71], [-1, -66], [4, -65], [10, -65], [47, -180], [27, -122], [9, 68], [-2, 76], [9, 27], [14, 15], [17, -16], [4, -30], [2, -67], [14, -131], [19, -6], [21, 20], [3, -40], [-1, -74], [10, -59], [8, -23], [34, -48], [15, -9], [44, -12], [33, -3], [32, 17], [21, 44], [18, 47], [65, 110], [18, 53], [18, 80], [7, 18], [63, 87], [8, 31], [9, 59], [14, 58], [10, 30], [62, 28], [64, 16], [64, 53], [27, 46], [2, 30], [-14, 53], [-1, 23], [15, 23], [56, 67], [66, 69], [53, 47], [29, 0], [27, -42], [28, -34], [150, -101], [24, -31], [21, -42], [30, -29], [33, -14], [31, -27], [28, -35], [64, -64], [86, -79], [21, -5], [80, 4], [14, -15], [13, -21], [12, -5], [91, -14], [14, -15], [13, -21], [8, -57], [62, -2]], [[79020, 51650], [26, -56], [6, -20], [-13, -31], [-10, -44], [-6, -9], [-20, 16], [-14, -43], [-9, 69], [-20, 44], [12, 44], [5, 4], [6, -2], [6, -11], [31, 39]], [[85434, 51659], [32, -86], [-21, -82], [15, -46], [40, -2], [10, -17], [7, -21], [4, -28], [-10, -23], [-23, -20], [-26, 29], [-7, 28], [-5, 10], [-35, -21], [-10, -2], [-6, 39], [8, 55], [-24, 25], [-23, 57], [-1, 24], [9, 39], [-1, 32], [13, 3], [23, -43], [11, 40], [9, 17], [11, -7]], [[85346, 51557], [-17, -15], [-19, 1], [-4, 61], [6, 78], [18, 13], [27, -16], [-10, -20], [8, -42], [-9, -60]], [[78815, 51642], [-36, -20], [-41, 15], [5, 34], [20, 41], [17, -2], [31, -27], [12, -23], [-8, -18]], [[86336, 51840], [48, -24], [11, 4], [70, -64], [11, -31], [-4, -21], [10, -29], [-22, -43], [-11, -5], [-12, 16], [-22, 10], [-25, -18], [-17, 13], [-14, 40], [-24, 24], [-35, 84], [-17, -3], [5, -33], [14, -21], [20, -64], [11, -6], [11, 2], [16, -27], [-1, -41], [-40, -16], [-14, 30], [-3, 55], [-23, -19], [-9, -19], [-7, -2], [-15, 57], [-43, 3], [-29, 30], [14, 32], [2, 30], [19, 17], [19, -15], [19, 22], [14, -6], [10, 14], [38, 9], [25, 15]], [[77349, 51537], [-17, -27], [-25, 26], [9, 37], [4, 51], [15, 41], [5, 47], [-29, 130], [14, 5], [12, -14], [19, -87], [17, -52], [-7, -70], [-17, -87]], [[79104, 51741], [8, -9], [10, 30], [19, -41], [11, -21], [15, -20], [-15, -1], [-6, -19], [-4, -4], [-59, 66], [-38, -21], [-25, 19], [-8, 14], [14, 36], [13, 83], [26, -21], [6, -26], [-2, -7], [17, -16], [18, -42]], [[85985, 51735], [-12, -2], [-10, 34], [-28, 37], [-17, 65], [65, -107], [2, -27]], [[85403, 51839], [-1, -17], [-9, 24], [-6, 6], [6, 62], [4, 11], [5, -43], [1, -43]], [[79080, 51877], [2, -14], [-13, 16], [-8, 10], [-5, 8], [-29, 79], [12, -5], [32, -69], [9, -25]], [[78689, 52155], [-31, -4], [-9, 8], [4, 54], [9, 33], [14, -1], [16, -49], [-3, -41]], [[85394, 52213], [-10, -7], [-3, 2], [-3, 24], [5, 39], [12, 0], [5, -6], [1, -29], [-7, -23]], [[85380, 52298], [-9, -18], [-9, 6], [-6, 24], [2, 18], [8, 11], [9, -8], [5, -33]], [[78735, 52225], [-5, -7], [-24, 73], [6, 42], [6, 11], [13, -26], [10, -27], [8, -32], [-14, -34]], [[78840, 52304], [2, -17], [-25, 34], [-1, 24], [3, 11], [15, -26], [6, -26]], [[78955, 52323], [-18, -17], [-22, 53], [1, 12], [2, 9], [4, 6], [13, -27], [16, -10], [4, -26]], [[78618, 52273], [-5, -22], [-11, 16], [-54, 25], [-18, 2], [-47, 28], [-14, 14], [-10, 19], [3, 35], [7, 21], [4, 59], [12, 24], [23, -44], [26, -38], [15, -17], [46, -38], [16, -19], [7, -65]], [[78728, 52447], [2, -32], [-19, 8], [-13, 37], [11, 26], [7, 10], [7, -36], [5, -13]], [[78657, 52344], [-9, -17], [-14, 4], [-14, 20], [-20, 35], [-21, 31], [-28, 20], [-17, 5], [-6, 8], [6, 60], [18, 4], [58, -56], [19, -31], [28, -83]], [[78895, 52523], [18, -25], [14, 16], [-1, -21], [-3, -21], [-17, -59], [-28, 13], [-7, 19], [-2, 15], [4, 9], [3, 29], [12, 0], [7, 25]], [[79051, 52543], [1, -43], [16, -21], [4, -32], [-3, -51], [-14, -59], [-7, -15], [-20, 12], [-6, 19], [-3, 16], [3, 11], [-15, 14], [10, 22], [-7, 32], [-40, -20], [-12, -1], [-2, 36], [2, 15], [31, 45], [18, 9], [20, -10], [24, 21]], [[78451, 52413], [-13, -18], [-15, 28], [-13, 39], [-6, 41], [-6, 68], [-2, 48], [8, 28], [5, -1], [23, -28], [15, -49], [9, -15], [1, -45], [-5, -52], [-1, -44]], [[77077, 52687], [61, -162], [24, -22], [33, -74], [8, -25], [-9, -52], [-7, -147], [-15, -37], [-38, 18], [-1, 26], [-22, 111], [-39, 62], [-16, 3], [-10, 63], [-20, 76], [-60, 137], [46, -1], [22, 33], [5, 27], [4, 7], [34, -43]], [[78469, 52683], [2, -74], [-20, 20], [-17, 29], [-25, 22], [-32, 7], [-23, 19], [-16, 34], [0, 16], [1, 13], [5, 10], [119, -67], [6, -29]], [[84691, 52416], [-53, -98], [-17, -47], [-14, -51], [-21, -56], [-24, -50], [-12, -15], [-29, -27], [-17, -10], [-32, -4], [-97, -39], [-31, -5], [-32, 2], [-60, 10], [-12, 5], [-24, 51], [-27, 40], [-24, 5], [-24, -4], [-175, -3], [-61, -8], [-61, -18], [-33, 8], [-33, 21], [-24, 7], [-25, -2], [-115, -31], [-29, 3], [-58, 39], [-34, 8], [-33, -10], [-31, -36], [-11, -23], [-32, -81], [-18, -58], [-14, -73], [-11, -75], [-7, -61], [0, -64], [5, -72], [9, -71], [10, -55], [39, -126], [8, -17], [44, -36], [25, -45], [25, -126], [17, -65], [17, 0], [19, 4], [33, -8], [33, -17], [32, 39], [17, 73], [18, 55], [43, 103], [25, 48], [15, 15], [16, -6], [13, -28], [16, -22], [32, -11], [33, 7], [34, 34], [12, 20], [11, 26], [29, 22], [69, 0], [36, -8], [64, 9], [-1, 19], [-12, 20], [-4, 16], [12, 11], [41, 23], [42, 17], [31, -12], [27, -33], [11, -34], [4, -41], [-10, -105], [-5, -25], [-22, -12], [-20, 14], [-21, 54], [-28, 20], [-41, -16], [-14, -16], [-13, -22], [-23, -56], [-19, -64], [-41, -100], [-48, -86], [-23, -33], [-26, -23], [-83, -57], [-22, -42], [-17, -55], [-19, -19], [-22, -6], [-16, 10], [-33, 31], [-11, -25], [-2, -39], [16, -14], [27, -43], [20, -61], [13, -13], [29, -20], [12, -19], [22, -52], [34, -122], [12, -66], [19, -53], [58, -91], [3, -26], [-3, -30], [4, -27], [21, -52], [5, -34], [-23, -43], [-1, -62], [-14, -83], [-3, -28], [0, -26], [10, -24], [11, -18], [16, -10], [14, -17], [26, -65], [14, -17], [8, -23], [0, -36], [12, -20], [11, -37], [16, -9], [8, 10], [6, 16], [14, -6], [8, -25], [4, -33], [2, -37], [-1, -69], [-7, -24], [-15, 1], [-27, 28], [-1, -20], [2, -20], [-14, -7], [-16, 3], [-40, -3], [-73, -42], [-26, -26], [-17, -46], [-1, -31], [6, -68], [-9, -23], [-34, -9], [-47, 18], [-28, 18], [-16, 15], [-21, 45], [-8, 58], [16, 172], [4, 22], [7, 19], [8, 31], [2, 37], [-22, 45], [-34, 18], [-29, 37], [-111, 209], [-6, 21], [0, 34], [4, 33], [37, 114], [4, 22], [5, 91], [-1, 74], [-4, 75], [-17, 46], [-31, 15], [-32, 2], [-31, -15], [-30, -37], [-57, -79], [-22, -46], [-2, -60], [13, -58], [17, -54], [8, -58], [13, -207], [-1, -23], [-14, -60], [-6, -135], [6, -190], [10, -116], [-4, -63], [-26, -136], [-8, -75], [-1, -31], [31, -142], [7, -56], [4, -58], [-33, 28], [-15, -1], [-16, -9], [-34, -9], [-35, -1], [-12, -11], [-25, -38], [-15, -15], [-13, -3], [-44, 47], [-27, 52], [-24, 56], [-4, 63], [8, 66], [12, 70], [24, 116], [-1, 78], [8, 64], [14, 62], [5, 58], [3, 224], [-3, 20], [-33, 133], [-4, 22], [0, 36], [3, 34], [1, 31], [-7, 24], [-14, 22], [-16, 9], [-34, -9], [-68, -36], [-20, 31], [-15, 49], [-10, 68], [-5, 71], [2, 67], [10, 65], [-8, 45], [-12, 49], [0, 25], [7, 23], [12, 18], [15, 11], [14, 19], [37, 66], [12, 58], [1, 72], [10, 68], [19, 63], [22, 58], [7, 60], [-11, 96], [5, 43], [-4, 51], [0, 50], [13, 95], [42, 194], [40, 103], [16, 27], [21, -47], [16, -57], [1, 51], [-5, 50], [-16, 117], [-14, 228], [4, 21], [14, -3], [15, 20], [7, 36], [-15, 84], [0, 30], [28, 119], [24, 43], [10, 27], [6, 73], [12, 27], [16, 20], [20, 50], [11, 63], [7, 5], [8, 2], [12, -55], [14, -22], [28, -18], [24, 21], [7, 27], [9, 24], [14, 25], [12, 28], [14, 66], [18, 59], [12, 21], [15, 13], [16, 8], [16, 1], [35, -37], [21, -7], [20, 2], [14, -6], [10, -17], [9, -34], [11, -29], [10, -14], [12, -7], [76, 12], [67, -33], [91, -8], [32, -19], [30, -26], [36, -44], [14, -10], [15, 2], [19, 42], [14, 10], [15, 1], [59, -8], [158, -52], [23, 8], [96, 99], [38, 93], [34, 26], [11, 43], [7, 51], [12, 13], [29, 15], [11, 15], [21, 62], [24, 56], [11, 16], [34, -8], [15, -25], [19, -81], [-3, -14], [-22, -40], [-7, -17], [-25, -115], [-17, -56], [-21, -50]], [[78251, 53040], [16, -47], [3, -31], [-11, -35], [-4, -54], [-33, -42], [-28, 10], [-9, 15], [-18, 82], [2, 69], [11, 27], [26, -4], [27, 38], [18, -28]], [[85480, 52331], [21, -13], [21, 4], [10, 26], [3, 33], [11, 62], [24, 42], [17, 7], [12, 18], [-2, 46], [1, 45], [18, 48], [57, 68], [31, 24], [42, 7], [5, -25], [-5, -37], [8, -56], [-4, -150], [-10, -21], [-42, -52], [-47, -42], [-13, -17], [-12, -42], [1, -41], [38, -54], [59, -52], [13, -24], [8, -40], [2, -45], [14, -21], [20, -10], [13, -22], [11, -30], [-100, 70], [-26, 31], [-32, 4], [-31, 9], [-32, 27], [-34, 6], [-16, -19], [-7, -38], [-4, -43], [8, -53], [-1, -32], [-6, -58], [25, -171], [31, -137], [45, -142], [23, -49], [25, -44], [-41, 13], [-12, 48], [-52, 47], [-10, 28], [-34, 135], [-10, 25], [-31, 46], [-14, 33], [-5, 46], [4, 48], [-2, 66], [1, 65], [7, 81], [-11, 28], [-15, 26], [-17, 62], [-5, 70], [1, 40], [7, 35], [10, 31], [2, 30], [-25, 44], [-25, 124], [-2, 65], [32, 124], [-1, 60], [7, 36], [3, 38], [17, 83], [28, 70], [47, 99], [18, 21], [20, 14], [2, -24], [-4, -21], [-34, -101], [-5, -22], [-1, -43], [17, -24], [18, -51], [3, -68], [1, -72], [-4, -73], [-7, -25], [-28, -73], [-65, -85], [-5, -21], [0, -24], [12, -29], [15, -22]], [[77037, 53038], [-2, -13], [-29, 61], [-32, 34], [13, 8], [27, -9], [11, -9], [10, -30], [2, -42]], [[85681, 53025], [-44, -10], [-10, 27], [-12, 124], [31, 99], [40, 58], [27, 15], [9, 1], [24, -71], [-18, -144], [-21, -73], [-26, -26]], [[84835, 53370], [-3, -13], [-11, 68], [9, 34], [12, -13], [3, -12], [-11, -32], [1, -32]], [[76795, 53202], [-18, -5], [-16, 12], [-14, 33], [-75, 96], [-23, 1], [-16, 25], [-20, 8], [-21, 64], [-5, 35], [16, 16], [9, 35], [25, -15], [28, -62], [29, -23], [8, -12], [14, -34], [66, -85], [7, -28], [5, -29], [1, -32]], [[80246, 53516], [-14, -30], [-14, 19], [22, 61], [5, 4], [1, -54]], [[79377, 53492], [-12, -2], [-3, 17], [1, 29], [-2, 24], [-3, 17], [0, 30], [11, -15], [8, -14], [10, -10], [7, -6], [4, -5], [-7, -42], [-14, -23]], [[79523, 53661], [-1, -39], [-19, 23], [-4, 44], [7, 14], [13, -8], [4, -34]], [[82682, 53732], [-3, -19], [-24, 47], [-7, 33], [3, 27], [25, 2], [12, -17], [-6, -73]], [[84904, 53822], [-7, -18], [-34, 32], [2, 51], [-4, 25], [-9, 27], [-4, 26], [4, 28], [20, -36], [12, -57], [16, -55], [4, -23]], [[85236, 54013], [-5, -6], [-10, 15], [-6, 17], [1, 17], [7, 9], [14, -26], [0, -15], [-1, -11]], [[85199, 54075], [1, -25], [-17, 56], [-7, 65], [14, -23], [15, -49], [-6, -24]], [[82745, 54254], [9, -55], [2, -21], [-52, -29], [-31, 68], [6, 27]], [[82679, 54244], [27, -1], [39, 11]], [[80087, 53968], [-38, -21], [-22, 30], [24, 36], [8, 3], [6, 7], [2, 15], [-43, 24], [-12, 21], [-12, 54], [0, 34], [55, 91], [13, 10], [2, -38], [38, -95], [2, -64], [-1, -23], [-22, -84]], [[82659, 54245], [-3, -5], [-19, -16], [-9, -33], [27, -51], [1, -34], [21, -30], [24, -46], [1, -16], [9, -21], [4, -25], [-17, -26], [-24, -5], [-17, 24], [-16, 30], [-4, -37], [-13, -21], [-45, 6], [-32, 0], [-32, -10], [16, -5], [14, -12], [50, -96], [11, -35], [-17, -70], [8, -29], [19, -16], [24, -35], [17, -4], [12, -19], [0, -34], [7, -32], [-19, -12], [19, -8], [17, -16], [-9, -16], [-7, -20], [7, -10], [23, -19], [10, -16], [6, -45], [22, -73], [41, -95], [9, -34], [0, -32], [-6, -27], [-24, -32], [-19, -42], [-2, -15], [-26, -20], [12, -14], [9, -19], [18, -59], [42, -95], [22, -35], [87, -129], [46, -57], [60, -128], [31, -30], [6, -36], [-26, -54], [-38, -28], [-62, -15], [-62, 20], [-32, 15], [-28, 32], [-22, 63], [-29, 35], [12, -39], [7, -39], [-4, -43], [-11, -33], [-20, -25], [-21, -20], [-9, -14], [-53, -224], [-9, -60], [-16, -252], [0, -71], [24, -133], [2, -69], [5, -30], [-4, -25], [-11, -15], [-46, -41], [-32, -34], [-26, -48], [-21, -59], [-19, -44], [-25, -20], [-18, 3], [-14, 20], [-10, 38], [-6, 42], [-4, -31], [1, -30], [8, -33], [4, -34], [-5, -35], [-11, -28], [-29, -30], [-16, -26], [-2, -46], [-8, -26], [-11, -20], [-40, -46], [-9, -18], [-7, -24], [22, 4], [19, -4], [2, -45], [6, -34], [-8, -75], [-30, -50], [15, -11], [14, -16], [30, -12], [10, -53], [-4, -64], [-6, -58], [-21, -16], [-14, 11], [-14, -1], [-10, -17], [-2, -30], [19, 15], [-1, -75], [-5, -72], [-7, -40], [-11, -33], [-18, -10], [-16, 24], [-4, -28], [5, -24], [24, -58], [-15, -13], [-10, -20], [-5, -29], [-26, -66], [-11, -49], [-5, -52], [-12, -41], [-194, -180], [-156, -151], [-12, 10], [-7, 23], [-6, 235], [-19, 121], [-3, 68], [-22, -61], [-14, 6], [-15, 16], [-11, 19], [0, 26], [11, 75], [-14, -41], [-16, -31], [-16, 3], [-14, 16], [-5, 24], [-7, 4], [-35, -67], [-45, -35], [-25, 0], [-20, 21], [1, 50], [-2, 50], [-5, 29], [-13, 10], [-11, -4], [-32, -25], [-12, 3], [-7, -13], [-85, 180], [-18, -146], [-59, -78], [-44, -45], [-43, 17], [-45, 29], [-44, -35], [-47, -86], [-13, -13], [-14, 1], [-10, 11], [3, 65], [1, 64], [-4, 145], [-4, 28], [-13, 40], [-18, 28], [-11, -21], [-9, -28], [-36, 1], [-35, 23], [-30, -13], [-60, -58], [-32, -8], [-17, 12], [-11, 31], [6, 29], [14, 21], [-25, -17], [-21, -29], [-9, -19], [-10, 10], [-26, 65], [-54, -24], [-8, -8], [-13, -22], [-13, 11], [-7, 24], [-2, 136], [-28, 262], [-7, 134], [-6, 31], [-32, 49], [1, 69], [16, 57], [4, 68], [-5, 73], [-10, 71], [-12, 54], [-18, 46], [-24, 52], [-30, 39], [-63, 43], [-33, -4], [-13, 17], [-8, 23], [3, 43], [12, 30], [15, 7], [2, 17], [-33, 35], [-26, 48], [-9, 28], [-2, 31], [0, 73], [8, 46], [4, 25], [8, 76], [18, 24], [-3, 14], [-8, 10], [-11, 25], [-9, 29], [-20, 49], [-36, 60], [-6, 102], [-5, 150], [3, 68], [11, 128], [21, 40], [16, 12], [12, 17], [-10, 2], [-9, -6], [-15, -4], [12, 114], [6, 33], [25, 64], [30, 57], [12, 67], [17, 58], [70, 61]], [[80452, 53011], [-25, -76], [2, -28], [7, -24], [18, -17], [5, -93], [22, -53], [23, -48], [17, -24], [18, -35], [13, -32], [14, -27], [21, -26], [55, -112], [24, -32], [17, -33], [12, -12], [31, 9], [89, 81], [16, 5], [30, 14], [51, -4], [55, -28], [17, -1], [17, 17], [24, -5], [21, -9], [11, 7], [32, 59], [43, 17], [14, 58], [11, 54], [5, 59], [18, 23], [25, 20], [38, 26], [129, 4], [13, -11], [3, -29], [-3, -23], [5, -13], [17, -2], [16, -13], [65, -47], [27, -14], [16, 3], [30, -41], [16, 14], [22, 29], [21, 40], [19, 31], [27, 12], [35, -2], [41, 11], [31, 17], [35, -28], [9, 9], [6, 27], [18, 59], [8, 40], [7, 76], [5, 19], [13, 10], [14, 15], [4, 23], [5, 26], [-5, 23], [-7, 18], [-8, 64], [2, 29], [5, 22], [14, 11], [37, 47], [33, 55], [18, 27], [7, 17], [1, 25], [-14, 26], [-14, 13], [-1, 30], [1, 21], [4, 20], [-2, 19], [0, 29], [8, 31], [20, 46], [16, 30], [18, -19], [20, 9], [20, 15], [11, 54], [1, 25], [-2, 21], [6, 77], [2, 11], [13, 49], [1, 32], [-7, 76], [4, 57], [3, 119], [7, 21], [9, 61], [14, 64], [29, 35], [15, 46], [7, 8], [10, 1], [34, -34], [32, 37], [28, 5], [23, -5], [14, -16], [13, -11], [27, 36], [11, -6], [10, -12], [14, 0], [16, 9], [41, -8], [71, -2], [49, -22], [48, -61], [24, -12], [11, -1]], [[85226, 54166], [-11, -12], [-18, 4], [-2, 30], [18, 52], [12, 56], [-13, 14], [-12, 35], [-1, 41], [11, 76], [15, -6], [14, -33], [6, -62], [10, -47], [-20, -64], [-9, -84]], [[76803, 54855], [34, -5], [63, 31], [35, -3], [32, -23], [30, -13], [72, 17], [14, -5], [13, -13], [11, -20], [33, -75], [56, -92], [16, -59], [9, -67], [6, -15], [63, -127], [7, -54], [-9, -73], [19, -59], [61, -55], [36, -40], [8, -24], [5, -29], [21, -44], [25, -28], [78, -74], [103, -156], [59, -74], [48, -112], [18, -54], [14, -58], [29, -84], [50, -105], [13, -31], [13, -46], [16, -43], [19, -39], [22, -30], [22, -10], [37, -75], [20, -24], [-3, 59], [-17, 51], [0, 32], [3, 27], [14, 24], [16, 6], [31, -21], [49, -89], [21, -52], [16, -72], [13, -75], [20, -37], [27, -13], [31, -5], [28, -23], [65, -104], [22, -48], [16, -57], [12, -68], [7, -71], [4, -16], [42, -85], [22, -36], [27, -18], [78, -19], [28, -30], [23, -49], [10, -50], [-17, -44], [-61, -68], [-66, -47], [64, 16], [32, 20], [30, 31], [30, 39], [46, 55], [17, 11], [21, -4], [18, -16], [28, -53], [26, -57], [20, -66], [12, -73], [-22, -39], [-33, -28], [-45, -71], [-4, -28], [9, -18], [-11, -52], [25, -32], [4, -28], [-22, -39], [2, -24], [26, -103], [13, -24], [40, -52], [60, -53], [34, -25], [38, -19], [17, 1], [28, 8], [6, -20], [12, -102], [6, -64], [9, -137], [11, -57], [-1, -69], [15, -59], [30, -38], [32, -31], [15, -30], [0, -45], [-5, -36], [-11, -28], [-33, -60], [-6, -25], [-5, -65], [6, -30], [13, -2], [10, 16], [40, 87], [11, 16], [15, 12], [15, 8], [72, 0], [31, -13], [27, -29], [25, -36], [88, -228], [40, -126], [3, -31], [1, -33], [-7, -25], [-37, -86], [-4, -23], [-12, -94], [2, -67], [13, -29], [9, -30], [0, -28], [-25, -139], [-2, -23], [15, -226], [1, -61], [-3, -77], [2, -124], [-19, -384], [-4, -23], [-15, -59], [-20, 1], [-16, 10], [-12, 22], [-6, 28], [-9, 23], [-48, 71], [-13, -12], [-49, -88], [-13, -13], [-16, 11], [-25, 26], [-81, 93], [-5, -30], [-1, -40], [16, -101], [2, -44], [-15, -9], [-8, 2], [-33, 59], [-31, 65], [-35, 87], [-26, 42], [-23, 46], [-66, 177], [-17, 27], [-101, 124], [-20, 30], [-26, 51], [-28, 46], [-61, 72], [-106, 184], [-46, 105], [-51, 170], [-17, 43], [-86, 128], [-47, 77], [-20, 44], [-45, 155], [-14, 52], [-16, 46], [-28, 37], [-24, 44], [-49, 140], [-15, 55], [-11, 61], [2, 120], [-103, 366], [-26, 114], [-23, 158], [-6, 16], [-56, 142], [-19, 45], [-24, 43], [-20, 50], [-38, 162], [-15, 45], [-20, 33], [-73, 61], [-27, 34], [-22, 48], [-13, 62], [-14, 131], [-35, 199], [-38, 267], [-26, 119], [-30, 94], [-9, 21], [-133, 169], [-22, 25], [-24, 15], [-34, 11], [-27, 43], [-10, 78], [-6, 105], [-7, 63], [-7, 35], [-56, 75], [-21, 58], [-18, 65], [-17, 50], [-61, 172], [-21, 45], [-26, 32], [-76, 33], [-23, 29], [-37, 98], [-22, 50], [-67, 109], [-114, 230], [-23, 57], [-18, 60], [-14, 64], [-48, 177], [3, 36], [8, 37], [-1, 31], [-6, 31], [1, 27], [15, 16], [32, 21], [34, -2], [31, -9], [30, -17], [29, -38], [51, -94], [30, -33], [33, -15], [67, -22]], [[76489, 55191], [-6, -16], [-16, 8], [-18, 52], [6, 10], [12, -5], [21, -12], [2, -20], [-1, -17]], [[48774, 83055], [-56, -73], [-23, 13], [-19, -6], [-6, 2], [11, 26], [13, 61], [24, 24], [29, 64], [23, 17], [9, -2], [5, -6], [11, -71], [-16, -26], [-5, -23]], [[76080, 55778], [-17, -48], [-33, 145], [-15, 9], [0, 69], [8, 28], [38, 30], [10, -17], [20, -134], [-11, -82]], [[76036, 56080], [-26, -54], [-12, 33], [5, 22], [11, 13], [11, 17], [11, -31]], [[75956, 56381], [-22, -1], [-6, 24], [-9, 26], [6, 25], [12, 6], [16, -40], [4, -28], [-1, -12]], [[75982, 56484], [-13, -22], [-4, 3], [-1, 16], [-1, 12], [-2, 20], [-2, 37], [11, 30], [10, -6], [-5, -31], [7, -59]], [[70296, 56606], [-4, -7], [-4, -3], [-3, 1], [-1, 7], [0, 6], [4, -7], [5, 6], [5, 18], [1, 6], [1, -3], [-1, -10], [-3, -14]], [[75872, 56595], [8, -22], [-15, 4], [-15, 32], [4, 31], [6, 12], [12, -57]], [[75774, 57106], [-13, -4], [-7, 20], [-1, 23], [7, 15], [6, 7], [7, -1], [7, -39], [-6, -21]], [[75694, 57923], [-8, -20], [-29, 15], [3, 60], [-7, 58], [5, 24], [21, 42], [18, 18], [12, -56], [5, -55], [-20, -86]], [[70216, 58296], [-2, -4], [0, 10], [2, 17], [3, 11], [1, -1], [0, -11], [-2, -15], [-2, -7]], [[75747, 58399], [-13, -12], [-14, 15], [11, 23], [2, 47], [13, -26], [0, -30], [1, -17]], [[75837, 58776], [13, -79], [-22, 35], [-8, 24], [11, 17], [6, 3]], [[75754, 59253], [-9, -37], [-1, 80], [4, 10], [4, 3], [6, -8], [-4, -48]], [[75756, 58488], [-7, -14], [-9, 15], [-25, 104], [-5, 66], [-7, 23], [9, 33], [12, 11], [6, 37], [3, 57], [10, 46], [5, 13], [20, 0], [6, 6], [-3, 44], [-12, 20], [-4, 12], [0, 106], [3, 43], [8, 30], [-6, 64], [4, 24], [15, 33], [7, 72], [-6, 21], [14, 110], [-1, 73], [19, 74], [29, 33], [9, 1], [1, -62], [3, -21], [-17, -37], [16, -49], [-2, -17], [-6, -39], [-11, -37], [-15, -16], [-11, -50], [-7, -19], [22, -53], [7, -180], [-16, -49], [-19, -10], [4, -120], [-3, -26], [-19, -59], [-4, -26], [-11, -24], [5, -30], [9, -13], [0, -25], [-8, -64], [-1, -72], [-11, -59]], [[71866, 70211], [-1, 2], [-16, 43], [17, -45]], [[72038, 69761], [6, -11], [2, -4]], [[72198, 69639], [1, -3], [2, 0]], [[72502, 69218], [-12, 9], [-16, -4], [-17, -19], [-8, -12], [-37, -72], [-20, -22], [-18, -32], [-41, -98], [-23, -91], [-18, -85], [1, -61], [-7, -71], [-17, -41], [-11, -13], [-13, -62], [-9, -71], [5, -23], [22, -31], [21, -31], [28, -32], [26, -32], [17, -4], [4, 18], [6, 17], [20, -9], [23, -31], [15, -24], [7, -8], [40, -41], [34, -34], [42, -43], [11, -27], [9, -28], [20, -37], [48, -66], [42, -47], [34, -38], [26, -27], [12, 4], [14, 15], [12, 8], [13, -8], [21, -20], [49, -63], [45, -48], [50, 8], [13, -7], [10, -45], [6, -44], [55, -30], [37, -13], [41, -25], [21, -18], [22, 23], [4, 20], [18, 12], [29, -6], [54, -34], [23, -11], [19, 33], [35, 16], [19, 17], [38, -37], [70, -46], [36, -28], [9, -28], [3, -27], [0, -65], [9, -29], [70, -66], [23, -27], [19, -9], [10, -1], [7, -9], [7, -37], [5, -9], [13, -9], [15, -6], [45, 33], [31, 24], [22, -6], [15, -27], [2, -40], [8, -42], [16, -20], [17, -3], [42, 29], [34, -22], [31, -8], [35, -14], [13, -10], [36, -35], [44, -35], [17, 4], [70, 66], [6, -8], [15, -63], [21, -22], [34, -20], [35, 36], [27, -10], [34, -4], [32, 18], [28, 4], [40, -31], [9, 7], [8, 20], [16, 90], [14, 80], [-2, 48], [-12, 69], [-33, 91], [-3, 28], [11, 158], [13, 91], [10, 44], [12, 61], [2, 29], [-2, 25], [-11, 16]], [[77033, 68097], [-3, -36], [-2, -40], [10, -32], [1, -28], [-2, -25], [-8, -18], [-23, -10], [-18, -30], [-31, -45], [-24, -35], [-17, -32], [-7, -32], [2, -42], [5, -43], [56, -159], [0, -28], [-18, -8], [-23, 18], [-21, 26], [-22, 68], [-19, 21], [-18, 4], [-109, -35], [-23, -10], [-36, -25], [-25, -52], [-18, -47], [-19, -18], [-28, -37], [-76, -112], [-44, -48], [-29, -18], [-20, -25], [-11, -42], [-8, -29], [-3, -73], [5, -90], [11, -58], [6, -12], [1, -17], [-11, -31], [-15, -26], [-7, -17], [-6, -82], [-13, -40], [-23, -59], [-21, -45], [-33, -35], [-13, -28], [-12, -52], [-7, -44], [0, -16], [4, -14], [13, -16], [17, -15], [8, -23], [1, -28], [-12, -68], [-22, -95], [-26, -74], [-26, -71], [-6, -24], [-23, -87], [-21, -120], [-13, -81], [-12, -56], [-15, -2], [-18, 18], [-43, 23], [-27, 19], [-21, 17], [-14, 0], [-19, -12], [-19, -7], [-12, 8], [-27, 50], [-8, -6], [-5, -24], [18, -143], [12, -53], [-2, -88], [-5, -109], [-7, -119], [-4, -28], [-12, -31], [-15, -9], [-14, 13], [-11, -3], [-3, -20], [3, -52], [-14, -58], [-10, -51], [3, -49], [5, -49], [16, -108], [0, -39], [-3, -36], [-9, -14], [-14, 2], [-7, -15], [-6, -22], [-16, -81], [-16, -9], [-15, 12], [-23, 55], [-14, 16], [-9, -1], [-4, -15], [-6, -32], [-6, -22], [-16, -19]], [[74736, 64569], [-7, -90], [-22, 1], [20, -60], [6, -44], [3, -60], [-24, -7], [-16, 7], [-14, 52], [-7, -48], [-24, -44], [-9, 22], [-5, 23], [-1, 41], [13, 157], [-2, 17], [-7, 12], [-13, 6], [-5, 32], [-21, -167], [9, -68], [-4, -32], [-38, -26], [-39, 63], [-5, 20], [-3, -35], [-7, -43], [-36, 8], [-19, 33], [12, 58], [23, 137], [4, 62], [-30, 45], [-26, 27], [-15, 63], [6, -69], [14, -24], [20, -17], [21, -35], [-15, -43], [-15, -27], [-29, -101], [-34, -57], [-41, -42], [-132, -63], [-28, -25], [-41, -78], [-26, -74], [-5, -75], [15, -81], [12, -127], [10, -26], [-14, -47], [-25, -49], [-20, -66], [2, -37], [-5, -24], [-70, -82], [-15, -47], [-19, -48], [-23, 27], [-14, 0], [19, -38], [-3, -25], [-6, -14], [-18, -14], [-101, -60], [-77, -57], [-22, 3], [4, 17], [14, 15], [-1, 66], [-15, 12], [-12, 4], [-59, -79], [-23, -79], [5, -15], [13, 4], [39, 44], [19, -12], [1, -18], [-60, -68], [-126, -220], [-6, -44], [-17, -49], [-22, -46], [-41, -112], [-78, -167], [-21, -62], [-125, -128], [-23, -39], [-51, -125], [-53, -102], [-62, -85], [-106, -108], [-65, -102], [-20, -68], [-2, -25], [7, -33], [12, -30], [3, -25], [-6, -44], [-3, -24], [-19, -60], [-33, -43], [-105, -90], [-14, 3], [-86, 18], [-32, -17], [-13, -42], [-30, -174], [-28, -46], [-11, -42], [-4, -29], [-17, 1], [-14, 13], [-11, -10], [-12, 59], [-21, 12], [-17, 4], [-73, -59], [-25, -47], [-53, -223], [-14, -144], [13, -159], [18, -127], [4, -57], [-2, -75], [-10, -36], [-6, -43], [8, -88], [23, -116], [5, -48], [1, -51], [17, -115], [-12, 20], [-9, 49], [-21, 62], [-26, -62], [14, -44], [49, -53], [15, -44], [-32, -386], [-24, -138], [-29, -90], [-16, -34], [-34, -142], [-24, -172], [-5, -67], [11, -74], [-12, -43], [-16, -34], [30, 15], [10, -40], [3, -42], [1, -246], [-3, -257], [-23, -11], [-25, -2], [-22, 7], [-16, 10], [-39, -14], [-21, -28], [-17, -47], [1, -81], [-72, -203], [-16, -67], [-6, -65], [10, -34], [18, -35], [24, -14], [47, -14], [23, -19], [15, -34], [-55, 36], [-65, 8], [-155, -95], [-41, -66], [-23, -57], [-15, -131], [-3, -88], [-18, -73], [-81, -112], [-51, -34], [-19, -30], [-60, 39], [-66, 98], [-27, 53], [-97, 253], [-18, 32], [-19, 108], [-4, 41], [-5, 16], [-9, 11], [-5, 16], [-21, 124], [-9, 130], [-14, 144], [11, -10], [17, -47], [8, -70], [1, -96], [12, -11], [11, 9], [-31, 222], [-28, 55], [-7, 4], [-7, 36], [-1, 44], [2, 22], [-21, 72], [-8, 44], [-48, 220], [-22, 157], [-33, 175], [-22, 62], [-34, 135], [-28, 63], [-30, 84], [-24, 38], [-9, 19], [-70, 292], [-21, 162], [-18, 76], [-9, 58], [-25, 247], [0, 44], [-3, 49], [-17, 105], [-31, 113], [-9, 70], [1, 28], [-20, 110], [-4, 50], [-13, 47], [-15, 42], [-16, 34], [-37, 112], [-14, 27], [-25, 72], [-18, 134], [-23, 52], [36, 0], [-22, 49], [-11, 32], [-12, 20], [17, 50], [-27, -1], [-15, 30], [-20, 93], [-37, 105], [-6, 57], [-32, 177], [-27, 426], [-26, 189], [2, 54], [-30, 165], [-15, 110], [-6, 93], [-8, 61], [-7, 121], [-12, 39], [-1, 23], [8, 55], [22, 85], [8, 54], [-10, 77], [-20, -80], [-18, -23], [-9, 60], [0, 80], [-2, 20], [5, 27], [49, -13], [-56, 49], [-6, 29], [-3, 22], [12, 40], [-20, 33], [-8, 103], [-6, 24], [-2, 19], [11, 142], [48, 280], [4, 63], [-5, 90], [-10, 71], [-5, 76], [-3, 19], [-17, 7], [-16, 28], [-19, 112], [17, 36], [13, 21], [-18, -9], [-15, 3], [29, 52], [25, 39], [59, 46], [25, 30], [-37, -27], [-38, -10], [-83, 6], [14, 104], [14, 35], [16, 19], [-23, -6], [-27, 9], [9, 106], [21, 22], [22, 5], [28, 15], [-30, 17], [-31, 9], [-37, -18], [-34, 13], [-42, 0], [17, -14], [17, -33], [-8, -57], [-9, -36], [-23, -24], [-18, -38], [-6, -32], [-10, -24], [18, -16], [19, -12], [11, -26], [13, -39], [-1, -75], [-49, -177], [-17, -39], [-124, -107], [-48, -58], [-104, -75], [-40, -14], [-44, 15], [-66, 57], [-99, 147], [-26, 48], [-79, 189], [-57, 99], [-44, 93], [-54, 88], [-51, 118], [-10, 54], [3, 54], [19, 30], [22, -12], [18, -46], [12, -21], [11, -8], [76, 71], [29, -3], [20, 35], [25, -7], [52, 55], [22, 3], [26, 11], [42, 140], [31, 89], [20, 19], [-1, 22], [-5, 28], [-16, -7], [-10, -27], [-8, -33], [-8, -19], [-24, 18], [-17, -3], [-20, -11], [-75, -52], [-31, -47], [-20, -9], [-119, 51], [-117, 118], [-49, 79], [-31, 100], [-31, 120], [10, 33], [48, 72], [42, 56], [-37, -25], [-41, -35], [-20, -24], [-22, -51], [-31, -12], [-11, 76], [-8, 74]], [[68934, 65585], [19, 25], [14, 16], [27, 13], [30, 10], [27, -1], [38, -1], [1, 174], [4, 15], [5, 8], [6, 4], [5, -2], [8, -26], [10, 1], [10, 15], [24, -11], [18, 7], [19, -10], [32, 0], [58, 4], [32, -1], [21, -28], [23, -30], [25, -4], [35, 3], [25, 12], [12, 28], [9, 27], [53, 40], [56, 32], [16, 3], [5, -18], [-3, -32], [7, -30], [22, -19], [16, -4], [14, 4], [10, 9], [23, 48], [12, 10], [15, -1], [17, 23], [0, 17], [-11, 8], [-9, 25], [2, 20], [-3, 29], [2, 27], [7, 20], [13, 20], [-8, 40], [-19, 77], [-20, 99], [-22, 82], [-27, 72], [-14, 53], [1, 117], [-2, 24], [-9, 14], [-13, 8], [-18, -12], [-16, -2], [-34, 3], [-17, 12], [-45, 117], [-6, 46], [-1, 47], [16, 82], [4, 77], [2, 71], [-2, 20], [-9, 24], [-16, 18], [-41, 4], [-49, 24], [-37, 41], [-26, 25], [-7, 17], [-3, 19], [6, 86], [12, 97], [9, 30], [15, 31], [11, 21], [17, 28], [48, 92], [43, 128], [26, 89], [14, 26], [14, 23], [20, 27], [24, 25], [23, -1], [23, -23], [16, -26], [6, -59], [12, -38], [13, -23], [16, -12], [22, 3], [86, 68], [29, 13], [70, 9], [49, 26], [42, 27], [5, 49], [17, 75], [50, 97], [14, 44], [15, 83], [16, 75], [14, 32], [79, 83], [77, 76], [13, 35], [50, 158], [28, 108], [8, 34], [16, 94], [18, 93], [24, 21], [53, 36], [42, 34], [21, 40], [13, 35], [-2, 34], [-12, 41], [3, 24], [2, 23], [30, 49], [58, 144], [34, 71], [12, 0], [35, 39], [35, 43], [-2, 19], [-5, 26], [-19, 11], [-6, 31], [4, 43], [17, 118], [-4, 34], [-19, 108], [4, 30], [8, 31], [22, 41], [29, 34], [92, 81], [19, 9], [32, 21], [20, 43], [2, 37], [-8, 22], [-19, 31], [-36, 28], [-33, 24], [-55, -3], [-29, 21], [-7, 15], [-4, 51], [5, 86], [-8, 8], [-13, -10], [-29, 10], [-36, -1], [-13, 24], [7, 29], [-2, 38], [-6, 37], [-5, 8], [-17, 9], [-27, 31], [-22, 39], [-12, 27], [-4, 18], [1, 12], [16, 34], [19, 48], [6, 41], [3, 30], [-6, 22], [-17, 27], [-18, 23], [-7, 21], [-1, 30], [7, 39], [22, 29], [38, 28], [10, 34], [-2, 25], [-10, 8], [-27, 0], [-45, 9], [-8, 14], [-5, 18], [0, 19], [10, 21], [11, 27], [-2, 26], [-13, 30], [-32, 21], [-4, 31], [5, 25], [10, 36], [9, 26], [22, 71], [26, 16], [33, 23], [35, 26], [55, -19], [27, -10], [54, -22], [45, -18], [47, -5], [19, 1], [21, -22], [52, -37], [43, -20], [29, 1], [42, 33], [21, 30], [29, 33], [36, -2], [79, 51], [15, -8], [24, -3], [28, 29], [14, 35], [3, 18], [7, 12], [30, 23], [30, 30], [9, 41], [5, 27]], [[71402, 72067], [33, 36], [35, 37], [36, 38], [41, 44], [35, 37], [28, 31]], [[71610, 72290], [3, -7]], [[71975, 70982], [6, -31]], [[72004, 70601], [1, -37]], [[76921, 44818], [-3, -3], [-3, 3], [-1, 1], [0, 3], [3, 1], [3, 2], [1, 5], [1, 7], [1, -7], [0, -6], [-2, -6]], [[76899, 44825], [4, -2], [4, 3], [2, -4], [-7, -5], [-4, 10], [-2, 16], [-1, 15], [2, 0], [0, -6], [1, -5], [1, -9], [-1, -6], [1, -7]], [[79367, 45798], [-8, -41], [-14, 23], [-17, 7], [3, 30], [14, 5], [7, 1], [10, 11], [5, -36]], [[70136, 47593], [-6, -23], [-12, -10], [-5, 58], [-17, 41], [7, 0], [15, -21], [6, -56], [5, 17], [-1, 17], [3, 16], [-2, 18], [-9, 28], [3, 5], [13, -23], [2, -19], [-2, -48]], [[47236, 82899], [-1, -17], [-21, 21], [-10, 22], [-56, 11], [23, 22], [12, -6], [40, -1], [11, -10], [2, -42]], [[48272, 83000], [12, -21], [5, -21], [-20, -7], [-22, 4], [-10, -14], [-1, -26], [8, -34], [14, -24], [11, -55], [10, -60], [14, -37], [3, -45], [-2, -22], [3, -40], [-6, -14], [4, -38], [18, -78], [7, -43], [5, -94], [-12, -36], [-16, -33], [-11, -40], [-8, -43], [-5, -70], [-36, -81], [-15, -20], [-18, -13], [39, -56], [-32, -26], [-34, -8], [-38, 14], [-23, -1], [-22, -19], [-8, -11], [-7, 6], [-14, 46], [-11, -48], [-22, -15], [-37, 3], [-62, -13], [-24, -14], [-10, -21], [-8, -25], [-10, -14], [-11, -8], [-48, -18], [-9, -8], [-23, -40], [-29, -23], [-24, -7], [-21, 23], [-9, 14], [-10, 8], [-33, -2], [10, -7], [7, -16], [3, -32], [-4, -31], [-16, -15], [-19, -3], [-31, -32], [-41, -9], [-22, -30], [-134, -50], [-7, 0], [-19, 13], [-20, 5], [-20, -4], [-56, -28], [-28, 6], [35, 69], [47, 35], [5, 10], [-16, 4], [-88, -24], [-31, -21], [-31, -6], [14, 32], [40, 43], [21, 21], [14, 8], [14, 25], [42, 29], [-135, -59], [-35, 7], [-8, 16], [-28, -7], [-10, 40], [40, 61], [24, 26], [29, 14], [27, 20], [10, 25], [-13, 8], [-82, -6], [-39, 5], [2, 20], [8, 22], [40, 37], [22, 6], [20, -4], [19, -9], [15, -13], [46, 8], [-19, 23], [-3, 49], [-15, 16], [19, 22], [21, 14], [36, 47], [13, 7], [71, 11], [76, 24], [76, 34], [-39, 19], [-19, 25], [-30, -51], [-21, -19], [-61, -10], [-19, 6], [-27, 15], [-9, -6], [-8, -12], [-40, -24], [-42, -6], [49, 45], [62, 76], [14, 25], [20, 42], [-6, 18], [-13, 11], [45, 87], [16, 15], [29, 3], [22, 14], [9, 0], [8, 5], [19, 26], [-29, 16], [-29, 9], [-92, -9], [-12, 2], [-12, 8], [-7, 11], [-6, 30], [-6, 6], [-21, 0], [-20, -9], [-15, 1], [-14, 13], [23, 30], [-29, 7], [-29, -6], [-25, 9], [0, 19], [11, 19], [-15, 18], [-3, 23], [16, 11], [16, -4], [35, 17], [43, 8], [-37, 16], [-15, 14], [-1, 22], [3, 18], [44, 32], [46, 13], [-4, 21], [4, 22], [-47, 7], [-46, -16], [5, 43], [11, 38], [2, 25], [-2, 27], [-22, -11], [-3, 38], [-9, 26], [-32, -18], [1, 35], [9, 24], [17, 11], [17, -5], [30, 0], [30, 19], [43, 4], [69, -5], [47, -52], [12, 9], [19, 33], [9, 3], [71, -14], [44, -18], [12, 6], [-7, 35], [-15, 25], [19, 33], [23, 22], [16, 11], [36, 14], [15, 13], [11, 42], [16, 35], [-90, -18], [-85, 41], [14, 29], [18, 17], [31, 13], [3, 15], [15, 13], [26, 33], [-9, 43], [5, 32], [19, 21], [6, 30], [8, 22], [38, 8], [37, 20], [13, -2], [43, 5], [15, -8], [-4, 36], [27, 4], [10, -7], [5, -25], [12, -17], [3, -28], [-8, -22], [-13, -17], [12, -17], [-19, -31], [21, 13], [29, 31], [-1, 25], [-5, 31], [-9, 28], [4, 31], [17, 20], [43, 10], [-18, 35], [16, 3], [18, -7], [25, -28], [26, -21], [28, -17], [-27, -35], [-32, -23], [-13, -26]], [[65607, 67350], [-26, -69], [-39, -58], [-17, 18], [-12, 0], [-28, -23], [-20, -3], [-37, -40], [-33, -20], [-23, 2], [-8, 4], [-5, 27], [0, 10], [15, -5], [51, 36], [64, 58], [6, 26], [-10, 43], [3, 9], [41, -21], [46, 42], [39, 11], [19, -29], [-26, -18]], [[63574, 73983], [1, -25], [8, -143], [7, -74], [9, -72], [16, -66], [18, -62], [25, -39], [56, -47], [27, -13], [71, -9], [71, -21], [41, -22], [13, -15], [11, -23], [34, -110], [54, -78], [110, -117], [53, -39], [179, -74], [119, 4], [328, 142], [110, 36], [41, 0], [-25, -28], [-41, -17], [25, -20], [38, -3], [18, 3], [13, 18], [2, 30], [-2, 30], [-18, 132], [-10, 93]], [[64976, 73354], [77, -7], [30, 13], [44, 31], [33, 19], [17, 2], [17, 15], [12, 18], [29, 127], [14, 32], [49, 72], [42, 45], [43, 40], [55, 28], [73, -2], [58, -10], [33, 0], [16, -3], [12, 4], [7, 9], [8, 55], [12, 18], [20, 16], [29, 0], [35, 4], [29, -4], [37, -21], [48, -2], [31, 4], [19, -22], [13, -28], [7, -24], [1, -32], [0, -25], [5, -9], [19, -15], [27, -11], [53, -14], [49, -25], [26, -18], [36, -27], [42, -68], [16, -10], [19, -7], [13, 2], [32, 28], [28, -21], [14, 3], [32, 16], [34, -20], [84, -74], [9, 2], [8, -8], [7, -17], [5, -21], [6, -64], [25, -46], [29, -43], [35, -23], [73, -56], [31, -45], [33, -77], [39, -102], [6, -9], [102, 3], [114, 0], [14, -40], [-3, -81], [4, -82], [11, -57], [0, -53], [-8, -27], [-7, -30], [-2, -13], [15, -20], [13, -43], [2, -61], [-7, -33], [1, -26], [7, -23]], [[66973, 69198], [-66, -141], [-7, -15]], [[66900, 69042], [53, -112], [33, -70], [46, -98], [6, -23], [0, -39], [47, -149], [17, -78], [15, -45], [37, -72], [37, -70], [40, -32], [27, -7], [62, -36], [22, -30], [36, -74], [43, 10], [9, 0], [2, -5], [1, -24], [-6, -115], [12, -116], [8, -175], [-3, -30], [-10, -51], [-1, -32], [-2, -20], [2, -9], [14, -12], [29, -7], [70, 20], [8, -5], [17, -21], [12, -32], [1, -16], [-17, -27], [-3, -45], [5, -69], [-3, -8], [-15, -16], [-5, -99], [-3, -9], [-18, -10], [-85, 6], [-10, -2], [-32, -26], [-54, -19], [-15, -11], [-21, -30], [-14, -36], [-3, -34], [-3, -7], [-31, 7], [-11, -29], [-61, -44], [-7, -9], [-9, -35], [-8, -98], [-8, -88], [-4, -12], [-19, -31], [-2, -10], [2, -34], [-8, -62], [-7, -172], [-8, -48]], [[67107, 66360], [-15, -4], [-12, -24], [-22, -30], [-47, 23], [-37, 24], [-124, 57], [-13, 28], [-8, 48], [-21, 13], [-31, -72], [-104, 42], [-36, -13], [-21, 22], [-57, 2], [-44, 45], [-64, -31], [-50, -6], [-69, 79], [-74, 22], [-60, -7], [-31, 6], [-50, 29], [-24, 29], [-39, -22], [-18, 41], [-110, 38], [-21, 74], [-15, 68], [-1, 70], [-27, 123], [-9, 177], [-10, 70], [-15, 60], [-20, 51], [-27, 55], [-24, 22], [-103, 42], [-20, -6], [-46, -27], [-49, -61], [-81, -34], [-17, -26], [-20, -59], [-26, -35], [-36, 9], [-39, -35], [-72, -97], [-38, -29], [-32, 2], [-34, 46], [-76, 62], [-49, 20], [-69, -14], [-32, 11], [-56, 72], [-14, 53], [-32, 35], [-99, 79], [-81, 105], [-15, 39], [-10, 59], [-35, 71], [-79, 58], [-45, 61], [-52, 14], [-49, -2], [-21, 11], [-20, 27], [-67, 127], [0, 51], [-41, 124], [-10, 45], [-9, 123], [-11, 32], [-43, 51], [-7, 33], [10, 44], [0, 34], [-23, 31], [-33, 17], [-8, 38], [6, 73], [-5, 47], [-30, 73], [-43, 76], [-44, 111], [-17, 28], [-11, 73], [-16, 87], [-24, 6], [-119, -104], [-35, 59], [-104, 102], [-8, 15], [-7, 23], [13, 14], [13, 5], [26, -18], [16, 21], [-6, 35], [-26, 21], [-36, -2], [10, -32], [-34, -30], [-7, -41], [5, -49], [3, -70], [-14, -33], [-10, -16], [-45, -4], [-21, -31], [-14, -7]], [[63484, 69102], [-18, 24], [-13, 19], [-10, 42], [-3, 29], [4, 16], [-5, 24], [-14, 32], [-15, 18], [-14, 3], [-13, 19], [-9, 36], [-23, 23], [-14, 5], [-1, 110], [0, 96], [0, 96], [-49, 4], [-43, 3], [0, 80], [0, 149], [20, 116], [21, 111], [-32, 82], [-34, 87], [-22, 37], [-26, 109], [-13, 48], [-11, 18], [-13, 11], [-45, -4], [-43, 58], [-50, 69], [-61, 84], [-53, 55], [-22, 12], [-52, 4], [-5, 11], [-3, 30], [0, 34], [16, 50], [2, 32], [-35, 107], [-11, 32], [-30, 12], [6, 31], [0, 21], [-4, 16], [-7, 8], [-9, 1], [-24, -13], [-17, 48], [-56, 138], [-18, 17], [-3, 9], [13, 42], [23, 63], [4, 36], [-4, 40], [-25, 75], [6, 32], [11, 36], [0, 28], [17, -4], [21, -1], [7, 23], [0, 78], [5, 29], [67, 132], [34, 30], [25, 27], [6, 40], [-5, 21], [-5, 30], [-2, 21], [-28, 60], [-10, 30], [-1, 27], [7, 48], [12, 38], [39, 22], [23, 19], [3, 16], [-29, 28], [-63, 8], [-46, -8], [-15, 9], [-21, 53], [-24, 28], [-21, 18], [-21, -3], [-13, 7], [-3, 22], [-31, 174], [-9, 24], [-14, 6], [-12, 1], [-8, 12], [-9, 24], [-6, 31], [0, 41], [1, 35], [-4, 23], [-11, 23], [-15, 16], [-13, 19], [-23, 153], [-9, 41], [0, 4]], [[62434, 73238], [1, 8], [-3, 35], [11, 30], [-1, 12], [-22, 39], [-31, 38], [-8, 7], [0, 41], [1, 31], [-3, 28], [-6, 16], [0, 12], [12, 30], [-8, 20], [-45, 49], [-17, 24], [-31, 5], [-4, 16], [5, 34], [11, 41], [17, 41], [6, 21], [6, 37], [2, 26], [19, 36], [1, 10], [-6, 13], [-15, 7], [-16, 3], [-5, 7], [-3, 19], [2, 79], [-5, 48], [-6, 35], [4, 78], [-11, 15], [-17, 41], [-7, 35], [4, 13], [3, 22], [3, 30], [-1, 21], [-16, 21], [-11, 22], [-2, 24], [-4, 29], [-7, 23], [-3, 15], [6, 9], [22, 7], [32, -4], [27, -1], [15, 15], [18, 141], [17, 37], [20, 22], [38, -50], [16, -18], [10, 0]], [[63484, 69102], [-25, -14], [-28, 11], [-59, 48], [-19, 2], [-25, -19], [-1, -16]], [[63327, 69114], [-63, 54], [-22, 11], [-8, 1], [-36, -1], [-51, -9], [-30, -22], [-21, -24], [-9, -23], [-4, -12], [-16, -67], [-19, -87], [-19, -78], [-38, -109], [-21, -51], [-45, -94]], [[62925, 68603], [-49, -19], [-113, 19], [-125, 20], [-125, 21], [-92, 15], [-8, 5], [-91, 134], [-73, 106], [-90, 133], [-93, 135], [-94, 137], [-68, 100], [-82, 128], [-76, 117], [-59, 92], [-77, 81], [-59, 63], [-87, 91], [-69, 74], [-60, 63], [-91, 96], [-31, 27], [-95, 32], [-90, 27], [-93, 29], [-62, 19]], [[60873, 70348], [41, 68], [-13, 62], [-29, -11], [-28, -15], [-16, 96], [21, 12], [-20, 125], [-20, 129], [-19, 125], [-20, 127]], [[60770, 71066], [78, 82], [59, 61], [83, 85], [79, 83], [75, 78], [84, 87], [74, 77], [68, 32], [15, 24], [31, 106], [26, 90], [2, 21], [0, 128], [4, 150], [9, 80], [16, 71], [14, 52], [1, 48], [-2, 49], [-14, 75], [-16, 77], [2, 75], [3, 40], [9, 64], [17, 46], [17, 29], [65, 30], [38, 18], [52, 83], [30, 49], [43, 78], [31, 57], [3, 20], [0, 8]], [[61766, 73219], [27, 11], [50, 70], [29, 64], [9, 6], [26, -21], [19, -6], [44, 25], [25, -13], [22, -17], [12, -1], [58, -40], [15, -5], [30, -5], [44, -2], [29, 26], [20, 26], [15, -1], [13, -6], [12, -11], [10, -19], [4, -27], [-1, -87], [4, -23], [8, -17], [10, -3], [12, 19], [21, 28], [26, 30], [20, 27], [11, 10], [18, -1], [17, -5], [9, -13]], [[45682, 89993], [32, -3], [52, 20], [22, 13], [53, 45], [32, 13], [49, -3], [23, 3], [1, -5], [-30, -18], [-24, -6], [-35, -27], [-32, -62], [-25, -30], [1, -13], [29, -24], [32, -13], [30, 12], [13, -5], [12, -17], [6, -18], [2, -17], [-6, -36], [-17, -37], [-24, -30], [3, -10], [19, -5], [92, 20], [10, -1], [5, -10], [1, -19], [5, -16], [9, -15], [-3, -15], [-40, -48], [48, 30], [37, 9], [65, -15], [26, -18], [15, -30], [23, 10], [9, -1], [15, -17], [0, -18], [-10, -27], [-4, -24], [-11, -10], [-21, -7], [-6, -9], [9, -18], [14, -18], [19, -1], [3, -9], [1, -10], [-3, -12], [-6, -8], [-10, -4], [-13, -13], [48, -29], [6, -10], [1, -16], [-4, -17], [-8, -18], [-15, -11], [-34, -2], [-22, -12], [7, -20], [0, -26], [-6, -29], [-28, -46], [-26, -24], [-25, -15], [-45, 5], [-24, 12], [2, -39], [-25, -24], [5, -20], [9, -10], [-5, -26], [-11, -26], [-20, -27], [-23, -17], [-45, -21], [-38, -35], [-26, -14], [-65, 1], [-67, -22], [-93, -47], [-64, -38], [-48, -43], [-65, -69], [-48, -30], [-27, -7], [-54, -7], [-45, -19], [-150, -35], [-50, -19], [-7, -18], [-21, -27], [-1, -9], [9, -8], [2, -9], [-19, -32], [-37, -22], [-17, 0], [-21, 20], [-10, -1], [-3, -3], [0, -6], [12, -24], [-23, -10], [-97, -28], [-166, 20], [-65, 22], [-81, 33], [-49, 9], [-68, 2], [-56, 47], [-26, 29], [-2, 12], [3, 14], [5, 9], [9, 5], [19, 0], [2, 5], [-14, 23], [-14, -8], [-36, -33], [-16, 2], [-21, 16], [-1, 16], [-41, 6], [-36, 20], [-36, 28], [-5, 11], [17, 16], [-3, 3], [-13, 3], [-26, -5], [-39, -36], [-17, -9], [-257, -8], [-65, -4], [-13, -5], [-11, 23], [-10, 53], [-4, 34], [3, 17], [9, 20], [14, -4], [13, -15], [12, -23], [14, -11], [89, 28], [37, 18], [15, 18], [18, 29], [20, 16], [9, 14], [18, 46], [13, 21], [14, 16], [18, 10], [40, 7], [-27, 11], [-24, 0], [-85, -48], [-28, 0], [1, 7], [12, 14], [29, 24], [-20, 1], [-8, 11], [-1, 22], [15, 37], [69, 47], [24, 7], [7, 10], [-9, 7], [-14, 5], [-70, -49], [-50, -17], [-15, 3], [-26, 19], [-8, 9], [-12, 22], [2, 13], [24, 38], [-4, 8], [-17, 3], [-44, 36], [-71, -4], [-174, 21], [-36, -9], [-59, -30], [-36, -10], [-16, 6], [-15, 16], [-14, 22], [-12, 27], [5, 19], [23, 11], [17, 5], [47, -6], [58, 19], [37, 4], [10, 3], [22, 20], [11, 5], [16, -7], [8, -14], [59, 22], [20, 10], [2, 7], [9, 8], [28, -12], [24, 0], [29, 8], [52, 3], [115, 2], [18, 18], [8, 15], [10, 39], [-4, 8], [-73, -36], [-16, 1], [-84, 19], [-30, 21], [10, 18], [44, 37], [46, 30], [67, 32], [16, 13], [2, 15], [-45, 26], [-85, -7], [-22, 31], [-70, 19], [-47, -12], [-25, 19], [-61, -26], [-134, -38], [-54, -27], [-28, -8], [-33, 21], [-57, 25], [-64, 7], [-6, 14], [37, 44], [26, 8], [26, -4], [49, -30], [34, -10], [-43, 45], [1, 17], [-3, 26], [-13, 11], [-13, 29], [5, 9], [17, 4], [34, -10], [82, -50], [40, 9], [22, 18], [29, 14], [-8, 7], [-70, 1], [-38, 10], [-19, 14], [-17, 25], [6, 11], [20, 10], [60, -3], [-40, 43], [-27, 24], [-3, 12], [2, 15], [3, 10], [6, 5], [69, -25], [15, -1], [-14, 16], [-30, 24], [-2, 9], [13, 7], [6, 14], [1, 11], [21, 9], [21, 1], [21, -9], [66, -46], [10, -13], [3, -17], [-3, -22], [2, -8], [26, 7], [21, -9], [10, 2], [26, 32], [17, -7], [11, -15], [3, -14], [2, -18], [-5, -39], [1, -5], [18, 22], [31, 1], [4, 11], [1, 41], [-3, 34], [-3, 7], [-101, 48], [-17, 11], [-22, 24], [5, 11], [19, 11], [30, 4], [68, -1], [7, 5], [-13, 13], [-32, 8], [-7, 7], [-4, 14], [-38, -8], [-42, 0], [-40, 8], [-1, 11], [16, 15], [33, 26], [15, 7], [46, -5], [46, 8], [37, -9], [29, -26], [42, -45], [57, -29], [5, -9], [30, -24], [60, -63], [60, -37], [3, -10], [-10, -11], [-23, -13], [5, -7], [31, -9], [21, -25], [2, -11], [-20, -78], [-10, -16], [-13, -9], [-56, 15], [14, -25], [40, -26], [9, -15], [-6, -14], [4, -4], [15, 8], [6, -8], [-3, -24], [-6, -20], [-10, -16], [3, -7], [16, 2], [14, -4], [23, -22], [19, -67], [9, -21], [7, 19], [8, 49], [8, 25], [7, 1], [7, 8], [5, 15], [11, 55], [38, 41], [18, 12], [16, 3], [9, -5], [28, -43], [17, -7], [9, 2], [12, 29], [15, 56], [3, 63], [-8, 69], [5, 49], [18, 30], [23, 9], [29, -12], [22, -18], [42, -68], [34, -36], [29, -39], [15, -12], [29, -7], [7, 3], [6, 9], [2, 15], [-6, 98], [8, 31], [12, 22], [53, 12], [28, 14], [28, 22], [22, 12], [19, 2], [19, -9], [19, -19], [31, -37], [39, -61], [50, -46], [26, -73], [5, -13], [6, -1], [7, 9], [4, 14], [1, 32], [-14, 43], [-46, 109], [-1, 20], [6, 17], [33, 1], [75, -9], [25, -17], [51, -66], [15, -16], [8, -5], [4, 9], [20, 12], [13, 15], [23, 36], [51, 66], [10, 2], [15, -5], [26, -18], [12, -13], [24, -11], [25, 4], [35, 23], [38, 14], [14, 32], [2, 15], [-31, 97], [13, 20], [68, 24], [59, 2], [14, -7], [38, -47], [25, -23], [13, -19], [3, -42], [15, -16], [29, -17]], [[59940, 70699], [-14, -3], [-35, -27], [-4, -8], [-6, -16], [-1, -12], [-5, -129]], [[59875, 70504], [-19, 3], [-23, 28], [-4, 25], [-7, 8], [-16, 3], [-31, 13], [-35, -43], [-15, -70], [-4, -33], [-12, -70], [5, -42], [2, -55], [3, -45], [-3, -27], [-7, -15], [2, -10], [6, -4], [19, 12], [21, -12], [20, -23], [1, -15], [-14, -9], [-33, -35], [-23, -41], [-6, -38], [-16, -81], [2, -16], [8, -10], [54, 9], [48, 32], [37, 35], [12, -2]], [[59847, 69976], [-8, -89], [-6, -54], [2, -10], [9, -47], [-16, -86], [-17, -71], [-7, -33], [-17, -74], [-17, -86], [-9, -60], [2, -21], [-5, -109], [3, -31], [-20, -94], [-5, -47], [-8, -63], [-14, -134]], [[59714, 68867], [-19, -44]], [[59512, 69820], [29, 48], [0, 41], [49, 94], [-1, 9], [-13, 25]], [[59576, 70037], [2, 4], [54, 175], [35, 173], [33, 241], [23, 122], [20, 81], [9, 67]], [[59752, 70900], [32, 5], [23, -7], [29, -3], [23, 26], [11, 75], [13, 12], [6, -18], [7, 20], [30, 33], [14, 22], [15, 26], [8, 10]], [[59963, 71101], [-5, -36], [-4, -23], [0, -30], [6, -16], [8, -33], [5, -33], [-10, -27], [1, -29], [3, -23], [8, -28], [-15, -50], [-16, -47], [-4, -27]], [[53347, 73016], [-13, -6], [-18, 19], [-1, 28], [3, 9], [22, -13], [6, -26], [1, -11]], [[54326, 73859], [-19, -66], [-9, -25], [-67, -160], [-7, -37], [-5, -40], [-7, -35], [-9, -34], [-9, -42], [1, -48], [4, -23], [8, -16], [13, -14], [10, -22], [-16, -21], [18, -40], [14, -24], [2, -24], [0, -24], [-30, -46], [-12, -24], [-8, -31], [-3, -31], [3, -28], [-1, -28], [-30, 4], [-32, 17], [-31, -8], [-45, 33], [-16, 5], [-15, 13], [-38, 100], [-30, 43], [-32, 33], [-33, 2], [-33, -4], [-29, 20], [-59, 68], [-63, 55], [-27, 35], [-12, 24], [-14, 16], [-36, 16], [-33, 37], [-14, 2], [-32, -4], [-16, 2], [-16, 13], [-32, 44], [-20, 60], [-5, 26], [14, 69], [17, 65], [15, 19], [17, 13], [11, 20], [9, 23], [32, -68], [15, -17], [14, 4], [26, 24], [2, 27], [29, 35], [36, 0], [17, -6], [9, -31], [14, -9], [16, -5], [53, -59], [15, -9], [15, -2], [41, 25], [31, 9], [66, -13], [36, 15], [25, 1], [36, 23], [28, 38], [15, 9], [15, 3], [38, -2], [38, -9], [16, 9], [13, 25], [16, 11], [17, -8], [44, 43], [19, 2], [18, -16], [-16, -27]], [[52355, 74347], [-16, -57], [-17, 40], [-1, 35], [3, 10], [20, -15], [11, -13]], [[53871, 75291], [-12, -5], [-7, 6], [-4, 9], [5, 22], [25, -13], [-1, -12], [-6, -7]], [[52301, 75483], [-9, -26], [-13, 2], [5, 19], [12, 39], [15, 13], [6, -11], [-7, -23], [-9, -13]], [[52675, 75392], [14, -37], [31, -151], [3, -32], [-6, -34], [-8, -23], [-31, -76], [5, -63], [11, -39], [2, -43], [-6, -54], [-19, -328], [-9, -58], [-6, -50], [-21, -16], [-28, 17], [-34, 28], [-16, -2], [-16, -10], [-13, 9], [-13, 16], [-9, -113], [-16, -46], [-23, -29], [-23, -2], [-23, 10], [-19, 0], [-15, 21], [-12, 38], [-18, 47], [-19, 55], [-2, 49], [-3, 109], [5, 24], [8, 23], [4, 49], [-3, 43], [6, 15], [11, -15], [8, 5], [-1, 22], [3, 40], [-15, 34], [-24, 11], [-2, 35], [2, 35], [13, 23], [4, 30], [1, 94], [-18, 34], [-6, 52], [-9, 33], [-16, 34], [-18, 27], [-12, 26], [-2, 69], [6, 58], [6, 24], [6, -3], [18, -29], [15, -6], [29, -7], [29, 9], [35, 26], [34, 31], [49, 93], [30, 18], [16, 25], [5, 33], [13, 8], [15, -32], [19, -3], [29, -26], [12, -26], [11, -30], [10, -13], [11, -8], [2, -7], [-9, -7], [-10, -35], [6, -10], [16, -19]], [[52887, 76530], [9, -22], [1, -13], [-6, -15], [3, -33], [-24, 28], [-35, -14], [-21, 3], [-6, 24], [5, 15], [33, 3], [11, 7], [20, -3], [10, 20]], [[53805, 78640], [-6, -33], [-11, -8], [-21, -20], [-24, -26], [-21, -30], [-6, -32], [6, -21], [6, -7], [8, 6], [11, -4], [15, -11], [24, -12], [1, -11], [-5, -14], [-19, -25], [-17, -29], [-2, -17], [2, -13], [6, -8], [25, 4], [4, -11], [-12, -73], [4, -13], [22, -12], [16, -17], [30, -47], [13, -38], [-9, -12], [-19, -7], [-15, 4]], [[53811, 78103], [17, 23], [-43, 82], [-19, 0], [-26, -35], [-72, 36], [-14, -15], [-10, -28], [-25, -35], [-35, -15], [-40, -38], [-41, -27], [-32, -21], [-18, 4], [29, 44], [-13, 1], [-38, -31], [-22, -27], [-7, -44], [-7, -74], [17, -19], [30, -97], [36, -41], [-7, -40], [-9, -31], [-22, -27], [-19, 20], [-11, 0], [-8, -64], [16, -168], [25, -119], [25, -51], [57, -81], [60, -42], [108, -136], [59, -42], [15, -24], [36, -104], [31, -121], [33, -189], [24, -94], [48, -105], [100, -151], [90, -111], [84, -68], [66, -12], [155, 15], [27, -6], [29, -19], [6, -47], [-10, -32], [-33, -33], [-33, -46], [-4, -63], [31, -44], [150, -117], [153, -98], [48, -50], [55, -78], [134, -107], [22, -52], [82, -111], [36, -87], [7, -67], [-17, -67], [-8, -48], [-14, -48], [-35, 18], [-39, 49], [-59, 197], [-108, 20], [-22, 15], [-39, 34], [-2, 22], [-10, 28], [-9, 10], [-42, 6], [-28, -32], [-34, -76], [-38, -109], [-39, -160], [-2, -64], [21, -63], [63, -35], [48, -56], [32, -58], [3, -140], [14, -80], [-21, -45], [-41, 11], [-54, -29], [-39, -51], [-16, -49], [4, -128], [-8, -48], [-73, -92], [-38, -94], [-10, -39], [-14, -45], [-93, -1], [-21, 55], [-1, 81], [16, 50], [34, 24], [22, 104], [-7, 75], [14, 33], [12, 23], [26, 14], [37, 13], [3, 105], [-28, 48], [-10, 66], [-14, 124], [-47, 157], [-25, 140], [-19, 69], [-30, 37], [-54, -1], [-27, 10], [-96, 98], [-6, 15], [0, 25], [16, 40], [-10, 52], [-12, 50], [-18, 43], [-21, 22], [-43, -14], [-15, -10], [-27, 4], [-21, -19], [-12, -1], [33, 75], [-9, 17], [-33, 31], [-45, 5], [-12, 4], [-8, -20], [-8, 11], [1, 33], [-53, 150], [-35, 61], [-17, 11], [-32, -13], [-54, 27], [-32, 6], [-17, -7], [-27, -19], [-13, 12], [-5, 20], [-48, 63], [-61, 35], [-118, 197], [-36, 74], [-75, 81], [-47, 119], [-39, 43], [-56, 35], [-13, -4], [-17, -13], [-13, -2], [-10, 15], [10, 16], [12, 7], [-4, 45], [-64, 118], [-38, 37], [-10, 24], [-8, 32], [-8, 20], [-18, 13], [-15, -3], [-21, 8], [1, 57], [4, 43], [-3, 37], [-20, 96], [-36, 82], [-20, 195], [-17, 55], [-39, 42], [-88, 46], [-122, 126], [-26, 2], [-74, 49], [-46, 8], [-59, -43], [-72, -121], [-59, -125], [-21, -25], [-75, -43], [-67, -20]], [[53443, 77151], [8, -24], [17, 4], [8, 30], [-3, 21], [-18, -4], [-12, -27]], [[28538, 62475], [34, -21], [35, -11], [15, 0], [14, -7], [32, -49], [26, -28], [97, -60], [33, -105], [6, -33], [-25, -19], [-32, -7], [-30, -1], [-28, 20], [-12, 16], [-29, 7], [7, 14], [-13, 7], [-16, -2], [-12, -40], [-14, -32], [-25, 3], [-10, 27], [-13, -12], [-11, -20], [-13, -75], [-21, 37], [-23, 31], [-28, 13], [-57, 2], [-28, 11], [-22, 63], [-9, 18], [-23, 17], [-22, 72], [-8, 10], [-62, 16], [-12, 40], [4, 36], [20, 44], [10, 12], [34, -1], [32, 13], [14, 19], [15, 12], [117, -32], [27, 0], [26, -5]], [[49439, 80202], [2, -29], [-12, -7], [-10, 10], [-21, 0], [-20, -6], [5, 52], [38, -7], [18, -13]], [[60873, 70348], [-41, -68], [-10, -7], [-53, -28], [-110, -57], [-73, -38], [-94, -49], [-78, -41], [-77, -40], [-71, -37], [40, -79], [63, -120], [41, -80], [49, -103], [44, -92], [46, -97], [-32, -33], [-54, -55], [-5, -10], [-5, -10], [-22, -97], [-18, -77], [-5, -9], [-75, -28], [-76, -29], [-48, -17], [-14, -20], [-31, -96], [-32, -98], [-54, -81], [-60, -89], [-14, -6], [-43, 14], [-74, 23], [-71, 23], [-49, 16], [-59, 18]], [[59708, 68751], [9, 76], [-3, 40]], [[59847, 69976], [4, 48], [9, 63], [17, 54], [-8, 126], [1, 68], [11, 78], [-6, 91]], [[59940, 70699], [30, -12], [17, -27], [29, -77], [44, -22], [18, -22], [25, -40], [30, -15], [94, -25], [75, 85], [63, 72], [73, 82], [49, 56], [83, 95], [56, 60], [72, 79], [72, 78]], [[84413, 65829], [-18, -8], [-21, 10], [-19, 2], [0, 18], [20, 17], [0, 25], [5, 13], [46, -30], [-2, -22], [-11, -25]], [[84525, 65965], [-16, -91], [-14, -13], [-14, 7], [-14, 51], [10, 19], [14, -10], [11, 4], [25, 74], [7, -12], [-9, -29]], [[84845, 66096], [-24, -15], [-25, 8], [4, 81], [9, -11], [5, -28], [19, -16], [12, -19]], [[89496, 67175], [-5, -1], [-18, 61], [5, 3], [10, -9], [12, -36], [-4, -18]], [[85627, 67196], [-27, -27], [-10, -31], [-25, -11], [-24, -44], [-23, -9], [0, -35], [10, -30], [-15, -6], [-17, -36], [-1, -27], [6, -22], [-1, -11], [-20, -31], [-22, -2], [-1, 35], [2, 25], [20, 63], [0, 73], [19, 8], [7, 10], [29, 52], [6, 22], [-16, 21], [1, 25], [4, 11], [24, -8], [10, -19], [5, -2], [14, 14], [6, 25], [27, 50], [11, 49], [21, -41], [-6, -52], [-14, -39]], [[85832, 67811], [-12, -11], [-15, 15], [-5, 66], [7, 32], [12, 7], [11, -57], [7, -24], [-5, -28]], [[85922, 68032], [2, -13], [-27, 11], [-11, 53], [18, -10], [6, -18], [12, -23]], [[85958, 68092], [-24, -47], [-25, 42], [-31, 29], [15, 7], [8, 11], [1, 18], [20, 27], [40, 20], [12, 2], [14, 19], [5, 17], [6, 9], [25, 24], [7, -28], [-1, -21], [-19, -12], [-19, -29], [-17, -36], [-16, -15], [-5, -11], [4, -26]], [[86283, 69275], [-32, -12], [-17, 13], [-16, 71], [30, 45], [41, -44], [8, -13], [-14, -60]], [[86377, 69352], [-24, -6], [-1, 34], [19, 75], [2, 55], [18, 70], [8, 15], [6, 6], [6, -22], [-7, -85], [-18, -65], [-9, -77]], [[86032, 70078], [-9, -10], [6, 45], [22, 40], [2, -26], [-21, -49]], [[86216, 70520], [-24, -3], [-11, 7], [-4, 18], [35, 37], [26, -6], [-11, -34], [-11, -19]], [[86133, 70408], [-22, -20], [-3, 19], [-9, 9], [16, 28], [0, 12], [-11, 19], [12, 71], [-3, 30], [44, 12], [8, -29], [1, -87], [-33, -64]], [[85740, 70727], [10, -15], [16, 9], [13, 2], [9, -8], [11, -40], [4, -24], [-20, -3], [-9, -5], [-11, -30], [-16, 11], [-10, 14], [-2, 19], [5, 70]], [[88844, 70884], [-5, -6], [-13, 19], [-2, 17], [2, 10], [9, 2], [18, -20], [-9, -22]], [[85854, 70760], [-7, -6], [-9, 52], [-6, 18], [10, 10], [21, 94], [4, -37], [8, -37], [8, -6], [-8, -27], [-12, -10], [-9, -51]], [[85969, 70980], [-19, -27], [-15, 0], [13, 32], [2, 15], [11, 43], [21, 15], [9, 2], [-17, -44], [-5, -36]], [[86054, 71283], [-20, -24], [-14, 19], [7, 51], [5, 17], [16, -17], [6, -46]], [[86437, 71199], [37, -17], [16, -1], [14, 7], [23, 23], [23, 17], [17, -9], [14, -20], [8, -28], [-4, -30], [-26, -63], [-22, -68], [50, -13], [50, 1], [-12, -42], [-1, -36], [15, -18], [13, -23], [-4, -21], [-7, -21], [27, -32], [-2, -21], [-7, -22], [-68, -145], [-20, -73], [-13, -81], [-13, -59], [-9, -61], [-8, -66], [-12, -68], [4, -61], [-4, -62], [-34, -153], [-25, 3], [-30, 18], [-19, -3], [-10, -34], [17, -70], [-54, -83], [-60, -56], [-1, 26], [6, 20], [9, 16], [6, 19], [9, 66], [-5, 65], [-18, 83], [-1, 29], [12, 12], [9, 4], [4, 11], [1, 27], [-6, 21], [-17, 6], [-17, 1], [-11, -31], [-16, -59], [-8, -59], [3, -33], [7, -29], [22, -49], [-6, -29], [-9, -22], [-77, 50], [-17, 4], [-14, 11], [-15, 67], [32, 16], [9, 8], [3, 22], [5, 65], [-15, 55], [-12, 19], [-11, 23], [7, 46], [-4, 58], [-1, 81], [6, 14], [29, 16], [21, 44], [19, 49], [27, 87], [22, 94], [-21, 5], [-18, 17], [19, 45], [-6, 56], [-29, 69], [-17, 81], [-26, 36], [-14, 13], [-17, -19], [-14, -23], [13, -53], [-1, -46], [2, -47], [13, -2], [16, 11], [13, -8], [7, -24], [2, -32], [-5, -31], [-12, -15], [-15, 1], [-14, 17], [-12, 24], [-27, 13], [-28, -28], [-28, -58], [-23, -29], [11, 42], [5, 47], [-11, 32], [-27, 54], [-6, 31], [-2, 38], [5, 37], [28, -43], [14, -53], [20, -23], [25, -1], [-19, 79], [-7, 20], [-28, 35], [-37, 59], [-23, 29], [8, 62], [14, 12], [12, -3], [39, -22], [4, 31], [-6, 16], [-3, 20], [26, 26], [42, 22], [9, 11], [8, 22], [10, 11], [30, 0], [25, 21], [20, 58], [5, 31], [8, 27], [51, 46], [13, 7], [34, -6], [32, -26], [16, -55], [13, -60], [33, -40]], [[86740, 71396], [13, -21], [32, 9], [4, -6], [-9, -19], [-14, -19], [-26, 14], [-16, 1], [-2, 31], [2, 12], [16, -2]], [[86826, 71494], [-8, -23], [-24, 7], [10, 20], [7, 24], [6, 5], [4, -26], [5, -7]], [[85910, 71499], [-18, -23], [-8, 35], [8, 102], [34, -21], [0, -31], [-16, -62]], [[87321, 71576], [38, -24], [39, 6], [0, -105], [5, -35], [11, -32], [-5, -46], [18, -16], [-53, -52], [-48, -70], [-20, -47], [-17, -50], [-11, -53], [-6, -58], [-16, 23], [-46, 93], [-29, 26], [-47, 13], [-15, -3], [-96, -87], [-13, -63], [-26, -96], [-12, -32], [-14, -9], [-10, -16], [-11, -82], [-30, -51], [-18, -1], [-31, 14], [-14, -8], [19, 81], [-30, 9], [-30, -1], [0, 52], [-18, 30], [13, 39], [0, 31], [8, 18], [3, 25], [-1, 22], [-18, 6], [-12, 16], [2, 57], [-10, 2], [-26, -10], [-54, -44], [-15, 0], [23, 31], [48, 43], [21, 25], [48, 69], [29, 33], [16, 58], [5, 36], [10, 31], [9, 49], [15, 17], [27, 43], [15, -4], [17, -53], [23, -40], [16, 3], [30, 21], [14, 5], [34, -3], [30, 26], [13, 30], [4, 37], [-11, 63], [15, -6], [14, 3], [33, 40], [34, 23], [35, 6], [40, -22], [39, -36]], [[87319, 71706], [-5, -11], [-5, 3], [-18, -26], [-4, 25], [-13, 17], [-2, 13], [40, 9], [13, -7], [-6, -23]], [[87480, 71594], [-30, -49], [-26, 3], [-13, 22], [-4, 27], [25, 43], [21, 60], [19, 27], [16, 15], [12, -1], [-27, -84], [7, -63]], [[85940, 71632], [-6, -28], [-19, 19], [-8, 18], [17, 87], [-2, 34], [1, 16], [35, 45], [6, -8], [2, -13], [-3, -20], [2, -43], [-27, -71], [2, -36]], [[88737, 71846], [-3, -27], [-15, 6], [-7, 18], [1, 32], [16, 0], [8, -29]], [[87046, 72697], [-12, -21], [-24, 7], [-14, 31], [5, 35], [25, 27], [23, -54], [-3, -25]], [[88428, 73630], [-26, -2], [-7, 6], [16, 14], [1, 24], [10, 42], [0, 13], [-21, 2], [1, 48], [16, 48], [43, 75], [11, 14], [2, -33], [-13, -77], [-3, -28], [34, -6], [-22, -93], [-42, -47]], [[89229, 75675], [11, -11], [52, 29], [-10, -88], [-5, -89], [4, -148], [4, -67], [9, -65], [22, -46], [29, -33], [42, -105], [23, -129], [16, -63], [11, -66], [4, -30], [0, -30], [-3, -41], [4, -33], [-5, -105], [-19, -121], [-2, -62], [-16, -12], [-10, -29], [-9, -13], [-9, -10], [-14, -3], [-9, -11], [-4, -33], [-6, -31], [-12, -28], [-9, -31], [-8, -75], [-3, -77], [-11, -54], [-28, -14], [-32, 1], [-40, -25], [-9, -15], [-32, -94], [-9, -56], [0, -59], [9, -73], [12, -72], [9, -133], [-10, -203], [-9, -65], [-20, -44], [-16, -20], [-13, -25], [-17, -66], [-29, -132], [-2, -34], [0, -34], [-8, -45], [-5, -44], [5, -51], [9, -48], [38, -123], [15, -36], [17, -34], [-65, -36], [-12, -17], [-39, -70], [-12, -67], [1, -73], [-7, -27], [-10, -23], [-12, -15], [-43, -34], [-28, -33], [-27, -52], [-11, -28], [-21, 9], [-13, 24], [12, 31], [-3, 35], [6, 93], [-7, 37], [22, 28], [10, 45], [24, 35], [16, 32], [3, 26], [-15, 28], [-15, 20], [-22, 0], [-21, -6], [-13, -27], [-5, -36], [1, -16], [-2, -15], [-32, -49], [4, -52], [10, -26], [12, -13], [-4, -17], [-15, -42], [-11, -4], [-20, 58], [-25, 32], [-31, 0], [-31, -12], [-25, -39], [-8, -32], [-5, -33], [2, -81], [-10, -68], [-19, -59], [-10, -22], [-23, -40], [-17, -5], [-12, 18], [-9, 28], [12, 101], [-1, 57], [28, 29], [-23, 41], [-28, 16], [-39, -21], [-11, -25], [-8, -33], [-21, -41], [-24, -39], [-26, -66], [-18, -79], [-58, 26], [-32, 6], [-32, -2], [-57, 9], [-63, -16], [-71, -30], [4, 22], [59, 47], [2, 14], [-6, 26], [-14, 1], [-35, -9], [-18, 4], [-8, 28], [-12, 12], [-7, -12], [2, -54], [-9, -7], [-11, 14], [4, 42], [-8, 61], [-1, 39], [12, 32], [-12, 14], [-14, -5], [-17, -16], [-14, -22], [-32, -112], [-12, -64], [23, -52], [63, -72], [10, -17], [1, -31], [-8, -32], [-17, -15], [-69, -24], [-59, -46], [-18, -47], [-54, -183], [-43, -125], [-62, -43], [-67, 39], [-16, 43], [-14, 54], [-25, 48], [-22, 53], [-13, 63], [2, 101], [-10, 61], [9, 16], [37, 37], [12, 21], [21, 48], [8, 27], [1, 41], [-17, 21], [-44, -1], [-43, -13], [-31, 18], [-41, 49], [-12, 11], [-43, 3], [-31, -9], [-31, -18], [-32, -6], [-11, -9], [-37, -60], [-29, -38], [-26, -19], [-55, -5], [-28, -12], [-29, -20], [-8, 1], [-30, -27], [-35, -24], [-19, -24], [-34, 16], [-68, -43], [-33, -5], [-34, 23], [-31, 38], [-30, -16], [-21, -56], [-10, -113], [-12, -50], [-4, -61], [-15, 10], [-91, 109], [-6, 4], [-74, -19], [-19, -9], [-23, -22], [-25, -10], [-23, 16], [-22, 26], [-21, -8], [-22, -18], [-8, 165], [4, 21], [14, 29], [14, 25], [36, 9], [36, -9], [25, 12], [22, 32], [23, 47], [26, 37], [35, 30], [34, 34], [30, 48], [28, 52], [26, 39], [28, 32], [43, 77], [57, 87], [22, 64], [13, 18], [49, 35], [65, 28], [31, -2], [30, -56], [17, 8], [16, 14], [34, 8], [34, -9], [34, 0], [33, 7], [65, 19], [34, 22], [33, 29], [118, 20], [82, 48], [12, -3], [13, -11], [1, -36], [-10, -39], [10, -24], [16, -14], [76, -5], [22, -8], [32, 26], [30, 33], [31, 44], [22, 49], [-20, 61], [-4, 67], [17, 73], [24, 62], [30, 37], [27, 42], [54, 121], [40, 98], [14, 121], [-8, 142], [34, 106], [33, 18], [66, 49], [34, 14], [5, -21], [-1, -28], [-51, -89], [-30, -36], [-17, -12], [-16, -16], [-7, -31], [26, -53], [7, -38], [-2, -37], [1, -34], [30, -36], [34, -12], [14, 0], [13, 10], [39, 89], [8, 15], [111, 65], [55, 50], [30, 13], [28, 26], [64, 100], [23, 46], [21, 51], [18, 59], [13, 64], [18, 40], [101, 95], [32, 52], [11, 25], [12, 73], [9, 75], [12, 59], [16, 56], [22, 57], [25, 52], [15, 54], [21, 128], [10, 72], [7, 25], [11, 22], [9, 27], [7, 31], [3, 30], [5, 93], [-3, 72], [-16, 61], [-14, 17], [-15, 1], [-23, -5], [-19, 24], [4, 22], [20, 4], [13, 12], [9, 21], [18, 66], [11, 71], [1, 31], [-14, 58], [-11, 69], [0, 37], [12, 43], [17, 34], [16, 9], [17, 2], [15, 13], [14, 20], [8, 21], [13, 59], [4, 33], [-7, 90], [8, 24], [11, 15], [16, -11], [15, -2], [19, 3], [17, -9], [4, -23], [11, -151], [6, -21], [13, -16], [14, 3], [13, 23], [8, 32], [17, 6], [51, -34], [18, 24], [11, 37], [11, 66], [-5, 60], [-13, 21], [-12, -4], [-11, -16], [-13, -9], [-75, -31], [1, 66], [16, 99], [9, 31], [12, 15], [32, -17], [15, -11], [34, -48]], [[88744, 76083], [-6, -3], [-7, 5], [-6, 43], [5, 23], [18, 16], [17, 5], [-14, -80], [-7, -9]], [[89248, 77833], [-19, -4], [-23, 24], [-3, 30], [17, 24], [16, -9], [16, -31], [5, -16], [-9, -18]], [[89186, 77956], [-11, -37], [-14, 55], [-3, 58], [8, 0], [16, -9], [3, -28], [1, -39]], [[89950, 77256], [35, -3], [16, 2], [26, -8], [106, -88], [32, -11], [33, -1], [23, 7], [20, 24], [64, 106], [67, 97], [8, -4], [0, -27], [-5, -29], [-30, -89], [-33, -119], [-7, -60], [11, -59], [20, -49], [17, -66], [19, -93], [26, -11], [14, -2], [27, 28], [25, 35], [22, 4], [22, -6], [-30, -24], [-28, -30], [-24, -57], [-9, -10], [-28, 3], [-16, -2], [-32, -24], [-29, -27], [-27, -33], [-30, -17], [-32, -4], [-49, -27], [-32, -2], [-59, 23], [-29, -6], [-63, -53], [-58, -77], [-50, -86], [-42, -104], [-17, -54], [-10, -60], [-2, -40], [-4, -38], [-9, -27], [-12, -22], [-35, 13], [-57, 55], [-110, 81], [-117, 123], [-66, 62], [-123, -19], [-117, -118], [-11, 10], [-44, 81], [-22, 32], [-26, 9], [-19, -1], [-19, -6], [-26, -41], [-10, -30], [-7, -34], [-2, -24], [3, -24], [25, -53], [31, -40], [13, -8], [30, 3], [14, -4], [49, -80], [55, -74], [12, -25], [-20, -26], [-22, -13], [-26, 3], [-25, 10], [-44, 32], [-18, -27], [-29, -56], [-16, -60], [-13, -28], [-32, -36], [-34, -19], [-17, 6], [-14, 23], [-7, 27], [-4, 32], [7, 69], [17, 62], [7, 63], [-14, 89], [-9, 18], [-36, 53], [-17, 50], [-4, 63], [2, 35], [9, 77], [9, 39], [16, 13], [18, 8], [28, 27], [30, 36], [29, 41], [29, 51], [15, 55], [-25, 68], [-5, 40], [4, 38], [26, 20], [27, -15], [55, -56], [11, -5], [37, -3], [51, -12], [30, 3], [14, 8], [22, 46], [10, 59], [-4, 75], [0, 75], [14, 61], [43, 99], [12, 57], [4, 141], [16, 62], [12, 64], [6, 135], [-17, 129], [-18, 64], [-20, 60], [3, 58], [16, 53], [0, 16], [4, 14], [31, 11], [14, 11], [14, 26], [16, 15], [12, -15], [10, -26], [43, -65], [68, -116], [80, -176], [50, -86], [53, -78], [59, -79], [63, -69], [39, -32], [29, -52], [18, -8]], [[71402, 72067], [-13, 50], [-7, 29], [-14, 58], [-13, 51], [-19, 78], [-13, 52]], [[63939, 77681], [-9, -17], [-15, 3], [-28, 61], [8, 62], [10, 13], [14, 8], [2, -13], [-20, -28], [-2, -35], [17, -39], [23, -15]], [[63975, 77748], [-10, -8], [-6, 37], [11, 31], [15, 4], [-5, -49], [-5, -15]], [[64633, 78001], [-5, -6], [-18, 16], [-12, 26], [15, 31], [14, -5], [9, -33], [-3, -29]], [[72280, 76146], [-39, 65], [-41, 63], [-33, 15], [-57, 10], [-30, 1], [-17, 15], [-17, 36], [-20, 34], [-26, 35], [-10, 53], [-11, 10], [-19, -7], [-31, 2], [-17, 5], [-26, 9], [-42, 22], [-32, 20], [-42, 4], [-23, -4], [-75, -4], [-61, 22], [-50, 4], [-31, -1], [-14, 2], [-25, 0], [-37, 5], [-50, 33], [-19, 2], [-12, -1], [-83, -25], [-38, -6], [-81, 3], [-79, 3], [-26, 5], [-14, -2], [-30, -59], [-13, -10], [-75, 13], [-88, 39], [-64, 43], [-54, 45], [-72, 71], [-43, 35], [-6, -21], [-12, -6], [-16, -3], [-38, 4], [-18, -36], [-46, -26], [-30, -23], [-15, -26], [-30, -173], [-8, -63], [20, -106], [-23, 6], [-26, 27], [-9, 22], [-26, 13], [-93, 19], [-18, 25], [-11, 20], [-24, 13], [-34, 10], [-74, 46], [-32, 1], [-96, 36], [-15, -1], [-7, -1], [-38, -23], [-24, -7], [-25, 9], [-46, -28], [-25, -38], [-20, -47], [-20, -29], [-6, -44], [-14, -23], [-16, -46], [0, -27], [15, -26]], [[69707, 76179], [-24, -23], [-27, -8], [-14, -15], [-14, -35], [-14, -30], [-8, -11], [-12, 2], [-14, 23], [-21, -1], [-24, -29], [-29, -47], [-36, -72], [-37, -39], [-48, -32], [-35, -15], [-27, -25], [-46, -50], [-9, -29], [-33, -18], [-26, -20], [-25, -34], [-6, -59], [-16, -34], [-37, -47], [-32, -47], [-21, -46], [-22, -49], [-6, -27], [-1, -37], [10, -31], [2, -30], [-8, -21], [-21, -8], [-23, 6], [-34, 21], [-36, 38], [-14, 18], [-18, 32], [3, 30], [9, 57], [7, 40], [-15, 18], [-11, 21], [-8, 19], [-16, 38], [-19, -9], [-17, -9], [-19, 13], [-58, -6], [-43, -4], [-41, -4], [-52, -6], [-62, -6], [-18, 9], [-11, 12], [-12, 53], [-6, 45], [-12, 84], [-8, 65], [-10, 77], [-6, 85], [-5, 61], [-47, 2], [-38, 2], [-51, 2], [1, 48], [0, 61], [1, 69], [9, 91], [4, 77], [4, 93], [3, 61], [4, 68], [-27, -21], [-29, -23], [-27, -22], [-19, 55], [-18, 53], [-28, 81], [-20, 61], [-36, 35], [-27, 27], [-28, 44], [-24, 46], [-22, 43], [-27, 38], [-26, -12], [-30, -24], [-28, -22], [-30, -25], [-15, -11], [-35, 4], [-30, 4], [-54, 7], [-46, 6], [-47, 6], [-65, 8], [-66, 9], [-44, -11], [-56, -14], [-59, -15], [-49, -13], [-61, -15], [-46, -12], [-23, 2], [-29, 49], [-45, 78], [-28, 48], [-27, 46], [-39, 68], [-32, 51], [-31, 49], [-17, 46], [-9, 58], [-16, 26], [-36, 35], [-38, 38], [-39, 38], [-38, 38], [-38, 38], [-39, 38], [-38, 38], [-38, 38], [-39, 37], [-38, 38], [-38, 38], [-39, 38], [-38, 38], [-39, 38], [-38, 38], [-38, 38], [-39, 38], [-31, 27], [-30, -7], [-44, -19], [-46, -21], [-45, -19], [-82, -36], [-53, -23], [-41, -20], [-44, -21], [-57, -27], [-48, -22], [-57, -27], [-49, -24], [-42, -20], [-44, -20], [-35, -17], [0, -132], [0, -132], [0, -132], [0, -133], [0, -132], [0, -132], [0, -132], [0, -132], [0, -133], [0, -132], [0, -132], [0, -132], [1, -133], [0, -132], [0, -132], [0, -132]], [[65549, 75646], [-12, 1], [-27, -8], [-44, -18], [-37, -10], [-17, 6], [-14, 14], [-13, 29], [-19, 35], [-20, 29], [-24, 59], [-17, 45], [-41, 99], [-6, 31], [-8, 32], [-13, 26], [-49, 65], [-57, 59], [-56, 57], [-16, 14], [-26, 18], [-32, 1], [-22, -4], [-67, -19], [-51, -22], [-70, -30], [-54, -34], [-12, -10], [-39, -40], [-49, -67], [-56, -94]], [[64581, 75910], [-7, 60], [-3, 94], [1, 30], [15, 79], [16, 54], [13, 56], [5, 73], [-11, 118], [-13, 26], [-16, 9], [-17, 2], [-30, -5], [-14, -9], [-25, 40], [-30, 6], [-16, -11], [-16, -6], [-17, 11], [-15, 24], [-10, 25], [-7, 29], [-23, 57], [-24, 31], [-28, 7], [-46, -1], [-15, 3], [-1, 33], [6, 72], [0, 38], [-3, 35], [-8, 29], [-10, 25], [-27, 42], [-21, 58], [-35, 120], [-30, 135], [-13, 21], [-27, 21], [-60, 17], [-39, 18], [-15, 17], [-7, 29], [1, 32], [3, 38], [9, 31], [31, 25], [67, 5], [58, -3], [53, -56], [17, -13], [18, -4], [37, 18], [19, 5], [46, -6], [-14, 27], [-17, 14], [-18, -1], [-16, 11], [-25, 52], [-45, 59], [-10, 24], [-3, 39], [8, 34], [32, 34], [26, 47], [13, 63], [11, 28], [23, 45], [34, -8], [54, 32], [87, -6], [105, 9], [29, -3], [67, -32], [39, -14], [46, -7], [34, 14], [-32, 44], [-69, 51], [-17, 44], [31, 119], [43, 109], [26, 129], [-7, 128], [-13, 35], [4, 42], [15, 35], [11, 35], [-9, 42], [-19, 65], [-10, 22], [-33, 35], [-66, 2], [-54, 19], [-17, -16], [-10, -24], [-13, -15], [-42, -32], [-14, -6], [-14, 6], [-21, 36], [-18, -4], [-56, 22], [-26, 49], [-10, 7], [-90, 38], [-32, 8], [-71, -40], [-52, -52], [-15, -7], [-27, -32], [-15, -6], [-16, 6], [-14, -2], [-32, -49], [-57, -57], [-28, -35], [-31, -23], [-35, -14], [-36, -2], [-13, -13], [-41, -4], [-25, -11], [-1, -19], [5, -43], [-21, 15], [-22, -30], [7, -28]], [[63675, 78534], [-13, 7], [-63, 54], [-51, 38], [-46, 34], [-7, 6], [-12, 16], [-9, 26], [-2, 28], [5, 20], [11, 13], [13, 5], [11, -4], [13, -12], [23, -16], [30, -2], [19, 11], [2, 28], [-35, 104], [-33, 84], [-31, 93], [-14, 34], [-39, 78], [-38, 77], [-30, 69], [-16, 21], [-48, 9], [-93, 16], [-33, 8], [-26, -20], [-27, -16], [-25, 30], [-20, 48], [-10, 41], [5, 42], [2, 62], [-15, 60], [-17, 30], [-42, 23], [-53, 51], [-15, 93], [26, 133], [42, 95], [30, 39], [15, 35], [5, 30], [-4, 29], [-18, 30], [-28, 29], [-14, 37], [6, 78], [18, 112], [29, 90], [38, 49], [33, 36], [13, 33], [1, 47], [-1, 45], [9, 32], [13, 26], [15, 23], [21, 25], [26, 7], [30, -21], [40, -55], [59, -109], [33, -71], [12, -22], [31, -42], [27, -17], [46, 26], [45, 31], [14, 20], [9, 29], [-7, 50], [-9, 33], [-10, 41], [-14, 72], [-9, 113], [-12, 36], [9, 4], [22, -7], [20, -3], [30, 25], [40, 47], [73, 72], [16, 48], [12, 53], [21, 33], [47, 10], [43, 17], [30, 38], [48, 33], [40, 20], [17, 19], [13, 27], [45, 79], [35, 48], [31, 49], [11, 32], [24, -6], [38, -22], [40, -20], [30, -30], [6, -31], [3, -25], [12, -13], [14, -2], [22, 6], [37, 1], [46, 41], [65, 68], [59, 21], [31, -16], [25, -50], [21, -48], [20, -17], [13, -1], [5, 0], [26, 10], [2, 0], [24, -2], [23, -16], [37, -1], [53, 12], [5, 5], [25, -7], [31, -21], [24, -26], [43, -85], [24, -22], [50, -31], [24, -26], [27, -43], [14, -26], [30, -47], [34, -77], [7, -61], [7, -52], [13, -25], [11, -3], [11, 9], [11, 23], [4, 40], [-3, 69], [-9, 57], [-12, 18], [-5, 20], [8, 26], [19, 12], [23, -8], [39, -32], [41, -42], [50, -72], [46, -45], [51, -37], [40, -11], [31, 11], [36, 30], [34, 34], [15, 37], [11, 39], [50, 53], [46, 48], [21, -9], [15, -14], [47, 30], [17, 8], [45, 11], [46, -17], [37, -51], [37, -34], [32, 4], [26, 17], [18, 32], [13, 38], [18, 25], [3, 1], [57, -13], [36, 2], [4, 6], [47, -11], [53, -53], [32, -59], [42, -76], [19, -25], [28, -10], [22, -5], [30, -11], [78, -16], [12, -9], [8, -13], [-7, -41], [7, -11], [63, 30], [17, 22], [21, 62], [19, 63], [13, 23], [15, 6], [15, -9], [21, -37], [28, -38], [38, -14], [23, -6], [36, -3], [85, 18], [79, 46], [45, 49], [21, 75], [13, 84], [20, 54], [-8, 54], [-40, 52], [-13, 16], [-97, 29], [-6, 21], [-6, 5], [-95, 46], [-46, 20], [-13, 30], [-8, 40], [-30, 35], [-59, 32], [-11, 25], [10, 25], [47, 28], [53, 58], [21, 12], [47, 2], [44, 48], [30, 27], [16, 33], [-4, 33], [-44, 101], [-13, 61], [8, 39], [25, 44], [14, 23], [18, 42], [11, 23], [44, 9], [54, 4], [37, -10], [52, -5], [47, -8], [23, -7], [18, 13], [13, 23], [-1, 30], [-18, 29], [-69, 38], [-30, 31], [-23, -3], [-39, 9], [-35, 21], [-31, 7], [-10, 29], [6, 40], [12, 22], [23, 12], [25, -6], [27, 17], [8, 9], [2, 13], [-4, 18], [-13, 15], [-17, 4], [-21, -13], [-24, -8], [-42, 18], [-33, 23], [2, 20], [24, 31], [11, 25], [0, 34], [0, 40], [9, 47], [24, 32], [28, 17], [74, -31], [92, -28], [16, 4], [4, 15], [11, 13], [127, 6], [25, 18], [12, 14], [123, 21], [14, 20], [18, 18], [29, 0], [33, 7], [47, 22], [33, 13], [6, 1], [35, -5], [43, 17], [9, 8], [8, 13], [37, 26], [73, 21], [18, -13], [35, -6], [44, 10], [33, 16], [19, -16], [25, -16], [20, 13], [9, 45], [13, 43], [22, 20], [17, 8], [16, 16], [11, 18], [64, -3], [58, 43], [11, -20], [74, 5], [93, 28], [55, 13], [96, 29], [44, 23], [63, 15], [58, 10], [38, 41], [31, 6], [37, 3], [22, 10], [15, 15], [10, 29], [-5, 36], [-6, 26], [27, 15], [38, 5], [24, 6], [52, 59], [36, 29], [38, 18], [75, -10], [68, -9], [69, -28], [36, -36], [31, -27], [29, -13], [26, -8], [31, 12], [22, 17], [13, 23], [19, 17], [70, 13], [14, -25], [34, -77], [22, -102], [38, -136], [16, -66], [-7, -35], [0, -48], [-2, -53], [-28, -59], [11, -28], [68, -31], [95, 11], [58, 25], [33, -9], [17, 15], [11, 44], [22, 10], [23, -31], [17, -52], [16, -34], [-1, -40], [6, -51], [11, -13], [24, 20], [15, 11], [4, 16], [-7, 19], [-3, 20], [5, 18], [11, 7], [33, -6], [48, -10], [57, -73], [31, -13], [13, -1], [29, 4], [35, 21], [23, 26], [8, 13], [13, -2], [13, -12], [1, -27], [-10, -38], [-35, -35], [-43, -33], [-26, -60], [-6, -63], [12, -32], [10, -21], [2, -30], [10, -4], [18, 13], [48, 61], [24, 16], [36, 10], [58, -5], [39, -20], [19, -28], [21, -24], [14, 10], [7, 27], [0, 30], [6, 25], [64, 62], [43, 41], [14, 5], [29, -9], [17, 5], [47, 38], [43, 44], [5, 30], [1, 27], [11, 12], [61, 10], [10, 5], [52, 30], [72, 52], [35, 31], [64, 14], [12, 9], [21, 21], [40, 28], [22, 3], [-13, -69], [-24, -80], [-14, -22], [-64, 4], [0, -22], [10, -34], [7, -18], [8, -17], [17, -30], [68, -69], [87, -87], [94, -99], [65, -69], [26, -36], [17, -27], [48, -101], [46, -95], [77, -168], [68, -162], [76, -178], [43, -103], [89, -216], [24, -67], [45, -125], [40, -118], [35, -104], [22, -10], [2, 28], [3, 19], [12, 11], [26, 31], [14, 7], [20, -3], [22, 16], [8, 29], [-5, 55], [-3, 25], [7, 27], [12, 11], [16, 8], [16, 5], [12, 30], [24, 9], [21, -5], [18, -1], [16, -23], [9, -30], [17, -3], [28, 4], [3, -26], [-8, -43], [-9, -33], [-2, -27], [15, -12], [54, 11], [19, -6], [6, -27], [8, -22], [4, -27], [-6, -30], [10, -18], [46, -1], [33, 15], [51, 1], [45, -32], [32, 5], [32, 13], [46, -8], [33, 25], [23, 31], [7, 25], [11, 14], [44, 0], [28, 2], [21, 37], [18, 16], [32, 3], [23, 0], [62, -34], [38, -28], [40, -39], [23, -25], [16, -57], [27, -41], [21, -49], [6, -48], [17, -86], [18, -28], [22, 0], [27, -12], [30, -9], [65, -64], [23, -2], [18, -15], [3, -30], [-7, -34], [8, -33], [21, -41], [16, -41], [21, -50], [6, -28], [16, -9], [23, 14], [35, -11], [106, -28], [15, -4], [11, -29], [15, 2], [18, 2], [24, -4], [17, 27], [14, 24], [35, 29], [29, 40], [25, 35], [18, 5], [15, -16], [0, -31], [-18, -22], [-14, -27], [3, -27], [25, -3], [27, -41], [39, -95], [13, -20], [20, -19], [21, -8], [24, -14], [17, -40], [8, -35]], [[61387, 50599], [-11, -5], [6, 33], [30, 43], [13, -10], [2, -10], [-1, -8], [-5, -9], [-34, -34]], [[61634, 54134], [-34, -101], [-41, -122], [-76, -224], [-57, -118], [-44, -89], [-4, -16], [1, -99], [0, -243], [1, -485], [1, -486], [1, -485], [0, -243], [0, -82], [38, -102], [38, -99], [49, -132], [26, -71], [5, -24], [-2, -47]], [[61536, 50866], [-40, -99], [-33, -45], [-45, -21], [-13, 4], [-18, 14], [-7, -24], [-5, -37], [-10, 8], [-7, 11], [4, -66], [5, -32], [-7, -44], [-22, -38], [-2, -32], [-47, -85], [-66, -10], [-35, -42], [-16, -34], [-12, -75], [5, -116], [-19, -88], [-3, -45], [-35, -57], [-15, -53], [-11, -54], [-10, -24], [-12, -120], [-16, -73], [-4, -25], [-4, -22], [-12, -43], [-8, -29], [-6, -20], [-41, -187], [-32, -85], [-24, 10], [-17, -33], [-2, -15]], [[60894, 49140], [-8, 8], [-21, 31], [-43, 64], [-42, 64], [-43, 63], [-43, 64], [-42, 64], [-43, 63], [-43, 64], [-42, 64], [-25, 37], [-11, 22], [-9, 44], [-4, 11], [-12, 14], [-13, 3], [-4, 8], [0, 21], [5, 31], [16, 58], [1, 35], [-3, 39], [-5, 62], [-4, 14], [-28, 33], [-59, 69], [-60, 68], [-59, 69], [-59, 68], [-59, 69], [-60, 68], [-59, 69], [-59, 68], [-59, 69], [-59, 69], [-60, 68], [-59, 69], [-59, 68], [-59, 69], [-59, 68], [-60, 69], [-22, 26], [-20, 21], [-21, 0]], [[59417, 51265], [-1, 99], [7, 249], [-1, 220], [6, 110], [26, 69], [12, 51], [9, 71], [14, 57], [31, 47], [5, 26], [33, 78], [20, 101], [15, 34], [18, 32], [13, 16], [22, 17], [17, 10], [3, 8], [1, 16], [-5, 62], [7, 21], [11, 41], [13, 39], [12, 25], [7, 25], [3, 44], [1, 31], [-1, 51], [-3, 116], [-14, 96], [-9, 108], [6, 36], [-11, 63], [-5, 4], [-9, 14], [-11, 59], [-9, 55], [-5, 14], [-37, 47], [-19, 113], [-21, 25], [-11, 112], [-2, 31], [12, 112], [-2, 26], [-12, 23], [-35, 24], [-28, 46], [3, 16], [2, 17], [-14, 11], [-44, 191]], [[59437, 54274], [56, 114], [56, 116], [73, 147], [66, 135], [57, 116], [51, 104]], [[70453, 74567], [-16, 5], [-29, 1], [-23, -10], [-15, -17], [-28, -22], [-35, -7], [-44, -3], [-21, 2], [-65, 14], [-21, -5], [-21, -11], [-36, -12], [-20, -36], [-10, -34], [-6, -4], [-23, 30], [-17, 29], [-12, 24], [-14, -1], [-52, -43], [-7, 1], [-15, 17], [3, 41], [-1, 26], [-17, 14], [-35, 3], [-12, 15], [1, 22], [3, 21], [-4, 16], [-9, 13], [-18, -4], [-21, -16], [-16, -20], [-19, -9], [-24, -3], [-14, -12], [-17, -47], [-57, -10], [-19, 11], [-15, 34], [-19, 53], [-11, 7], [-19, 6], [-30, -3], [-41, -22], [-10, 18], [-11, 6], [-9, -16], [-10, 2], [-40, -4], [-52, 2], [-29, 10], [-19, 0], [-37, -24], [-20, 0], [-26, -5], [-5, 82], [-14, 54], [4, 38], [9, 53], [8, 29], [16, -12], [19, -22], [12, 6], [3, 18], [-4, 23], [-1, 17], [7, 23], [10, 21], [66, 35], [56, 26], [29, -17], [56, -40], [29, -20], [20, -12], [18, -57], [11, 3], [12, 11], [7, 14], [6, 49], [26, 28], [58, 32], [4, 19], [-1, 11]], [[69710, 75022], [9, 9], [29, 9], [58, 9], [20, -6], [23, -20], [17, -19], [17, 1], [13, 4], [6, -5], [5, -17], [7, -15], [22, 20], [20, 27], [16, 4], [15, 10], [4, 18], [12, 29], [33, 57], [17, 9], [11, 0], [0, -9], [6, -9], [29, -13], [8, 15], [5, 21], [-10, 32], [0, 14], [4, 13], [5, 7], [46, -31], [10, 1], [21, 17], [19, 31], [7, 24], [94, 78], [7, 14], [-1, 10], [-40, 19], [-17, -11], [-17, 0], [-10, 12], [-48, 4], [-10, 8], [-32, 57], [-22, 21], [-18, 14], [-19, -2], [-23, -15], [-7, 7], [-2, 24], [1, 29], [-5, 32], [-14, 8], [-17, -13], [-26, 13], [-22, 4], [-6, 67], [-9, 29], [-9, 30], [-10, 9], [-16, 15], [-1, 35], [-3, 10], [-6, 5], [-7, -4], [-10, -18], [5, -39], [-4, -39], [-6, -20], [-11, -14], [-13, -1], [-22, 20], [-3, -119], [-4, -7], [-26, 17], [-21, -7], [-32, 7], [-23, 20], [-18, 5], [-28, 17], [-22, 21], [-13, 80], [-13, 28], [-12, 6], [-48, -27], [-18, 21], [-33, 27], [-24, 10], [-7, 15], [1, 18], [76, 89], [30, 61], [19, 25], [27, 18], [21, 10], [11, 55], [4, 7], [15, 4], [33, 23], [55, 49], [1, 13], [-5, 12], [-23, 25], [-26, 20], [-16, -10], [-9, -11]], [[69639, 74783], [-1, 12], [-10, 6], [-27, 6], [-19, 9], [-4, 1], [2, -12], [8, -20], [11, -21], [15, -3], [25, 22]], [[69938, 74855], [3, 26], [-7, -1], [-8, -7], [-15, -7], [-4, -13], [11, -16], [13, -6], [7, 24]], [[69779, 74822], [2, 8], [-10, 42], [14, 40], [-27, 6], [-14, 12], [-16, 40], [-5, 2], [-8, -11], [-4, -26], [3, -29], [12, -19], [7, -6], [1, -1], [0, -10], [-9, -46], [14, -6], [26, -1], [14, 5]], [[78699, 58017], [-11, -22], [-16, 46], [0, 12], [27, -36]], [[78623, 58343], [-5, -5], [-5, 0], [-5, 8], [1, 34], [3, 20], [9, 4], [2, -61]], [[79007, 57840], [-46, 75], [-90, 26], [-10, 33], [-9, 6], [-8, -43], [-50, -41], [-21, 25], [-15, 30], [2, 37], [15, 30], [24, 22], [12, 76], [-19, 97], [-16, 28], [-18, 23], [-18, -37], [-15, -61], [-16, -32], [-23, -7], [-33, 2], [-13, 93], [-4, 79], [4, 90], [5, 53], [-32, 74], [-2, 70], [-15, 37], [-4, -19], [0, -20]], [[78592, 58586], [-4, 15], [-51, 206], [-8, 95], [8, 74], [5, 25], [-14, 38], [-21, 44], [-36, 58], [-2, 91], [-8, 108], [-11, 36], [-17, 66], [-9, 55], [-3, 145], [5, 12], [26, 4], [32, 10], [6, 24], [-6, 19], [21, 33], [30, 72], [23, 75], [17, 48], [10, 47], [34, 67], [47, 46], [31, 11], [33, 15], [32, 23], [15, 2], [39, -27], [22, -7], [22, 0], [23, -3], [20, 3], [48, 19], [51, -15], [46, 12], [56, 22], [28, -14], [25, -22], [4, -44], [6, -20], [8, -16], [11, 0], [15, 31], [12, 32], [4, 6]], [[79217, 60107], [0, -16], [6, -34], [11, -34], [11, -23], [18, -30], [12, -1], [39, 28], [57, -41], [7, -21], [19, -41], [20, -30], [45, -2], [16, 73], [-7, 45], [-26, 79], [-7, 46], [8, 8], [44, 9], [7, 9], [9, 50], [12, -5], [24, -7], [26, 35], [15, 36], [8, -16], [9, -26], [10, -15], [18, -22], [21, -31], [12, -30], [10, -12], [26, 9], [7, -1], [15, 36], [11, 20], [9, -5], [13, 0], [27, 47], [15, 43], [9, 11], [24, -21], [10, 4], [14, 59], [15, 23]], [[79866, 60313], [4, -31], [-12, -60], [-12, -55], [-23, -47], [-1, -36], [-9, -104], [4, -33], [5, -29], [8, -15], [20, -102], [18, -93], [18, -76], [4, -49], [-17, -122], [-20, -112], [2, -56], [9, -57], [8, -74], [4, -96], [-5, -62], [-9, -39], [-17, -40], [-14, -20], [-18, 34], [-14, 1], [-19, -10], [-14, -15], [-30, -59], [-34, -56], [-46, -15], [-18, -42], [-19, -6], [-37, -2], [-23, -10], [1, -21], [-2, -100], [0, -23], [-3, -6], [-17, -3], [-28, 15], [-38, 25], [-27, 4], [-14, -44], [-8, -17], [-10, -2], [-11, -8], [-3, -20], [-1, -24], [5, -41], [2, -66], [-1, -45], [10, -29], [57, -96], [17, -24], [2, -14], [-10, -52], [9, -73], [-18, 1], [-30, 32], [-15, 19], [-17, -15], [-6, 2], [-12, 36], [-15, 37], [-16, 3], [-34, -15], [-34, -10], [-13, 0], [-6, -6], [-20, -55], [-8, 9], [-35, 21], [-31, 8], [-7, -14], [4, -45], [7, -43], [-4, -19], [-18, -23], [-23, -41], [-14, -32], [-9, -8], [-35, 1], [-35, -4], [-14, -30], [-13, -24], [-11, -6]], [[7838, 45252], [-2, -9], [-5, 3], [-2, 12], [-1, 12], [2, 11], [2, -1], [4, -12], [2, -16]], [[6704, 48601], [-6, -2], [-8, 0], [-3, 7], [-1, 6], [3, 1], [2, -2], [11, -1], [3, -4], [-1, -5]], [[1524, 49150], [3, -8], [0, -4], [-1, 1], [-5, 2], [-1, 5], [3, -3], [2, 1], [-4, 6], [-2, 5], [-3, 2], [0, 3], [3, -1], [5, -9]], [[2163, 49244], [1, -4], [4, 1], [4, 1], [-2, -4], [-8, -2], [-3, 10], [4, 8], [4, 1], [1, -2], [-1, -2], [-1, 0], [-3, -2], [0, -5]], [[2435, 49272], [-3, -3], [-3, 1], [-2, 4], [0, 6], [3, 4], [3, -1], [3, -6], [-1, -5]], [[6957, 49488], [-1, -4], [-4, 5], [-6, 9], [-6, 9], [0, 4], [8, 5], [10, 5], [2, -6], [-2, -9], [-1, -18]], [[2476, 50037], [-1, -5], [-2, 4], [1, 6], [2, 6], [1, -3], [-1, -8]], [[2306, 50249], [9, -11], [7, -15], [4, -20], [-1, -5], [-5, 0], [-6, 6], [-5, 9], [-2, 2], [-1, 2], [6, -1], [6, -9], [5, -4], [-1, 10], [-5, 18], [-4, 6], [-4, 5], [-5, 3], [-4, -3], [-1, -2], [-1, 5], [1, 3], [1, 4], [6, -3]], [[98547, 51145], [2, -30], [-7, 4], [-2, 11], [-2, 30], [-7, 30], [8, -8], [6, -23], [2, -14]], [[97097, 51339], [-3, -1], [-5, 6], [0, 7], [4, 4], [5, -6], [-1, -10]], [[98474, 51381], [-9, -16], [-4, 14], [5, 18], [-8, 73], [-12, 10], [-8, 22], [4, 0], [12, -20], [10, -9], [6, -48], [4, -44]], [[98064, 52426], [15, -23], [-2, -15], [-5, -18], [-20, -46], [-6, 4], [19, 42], [8, 27], [-11, 21], [-5, -5], [-1, 0], [-4, 20], [4, 0], [8, -7]], [[98065, 52616], [-7, -2], [5, 11], [31, 13], [3, 4], [5, -7], [0, -7], [-2, -3], [-16, -1], [-12, -6], [-7, -2]], [[98063, 52832], [-10, -3], [7, 9], [2, 11], [-1, 36], [4, -3], [1, -15], [1, -21], [-4, -14]], [[98060, 52906], [1, -14], [-16, 37], [-9, 23], [0, 10], [5, -6], [5, -12], [3, -9], [11, -29]], [[6294, 52912], [46, -67], [-20, -5], [-48, 32], [-44, 66], [13, 15], [7, -24], [20, -22], [12, 46], [7, 11], [-35, 48], [14, -3], [33, -32], [-5, -65]], [[98011, 53600], [-20, -22], [-6, 12], [8, 0], [14, 22], [16, 1], [-2, -11], [-10, -2]], [[98046, 53645], [-17, -19], [-6, 3], [21, 27], [0, -3], [2, -8]], [[5739, 54103], [22, -49], [-4, -24], [-16, 2], [-7, 8], [12, 5], [2, 9], [-6, 14], [-7, 10], [-5, 0], [-2, -20], [-8, 16], [5, 15], [6, 10], [8, 4]], [[32630, 61705], [-14, -12], [-12, 17], [3, 40], [11, 1], [11, -18], [1, -28]], [[32602, 61773], [-7, -8], [-13, 35], [-20, 10], [-18, 21], [0, 4], [0, 11], [4, 12], [9, 9], [22, -28], [11, -36], [10, -17], [2, -13]], [[85090, 70981], [-13, -13], [-11, 8], [-3, 6], [-14, 33], [-4, 17], [10, 32], [38, 53], [99, 51], [18, 2], [39, -21], [9, -42], [-7, -35], [-9, -24], [-46, -40], [-35, -19], [-71, -8]], [[85208, 71626], [5, -27], [-22, 5], [-12, 26], [1, 23], [14, 3], [14, -30]], [[85064, 71641], [-18, -9], [-10, 20], [-7, 6], [4, 26], [29, 51], [6, 17], [27, -10], [10, -27], [-13, -42], [-28, -32]], [[85499, 71782], [-3, -18], [-14, 27], [14, 30], [3, -39]], [[85047, 71849], [-4, -14], [-12, 4], [-12, 40], [-5, 31], [-13, 18], [20, 27], [25, -49], [1, -57]], [[85573, 71892], [-3, -56], [-20, -3], [-11, 36], [-13, -17], [-6, -1], [-10, 45], [-2, 36], [23, 26], [14, -16], [20, -8], [8, -42]], [[85761, 71888], [-27, -36], [-35, 48], [-8, 26], [26, 39], [23, 44], [15, 3], [6, -124]], [[85115, 72864], [-4, -38], [-18, 25], [-5, 82], [19, -24], [8, -45]], [[86365, 73432], [-13, -18], [-15, 18], [-2, 18], [8, 15], [18, 10], [9, -14], [-5, -29]], [[85144, 73580], [-2, -76], [-15, 4], [-10, 7], [-5, 15], [-10, 71], [11, 29], [23, -23], [8, -27]], [[85659, 74091], [68, -258], [64, -166], [56, -121], [79, -232], [23, -124], [2, -77], [13, -106], [-11, -60], [3, -96], [-5, -49], [-9, -36], [-1, -70], [3, -37], [1, -49], [6, -19], [9, -7], [14, 18], [18, 7], [-3, -59], [-22, -150], [-18, -109], [-25, -95], [-32, -87], [-38, -34], [-27, -13], [-51, -4], [-43, 15], [-36, -11], [-15, -18], [-11, -31], [8, -48], [-1, -36], [-16, 3], [-31, 21], [-34, 2], [-16, 11], [-16, 51], [-17, -2], [-29, -31], [-44, -6], [-15, -17], [-5, -21], [6, -26], [22, -35], [-7, -36], [-23, -18], [-19, 44], [-12, 43], [-13, 2], [-20, -12], [-4, -46], [10, -32], [15, -36], [-22, -42], [-5, -30], [-16, -21], [-42, 47], [6, 34], [18, 33], [3, 34], [-6, 20], [-61, -86], [-37, -96], [-19, 7], [-9, 25], [-11, 10], [-40, -63], [-8, -49], [-14, -2], [-7, 21], [0, 45], [-7, 37], [-41, 56], [-19, 48], [10, 27], [34, -15], [28, 2], [-6, 23], [-9, 11], [19, 12], [15, 27], [-13, 7], [-19, -15], [-16, 7], [-6, 63], [-20, 65], [-10, 63], [19, 36], [10, 56], [18, 81], [9, 27], [25, 19], [9, 21], [-14, 11], [-22, 9], [1, 24], [15, 12], [16, 26], [32, 32], [10, 59], [-9, 15], [-20, 14], [5, 30], [8, 23], [-3, 14], [-24, 38], [-16, 36], [5, 40], [-4, 60], [2, 51], [-1, 28], [-11, 62], [-5, 63], [-16, -10], [-12, -15], [-44, 22], [-14, 1], [-5, 47], [15, 57], [38, 50], [21, 6], [16, 22], [26, 7], [30, -34], [27, -7], [15, -59], [9, -12], [2, 22], [22, 25], [5, 19], [-4, 11], [-25, 10], [-23, 73], [-3, 32], [-9, 20], [13, 59], [-26, 67], [-13, 21], [2, 59], [-14, 39], [-8, 21], [-4, 36], [4, 16], [12, 6], [3, 15]], [[85175, 73606], [9, 11], [0, 16], [0, 51], [25, 36], [34, 73], [17, 40], [20, 38], [22, 25], [22, 11], [35, 5], [66, -4], [13, 4], [46, 4], [11, -7], [33, -4], [38, 5], [18, 11], [18, 18], [15, 33], [15, 62], [17, 48], [10, 9]], [[55989, 76179], [-48, -16], [-16, -19], [-10, -33], [-3, -17], [-8, -1], [-14, 17], [-18, 27], [-23, -2], [-78, -58], [-8, -30], [-1, -66], [-6, -18], [-8, -11], [-32, 7], [-4, 4]], [[55573, 76351], [2, 6], [5, 43], [-7, 31], [-10, 27], [7, 16], [21, 0], [17, -3], [7, 25], [36, 17]], [[55651, 76513], [34, 17], [5, 13], [-8, 26], [5, 16], [41, 47], [7, 21], [3, 17], [-6, 17], [-8, 28], [4, 12], [22, 16], [17, 18], [10, 2], [7, -14], [0, -14], [6, -23], [12, -12], [22, -21], [25, -14], [19, -28], [27, -50], [4, -25], [24, -22], [22, -25], [-4, -46], [76, -40], [17, 0], [8, -7], [0, -11], [-6, -32], [-31, -99], [-3, -21], [-22, -21], [-3, -13], [6, -27], [6, -19]], [[63409, 68907], [-16, -13], [-10, 6], [-11, 31], [-17, 77], [10, 29], [-1, 12], [2, 9], [5, 6], [6, 36], [7, 12], [12, -25], [33, -88], [0, -37], [-2, -14], [-18, -41]], [[63456, 68284], [-49, -1], [-61, -2], [-49, -1], [-56, -1], [-24, 54], [-8, 60], [-9, 61], [-25, 88], [-82, 21], [-43, 11], [-72, 17], [-53, 12]], [[63327, 69114], [-2, -21], [9, -64], [20, -69], [17, -56], [2, -27], [-15, 4], [-12, 11], [-22, 11], [-42, -75], [-26, -40], [0, -14], [34, -16], [25, 1], [17, 11], [15, -18], [10, -46], [4, -37], [23, -133], [19, -45], [24, -80], [9, -41], [5, -35], [15, -51]], [[78368, 64734], [15, -55], [33, -61], [40, -87], [12, -40], [26, -31], [8, -30], [6, -46], [3, -35], [5, -20], [10, -8], [12, 9], [9, 18], [7, 51], [5, 5], [8, -41], [9, -8], [11, -5], [9, -18], [3, -32], [-3, -32], [-11, -37], [-6, -38], [-4, -59], [-6, -41], [9, -37], [61, -179], [30, -29], [70, -35], [25, -25], [23, -23], [22, 11], [21, 54], [25, 30], [48, 46], [13, 2], [26, -18], [43, -54], [31, -50], [19, -26], [15, -24], [-2, -27], [-12, -26], [-15, -15], [-20, -25], [-11, -25], [7, -10], [29, -6], [34, -23], [10, -26], [2, -23], [4, -37], [6, -11], [32, 6], [10, -8], [11, -19], [11, -50], [0, -37], [-23, -41], [-8, -25], [-4, -39], [-16, -47], [-44, -78], [-11, -5], [-80, 43], [-37, -2], [-17, -2], [-9, -2], [-5, -16], [10, -48], [4, -47], [-10, -35], [-27, -32], [-10, -15], [-1, -20], [7, -21], [25, -22], [28, -20], [94, -122], [20, -29], [26, -42], [29, -33], [77, -43], [34, -29], [9, -16], [-1, -19], [-9, -26], [-7, -44], [0, -26], [8, -26], [13, -39], [31, -59], [17, -26], [18, -6], [16, -15], [17, -44], [19, -54], [3, -38], [8, -48], [18, -56], [24, -54], [35, -66], [19, -47], [9, -19], [74, -114], [17, -42], [26, -81], [11, -12], [10, -16], [7, -45], [2, -32], [3, -98], [14, -29], [12, -36], [5, -26], [11, -19], [12, -4], [15, 22], [11, 20], [5, -6], [12, -68], [10, -25], [20, -24], [19, -19], [41, -82], [22, -30], [15, -10], [13, -14], [3, -26], [-5, -27], [-8, -17], [-48, -48], [-6, -21], [6, -31], [12, -40], [13, -34], [17, -34], [33, -54], [29, -43], [16, -47], [9, -32], [-6, -37], [-12, -42], [-9, -35], [-17, -20], [-4, -24], [7, -37], [5, -26], [-3, -31], [2, -65]], [[79217, 60107], [17, 12], [27, 28], [22, 32], [15, 34], [6, 34], [1, 41], [6, 105], [7, 51], [-4, 63], [-12, 50], [0, 74], [4, 36], [2, 24], [17, 30], [12, 43], [6, 57], [1, 40], [-5, 25], [-17, 24], [-28, 23], [-17, 28], [-7, 35], [0, 30], [9, 26], [-21, 29], [-51, 32], [-28, 39], [-6, 44], [-21, 59], [-36, 73], [-19, 104], [-2, 137], [4, 111], [16, 128], [-21, 93], [-24, 49], [-32, 36], [-31, 52], [-29, 67], [-35, 100], [-41, 131], [-28, 59], [-14, -14], [-30, 13], [-45, 38], [-39, 20], [-34, 3], [-22, -8], [-10, -21], [-1, -19], [9, -20], [-5, -15], [-17, -11], [-14, -22], [-16, -48], [-11, -63], [-17, -25], [-26, -5], [-25, -18], [-25, -31], [-12, -23], [1, -16], [-5, -4], [-12, 9], [-6, 21], [1, 33], [-13, 22], [-26, 11], [-30, 36], [-33, 59], [-23, 32], [-13, 4], [-19, -24], [-24, -51], [-20, -20], [-16, 11], [-12, -18], [-9, -47], [-15, -36], [-35, -40], [-2, -5], [-39, -54], [-32, -54], [-37, -72], [-17, -12], [-17, 18], [-24, 18], [-14, 25], [26, 122], [31, 137], [9, 62], [1, 46], [-3, 38], [-12, 39], [-12, 30], [-1, 20], [4, 21], [12, 32], [17, 48], [15, 101], [18, 106], [-1, 65], [-15, 70], [-8, 67], [6, 92], [-2, 35], [-16, 18], [-53, 18], [-16, -3], [-14, -12], [-14, -25], [-17, -15], [-33, -9], [-31, 31], [-26, 53], [-7, 64], [20, 76], [13, 62], [8, 53], [-1, 26], [-6, 26], [-7, 3], [-17, 33], [-16, 57], [-16, 27], [-14, -5], [-13, -22], [-13, -39], [-9, -15], [-7, 7], [2, 34]], [[77811, 63546], [2, 32], [15, 125], [18, 81], [22, 38], [22, 16], [24, -6], [20, 7], [16, 19], [-1, 12], [-19, 3], [-8, 21], [4, 41], [8, 26], [13, 13], [13, 40], [12, 70], [15, 35], [18, 1], [30, 30], [42, 59], [16, 57]], [[59752, 70900], [13, 44], [13, 57], [13, 77], [24, 64], [49, 217], [28, 87], [10, 125], [43, 109], [33, 32], [15, 31], [0, 47]], [[59993, 71790], [48, 0], [32, 2], [9, 27], [24, -12], [14, -26], [-13, -27], [-17, -30], [1, -8], [13, -3], [22, -17], [14, -19], [22, -122], [-14, -50], [-22, -44], [-9, -4], [-19, -23], [-16, -30], [-5, -19], [1, -18], [22, -23], [1, -9], [-5, -7], [-18, 5], [-23, 2], [-14, 0], [-16, -4], [-20, -28], [-9, -18], [-5, -11], [-8, -38], [9, -25], [15, -15], [2, -7], [-3, -13], [-16, -16], [-11, -20], [-3, -20], [-13, -19]], [[47904, 54349], [-32, 9], [-94, 82], [-73, 47], [-242, 267], [-68, 108], [-77, 160], [-173, 322], [-39, 51], [-50, 25], [-31, 28], [-21, 30], [-18, 89], [-43, 53], [-80, 75], [-60, 126]], [[46803, 55821], [15, 26], [21, 82], [31, 80], [28, 47], [22, 48], [24, 38], [34, 43], [52, 114], [12, 13], [8, 79], [13, 101], [15, 31], [36, 19], [8, 17], [12, 71], [8, 83], [1, 17]], [[56938, 64513], [0, -287], [0, -287], [0, -287], [0, -287], [-1, -1], [-1, -1], [0, -1], [-1, -1], [-69, 0], [-68, 0], [-69, 0], [-68, 0], [0, -72], [0, -72], [0, -72], [0, -72]], [[56661, 63073], [-133, 137], [-134, 136], [-133, 136], [-133, 136], [-133, 137], [-133, 136], [-133, 136], [-133, 137], [-133, 136], [-133, 136], [-133, 136], [-133, 137], [-133, 136], [-133, 136], [-134, 137], [-133, 136], [-92, 94], [-99, -92], [-77, -72], [-103, -95]], [[54160, 65089], [-117, -123], [-91, -94], [-4, 0], [-4, 3], [-94, 160], [-73, 125], [-33, 35], [-138, 64], [-137, 64], [-145, 67]], [[52644, 69256], [33, 30], [47, 35], [24, 26], [11, 22], [35, 89], [18, 49], [25, 68], [11, 47], [1, 44], [-4, 52], [-20, 126], [-16, 123], [13, 47], [10, 23], [22, 57], [8, 12], [47, 18], [19, 38], [15, 48], [3, 25], [21, 27], [25, 26], [15, 34], [49, 53], [46, 49], [52, 51], [41, 39], [9, 34], [-1, 30], [-22, 68], [0, 80], [2, 67], [2, 39], [10, 109], [0, 16]], [[53195, 70957], [43, -37], [43, -14], [130, -136], [40, -17], [91, -16], [107, 56], [40, 10], [71, -52], [31, -15], [52, -4], [89, -47], [22, -17], [52, -75], [25, -23], [184, -69], [25, -46], [26, -87], [1, -109], [14, -79], [23, -102], [28, -72], [30, -61], [35, -37], [81, -56], [91, -21], [92, -8], [158, -76], [133, -89], [33, -44], [67, -43], [134, -208], [74, -72], [52, -14], [46, 13], [83, 72], [34, 43], [84, 180], [27, 94], [11, 66], [-3, 67], [-10, 61], [-23, 63], [-17, 84], [-9, 151], [13, 104], [16, 63], [25, 64], [69, 122], [70, 86], [122, 113], [71, 1], [30, 12], [58, 80], [24, 3], [33, -20], [97, 6], [42, -22], [51, -50], [64, -31], [45, -30], [48, -40], [11, -98], [-5, -29], [-1, -38], [50, -68], [142, -32], [28, -18], [39, -52], [25, -16], [97, -7], [57, 11], [54, -18], [20, -18], [21, -40], [25, -99], [10, -33]], [[33084, 59805], [-15, -61], [-31, 38], [-3, 48], [3, 29], [18, 54], [15, 36], [10, 12], [6, -47], [-3, -109]], [[72187, 57056], [8, -43], [-23, 29], [-15, 25], [-6, 20], [32, -22], [4, -9]], [[72213, 57390], [-17, -6], [-14, 38], [-3, 17], [3, 11], [4, 6], [5, -2], [6, -36], [16, -28]], [[72217, 57495], [26, -3], [29, 2], [20, -8], [34, -89], [93, -159], [51, -162], [4, -35], [7, -30], [12, -9], [11, -14], [50, -156], [6, -31], [-1, -34], [3, -25], [14, -13], [16, -6], [11, -24], [14, -124], [0, -39], [3, -17], [64, -193], [4, -24], [-1, -18], [2, -15], [12, -34], [20, -92], [9, -21], [12, -81], [1, -154], [-4, -69], [-12, -84], [-14, -81], [-16, -59], [-21, -50], [-71, -106], [-21, -22], [-93, -66], [-68, -63], [-64, -17], [-63, 34], [-48, 83], [-24, 122], [-17, 127], [-25, 141], [-18, 435], [-9, 122], [-15, 155], [2, 67], [10, 64], [0, -141], [9, -17], [7, 18], [7, 146], [5, 62], [25, 161], [1, 29], [-5, 61], [1, 30], [38, 113], [9, 66], [5, 67], [-2, 73], [-7, 72], [31, -23], [17, -25], [17, -17], [14, 9], [16, 0], [-11, 39], [-36, 36], [-59, 22], [-18, 29], [-7, 25], [3, 29], [5, 11]], [[57982, 34503], [-25, -14], [-4, -2], [-16, 4], [-21, -4], [-17, -8], [-13, -2], [-21, -41], [-39, -111], [-10, -23], [-3, -43], [-9, -34], [-11, -27], [-11, -6], [-32, 10], [-41, 14], [-24, 33], [-22, 44], [-11, 32], [-12, 17], [-4, 10], [-17, 15], [-6, 7], [-6, 6], [-6, 21], [-4, 18], [1, 51], [-12, 31], [-20, 52], [-13, 42], [-17, 59], [-11, 49], [-11, 52], [1, 22], [11, 15], [31, 26], [24, 20], [18, 37], [18, 55], [10, 33], [9, 15], [10, 24], [17, 51], [20, 58], [21, 61], [26, 18], [36, 21], [35, 53], [41, 46], [66, 49], [31, 12], [12, 8], [7, -10], [8, -28], [12, -23], [26, -42], [11, -9], [27, -61], [29, -42], [33, -48], [23, -24], [12, -6], [9, -43], [10, -31], [6, -30], [-2, -29], [-10, -70], [-15, -72], [-13, -30], [-15, -19], [-15, -28], [-5, -58], [-7, -68], [-19, -28], [-15, -18], [-21, -23], [-45, -36]], [[55821, 83685], [-16, 5]], [[55805, 83690], [32, 66], [12, 43], [8, 61], [8, 20], [0, -28], [-3, -46], [-20, -80], [-21, -41]], [[56523, 82914], [-2, 11], [1, 27], [0, 42], [-8, 37], [-23, 33], [-24, 23], [-31, 24], [-23, 10], [-13, 3], [-3, 13], [-4, 12], [-11, 11], [-23, 14], [-20, 3], [-16, -23]], [[56323, 83154], [-11, 28], [-13, 51], [2, 40], [7, 40], [33, 119], [-1, 18], [-25, 34], [-30, 24], [-17, 51], [-61, 3], [-58, -3], [-18, 2], [-55, 22], [-54, 34], [-35, 20], [-30, 23], [-16, 23], [-26, -6], [-17, 0]], [[55898, 83677], [0, 4], [-9, 42], [10, 64], [-19, 93], [-30, 113], [-2, 121], [-2, 27]], [[55846, 84141], [74, 68], [94, 73], [22, 6], [86, 44], [12, 3], [78, -8], [62, -10], [51, 1], [29, 11], [26, -9], [20, -33], [22, 4], [21, 21], [116, -19], [26, 0], [29, -3], [54, -19], [32, -18], [68, 11], [30, 0], [15, 7], [47, 49], [21, 9], [19, 8], [17, -7], [11, -42], [35, -72], [38, -13], [106, -27], [21, -15], [59, -64], [36, -31], [22, -25], [35, -49], [20, -35], [33, -27], [39, -18], [15, -3]], [[57597, 84981], [33, -2], [11, -10], [8, -45], [37, -35], [35, -30], [9, -13], [2, -27], [-2, -30], [-4, -16], [-15, -18], [-12, -47], [-2, -44], [-20, -76], [5, -2], [41, 14], [12, -8], [9, -17], [3, -47], [14, -22], [14, -34], [4, -26], [27, -31], [2, -20], [16, -72], [6, -41], [3, -31], [-8, -41], [-7, -27]], [[55846, 84141], [-9, 109], [5, 217], [11, 108], [51, 63], [26, 49], [15, 65], [5, 61], [10, 49], [75, 144], [60, 15], [80, 40], [90, 33], [17, -42], [9, -32], [108, -117], [27, -40], [42, -135], [100, -68], [79, 22], [34, 33], [63, 61], [28, 45], [6, 43], [-11, 184], [-17, 80], [6, 50]], [[81534, 64657], [6, -13], [0, -1], [-13, -11], [-4, -3], [-2, -1]], [[32497, 62251], [-32, 0]], [[32465, 62251], [3, 13], [14, 14], [11, -2], [4, -5], [0, -20]], [[47587, 67774], [-37, 0], [0, -1], [1, -24], [8, -48], [3, -40], [-4, -25], [-4, -32], [2, -31], [6, -33], [6, -34], [0, -23], [-11, -18], [-27, -9], [-31, -8], [-23, 0], [-34, 5], [-22, -1], [-19, 0], [-16, -5], [-21, -22], [-23, -35], [-29, -46], [-17, -29], [-23, -6], [-23, 0], [-22, 23], [-14, 12], [-10, -1], [-15, -16], [-19, -12], [-17, 0], [-29, 24], [-34, 34], [-20, 17], [-29, 6], [-29, 11], [-20, -5], [-26, 0], [-34, -23], [-29, -17], [-31, -18], [-36, -16], [9, -51], [12, -28], [0, -35], [-6, -30], [-17, -28], [-20, -37], [-11, -29], [-12, -39], [-8, -24], [-15, -37], [-13, -47], [-4, -30], [-6, -33], [-10, -11], [-35, -9], [-22, -11], [-19, -12], [-8, -20], [-1, -3], [-5, -40], [0, -29], [-6, -23], [-8, -57], [-11, -53], [-9, -69], [-8, -57], [-11, -93], [-11, -86], [-14, -81], [-11, -51], [-9, -29], [-19, -35], [-17, -22], [-19, -30], [-22, -28], [-31, -35], [-25, -29], [-10, -13], [-12, -16], [-20, -40], [-16, -57], [-11, -47], [-20, -74], [-14, -41], [-8, -22], [-22, -23], [-25, -18], [-28, -23], [-22, -23], [-31, -23], [-19, -23], [-14, -34], [-11, -41], [-14, -58], [-11, -63], [-6, -40], [-16, -139], [-6, -80], [-6, -52], [-8, -64], [-5, -97], [0, -81], [-6, -46], [-3, -35], [-14, -40], [-11, -29], [-19, -40], [-17, -23], [-5, -23], [-17, -29], [-17, -46], [-14, -29], [3, -23], [3, -40], [-8, -41], [-9, -46], [-22, -57], [-25, -29], [-36, -6], [-50, 0], [-39, 6], [-47, 0], [-42, 11], [-39, 12], [-47, 6], [-33, 0], [-42, -12], [-108, 0], [-42, -6], [-61, -23], [-15, -5]], [[45276, 64182], [21, 276], [38, 149], [30, 66], [47, 35], [43, 150], [16, 138], [28, 64], [9, 50], [-11, 38], [27, 75], [32, 114], [15, 73], [38, 113], [5, 25], [-4, 29], [-15, -25], [-16, -41], [-19, -33], [8, 40], [15, 60], [34, 62], [53, 69], [110, 234], [42, 41], [37, 98], [14, 88], [4, 200], [13, 106], [24, 83], [29, 150], [22, 68], [15, 136], [16, 53], [28, 24], [40, 69], [60, 42], [71, 89], [33, 53], [23, 79], [24, 158], [42, 166], [22, 125], [1, 2], [37, 66], [26, 83], [43, 37], [90, 18], [134, 69], [120, 104], [34, 42], [37, 83], [60, 108], [114, 130], [52, 72], [79, 182], [53, 150], [44, 97], [30, 86], [21, 87], [12, 140], [-8, 55], [-33, 89], [-23, 24], [-6, 42], [12, 75], [0, 128], [7, 204], [37, 165], [91, 217], [17, 88], [10, 142], [1, 50], [114, 200], [67, 154], [23, 37], [59, 70], [205, 154], [116, 109], [68, 80], [40, 94], [112, 371], [110, 521], [9, 61], [49, 17], [35, 7], [28, 19], [34, 40], [33, -16], [-16, -27], [0, -64], [23, -75], [41, -85], [75, -107], [58, -43], [83, -26], [96, 47], [54, 1], [27, 20], [28, -30], [55, -9], [52, 16], [40, 45], [25, 51], [4, -25], [1, -28], [8, -16], [15, -66], [9, -25], [30, 4], [26, -13], [59, 6], [57, -11]], [[52066, 77044], [-17, -10]], [[57836, 78024], [-14, 36], [-14, 32], [-10, 17], [4, 8], [12, 9], [8, 11], [-1, 38], [-6, 44], [-6, 21], [0, 33], [-4, 52], [5, 95], [23, 120], [12, 60], [-6, 33], [5, 76], [-10, 38], [-15, 50], [-22, 107], [-27, 37], [-33, 41], [-15, 31], [-9, 34], [-20, 34], [-23, 31], [-27, 78], [-14, 35], [-5, 10], [-31, 50], [-16, 45], [-9, 37], [-4, 34], [-22, 68], [-20, 51], [-19, 36], [-9, 26], [-22, 32], [-32, 26], [-20, 4], [-26, -2]], [[57394, 79642], [6, 20], [57, 53], [15, -8], [30, -3], [61, 2], [30, 36], [19, -10], [15, 16], [25, 20], [4, -5], [3, -3], [39, -9], [29, -19], [20, -29], [20, -19], [21, -7], [11, -14], [3, -23], [19, -11], [37, 1], [16, -15], [-6, -30], [4, -9], [13, 10], [10, -9], [5, -22], [6, -10], [19, 34], [19, -3], [48, -15], [26, -71], [16, -26], [14, -10], [17, 11], [16, 13], [9, -6], [19, -47], [5, -62], [0, -25], [-7, -42], [-10, -45], [-8, -29], [3, -24], [7, -19], [12, -7], [37, -39], [13, -28], [21, -20], [15, -1], [8, -12], [3, -14], [-3, -35], [-8, -33], [1, -21], [13, -25], [2, -30], [1, -18], [7, -15], [34, -32], [44, -31], [11, -27], [7, -34], [-2, -57], [-3, -49], [57, -67], [-6, -12], [-9, -14], [-55, -10], [-11, -6], [-24, 50], [-13, 7], [-11, -19], [-14, -10], [-17, 5], [-18, 16], [-9, 11], [-7, 1], [-11, -11], [-15, 5], [-9, 12], [-14, -43], [-9, -9], [-5, 2], [-1, 72], [-4, 11], [-11, 2], [-27, -17], [-26, -23], [-8, -19], [1, -36], [3, -43], [18, -64], [-10, -28], [-7, -45], [-27, -41], [-31, -24], [-2, -49], [-17, -33], [-30, -34], [-19, -40], [5, -28], [1, -26], [-3, -18], [-1, -14], [-8, -6], [-45, -5], [-12, -8], [-15, -19]], [[63871, 42106], [-32, -106], [9, 89], [36, 127], [11, 10], [-24, -120]], [[63428, 44145], [0, -21], [-36, 8], [-6, 72], [18, 3], [4, 29], [11, 4], [11, -64], [-2, -31]], [[63760, 44681], [13, -60], [15, -58], [46, -140], [20, -53], [17, -57], [8, -114], [30, -178], [28, -266], [8, -273], [9, -126], [21, -118], [36, -122], [11, -136], [-21, -140], [-32, -132], [-8, -25], [-15, -34], [-6, 1], [-26, 34], [-20, 56], [-26, 132], [-10, 66], [-10, 11], [-31, -6], [-22, -41], [-4, -27], [5, -74], [8, -66], [4, -68], [0, -85], [9, -26], [12, -22], [12, -55], [3, -133], [-8, -67], [-22, -58], [2, -32], [8, -32], [-8, -20], [-29, -25], [-11, -22], [-16, -59], [-25, -120], [-3, -61], [16, -186], [-5, -132], [-32, -252], [-18, -119], [-26, -143], [-40, -189], [-39, -237], [-34, -243], [-25, -147], [-28, -144], [-38, -255], [-33, -258], [-48, -285], [-68, -317], [-7, -41], [-14, -163], [-15, -140], [-18, -140], [-37, -230], [-5, -71], [-8, -68], [-36, -144], [-16, -54], [-10, -57], [-6, -72], [-11, -70], [-27, -129], [-39, -110], [-27, -40], [-58, -59], [-30, -11], [-65, -2], [-64, -33], [-66, -64], [-63, -73], [-25, -35], [-27, -20], [-83, -4], [-26, 16], [-84, 120], [-32, 20], [-62, 17], [-18, 10], [-17, 16], [-25, 62], [-50, 54], [-12, 16], [-7, 37], [-5, 39], [-13, 45], [-10, 84], [-16, 59], [-45, 104], [-5, 33], [-4, 110], [2, 75], [-5, 136], [5, 65], [16, 58], [-6, 62], [-17, 66], [-6, 68], [-13, 62], [-48, 112], [-11, 55], [-8, 57], [-18, 178], [-2, 62], [3, 130], [7, 68], [11, 47], [3, 35], [8, 30], [11, 24], [7, 28], [18, 168], [23, 37], [33, 21], [27, 44], [16, 59], [15, 121], [42, 121], [15, 63], [34, 96], [30, 135], [9, 64], [7, 65], [8, 143], [5, 71], [-1, 70], [-17, 72], [-41, 132], [-1, 24], [3, 98], [-4, 70], [-15, 71], [-19, 66], [-19, 124], [-10, 205], [2, 74], [-5, 65], [-14, 63], [10, 109], [123, 397], [4, 47], [-5, 121], [2, 71], [5, 26], [9, 15], [21, 7], [99, 18], [13, 12], [25, 33], [34, 65], [15, 19], [14, -7], [8, -28], [11, -15], [40, 29], [16, 1], [16, -5], [7, 27], [4, 36], [6, 26], [11, 14], [51, 8], [33, 11], [43, 25], [9, -5], [34, -91], [11, -8], [13, -4], [12, 17], [-28, 48], [-4, 26], [1, 31], [15, 65], [25, 50], [56, 76], [57, 88], [17, 6], [14, -14], [11, -103], [-1, -17], [9, -3], [10, 13], [10, 42], [0, 34], [-7, 34], [-4, 28], [0, 26], [29, 61], [23, 58], [10, 70], [10, 32], [24, 36], [7, -6], [6, -29], [3, -31], [-6, -31], [-9, -31], [-4, -40], [14, -8], [13, 10], [19, 73], [21, 70], [13, 36], [16, 25], [27, -5], [26, -15], [-43, 73], [-10, 101], [50, 174], [1, 37], [7, 11], [3, 14], [-26, 59], [-5, 29], [4, 44], [12, 40], [12, 27], [16, 11], [13, -15], [28, -49], [19, -7], [23, 46], [18, 58], [28, 40], [32, 25], [49, 91], [32, 191], [2, 56], [-7, 67], [-11, 65], [-19, 80], [5, 18], [27, -11], [9, 11], [28, 71], [48, 136], [16, 0], [13, -25], [5, -37], [10, -28], [32, -65], [16, -48]], [[70393, 53704], [-6, -1], [-4, 10], [1, 14], [5, 10], [7, 1], [4, -9], [-2, -14], [-5, -11]], [[70419, 54242], [-4, -6], [-5, 2], [-2, 7], [3, 10], [3, 13], [3, 14], [4, 7], [3, -2], [0, -8], [-2, -11], [-1, -14], [-2, -12]], [[24532, 62601], [-31, -13], [-6, 13], [63, 58], [11, -2], [4, -8], [-33, -28], [-8, -20]], [[19190, 62638], [-17, -12], [-24, 36], [6, 27], [14, 19], [14, -35], [7, -35]], [[25850, 63538], [-15, -18], [-7, 64], [11, 61], [14, 36], [28, 4], [18, 12], [2, -16], [-15, -48], [-36, -95]], [[25913, 64077], [4, -28], [-4, 4], [-7, 21], [-4, 26], [4, 1], [3, -9], [4, -15]], [[20416, 64291], [-8, -47], [-21, 19], [-8, 30], [-1, 48], [11, 9], [17, -21], [4, -14], [6, -24]], [[19498, 65755], [-6, -3], [-14, 31], [-6, 75], [3, 8], [27, -93], [-1, -11], [-3, -7]], [[18972, 65894], [-3, -27], [-84, 108], [20, 10], [23, -8], [44, -83]], [[19287, 66246], [8, -65], [-15, 10], [-18, 35], [-13, 44], [1, 20], [3, 4], [26, -26], [8, -22]], [[18873, 65982], [-6, -7], [-24, 67], [-3, 46], [-10, 19], [-24, 15], [21, 93], [17, 193], [8, -35], [-18, -195], [1, -26], [8, -24], [10, -40], [1, -44], [16, -40], [3, -22]], [[19139, 66831], [3, -20], [-2, -6], [-11, 14], [-19, -86], [-6, -8], [12, 118], [12, 17], [13, 3], [-2, -32]], [[18008, 68012], [-4, -19], [-47, 39], [26, 67], [-4, 70], [12, 15], [10, -23], [13, -90], [-6, -59]], [[17155, 68514], [-12, -22], [-32, 120], [0, 29], [9, 15], [15, -3], [0, -30], [13, -26], [5, -24], [2, -59]], [[18832, 68551], [-21, -136], [-21, 2], [-44, 43], [-5, 27], [17, 157], [13, 21], [39, 21], [6, -19], [4, -47], [12, -69]], [[18568, 68578], [-2, -10], [-29, 35], [-64, 122], [-23, 61], [-4, 28], [2, 64], [22, -8], [25, -42], [12, -40], [0, -45], [48, -21], [7, -98], [6, -46]], [[18140, 70106], [-9, -2], [-17, 26], [1, 25], [4, 2], [17, -21], [6, -19], [-2, -11]], [[23015, 66797], [-5, -119], [-17, -97], [-55, -203], [-24, -126], [-44, -360], [-14, -236], [-3, -111], [-4, -15], [4, -17], [-10, -245], [5, -210], [-3, -32], [-17, -63], [-11, -88], [5, -39], [-1, -27], [17, -133], [5, -100], [50, -171], [28, -60], [34, -51], [13, -30], [-6, -72], [-14, -37], [-6, -59], [-7, 49], [2, 62], [11, 34], [1, 25], [-21, 26], [-37, 86], [-45, 153], [32, -244], [11, -39], [9, -16], [14, -17], [4, -27], [0, -19], [40, -170], [45, -175], [3, -48], [18, -58], [114, -246], [70, -184], [25, -174], [15, -54], [7, -75], [46, -83], [14, -54], [24, -30], [20, -90], [38, -53], [-9, -1], [-33, 27], [2, -18], [28, -37], [54, -37], [13, 0], [-21, 19], [-18, 26], [6, 4], [38, -32], [105, -11], [47, -75], [60, -32], [32, -96], [38, -100], [24, -5], [19, 0], [56, 17], [88, 63], [30, 30], [59, 42], [90, 8], [28, -12], [67, 26], [33, 32], [11, 29], [5, 22], [62, 30], [13, 6], [63, 6], [31, 11], [35, 7], [26, -45], [0, -22], [-17, -21], [8, -20], [31, -34], [56, -13], [19, 5], [26, 49], [46, 48], [-1, 55], [-9, 31], [-13, 2], [-3, 17], [9, 40], [-2, 14], [-29, -39], [-6, 0], [3, 18], [6, 15], [83, 85], [22, 35], [28, 31], [60, 115], [13, 218], [12, 38], [40, 67], [4, 20], [3, 45], [-1, 114], [2, 90], [-2, 102], [7, 90], [7, 26], [23, 145], [47, 64], [82, 76], [19, 13], [261, 80], [37, 20], [45, 52], [33, 17], [60, -1], [18, 7], [4, 7], [0, 7], [11, 7], [34, -7], [65, -31], [24, -8], [58, -36], [63, -15], [10, 6], [8, 11], [6, 22], [-6, 18], [-6, -1], [-11, -10], [-13, -1], [-25, 15], [5, 13], [25, -1], [17, 6], [24, 22], [26, -16], [35, -75], [24, -24], [2, -108], [4, -19], [8, -29], [-12, -84], [-13, -69], [-17, -57], [-37, -89], [-45, -71], [-56, -159], [-13, -75], [1, -59], [9, -58], [-3, -21], [-6, -22], [-12, 2], [-22, -28], [-28, -82], [-1, -25], [13, -23], [16, 11], [21, 1], [12, 7], [12, -2], [-3, -47], [-13, -33], [-8, -11], [-15, -5], [-17, -19], [-9, -18], [1, -54], [9, -4], [20, 40], [12, -2], [2, -17], [-26, -139], [-16, -143], [-23, -82], [-8, -121], [-11, -51], [-14, -51], [-8, 3], [-21, 96], [-23, 25], [-4, 23], [12, 117], [-6, 65], [-11, -3], [-15, -35], [-19, -31], [0, -45], [-22, -73], [-6, -25]], [[24379, 60221], [-8, 13], [-74, 157], [-78, 172], [-30, 56], [-29, 43], [-40, 79], [-104, 174], [-54, 80], [-50, 95], [-45, 53], [-45, 34], [-20, 20], [-17, 26], [-10, 2], [-5, -35], [16, -18], [19, -15], [14, -1], [16, -13], [46, -48], [7, -25], [-130, 97], [-53, 9], [-6, 15], [27, 50], [-9, 18], [-9, 3], [-28, -35], [-11, -2], [-2, 23], [1, 21], [-18, 32], [-11, -1], [-10, -22], [-25, -42], [1, -17], [49, -18], [16, -10], [-3, -11], [-42, 0], [-51, -19], [-92, -116], [-86, -50], [-122, -113], [-54, -5], [-29, -18], [-82, 43], [-105, 105], [-158, 33], [-107, 138], [-106, 57], [-67, 132], [-41, 6], [-26, 21], [-96, 48], [-95, 32], [-93, 115], [-61, 37], [-52, 46], [-115, 79], [-43, 43], [-41, 68], [-66, 69], [-28, 59], [-32, 21], [-45, 109], [-23, 47], [-20, 21], [-21, 8], [-62, -9], [-91, 48], [-43, 12], [-88, 72], [-118, 80], [-39, 91], [-32, 86], [-60, 113], [-37, 48], [-64, 57], [-36, 46], [-55, 35], [-93, 91], [-29, 77], [-18, 68], [-49, 83], [-55, 156], [-14, 57], [-10, 88], [-13, 51], [-15, 39], [8, 29], [27, 36], [46, 8], [33, 39], [4, 32], [-2, 19], [-21, 49], [-26, 13], [-20, 1], [-5, 18], [15, 20], [18, 48], [25, 58], [18, 53], [4, 75], [-3, 76], [7, 63], [-62, 74], [-7, 31], [-19, 84], [-34, 98], [1, 195], [-41, 173], [-42, 86], [-22, 30], [-59, 134], [-46, 77], [-46, 146], [-45, 93], [-58, 156], [-41, 78], [-189, 262], [11, 0], [55, -64], [9, 5], [2, 32], [-7, 37], [-10, 9], [-15, -8], [-20, 8], [-10, 12], [-29, 8], [-38, 44], [-16, 45], [-1, 52], [-54, 110], [-20, 62], [10, -5], [14, -25], [15, -7], [17, 0], [12, 10], [-4, 18], [-12, 15], [-78, 58], [-26, 41], [-64, 68], [-15, 24], [-10, 65], [-16, 3], [-13, -18], [-38, -18], [-10, 21], [-1, 20], [27, 22], [24, 61], [0, 22], [-14, -25], [-20, -28], [-21, -15], [-32, -13], [-16, 9], [-14, 14], [-22, 54], [-11, 176], [20, 61], [23, 61], [20, 35], [11, -27], [12, -3], [-9, 31], [-19, 28], [-7, 29], [-1, 26], [-9, 48], [-57, 102], [-54, -8], [-22, 3], [-20, 39], [-17, 65], [-9, 55], [-1, 29], [-5, 29], [-93, 48], [-28, 41], [-27, 51], [-12, 42], [-11, 32], [-9, 54], [-7, 63], [11, 82], [13, 39], [-64, 30], [-24, 1], [-21, -16], [-18, 21], [-37, 24], [-45, 85], [-53, 155], [-57, 50], [-19, 54], [-24, 48], [-20, 60], [-4, 26], [-6, 15], [-29, 42], [-32, 71], [-9, 57], [-8, 87], [-22, 31], [-21, 14], [-5, 41], [2, 24], [-7, 44], [-44, 105], [-23, 87], [-12, 27], [-11, 39], [-6, 81], [-18, 101], [-36, 120], [-29, 82], [-15, 82], [7, 83], [-5, 51], [-4, 12], [3, 17], [10, -9], [8, 15], [-1, 53], [-10, 16], [-29, 17], [-12, 11], [-70, 22], [-39, 30], [-3, 70], [-19, 32], [-16, 20], [-52, 41], [-9, -21], [-7, -39], [-21, -8], [-19, -2], [-32, 27], [-79, 103], [-17, 17], [-25, 9], [-12, 16], [-53, 55], [11, -29], [15, -30], [14, -87], [-16, -63], [-10, -220], [11, -44], [23, -70], [16, -112], [5, -82], [14, -66], [-4, -155], [5, -47], [22, -77], [41, -73], [9, -38], [53, -55], [33, -72], [65, -98], [20, -42], [58, -152], [2, -46], [11, -56], [33, 12], [15, -42], [-2, -20], [4, -15], [17, 3], [15, -11], [31, -166], [17, -22], [21, -10], [24, -18], [1, -42], [-1, -34], [21, -49], [-4, -66], [17, -56], [-3, -55], [7, -43], [50, -97], [62, -77], [13, -101], [26, -93], [25, -23], [27, -39], [-4, -40], [2, -24], [35, -73], [6, -94], [30, -61], [9, -4], [6, 9], [-22, 61], [-10, 40], [-2, 63], [8, 8], [62, -99], [7, -74], [21, -42], [1, -56], [13, -34], [4, -49], [20, -80], [1, -112], [10, -82], [40, -125], [32, -26], [6, -61], [33, -159], [38, -87], [19, -73], [3, -45], [-14, -68], [-2, -47], [21, -143], [31, -73], [35, -18], [6, -10], [-3, -20], [12, -18], [13, 23], [7, 32], [-7, 37], [-1, 27], [6, 19], [11, 3], [67, -98], [11, -38], [25, -43], [23, -55], [9, -42], [19, -36], [9, -81], [46, -37], [25, -68], [2, -43], [-12, -110], [-11, -31], [-37, -47], [-27, -56], [-27, -34], [-27, -21], [-23, 4], [-23, 65], [-26, 193], [-18, 41], [-12, 61], [-20, 50], [-75, 76], [-37, 81], [-37, 53], [-39, 78], [-106, 129], [-44, 66], [-29, 65], [-19, -1], [-14, -7], [-6, 18], [-1, 33], [-6, 22], [-62, 98], [-13, 55], [-3, 62], [14, 162], [6, 95], [-4, 49], [-6, 6], [-6, 27], [-2, 78], [-15, 84], [-56, 174], [-41, 34], [-37, 25], [-101, 154], [-27, 76], [-7, 44], [-3, 89], [-14, -52], [-19, -38], [-42, 3], [-48, -43], [-29, 40], [-15, 46], [-24, 55], [-26, 11], [-17, 2], [-31, 68], [-26, 21], [-36, 9], [-32, 34], [-9, 38], [-5, 53], [-12, 32], [-49, 62], [-39, 69], [-38, 45], [-11, 36], [-1, 25], [59, -7], [71, -27], [34, 8], [21, 25], [20, 18], [3, -19], [-4, -37], [20, -33], [26, -27], [19, 3], [-18, 29], [-12, 60], [5, 22], [0, 29], [-26, -6], [-4, 15], [23, 45], [25, 120], [13, 118], [-27, 103], [-46, 72], [-98, 210], [-59, 108], [-17, 40], [-16, 19], [-48, 25], [-40, 60], [-71, 85], [-30, 44], [-21, 104], [-16, 14], [5, 71], [-7, 127], [-12, 32], [-38, 31], [-9, 86], [-2, 82], [-8, 57], [-65, 96], [-3, 46], [0, 44], [-7, 44], [-35, 91], [-42, 79], [-14, 38], [-2, 77], [-15, 21], [6, 5], [13, -2], [8, 10], [1, 54], [-63, 84], [-18, 116], [-34, 61], [-8, 23], [-18, 109]], [[17464, 70583], [80, 12], [79, 13], [80, 12], [79, 12], [80, 13], [79, 12], [80, 12], [79, 13], [32, 6], [-18, -87], [-13, -32], [132, -86], [131, -85], [132, -85], [132, -85], [132, -86], [131, -85], [132, -85], [132, -85], [98, 0], [98, 0], [98, 1], [99, 0], [98, 0], [98, 1], [98, 0], [98, 1], [0, 64], [1, 65], [0, 65], [0, 65], [61, -1], [61, -1], [61, 0], [61, -1], [61, -1], [61, 0], [61, -1], [61, -1], [3, -1], [2, -2], [25, -49], [25, -78], [30, -54], [35, -30], [58, -90], [83, -150], [67, -100], [49, -50], [33, -43], [17, -36], [23, -78], [43, -181], [0, -83], [16, -78], [33, -102], [29, -60], [24, -18], [27, -36], [29, -54], [34, -36], [38, -19], [52, -48], [67, -79], [46, -40], [25, -1], [22, 25], [18, 52], [19, 33], [18, 15], [7, 24], [-3, 33], [12, 74], [28, 116], [33, 62], [38, 10], [25, 21], [12, 34], [21, 4], [29, -27], [48, -17], [66, -8], [39, 3], [12, 13], [6, -1], [1, -14], [10, -6], [19, 2], [17, -20], [21, -62], [73, -100], [7, -35], [25, -49], [47, -76], [27, -66], [6, -55], [24, -87], [42, -120], [19, -64], [-5, -9], [4, -34], [11, -58], [21, -49], [30, -40], [31, -72], [31, -104], [37, -79], [44, -54], [25, -51], [6, -46], [0, -40], [-7, -33], [3, -32], [12, -30], [4, -36], [-4, -51], [0, -15], [4, -11], [39, -88], [20, -71], [16, -112], [0, -1], [18, -68], [26, -28], [39, -10], [30, -23], [20, -37], [26, -22], [32, -8], [30, -24], [28, -41], [54, -27], [78, -13], [59, -34], [41, -53], [18, -11], [5, -1], [2, 8], [3, 15], [16, 18], [38, 11]], [[97120, 55201], [-6, -17], [-6, 1], [6, 13], [4, 18], [6, 51], [14, 19], [10, 21], [-3, -22], [-15, -23], [-10, -61]], [[97659, 55903], [11, -13], [20, 1], [19, -32], [-7, 2], [-10, 14], [-10, 6], [-12, -2], [-6, 5], [-5, 19]], [[97527, 55955], [35, -30], [46, 14], [-7, -9], [-17, -8], [-12, -8], [-8, 0], [-9, 3], [-29, 21], [-17, 27], [4, 9], [14, -19]], [[96896, 56053], [-4, -9], [-27, 5], [-12, 11], [1, 9], [22, -8], [20, -8]], [[96357, 58267], [-7, -4], [-5, 4], [4, 8], [8, 1], [3, -2], [-3, -7]], [[55989, 76179], [16, -3], [33, 14], [21, 21], [11, 3], [14, 8], [20, -1], [21, -9], [26, 11], [26, 19], [11, -4], [11, -17], [7, -4]], [[51174, 62870], [0, -101], [0, -152], [0, -169], [1, -156], [0, -178], [0, -143], [1, -170], [0, -168], [-9, -19], [-3, -95], [-3, -125], [-17, -129], [-29, -95], [-11, -90], [-8, -52], [-11, -28], [-3, -34], [-6, -48], [-9, -31], [-7, -16], [-30, -18], [-53, -92], [-4, -73], [-60, 20], [-63, 21], [-9, -1], [-5, -10], [-3, -38], [-86, -7], [-75, -5], [-92, -7], [-64, -4], [-81, -9], [-74, -8], [-50, -84], [-45, -80], [-3, -3], [-64, -16], [-79, 14], [-41, 1], [-16, -10], [-3, -30]], [[46836, 58988], [2, 43], [-19, 30], [0, 15], [2, 41], [8, 85], [-1, 32], [8, 64], [-13, 28], [-2, 21], [-14, 34], [-15, 48], [-4, 39], [-6, 30], [-14, 46], [-11, 7], [-24, 7], [-4, -15], [-8, -23], [-8, -7], [-13, 28], [-5, 24], [0, 22], [-17, 38], [-27, 71], [3, 58], [17, 31], [5, 24], [1, 26], [-7, 32], [-9, 26], [2, 56], [-2, 77], [-14, 39], [-12, 28], [-17, 31], [-15, 47], [6, 65], [5, 44], [-26, 93]], [[46588, 60373], [49, -37], [7, 13], [16, 22], [23, 47], [19, 62], [8, 78], [4, 66], [8, 57], [11, 47], [23, 50], [22, 35], [26, 37], [14, -7], [24, -51], [55, -102], [45, -78], [16, -42], [15, 0], [22, 75], [23, 66], [10, 16], [31, 7], [26, 3], [22, -2], [42, -12], [19, -12], [18, -7], [52, -6], [52, 16], [49, 21], [36, 12], [2, 31], [-2, 36], [6, 28], [11, 26], [10, 5], [4, -87], [12, -13], [32, -4], [53, 0], [57, 0], [56, 0], [57, 0], [57, 0], [56, 0], [57, 0], [57, 0], [56, 0], [57, 0], [57, 0], [56, 0], [57, 0], [57, 0], [56, 0], [57, 0], [57, 0], [58, 0], [16, 169], [15, 155], [12, 129], [-42, 92], [-33, 73], [-8, 139], [-8, 143], [-7, 143], [-8, 143], [-8, 144], [-8, 143], [-8, 143], [-8, 143], [-8, 143], [-8, 144], [-8, 143], [-8, 143], [-8, 143], [-7, 144], [-8, 143], [-8, 143], [-8, 143], [-8, 144], [-8, 143], [-8, 143], [-8, 143], [-8, 144], [-8, 143], [-8, 143], [-7, 143], [-8, 144], [-8, 143], [-8, 143], [-8, 143], [-8, 143], [-8, 144], [-8, 143], [-8, 143], [-7, 131], [85, 1], [91, 0], [89, 0], [130, 0], [97, 0]], [[54046, 72495], [-10, -19], [-26, 1], [-24, 29], [0, 61], [27, -12], [25, -41], [8, -19]], [[53975, 72596], [-16, -9], [-17, 17], [-4, 11], [23, 9], [12, -8], [4, -15], [-2, -5]], [[77272, 57565], [-13, -34], [-5, 2], [6, 55], [23, 41], [19, 4], [-2, -26], [-14, -31], [-14, -11]], [[77280, 58152], [23, -100], [-3, -15], [-3, -8], [-6, 3], [-9, 54], [-17, 34], [-21, -6], [17, 44], [7, 10], [12, -16]], [[77372, 58157], [-6, -1], [-6, 2], [-6, 9], [14, 62], [4, -72]], [[77283, 58455], [-1, -13], [-2, 0], [-7, 9], [4, 55], [11, 44], [11, 66], [6, 14], [2, -35], [-7, -74], [-5, -40], [-12, -26]], [[77375, 58608], [-7, -119], [-17, 17], [-9, 0], [-10, 67], [0, 18], [-6, 44], [41, 8], [8, -35]], [[77242, 58578], [3, -32], [-18, 34], [-3, 95], [14, -60], [6, -14], [-2, -23]], [[77365, 58700], [-12, -3], [-5, 93], [3, 14], [16, -46], [24, -28], [-9, -18], [-17, -12]], [[77259, 58842], [-3, -3], [-4, 1], [-10, 10], [-10, 39], [5, 27], [4, 7], [10, -2], [4, -5], [2, -10], [-3, -22], [1, -19], [4, -23]], [[77240, 58980], [-2, -21], [-16, -43], [-14, 25], [-4, 13], [15, 28], [15, -4], [4, 6], [2, -4]], [[77336, 59100], [7, -16], [9, 0], [-3, -56], [-22, -69], [-13, -10], [-5, 0], [5, 101], [-9, 57], [3, 39], [24, -18], [4, -28]], [[77309, 59388], [-2, -95], [-14, 46], [-2, 52], [1, 49], [3, 8], [1, -8], [8, -22], [5, -30]], [[76334, 60955], [-6, -15], [-11, 11], [-3, 6], [26, 64], [3, -24], [-9, -42]], [[76243, 61028], [-18, -56], [-7, 84], [30, 47], [14, 44], [15, 31], [5, -37], [-14, -71], [-25, -42]], [[77103, 61205], [-10, -7], [-16, 37], [-3, 90], [13, 20], [7, 5], [11, -11], [3, -14], [2, -18], [-3, -19], [-4, -83]], [[76024, 62605], [-4, -5], [-29, 49], [-23, 62], [36, 12], [35, -13], [1, -33], [-8, -53], [-8, -19]], [[76031, 63109], [32, -48], [13, 3], [19, -30], [1, -12], [-4, -24], [-9, -19], [-24, -20], [-16, 16], [-7, 52], [-19, 25], [-6, 20], [13, 29], [7, 8]], [[75969, 63301], [6, -79], [-19, 30], [-7, 41], [-2, 42], [22, -34]], [[75835, 63320], [4, -55], [-13, 22], [-18, 76], [1, 50], [12, -23], [14, -70]], [[77811, 63546], [-33, 36], [-14, 21], [-17, 5], [-19, -23], [-14, -25], [-15, -9], [-22, -3], [-30, 13], [-20, 11], [-3, -6], [11, -53], [4, -41], [-5, -22], [-9, -18], [-15, -15], [-17, -8], [-15, 1], [-24, 20], [-18, 1], [-16, -10], [-10, -15], [-5, -19], [-9, -103], [-8, -33], [-12, -18], [-11, -2], [-16, 5], [-16, -5], [-74, -40], [-11, -4], [-23, -3], [-22, -1], [-15, 2], [-36, 41], [-17, 5], [-9, -12], [-7, -55], [-21, -35], [-27, -77], [-7, -112], [3, -78], [-25, -77], [-2, -37], [13, -179], [-2, -19], [-5, -9], [-16, -6], [-26, -19], [-17, -18], [-9, -2], [-24, 13], [-6, 1], [1, -14], [20, -78], [20, -36], [21, 4], [9, -7], [-2, -19], [8, -49], [19, -78], [5, -59], [-11, -59], [2, -21], [6, -12], [18, -54], [38, -86], [37, -92], [31, -77], [23, -53], [50, -99], [9, -46], [2, -94], [13, -54], [11, -39], [8, -32], [19, -106], [8, -15], [41, 65], [9, -14], [5, -24], [0, -31], [-6, -35], [-13, -33], [-63, -75], [-5, -64], [-4, -98], [-2, -120], [3, -90], [-2, -21], [-5, -10], [-24, 4], [-34, -45], [-12, -4], [-15, -18], [-11, -21], [-4, -33], [7, -99], [12, -93], [24, -68], [19, -54], [26, -74], [21, -66], [42, -71], [59, -107], [22, -59], [20, -72], [14, -61], [6, -81], [4, -46], [1, -152], [-11, -34], [-8, -40], [5, -42], [13, -40], [0, -46], [13, -82], [22, -50], [21, -34], [9, -26], [-3, -43], [6, -45], [4, -50], [9, -68], [16, -58], [26, -178], [-1, -18], [-11, -36], [-16, -33], [-10, -10], [-10, -34], [-23, -95], [-47, -163], [-46, -107], [-38, -76], [-28, -46], [-8, -27], [0, -22], [5, -38], [-2, -73], [-6, -46], [-8, -49], [-4, -43]], [[77417, 57713], [-13, -7], [-26, -83], [-12, 42], [-7, 43], [8, 98], [-16, 186], [10, 25], [9, 13], [18, 71], [21, 70], [2, 85], [17, 61], [-4, 52], [1, 61], [4, 49], [-2, 41], [14, 42], [24, 32], [-10, 11], [-10, 23], [-31, -35], [-16, 11], [-3, 37], [4, 39], [2, 23], [12, 27], [-1, 52], [-6, 46], [9, 57], [-18, 0], [-9, 11], [5, 32], [17, 28], [-15, 53], [11, 57], [0, 71], [-8, 62], [0, 45], [-11, 79], [-6, 101], [-24, 76], [-19, 110], [-48, 144], [0, 61], [-2, 54], [-11, 27], [-14, -192], [-11, 38], [-3, 107], [-7, 50], [7, 101], [-28, 100], [-6, 73], [-19, 110], [6, 25], [25, -25], [-23, 64], [-19, -14], [-16, 69], [-3, 188], [-16, 70], [9, 71], [-18, 257], [-35, 82], [7, 72], [9, 63], [-2, 118], [8, 36], [17, 28], [-16, -10], [-13, -8], [-32, -7], [-36, -2], [-12, 86], [-18, 41], [-16, 86], [-9, 98], [6, 19], [-27, 40], [-8, 24], [-29, 64], [-33, 48], [8, -34], [9, -21], [-17, -59], [16, -99], [-14, -63], [-13, -82], [-12, -40], [-40, -84], [-32, -29], [-21, -5], [-19, 9], [-23, 44], [-5, 36], [-4, 61], [-8, 9], [-9, -7], [14, -79], [0, -37], [24, -71], [-9, -20], [-44, -38], [-15, 6], [-10, -8], [-3, -32], [-6, -18], [-69, -48], [-14, -56], [-9, -55], [-35, -80], [-46, -66], [-11, 3], [-13, 16], [2, 71], [15, 61], [-5, 64], [-3, -37], [-30, -90], [-14, -29], [-27, 8], [-38, -12], [-14, 92], [0, 34], [-3, 29], [5, 30], [-2, 25], [-9, -47], [-3, -40], [-14, -35], [-38, -39], [-1, 49], [-2, 44], [8, 39], [-1, 63], [12, 90], [-1, 31], [-3, 34], [-7, -50], [-4, -51], [-8, -16], [-13, -11], [-26, -60], [-15, -52], [-40, -50], [-20, 5], [-3, 63], [16, 225], [15, 32], [8, 39], [12, 131], [15, 50], [6, 104], [6, 18], [19, 82], [7, 150], [-8, 75], [-18, 72], [-18, 217], [-46, 176], [-4, 59], [-22, 71], [21, 5], [-43, 62], [-6, 26], [-9, 146], [2, 81], [-6, -11], [-6, -50], [-17, -21], [7, -87], [-1, -21], [-9, -33], [-36, 35], [-26, 38], [-30, 93], [-29, 104], [10, 16], [13, 2], [42, -77], [27, -16], [17, 19], [21, 33], [10, 64], [-11, 24], [-20, 13], [-13, 17], [-20, 43], [-2, 23], [-6, 28], [-20, 20], [-16, 25], [14, 45], [13, 34], [-35, -2], [-39, 58], [-9, 16], [-13, 12], [-31, 7], [-26, -17], [12, -82], [-2, -27], [-17, 4], [-36, 124], [11, 32], [15, 30], [-7, 4], [-15, -2], [14, 111], [-9, 16], [-4, -34], [-8, -34], [-30, -78], [-15, 15], [-10, 19], [14, 41], [8, 11], [5, 22], [-11, 43], [-18, 32], [-14, 53], [-7, 1], [6, -63], [-2, -91], [-32, 100], [-64, 143], [-15, 42]], [[55331, 76919], [-1, -7], [2, -20], [6, -21], [22, -20], [32, -41], [38, -76], [18, -22], [16, -5], [30, -32], [22, -7], [23, -9], [63, -65], [28, -19], [19, -25], [3, -23], [-1, -14]], [[55372, 75961], [-43, 46], [-18, 64], [-63, 109], [-73, 74], [-4, 12], [4, 14], [4, 11], [-15, 1], [-11, -9], [-10, 3]], [[74392, 80162], [1, 0], [33, 1], [14, 13], [12, 19], [24, 21], [5, 24], [0, 48], [16, 41], [41, 12], [15, 6], [16, -6], [26, 5], [25, 2], [13, -12], [18, -11], [24, 2], [8, 19], [1, 26], [10, 7], [12, -18], [7, -14], [11, -6], [28, 16], [19, 18], [7, 37], [11, 18], [16, -10], [26, 1], [22, 28], [29, 22], [21, 11], [4, 19], [-9, 42], [2, 46], [28, 26], [37, 3], [28, 17], [8, 49], [13, 14], [14, 6], [34, 8], [24, 20], [15, 9], [42, 26], [38, 6], [17, 21], [13, 27], [21, 10], [22, 23], [29, 30], [11, 4], [48, 17], [19, 6], [11, 4], [20, -1], [9, 31], [21, 23], [21, 8], [10, 23], [20, 29], [27, 16], [43, 2], [41, -3], [24, 5], [21, 43], [3, 21], [5, 22], [16, 8], [20, -35], [17, -22], [26, -23], [13, -21], [15, -3], [16, 16], [11, 39], [22, 6], [23, -6], [6, -19], [2, -19], [11, -34], [26, -29], [33, 2], [14, 5], [32, -4], [32, -6], [34, -7], [10, -1], [38, -4], [54, -5], [23, 2], [49, -9], [10, -26], [9, -61], [8, -59], [2, -47], [13, -24], [16, -8], [10, -19], [19, -26], [14, -37], [17, 3], [12, 8], [26, 3], [33, -2], [23, -21], [8, -27], [19, -15], [15, 5], [46, 0], [15, -1], [16, -15], [22, -3], [13, 19], [39, 13], [22, 27], [18, 0], [13, -13], [10, -18], [15, 8], [8, 15], [13, 0], [13, -10], [33, -16], [23, -31], [19, -2], [23, 8], [11, 5], [11, -15], [15, -9], [12, 12], [20, 7], [76, -16], [17, -31], [14, -14], [11, -25], [20, -18], [42, 6], [16, 19], [34, 40], [13, 39], [18, 13], [19, 7], [18, -1], [19, 2], [23, 29], [19, 10], [27, 36], [5, 17], [14, 42], [8, 28], [14, 43], [7, 69], [5, 37], [-4, 27], [-16, 13], [-21, 7], [-19, 20], [-13, 24], [-8, 33], [-11, 38], [0, 28], [-3, 22], [-9, 18], [-18, 33], [-8, 24], [3, 38], [21, 66], [2, 30], [2, 19], [-1, 17], [7, 39], [11, 17], [14, 42], [18, 19], [23, 1], [10, 12], [4, 42], [11, 32], [8, 23], [13, 25], [80, 48], [34, 60], [11, 30], [13, 65], [13, 27], [18, -9], [21, -38], [16, 0], [23, -21], [64, -44], [35, -13], [22, -4], [30, -12], [19, -26], [37, -41], [32, -11], [54, -4], [66, -2], [19, -8], [48, -29], [54, -33], [50, -30], [39, -23], [22, -22], [22, -13], [23, 11], [29, -2], [70, -27], [44, -22], [37, -17], [12, -23], [1, -30], [-5, -26], [3, -63], [12, -32], [4, -44], [4, -42], [-3, -42], [6, -22], [11, -13], [11, -29], [-3, -30], [-5, -18], [1, -29], [13, -23], [20, -5], [17, -6], [21, -37], [38, -43], [23, -11], [26, -20], [50, -18], [34, -6], [20, -15], [20, -37], [32, -8], [21, -13], [38, -15], [25, 9], [22, 13], [15, -3], [29, -8], [33, -2], [28, 9], [22, 26], [26, 35], [32, 18], [36, 6], [24, 14], [81, 24], [33, 4], [26, 23], [22, 18], [32, 7], [44, -18], [42, -16], [51, -5], [34, -22], [24, -20], [37, -16], [42, 7], [57, 7], [38, -10], [40, -37], [24, -29], [28, -64], [28, -31], [25, -25], [32, -1], [79, -2], [43, -14], [36, -7], [9, -13], [-4, -44], [1, -62], [0, -29], [8, -21], [12, -4], [7, -30], [17, -19], [32, -21], [54, -74], [32, -32], [26, -11], [33, 8], [52, 0], [88, -1], [60, -22], [21, -15], [61, -18], [68, -19], [57, -20], [34, 26], [30, 2], [28, -19], [28, -28], [22, 3], [33, 13], [104, 80], [37, 29], [26, -7], [23, 10], [17, 9], [45, 13], [27, 3], [28, 7], [40, 5], [83, 52], [33, 10], [56, -14], [30, 9], [30, 26], [40, 27], [10, 44], [20, 61], [43, 44], [35, 39], [36, 37], [44, 32], [41, 23], [52, 59], [42, 31], [21, 9], [25, -10], [47, -8], [33, 2], [19, -7], [38, -29], [35, -26], [26, -45], [49, -64], [25, -21], [18, -9], [44, -6], [36, -3], [22, 14], [36, 27], [58, 34], [23, -1], [37, -18], [56, -33], [22, -25], [14, -31]], [[90350, 59998], [-13, -27], [-10, 6], [-6, 9], [-2, 15], [22, 15], [10, -5], [-1, -13]], [[90461, 60466], [-12, -29], [-8, 45], [-1, 19], [10, 17], [7, -1], [4, -51]], [[90486, 60560], [-1, -15], [-14, 4], [-4, 6], [8, 52], [20, 24], [10, 5], [-9, -25], [-2, -27], [-8, -24]], [[90475, 61255], [-6, -4], [-9, 2], [-6, 9], [-2, 15], [18, 1], [7, -12], [-2, -11]], [[90493, 62257], [-14, -13], [17, 57], [5, 10], [8, -21], [-16, -33]], [[90474, 62651], [-9, -22], [-7, 16], [-2, 31], [13, -3], [4, -6], [1, -16]], [[59134, 36376], [-30, 0], [-52, -3], [-31, -2], [-35, -2], [-42, 17], [-24, -4]], [[58920, 36382], [-2, 184], [-8, 41], [-8, 59], [-2, 38], [5, 38], [2, 60], [-2, 53], [-25, 27], [-6, 8]], [[58874, 36890], [-6, 42], [-2, 64], [18, 82], [-1, 157], [2, 55], [-1, 109], [0, 133], [0, 118], [0, 102], [-5, 49], [-4, 27], [-12, 54], [-14, 113], [-16, 85], [-21, 56], [-7, 30], [-7, 39], [-20, 70], [-16, 41], [-4, 33], [0, 84], [-18, 151], [-13, 111], [-20, 119], [-13, 80], [-2, 14], [-2, 30]], [[58690, 38938], [40, 60], [39, 83], [46, 98], [42, 88], [36, 77], [49, 105], [49, 104], [12, 13], [5, 9], [-21, 92], [34, 108], [1, 69], [-1, 67], [4, 31], [10, 27], [40, 56], [30, 89], [25, 83], [34, 134], [3, 31], [1, 33], [-10, 45], [-22, 73], [-17, 63], [-15, 98], [15, 85], [5, 51], [0, 28], [-6, 26], [-17, 20], [-14, 13], [-4, 35], [0, 42], [6, 23], [37, 37], [8, 20], [4, 23], [1, 32], [11, 81], [14, 77], [1, 27], [-5, 24], [-4, 43], [-2, 65], [-1, 183], [8, 189], [-3, 107], [-24, 123], [-2, 89], [17, 62], [3, 37], [-13, 4], [-26, 4], [-19, 12], [-29, 51], [-51, 42], [-58, 39], [-84, 11], [-70, 124], [-55, 20], [-18, 15], [-53, 74], [-82, 7], [-86, 8], [-54, 2], [-8, 10], [-3, 102], [0, 91]], [[58443, 42832], [-5, 79], [-8, 90], [-12, 35], [-15, 61], [-8, 67], [-1, 32], [3, 12], [60, 47], [25, 24], [38, 27], [67, 38], [60, 34], [55, 33], [58, 35], [24, 23], [29, 23], [70, 47], [20, 16], [41, 27], [20, 10], [78, 54], [89, 62], [31, 21], [60, 41]], [[59222, 43770], [12, -17], [40, -142], [32, -83], [37, -77], [6, 4], [10, 18], [19, 7], [57, 18], [23, 1], [14, 20], [30, 15], [34, 9], [12, -10], [36, -99], [5, -77], [8, -110], [2, -54], [-1, -72], [-4, -90], [-29, -104], [-6, -51], [-16, -80], [-21, -39], [-10, -33], [1, -33], [11, -28], [24, -51], [8, -32], [-2, -29], [0, -40], [6, -27], [6, -16], [25, -26], [23, -65], [41, -78], [48, -111], [23, -34], [18, -8], [9, -38], [-5, -43], [-14, -25], [6, -35], [7, -19], [9, -9], [22, -2], [19, 7], [5, 12], [-2, 167], [-15, 97], [-14, 38], [-3, 7], [5, 32], [16, 75], [14, 74], [8, 31], [10, 19], [67, 20], [31, 17], [12, 21], [10, 58], [8, 160], [3, 151], [-7, 88], [10, 133], [15, 82], [-8, 17], [-5, 111], [-44, 118], [-56, 152], [-31, 82], [-36, 94], [-65, 146], [-29, 52], [-16, 21], [-52, 17], [-14, 28], [-14, 45], [-5, 83], [0, 62], [-6, 105], [-11, 149], [-5, 44], [-15, 112], [-14, 107], [-1, 26], [5, 26], [24, 79], [18, 55], [8, 31], [14, 83], [4, 40], [11, 18], [46, 8], [37, -2]], [[59710, 45173], [62, 2], [66, -5], [9, -3], [15, -9], [16, 1], [19, 12], [20, 29], [23, 45], [35, -1], [47, -47], [26, -42], [5, -35], [31, -21], [59, -5], [44, 18], [27, 43], [28, 22], [29, 3], [23, -15], [15, -32], [29, -22], [43, -14], [47, 20], [51, 55], [29, 57], [7, 59], [8, 36], [10, 12], [27, 8], [44, 2], [38, -19], [50, -59], [31, 39], [53, 67], [53, 36], [51, 0], [42, 26], [33, 50], [34, 33], [37, 13], [34, 25], [47, 52], [50, 77], [50, 79], [32, 50]], [[61239, 45815], [15, -60], [26, -54], [-15, -31], [-19, -28], [30, -38], [-22, -57], [-3, -40], [6, -15], [5, -24], [-15, -65], [-20, -50], [-5, -38], [18, -68], [-9, -119], [17, -108], [4, -55], [6, -37], [-8, -67], [2, -111], [4, -46], [-10, -57], [17, -20], [9, -63], [-3, -71], [-5, -38], [-29, -46], [-4, -18], [1, -27], [36, -1], [2, -42], [-3, -33], [2, -63], [-5, -40], [8, -46], [-10, -51], [4, -40], [0, -51], [9, -130], [1, -160], [2, -25], [13, -18], [18, -9], [0, -44], [-21, -58], [-1, -35], [3, -50], [22, 68], [14, -1], [12, -26], [-2, -39], [4, -20], [-2, -38], [7, -48], [-3, -42], [-16, -29], [-21, -50], [-4, -48], [2, -30], [-14, -10], [-7, -19], [10, -45], [-1, -39], [-25, -123], [-68, -167], [-30, -59], [-27, -65], [0, -27], [-3, -23], [-32, -92], [-34, -15], [-20, -25], [15, -81], [-22, -19], [-39, -64], [-106, -122], [-17, -29], [-27, -75], [-35, -19], [-20, -21], [-36, -8], [-12, 6], [-12, -3], [-10, -16], [-70, -53], [-66, -42], [-16, -19], [-11, -26], [-58, -41], [-91, -103], [-74, -97], [-54, -98], [-14, -15], [-17, -33], [-5, -50], [-6, -28], [-40, -103], [-60, -121], [-11, -34], [-24, -67], [-2, -44], [-22, -14], [-18, 42], [-7, -81], [-15, -6], [-16, 17], [-40, -41], [-35, -46], [-56, -98], [-80, -191], [-116, -183], [-16, -5], [-10, 0], [-37, 64], [-20, 5], [18, -38], [12, -32], [-3, -61], [1, -93], [-14, -181], [2, -40], [16, -51], [31, -62], [30, -79], [37, -224], [3, -115], [39, -147], [1, -64], [16, -159], [-1, -128], [-3, -79], [19, -33], [7, 30], [-2, 50], [5, 80], [10, 35], [11, -5], [3, -38], [7, -33], [3, -31], [0, -43], [-14, -162], [4, -66], [19, -110], [-22, -128], [-33, -301], [-1, -52], [7, -23], [18, -7], [6, 38], [11, 0], [5, -23], [-14, -139], [-15, -61], [-51, -149], [-27, -64], [-46, -63], [-106, -98], [-215, -142], [-85, -70], [-50, -42], [-108, -132], [-47, -88], [-19, -102], [-19, -47], [-18, -59], [16, -50], [16, -39], [18, -25], [10, -22], [12, -16], [13, 80], [6, 25], [11, 2], [-6, -98], [-13, -333], [-1, -11]], [[59622, 44922], [-5, 17], [-9, 8], [-10, -7], [-4, -21], [11, -27], [12, 0], [5, 30]], [[59644, 44866], [7, 13], [3, 17], [0, 16], [-5, 11], [-7, 6], [-9, -4], [-4, -22], [-1, -31], [6, -10], [10, 4]], [[45451, 63194], [-17, -56], [-8, 22], [-3, 37], [15, 52], [8, 28], [14, 9], [-9, -92]], [[46588, 60373], [-6, 5], [-29, 41], [-15, 50], [-23, 37], [-32, 24], [-21, 29], [-10, 32], [-12, 21], [-12, 11], [-1, 11], [3, 16], [-3, 29], [-19, 65], [-18, 30], [-15, -5], [-9, 8], [-5, 14], [-2, 22], [-10, 18], [-18, 8], [-14, 48], [-11, 88], [-14, 69], [-17, 49], [-13, 19], [-9, 3], [-3, 8], [-2, 14], [-14, 5], [-19, -15], [-17, 5], [-8, 24], [-12, 3], [-15, -20], [-16, 6], [-18, 31], [-10, 31], [-1, 31], [-31, 62], [-60, 93], [-65, 44], [-70, -6], [-39, 5], [-9, 14], [-9, -1], [-8, -17], [-9, -4], [-10, 10], [-6, -7], [-3, -24], [-25, -12], [-47, -1], [-38, -14], [-29, -29], [-41, -12], [-53, 4], [-31, 10], [-11, 17], [-16, 4], [-19, -9], [-18, -46], [-15, -83], [-13, -47], [-10, -12], [-11, -62], [-6, -103], [-10, -46]], [[45406, 60966], [0, 258], [15, 97], [5, 85], [33, 187], [38, 153], [36, 204], [14, 197], [-5, 193], [-11, 172], [-18, 113], [-17, 164], [-26, 87], [-47, 76], [-11, 44], [11, 16], [29, 12], [18, 59], [-38, -23], [44, 181], [14, 123], [-2, 81], [9, 50], [-35, 108], [-26, 136], [-14, 22], [-14, 11], [-1, -32], [-8, -29], [-17, 18], [-29, 99], [-41, 161], [-15, 17], [-12, -23], [-7, -21], [-14, -134]], [[45264, 63828], [-4, 53], [6, 63], [10, 77], [11, 108], [36, 0], [63, 0], [64, 0], [64, 1], [64, 0], [63, 0], [64, 0], [64, 0], [63, 0], [64, 1], [64, 0], [63, 0], [64, 0], [64, 0], [64, 0], [63, 1], [64, 0], [42, 0], [-3, 76], [-2, 61], [-2, 82], [-3, 81], [-2, 81], [-3, 76], [-2, 76], [-3, 71], [-2, 65], [-3, 37], [-14, 74], [-3, 37], [4, 39], [9, 37], [25, 67], [37, 51], [44, 59], [33, 46], [17, 11], [52, 16], [40, 34], [40, 33], [17, 19], [2, 63], [0, 69], [0, 79], [0, 78], [0, 79], [0, 78], [0, 79], [0, 78], [0, 78], [0, 79], [0, 78], [0, 79], [0, 78], [0, 79], [0, 78], [0, 78], [0, 79], [0, 78], [0, 69], [41, 0], [52, 0], [52, 0], [51, 0], [52, 0], [52, 0], [52, 0], [52, 0], [51, 0], [52, 0], [52, 0], [52, 0], [51, 0], [52, 0], [52, 0], [52, 0], [51, 0], [57, 0], [0, 66], [0, 94], [0, 129], [0, 130], [0, 114], [0, 114], [-1, 96]], [[32736, 61486], [-1, -34], [-19, 10], [-1, 30], [9, 31], [5, 3], [7, -40]], [[66014, 40043], [-36, -17], [-39, 6], [-15, 31], [-3, 13], [13, 12], [-1, 39], [7, 63], [8, 26], [20, 23], [8, 51], [17, 34], [22, 4], [22, -63], [16, -66], [-3, -65], [-16, -25], [-5, -38], [-15, -28]], [[59222, 43770], [-15, 42], [-12, -10], [-17, -30], [-9, -8], [-5, 1], [-3, 8], [-4, 18], [-13, 54], [-15, 38], [-15, 15], [-13, 18], [5, 17], [6, 12], [-2, 13], [-7, 18], [-28, 27], [0, 11], [24, 23], [15, 28], [11, 26], [13, 58], [11, 57], [8, 19], [3, 38], [-2, 43], [5, 54], [3, 52], [-8, 20], [-7, 35], [8, 59], [13, 41], [62, 43], [43, 38], [9, 17], [14, 33], [8, 32], [-5, 10], [-34, 0], [-8, 13], [-25, 112], [14, 130], [1, 50], [-1, 63], [-4, 46], [-10, 20], [-7, 24], [2, 68], [10, 8], [21, 89], [10, 52], [-12, 42], [-12, 60], [-6, 38], [-3, 13], [8, 23], [15, 23], [16, 6], [17, 11], [54, 111], [1, 22], [-10, 37], [-20, 56], [-5, 23], [-2, 67], [-8, 20], [-30, 46], [-22, 47], [7, 49], [4, 53], [-12, 29], [-16, 30], [-11, 44], [-5, 33], [-13, 13], [-12, 0], [-9, -20], [-9, 2], [-12, 7], [-4, 28], [-1, 31], [-8, 20], [-7, 29], [-1, 16]], [[59144, 46424], [5, 4], [10, 3], [43, -58], [27, -3], [29, -11], [25, -51], [13, -7], [17, 7], [47, 6], [19, -8], [24, -30], [10, -4], [15, -1], [3, 8], [2, 18], [-3, 36], [3, 19], [10, 21], [25, -24], [65, -112], [2, -14], [41, -111], [13, -47], [0, -25], [13, -97], [3, -45], [-3, -34], [1, -28], [5, -40], [-2, -16], [15, -58], [7, -49], [1, -47], [-4, -47], [-13, -67], [-2, -27], [3, -25], [8, -27], [14, -29], [11, -35], [7, -41], [6, -19], [7, 1], [14, -6], [11, -24], [13, -41], [4, -46], [2, -20]], [[80941, 53234], [-9, -8], [-13, 21], [-3, 175], [9, 15], [6, -2], [7, -32], [-1, -76], [1, -68], [3, -25]], [[78950, 53416], [-14, -6], [-7, 4], [-5, 23], [11, 51], [4, 9], [11, -56], [0, -25]], [[78143, 53564], [-14, -10], [0, 15], [2, 21], [10, 20], [5, -12], [-3, -34]], [[82679, 54244], [5, 20], [-1, 27], [13, 7], [15, -6], [34, -38]], [[77857, 54893], [-7, -16], [-20, 9], [4, 94], [11, 12], [18, -17], [8, -16], [-14, -66]], [[77735, 55567], [19, -62], [-9, -27], [-5, -8], [-12, 9], [-11, -24], [-11, -4], [-11, 42], [-13, 17], [-3, 30], [18, 5], [10, -10], [20, 20], [8, 12]], [[78361, 55438], [48, -22], [18, -18], [54, -178], [71, -126], [30, -46], [23, -23], [32, -67], [28, -84], [61, -237], [10, -105], [5, -159], [-14, -240], [-16, -119], [3, -57], [22, -86], [-6, -82], [4, -68], [-2, -189], [13, -55], [15, -36], [76, -112], [6, -41], [37, -143], [70, -310], [19, -139], [-2, -38], [-8, -15], [-21, -14], [-17, 27], [-6, 20], [2, 24], [-7, 24], [-16, 28], [-10, 26], [3, -42], [0, -55], [-21, -5], [-28, 17], [-34, -15], [-40, -68], [-19, -2], [-15, 58], [-8, 39], [-12, 28], [-127, 142], [-47, 37], [-50, 107], [-112, 119], [-71, 116], [-30, 71], [-73, 64], [-31, 74], [-16, 15], [-15, 27], [16, 72], [-7, 76], [-8, 64], [-51, 126], [-25, 88], [-49, 87], [-19, 51], [-18, 58], [11, 21], [11, 12], [-10, 43], [-27, 74], [-13, 85], [0, 160], [-39, 226], [-34, 313], [6, 110], [-9, 119], [-22, 114], [-29, 82], [-11, 67]], [[77810, 55553], [5, 27], [7, 88], [4, 18], [11, 8], [13, -2], [23, -76], [61, -48], [18, -11], [24, 19], [11, -12], [10, -20], [7, -54], [16, -50], [32, 7], [11, -7], [7, -1], [6, -44], [3, -77], [-3, -44], [-23, -64], [-3, -43], [12, -27], [15, -28], [9, -22], [10, 3], [12, 15], [11, 37], [7, 33], [41, 35], [42, 33], [6, -4], [7, -14], [13, -47], [8, -10], [12, -4], [19, 5], [23, 26], [13, 50], [5, 39], [33, 68], [4, 50], [9, 33]], [[80452, 53011], [18, -80], [7, -18], [40, -54], [33, -27], [36, -11], [37, -2], [15, 4], [14, 10], [14, -11], [76, -88], [30, -15], [31, 6], [13, -8], [44, -67], [13, -8], [22, 5], [-28, 30], [-18, 22], [-8, 41], [4, 44], [18, 29], [12, 31], [5, 94], [8, 48], [14, 46], [5, 43], [-16, 34], [-4, 57], [3, 47], [10, 33], [15, -22], [15, -19], [15, 2], [11, 7], [2, 25], [-3, 43], [1, 78], [19, 63], [31, 43], [29, 21], [108, 35], [172, 89], [51, 35], [19, 18], [15, 25], [27, 80], [50, 125], [35, 103], [74, 151], [59, 139], [8, 26], [9, 76], [1, 36], [-2, 36], [8, 17], [12, 10], [3, 0]], [[81983, 54665], [65, 19], [14, 21], [26, 46], [10, 26], [7, 58], [-32, 34], [-12, 44], [-1, 48], [38, 88], [13, 21], [6, -31], [17, -8], [15, -1], [16, 2], [22, 44], [12, 64], [39, 91], [14, 70], [8, 72], [99, 226], [12, 36], [59, 227], [7, 7], [16, -22], [4, -72], [-2, -31], [-9, -47], [-6, -49], [7, 1], [28, 30], [29, 79], [17, 69], [14, 30], [28, -17], [6, -12], [-2, -49], [3, -29], [11, -61], [24, -37], [33, -24], [31, -34], [10, -22], [6, -27], [7, -45], [0, -44], [-22, -44], [10, -71], [-2, -41], [-7, -35], [-33, -33], [88, 33], [22, 18], [30, 47], [16, -41], [15, -69], [-12, -18], [-38, -26], [-2, -10], [13, -36], [16, 3], [31, 24], [29, 38], [14, 0], [15, -8], [29, -24], [16, -20], [13, -26], [9, -53], [33, -19], [68, -75], [12, -7], [14, -1], [35, 9], [13, -10], [9, -27], [3, -34], [-1, -36], [-4, -27], [-8, -22], [-25, -34], [-61, -45], [-66, -34], [-34, 2], [-47, 29], [-17, -3], [-17, -14], [-21, -92], [39, -92], [66, -96], [9, -24], [-2, -29], [-11, -18], [-14, -9], [-37, -16], [-38, -11], [-30, -17], [-31, -21], [-31, 7], [-43, 43], [-12, 3], [-13, -22], [-13, -60], [-8, -17]], [[82539, 55972], [-17, -31], [-6, 37], [1, 47], [23, 44], [33, 8], [4, -35], [-4, -40], [-7, -21], [-27, -9]], [[56494, 41681], [60, 24], [56, 22], [66, 23], [53, 18], [13, 5], [128, -21], [55, -15], [19, -14], [25, -38], [47, -92]], [[55550, 37570], [0, -242], [0, -256], [0, -256], [0, -256], [0, -256], [0, -257], [0, -256], [0, -256], [0, -81], [-29, 1], [-57, -32], [-37, -40], [-16, -50], [-21, -31], [-26, -11], [-11, -25], [3, -41], [-10, -31], [-24, -21], [-38, 6], [-52, 34], [-66, 8], [-80, -18], [-58, 9], [-35, 34], [-38, 20], [-39, 5], [-23, 15], [-47, 25], [-9, 45], [-5, 34], [-14, 35], [-1, 28], [10, 22], [2, 35], [-8, 48], [-13, 24], [-18, -1], [-11, 18], [-5, 38], [-11, 29], [-26, 30], [-34, -22], [-16, -34], [-9, -52], [-9, -27], [-4, -44], [-2, -31], [-9, -33], [-9, -13], [-10, 6], [-17, -13], [-39, -49], [-11, -26]], [[54568, 35358], [-31, 47], [-91, 175], [-32, 46], [-48, 107], [-105, 334], [-15, 64], [-20, 161], [-23, 120], [-3, 69], [11, 39], [-6, 53], [-12, 47], [-36, 62], [-10, 208], [-24, 134], [5, 110], [-11, 101], [-1, 65], [5, 123], [-19, 141], [-39, 138], [-35, 199], [-5, 88], [3, 235], [-6, 95], [0, 113], [-14, 117], [-6, 63], [10, 51], [6, -16], [10, -8], [7, 67], [1, 59], [-17, 146], [-39, 149], [-97, 244], [-24, 92], [-13, 77], [-108, 321], [-46, 226], [-33, 196], [-35, 90], [-162, 634], [-36, 101], [-65, 121], [-15, 41], [-25, 115], [-48, 155], [-12, 144], [-4, 164], [6, 125]], [[96539, 38811], [-9, -22], [-11, 5], [-8, 8], [-6, 12], [6, 44], [24, -22], [4, -25]], [[96669, 39498], [13, -10], [22, 1], [-5, -98], [-32, -16], [-11, 1], [-7, 21], [-18, 14], [1, 33], [-18, 76], [31, 11], [17, 20], [0, -18], [2, -22], [5, -13]], [[96499, 39653], [-15, -4], [-20, 41], [-39, 21], [-17, 36], [-11, 43], [22, 11], [22, 58], [-15, 22], [-26, 3], [3, 23], [42, 27], [18, -16], [8, -18], [-2, -92], [19, -29], [20, -65], [-1, -18], [-8, -43]], [[96262, 39919], [-15, -5], [18, 52], [1, 33], [7, 63], [-1, 22], [12, -3], [12, -18], [-14, -16], [-5, -28], [0, -34], [6, -7], [-9, -37], [-12, -22]], [[95611, 40180], [31, -36], [34, 15], [42, -57], [108, -172], [37, -37], [23, -14], [16, -28], [16, -40], [20, -28], [9, -26], [2, -36], [8, -22], [37, -57], [22, -50], [32, -26], [13, -30], [17, -14], [18, -31], [30, -24], [68, -88], [53, -84], [26, -52], [29, -46], [36, -37], [34, -42], [17, -99], [-9, -35], [-20, -18], [-18, -1], [-17, -12], [-56, 64], [-14, 9], [-15, -4], [-8, 14], [-6, 21], [-35, 24], [-32, 37], [-9, 26], [-5, 32], [-8, 19], [-45, 28], [-31, 31], [-22, 44], [-34, 31], [-54, 63], [-27, 20], [-24, 31], [-65, 115], [-23, 21], [-20, 51], [-55, 120], [-27, 50], [-29, 44], [-22, 52], [-17, 61], [-40, 88], [-5, 38], [2, 38], [-10, 25], [-16, 15], [-8, 26], [1, 35], [5, 18], [40, -60]], [[94430, 40718], [-4, -12], [-2, 92], [8, 34], [5, -71], [-7, -43]], [[54160, 65089], [31, -333], [23, -285], [2, -183], [1, -47], [9, -32], [22, -33], [87, -263], [-19, -46], [13, -81], [23, -35], [72, -157], [10, -31], [-4, -25], [-51, -185], [-9, -45], [-10, -235], [-7, -167], [-10, -228], [-11, -273], [-10, -230], [-12, -304], [-12, -289], [-73, -158], [-129, -280], [-105, -229], [-53, -153], [-103, -298], [-46, -194], [-36, -100], [-18, -44], [16, -141], [28, -248]], [[53779, 59737], [-50, -2], [-28, -17], [-37, -57], [-40, -22], [-49, -49], [-31, -40], [-29, -31], [-40, -76], [-14, -58], [-40, -11], [-55, 9], [-36, 59], [-82, 61], [-54, 24], [-25, 8], [-125, 10], [-135, -24], [-68, -28], [-12, -6], [-39, -37], [-32, -41], [-87, -187], [-116, 6], [-67, 21], [-58, 29], [-82, 87], [-100, 134], [-39, 18], [-34, 10], [-12, -1], [-120, -133], [-23, 3], [-28, -15], [-19, -33], [-13, -17], [-15, -2], [-19, 7], [-18, 20], [-18, 37], [-50, 148], [-10, 26], [-21, 44], [-36, 68], [-24, 32], [-14, 8], [-18, -6], [-96, 59], [-96, 62], [-21, -8], [-15, -13], [-33, -46], [-40, -8], [-49, 4], [-28, 6], [-44, -16], [-29, -18], [-38, -31], [-50, -84], [-14, -11], [-12, -14], [-17, -232], [-14, -70], [-25, -91], [-49, -89], [-35, -53], [0, -71], [-3, -118], [0, -80], [2, -53], [-6, -25], [-2, -23], [2, -34], [8, -16], [4, -22], [-3, -17], [-16, -21]], [[96649, 35127], [6, -6], [5, -3], [3, -5], [0, -9], [-3, -10], [-3, -4], [-1, -2], [-1, -1], [0, -3], [0, -2], [-2, 8], [-3, 6], [-3, 0], [-2, -6], [-1, 0], [-1, 6], [-1, 6], [-1, 5], [1, 5], [3, 5], [0, 4], [-2, 2], [-3, -2], [4, 9], [5, -3]], [[52027, 54388], [-26, -18], [-18, 4], [24, 77], [12, -17], [16, -7], [-8, -39]], [[53779, 59737], [44, -124], [47, -133], [36, -104]], [[52376, 54582], [-3, 1], [-8, -19], [-23, 13], [-11, 39], [-14, 6], [-25, 57], [-5, -9], [26, -145], [-10, -57], [-73, -1], [-64, -19], [-43, 1], [-22, 21], [-10, 54], [-3, -5], [-3, -30], [-13, -22], [-49, -5], [-22, 37], [-17, 42], [-19, 18], [3, -17], [22, -41], [-3, -58], [-39, -67], [-25, -4], [-16, 29], [-8, 47], [-4, 70], [-10, 46], [-6, 0], [5, -42], [2, -34], [0, -71], [19, -55], [-29, -17], [-11, -1], [-23, -1], [-4, 20], [-5, 46], [-6, 12], [-7, -78], [-15, -5], [-10, 1], [-46, -17], [-10, 3], [-2, 14], [6, 22], [-2, 35], [-15, -27], [-3, -54], [-9, -8], [-27, 7], [-29, 28], [-18, 28], [-30, 39], [-58, 111], [-10, 49], [-17, 61], [-12, 62], [-18, 105], [5, 8], [14, -9], [7, 15], [-25, 12], [-5, 12], [-1, 37], [1, 45], [19, 16], [18, 8], [8, 27], [5, 28], [-45, -42], [-43, 47], [-9, 29], [4, 22], [21, 3], [29, -1], [17, 21], [-10, 8], [-19, -1], [-7, 14], [0, 34], [-6, -7], [-8, -31], [-29, -22], [-16, 22], [-2, 50], [-4, 23], [-14, 17], [-50, 132], [-63, 110], [-57, 76], [-84, 36], [-178, -2], [-10, 11], [11, 17], [16, 12], [57, 61], [-10, 8], [-59, -38], [-21, -4], [-26, -74], [-156, -12], [-19, -3]], [[26900, 60479], [-7, -21], [-9, -14], [-18, -69], [-6, -6], [-1, 51], [-10, 7], [-13, -18], [-7, -26], [11, -35], [10, 0], [11, -9], [31, -236], [-7, -42], [-19, -65], [-18, -56], [-18, -35], [-23, -148], [-20, -241], [14, -217], [-7, -200], [6, -48], [2, -59], [-15, -10], [-8, 1], [-9, 37], [1, 31], [9, 38], [4, 50], [-5, 27], [-9, -58], [-15, -26], [-10, -9], [-10, -29], [10, -55], [14, -40], [4, -29], [-5, -34], [-3, -117], [-5, 3], [-5, 16], [-14, 1], [-2, -47], [1, -26], [-12, -21], [-4, -20], [10, -14], [11, -9], [13, 2], [12, -58], [3, -47], [-26, -44], [-9, -36], [-14, -43], [-8, -43], [-3, -31], [10, -98], [18, -69], [15, -44], [20, -10]], [[26182, 58215], [0, 15], [-24, 64], [-36, 76], [-141, 234], [-52, 140], [-28, 101], [-27, 53], [-76, 107], [-17, 43], [-76, 143], [-57, 85], [-1, 35], [24, 45], [11, -2], [13, -32], [20, -36], [10, -1], [14, 17], [0, 17]], [[2832, 40850], [-28, -31], [-12, 37], [11, 48], [13, 12], [8, 2], [11, -45], [-3, -23]], [[31054, 58838], [-14, -64], [-8, 28], [-1, 52], [-6, 20], [-11, 12], [-6, 17], [0, 26], [42, -41], [4, -50]], [[32517, 61921], [-7, -12], [-6, 1], [-4, 11], [0, 20], [5, -6], [3, -2], [1, -4], [8, -8]], [[32435, 61994], [-2, -2], [-4, 5], [1, 10], [3, 4], [2, -3], [2, -7], [-2, -7]], [[50930, 81438], [21, 9], [46, 4], [35, -18], [46, -8], [36, 24], [28, -21], [31, 15]], [[51096, 81646], [28, -31], [5, -10], [2, -11], [-34, -12], [-37, 38], [-24, -9], [-9, 18], [0, 12], [25, 9], [44, -4]], [[51357, 82413], [-28, -41], [-17, 12], [-4, 9], [8, 32], [41, 53], [0, -65]], [[51419, 82550], [-52, -42], [-4, 6], [33, 37], [23, -1]], [[51173, 81443], [-24, 9], [-37, 24], [-51, -20], [-36, 24], [-29, 2], [-19, 19], [-19, 31], [14, 21], [13, 7], [54, 4], [40, -13], [71, -68], [18, 1], [19, 8], [-10, 19], [-18, 9], [-26, 18], [-21, 26], [49, 8], [-7, 13], [-6, 23], [-52, 79], [9, 22], [13, 46], [16, 38], [13, 10], [22, 27], [46, 80], [30, 65], [22, 76], [32, 212], [10, 36], [15, 40], [20, -8], [13, -11], [48, 30], [83, 78], [24, 68], [24, 31], [95, 62], [52, 18], [81, 5], [59, 11], [70, 4], [27, -38], [15, -28], [25, -15], [39, -11]], [[51664, 81077], [-54, 2], [-14, 3], [-15, 9]], [[51479, 82595], [-26, -5], [-12, 8], [63, 23], [39, 7], [7, -3], [-71, -30]], [[51647, 82637], [-55, -9], [-19, 7], [-3, 6], [15, 4], [47, 1], [14, -6], [1, -3]], [[51759, 82667], [-39, -20], [-10, 4], [3, 6], [34, 12], [12, -2]], [[51870, 82708], [-25, -2], [7, 15], [24, 12], [13, 0], [-19, -25]], [[51412, 86582], [1, -68], [-25, 5], [-12, 26], [-3, 17], [2, 39], [-6, 41], [7, 20], [10, 3], [16, -36], [10, -47]], [[51377, 87030], [-25, -8], [-19, 6], [7, 55], [10, 9], [15, 4], [16, -30], [-4, -36]], [[52250, 88327], [-27, 0], [-32, 9], [-21, 19], [-3, 16], [38, 21], [37, 12], [18, -23], [1, -37], [-11, -17]], [[52352, 88517], [-31, -1], [-20, 13], [46, 25], [72, 25], [6, 15], [9, 2], [12, -19], [2, -26], [-8, -13], [-88, -21]], [[53119, 89208], [-14, -16], [-33, 13], [-63, -10], [-26, 15], [20, 31], [58, 32], [31, -2], [31, -39], [-4, -24]], [[53324, 89646], [-18, -18], [-35, 5], [-3, 15], [9, 31], [21, 13], [27, -3], [9, -13], [-10, -30]], [[53474, 89805], [-22, -2], [0, 23], [13, 22], [20, 14], [26, 4], [29, 2], [9, -12], [-17, -16], [-58, -35]], [[53449, 89886], [-25, -4], [4, 26], [21, 24], [8, 16], [4, 20], [18, 14], [26, -19], [1, -31], [-13, -30], [-44, -16]], [[53603, 90941], [-41, -31], [15, 56], [22, 56], [30, 32], [16, -12], [-7, -27], [0, -27], [-7, -13], [-28, -34]], [[53853, 91166], [17, -10], [43, 3], [8, -4], [-6, -16], [-19, -18], [-39, -11], [-18, -27], [-12, -9], [-34, -1], [-20, -6], [-25, -24], [-20, 18], [-5, -13], [-4, -23], [-11, -6], [-34, -9], [-8, 53], [16, 20], [12, 22], [19, 4], [17, -2], [30, 50], [42, 14], [26, 1], [25, -6]], [[54224, 91556], [36, -58], [16, -34], [-13, -64], [-35, -32], [-54, -6], [-38, 3], [-24, 16], [-3, 17], [-14, 5], [-37, -22], [-25, -3], [-32, 17], [-9, 28], [34, 35], [16, 27], [38, -3], [10, -8], [21, -5], [13, 32], [-3, 23], [10, 15], [46, -11], [0, 61], [17, 5], [8, -3], [13, -13], [9, -22]], [[54377, 91336], [4, -4], [38, 56], [41, 17], [3, 19], [16, 19], [-2, 31], [9, 24], [21, 7], [13, 8], [15, 5], [27, -20], [15, -22], [19, -50], [-8, -48], [-50, -38], [-40, -17], [-41, -43], [-20, -35], [-17, -8], [-11, 3], [-10, 9], [-21, 0], [-22, -31], [-68, -25], [-27, 7], [-1, 31], [-16, -3], [-26, -36], [-25, -12], [-16, -4], [-31, 14], [-83, -63], [-78, -11], [-25, 7], [0, 38], [50, 49], [41, 34], [142, 23], [88, 101], [21, 109], [21, 39], [-10, 23], [-24, 4], [-1, 34], [12, 37], [47, 51], [25, 22], [42, 62], [20, 14], [23, 0], [23, -16], [-4, -33], [-34, -60], [-50, -51], [6, -37], [20, -30], [5, -51], [1, -50], [-38, -66], [-9, -33]], [[54861, 91933], [34, -33], [15, 10], [29, 3], [22, -11], [18, -21], [22, -1], [13, -27], [7, -36], [-16, -27], [-22, -12], [-6, -31], [9, -44], [-49, -15], [-58, -7], [-22, 21], [-45, -38], [-46, -60], [-21, -7], [-2, 19], [-32, 13], [-42, 1], [1, 14], [8, 10], [36, 15], [7, 30], [-7, 54], [7, 26], [1, 19], [23, 21], [77, -10], [9, 20], [-6, 13], [-39, 22], [6, 15], [28, 14], [28, 2], [8, 22], [1, 10], [4, 6]], [[58321, 92048], [-53, -17], [-6, 14], [11, 22], [14, 44], [22, -2], [22, -17], [17, -20], [-27, -24]], [[55771, 92217], [-15, -14], [-23, -5], [-12, 8], [-17, 6], [-20, -3], [-16, 25], [1, 20], [23, 28], [45, 16], [36, -6], [10, -9], [-12, -66]], [[55348, 92203], [25, -31], [22, 3], [6, 12], [15, 6], [30, -17], [-4, -28], [-42, -36], [-30, -50], [-38, -12], [-18, 6], [-35, -29], [-27, -31], [-28, -38], [-2, -20], [-5, -15], [-104, -15], [-37, -10], [-40, 12], [-19, 26], [6, 14], [40, 5], [1, 24], [10, 14], [13, 8], [9, 30], [16, 8], [30, -7], [20, 22], [11, 3], [14, -18], [6, 25], [-6, 23], [3, 15], [38, 40], [17, 29], [24, 19], [22, -3], [7, 28], [-7, 28], [3, 18], [20, 45], [22, 2], [11, -40], [1, -65]], [[55490, 92290], [15, -7], [14, 4], [11, -6], [23, -30], [25, -12], [2, -15], [-23, -15], [-31, -4], [-32, 5], [-9, 19], [-10, 31], [-27, 31], [-4, 27], [23, 5], [23, -33]], [[56559, 92482], [5, -27], [2, -23], [-26, -32], [-59, -42], [3, -11], [-20, -11], [-31, -8], [-17, 8], [2, 36], [-5, 11], [-23, -15], [-24, 19], [-1, 18], [7, 16], [23, 25], [37, 16], [25, -6], [83, 65], [9, -14], [10, -25]], [[56671, 92492], [-53, -23], [-31, 20], [-13, 20], [-1, 45], [7, 27], [25, 15], [16, -11], [4, -8], [29, -9], [34, -28], [-17, -48]], [[56511, 92635], [-6, -18], [-9, -18], [-23, -18], [-66, -74], [-38, -11], [-13, -12], [-15, -7], [-48, 10], [-14, -15], [-14, -10], [-34, -4], [-21, 4], [-53, 27], [-31, 29], [-17, 26], [49, -1], [17, 6], [33, -5], [19, 26], [42, -3], [80, 18], [29, -10], [67, 60], [21, -2], [32, 17], [13, -15]], [[58574, 92040], [15, -75], [0, -27], [-7, -26], [-10, -13], [-20, -5], [-48, 2], [-66, 30], [-42, 28], [-13, 1], [-6, -3], [10, -28], [-2, -22], [-7, -24], [-9, -21], [-12, -19], [-26, -23], [-45, -18], [-123, -36], [-10, -16], [-40, -100], [-11, -15], [-14, -12], [-43, -16]], [[55728, 91610], [-36, -2], [-105, -7], [46, -50], [16, -20], [3, -29], [-8, -55], [-22, -46], [-26, -38], [-50, -38], [76, -37], [-51, -50], [-24, -20], [-28, 4], [-50, 17], [-120, 42], [-57, 16], [-51, 5], [-28, -1], [-108, 36], [-21, -4], [-39, -16], [-5, -34], [3, -87], [6, -67], [-15, -39], [-14, -26], [-44, -71], [-97, 48], [-67, 32], [-43, -43], [-107, -77], [-55, -154], [-4, -5], [-32, -39], [-42, -18], [-31, -9], [-19, -46], [43, -65], [22, -35], [21, -56], [-4, -35], [-5, -22], [-46, -46], [-98, -119], [-91, -125], [-37, -36], [17, -106], [-31, -31], [-61, -35], [-32, -14], [-34, -7], [-104, -14], [19, -114], [7, -50], [0, -30], [-11, -29], [-13, -56], [-19, -198], [-15, -22], [-21, -54], [-66, -129], [-53, -86], [-76, -124], [62, -39], [57, -29], [12, -44], [7, -73], [-1, -50], [-22, -45], [-17, -32], [-12, -15], [-80, 15], [-103, 20], [-27, 0], [-60, -14], [-54, -29], [-29, -25], [-7, -9], [-36, -56], [-64, -99], [-36, -44], [11, -60], [-59, -115], [38, -117], [2, -4], [20, -47], [-21, -30], [-9, -16], [3, -54], [6, -61], [-5, -35], [-2, -39], [52, -177], [0, -41], [-3, -27], [-16, -109], [-22, -148], [38, -39], [54, -46], [30, -18], [45, -55], [34, -54], [-4, -36], [-10, -39], [-15, -28], [-13, -38], [-6, -28], [-6, -7], [-60, -3], [-32, -11], [-16, -12], [5, -63], [36, -117], [31, -83], [9, -55], [-10, -55], [-10, -28], [0, -39], [-8, -76], [-24, -38], [-30, -42], [-34, -31], [-27, -9], [-23, -4], [-16, -16], [-14, -47], [-13, -49], [-43, -60], [1, -21], [17, -72], [15, -81], [-13, -76], [-11, -81], [-19, -53], [-28, -19], [-20, 10], [-23, 73]], [[53163, 85850], [-1, 17], [-5, 22], [-65, 22], [-12, -1], [-25, 13], [-15, 4], [-31, 8], [-25, 64], [-28, 54], [-3, 22], [0, 101], [-8, 44], [-2, 49], [-17, -39], [9, -63], [-21, -26], [-26, -13], [2, -37], [11, -7], [3, -38], [-7, -56], [-52, -126], [-11, -13], [-7, -17], [-27, 11], [-34, -35], [-32, -5], [-12, 39], [-46, 53], [-22, -3], [20, -26], [19, -34], [-11, -22], [-11, -14], [-18, -8], [-67, -44], [23, -29], [-20, -34], [-23, -5], [-13, -15], [-4, -21], [-69, -61], [-113, -155], [-59, -44], [-40, -46], [-36, 2], [-45, -39], [-114, -34], [-75, 15], [-53, -13], [-28, 26], [-4, 19], [2, 10], [5, 13], [-10, 5], [-21, 2], [-9, -13], [-1, -29], [-10, -8], [-39, 17], [-10, 15], [14, 30], [25, 28], [-5, 5], [-5, 17], [-11, 2], [-35, -4], [-29, 5], [-93, 62], [-21, 33], [-75, 52], [-34, 56], [-19, 61], [2, 56], [9, 87], [15, 22], [68, -31], [68, -51], [10, 3], [22, 40], [41, 32], [-12, 9], [-61, -37], [-23, 21], [-36, 42], [0, 21], [17, 22], [5, 29], [-8, 28], [4, 37], [27, 40], [41, 40], [30, 39], [31, 24], [-4, 8], [-34, -15], [-34, -26], [-39, -44], [-48, -35], [-35, -13], [-17, -12], [-26, -11], [-27, -50], [-29, -21], [-53, -3], [-11, 37], [15, 131], [16, 64], [17, 45], [27, 7], [20, 34], [16, 0], [13, -16], [54, -15], [26, 43], [35, 6], [62, 42], [-1, 8], [-42, -9], [-26, -2], [-37, -10], [-20, 7], [-9, 32], [15, 29], [59, 68], [21, 30], [11, 28], [-2, 19], [10, 39], [58, 69], [47, 32], [15, -28], [-13, -84], [0, -35], [38, 123], [16, 30], [19, 20], [45, 14], [13, 20], [-53, -7], [-127, -47], [-54, -42], [-15, -32], [-37, -49], [-17, -31], [-8, -47], [-21, -25], [-29, -9], [-39, -59], [-17, -48], [-39, -37], [-25, -29], [-8, -11], [-14, -28], [-11, -2], [-10, 16], [-1, 37], [3, 59], [19, 42], [9, 42], [-12, 38], [9, 24], [16, 0], [31, -11], [33, 1], [54, 31], [-9, 18], [-23, 2], [-44, -2], [-36, 29], [-29, 59], [-13, 79], [9, 23], [105, 81], [28, 36], [-16, 4], [-39, -45], [-57, -27], [-35, 38], [-19, 41], [-11, 87], [4, 45], [-4, 59], [24, 19], [27, -10], [26, -4], [61, 5], [133, 35], [85, -21], [35, 2], [54, 31], [46, 3], [35, -23], [19, -27], [3, -36], [16, -23], [11, 7], [-9, 29], [-2, 43], [140, 50], [17, 19], [-56, 7], [-16, 45], [30, 68], [-3, 9], [-31, -36], [-15, -51], [6, -40], [-6, -19], [-29, -9], [-64, -3], [-41, 17], [-38, 10], [-13, 13], [4, 29], [-7, 6], [-16, -26], [-14, -52], [-30, -12], [-84, 19], [-121, -11], [-54, -26], [-35, 3], [-61, 46], [-24, 36], [-8, 73], [3, 33], [47, 13], [24, -1], [22, 17], [-19, 12], [-28, 22], [-19, 44], [-29, 14], [-19, 38], [-5, 57], [6, 40], [15, 13], [37, -9], [97, 6], [91, -40], [62, -23], [125, 12], [73, 36], [-13, 10], [-80, -21], [-73, 1], [-130, 40], [-53, 14], [-57, -6], [-30, 12], [-18, 40], [13, 77], [27, 17], [15, -20], [18, -2], [18, 32], [17, 19], [14, 41], [51, 39], [22, 3], [31, 18], [20, -5], [12, -18], [16, -15], [35, 2], [103, 31], [11, 10], [20, 25], [-65, -11], [-54, -18], [-35, -5], [-5, 22], [13, 21], [20, 21], [10, 37], [22, 16], [24, -1], [50, 7], [35, 9], [60, -6], [90, -14], [58, -34], [21, 3], [23, 9], [11, 12], [-46, 14], [-2, 21], [5, 15], [74, 28], [81, 6], [-14, 23], [-177, -34], [-46, 23], [-36, 0], [-24, -13], [-68, -16], [-13, 11], [13, 40], [41, 65], [3, 16], [19, 16], [106, 37], [51, 44], [23, 6], [22, -3], [35, 5], [67, -13], [30, -55], [28, -17], [87, -69], [-4, 20], [-75, 93], [-29, 23], [-21, 46], [7, 43], [24, 29], [86, 15], [15, 17], [2, 29], [-13, 19], [-32, -1], [-26, 12], [-7, 31], [10, 21], [50, 38], [27, 13], [47, 13], [81, -30], [6, -16], [-22, -38], [2, -21], [20, -3], [46, 64], [55, 9], [23, 14], [26, 9], [38, -58], [16, -19], [12, -7], [12, -48], [12, -3], [17, 24], [30, 13], [42, 8], [69, -12], [32, 9], [15, -1], [-14, 43], [-10, 12], [15, 39], [15, 15], [48, 27], [46, 12], [30, 26], [40, 24], [-6, 18], [-12, 22], [-26, 2], [-10, 12], [33, 28], [45, 32], [-8, 12], [-34, 14], [-26, -10], [-38, -25], [-45, -39], [15, -11], [22, -32], [-31, -43], [-166, -115], [-78, -34], [-37, 5], [-9, 32], [-16, 23], [-18, 48], [-31, -1], [-17, -11], [-8, 16], [13, 51], [26, 40], [44, 31], [20, 36], [20, 59], [63, 55], [91, 138], [75, 44], [27, 48], [44, 21], [38, 37], [29, 4], [54, 34], [30, 40], [-20, 2], [-47, -26], [-27, -10], [2, 43], [13, 44], [39, 40], [186, 117], [19, -19], [22, -35], [56, 8], [64, 66], [49, 72], [-26, -12], [-29, -30], [-57, -41], [-26, -6], [-15, 5], [-8, 28], [-20, 8], [-18, -6], [-18, 20], [-3, 48], [23, 71], [19, 47], [20, 36], [78, 101], [17, 56], [36, 29], [46, -7], [14, 9], [-16, 36], [-50, 29], [-3, 18], [167, 47], [80, -1], [24, 23], [43, 15], [33, 29], [-17, 13], [-81, -26], [-51, -13], [-23, 0], [-18, -9], [-64, -3], [-14, 115], [10, 63], [24, -2], [5, 60], [28, 35], [39, 8], [19, 15], [28, 31], [46, -7], [48, 7], [-12, 14], [-59, 19], [-14, 32], [20, 17], [23, 13], [20, 3], [40, 62], [24, 27], [26, -5], [38, 28], [37, -10], [35, 18], [49, 12], [178, 5], [5, 25], [-38, 6], [-132, 7], [-67, -1], [-29, -7], [-10, 9], [2, 16], [24, 24], [12, 26], [49, 65], [58, 44], [44, -11], [46, -42], [34, -5], [15, -13], [25, -57], [11, -2], [-5, 55], [32, 44], [-8, 13], [-49, -16], [-37, 16], [-29, 34], [-8, 31], [18, 30], [17, 15], [-11, 18], [-74, -48], [-51, -11], [-21, 7], [11, 43], [-6, 34], [70, 85], [23, 9], [39, -6], [35, -24], [30, 4], [32, 12], [-5, 23], [-69, 9], [-18, 19], [7, 19], [47, 19], [48, 36], [54, 10], [43, 27], [8, -6], [8, -11], [15, -99], [39, -81], [15, -3], [-15, 69], [14, 20], [17, 15], [6, 17], [-20, 6], [-17, 24], [-24, 79], [9, 21], [51, 41], [64, 10], [68, -29], [24, -1], [40, 8], [67, 24], [40, 10], [20, 0], [5, 12], [-19, 8], [-6, 7], [-15, 5], [-62, -13], [-172, 4], [-16, 14], [-3, 24], [18, 34], [20, 20], [65, 34], [68, 5], [72, 61], [28, 45], [15, 71], [44, 57], [111, 32], [4, 14], [-12, 30], [1, 53], [31, 63], [20, 21], [9, 3], [24, -21], [29, -43], [45, -24], [59, -5], [16, 12], [-46, 25], [-35, 32], [-3, 33], [17, 17], [25, -2], [33, 4], [30, 21], [4, 16], [1, 20], [8, 22], [44, 50], [136, 33], [10, -14], [-7, -97], [-16, -63], [0, -46], [27, 46], [35, 126], [27, 59], [30, 34], [22, 8], [21, 17], [28, 11], [9, -14], [9, -31], [-16, -110], [2, -35], [-17, -46], [-65, -104], [3, -13], [15, 5], [25, 17], [80, 98], [70, -12], [1, 8], [-22, 29], [-28, 28], [-8, 34], [4, 91], [21, 37], [60, -4], [37, 5], [17, -17], [36, 1], [25, 66], [50, 6], [44, -44], [52, -29], [43, -42], [12, 12], [-23, 98], [-25, 35], [-54, 19], [-58, 44], [-15, 19], [3, 15], [50, 14], [68, -16], [59, 36], [17, -10], [46, 19], [28, -25], [17, 7], [11, 35], [73, 21], [46, -20], [25, -20], [12, -39], [17, -78], [36, -42], [23, -21], [27, -5], [12, 21], [-24, 25], [-7, 24], [12, 59], [14, 23], [78, 87], [66, 46], [39, 4], [68, 102], [20, 18], [18, 5], [-5, 24], [-37, 16], [-2, 31], [50, 38], [60, 63], [30, 4], [18, -17], [59, -29], [35, -33], [26, -16], [17, 3], [14, 25], [17, 11], [37, -6], [22, -16], [18, -2], [15, -9], [4, -21], [-32, -23], [-55, -61], [-54, -69], [-18, -36], [-17, -95], [-43, -61], [-3, -43], [17, -20], [47, 16], [57, 57], [15, 60], [143, 164], [68, 91], [76, 75], [43, 15], [21, -49], [-17, -65], [-32, -41], [24, -19], [-5, -50], [-7, -27], [-5, -28], [0, -26], [23, 7], [89, 52], [23, 56], [21, 42], [10, 36], [35, 34], [66, 0], [3, 14], [-80, 47], [-9, 22], [27, 28], [73, 55], [38, -6], [23, -13], [91, -9], [69, -39], [-2, -61], [-16, -26], [-15, -15], [-89, -47], [-15, -22], [28, -8], [60, 23], [16, -21], [-19, -53], [-4, -78], [-7, -46], [0, -42], [8, -23], [24, 90], [8, 22], [36, 34], [13, 68], [34, 81], [39, 47], [23, 13], [75, -2], [33, -18], [28, -39], [21, -16], [67, -17], [24, -21], [4, -12], [16, -3], [45, 30], [30, 5], [48, -46], [-10, -35], [3, -11], [58, 2], [48, -13], [92, -71], [10, -33], [-5, -40], [-132, -44], [-57, -42], [-94, -16], [-318, 28], [7, -31], [221, -66], [13, -19], [-7, -40], [-1, -33], [5, -22], [16, -20], [27, -10], [55, 5], [27, -11], [19, 17], [7, 55], [16, 12], [31, -16], [13, -59], [9, -6], [15, 42], [31, -3], [33, 3], [43, -7]], [[57107, 92823], [74, -22], [25, 0], [37, -41], [19, 4], [-3, -25], [-37, -12], [-58, -7], [-9, -5], [-49, 4], [-28, 33], [-47, 9], [0, 11], [30, 25], [46, 26]], [[47512, 92649], [-25, -4], [-15, 13], [37, 35], [124, 66], [49, 63], [95, 22], [6, -35], [-6, -44], [-84, -35], [-92, -23], [-89, -58]], [[55338, 94695], [-33, -23], [-51, 34], [-33, 43], [18, 16], [89, 3], [22, -23], [4, -13], [-16, -37]], [[56002, 97117], [38, -14], [83, 3], [45, -98], [26, -103], [41, -8], [80, 15], [70, 7], [36, -8], [65, -30], [28, -21], [-24, -17], [-59, -19], [-10, -55], [59, -20], [98, -47], [56, -6], [98, 19], [93, -37], [92, -45], [-215, -56], [-19, -16], [-29, -42], [-32, -35], [-29, -20], [-64, -35], [-35, -13], [-78, 3], [-29, -14], [-27, -28], [-27, -21], [-69, -5], [-35, 28], [12, 9], [5, 17], [-13, 40], [66, 40], [15, 23], [-13, 8], [-18, -2], [-48, 12], [-14, 0], [-40, -24], [-55, -16], [-55, -4], [-224, -31], [-34, 11], [-15, 61], [91, 31], [14, 53], [23, 35], [26, 23], [50, 60], [12, 4], [-123, 48], [-48, 31], [-53, 61], [-17, 50], [-71, 42], [9, 54], [-52, -4], [-41, 38], [38, 21], [190, 24], [113, 24], [43, -1]], [[57465, 97147], [-41, -1], [-75, 42], [-14, 37], [13, 15], [36, 1], [57, -51], [61, -15], [-37, -28]], [[53125, 97125], [3, -40], [45, 4], [53, -42], [58, -22], [17, -16], [12, -20], [35, -40], [17, -42], [-42, -4], [-58, 60], [-47, 34], [-60, 29], [-48, 2], [-21, 12], [-78, 105], [-15, 24], [-44, 39], [-20, 48], [0, 38], [60, -9], [52, -24], [45, -54], [9, -16], [-21, -22], [21, -27], [27, -17]], [[58068, 97299], [83, -4], [83, 9], [14, -9], [-107, -31], [-119, 16], [-107, 4], [-127, -33], [-42, 13], [65, 33], [70, 10], [11, 20], [27, 4], [93, 2], [56, -34]], [[54662, 97872], [15, -1], [14, 6], [10, 16], [11, 9], [71, -11], [99, -32], [30, -16], [41, -33], [34, -55], [-27, -40], [-35, -37], [-12, -21], [13, -30], [-6, -29], [-13, -26], [54, 29], [114, 94], [17, 6], [18, -3], [51, -19], [46, -48], [11, -16], [8, -20], [5, -24], [-3, -28], [-4, -19], [-25, -12], [-11, -12], [26, -1], [30, -15], [27, -31], [31, -13], [111, 11], [73, -17], [39, -52], [62, 12], [0, 27], [13, 12], [82, -9], [43, -13], [43, -27], [-74, -45], [61, -43], [103, -31], [61, -33], [12, -14], [10, -18], [-40, -24], [-41, -13], [-104, -2], [-93, -17], [-172, -12], [-26, -7], [-6, -7], [-10, -21], [-66, -47], [-64, -58], [-26, -35], [-20, -49], [-8, -29], [15, -29], [-4, -30], [-48, -23], [-31, 0], [-38, 4], [-38, -13], [-2, -20], [2, -28], [-9, -85], [-12, -65], [-18, -59], [-19, -33], [-25, -9], [-81, -5], [-62, -57], [-50, -100], [-26, -39], [-55, -62], [10, -22], [17, -24], [-30, -43], [-46, -48], [1, -19], [16, -34], [7, -35], [-35, -30], [-66, -16], [-66, 17], [-32, 21], [-30, 32], [-32, 22], [-33, 13], [-127, 72], [-117, 114], [-108, 45], [-69, 21], [-34, 20], [-33, 28], [-28, 31], [-27, 39], [-12, 24], [-3, 36], [9, 21], [12, 11], [85, 9], [31, -5], [30, -19], [27, -7], [63, 94], [357, 54], [115, 9], [115, 0], [-18, 25], [-15, 33], [-17, 7], [-87, -18], [-133, -19], [-65, 0], [-67, 13], [-67, -7], [-69, -28], [-69, -17], [-68, -7], [-143, 3], [-35, 14], [-48, 33], [-11, 17], [-10, 21], [-9, 63], [10, 17], [14, 9], [15, 6], [32, 1], [31, -11], [72, -36], [-17, 39], [208, 46], [96, 40], [49, 6], [50, -2], [-11, 21], [0, 20], [35, 16], [25, 7], [77, 8], [174, -2], [62, 11], [47, 28], [-50, -10], [-50, -2], [-23, 6], [-53, 24], [-24, 31], [68, 63], [24, 30], [-70, -5], [-23, -10], [-80, -58], [-60, -26], [-73, -12], [-73, 1], [-16, 8], [-22, 39], [-7, 20], [3, 11], [23, 31], [12, 34], [-2, 29], [-17, 5], [-27, -28], [-25, -39], [-33, -20], [-35, 6], [-15, 15], [-13, 23], [-13, 9], [-15, 0], [-31, -9], [-31, -18], [11, -25], [3, -29], [-14, -23], [-10, -28], [32, -17], [26, -28], [-39, -13], [-38, -18], [-34, -29], [-36, -23], [-56, -2], [-70, -12], [-141, -5], [-66, 37], [-12, 17], [-13, 12], [-44, 19], [-63, 57], [-50, 64], [-33, 6], [-49, 21], [-27, 19], [-25, 24], [-8, 29], [3, 26], [29, 12], [-69, 29], [-68, 39], [25, 13], [25, 6], [202, -46], [14, 6], [22, 23], [-8, 7], [-34, 5], [-46, 0], [-11, 5], [-18, 24], [-16, 30], [-6, 20], [-3, 23], [34, 35], [19, 32], [-29, 14], [-83, -1], [-28, -4], [10, -45], [-26, -31], [-51, -25], [-36, 12], [-28, 60], [-37, 41], [-14, 26], [-10, 38], [-15, 27], [-27, 33], [-3, 20], [3, 16], [20, 34], [-15, 28], [-19, 25], [-1, 14], [18, 18], [16, 6], [17, -2], [51, -21], [28, -25], [9, 2], [19, 38], [25, 8], [100, 12], [111, -48], [29, -10], [23, -4], [-12, 21], [-7, 28], [17, 10], [89, -24], [42, 1], [98, 33], [163, 16], [62, -25], [3, -14], [-2, -18], [-3, -5], [-36, -22], [-206, -17], [-134, -66], [183, 10], [33, -7], [14, -55], [13, -5], [48, -8], [32, -16], [32, -31], [34, -21], [21, 3], [7, 22], [-8, 27], [-5, 30], [3, 33], [5, 27], [39, 19], [56, 62], [59, 42], [66, -19], [62, -53], [55, -74], [53, -80], [60, -99], [29, -35], [27, -8], [121, -103], [13, -3], [-25, 78], [-62, 133], [-43, 102], [-9, 39], [-7, 54], [3, 16], [5, 14], [31, 59], [40, 28], [-12, 40], [10, 31], [42, 24], [39, 2], [38, -19], [73, -65]], [[59034, 97994], [-263, -22], [-27, 16], [427, 63], [22, 6], [80, 8], [68, -14], [-20, -11], [-287, -46]], [[55205, 98099], [-60, -32], [-100, 25], [12, 25], [23, 15], [64, -6], [61, -27]], [[55804, 98069], [28, -6], [153, 2], [30, -14], [11, -34], [24, -12], [32, -3], [81, -42], [28, -6], [24, 23], [19, 58], [0, 68], [-7, 33], [9, 21], [27, 8], [34, -2], [34, 12], [29, 21], [31, 3], [67, -16], [18, -13], [-18, -25], [-7, -37], [-31, -75], [66, -4], [93, 15], [24, 22], [50, 35], [53, -5], [25, 4], [13, 15], [5, 18], [29, -3], [40, -34], [19, -6], [34, 9], [13, 0], [34, -14], [157, -25], [54, -14], [24, -12], [23, -8], [167, 1], [118, -9], [43, -20], [37, -38], [14, -88], [-33, -24], [-239, -108], [-60, -35], [-29, -32], [-48, -70], [-24, -21], [-112, -34], [-26, -3], [-84, 16], [-25, -2], [-102, -36], [-36, -22], [-34, -27], [-51, -13], [-53, 7], [-237, 14], [-32, 20], [-26, 37], [47, 48], [-265, -18], [-292, 10], [-15, 6], [-13, 19], [-100, 12], [-75, 15], [-64, 26], [-62, 33], [20, 15], [20, 9], [54, 4], [48, -4], [85, 0], [20, 33], [34, 10], [27, 24], [-90, 15], [-94, 2], [-62, -20], [-73, -9], [-66, -1], [-127, 6], [-60, 14], [-83, 36], [-28, 21], [-11, 16], [-9, 24], [95, 21], [36, 17], [36, 24], [-142, 13], [-60, 19], [-59, 29], [48, 16], [192, 13], [51, -11], [50, -21], [56, -12], [53, 27], [-50, 12], [-46, 45], [-9, 22], [6, 17], [23, 3], [18, -7], [67, -42], [51, -14], [14, 39], [2, 19], [-9, 15], [-24, 28], [-21, 35], [33, 9], [33, -4], [70, -24], [71, -17], [32, -16], [61, -42], [56, -29]], [[96376, 51545], [-5, -20], [-6, 3], [-3, 13], [2, 14], [7, 6], [5, -5], [0, -11]], [[96993, 21602], [15, -29], [-29, -13], [-14, 11], [-10, 13], [-5, 19], [15, -2], [14, 8], [14, -7]], [[96172, 22602], [6, -48], [-16, -1], [-32, 14], [-9, 21], [-7, 5], [-12, -24], [-18, -1], [-5, 8], [8, 25], [44, 49], [8, 61], [-1, 19], [35, 5], [8, -7], [3, -9], [-2, -11], [-14, -20], [0, -23], [3, -24], [-11, -12], [6, -21], [6, -6]], [[96706, 24848], [0, -23], [-29, 9], [1, -26], [23, -14], [8, -18], [24, 5], [5, -28], [-5, -24], [-16, -19], [-47, -9], [-31, -36], [-26, 6], [-7, -3], [-30, -39], [-34, -12], [-9, 3], [5, 34], [25, 33], [0, 31], [7, 25], [24, 18], [0, 33], [16, 29], [-10, 63], [6, 56], [47, 3], [53, -97]], [[96317, 25543], [-1, -28], [-3, -14], [-10, 0], [-14, 3], [-14, 13], [-10, -4], [-7, 5], [10, 32], [33, 17], [12, -14], [4, -10]], [[96382, 25818], [12, -70], [-25, 14], [-11, 20], [20, 35], [4, 1]], [[1062, 26312], [-12, -5], [1, 33], [-4, 21], [21, 7], [9, -26], [-15, -30]], [[1062, 26647], [-10, -15], [-17, 1], [-30, -59], [2, 44], [-9, 17], [-26, -4], [-4, -10], [17, -12], [4, -6], [-17, -25], [17, -55], [15, 2], [14, -43], [0, -13], [-33, -16], [-17, -23], [-16, 1], [-7, 4], [-9, 41], [0, 17], [19, 31], [11, 30], [-9, 28], [-22, 19], [-48, -9], [-11, 6], [24, 39], [26, -5], [28, 28], [108, -13]], [[98309, 28304], [-38, -34], [2, 23], [7, 51], [17, 26], [8, 1], [17, 20], [-1, -43], [-12, -44]], [[98087, 28064], [32, -3], [29, 43], [31, 34], [32, 28], [49, 66], [12, 9], [32, 13], [14, 15], [15, 4], [-14, -39], [-17, -13], [-3, -14], [10, -22], [-15, -31], [0, -39], [-18, -46], [28, 18], [10, 30], [-5, 17], [12, 34], [18, 16], [-7, 25], [0, 20], [23, -7], [11, 0], [9, 8], [16, 4], [4, -23], [21, 3], [-8, -28], [-16, -33], [-4, -20], [-27, -33], [-18, -14], [28, -4], [40, 44], [24, 39], [-1, -48], [-19, -44], [-17, -28], [-19, -8], [-18, -23], [-9, -36], [1, -25], [5, -19], [19, -32], [-21, -63], [24, 8], [13, -12], [18, -36], [-11, -42], [-8, -22], [-47, -88], [-20, -44], [-24, -29], [1, -47], [-14, -34], [-70, -117], [-12, -25], [-55, -186], [-35, -78], [-20, -27], [-21, -22], [-51, -36], [-23, -43], [-25, -35], [-26, -8], [1, -15], [17, -9], [13, -23], [-10, -26], [-19, -16], [-19, -5], [-10, -17], [46, 12], [13, -13], [3, -29], [5, -26], [11, -34], [39, -21], [35, -10], [7, -16], [5, -54], [-6, -27], [-8, -18], [-12, -6], [-28, -3], [-29, 12], [-19, 33], [-54, -11], [-15, -7], [-7, 6], [30, 35], [-16, 19], [-13, 8], [-14, -12], [-9, -18], [-3, -30], [-10, -17], [-15, -5], [-21, 25], [-21, 35], [-30, 36], [4, -22], [24, -54], [12, -36], [-28, -29], [-28, -22], [-25, -13], [-22, -20], [-27, -32], [-15, -11], [-39, -1], [-21, -10], [-7, -42], [-15, -27], [-34, -5], [12, -8], [8, -14], [-23, -126], [-5, -53], [-4, -89], [-14, -83], [-41, 0], [6, -15], [31, -23], [-6, -36], [-34, -64], [-14, -38], [-14, -90], [-20, -84], [-32, -95], [0, -17], [11, -24], [13, -21], [1, -30], [-4, -16], [-15, -4], [-13, -10], [-71, -26], [-24, -29], [-19, -53], [-22, -45], [-74, -100], [-44, -83], [-9, -24], [-12, -18], [-95, -39], [-68, -6], [-37, 10], [-36, 20], [-19, 7], [-38, -12], [-16, -14], [-30, 13], [-23, -10], [-7, 10], [-9, 25], [5, 32], [-6, 24], [-15, 17], [-10, 19], [-12, 13], [-31, 6], [-49, -9], [-16, 1], [-34, 80], [-11, 20], [-39, 25], [-14, -3], [-21, -43], [-13, -7], [-74, -5], [-75, 14], [-28, 16], [-5, 37], [57, 102], [-17, -14], [-35, -41], [-22, 6], [21, 45], [2, 20], [-4, 23], [-30, -38], [-33, -5], [-4, 35], [3, 41], [7, 11], [89, 22], [33, 14], [14, 22], [-54, 7], [-3, 31], [7, 25], [46, 41], [-33, -11], [-38, 4], [3, 43], [9, 34], [40, 1], [-13, 23], [-1, 33], [11, 2], [39, -44], [29, -16], [-12, 33], [2, 21], [7, 9], [24, 7], [-7, 6], [-22, 8], [-26, 25], [-3, 26], [1, 31], [28, 42], [17, -25], [20, 7], [-15, 19], [-9, 30], [6, 19], [60, 78], [15, -75], [4, 25], [1, 24], [-7, 20], [1, 21], [7, 18], [25, 17], [34, 58], [25, 26], [20, -17], [13, -23], [-2, 23], [-9, 19], [-3, 53], [45, 81], [49, 78], [48, 82], [25, 29], [54, 34], [34, -14], [9, 3], [51, 58], [21, 16], [19, -21], [12, -8], [-12, 54], [10, 24], [42, 44], [54, 45], [40, 19], [30, 30], [18, 1], [-3, 23], [3, 22], [16, -2], [5, 9], [-14, 12], [44, 44], [24, 48], [13, 11], [11, 14], [14, 34], [17, 11], [15, -5], [11, -17], [-6, 28], [-20, 15], [22, 24], [22, 16], [21, -12], [21, -19], [-21, 30], [-3, 18], [25, 21], [14, 6], [19, -39], [-2, 31], [4, 28], [28, 45], [36, 75], [11, -26], [2, -31], [-2, -39], [8, 14], [2, 34], [-5, 61], [45, 113], [8, 12], [10, 8], [16, 3], [-5, 17], [-12, 17], [12, 57], [8, 65], [10, 63], [17, 62], [18, 102], [14, 22], [38, 7], [16, 15], [28, 37], [32, 67], [18, 54], [23, 140], [13, 147], [37, 108], [54, 79], [48, 60], [19, 12], [33, 4], [32, -17], [-59, -14], [-6, -36], [-2, -35], [7, -33], [11, -28], [28, -27], [33, -16], [15, -61], [3, -72], [5, -62], [13, -54]], [[98761, 30944], [2, -31], [-21, 11], [-8, 24], [-24, 24], [-4, 8], [-2, 48], [12, 23], [2, 10], [6, 4], [10, -26], [19, -36], [8, -59]], [[98129, 31719], [5, -26], [15, 18], [11, 30], [19, 30], [-3, -48], [10, -11], [61, -34], [13, -28], [13, -8], [7, 16], [9, 8], [22, -18], [50, -49], [4, -17], [-2, -25], [2, -27], [7, -21], [17, -5], [22, 31], [10, 4], [15, -45], [6, -25], [-3, 1], [10, -25], [12, -25], [22, -74], [-3, -26], [-6, -23], [20, -68], [-13, -5], [-40, 12], [1, -14], [23, -50], [20, -70], [15, -43], [55, -132], [-8, -47], [1, -31], [-7, -26], [19, -70], [-12, -22], [-8, -72], [-8, -12], [1, -26], [22, -7], [13, -11], [12, -21], [7, 25], [10, 7], [26, -34], [55, -34], [15, -13], [8, -27], [5, -67], [11, -29], [21, -6], [23, 9], [7, 25], [-5, 65], [-16, 104], [0, 34], [2, 33], [-3, 34], [-9, 32], [-8, 24], [-12, 21], [4, 32], [17, 14], [10, -27], [9, -32], [42, -97], [26, 7], [2, -40], [17, -41], [10, -47], [12, -143], [19, -133], [35, -59], [4, -28], [-21, 15], [-7, -9], [2, -14], [20, -25], [23, -13], [14, 2], [14, -9], [90, -87], [43, -34], [109, -56], [31, -4], [17, 2], [33, 19], [29, 34], [25, 52], [22, 59], [23, 28], [27, 23], [14, 21], [14, 15], [73, -7], [25, -30], [32, -24], [16, -18], [-5, -38], [-19, -56], [-15, -61], [-13, -138], [-9, -141], [-13, -61], [-24, -48], [-27, -34], [-30, -17], [-12, -79], [-6, -93], [1, -24], [10, -18], [4, -28], [-16, -56], [-9, 8], [-13, 47], [-12, 19], [-36, 15], [-37, 7], [-32, -5], [-31, -19], [-47, -41], [-14, -21], [-13, -25], [-21, -58], [-5, -71], [1, -38], [7, -28], [40, -40], [-39, -136], [-35, -143], [-20, -40], [-23, -38], [-21, -85], [-38, -74], [-25, -56], [-20, -59], [-17, -62], [-37, -88], [-16, -58], [-22, -48], [-40, -61], [-42, -53], [-67, -73], [-18, -24], [-20, -18], [-24, 21], [-5, 23], [-6, 50], [-5, 18], [-31, 15], [-41, -24], [-7, 5], [-2, 11], [0, 73], [7, 20], [-9, 12], [-10, -5], [-3, -18], [6, -16], [-23, -20], [-25, -1], [-7, 8], [-2, 13], [6, 22], [8, 20], [45, 91], [47, 122], [40, 130], [11, 67], [15, 125], [-12, 51], [-16, 49], [-40, 94], [-55, 53], [-35, 7], [-33, 20], [-31, 45], [-29, 53], [-56, 43], [-60, 34], [-34, 48], [-8, 29], [-5, 33], [0, 30], [5, 32], [6, 24], [11, 17], [63, 62], [67, 35], [12, -1], [12, 6], [17, 21], [30, 48], [8, 33], [6, 104], [10, 102], [17, 116], [26, 73], [9, 44], [-11, 73], [10, 27], [12, 17], [13, 9], [-23, 69], [-26, 104], [-6, 32], [4, 32], [7, 31], [-17, 8], [-10, 30], [-24, 101], [7, 16], [14, -11], [20, -73], [4, 38], [16, 23], [16, 12], [18, 2], [-40, 82], [-14, -4], [-18, -12], [-19, -8], [-18, 7], [-17, 18], [-8, 34], [-11, 66], [-7, 24], [-53, 135], [16, 4], [43, -67], [8, 21], [7, 31], [-3, 35], [-10, 26], [-15, 17], [-1, 30], [12, 28], [-1, 20], [-24, 40], [-10, 4], [-5, -18], [7, -28], [-6, -3], [-61, 73], [-18, 58], [-15, 65], [-2, -26], [2, -37], [24, -74], [39, -82], [7, -22], [-6, -29], [-14, -8], [-11, 18], [-18, 71], [-13, 35], [-148, 365], [19, 48], [29, 41], [7, 18], [5, 22], [-13, 3], [-11, -10], [-13, -18], [-11, -22], [-15, -47], [-7, -11], [-17, 33], [-7, 20], [0, 24], [-4, 16], [-13, 5], [-19, 48], [-12, 24], [20, 47], [1, 62], [-21, 65], [-24, 60], [-47, 96], [-43, 102], [47, 13], [47, 2], [-22, -61], [10, -35], [15, -30], [32, -91], [3, -27], [16, -26], [8, -21]], [[2448, 46454], [0, -2], [-2, 3], [-2, 5], [-1, 6], [1, 1], [2, -4], [1, -4], [1, -5]], [[2089, 46900], [-1, -1], [-1, 6], [-2, 7], [-1, 7], [0, 1], [3, -6], [2, -7], [0, -7]], [[66311, 63489], [-17, -8], [-6, 4], [1, 73], [40, 91], [27, 106], [19, -94], [-33, -53], [-17, -91], [-14, -28]], [[65663, 66232], [28, -152], [42, -142], [37, -78], [38, -106], [59, -98], [27, -33], [108, -69], [60, -25], [82, -25], [57, -53], [19, -3], [29, 15], [22, -1], [54, -73], [16, -69], [23, -36], [20, -57], [13, -60], [45, -92], [33, -103], [33, -76], [29, -47], [44, -19], [36, -21], [4, -51], [-4, -67], [-7, -49], [-33, -96], [-8, -59], [-37, -97], [-41, -163], [-18, -37], [-66, -84], [-48, -102], [-57, -176], [-43, -174], [-17, -56], [-35, -12], [-23, 5], [-15, 17], [6, 47], [4, 54], [-21, -6], [-19, -11], [-43, -131], [-24, -57], [-5, -73], [-12, -94], [-16, -86], [-8, -73], [0, -41], [13, -101], [1, -103], [7, -62], [6, -74], [-20, -23], [-18, -11], [-68, -8], [-70, -24], [-61, -43], [-37, -43], [-47, -95], [-29, -243], [-47, -103], [-31, -21], [-76, -9], [-106, -28], [-38, -25], [-62, -148], [-5, -47], [12, -34], [4, -37], [-5, -35], [-29, -94], [-30, -68], [-81, -43], [-30, 25], [-27, 13], [-53, 2], [-86, -17], [-31, -50], [-50, -36], [-46, -55], [-87, -21], [-59, -43]], [[64745, 61433], [-16, 76], [-17, 76], [-17, 76], [-17, 75], [-12, 54], [-20, 18], [-12, 56], [-12, 58], [-12, 58], [-13, 57], [-12, 58], [-12, 57], [-12, 58], [-13, 57], [-12, 58], [-12, 57], [-13, 58], [-12, 57], [-12, 58], [-13, 57], [-12, 58], [-12, 58], [-12, 57]], [[64438, 62785], [39, 27], [48, 33], [47, 33], [48, 33], [48, 33], [48, 33], [47, 33], [48, 33], [48, 33], [48, 33], [48, 33], [47, 33], [48, 33], [48, 34], [48, 33], [48, 33], [47, 33], [30, 20], [12, 77], [10, 64], [10, 63], [11, 64], [10, 64], [10, 64], [10, 63], [10, 64], [10, 64], [11, 64], [10, 63], [10, 64], [10, 64], [10, 64], [11, 64], [10, 63], [10, 64], [9, 58], [-17, 57], [-24, 75], [-25, 79], [-23, 75], [-17, 54], [-20, 65]], [[65577, 66856], [24, 83], [9, 13], [8, -6], [22, 9], [11, 45], [9, 25], [10, -3], [4, -14], [-3, -69], [0, -57], [-12, -175], [-13, -30], [-6, -25], [-2, -34]], [[68934, 65585], [-4, -34], [-10, -26], [-13, 38], [-9, 17], [-9, -13], [-14, 2], [-26, 42], [-11, -43], [-42, -9], [-5, 32], [-1, 30], [-23, -22], [-17, 34], [-7, 45], [-6, 12], [-8, 15], [-17, 15], [-16, 48], [-1, 51], [-4, 60], [-33, 224], [-20, 21], [-110, 39], [-6, 40], [8, 105], [-3, 66], [-36, 88], [-10, 61], [-29, 52], [-29, 15], [-30, -7], [-15, -20], [-9, -35], [63, 8], [14, -13], [17, -23], [-18, 1], [-21, 11], [-26, -1], [-98, -26], [-56, -37], [-76, 11], [-96, -36], [-79, -2], [-33, -71], [-18, 12], [-14, 18], [-109, 56], [-7, 23], [-18, 17], [-20, -30], [-15, -5], [-59, 25], [-46, -19], [-17, -32], [-1, -50], [-57, 10], [-32, 15], [-43, -17], [-98, 23], [-25, -6], [-36, -33], [-15, -26], [-21, -10], [-18, 36], [-14, 16], [-13, -10], [-18, -30], [-50, -14], [-46, 4], [-49, 28], [6, 9]], [[27332, 56067], [-15, -3], [-31, 24], [-23, 48], [-2, 15], [1, 16], [12, 49], [17, 17], [6, 0], [16, -57], [-11, -21], [5, -35], [22, -26], [3, -27]], [[28037, 56597], [-12, -25], [-5, 24], [9, 25], [3, 0], [5, -24]], [[28084, 56609], [-6, -24], [-13, 54], [2, 14], [-1, 49], [13, 13], [9, 1], [7, -7], [5, -58], [-4, -26], [-12, -16]], [[27157, 57246], [-3, -27], [-21, 49], [12, 8], [5, -1], [7, -29]], [[28361, 56007], [-8, 16], [-67, 165], [-58, 205], [-12, 93], [15, 6], [14, -3], [8, 15], [9, 27], [-7, 63], [28, 47], [11, 32], [7, -3], [19, -55], [26, -31], [33, -46], [21, -10], [-26, 47], [-44, 63], [-13, 42], [-12, 57], [-17, -25], [-8, -21], [-9, -12], [-8, 15], [-1, 18], [-26, 4], [-7, 17], [-7, 9], [3, -36], [5, -22], [-2, -27], [-9, -1], [-7, 27], [-9, 25], [-13, 105], [-29, 49], [-14, 16], [-11, 7], [-17, 33], [-22, 18], [-29, 52], [-37, 37], [-44, 14], [-54, -9], [-19, -20], [-12, -27], [-6, -12], [-32, -30], [-12, -43], [-7, -37], [-16, -42], [18, -25], [-104, -142], [-21, -20], [-47, -15], [-11, -15], [-14, -28], [-2, -42], [2, -37], [14, -28], [12, -17], [29, -85], [52, -106], [9, -39], [8, -57], [-15, -27], [-12, -11], [-49, -5], [-17, -23], [-7, -35], [-18, -29], [-64, -28], [-49, -3], [-16, 33], [-4, 92], [-33, 158], [-8, 108], [-8, -13], [-18, -13], [-6, -27], [-5, -80], [-6, -27], [-14, 2], [-28, 29], [-37, 26], [-48, 170], [-5, 32], [-9, 38], [-37, 16], [-32, 29], [-34, 4], [-17, -16], [-18, 21], [-3, 46], [-36, -21], [-47, 7], [-41, 20], [-28, -10], [-24, -33], [4, -85], [-7, -16]], [[27065, 57359], [18, -31], [36, -54], [2, -27], [-3, -26], [10, -74], [18, -10], [19, 14], [5, -14], [-4, -13], [-9, -15], [-3, -64], [31, -30], [15, -26], [51, 13], [19, -7], [13, 7], [-14, 51], [-19, 38], [1, 17], [15, -13], [11, -25], [25, -32], [46, -111], [53, -26], [42, 3], [39, 15], [63, 43], [45, 78], [36, 34], [116, 74], [42, 77], [17, 10], [17, 10], [36, 58], [20, 46], [21, 22], [62, -16], [39, -22], [28, 3], [27, -15], [11, -33], [12, -14], [65, 3], [54, -16], [117, -98], [70, -97], [37, -103], [90, -133]], [[14364, 37789], [-3, -9], [-6, 8], [-6, 16], [-2, 18], [6, 10], [7, -6], [4, -18], [0, -19]], [[30439, 41275], [-20, 39], [-91, 130], [-34, 69], [-32, 33], [-78, 111], [-8, 36], [-9, 114], [-11, 32], [-26, 41], [-68, 55], [-26, 28], [-27, 50], [-40, 36], [-44, 72], [-26, 59], [-29, 38], [-91, 54], [-45, 54], [-85, 76], [-38, 49], [-91, 59], [-27, 28], [-90, 138], [-62, 46], [-51, 77], [-153, 166], [-24, 53], [-23, 81], [-34, 49], [-38, 112], [-57, 66], [-54, 87], [-20, 80], [-36, 101], [-11, 54], [-32, 53], [-2, 107], [-22, 49], [16, 24], [17, 11], [21, 165], [-12, 83], [-56, 151], [-21, 72], [-15, 93], [-22, 55], [-34, 116], [-21, 102], [-45, 75], [-12, 27], [-7, 38], [-25, 26], [-1, 79], [-17, 150], [-25, 76], [-90, 140], [-2, 55], [-7, 99], [-20, 106], [-99, 332], [-26, 99], [-25, 161], [-22, 91], [-25, 162], [-37, 123], [-24, 107], [-25, 133], [-2, 71], [-45, 122], [-24, 112], [-42, 94], [-42, 72], [-18, 50], [-58, 240], [-8, 71], [-40, 132], [-40, 95], [-25, 76], [-32, 69], [-195, 212], [-69, 88], [-23, 42], [-10, 66], [4, 38], [20, 36], [28, -27], [17, 11], [13, 47], [1, 72], [-17, 92], [-63, 177], [5, 38], [12, 42], [-24, 86], [-27, 68], [-13, 53], [15, 200], [14, 51], [95, 203], [26, 86], [40, 54], [42, 82], [49, 62]], [[83402, 54871], [-7, -35], [-9, -16], [-12, 9], [-9, 18], [-5, -27], [-24, -10], [-15, -41], [-23, -12], [-15, 6], [2, 37], [43, 54], [27, 21], [23, 39], [12, 5], [6, -33], [6, -15]], [[83655, 55342], [15, -41], [19, 11], [30, -12], [6, -22], [-1, -14], [-32, -40], [-21, 42], [-38, -29], [-18, 17], [-24, -15], [-15, 33], [6, 31], [39, 51], [34, -12]], [[83914, 55546], [-28, -8], [-9, 0], [-22, 59], [-2, 26], [-18, 29], [6, 29], [23, 7], [40, 38], [64, -59], [10, -21], [-20, -13], [-14, -56], [-30, -31]], [[84939, 55853], [-4, -32], [-17, 77], [-7, 19], [9, 65], [19, -32], [0, -97]], [[84148, 56111], [3, -14], [-1, -14], [-29, -27], [-9, 1], [-3, 44], [7, 21], [14, -18], [12, 21], [6, -14]], [[82521, 56384], [-14, -44], [-16, 50], [1, 71], [5, 19], [24, 11], [0, -107]], [[82598, 56575], [-19, -14], [-4, 36], [2, 35], [14, -3], [6, -11], [1, -43]], [[84668, 57109], [-8, -34], [-31, 28], [-8, 25], [4, 29], [15, 10], [8, 0], [15, -31], [5, -27]], [[84360, 57164], [2, -60], [-25, -18], [-21, 16], [-13, 36], [0, 13], [11, -1], [26, 31], [8, 7], [12, -24]], [[84991, 57369], [-5, -15], [-8, 31], [7, 68], [5, 11], [7, -43], [-6, -52]], [[85001, 57212], [22, -35], [30, 9], [-1, -87], [5, -26], [27, -74], [4, -61], [-16, -59], [-12, -27], [-22, -40], [0, -18], [9, -20], [31, -12], [23, -32], [4, -91], [22, -71], [-1, -31], [-9, -128], [3, -54], [16, -44], [14, -19], [8, -27], [6, -75], [-1, -128], [-2, -44], [-10, -42], [-30, -94], [-40, -75], [-22, 5], [-6, -22], [13, -68], [-5, -145], [-9, -100], [-13, 51], [-9, 53], [-9, 140], [-10, 64], [-16, 57], [-7, 52], [-16, 48], [-22, 125], [-14, -7], [-23, -34], [-5, -23], [-3, -36], [-6, -32], [-27, -51], [-22, -60], [-17, -67], [-6, -61], [15, -47], [15, -20], [21, -42], [7, -20], [23, -139], [-1, -141], [-17, -63], [-42, -119], [-30, -37], [-17, 19], [-13, 72], [-2, 29], [9, 68], [1, 62], [-10, 21], [-12, -4], [-4, -9], [-27, -81], [-12, -21], [-17, -2], [-13, 5], [-81, 71], [-66, 70], [-51, 65], [-38, 99], [-8, 74], [0, 77], [-17, 113], [-2, 38], [2, 37], [16, 70], [20, 35], [12, 25], [9, 28], [6, 37], [-2, 37], [-7, 23], [-32, 82], [-27, 50], [-57, 45], [-13, 24], [-14, 19], [-16, 8], [-16, 0], [-16, -14], [-5, -29], [2, -27], [-2, -26], [-24, -148], [-30, 32], [-29, 38], [-7, 26], [-4, 32], [-5, 21], [-6, 19], [-14, -49], [-16, -39], [-20, -10], [-21, 0], [-7, 17], [-7, 94], [-22, 30], [-27, -7], [-33, -52], [-6, -19], [-7, -45], [-36, -127], [-19, -98], [-21, -96], [-9, -31], [-13, -21], [-19, 9], [-18, 23], [-17, 61], [6, 72], [19, 45], [15, 49], [19, 171], [1, 61], [4, 26], [31, 77], [26, 48], [13, 10], [57, 28], [23, 23], [36, 0], [30, 13], [24, 37], [2, 38], [-2, 40], [6, 24], [9, 21], [12, 27], [15, 20], [40, 15], [14, 17], [10, 26], [16, 50], [17, -12], [18, -20], [33, -16], [28, -42], [19, -66], [3, -32], [5, -108], [-7, -25], [-28, -51], [13, -5], [36, 46], [19, 18], [45, 24], [11, 16], [7, 24], [16, 66], [12, 71], [9, 29], [13, 23], [13, 4], [47, -48], [31, 23], [8, 73], [7, 106], [6, 29], [17, 28], [21, -9], [28, -38], [27, -13], [9, 31], [10, 61], [10, -1], [36, -20], [34, 13], [10, 73], [-7, 78], [-27, 226], [16, 51], [14, 1], [34, -60], [65, -81], [22, -50], [14, -61]], [[85016, 57468], [-4, -3], [-15, 45], [2, 51], [21, 76], [15, -67], [0, -30], [-2, -15], [14, -37], [-10, -19], [-21, -1]], [[84799, 57593], [2, -29], [-35, 75], [-8, 53], [12, -2], [16, -20], [13, -77]], [[84609, 57480], [-3, -21], [-22, 2], [-8, -3], [-20, -54], [-12, -14], [-66, -18], [-52, 14], [-18, 30], [-12, 49], [-3, 33], [13, 35], [12, 24], [42, 46], [10, 35], [22, 43], [45, 14], [4, -11], [6, -6], [9, -2], [23, -35], [25, -23], [-6, -85], [7, -28], [4, -25]], [[84913, 57554], [-5, -16], [-6, 33], [-17, 31], [-15, 53], [-11, 16], [7, 42], [1, 68], [16, 31], [7, 10], [11, 33], [6, 2], [5, -28], [-11, -85], [16, -100], [-6, -62], [3, -14], [-1, -14]], [[83309, 57883], [-34, -18], [-8, 56], [24, 51], [28, -21], [16, -20], [-8, -18], [-18, -30]], [[84531, 57952], [-7, -3], [13, 61], [10, -9], [3, -6], [0, -28], [-19, -15]], [[84068, 57875], [-7, -8], [-7, 2], [-16, -21], [-6, 39], [5, 66], [25, 50], [6, 16], [7, 10], [8, 1], [8, -20], [2, -30], [-16, -90], [-9, -15]], [[84202, 57064], [-18, -6], [-20, 3], [-13, 28], [-22, 122], [-26, 30], [-30, 22], [-15, 19], [-14, 23], [-42, 122], [-3, 74], [7, 42], [13, 38], [14, 10], [35, 1], [18, 5], [40, 56], [3, 22], [0, 92], [-4, 64], [-10, 62], [11, 29], [14, 28], [14, 55], [3, 39], [0, 41], [4, 29], [12, 14], [54, 45], [10, 3], [71, -41], [14, -62], [1, -20], [-11, -69], [-9, -46], [-24, -71], [-18, -77], [-13, -115], [-8, -38], [-22, -72], [-7, -40], [0, -86], [-4, -32], [0, -31], [44, -143], [4, -23], [0, -26], [-8, -32], [-18, -55], [-10, -19], [-17, -14]], [[84269, 57286], [-11, -15], [-4, 38], [3, 51], [21, 179], [-5, 45], [36, 100], [22, 93], [32, 99], [5, 51], [29, 97], [27, 134], [-1, 45], [7, 22], [4, 33], [0, 29], [20, 50], [6, -33], [-6, -64], [1, -30], [3, -14], [0, -60], [-7, -91], [7, -105], [-13, -107], [-15, -48], [-21, -34], [-24, -21], [-25, -53], [-15, -62], [-3, -57], [-39, -192], [-34, -80]], [[84376, 58342], [16, -76], [-22, 0], [-8, 56], [10, 18], [4, 2]], [[82586, 56704], [-26, -42], [3, 52], [7, 49], [26, 99], [19, 31], [31, 78], [18, 38], [42, 75], [39, 82], [13, 6], [14, 1], [12, 9], [25, 45], [63, 147], [53, 110], [54, 139], [26, 41], [7, 15], [49, 128], [16, 18], [17, 14], [12, 17], [11, 22], [17, 56], [8, 65], [-5, 37], [-10, 54], [13, 74], [9, 34], [35, 150], [10, 31], [14, -19], [2, -27], [-7, -64], [0, -31], [8, -33], [-10, -53], [25, -142], [19, -89], [1, -30], [-26, -53], [-15, -16], [-33, -15], [-15, -15], [-23, -44], [-15, -57], [-4, -30], [-7, -23], [-68, -39], [-31, -25], [-15, -19], [-7, -31], [5, -55], [-57, -199], [-18, -51], [-19, -45], [-24, -31], [-33, -19], [-27, -39], [-18, -68], [-22, -61], [-28, -45], [-30, -40], [-28, -30], [-30, -20], [-9, -27], [-6, -33], [-14, -16], [-15, -8], [-28, -33]], [[83294, 58482], [6, -31], [-8, -46], [-7, -10], [-8, 19], [-20, 14], [-1, 24], [10, 0], [18, 24], [10, 6]], [[84603, 58377], [20, -20], [22, 8], [27, 45], [30, -16], [18, -68], [9, -25], [5, -44], [-2, -106], [-7, -95], [6, -20], [14, -17], [12, -22], [10, -27], [7, -30], [2, -74], [18, -62], [2, -24], [-4, -25], [-29, 5], [-3, -21], [1, -27], [-10, 17], [-17, 60], [-16, 26], [5, -98], [5, -48], [1, -47], [-27, 36], [-33, 23], [-9, 19], [4, 61], [-1, 31], [-14, 64], [16, 140], [0, 29], [-3, 28], [-13, 57], [-21, 47], [-13, 0], [-32, -33], [-16, 11], [-9, 131], [-13, 127], [-9, 32], [-7, 34], [6, 28], [13, -11], [17, -34], [21, -19], [10, -16], [7, -30]], [[84613, 58463], [-35, -4], [-15, 26], [-19, 78], [21, 16], [21, -4], [15, -27], [15, -52], [-3, -33]], [[84681, 58522], [-5, -30], [-8, 8], [-7, 14], [-11, 44], [-3, 33], [16, -18], [9, -33], [9, -18]], [[84026, 58533], [32, -29], [32, 25], [31, -7], [26, -38], [-9, -24], [-1, -27], [57, 58], [16, -3], [-1, -54], [-3, -46], [-7, -44], [-12, -52], [-17, -46], [-21, -33], [-26, -21], [-12, -19], [-4, -28], [1, -35], [-6, -32], [-27, -14], [-42, -62], [-90, -40], [-25, -27], [-16, -36], [-17, -32], [-10, -8], [-4, 15], [-1, 13], [13, 84], [-3, 35], [-6, 33], [4, 66], [16, 62], [8, 68], [3, 132], [12, 182], [-1, 22], [-9, 25], [-35, 20], [-14, 19], [7, 36], [13, 25], [18, -1], [16, -23], [57, -48], [30, -40], [27, -51]], [[83343, 58584], [-21, -19], [-5, 12], [-3, 28], [0, 20], [-20, 104], [15, 15], [11, -12], [12, -16], [10, -9], [10, -32], [-2, -23], [3, -22], [-10, -46]], [[83360, 58852], [15, -9], [11, 8], [10, 31], [9, -45], [22, -37], [-7, -38], [-20, -4], [-19, 8], [-21, -15], [-25, 9], [-14, 35], [-17, 63], [-9, 12], [1, 26], [6, 16], [-3, 4], [2, 12], [3, 8], [5, 3], [13, -28], [32, -42], [6, -17]], [[84070, 58933], [-14, -13], [-29, 56], [-17, 26], [-4, 15], [13, 21], [37, 0], [19, -39], [3, -24], [-8, -42]], [[84788, 59059], [20, -47], [4, -34], [-2, -38], [9, -16], [16, -5], [20, -19], [15, -35], [-9, -32], [3, -46], [-16, -59], [2, -105], [9, -33], [1, -33], [-2, -36], [4, -28], [24, -96], [5, -32], [-8, -25], [-2, -24], [15, -2], [21, -40], [12, -53], [-3, -13], [-17, 41], [-13, 6], [-55, -11], [-33, 17], [-22, 2], [-21, 70], [-19, 12], [-15, 31], [-25, 79], [-8, 46], [18, 46], [5, 37], [-1, 36], [-17, -6], [-14, 12], [-17, 44], [-7, 25], [-13, 22], [-20, 50], [-30, 20], [-11, 14], [-24, 42], [-16, 53], [-17, 92], [-9, 95], [76, -25], [76, 5], [86, 22], [25, -26]], [[84365, 58921], [53, -69], [37, -116], [4, -89], [-3, -35], [-17, 39], [-38, 54], [-26, 12], [-8, 10], [3, 30], [-17, 27], [-2, 11], [-15, 12], [-23, 61], [-16, 12], [-15, -13], [-35, -91], [-37, -64], [-1, 25], [15, 79], [10, 128], [6, 39], [-8, 57], [-1, 51], [28, -24], [35, -23], [27, -33], [4, -22], [40, -68]], [[83974, 59060], [-8, -18], [-5, 3], [-4, 31], [8, 21], [3, -2], [6, -35]], [[83914, 58959], [-22, -143], [-15, 49], [6, 31], [-13, 26], [-3, 24], [5, 31], [13, 29], [3, 94], [29, 30], [11, 1], [-4, -23], [1, -43], [-11, -106]], [[84381, 59017], [1, -51], [-10, 19], [-34, 99], [-9, 36], [9, 24], [25, -37], [18, -90]], [[84244, 59247], [24, -88], [-26, 60], [-30, 41], [-31, 67], [-23, 24], [-6, 14], [2, 28], [17, 5], [7, -2], [45, -119], [21, -30]], [[83528, 59607], [14, -5], [45, 18], [18, -9], [12, -33], [15, -10], [12, -17], [23, 29], [22, -33], [20, -63], [24, -44], [22, -33], [5, -25], [-14, -40], [-4, -50], [2, -55], [16, -114], [-5, -31], [-18, -44], [-12, -49], [1, -20], [-5, -16], [-1, -35], [-11, 7], [-9, -5], [-9, -16], [-15, -33], [-23, 10], [-10, 10], [-3, 29], [-7, 20], [-9, 12], [-24, 50], [-11, 38], [-1, 40], [-6, 37], [-12, 33], [-16, 26], [-6, 24], [-2, 29], [-1, 75], [-24, 92], [-8, 23], [-21, 22], [-18, 30], [-8, 29], [-7, 48], [-5, 7], [-14, -3], [-13, 7], [3, 35], [14, 25], [19, 3], [51, -14], [14, -11]], [[83864, 59642], [18, -1], [5, 5], [33, -48], [-2, -24], [4, -33], [-19, -55], [-3, -19], [-11, -18], [-35, 44], [-13, 27], [-4, 56], [14, 81], [13, -15]], [[83408, 59764], [0, -39], [-47, 57], [-1, 20], [1, 14], [5, 9], [25, -21], [17, -40]], [[84542, 59695], [-8, -37], [-9, 13], [-12, -2], [-21, -32], [-33, 43], [-5, 33], [24, 73], [0, 109], [8, 27], [9, 19], [11, 11], [23, -75], [8, -10], [22, -34], [-5, -70], [2, -41], [-14, -27]], [[83937, 59935], [-1, -23], [-60, 85], [-3, 15], [0, 13], [4, 14], [60, -104]], [[83897, 60486], [5, -20], [-5, 1], [-4, -4], [-13, -41], [14, -77], [-9, -56], [-16, -4], [-6, 6], [3, 28], [4, 12], [-3, 37], [-10, 23], [-7, 44], [-12, 27], [6, 43], [36, 5], [17, -24]], [[83638, 62566], [43, -30], [94, -108], [34, -27], [36, -20], [28, -5], [26, 24], [10, 25], [20, 67], [20, 8], [13, -24], [9, -33], [5, -47], [-6, -50], [-20, -44], [-12, -54], [-8, -177], [0, -53], [7, -51], [17, -81], [9, -23], [26, -29], [7, -22], [1, -39], [4, -35], [17, -13], [14, -18], [-5, -38], [-9, -39], [-12, -97], [-55, -223], [-3, -48], [-22, -96], [-45, -16], [-52, -46], [-28, -36], [-25, -47], [-10, -62], [8, -28], [5, -30], [0, -32], [-8, -27], [-25, -65], [-10, -54], [-11, -24], [-6, -29], [2, -33], [10, -29], [30, -125], [33, -121], [7, -14], [2, -16], [-19, -32], [1, -58], [5, -58], [29, -142], [4, -38], [10, -31], [14, -30], [17, -24], [46, -42], [18, -9], [19, -1], [4, 28], [17, 10], [-4, 28], [-20, 38], [0, 21], [10, 16], [13, 9], [28, 42], [29, 34], [38, -3], [37, -19], [27, -19], [22, -37], [22, -62], [16, -69], [-1, -33], [-3, -33], [0, -33], [12, -22], [36, -1], [18, 51], [3, 58], [-13, 22], [6, 28], [11, 22], [16, -19], [15, -36], [56, -39], [14, -1], [11, -7], [25, -28], [12, -21], [-14, -45], [-56, -10], [-16, -34], [17, -68], [26, -55], [17, -45], [15, -49], [0, -45], [-9, -46], [24, 3], [23, -9], [32, -40], [10, -3], [10, 6], [-1, -141], [-22, -129], [-27, 16], [-23, 54], [4, 67], [15, 64], [-8, 14], [-15, -6], [-17, -14], [-19, -5], [-30, 8], [-62, 70], [-26, 7], [-6, 31], [2, 67], [-25, 80], [-4, 28], [-8, 23], [-74, 86], [-9, 15], [-23, 69], [-52, 98], [-14, 10], [-16, 3], [-5, -25], [7, -38], [3, -33], [-1, -35], [2, -27], [25, -54], [3, -26], [17, -70], [2, -82], [-21, -34], [-24, 38], [-1, 31], [-4, 29], [-25, 74], [-8, 16], [-48, 74], [-37, 80], [-82, 86], [-9, 5], [-15, -7], [-13, -10], [-40, -43], [-14, -29], [-1, -46], [-28, -36], [-39, -5], [-30, 23], [-25, 45], [-21, 2], [-25, 71], [-31, 9], [-26, -55], [-5, 109], [0, 111], [7, 33], [13, 27], [65, 116], [8, 38], [-3, 50], [-15, 40], [-23, 25], [-27, 10], [-19, 23], [-15, 38], [-11, -67], [10, -98], [2, -65], [-9, -24], [-17, 0], [-16, 7], [-11, 23], [-9, 67], [-23, 43], [-9, 63], [-10, 9], [-21, -5], [-16, 29], [-10, 74], [-2, 78], [-9, 66], [-13, 64], [-7, 52], [-12, 235], [-2, 21], [-6, 18], [-15, 27], [-11, 32], [-2, 27], [3, 115], [5, 28], [11, 13], [16, -22], [12, -28], [15, -14], [14, -17], [25, -69], [10, -10], [31, 2], [18, 8], [9, 25], [5, 30], [1, 35], [-18, 103], [-6, 74], [0, 67], [5, 67], [24, 112], [3, 77], [-2, 104], [4, 61], [-1, 36], [-14, 55], [-4, 60], [41, 302], [13, 58], [9, 61], [4, 80], [31, 22], [29, 33], [15, -3], [15, -8], [36, 17], [13, 1]], [[83866, 62727], [-17, -42], [-10, 12], [10, 40], [0, 14], [8, 31], [15, 11], [13, -31], [-19, -35]], [[83680, 62835], [-1, -39], [-14, 21], [-3, 29], [1, 21], [6, 26], [9, -23], [2, -35]], [[83755, 62996], [3, -52], [-17, 1], [-24, 32], [-3, 16], [1, 13], [4, 11], [36, -21]], [[83877, 63574], [-5, -7], [-8, 3], [8, 55], [14, 15], [11, -6], [-20, -60]], [[83854, 63814], [-13, -47], [-11, 0], [2, 26], [14, 55], [5, -1], [3, -33]], [[86436, 53586], [-6, -3], [-4, 2], [0, 8], [4, 9], [6, 4], [4, -3], [0, -8], [-4, -9]], [[87387, 56095], [-17, -12], [-8, 44], [3, 51], [11, 39], [12, 13], [2, 4], [12, 51], [3, -28], [-8, -93], [-9, -37], [-1, -32]], [[92648, 45232], [46, -30], [16, -34], [-17, -15], [-40, -10], [-10, 20], [-39, 21], [-6, 37], [-19, -13], [10, 27], [-25, 29], [-7, 40], [-1, 16], [28, -19], [64, -69]], [[92855, 45298], [-4, -31], [-10, 10], [-30, -16], [-16, 4], [-9, 28], [-3, 13], [27, -10], [-5, 31], [38, -16], [12, -13]], [[91915, 45757], [-4, -45], [-22, 13], [-5, 10], [4, 28], [20, 1], [7, -7]], [[91966, 46071], [12, 0], [20, 43], [17, 13], [11, -20], [-18, -137], [-16, 21], [-60, 38], [-2, 54], [-15, 18], [-10, 53], [-20, 58], [-4, 38], [12, -16], [12, -38], [53, -79], [-2, -25], [10, -21]], [[91813, 46459], [39, -48], [21, 14], [12, -7], [25, -55], [1, -40], [4, -34], [-1, -15], [-14, -21], [1, 24], [-10, 4], [-37, -1], [-28, 15], [-39, 4], [16, 36], [4, 14], [-21, 59], [0, 28], [1, 15], [17, 8], [9, 0]], [[91762, 46374], [-4, -14], [-16, 10], [-46, 80], [7, 59], [21, 30], [31, -33], [10, -49], [3, -27], [-6, -56]], [[92397, 46682], [16, -9], [33, 4], [11, -33], [16, -11], [13, -15], [12, -22], [0, -13], [-3, -12], [-7, -10], [2, -23], [-12, 3], [-16, -12], [-30, 27], [-11, 6], [-3, 24], [-19, 39], [-35, 28], [18, 23], [15, 6]], [[89885, 46869], [5, -25], [-40, 35], [-39, 58], [-19, 15], [-13, 38], [24, -28], [41, -27], [41, -66]], [[91973, 46812], [5, -41], [-22, 44], [10, 50], [2, 27], [-1, 15], [-22, 26], [11, 42], [13, 14], [7, 4], [0, -59], [6, -27], [-9, -95]], [[89884, 46957], [-12, -2], [-49, 39], [-12, 29], [57, -7], [15, -7], [3, -40], [-2, -12]], [[91117, 48486], [-11, -4], [-5, 26], [-26, 23], [-26, 70], [1, 61], [3, 17], [15, 1], [57, -70], [6, -22], [-4, -66], [-10, -36]], [[93321, 47991], [-7, -54], [-5, -9], [-7, 20], [-24, -20], [-11, -22], [-13, -17], [-28, 4], [-27, 15], [-26, 28], [-23, 35], [-23, 55], [-14, 57], [7, 66], [-9, 60], [-44, 43], [-10, 14], [-19, 59], [-19, 26], [-25, 52], [-6, 23], [-11, 66], [-3, 40], [9, 116], [-4, 58], [12, -5], [13, -23], [15, -16], [35, -11], [27, -46], [25, -90], [4, -30], [8, -21], [26, -38], [14, -25], [26, -98], [15, -21], [17, -9], [16, -14], [27, -43], [24, -49], [17, -51], [12, -55], [9, -70]], [[90881, 48714], [-15, -3], [-26, 54], [-6, 21], [3, 28], [32, 39], [21, -35], [4, -75], [-13, -29]], [[92957, 48713], [-6, -4], [-12, 72], [-2, 54], [-4, 40], [-6, 24], [18, 43], [8, 12], [13, -23], [2, -51], [11, -43], [-8, -95], [-14, -29]], [[90560, 49120], [-19, -17], [-13, 13], [-6, 38], [5, 36], [16, 29], [10, 9], [12, -20], [4, -38], [-9, -50]], [[92198, 49368], [14, -12], [42, 60], [22, -42], [28, -20], [30, -12], [-12, -86], [4, -40], [7, -40], [-1, -59], [-13, -52], [-26, -76], [-12, -15], [-13, -8], [-43, -6], [-8, -40], [3, -43], [23, -57], [18, -63], [-18, -59], [-30, -40], [-29, -21], [-47, 12], [-50, -5], [-10, -22], [0, -37], [-7, -28], [-9, -25], [-25, -53], [-29, -46], [-38, -45], [-13, -10], [-35, -7], [-31, -26], [-13, -25], [-15, -20], [-33, -22], [-32, -43], [-12, -8], [-66, -7], [-95, -2], [-28, -5], [-27, 6], [-15, 17], [-32, 79], [-28, 26], [-30, 0], [-41, -28], [-8, 6], [-80, 116], [-25, 28], [-26, 21], [-32, 15], [-30, 23], [-18, 55], [2, 72], [24, 42], [37, -21], [14, 0], [14, 12], [16, -4], [17, -10], [60, 15], [34, -22], [34, -29], [32, -6], [32, 6], [43, 33], [14, -4], [42, 0], [36, 44], [14, 177], [9, 60], [13, 14], [9, -4], [13, -30], [-17, -38], [-8, -29], [-2, -71], [9, -69], [22, -54], [32, -7], [29, 36], [32, 7], [30, -35], [30, 6], [14, 23], [16, 10], [16, 4], [14, 13], [20, 60], [13, 67], [19, 52], [52, 88], [15, 11], [17, 6], [37, -4], [27, 32], [2, 70], [-4, 72], [-31, 167], [-2, 27], [4, 30], [9, 27], [31, 0], [32, -9], [13, -26], [14, -20]], [[92682, 49481], [-2, -13], [-17, 15], [14, 30], [6, 2], [-1, -34]], [[92408, 50038], [-7, -51], [-17, 30], [-12, 42], [8, 20], [19, 11], [9, -52]], [[92249, 50145], [-3, -29], [-9, 1], [-24, 57], [-4, 15], [5, 14], [28, -41], [7, -17]], [[92209, 50212], [-6, 0], [-1, 46], [4, 24], [16, -16], [2, -42], [-15, -12]], [[89158, 50228], [0, 70], [0, 39], [0, 2]], [[89158, 50339], [9, 0], [28, -1], [22, -9], [140, -125], [41, -50], [14, -12], [14, -1], [14, -5], [62, -70], [94, -69], [99, -67], [31, -14], [31, -6], [69, -23], [37, -21], [53, -82], [27, -25], [25, -46], [35, -50], [15, -12], [15, -6], [35, -2], [35, 9], [15, -4], [14, -9], [13, -17], [6, -33], [22, -47], [31, -20], [29, -42], [27, -50], [19, -50], [22, -43], [34, -18], [35, -2], [120, -253], [6, -39], [1, -165], [-13, -129], [30, -40], [40, -15], [58, -28], [55, -41], [175, -174], [24, -15], [35, -6], [36, 3], [13, -9], [26, -32], [14, -20], [24, -57], [21, -61], [9, -17], [11, -14], [6, -33], [9, -103], [-3, -64], [-9, -24], [-28, -11], [-99, -11], [-65, 12], [-46, -65], [-2, -28], [4, -27], [40, -137], [23, -121], [20, -50], [29, -40], [26, -48], [24, -54], [50, -95], [27, -36], [31, -21], [53, -74], [7, -33], [16, -103], [6, -69], [1, -29], [4, -26], [46, -63], [11, -18], [20, -140], [16, -65], [27, -24], [31, 2], [85, 42], [12, 1], [16, -10], [14, -23], [4, -63], [-13, -66], [-4, -64], [17, -52], [43, -41], [16, -12], [78, -13], [30, -11], [30, -17], [11, -16], [-8, -28], [-15, -14], [-18, -6], [-29, -20], [1, -36], [16, -38], [15, -45], [12, -17], [14, -11], [33, -15], [33, -22], [22, -22], [22, -15], [48, -10], [36, -29], [51, 12], [-44, -47], [-15, -11], [-53, 17], [-10, -18], [22, -50], [32, -34], [12, -19], [-9, -23], [-37, -46], [-16, -6], [-29, -4], [-50, 20], [-35, 25], [-9, 34], [-10, 20], [-31, 49], [-23, 26], [-28, 9], [-30, -1], [-53, 28], [-116, 20], [-27, 12], [-35, 39], [-16, 6], [-18, -12], [-44, -8], [-13, 3], [-32, 33], [-33, 12], [-14, -9], [-14, -3], [-44, 24], [-34, 10], [-28, 33], [-15, 30], [-17, 28], [-16, 70], [-24, 67], [-31, 54], [-65, 89], [-13, 22], [-25, 81], [1, 54], [9, 54], [-14, -19], [-16, 3], [-44, 36], [-18, 42], [-30, 116], [-19, 62], [-44, 108], [-13, 64], [-18, 56], [-12, 21], [-9, 24], [-9, 32], [-12, 21], [-62, 49], [-11, 15], [-12, 8], [-46, 5], [-26, 8], [-50, 39], [-26, 12], [-31, 7], [-30, 15], [-15, 15], [-10, 25], [-6, 59], [-25, -7], [-25, 10], [-24, 21], [-24, 13], [-17, -18], [-5, -47], [-8, -2], [-14, 9], [-7, -5], [-16, -22], [-12, -29], [-23, 4], [-47, 30], [-21, 18], [-18, 34], [-15, 38], [-16, 29], [-19, 22], [24, -51], [56, -228], [-14, -4], [-14, 6], [13, -44], [-15, -6], [-15, 0], [-32, 19], [-31, 6], [-10, -9], [7, -16], [11, -49], [9, -50], [-46, -23], [-46, -14], [-52, -27], [-53, -2], [-27, 16], [-28, 9], [-26, -9], [-25, -20], [-21, 3], [-14, 36], [-6, 27], [-8, 23], [-20, -4], [-19, -12], [33, -2], [10, -30], [8, -36], [23, -32], [29, 19], [61, -5], [60, -57], [14, -7], [13, -11], [31, -56], [24, -51], [19, -59], [4, -23], [-1, -61], [-6, -30], [-39, -43], [-41, -33], [-61, -63], [-59, -73], [-31, 15], [-28, 38], [-10, 10], [-29, 21], [-18, 7], [-69, -16], [-70, -8], [-30, 1], [-28, 12], [-32, 23], [-31, -11], [-21, -26], [-23, -4], [-44, 59]], [[92490, 49103], [-21, -44], [-13, 41], [-16, 36], [-13, 36], [-17, 79], [0, 40], [4, 42], [1, 43], [-8, 87], [-19, 78], [-68, 189], [-21, 49], [-24, 44], [-16, 11], [-31, 11], [-14, 8], [-26, 31], [-24, 36], [-60, 106], [-31, 30], [-17, 37], [-94, 120], [-27, 28], [-34, 0], [-28, 24], [22, 15], [5, 40], [-5, 41], [47, -67], [50, -58], [14, -47], [25, -3], [45, -38], [30, -35], [29, -40], [33, -58], [62, -45], [9, -17], [32, -75], [42, -64], [14, -35], [177, -301], [30, -85], [2, -58], [-6, -22], [-19, -49], [1, -58], [-6, -51], [-16, -52]], [[91787, 50309], [-55, -8], [-20, 9], [-18, 33], [-16, 52], [-16, 12], [-7, 11], [39, 39], [35, 12], [56, -49], [6, -25], [0, -16], [-1, -53], [-3, -17]], [[91076, 50527], [-9, -30], [-21, 3], [-9, 9], [15, 6], [6, 25], [7, 8], [11, -21]], [[90851, 50714], [93, -38], [6, 1], [-1, 13], [1, 4], [6, -10], [-2, -27], [-15, -7], [-13, 3], [-10, -15], [-26, -52], [-18, 9], [-22, -12], [-38, -1], [-50, 23], [-13, -20], [-18, 6], [-17, -22], [-8, 1], [-4, 32], [1, 16], [20, 14], [-3, 49], [17, 25], [29, -3], [27, 17], [58, -6]], [[91601, 50948], [-1, -21], [-20, 11], [-6, -3], [-34, 60], [0, 37], [9, 31], [15, -5], [25, -39], [12, -71]], [[55445, 83213], [11, -7], [78, -7], [79, -8], [127, -8], [132, -9], [137, -9], [148, -9], [157, -6], [9, 4]], [[56556, 81519], [15, -40], [6, -31], [-6, -24], [2, -25], [13, -26], [42, -80], [21, -77], [13, -30], [31, -39], [2, -16], [-12, -14], [-10, -2], [-8, -4], [-5, -14], [8, -15], [11, -21], [13, -61], [-1, -50], [-10, -13], [-14, -29], [-8, -27], [-73, -19], [-17, -29], [-40, -56], [-27, -32], [-40, -59], [-64, -100], [-23, -42], [-17, -34], [-51, -92], [-16, -39], [3, -32], [17, -75], [3, -34], [-3, -31], [-5, -28], [1, -12], [15, -20], [24, -32], [1, -10], [-3, -14], [-9, -11], [-30, 11], [-33, 22], [-12, -3]], [[56260, 80110], [-18, 5], [-75, 42], [-51, 32], [-5, 21], [-9, 31], [-22, 25], [-49, 22], [-21, 18], [-80, 9], [-35, 1], [-24, -7], [-16, 0], [-22, -45], [-15, -13], [-22, -1], [-19, 8], [-20, 23], [-31, 13], [-23, -6], [-16, 5], [-15, 1], [-5, -4], [-11, 0], [-17, -11], [-18, -16], [-21, -12], [-15, -27], [-14, -51], [-39, 23], [-13, -10], [-19, -7], [-13, 7], [3, 18], [6, 20], [0, 28], [-4, 31], [-12, 10], [-18, 4], [-10, 6], [-1, 10], [-9, 13], [-16, 33], [-16, 41], [-10, 13], [-15, -20], [-24, -22], [-14, -8], [-28, -64], [-51, -2], [-3, 30], [-5, 28], [-29, 8]], [[53960, 82793], [64, -33], [26, -19], [-3, 21], [-5, 18], [3, 27], [-2, 40], [-57, 20], [-38, 7]], [[53947, 82920], [11, -11], [37, -4], [92, 54], [159, 70], [170, 66], [40, 7], [40, 14], [14, 24], [15, 17], [23, 43], [51, 68], [91, 24], [34, 32], [70, 45], [162, 50], [67, 11], [66, 1], [59, -39], [62, -49], [12, -30], [-34, 19], [-49, 44], [-18, 2], [42, -134], [22, -47], [47, -36], [39, -11], [119, 21], [43, 28], [12, 14]], [[31146, 62246], [-2, -1], [-3, 1], [-1, 1], [-2, 6], [-8, 8], [-2, 8], [2, 9], [3, 3], [16, 1], [2, -1], [3, -6], [0, -4], [-1, -4], [-3, -10], [-1, -2], [-1, -3], [-1, -5], [-1, -1]], [[31826, 62272], [-22, -3], [-14, 4], [-5, 17], [27, 16], [30, -2], [18, -10], [2, -6], [-36, -16]], [[31630, 62468], [9, -12], [8, 2], [-6, 23], [6, 0], [53, -14], [34, -24], [35, -12], [3, -80], [-27, -32], [-18, -34], [-15, -41], [-38, -47], [-45, -15], [-31, -1], [-11, 1], [-11, 9], [-23, -8], [-29, 21], [-24, -5], [-48, 5], [-18, -19], [-18, -4], [-17, 4], [-14, 8], [-36, -1], [-15, 16], [6, 91], [1, 41], [-9, 35], [-10, 21], [-7, 25], [14, 17], [12, 24], [4, 37], [12, 9], [15, 4], [69, -17], [173, -10], [10, -3], [6, -14]], [[84695, 74617], [-16, -17], [0, 30], [12, 25], [12, 3], [-8, -41]], [[86257, 76345], [7, -35], [18, -34], [9, -25], [2, -26], [8, -15]], [[86301, 76210], [-14, -16], [-19, 10], [-31, 6], [-39, -51], [-22, -17], [-16, -50], [-31, -30], [-17, -31], [-22, -54], [-14, -53], [-33, -54], [-20, -67], [-1, -58], [21, -59], [2, -51], [-15, -104], [9, -110], [-10, -43], [-102, -76], [-26, -37], [-38, -98], [-46, -36], [-28, -40], [-39, -24], [-26, -69], [-27, -39], [-33, -24], [-25, -30], [-55, -2], [-39, -21], [-27, -58], [-83, -66], [-12, -49], [6, -77], [0, -58], [-7, -49], [-18, 14], [-10, -16], [-11, -44], [4, -51], [28, -17], [23, -20], [33, -11], [24, -24], [52, -107], [42, -47], [11, -17], [24, -24], [22, -37], [13, -33]], [[85175, 73606], [-3, 5], [-14, 4], [-56, 47], [-46, -29], [-12, -37], [-12, -12], [-19, 73], [-30, 2], [-48, 65], [-21, -13], [-5, -26], [-26, -60], [-37, -48], [-12, -7], [-13, 3], [2, 14], [-15, 55], [-58, 22], [-21, 23], [-11, 6], [57, 61], [15, 11], [-11, 14], [-12, 7], [-47, -9], [-24, 20], [-36, -7], [-24, 16], [51, 60], [2, 36], [-1, 27], [26, 80], [26, 44], [67, 62], [30, 9], [21, -3], [17, 6], [-18, 24], [-18, 11], [-35, -2], [-36, 36], [-3, 38], [70, 240], [1, 22], [-11, 58], [-3, 57], [-51, 33], [-22, 4], [-64, 64], [-26, 33], [-10, -10], [-2, -51], [-9, -12], [-17, -10], [-9, 59], [-14, 42], [-42, 44], [-16, 23], [8, 52], [-4, 4]], [[45224, 70776], [38, -30], [35, 14], [43, -39], [23, -9], [-20, -27], [-21, -36], [-50, 9], [-42, 34], [-15, 26], [-5, 23], [14, 35]], [[43048, 73133], [-2, -11], [-15, 5], [-20, -4], [-11, 31], [10, 13], [22, 3], [11, -14], [5, -23]], [[42875, 73640], [17, -4], [89, 9], [24, -6], [-3, -43], [-17, -17], [-52, -11], [-82, 27], [-27, 37], [-4, 27], [0, 12], [17, 10], [38, -41]], [[42181, 73993], [23, -23], [-35, -5], [-11, -11], [-29, 16], [-33, -3], [-22, 31], [-5, 33], [11, 20], [30, 0], [71, -58]], [[42044, 74034], [-29, -1], [-27, 44], [40, 23], [12, -14], [8, -16], [6, -21], [-10, -15]], [[42283, 74052], [-13, -7], [-74, 44], [-26, 21], [-34, 51], [96, -62], [51, -47]], [[42479, 74103], [-6, -6], [-58, 16], [-16, 21], [-7, 39], [10, 13], [25, 8], [37, -7], [24, -28], [0, -36], [-9, -20]], [[41350, 74542], [-12, -27], [-21, 10], [-7, 10], [6, 59], [17, 14], [17, -24], [0, -42]], [[47942, 73259], [-24, -6], [-95, -94], [-29, 0], [-55, 41], [-96, 14], [-32, 12], [-39, -27], [-30, 1], [-25, -35], [-17, 10], [20, 77], [31, 152], [-1, 93], [7, 81], [-8, 80], [-16, 50], [21, 130], [-2, 67], [-19, 84], [59, -13], [-19, 34], [-18, 20], [-17, -4], [-15, 1], [-50, -33], [-25, -10], [-8, 6], [3, 52], [-13, 68], [20, 18], [24, 5], [20, 29], [12, 33], [-7, 57], [18, 55], [40, 46], [-21, -7], [-24, -29], [-38, -104], [-12, -53], [-33, -17], [-29, -9], [-14, 6], [-18, 13], [-2, 39], [2, 31], [12, 62], [4, 88], [18, 78], [-2, 21], [-5, 31], [16, 30], [19, 20], [28, 68], [40, 160], [47, 170], [-4, 21], [-10, 15], [4, 46], [28, 200], [11, 26], [13, 59], [3, 94], [5, 65], [-1, 33], [-4, 39], [-18, 75], [-18, 159], [-2, 53], [15, 26], [-25, 4], [-11, 35], [2, 38], [28, 63]], [[59499, 69886], [52, 92], [25, 59]], [[11526, 39828], [-8, -11], [3, 15], [-6, 32], [-6, 5], [6, 9], [9, -25], [2, -25]], [[12140, 41160], [-5, -12], [-1, 12], [-7, 6], [-11, 12], [-15, 14], [-8, 3], [-4, 8], [6, 4], [9, -6], [12, -13], [15, -13], [9, -15]], [[10921, 41255], [3, -21], [-6, 10], [-22, 20], [-2, 17], [27, -26]], [[11952, 41277], [0, -11], [-26, 55], [10, -4], [16, -40]], [[10880, 41365], [2, -16], [-10, 11], [-10, 29], [-17, 36], [-4, 15], [13, -14], [9, -21], [17, -40]], [[10886, 41557], [2, -11], [-11, 1], [-3, 4], [1, 20], [7, 25], [6, 21], [11, 20], [21, 19], [11, 8], [3, -5], [-4, -2], [-35, -41], [-10, -29], [-5, -20], [1, -6], [5, -4]], [[8522, 41653], [40, -27], [7, -44], [-8, -29], [-21, 7], [-10, 16], [-14, 52], [-39, -12], [-27, 11], [-15, 67], [0, 31], [6, 19], [29, 20], [36, -15], [13, -38], [3, -58]], [[8385, 41736], [-9, -15], [-11, 11], [-5, 14], [-2, 15], [2, 19], [26, -3], [8, -8], [-9, -33]], [[7942, 42120], [-11, 0], [-10, 9], [2, 59], [3, 12], [15, -20], [13, -52], [-12, -8]], [[10155, 42269], [15, -28], [-20, 19], [-25, 8], [9, 5], [15, 0], [6, -4]], [[10119, 42260], [-11, -3], [-27, 34], [11, 0], [15, -21], [12, -10]], [[7926, 42247], [-5, -4], [-6, 10], [-2, 16], [2, 26], [13, -17], [6, -11], [-8, -20]], [[9587, 42436], [1, -10], [-6, 1], [-10, 29], [-4, 25], [-6, 29], [-9, 21], [-1, 19], [0, 30], [10, -46], [9, -37], [8, -31], [8, -30]], [[10413, 42571], [-5, -7], [7, 46], [7, 6], [-9, -45]], [[9708, 42709], [-2, -26], [-5, 25], [-17, 40], [-7, 18], [8, -3], [23, -54]], [[11486, 45785], [-10, -9], [-1, 61], [13, -12], [5, -9], [-2, -17], [-5, -14]], [[11372, 46122], [-20, -45], [-1, 48], [8, 6], [7, 0], [6, -9]], [[11382, 46258], [42, -30], [13, 3], [-13, -29], [-42, -16], [-14, -15], [-16, 10], [-9, 34], [39, 43]], [[11090, 46413], [-6, -11], [-11, 35], [-2, 14], [20, 18], [11, -9], [-12, -47]], [[11234, 46693], [-18, -5], [-3, 29], [6, 15], [8, 7], [13, -9], [8, -12], [-1, -11], [-13, -14]], [[11091, 46710], [-27, -14], [-13, 3], [-10, 47], [3, 29], [5, 9], [46, -11], [4, -22], [-1, -20], [-7, -21]], [[64240, 66017], [-25, -12], [-23, -12], [-20, 0], [-15, 5], [-11, 12], [-20, 49], [-14, 63]], [[64112, 66122], [8, 35], [3, 22], [-19, 167], [-6, 128], [2, 26], [11, 30], [19, 66], [9, 65], [28, 148], [29, 57], [43, 42], [35, -82], [43, -63], [8, -70], [-13, -57], [-11, -90], [7, -42], [2, -36], [12, -61], [11, -78], [2, -55], [-6, -51], [-15, -42], [-29, -129], [-9, -13], [-36, -22]], [[57836, 78024], [29, -60], [38, -31], [86, -34], [7, 4], [1, 6], [-6, 9], [-1, 11], [4, 14], [12, 0], [20, -12], [37, 18], [54, 47], [50, 10], [46, -28], [23, -33], [15, -31]], [[58251, 77914], [-5, -38], [-3, -24], [-12, -99], [-8, -37], [-13, -42], [-142, -49], [9, 23], [-3, 42], [-6, 31], [13, 29], [-31, 10], [-14, -15], [-11, -28], [9, -62], [-15, -35], [-6, -19], [-1, -46], [-9, -20], [-2, -21], [23, 5], [-10, -39], [-43, -76], [-15, -45], [4, -180], [-19, -107], [-1, -32]], [[56306, 77325], [-4, 6], [-2, 22], [-9, 17], [-19, 13], [-14, 23], [-10, 33], [2, 31], [14, 29], [19, 13], [22, -4], [10, 9], [-4, 20], [-22, 26], [-40, 32], [-41, -17], [-42, -67], [-30, -11], [-18, 45], [-33, 27], [-47, 8], [-29, 17], [-10, 26], [-21, 20], [-45, 21], [-1, 21], [8, 4], [16, 2], [21, 5], [4, 11], [0, 10], [-17, 14], [-17, 9], [-9, 9], [-6, 10], [-1, 10], [5, 8], [7, 0], [7, 6], [3, 25], [10, 20], [6, 7], [0, 14], [-7, 14], [-9, 12], [-14, 7], [-43, 21], [-22, 29], [-13, 1], [-22, 16], [-22, 26], [-20, 36], [-21, 23], [-6, 9], [0, 9], [3, 10], [0, 11], [-5, 35], [3, 38], [-1, 34], [0, 16], [-4, 5], [-4, -5], [-5, -7], [-5, -1], [-16, 25], [-20, 52], [-13, 17], [-26, 24], [-22, 20], [-16, 43], [-17, 34]], [[56354, 79462], [10, 10], [40, 24], [10, 25], [13, 22], [18, -2], [57, -54], [61, 3], [11, -2], [4, -1], [7, -5], [82, -27], [12, 3], [4, 3], [32, -23], [29, 3], [28, 16], [29, 5], [26, -9], [20, -32], [52, -66], [15, -25], [24, 3], [26, 13], [27, 44], [82, 51], [62, 12], [61, 21], [71, 14], [20, 41], [12, 29], [8, 52], [38, 15], [36, 10], [13, 7]], [[90567, 76848], [-3, -1], [-2, 7], [6, 8], [11, 9], [4, -5], [-4, -7], [-5, -4], [-7, -7]], [[90522, 76877], [4, -3], [5, 0], [5, 1], [2, -6], [1, -11], [-3, -1], [-7, -2], [-4, -1], [-2, 8], [-1, 6], [-4, 4], [0, 4], [4, 1]], [[90654, 76972], [-7, -3], [-12, 3], [-4, 3], [2, 5], [8, 8], [6, -3], [5, -2], [2, -11]], [[90753, 77041], [-9, -16], [-20, 14], [1, 32], [2, 9], [57, 28], [16, -18], [4, -15], [-51, -34]], [[90612, 77475], [42, -42], [58, 9], [-14, -38], [-22, 1], [-39, -55], [-34, -7], [-17, -13], [-55, -82], [-8, -32], [-33, -62], [-50, -55], [-9, -104], [-32, 42], [-4, 42], [10, 35], [57, 74], [23, 41], [7, 34], [22, 36], [10, 32], [14, 14], [48, 131], [26, -1]], [[91277, 77947], [-52, -40], [-42, -18], [-71, -84], [-26, -46], [-36, -19], [-35, 11], [-10, -19], [-3, -33], [-13, -29], [-70, -91], [-29, -72], [-30, -13], [-56, -73], [10, 63], [11, 30], [47, 56], [3, 60], [26, 51], [51, 52], [35, 67], [28, 18], [31, 56], [32, 20], [-3, 43], [14, 48], [11, -3], [26, -67], [20, -2], [54, 14], [80, 116], [26, 21], [19, 4], [11, -10], [4, -14], [-1, -17], [-6, -25], [10, -29], [-13, -22], [-53, -4]], [[63328, 78045], [-4, -10], [-13, 53], [-1, 32], [8, 17], [11, -54], [-1, -38]], [[91579, 78134], [-41, -29], [-26, 1], [61, 142], [36, 21], [46, 84], [97, 103], [11, 7], [56, -3], [-88, -113], [-11, -45], [-39, -48], [-28, -16], [-20, -23], [-54, -81]], [[92222, 78857], [-52, -63], [-17, 0], [-9, 24], [-2, 13], [42, 10], [48, 84], [35, 55], [19, 19], [16, -1], [-80, -141]], [[92527, 79356], [-13, -33], [-14, 4], [-5, 9], [18, 39], [8, 7], [6, -26]], [[92799, 79948], [-10, -30], [-12, 10], [-2, 9], [27, 35], [10, 41], [20, 1], [8, -8], [-6, -20], [-35, -38]], [[93002, 80248], [-27, -25], [-28, 15], [0, 50], [59, 153], [21, -9], [-5, -37], [-22, -57], [7, -69], [-5, -21]], [[93310, 80819], [-35, -58], [-52, -14], [-25, -19], [-19, -39], [-14, -21], [-30, 12], [-13, 19], [0, 68], [-13, 30], [6, 19], [30, -3], [30, 44], [69, 18], [25, 47], [31, 117], [33, 41], [26, 9], [8, -58], [-7, -64], [-15, -62], [-35, -86]], [[93445, 81023], [-11, -13], [-11, 3], [-36, 36], [-8, 17], [13, 30], [45, 45], [22, -1], [9, -10], [-1, -53], [-22, -54]], [[93234, 81118], [-26, -7], [-11, 16], [-8, 18], [-5, 26], [29, 12], [19, -14], [4, -38], [-2, -13]], [[89655, 83175], [60, -145], [2, -32], [-5, -33], [-11, -42], [-4, -44], [7, -39], [-5, -10], [49, -176], [35, -111], [11, -45], [7, -48], [11, -99], [2, -151], [-3, -50], [-8, -49], [-8, -29], [-18, -20], [-8, -54], [-4, -153], [9, -80], [17, -56], [12, -60], [2, -64], [5, -29], [27, -36], [11, -28], [3, -40], [2, -59], [4, -13], [13, -18], [56, -426], [22, -129], [64, -223], [26, -135], [17, -64], [11, -68], [9, -69], [19, -76], [25, -74], [49, -67], [22, -37], [5, -30], [2, -103], [-11, 22], [-14, 79], [-24, 45], [-35, 54], [-35, 48], [-44, 80], [-21, 23], [-23, 16], [-41, 18], [-24, 2], [-98, -12], [-40, -16], [-37, -37], [-21, -54], [-16, -108], [-89, -386], [-21, -101], [-8, -108], [3, -85], [6, -31], [26, -84], [21, -49], [15, -21], [18, -14], [11, -17], [10, -23], [18, -57], [23, -128], [25, -91], [11, -28], [28, 7], [18, -1], [18, -8], [10, -23], [15, -101], [11, -98], [1, -26], [-20, -75], [-5, -32], [-3, -34], [-5, -27], [-9, -23], [-3, 111], [-14, 79], [-5, 68], [-19, 47], [-65, 20], [-61, 7], [-9, 9], [-14, 29], [-15, 23], [-16, 3], [-16, -9], [-27, -33], [-21, -51], [-15, -55], [-13, -59], [-27, -155], [-16, -51], [-20, -48], [-17, 26], [-15, 30], [-9, 43], [-4, 48], [-24, 161], [10, 140], [41, 194], [7, 63], [-6, 60], [-9, 60], [-6, 113], [1, 25], [14, 65], [17, 62], [20, 54], [9, 64], [-13, 159], [-29, 108], [-37, 102], [-7, 28], [-2, 27], [32, 128], [11, 62], [13, 134], [12, 74], [9, 74], [3, 373], [-3, 55], [-20, 117], [-1, 67], [9, 84], [13, 65], [17, 63], [0, 129], [-32, 119], [-24, 52], [-37, 63], [-28, 35], [-14, 27], [14, 9], [10, 21], [-24, 33], [-15, 50], [-2, 196], [6, 49], [18, 55], [16, 59], [14, 137], [5, 141], [-9, 57], [-4, 116], [8, 29], [31, 38], [49, 23], [11, -7], [38, -45], [14, -2], [15, 5], [29, 21], [16, 52], [-21, 29], [12, 37], [35, 13], [3, 32], [-13, 4], [11, 46], [7, 45], [-10, 42], [-57, 104], [-36, 76], [60, -1], [18, 14], [14, 32], [7, 33], [19, -13]], [[96677, 83274], [11, -30], [-112, 106], [-52, 56], [-13, 36], [19, 0], [23, -34], [32, -16], [48, -46], [44, -72]], [[88104, 83582], [-34, -100], [-24, -1], [-18, 21], [-39, -8], [-14, 5], [23, 31], [55, 48], [23, -1], [22, 10], [6, -5]], [[88316, 83578], [25, -23], [39, 4], [10, -15], [-31, -25], [-22, -51], [-7, -47], [-9, -18], [-25, -23], [-22, -30], [-19, -19], [-17, -6], [-37, 99], [-18, 28], [-52, -47], [-12, -1], [12, 58], [30, 63], [15, 9], [30, 85], [9, 19], [93, -50], [8, -10]], [[55445, 83213], [43, 49], [28, 52], [23, 67], [3, 46], [6, 52], [37, 21], [80, -3], [35, 25], [44, 62], [46, 74], [15, 32]], [[55821, 83685], [-27, -55], [-74, -116], [23, -15], [27, -5], [32, -22], [30, -3], [53, 18], [10, 100], [3, 90]], [[96291, 83432], [-2, -84], [-34, 43], [-16, 34], [-23, 6], [-16, 16], [-26, 41], [-31, 54], [-10, 27], [-4, 34], [-21, 31], [-67, 60], [22, 7], [28, 26], [78, -16], [18, -7], [-13, -40], [5, -44], [43, -92], [21, -32], [28, -25], [20, -39]], [[91830, 85840], [-22, -7], [-11, 16], [-1, 11], [34, 25], [21, 36], [13, -22], [4, -15], [-38, -44]], [[95453, 85600], [-45, -54], [-7, 9], [-4, 12], [-1, 19], [41, 36], [42, 91], [16, 75], [-5, 25], [-2, 24], [123, 47], [87, 75], [16, -3], [15, -63], [9, -81], [-12, -49], [-94, -28], [-88, -54], [-91, -81]], [[59948, 89390], [9, -23], [3, -37], [-9, -24], [5, -20], [-18, -14], [-27, 46], [-17, 1], [-17, 20], [-8, 33], [15, 9], [7, -6], [33, 24], [24, -9]], [[69450, 90150], [-49, -7], [-54, 44], [-51, 86], [10, 21], [31, -7], [51, -2], [33, -14], [44, -9], [-5, -40], [0, -16], [14, -17], [-14, -30], [-10, -9]], [[61864, 90265], [-10, -8], [-55, 27], [-5, 21], [2, 8], [22, 6], [23, -7], [17, -27], [6, -20]], [[63962, 91696], [5, -56], [-17, -23], [-16, -6], [-7, 35], [-13, 15], [-48, -41], [-22, -46], [-60, -66], [-123, -47], [-75, -20], [-68, -6], [-63, 42], [-35, 79], [-6, 24], [-4, 32], [1, 33], [4, 50], [7, 49], [26, 44], [60, 52], [59, 34], [31, 8], [75, 2], [214, -117], [48, -30], [27, -41]], [[68706, 91894], [-22, -50], [-46, 3], [-14, 11], [-6, 9], [52, 54], [32, -2], [4, -25]], [[94851, 91532], [-12, -1], [9, 39], [1, 17], [-27, 28], [-50, 21], [-13, 17], [-3, 50], [11, 78], [-23, 42], [8, 37], [59, 41], [24, 31], [27, 25], [4, -3], [27, -24], [-2, -52], [-20, -37], [-46, -14], [-6, -25], [6, -44], [1, -57], [5, -51], [28, -52], [6, -26], [-3, -25], [-11, -15]], [[96999, 91923], [-79, -5], [-158, 54], [-56, 28], [-42, 36], [-48, 25], [-9, 10], [7, 21], [14, 16], [54, 43], [38, 19], [45, 4], [283, -76], [12, -16], [4, -14], [-4, -30], [-24, -6], [-9, -20], [-10, -61], [-5, -16], [-13, -12]], [[66791, 92128], [9, -29], [-1, -53], [-11, -39], [-31, -6], [-31, -16], [-53, 17], [-29, -11], [-30, -1], [-24, 6], [-25, 8], [-16, 11], [1, 30], [-22, 43], [-34, 14], [-31, 5], [-35, 13], [-17, -6], [-22, -16], [-14, 5], [-76, 92], [-12, 21], [-8, 24], [-11, 15], [-26, 64], [13, 29], [26, 19], [18, 5], [32, 43], [59, 18], [12, -3], [11, -13], [61, -44], [33, -29], [28, -35], [30, -30], [89, -51], [60, -50], [61, -35], [16, -15]], [[68488, 92477], [3, -23], [-15, 8], [-19, 26], [-11, 32], [-4, 64], [7, 17], [6, 9], [6, -2], [-1, -40], [28, -91]], [[94643, 92639], [-19, -10], [-40, 8], [-19, 18], [1, 42], [2, 6], [33, -6], [22, -23], [20, -35]], [[64695, 92951], [25, -42], [22, -31], [19, 3], [14, -16], [4, -32], [-38, -54], [-6, -20], [16, -18], [4, -10], [-27, -8], [-5, 25], [-15, 24], [-32, 19], [-13, 16], [-14, 38], [-53, 40], [-34, -6], [-38, 18], [-11, 8], [-3, 23], [16, 19], [60, 16], [29, -1], [31, -16], [-2, 20], [3, 8], [13, -3], [35, -20]], [[88321, 93034], [-69, -49], [-27, 6], [-28, 24], [-15, 5], [-15, -4], [-17, -10], [-22, -2], [-51, 26], [-5, 16], [5, 8], [14, 8], [10, 0], [32, 13], [149, 5], [11, -3], [21, -23], [7, -20]], [[0, 93051], [43, 8], [43, 15], [40, 3], [40, -9], [41, 2], [40, 15], [32, -2], [33, -9], [122, -21], [23, -7], [39, -27], [22, -10], [22, -16], [23, -27], [43, -29], [65, -34], [14, -10], [10, -26], [-7, -30], [-83, -57], [-67, -15], [-129, -15], [-175, -43], [-72, -12], [-25, 2], [-63, 28], [-74, 12], [99966, -10], [-65, -44], [-137, -11], [-81, -31], [-19, -2], [-40, 103], [-6, 26], [15, 34], [41, 42], [17, 30], [96, 54], [86, 71], [47, 11], [47, 33], [-99967, 8]], [[71564, 93485], [-135, -5], [-67, 9], [-10, 11], [9, 28], [69, 42], [31, 27], [32, 46], [56, 38], [47, 0], [147, -45], [21, -28], [3, -13], [-58, -38], [-41, -14], [-63, -48], [-41, -10]], [[72083, 93733], [-20, -6], [-152, 23], [-53, 30], [-16, 27], [6, 24], [141, 117], [54, -33], [15, -31], [36, -38], [-1, -86], [-10, -27]], [[70738, 93820], [-6, -5], [-14, 10], [-42, 15], [-71, 39], [-22, 27], [11, 30], [16, 20], [58, 12], [53, -5], [35, -7], [66, -27], [-61, -17], [-26, -37], [3, -22], [11, -13], [-11, -20]], [[83405, 93945], [-70, -26], [-60, 0], [-42, 46], [33, 18], [57, 7], [31, -6], [44, -29], [7, -10]], [[65366, 94071], [130, -23], [97, -7], [59, -18], [22, -14], [-9, -36], [-17, -14], [-41, -47], [-6, -28], [7, -45], [-6, -33], [-13, -24], [-11, -10], [-73, 0], [-27, -13], [-1, -26], [-5, -29], [-24, -42], [-48, -13], [-11, -16], [4, -27], [-17, -21], [1, -32], [9, -18], [2, -37], [33, -54], [-6, -22], [-26, -43], [-8, -53], [-21, -46], [48, -38], [21, -50], [19, -53], [57, -105], [62, -94], [114, -137], [122, -104], [48, -29], [116, -48], [20, -16], [19, -21], [-49, -39], [-51, -14], [-5, -18], [-28, -10], [-138, 34], [-7, 5], [-15, 24], [-16, 18], [-35, 3], [-35, -11], [21, -22], [23, -7], [40, -41], [-17, -16], [-18, -2], [-82, 55], [-7, -7], [-8, -16], [-40, 18], [-10, -13], [-31, -6], [-25, 15], [0, 19], [-5, 10], [-125, -15], [-52, 0], [-51, 7], [-61, 36], [-11, -16], [-2, -19], [-23, 8], [-51, 29], [-37, 12], [-133, 28], [-94, 34], [24, 16], [40, 8], [1, 21], [-7, 29], [-1, 29], [23, 20], [52, -9], [-7, 32], [25, 6], [47, -18], [18, 11], [-75, 41], [-82, 58], [8, 21], [-29, 5], [-30, -1], [-25, 34], [4, 45], [22, 31], [-13, 6], [-127, -27], [-64, 6], [-72, 18], [-66, -26], [-67, -9], [-35, 9], [-34, 20], [-28, 26], [-22, 45], [-20, 74], [-3, 28], [4, 62], [11, 27], [28, 52], [19, 16], [43, 25], [22, 6], [51, -12], [51, -1], [22, 14], [21, 25], [15, 32], [35, 18], [10, 10], [11, 20], [12, 31], [2, 27], [10, 26], [32, 39], [-12, 24], [5, 16], [21, 29], [-64, 7], [-22, 13], [-21, 19], [6, 18], [8, 13], [64, 48], [28, 15], [31, 7], [31, 0], [33, -5], [32, 7], [-34, 33], [-3, 22], [-13, 53], [3, 25], [14, 21], [30, 24], [43, 8], [34, 12], [33, 19], [31, 3], [63, -12], [31, 2], [34, 11], [97, 40], [36, 11], [38, -3], [50, -15], [55, -28]], [[69631, 93948], [-82, -27], [-22, -2], [-50, 7], [-22, -11], [-33, 27], [2, 24], [16, 25], [9, 31], [-6, 78], [42, 49], [56, 19], [164, 22], [23, -6], [33, -15], [25, -18], [33, -43], [26, -18], [40, -34], [12, -33], [-2, -30], [-75, -6], [-130, -25], [-59, -14]], [[71320, 94150], [-26, -4], [-118, 22], [-43, 27], [16, 18], [31, 0], [140, -63]], [[70973, 94156], [-45, -14], [9, 26], [54, 37], [100, 19], [30, -8], [4, -6], [-42, -39], [-21, -13], [-89, -2]], [[89495, 94409], [69, -25], [57, -28], [196, -135], [18, -28], [15, -35], [8, -123], [-11, -9], [-72, -6], [-98, 14], [-70, 5], [-68, 0], [-60, 17], [-147, 16], [-115, 45], [-120, 33], [-25, 4], [-75, -10], [-102, -43], [-28, -3], [-39, 0], [-27, 40], [65, 14], [65, 5], [63, 14], [59, 47], [29, 38], [51, 85], [28, 31], [28, 20], [30, 6], [33, -3], [103, 19], [70, 6], [70, -11]], [[84594, 94383], [-17, -1], [-32, 15], [-8, 21], [0, 10], [26, 8], [33, -5], [25, -19], [4, -7], [-31, -22]], [[73207, 94511], [-14, -14], [-13, 2], [-11, -7], [-70, 21], [-95, 9], [24, 22], [68, 13], [101, -17], [30, -19], [-20, -10]], [[72974, 94522], [-27, -20], [-37, 11], [-27, 13], [-14, 19], [14, 10], [40, 7], [24, -7], [21, -22], [6, -11]], [[87832, 94420], [-21, -17], [-20, 25], [-93, 76], [-23, 35], [-51, 34], [-13, 12], [-4, 30], [67, -19], [113, -75], [62, -60], [-17, -41]], [[89169, 94469], [-140, -47], [-27, 2], [-63, 48], [-23, 103], [26, 31], [29, 11], [30, 6], [123, 4], [26, -5], [26, -13], [12, -19], [5, -24], [-14, -68], [-10, -29]], [[73543, 94734], [-13, -34], [-78, 17], [-11, 14], [42, 21], [38, 12], [54, 2], [-32, -32]], [[81496, 94700], [-10, -27], [-15, -21], [-11, -26], [-19, -19], [-59, -24], [-46, -54], [-8, -5], [-163, 30], [-26, 9], [-53, 33], [-75, 31], [-39, 46], [19, 8], [19, 4], [67, -6], [19, 14], [10, 39], [1, 23], [5, 18], [22, 13], [241, -40], [93, -23], [28, -23]], [[74070, 95035], [23, -11], [73, 17], [14, -6], [20, -24], [-31, -45], [-23, -18], [-66, 10], [-83, 1], [-37, 25], [20, 26], [48, 16], [28, 15], [14, -6]], [[72825, 95287], [10, -19], [4, -21], [-12, -6], [-36, 1], [-20, -54], [-20, 9], [-13, 31], [-45, -21], [-12, 5], [-21, 24], [-13, 5], [-9, 16], [59, 48], [36, -25], [24, 1], [-5, 29], [1, 22], [30, 9], [40, 1], [2, -55]], [[90776, 95259], [73, -4], [107, 43], [14, 1], [260, -15], [22, -15], [2, -30], [-8, -15], [-4, -22], [32, -21], [84, -4], [53, 19], [156, -10], [128, -14], [49, -32], [38, -17], [31, -20], [23, 12], [22, 20], [18, 4], [18, -4], [-49, -122], [-18, -14], [-69, -30], [-137, -42], [-67, -13], [-152, 0], [-209, 16], [-57, 15], [-34, 18], [-64, 43], [-31, 16], [-103, 14], [-32, 8], [-60, 37], [-62, 30], [-154, 49], [10, 56], [20, 56], [24, 50], [26, 45], [28, 13], [59, -41], [-1, -47], [14, -33]], [[87763, 95281], [-57, -16], [-81, 5], [6, 42], [14, 19], [19, 46], [-9, 35], [5, 42], [10, 33], [23, 45], [25, -27], [17, -40], [15, -20], [62, -39], [12, -12], [-52, -48], [-5, -21], [16, -27], [-20, -17]], [[92467, 95691], [-27, -20], [-64, 33], [24, 18], [43, 12], [10, -6], [8, -13], [6, -24]], [[88902, 95523], [28, -11], [34, 7], [32, -15], [30, -61], [14, -16], [15, -11], [15, -5], [45, -2], [20, 12], [15, 28], [-1, 28], [-4, 29], [0, 39], [7, 35], [10, 21], [13, 14], [74, 43], [52, 42], [71, -16], [72, -38], [127, -80], [59, -23], [71, -21], [72, -8], [35, 5], [69, 22], [35, 2], [436, -160], [15, -13], [14, -19], [-94, -24], [-61, -42], [-21, -29], [24, -24], [20, -32], [-133, -96], [-53, -25], [-54, -8], [-110, 23], [-64, -1], [-62, 20], [-69, 58], [-29, 29], [-25, 40], [-8, 64], [10, 55], [37, 16], [32, 35], [5, 15], [-17, 31], [-108, 5], [-68, -17], [-61, -18], [18, -117], [13, -37], [18, -27], [98, -123], [22, -17], [65, -24], [55, -53], [-97, -59], [-43, -17], [-42, -10], [-26, 5], [-26, 12], [-28, 28], [-24, 30], [-31, 23], [-66, -5], [-61, -20], [-61, -14], [-180, -24], [-55, -15], [-55, -5], [-71, 28], [-70, 39], [-22, 1], [-20, -11], [-17, -24], [-9, -38], [-23, -51], [-29, -36], [-31, -16], [-32, -2], [-33, 10], [-32, 16], [-215, 56], [-25, 17], [-24, 25], [-65, 79], [-32, 19], [-33, 8], [-64, 40], [-59, 64], [-12, 20], [-4, 32], [10, 23], [51, -11], [34, 1], [-21, 119], [15, 112], [25, 19], [97, -13], [-31, 37], [-26, 49], [16, 27], [18, 19], [42, 15], [56, 7], [17, 12], [16, 19], [31, 20], [62, 8], [107, 40], [29, -1], [27, -21], [26, -30], [28, -16], [88, -39], [60, -35], [85, -71]], [[76814, 95782], [22, -9], [-6, -24], [-29, 7], [-38, -12], [1, -20], [-15, -33], [-53, 20], [-73, 3], [-46, 19], [-102, 12], [3, 27], [16, 16], [59, -23], [54, 26], [101, -13], [33, 19], [73, -15]], [[76903, 95736], [-15, -6], [-13, 4], [-4, 7], [1, 29], [25, 38], [1, 12], [12, 6], [31, -7], [15, -16], [2, -7], [-21, -38], [-34, -22]], [[81243, 95979], [43, -39], [8, -25], [-13, -6], [-8, -9], [-3, -18], [-12, -1], [-38, 19], [-27, 31], [-40, 7], [-42, 31], [-9, 13], [11, 4], [75, -8], [32, 14], [23, -13]], [[77107, 95967], [-15, -9], [-29, 4], [-24, 22], [-9, 35], [20, 9], [57, -61]], [[91430, 96001], [-209, -6], [14, 16], [75, 40], [191, 21], [-38, -20], [-18, -41], [-15, -10]], [[68823, 95758], [-111, -44], [-66, -30], [-65, -21], [-66, -15], [-104, -36], [-184, -46], [-116, -37], [-127, -30], [-134, -39], [-134, -27], [-33, -2], [-96, -38], [-75, -16], [-272, -85], [-125, -63], [-36, -5], [-36, 3], [-30, -20], [-28, -33], [-59, -34], [-30, -31], [-30, -24], [-18, -8], [-34, 2], [-16, -2], [-55, -27], [-10, -22], [59, -14], [13, -24], [-17, -16], [-38, -23], [-22, -23], [-40, -23], [-27, -7], [-65, 1], [-4, -29], [11, -18], [-6, -16], [-22, -15], [-21, 2], [-99, 45], [-16, -15], [-7, -32], [-3, -34], [-13, -25], [-17, -13], [-31, -13], [-109, 21], [-9, -20], [17, -25], [23, -54], [5, -22], [-13, -36], [-49, -56], [-187, -67], [3, -23], [21, -44], [5, -27], [-8, -26], [-24, -21], [-28, 0], [-15, 4], [-43, 29], [-37, 7], [-7, -14], [49, -39], [21, -51], [-23, -27], [-90, -61], [-47, -80], [-92, -35], [-57, -5], [-56, 10], [-53, 18], [-135, 7], [-75, 20], [-76, 36], [-66, -3], [-56, -18], [-74, -39], [-47, 75], [20, 35], [-101, 90], [-22, 40], [25, 19], [31, 13], [59, 36], [59, 29], [61, 9], [10, 5], [25, 43], [27, 35], [25, 20], [28, 33], [89, 134], [21, 10], [184, 26], [16, 8], [-53, 27], [-54, -1], [-25, 9], [-14, 19], [-8, 22], [21, 16], [71, 81], [84, 58], [78, 35], [-19, 9], [-25, 23], [-95, -6], [-37, 32], [-12, 19], [-3, 19], [31, 25], [32, 15], [35, -4], [35, -13], [28, -15], [27, -24], [23, 1], [85, 84], [-13, 19], [-5, 29], [9, 14], [41, 13], [27, 5], [59, -6], [85, -18], [7, 9], [21, 56], [21, 30], [86, 50], [-5, 15], [-4, 25], [100, 33], [65, 33], [63, 45], [32, 9], [32, 2], [65, 19], [121, 22], [71, 22], [23, 48], [45, 17], [90, 7], [35, -3], [20, -20], [39, 1], [15, 11], [16, 17], [-5, 29], [-1, 37], [34, 23], [13, 5], [102, 9], [60, -4], [125, -28], [65, -7], [87, 9], [52, -5], [154, 42], [261, 39], [68, 28], [67, 33], [34, 7], [35, 2], [31, 11], [61, 28], [30, 7], [33, 0], [30, 20], [26, 43], [29, 33], [79, 43], [134, 60], [121, 23], [75, 25], [32, 2], [102, -12], [130, -33], [59, -36], [49, -47], [10, -17], [9, -30], [-14, -28], [-9, -28], [11, -22], [-95, -71], [-93, -78], [-16, -17], [-111, -27]], [[76745, 96213], [-9, -11], [-12, -9], [-33, 6], [-65, -16], [-25, 9], [-24, 18], [-88, -6], [-26, 4], [42, 22], [120, 24], [188, 62], [9, -30], [0, -14], [-38, -34], [-39, -25]], [[74864, 96306], [-59, -3], [-34, 15], [-10, 10], [16, 26], [23, 17], [93, 6], [17, -18], [-4, -15], [-42, -38]], [[79837, 96337], [-32, 0], [-9, 27], [27, 33], [34, 0], [29, -10], [10, -5], [10, -12], [4, -18], [-73, -15]], [[63675, 78534], [4, -26], [-34, -5], [-4, -31], [-8, -23], [-75, -51], [-19, 0], [-16, -8], [1, -33], [4, -30], [13, -32], [-6, -14], [-11, -5], [-14, 10], [-14, 17], [-14, 4], [-14, -4], [-64, -91], [-27, -23], [-30, -9], [-61, -34], [-19, 2], [-17, 12], [-15, -17], [-4, -42], [-17, 29], [-18, 23], [-8, 7], [-4, -4], [17, -45], [1, -41], [-4, -23], [-7, -21], [-10, -12], [-11, -7], [-6, -73], [-12, -44], [-15, -40], [-21, -72], [-16, -31], [-13, -37], [-9, -51], [-12, 12], [-10, 22], [-6, -29], [-7, -25], [-32, -37], [-24, -36], [-11, -55], [-2, -33], [3, -30], [9, -17], [46, -20], [29, -25], [28, -47], [30, -40], [21, -51], [15, -64], [19, -123], [9, -129], [28, 161], [24, 29], [-6, -46], [-16, -69], [-17, -101], [-5, -74], [6, -64], [0, -30], [-13, -106], [7, -20], [11, -19], [29, -36], [21, -54], [5, -75], [12, -20], [14, -18], [72, -150], [41, -100], [21, -58], [22, -73], [12, -17], [14, -11], [27, -34]], [[61104, 76854], [-29, 31], [-99, 146], [-52, 98], [-170, 225], [-22, 17], [-90, 33], [-37, 26], [-91, 161], [-41, -22], [-37, 6], [-21, 14], [-24, 23], [-16, 30], [-19, 68], [-22, 38], [-72, 56], [-82, 33], [-6, 14], [-3, 20], [71, 38], [19, 22], [-36, 29], [-14, 5], [-11, 13], [20, 22], [20, 10], [31, -25], [35, -46], [31, -18], [14, 22], [106, 39], [7, 30], [0, 34], [-11, -2], [-6, 8], [0, 38], [16, 51], [48, 84], [25, 116], [23, 27], [16, -18], [-1, -27], [3, -20], [15, 39], [14, 53], [36, 0], [24, -9], [26, 6], [-49, 88], [-66, 87], [-28, -6], [-18, 13], [-29, 73], [-12, 60], [28, -2], [28, -9], [53, 42], [20, 6], [31, -13], [44, -8], [-3, 39], [-14, 47], [53, 34], [47, 19], [91, 68], [40, 12], [5, 15], [1, 20], [-13, 54], [-14, 40], [-48, 2], [-26, -55], [-72, -19], [-33, 4], [26, 36], [25, 13], [8, 15], [-52, -13], [-25, -37], [-76, -48]], [[60614, 78969], [-2, 25], [-1, 23], [5, 22], [13, 14], [4, 13], [0, 10], [-11, 6], [-9, 5], [-2, 14], [3, 13], [9, 18], [3, 20], [1, 41], [8, 45], [22, 30], [40, 7], [36, 25], [22, 28], [28, 70], [22, 11], [44, -4], [28, -6], [64, -2], [75, 4], [21, 2], [12, 25], [-1, 44], [11, 41], [20, 76], [21, 40], [-1, 18], [-11, 8], [-15, 3], [-5, 9], [1, 17], [11, 16], [-2, 34], [-7, 37], [-6, 34], [-20, 17], [-33, 11], [7, 41], [9, 44], [15, 25], [10, 15], [31, -8], [22, 7], [6, 9], [-5, 17], [-34, 15], [-31, 21], [-13, 26], [-6, 28], [21, 16], [36, 16], [24, 38], [26, 41], [11, 29], [5, 32], [0, 36], [-19, 36], [0, 38], [10, 26], [-4, 20], [-14, 11], [-20, -3], [-23, -14], [-26, 3], [-43, 45], [-46, 45], [-26, 1], [-18, 7], [-16, 23], [-9, 29], [-11, 13], [-16, -8], [-25, -13], [-30, 3], [-39, 35], [-36, 39], [-27, 1], [-28, 6], [-53, 51], [-14, -1], [-9, -15], [-4, -41], [-4, -8], [-10, -7], [-18, -5], [-27, 26], [-68, 83], [-28, 61], [-6, 45], [-23, 28], [-21, 40], [-23, 4], [-24, -13], [-23, -20], [-11, -5], [-40, -7], [-64, -27], [-17, -27], [-22, -21], [-16, 15], [-17, 26], [-36, 9], [-18, -9], [-17, 18], [-15, 32], [-20, 24], [-30, 6], [-33, 10], [-26, -18], [-34, -34], [-23, 13], [-13, 41], [-16, 11], [-21, 46], [-6, 41], [6, 18], [8, 23], [0, 27], [-6, 23], [-10, 18], [-10, 60], [-9, 27], [-2, 21], [8, 20], [-7, 13], [-12, 1], [-19, -1], [-11, 10], [-12, 34], [-7, 35], [-8, 13], [-20, -1], [-34, -8], [-30, -11], [-13, 2], [-27, 17], [-35, 20], [-71, 4], [-6, 7], [4, 12], [15, 20], [-2, 16], [-12, 14], [-7, 32], [1, 37], [-2, 40], [-15, 32], [-9, 21], [1, 20], [33, 7], [39, 14], [7, 15], [-2, 22], [-79, 115], [-27, 101], [-26, 55], [-28, 37], [-24, 17], [-34, -7], [-44, 1], [-46, 11], [-39, -7], [-69, -49], [-26, -2], [-44, 15], [-39, 17], [-20, -1], [-12, -7], [-8, -13], [-22, -91], [-18, -18], [-27, -18], [-22, -4], [-19, 1], [-27, 14], [-26, 17], [-5, 1]], [[57781, 86108], [14, 40], [-5, 54], [-9, 44], [12, 33], [21, 3], [22, -36], [34, -18], [25, 24], [8, 46], [18, 20], [24, -18], [40, -7], [33, 3], [22, 10], [10, 15], [9, 27], [18, 34], [19, 23], [145, -26], [126, -47], [9, 18], [5, 30], [-32, 26], [-23, 14], [-29, 54], [-42, 43], [-42, 4], [-55, -15], [-84, 9], [-71, 81], [-47, 25], [-34, 62], [-8, 33], [36, -28], [5, 29], [3, 40], [-20, 24], [-18, 14], [-93, -61], [-106, -20]], [[58574, 92040], [50, -8], [112, -46], [26, 5], [34, 13], [34, 55], [25, 9], [33, -12], [9, 14], [-17, 46], [4, 22], [113, -48], [48, -36], [105, -32], [18, -17], [2, -30], [-5, -25], [-23, -14], [-44, 2], [-161, 39], [-23, -24], [19, -20], [47, -25], [13, -43], [72, 6], [69, -16], [32, 5], [6, -14], [-22, -36], [10, -9], [77, 34], [36, 10], [19, -9], [3, -29], [-13, -36], [-1, -28], [-24, -66], [-36, -21], [-16, -27], [54, 17], [28, 18], [53, 92], [16, 12], [152, 1], [34, -5], [142, -44], [40, -3], [46, 5], [16, 20], [16, 6], [158, -48], [211, -109], [309, -179], [174, -160], [20, -34], [63, -20], [14, 14], [35, -12], [205, -146], [70, -7], [-9, 31], [-12, 29], [18, -7], [24, -21], [38, -57], [48, -42], [48, -64], [41, -24], [36, -9], [30, -18], [56, -17], [26, -155], [20, -34], [0, -68], [36, -28], [27, -5], [-1, -51], [-22, -119], [-24, -51], [-186, -219], [-116, -84], [-226, -97], [-176, -36], [-72, -3], [-138, 18], [-75, 20], [-93, 55], [-86, 27], [-60, 12], [-110, 5], [-239, 54], [-41, 19], [-150, 105], [-60, -30], [-35, -5], [-24, 36], [10, 10], [5, 12], [-85, 30], [-70, 2], [-37, 26], [-46, 19], [-20, -12], [-11, 0], [-92, 46], [-41, 37], [-43, 65], [10, 23], [13, 15], [-148, 38], [-140, 5], [25, -18], [60, -10], [39, -26], [44, -37], [-10, -50], [62, -50], [47, -48], [2, -14], [18, -10], [70, -14], [12, -44], [-11, -17], [9, -25], [53, -27], [31, -7], [38, -17], [-17, -33], [-32, -22], [-33, -10], [16, -8], [41, 3], [152, -55], [80, -56], [81, -102], [26, -50], [2, -28], [-4, -27], [-12, -30], [-5, -31], [-28, -88], [-20, -31], [-38, -35], [36, -68], [37, -63], [37, -105], [7, -42], [1, -65], [33, -26], [-13, -10], [-13, -18], [3, -84], [46, -69], [70, -45], [41, -9], [59, 18], [43, -25], [96, -84], [43, -89], [18, -18], [97, -34], [72, -20], [111, -54], [19, -2], [54, 47], [92, 32], [29, 44], [-3, 37], [-23, 67], [-7, 65], [-31, 27], [-28, 18], [-86, -14], [-39, 3], [-30, 17], [-40, 47], [-75, 113], [-40, 37], [-13, 24], [-14, 32], [2, 53], [33, -2], [37, 30], [27, 106], [46, 14], [25, -1], [108, -50], [134, -132], [29, -14], [31, -2], [51, 4], [9, -18], [27, -20], [20, -3], [123, -42], [142, -82], [53, 3], [21, 46], [4, 20], [59, 46], [40, 8], [57, -17], [10, 13], [-19, 68], [-26, 59], [-39, 37], [-68, 111], [-28, 54], [-13, 57], [9, 50], [10, 36], [142, 89], [51, 53], [50, 69], [23, 14], [83, 19], [111, 59], [85, 78], [84, 119], [36, 31], [28, -2], [38, -19], [42, -35], [57, -6], [55, 5], [64, -3], [88, -54], [14, -17], [14, -23], [-28, -45], [-3, -29], [23, 14], [32, 6], [29, -9], [28, -25], [20, -28], [25, -24], [7, 32], [4, 28], [-13, 70], [34, 99], [26, 43], [48, 110], [-14, 71], [-2, 82], [-7, 38], [-31, 55], [-61, 39], [-61, 13], [-20, 38], [4, 43], [17, 63], [50, 133], [52, 188], [2, 43], [-5, 24], [4, 24], [-7, 57], [-9, 42], [-213, 163], [-13, 15], [-7, 22], [23, 5], [16, -1], [160, -76], [35, -4], [251, 21], [123, -18], [103, -39], [74, -108], [76, -99], [70, -86], [2, -70], [-73, -14], [-70, -4], [-180, -35], [-43, -39], [-120, -122], [-11, -37], [11, -36], [55, -38], [118, -57], [52, -113], [37, -57], [28, -22], [27, -5], [60, -1], [42, -13], [12, -11], [17, 11], [38, 4], [224, 60], [44, 26], [15, 40], [16, 133], [20, 46], [19, 57], [-7, 35], [-2, 40], [112, 38], [104, 26], [50, -8], [13, 28], [-32, 55], [-19, 28], [16, 12], [24, -15], [32, -9], [56, 9], [215, 113], [84, 63], [50, 25], [80, 57], [38, 19], [67, 7], [71, 23], [78, 42], [105, 36], [17, 2], [21, -5], [43, -42], [-16, -24], [-12, -25], [21, -14], [17, -6], [21, 7], [22, 17], [54, 26], [15, 33], [-21, 13], [-27, 49], [-32, 11], [-26, -2], [95, 71], [202, 105], [108, 48], [107, 4], [85, -6], [-32, -16], [-140, -22], [-21, -11], [0, -13], [34, -8], [14, -16], [-11, -18], [-11, -6], [-16, -54], [-21, -43], [44, -56], [4, -58], [-28, -31], [-39, 12], [-34, -20], [-62, -14], [-14, -18], [-9, -26], [40, -6], [31, 2], [110, -17], [15, -2], [37, 18], [37, 4], [45, 6], [23, 11], [23, -13], [44, -51], [40, 10], [17, 99], [63, 62], [74, 50], [72, 5], [69, 35], [33, 7], [64, -14], [96, -3], [81, -30], [60, -8], [88, 51], [203, 143], [17, -33], [33, 48], [157, 50], [38, 2], [1, -20], [14, -44], [30, -27], [42, -64], [-20, -17], [-21, -10], [-31, -43], [-3, -99], [59, -25], [81, -29], [34, 1], [28, 16], [9, 9], [10, 15], [8, 29], [5, 22], [-21, 55], [8, 58], [74, -4], [91, 17], [41, 33], [49, 63], [33, 52], [-21, 92], [-53, -20], [-91, 199], [-47, 77], [30, 36], [78, 23], [71, 74], [27, 15], [29, 3], [210, -51], [239, -12], [203, -39], [230, -81], [112, -57], [93, -63], [-9, -45], [38, 13], [82, -40], [56, -16], [57, -24], [22, -32], [75, -23], [78, -43], [14, -8], [95, -32], [68, -11], [41, -69], [136, -100], [25, -38], [119, -63], [59, -52], [37, 20], [91, 126], [54, 144], [32, 77], [-60, 3], [-45, -22], [-29, 5], [-32, 23], [-52, 58], [-66, 97], [-13, 106], [-18, 35], [-64, 28], [-42, 32], [-156, 63], [-28, -22], [-8, -34], [-10, -25], [-16, 32], [-10, 29], [0, 46], [8, 59], [26, 99], [40, -5], [21, 15], [26, 44], [-12, 37], [-14, 28], [3, 43], [25, 118], [11, 138], [-21, 34], [-19, 23], [-89, -24], [-33, 13], [-8, 26], [-2, 21], [25, 35], [25, 59], [-43, -13], [-15, 23], [36, 34], [42, 82], [99, 38], [74, 37], [116, 78], [86, 77], [56, 98], [38, 93], [62, 218], [58, 160], [98, 165], [61, 15], [23, -3], [4, -12], [-14, -14], [-4, -20], [26, -7], [42, -1], [79, 10], [134, -6], [234, 14], [33, -7], [87, -48], [47, 6], [96, -23], [52, -26], [50, -31], [-7, -120], [-10, -80], [-35, -152], [-14, -39], [-56, -110], [-26, -72], [-42, -50], [-60, -35], [-8, -21], [-5, -31], [59, -87], [140, -90], [34, -108], [8, -81], [-9, -210], [-13, -31], [-26, -34], [-25, -40], [16, -59], [20, -219], [4, -178], [-16, -61], [-8, -129], [0, -43], [14, -64], [28, -54], [37, -34], [105, -63], [99, -76], [7, -24], [5, -29], [-35, -30], [-55, -78], [-35, -65], [-3, -53], [12, -67], [-6, -63], [-23, -56], [-33, -41], [-99, -63], [-207, -334], [-50, -39], [-84, 13], [23, -48], [29, -68], [-4, -45], [-54, 3], [-77, -48], [-35, -32], [-60, -17], [-45, 17], [-50, 31], [7, 26], [10, 12], [35, 19], [34, 25], [-17, 5], [-14, 0], [-38, -32], [-45, -7], [-52, 40], [-41, 43], [-19, 9], [-38, -18], [-146, 8], [-38, -7], [-18, -16], [10, -13], [11, -24], [15, -48], [14, -36], [60, -39], [81, -15], [78, -48], [99, -34], [224, 14], [59, -4], [58, -15], [97, -50], [42, 4], [71, 45], [17, 101], [9, 31], [257, 142], [48, 31], [77, 77], [25, 52], [29, 140], [25, 50], [167, 161], [26, 41], [5, 76], [-3, 51], [-10, 50], [-30, 84], [-34, 49], [-33, 67], [24, 138], [28, 53], [151, 63], [129, 23], [144, 43], [58, 9], [40, -7], [41, -47], [36, -69], [104, -105], [35, -72], [7, -89], [-4, -216], [-20, -94], [41, -24], [20, -22], [51, -31], [27, -31], [27, -11], [59, -7], [168, 11], [92, 6], [-9, 14], [-14, 11], [-78, 4], [-110, 23], [-159, 42], [-19, 91], [4, 56], [36, 106], [25, 18], [31, 7], [36, 15], [-11, 67], [-14, 61], [-34, 85], [-37, 157], [-51, 1], [-39, 31], [-189, 92], [-179, 68], [-123, 9], [-39, -7], [-102, -71], [-66, -15], [-125, 31], [-107, -17], [-40, 17], [-16, 31], [32, 127], [-17, 49], [-47, 66], [-28, 51], [5, 56], [70, 214], [29, 56], [75, 100], [38, 76], [-9, 44], [-161, 239], [-43, 85], [-19, 27], [-39, 32], [-60, 38], [-18, 34], [163, 231], [74, 40], [103, 25], [50, 22], [87, 47], [52, 39], [17, 31], [11, 37], [2, 91], [-11, 73], [-14, 41], [-31, 52], [-31, 59], [22, 15], [22, 9], [58, -1], [60, -32], [30, -64], [35, -60], [0, -40], [-3, -31], [15, -44], [13, -18], [14, -31], [-13, -25], [-14, -12], [-27, -35], [-43, -108], [-33, -14], [-8, -84], [71, -92], [-9, -69], [-14, -23], [-39, -37], [5, -30], [10, -21], [111, -44], [105, -27], [176, -9], [51, -43], [19, 30], [165, -7], [133, -105], [70, -32], [57, -11], [116, 13], [20, 9], [19, 30], [-54, -2], [-24, -14], [-22, 1], [-38, 11], [-27, 18], [-29, 35], [-48, 104], [-84, 33], [-57, -14], [-62, 7], [-102, 56], [-68, 21], [-121, 61], [-34, 25], [-27, 51], [-31, 84], [-20, 47], [26, 9], [83, 46], [124, 15], [53, -16], [136, -94], [63, -3], [114, 41], [13, 26], [-26, 53], [-34, 27], [-66, 13], [-80, -24], [-23, 20], [8, 28], [9, 21], [43, 5], [30, 16], [65, 58], [72, 28], [71, 10], [261, -8], [148, -91], [144, -41], [63, -31], [17, -5], [15, -21], [11, -48], [182, -129], [42, -17], [116, -6], [130, 30], [59, 3], [63, -9], [33, -16], [36, -30], [-19, -38], [-17, -23], [-36, -64], [-16, -18], [-118, -73], [-47, -19], [-13, -96], [-6, -21], [-5, -34], [22, -68], [5, -42], [-18, -58], [-30, -62], [6, -50], [10, -67], [5, 20], [-2, 30], [8, 35], [54, 85], [39, 115], [40, 30], [36, 7], [40, -34], [11, -46], [2, -70], [-8, -65], [-30, -100], [-50, -70], [-16, -39], [23, -37], [25, -29], [29, -9], [33, 3], [8, 9], [6, 28], [-10, 36], [-6, 33], [61, 25], [57, 14], [45, 42], [11, 28], [10, 46], [-23, 72], [-20, 54], [-68, 129], [-51, 66], [32, 99], [53, 110], [20, 27], [6, 17], [6, 30], [-5, 31], [-6, 20], [-54, 83], [-39, 27], [-123, 16], [-31, 13], [-90, 85], [-11, 19], [-20, 61], [-7, 15], [-25, 16], [-83, 35], [-58, 15], [-84, 4], [-51, 18], [-76, 56], [-8, 19], [-22, 73], [-17, 37], [5, 28], [27, 58], [19, 51], [-23, 44], [-33, 14], [-36, 21], [-15, 40], [-9, 43], [-1, 34], [-6, 39], [17, 33], [38, 34], [-9, 24], [5, 31], [247, 41], [96, 11], [480, 4], [34, 12], [209, 20], [89, 24], [94, -25], [34, 1], [69, 7], [45, 51], [102, 20], [170, 21], [84, -4], [19, -15], [19, -21], [-92, -62], [-92, -56], [-76, -24], [-74, -49], [-7, -19], [-2, -12], [2, -39], [5, -25], [77, -32], [59, -44], [57, -32], [45, -19], [11, 11], [-165, 104], [-42, 23], [-17, 25], [8, 38], [17, 17], [26, 19], [17, 9], [62, 20], [206, 27], [49, 51], [21, 30], [56, 31], [-19, 13], [-46, 8], [-36, 18], [-142, 183], [-35, 28], [-109, 20], [-49, 21], [50, 62], [59, 16], [40, -4], [35, -17], [65, -51], [92, 22], [-35, 23], [-58, 26], [-54, 42], [-77, 37], [-86, 24], [-90, 10], [25, 55], [50, -7], [16, 17], [23, 33], [125, -77], [59, 21], [50, 35], [104, 93], [14, 42], [-50, 23], [-41, 11], [-56, -2], [-5, 25], [24, 33], [45, 13], [139, -36], [232, 93], [63, 45], [161, 58], [79, -7], [164, 77], [227, 33], [132, 1], [102, 42], [156, 15], [54, 17], [263, 43], [146, 34], [23, 27], [-131, -22], [-31, 20], [-27, -13], [-20, -19], [-63, 34], [-17, -9], [-13, -18], [-23, -6], [-27, 4], [-9, 41], [32, 55], [37, -29], [43, 42], [27, 1], [81, -26], [54, 27], [72, 13], [79, -12], [33, 3], [19, 25], [129, -22], [89, 15], [61, -2], [95, -13], [43, -18], [-25, -42], [-92, -68], [25, -11], [53, 31], [159, 46], [26, -9], [-18, -40], [-11, -17], [106, 23], [91, 50], [40, 9], [41, -31], [39, 28], [9, 28], [69, 6], [28, 26], [49, 19], [40, 8], [89, 36], [31, -11], [59, -9], [56, -17], [105, -40], [14, -15], [13, -3], [30, -28], [-22, -42], [-24, -60], [-45, -28], [27, -3], [19, 8], [36, 40], [32, 28], [-8, 119], [-57, 60], [-44, 20], [-102, 63], [-34, 27], [-46, 28], [18, 17], [196, -22], [100, 11], [108, -7], [144, 27], [61, -28], [69, 1], [80, -23], [24, 27], [-131, 29], [-58, -3], [-21, 15], [22, 34], [25, 51], [-25, 44], [-24, 24], [-4, 45], [23, 52], [54, 22], [30, 42], [63, 55], [303, 179], [145, 68], [55, 9], [64, -6], [126, 57], [47, 0], [175, -45], [42, -33], [96, -26], [111, -14], [51, -21], [25, -24], [21, -33], [-90, -22], [-97, -66], [-132, -36], [-163, -24], [-34, -18], [311, -5], [90, 4], [19, -57], [30, -2], [90, 27], [54, 2], [102, -20], [21, 11], [44, 1], [94, -25], [42, -37], [-67, -60], [-69, -53], [-84, -90], [-26, 7], [-44, 2], [8, -45], [74, 2], [40, -20], [92, 25], [130, -8], [27, 7], [50, 28], [13, 52], [22, 33], [43, 11], [47, -10], [80, 0], [203, 17], [170, -22], [136, 27], [178, -20], [78, -21], [57, -37], [52, -11], [42, -29], [43, -42], [-21, -34], [-21, -23], [56, 25], [43, 6], [32, -15], [57, -15], [18, -95], [17, -18], [15, -33], [-21, -30], [-18, -14], [45, 3], [63, 32], [13, 11], [16, 24], [-24, 23], [-21, 14], [27, 11], [52, -4], [26, -42], [17, -38], [38, -127], [81, 17], [4, -38], [-34, -87], [-36, -64], [-14, -14], [-23, -3], [9, 34], [-14, 20], [-21, 12], [-74, 12], [-138, 79], [-37, 8], [-8, -4], [-4, -7], [77, -54], [63, -95], [57, 28], [23, -5], [31, -45], [56, -18], [47, -30], [-31, -91], [-192, -160], [-203, -93], [-90, -65], [-158, -47], [-113, -64], [-144, -47], [-42, -51], [-107, -32], [8, -17], [12, -18], [-13, -30], [-15, -23], [-83, -47], [-121, -32], [-243, -195], [-121, -40], [-137, -2], [-29, -18], [-104, -123], [-32, -26], [-136, -13], [-142, -201], [-79, -68], [-69, -37], [72, 7], [85, 27], [99, 65], [26, 30], [14, 34], [29, 27], [45, 19], [176, 21], [72, -8], [106, 6], [70, 36], [41, 13], [37, 4], [19, 26], [62, 5], [143, 34], [21, 12], [46, 51], [85, -19], [61, 10], [159, 91], [96, 34], [26, 24], [-19, 17], [-22, 12], [-92, -32], [-83, -10], [-94, 8], [-13, 13], [-11, 32], [30, 47], [26, 28], [60, 37], [49, 13], [183, -40], [38, -5], [21, 66], [58, -3], [58, -11], [-25, -14], [-64, -21], [20, -48], [28, -33], [112, -47], [95, -21], [70, 1], [110, 20], [17, 14], [23, 38], [-28, 72], [27, -9], [27, -18], [42, -44], [40, -75], [25, -35], [-15, -37], [-57, -71], [33, -39], [59, -26], [0, -116], [-4, -56], [-29, -61], [-34, -26], [-33, -38], [8, -36], [8, -22], [35, -42], [98, -13], [13, 11], [-23, 13], [-66, 20], [-26, 16], [-23, 38], [27, 42], [29, 31], [35, 71], [11, 50], [-7, 52], [23, 24], [35, 25], [17, 5], [16, 11], [-25, 13], [-23, 6], [-48, 32], [-8, 41], [96, 17], [57, 29], [210, 13], [144, 55], [322, -15], [226, -45], [317, -5], [117, -30], [11, -11], [7, -22], [-50, -9], [-83, 0], [-22, -56], [14, -70], [148, -74], [129, -31], [90, -49], [48, -4], [188, 5], [110, -25], [100, 19], [109, 0], [38, -5], [40, -37], [64, -10], [77, -1], [43, 7], [17, 9], [-6, 15], [-64, 22], [7, 27], [25, 6], [107, -36], [44, -6], [39, 27], [29, 49], [16, 33], [17, 17], [14, 2], [14, 10], [-34, 39], [-33, 49], [-7, 32], [-10, 16], [-4, 59], [30, 60], [21, 17], [85, -23], [38, 36], [24, 14], [102, 24], [43, -2], [71, -23], [228, -110], [-5, -42], [54, 12], [26, 17], [61, 11], [41, 18], [11, -7], [14, -17], [-10, -25], [-14, -25], [9, -15], [12, -3], [61, -31], [79, 57], [32, 55], [22, 11], [197, -38], [59, -21], [12, -12], [8, -20], [32, -22], [39, -12], [-5, -18], [-2, -19], [92, -3], [40, -16], [44, -25], [-5, -29], [11, -17], [41, -2], [11, 3], [-13, -39], [-55, -42], [-33, -16], [-38, -28], [21, -5], [95, -8], [59, -56], [6, -41], [-37, -16], [-84, -52], [-50, -21], [-35, -2], [-25, -7], [36, -22], [158, -6], [46, -28], [36, -70], [0, -86], [-36, -43], [-97, -7], [-127, 96], [-78, 37], [-109, 71], [-21, -12], [32, -60], [51, -34], [92, -93], [154, -192], [36, 16], [21, 24], [10, 31], [-9, 43], [25, -21], [23, -38], [46, -64], [-62, 3], [-80, -21], [-29, -26], [22, -35], [59, -5], [25, -49], [46, -60], [103, -164], [73, -31], [71, -68], [71, -32], [37, -2], [25, 42], [20, -15], [19, -76], [34, -33], [38, -2], [31, 13], [45, 36], [36, 42], [58, 116], [38, 58], [36, 24], [-13, 28], [4, 33], [26, 77], [36, 91], [27, 49], [66, 97], [25, 18], [18, -32], [14, -42], [10, -18], [10, -7], [81, -85], [82, -67], [73, -33], [115, -32], [167, 5], [30, 42], [58, 32], [94, 16], [55, 39], [91, 11], [57, -6], [88, -28], [197, -89], [55, -33], [29, -35], [64, -52], [41, -25], [40, -18], [14, 5], [-5, 15], [-20, 15], [-16, 19], [47, 19], [5, 15], [17, 12], [62, 11], [-61, 19], [-20, 3], [-29, 11], [2, 27], [19, 19], [15, 36], [19, 23], [32, 18], [24, 3], [57, -23], [41, 42], [30, -3], [63, -43], [56, -64], [31, 0], [87, 26], [98, 1], [-13, 38], [-68, 83], [8, 106], [-47, 24], [-54, 14], [78, 27], [58, 87], [46, 8], [48, 16], [-15, 11], [-143, 9], [-31, -10], [-21, -26], [-71, 0], [-8, 59], [-2, 37], [93, 79], [35, 17], [236, -2], [71, 15], [104, 39], [-27, 25], [-3, 50], [-89, 73], [7, 16], [9, 11], [27, 0], [140, -19], [58, -39], [151, -40], [404, -13], [45, -14], [174, -17], [73, -19], [175, -23], [80, -17], [63, -25], [103, -15], [47, -17], [-5, -53], [-213, 7], [-71, 17], [-88, 2], [-33, -8], [-53, -44], [-63, -23], [-53, -4], [35, -38], [49, -10], [158, 49], [432, 24], [66, -4], [-7, -34], [-58, -65], [-55, -50], [-80, -52], [-30, 0], [63, 110], [-26, 6], [-24, -3], [-70, 46], [-11, 2], [-14, -11], [0, -16], [-13, -64], [26, -27], [0, -46], [-97, -29], [-38, 3], [-40, 18], [-17, 0], [-5, -15], [8, -27], [-1, -13], [-15, -22], [-8, -23], [24, -26], [31, -7], [171, 29], [75, 36], [82, 65], [146, 159], [65, 54], [37, 21], [48, 8], [269, -17], [156, -34], [149, -51], [74, -42], [54, -57], [10, -24], [5, -32], [-37, -30], [-167, -10], [-64, -17], [-24, -19], [-3, -11], [-8, -17], [12, -14], [75, -2], [72, -13], [100, -36], [15, -12], [32, -35], [10, -6], [149, 6], [10, -12], [9, -26], [-39, -40], [-39, -27], [-80, -64], [40, 23], [161, 55], [41, 10], [49, -4], [121, -50], [50, -39], [92, -112], [-26, -12], [-66, -12], [208, -85], [80, 1], [184, 24], [93, 1], [172, 54], [171, 35], [157, 2], [83, 33], [220, -1], [211, -11], [164, -20], [185, -60], [180, -83], [105, -82], [21, -25], [30, -57], [13, -48], [13, -65], [-6, -51], [-26, -36], [-16, -45], [2, -53], [-31, -69], [29, -49], [80, -32], [172, -42], [47, -29], [6, -85], [14, -71], [15, -136], [29, -35], [47, -32], [9, -45], [-59, -144], [-37, -27], [-39, -40], [69, 14], [35, 53], [38, 97], [36, 16], [19, 31], [0, 92], [-23, 79], [0, 57], [15, 46], [114, 95], [61, 38], [58, 22], [158, 19], [72, 19], [82, -13], [58, 5], [67, 20], [59, -10], [98, -63], [347, -14], [61, -22], [233, -27], [18, 0], [52, 31], [154, 108], [64, -7], [26, -17], [27, -43], [28, -27], [23, -75], [20, -102], [33, -18], [46, -6], [100, -38], [101, -48], [29, -92], [54, -77], [126, 7], [132, 16], [127, 126], [0, 52], [-31, 74], [-47, 72], [-37, 112], [-117, 25], [11, 33], [44, 39], [40, 61], [6, 46], [-11, 98], [106, -7], [106, -11], [201, -44], [163, -18], [86, -28], [52, -32], [62, -23], [21, 57], [23, 14], [82, -33], [60, -9], [103, 4], [130, -15], [141, 3], [127, 25], [47, -5], [52, -20], [84, -53], [143, -71], [130, -20], [150, -66], [141, -25], [113, -38], [16, -14], [5, -21], [8, -18], [89, -20], [165, -143], [-99962, -16], [56, -25], [56, -20], [23, 6], [12, -2], [32, -35], [21, -16], [113, -41], [51, -45], [42, -52], [-21, 10], [-38, 34], [4, -39], [12, -27], [61, -26], [64, -20], [40, -24], [14, -21], [8, -38], [-10, -33], [37, 12], [35, 30], [-18, 23], [-117, 81], [-25, 27], [34, -14], [158, -103], [43, -39], [-18, -8], [-13, -23], [14, -10], [19, 8], [31, 4], [31, -13], [35, -27], [73, -32], [434, -254], [10, -44], [12, -21], [7, -26], [2, -43], [-39, -51], [61, 5], [9, 6], [16, 21], [17, 14], [24, -17], [19, -34], [-6, -46], [-17, -38], [-2, -63], [15, -54], [15, -22], [13, -26], [3, -76], [-27, -34], [-15, -59], [17, -6], [52, -5], [18, -11], [30, -27], [7, -26], [7, -36], [9, -34], [7, -16], [8, 3], [30, 46], [14, 14], [34, 12], [19, -53], [-13, -88], [11, 0], [8, 10], [11, 23], [15, 14], [19, 32], [16, 39], [-19, 31], [-21, 20], [-51, 10], [-26, 24], [-10, 29], [26, 12], [22, 21], [15, 52], [-4, 28], [-6, 27], [-12, 39], [-19, 23], [-36, 11], [-16, 22], [-25, -1], [-25, 6], [-9, 8], [1, 16], [28, 7], [157, 2], [57, 22], [25, -6], [26, -16], [94, -21], [-3, -10], [-16, -10], [-27, -46], [-6, -26], [-1, -34], [24, -6], [24, 14], [-12, 27], [-3, 33], [10, 14], [13, 3], [24, -24], [27, -8], [89, -10], [26, 3], [8, 13], [-18, 14], [-116, 33], [-2, 17], [108, -22], [48, -20], [48, -15], [67, 5], [66, -24], [63, -65], [58, -82], [59, -49], [61, -36], [103, -99], [13, -8], [10, -14], [-19, -16], [-17, -25], [34, 17], [33, 12], [17, -3], [15, -12], [10, -21], [5, -20], [-14, -18], [99, -4], [30, -12], [14, -49], [-28, -34], [-17, 5], [-16, 14], [-15, 1], [-44, -14], [-67, -46], [-38, -37], [-7, -24], [6, -65], [-5, -31], [-29, -20], [-64, 12], [-29, 13], [-33, 17], [-31, 24], [-41, 39], [-12, 4], [-8, -10], [13, -24], [28, -31], [47, -40], [22, -45], [-14, -23], [-18, -5], [-13, 1], [-41, 14], [-29, 3], [-90, -13], [-32, -8], [-11, 7], [-3, 19], [-48, 15], [-29, 2], [-13, 6], [-11, 21], [-32, 30], [-48, 11], [-31, 2], [-17, -7], [63, -39], [56, -67], [-11, -13], [-7, -14], [31, -1], [21, 4], [5, -17], [-16, -71], [-11, -15], [-98, -16], [25, -12], [25, -3], [29, 3], [26, -13], [17, -44], [3, -46], [-25, -27], [-27, -21], [-53, -33], [-56, -14], [-29, 3], [-28, -7], [-19, -17], [-5, -17], [24, 11], [28, -6], [27, -21], [-3, -17], [-26, -18], [-5, -14], [9, -24], [-3, -20], [13, -11], [30, -4], [36, -14], [36, -20], [14, -16], [12, -24], [4, -24], [-6, -11], [-82, -4], [-12, 3], [-5, 28], [-10, 22], [-31, 16], [-12, -11], [9, -79], [-12, -24], [-14, -18], [-41, -10], [-33, 6], [-28, 37], [0, 32], [19, 19], [0, 26], [-6, 30], [-18, -35], [-23, -29], [-35, -37], [-18, -4], [-17, 4], [-47, 26], [-29, 23], [-56, 74], [-32, 34], [-70, 46], [-72, 34], [-57, 22], [-31, -3], [-30, -9], [-39, 5], [-13, 8], [-11, 19], [-11, 10], [-54, 46], [-38, 37], [-2, 25], [8, 30], [-7, 73], [-18, 69], [-48, 68], [-126, 44], [-104, 31], [-37, 7], [-33, -6], [-87, -57], [-59, -8], [-170, -3], [-28, 6], [-26, 24], [-6, 33], [8, 59], [-1, 25], [-7, 9], [-9, -1], [-33, 24], [-31, 40], [-25, 41], [-16, 56], [22, 3], [31, -14], [5, 13], [10, 51], [21, 24], [9, 18], [14, 68], [2, 49], [-24, -26], [-39, -68], [-18, -20], [-14, -9], [-13, -4], [-30, 13], [-22, 17], [-1, 65], [-10, 17], [-10, -12], [-4, -24], [-28, -4], [-13, -10], [7, -39], [-3, -33], [-27, -13], [-53, -7], [-19, 32], [-16, -45], [-12, -51], [-2, -67], [17, -56], [25, -27], [53, -40], [23, -28], [6, -37], [-2, -33], [-28, -42], [-18, -34], [-33, -81], [-19, -33], [-82, -69], [99951, -19], [-49, -66], [-56, -57], [-83, -23], [-126, -87], [-49, -16], [-65, 40], [-149, 26], [-47, 35], [-68, 88], [-23, 13], [-21, 35], [-82, 39], [-72, -25], [-58, 19], [-20, -14], [30, -12], [54, -11], [82, 5], [27, -9], [24, -31], [28, -49], [-21, -32], [-22, -11], [-66, 36], [-76, -5], [-36, 9], [-102, 60], [-78, -67], [-107, -35], [-83, -4], [-152, -53], [41, -2], [111, 38], [65, 0], [96, 21], [51, 24], [24, 23], [31, 23], [31, -11], [22, -24], [14, -35], [14, -45], [-18, -24], [-18, -12], [-22, -33], [102, 56], [62, -33], [31, 5], [58, 49], [93, 32], [11, -6], [11, -16], [-15, -94], [6, -74], [71, -81], [73, -47], [26, -2], [24, 9], [9, 43], [18, 32], [23, -29], [19, -31], [27, -76], [-1, -23], [-6, -45], [23, -20], [32, -6], [12, -71], [11, -101], [-14, -9], [-16, 0], [-51, -26], [7, -18], [52, -10], [15, -21], [-11, -47], [3, -21], [18, -5], [12, 28], [-3, 39], [5, 17], [35, -81], [0, -31], [30, -36], [85, -54], [15, -24], [5, -40], [-21, -12], [-20, -28], [12, -40], [22, -32], [36, -12], [17, -52], [0, -49], [-26, -43], [-53, -59], [-31, -24], [-12, -42], [-3, -44], [-21, 2], [-23, 19], [-262, 110], [-99, 21], [-87, 2], [-16, 7], [1, 26], [5, 24], [13, 29], [-6, 26], [-11, 2], [-11, -20], [-24, 0], [-23, 23], [-19, -7], [-9, -32], [-7, -17], [0, -20], [12, -18], [50, -20], [-8, -18], [-70, -14], [-57, -18], [-74, -54], [-30, -38], [-198, -93], [-48, -32], [-21, -4], [-27, -11], [-21, -39], [-110, -55], [-23, 5], [-29, -46], [-27, -26], [-63, -3], [-41, -13], [-88, -67], [-55, 21], [-65, -91], [-72, -87], [-21, 0], [-55, 36], [-14, -19], [9, -35], [19, -37], [-11, -10], [-22, 10], [-16, 2], [-12, -11], [2, -27], [-31, -33], [-24, -3], [-28, -11], [-10, -29], [9, -32], [-50, -36], [-41, -48], [-19, -8], [-22, -21], [-24, -16], [-28, 3], [-67, -67], [-150, -117], [-42, -15], [-53, -36], [-5, -23], [0, -30], [-21, -48], [-25, -122], [-8, -22], [-12, -25], [-55, 12], [-48, 46], [-15, 22], [-8, 25], [-3, 40], [-9, 19], [-11, 9], [-55, 99], [-95, 68], [-14, 23], [-121, -18], [-33, -1], [-58, 17], [-90, -11], [-109, -37], [-33, -23], [-111, -36], [-73, -57], [-142, -208], [-34, -43], [-16, -9], [-24, -4], [-10, 42], [-4, 33], [9, 63], [17, 52], [17, 96], [5, 39], [12, 41], [-48, -3], [-66, -71], [-100, -69], [-46, -18], [-36, -41], [-26, -5], [-30, -15], [-3, -89], [-15, -48], [-18, -10], [-28, -2], [-21, 19], [-30, 71], [-40, 37], [-24, 7], [-18, -9], [-35, -48], [-38, -44], [6, 50], [-33, 19], [-29, 11], [-36, 2], [-11, -7], [-14, -29], [-33, -37], [-22, -15], [-23, -30], [-13, -31], [-12, -44], [-14, -107], [1, -125], [-53, -99], [-20, 10], [-10, -6], [-10, -13], [18, -55], [-10, -19], [-9, -13], [-25, -14], [-56, -81], [-53, -52], [-87, -151], [-25, -100], [-25, -113], [12, -55], [10, -36], [16, -25], [28, -27], [59, -29], [-5, -19], [0, -16], [21, 28], [15, 79], [37, 26], [18, -1], [118, -63], [23, -27], [-4, -60], [-7, -28], [-22, -42], [-42, -50], [-49, -69], [-5, -43], [0, -23], [13, -81], [1, -46], [-6, -85], [3, -37], [13, -31], [20, -20], [35, 11], [33, -9], [25, -22], [-4, -71], [15, -67], [11, -124], [-21, -34], [-20, -21], [-39, -54], [-21, -6], [-37, 18], [-58, 96], [23, 57], [50, 40], [23, 28], [17, 42], [-26, -8], [-18, -18], [-57, 8], [-23, -20], [-28, -32], [11, -80], [-19, -15], [-35, -27], [-52, -34], [-17, -23], [-45, -143], [-41, -107], [-15, -92], [2, -79], [15, -88], [11, -38], [48, -82], [23, -64], [7, -77], [-38, -37], [-67, -89], [-28, -10], [-92, 2], [-46, 45], [-54, -11], [-45, -22], [-71, -63], [-63, -82], [-60, -57], [-18, -34], [-24, -71], [-22, -129], [8, -64], [12, -30], [11, -39], [-16, -61], [0, -38], [29, -61], [6, -84], [-21, -2], [-49, 60], [-52, 4], [-124, -69], [-52, -40], [-57, -80], [-17, 15], [-12, 46], [-21, 20], [-26, -10], [-11, -43], [36, -20], [13, -28], [-21, -107], [-15, -36], [6, -95], [-2, -45], [-8, -45], [-37, -123], [-63, -162], [-78, -118], [-54, -41], [-27, -31], [-12, -41], [-80, -113], [-98, -119], [-28, -21], [-6, 45], [-3, 44], [-12, 59], [-36, 49], [-6, 40], [-6, 54], [-3, 252], [-31, 262], [-3, 82], [-38, 67], [-21, 70], [-12, 68], [-3, 81], [-41, 425], [-13, 106], [-55, 342], [-24, 198], [-16, 192], [-2, 86], [24, 257], [21, 160], [74, 359], [11, 33], [12, 17], [128, 138], [56, 75], [33, 80], [36, 101], [-4, 55], [-4, 31], [-14, 36], [-30, 41], [11, 18], [12, 14], [31, 15], [64, -31], [65, 13], [60, 127], [86, -19], [65, 22], [18, -9], [13, 43], [36, 46], [66, 68], [97, 82], [48, 55], [27, 52], [40, 50], [39, 62], [71, 186], [140, 154], [55, 88], [45, 31], [40, 15], [101, 126], [64, 105], [85, 72], [25, 46], [44, 108], [18, 26], [55, 41], [124, 71], [72, 71], [106, 10], [31, 28], [33, 16], [35, 23], [-43, 63], [10, 33], [8, 16], [76, 74], [31, 60], [-4, 25], [-5, 19], [-47, 24], [9, 55], [13, 48], [38, 40], [13, 94], [2, 99], [37, 142], [22, 32], [87, 71], [20, 2], [60, -24], [66, -12], [23, -22], [5, 19], [-3, 24], [18, 9], [38, -10], [-5, 27], [-98, 14], [-70, 31], [-63, 60], [-41, 17], [-45, -5], [-257, -84], [-12, -23], [-12, -32], [16, -47], [-13, -21], [-12, -14], [-14, -31], [-12, -61], [3, -59], [-31, -92], [-3, -57], [55, -32], [14, -21], [-16, -32], [-17, -19], [-14, -24], [-11, -9], [-15, -6], [-20, 31], [-18, 62], [-29, 4], [-10, -10], [-5, -24], [-25, -2], [-28, 12], [-32, -5], [-57, -70], [-319, -333], [-34, -40], [-42, -80], [-79, -8], [-31, -18], [-23, -24], [-31, -16], [1, 30], [6, 22], [7, 59], [43, 111], [-27, 12], [-27, 1], [-50, -23], [-34, -37], [-26, 8], [13, 33], [31, 66], [-9, 61], [-9, 33], [13, 18], [65, 123], [23, 64], [20, 84], [1, 26], [-4, 32], [-19, 5], [-16, 0], [-128, -83], [-47, -23], [-15, 36], [-21, 15], [-35, 61], [-30, 9], [-31, -4], [-70, -41], [-77, -23], [-59, 8], [-51, -35], [-23, -6], [-75, 24], [-91, 2], [-28, -30], [-79, -41], [-54, -64], [-28, -20], [-31, -28], [-14, -120], [-41, -39], [-38, -29], [-80, -92], [-56, -126], [-38, -54], [-81, -76], [-126, -100], [-110, -162], [-38, -122], [-14, -4], [-27, -25], [-7, -60], [1, -41], [-17, -33], [-17, -42], [18, -26], [16, -5], [24, 4], [63, 34], [108, -52], [54, -52], [-4, -52], [2, -46], [-40, 3], [-53, -4], [-34, -27], [-68, 43], [-23, -16], [-36, -46], [-65, -19], [-33, 23], [-55, 63], [-93, -6], [-24, -71], [-21, 2], [-33, -7], [-55, -82], [-18, -8], [-67, 16], [-48, 42], [-23, 2], [-43, -19], [-21, -50], [-107, -25], [-105, 5], [-57, 119], [107, 47], [63, -10], [72, 8], [75, 37], [-26, 31], [-18, 7], [-45, -4], [-40, 23], [-87, 116], [-38, 21], [-49, 13], [-38, 1], [-14, -8], [-20, -28], [-13, -27], [-12, -9], [-26, 5], [-31, 22], [-37, -7], [16, 17], [35, 18], [-58, 20], [-37, 28], [-34, 7], [-156, 69], [-60, -6], [-37, -19], [-63, -56], [17, -41], [14, -19], [8, -22], [-20, -4], [-58, -4], [-35, 33], [-25, -48], [10, -43], [40, 15], [21, -18], [-14, -49], [-52, -15], [-65, 3], [-65, 87], [-107, -15], [-51, -56], [-49, -13], [-131, 56], [-66, 5], [-74, 48], [-26, -15], [-47, -121], [-63, -29], [-32, 16], [-29, 76], [-20, 25], [-56, 23], [-298, -22], [-100, 19], [-70, 2], [-96, -39], [-92, 15], [-170, -75], [-70, -50], [-84, -88], [-76, -147], [-42, -55], [-71, -70], [-100, -64], [-54, -65], [-30, -53], [-52, -200], [-14, -30], [-123, -72], [-39, -80], [-17, -20], [-51, -34], [-31, -56], [-17, -16], [-73, -40], [-60, -100], [-85, -70], [-123, -194], [-11, -23], [-10, -52], [-19, -38], [-106, -169], [-33, -16], [-53, -79], [-54, -47], [-49, -56], [-61, -59], [-92, -67], [-31, -39], [-48, -90], [-118, -111], [-59, -27], [-77, -98], [-8, -23], [-6, -36], [13, -63], [19, -14], [31, -9], [115, -62], [107, 17], [95, 0], [37, 6], [23, -2], [8, -34], [-1, -63], [-14, -57], [-11, -168], [-13, -75], [10, -73], [23, -13], [23, 33], [37, 5], [38, -15], [28, 117], [-23, 18], [-22, 42], [13, 31], [66, 57], [41, 5], [39, -4], [-43, -73], [-17, -15], [-13, -4], [-18, -14], [38, -42], [41, -32], [59, -14], [-14, -25], [-39, -22], [-36, -91], [-56, -44], [-26, -30], [9, -19], [21, -4], [114, 12], [59, 25], [84, 71], [35, 105], [32, 29], [9, 0], [11, -7], [1, -74], [-45, -83], [-32, -47], [-12, -40], [19, 0], [37, 8], [16, 19], [42, 101], [11, 72], [6, 100], [-5, 60], [3, 43], [-16, 43], [11, 13], [113, -59], [60, -14], [108, 48], [24, -12], [18, -29], [89, -89], [17, -29], [29, -108], [95, -125], [88, -59], [3, -23], [56, -69], [44, -24], [7, -62], [-20, -50], [-41, -48], [-82, 44], [-13, -2], [10, -28], [59, -81], [47, -34], [3, -108], [-6, -59], [-31, -66], [10, -38], [44, -56], [22, -22], [22, -32], [-28, -70], [-5, -78], [-30, -35], [-36, -76], [-55, -62], [-26, -119], [-42, -105], [-5, -104], [-7, -37], [-34, -108], [-13, -146], [17, -239], [8, -14], [16, -14], [-3, -17], [-8, -11], [-33, -71], [0, -49], [13, -37], [2, -95], [-24, -153], [-9, -24], [-10, -39], [-4, -36], [-7, -22], [-4, -39], [7, -34], [12, -17], [-43, -110], [-15, -144], [-16, -58], [-31, -57], [-66, -83], [-24, -52], [-43, -66], [-41, -51], [-57, -145], [-46, -145], [-116, -188], [-15, -46], [-9, -50], [-30, -84], [-15, -116], [-35, -46], [-29, -122], [-94, -186], [-23, -63], [-72, -103], [-77, -142], [-96, -128], [-18, -53], [-37, -58], [-40, -90], [-58, -90], [-12, -60], [-19, -42], [-43, -28], [-31, -39], [-95, -231], [-12, -42], [-2, -37], [-62, -86], [-35, -92], [-60, -57], [-62, -78], [-149, -144], [-41, -54], [-83, -68], [-34, -1], [-72, -37], [-47, -38], [-28, 14], [-17, 50], [-21, -2], [-16, -7], [-43, 48], [-37, -3], [-26, 22], [-50, -15], [9, 205], [-7, 43], [-21, -40], [-57, -72], [-23, -14], [-22, 0], [9, 44], [31, 62], [-10, 10], [-10, 3], [-40, -27], [-20, -30], [-58, -119], [-34, -100], [-28, -29], [-13, -43], [-24, -41], [-37, 11], [-22, -7], [-53, 23], [-13, -10], [35, -77], [-29, -113], [-12, -14]], [[79915, 96849], [-25, -28], [-35, -14], [-38, 23], [-95, -1], [-163, 25], [47, 16], [257, 13], [18, -3], [34, -31]], [[79519, 96892], [-33, -4], [-36, 12], [10, 26], [81, 4], [30, 39], [51, -2], [14, -11], [8, -13], [-1, -17], [-11, 0], [-48, -2], [-9, -9], [-56, -23]], [[78578, 97496], [-27, -45], [-11, -40], [-83, -133], [-10, -23], [49, 20], [44, 45], [27, 38], [30, 24], [34, 0], [35, 9], [65, 31], [66, 14], [36, -1], [34, -15], [22, -35], [24, -28], [87, -21], [13, -7], [8, -24], [-7, -25], [50, -25], [69, 11], [37, -7], [36, -14], [17, -22], [14, -27], [15, -39], [9, -41], [-8, -55], [-134, -84], [-25, -8], [-62, 6], [-61, -9], [-161, -44], [-199, -1], [-57, -39], [-17, 1], [-17, 7], [-16, 13], [-121, -11], [-136, -7], [-136, -1], [-45, -28], [-139, -55], [-127, -42], [-66, -10], [-96, 11], [-30, 14], [-29, 21], [42, 27], [30, 54], [37, 32], [94, 61], [11, 24], [18, 51], [11, 20], [15, 18], [11, 22], [2, 33], [6, 28], [37, 42], [27, 20], [29, 6], [71, -8], [22, 3], [-16, 13], [-11, 50], [2, 16], [10, 31], [18, 15], [18, 10], [11, 42], [-5, 15], [27, 20], [13, 27], [32, 16], [65, 13], [3, 34], [10, 21], [14, 7], [33, 6], [18, -1], [24, -34], [26, -28], [34, -6], [34, 2], [-20, 33], [1, 35], [12, 22], [16, 10], [34, 2], [107, -24], [70, -35], [16, -18], [-13, -10], [-31, -6], [-16, -10]], [[71180, 97725], [34, -21], [26, 16], [248, -50], [53, -18], [11, -13], [-217, -8], [-44, 3], [-4, 29], [-49, 1], [-85, 19], [-23, 27], [-5, 11], [27, 11], [28, -7]], [[77815, 97703], [-61, -7], [7, 40], [4, 11], [31, 6], [20, -10], [44, -7], [-45, -33]], [[75745, 97744], [-68, -5], [-80, 5], [-130, 61], [-85, 26], [-70, 40], [-15, 44], [44, 28], [54, 11], [91, 2], [117, -4], [116, -29], [247, -31], [90, -21], [-56, -51], [-61, -19], [-63, -27], [-64, -19], [-67, -11]], [[64280, 97893], [7, -7], [-1, -6], [-99, 6], [-173, -4], [-100, 32], [106, 32], [56, 7], [72, 27], [89, -26], [-5, -23], [1, -11], [24, -10], [23, -17]], [[66580, 97900], [-100, -19], [-35, 6], [-10, 9], [-19, 9], [-50, 12], [7, 33], [16, 7], [150, 37], [72, -21], [30, -51], [-61, -22]], [[77131, 98017], [64, -37], [31, -41], [-30, -11], [-28, -28], [-13, -34], [-37, -27], [-10, -43], [17, -8], [20, 12], [41, 41], [53, 28], [58, -16], [23, 6], [40, 39], [-7, 33], [16, 20], [18, 5], [75, -4], [119, -17], [21, -17], [29, -10], [17, -16], [53, -13], [26, -12], [35, -28], [32, -42], [-40, -22], [-22, -40], [-9, -9], [-7, -15], [-3, -35], [-6, -30], [-7, -13], [-5, -17], [5, -45], [-12, -35], [-40, -27], [-41, -1], [-61, 18], [-18, -1], [-17, -7], [76, -38], [56, -56], [65, -13], [18, -6], [23, -52], [8, -26], [-108, -62], [-28, -11], [-172, -9], [-113, -18], [-36, 4], [-63, 15], [-42, -6], [-60, 10], [-37, 0], [-85, 23], [-88, 38], [-17, 18], [-18, 12], [-105, 10], [-23, 8], [-153, -9], [-26, 6], [-47, 50], [-27, 1], [-84, -29], [-31, 2], [-64, 19], [-38, 24], [-6, 8], [-4, 29], [-38, 15], [-46, 52], [-27, 54], [-128, 28], [-77, 7], [-58, -2], [-56, 21], [93, 78], [123, 41], [53, 31], [61, 42], [25, 65], [103, 40], [27, 14], [36, 31], [12, 4], [81, -38], [16, 7], [15, 17], [29, 19], [100, 3], [85, -8], [32, 8], [39, -3], [195, 28], [130, 8], [24, -5]], [[63903, 97968], [-23, -8], [-106, 44], [-9, 13], [91, 41], [102, -6], [16, -20], [3, -7], [-69, -36], [-5, -21]], [[65410, 98083], [-79, -27], [-40, 1], [-20, 16], [32, 23], [41, 17], [31, -5], [23, -8], [12, -17]], [[65855, 98128], [12, -20], [-1, -71], [-13, -31], [2, -26], [-26, -13], [-218, 3], [-108, 6], [-25, 10], [61, 34], [19, 23], [-6, 67], [10, 12], [175, -6], [14, 19], [66, 1], [38, -8]], [[64866, 98032], [-184, -7], [-62, 4], [-8, 7], [-15, 6], [-58, 6], [-36, 29], [16, 8], [85, 12], [29, 12], [10, 17], [38, 31], [92, 6], [40, -6], [5, -20], [39, -25], [101, -32], [-20, -23], [-35, -3], [-37, -22]], [[66098, 97996], [-43, -11], [-113, 21], [-17, 11], [-14, 20], [-19, 78], [-1, 23], [-7, 16], [-28, 28], [-20, 13], [18, 15], [124, -11], [266, -6], [136, -28], [40, -16], [39, -26], [-238, -14], [-32, -12], [1, -29], [-9, -26], [-25, -3], [-58, -43]], [[65115, 98198], [-39, -30], [-129, 32], [11, 16], [14, 6], [0, 16], [-12, 12], [5, 24], [83, -18], [8, -7], [56, -12], [9, -24], [-6, -15]], [[63178, 98417], [127, -23], [95, 6], [29, -3], [28, -7], [28, -16], [38, -35], [0, -49], [-17, -2], [-161, 22], [-74, 51], [-20, 5], [-29, -13], [-25, -31], [-27, -8], [-31, -39], [-29, 5], [-15, -4], [-37, -27], [-93, 0], [-15, -12], [-30, -38], [-38, -10], [-66, -6], [-22, 21], [-10, 33], [-15, 17], [-92, -19], [-69, 13], [-67, 22], [-68, 8], [61, 23], [334, 48], [131, 12], [62, 34], [92, 22], [25, 0]], [[67268, 98406], [17, -23], [-10, -37], [-22, -27], [-10, -38], [-86, -9], [-24, -9], [-23, -29], [-87, -18], [-65, -49], [-91, 9], [-124, 34], [-105, -28], [-69, -8], [-85, 42], [-11, 10], [-5, 29], [5, 26], [23, 55], [30, 31], [15, 10], [12, 19], [34, 11], [105, 7], [39, -6], [12, -21], [57, 2], [94, 13], [137, 20], [79, 18], [70, -4], [70, -11], [18, -19]], [[63966, 98460], [42, -10], [103, 2], [32, -14], [149, -84], [38, -2], [31, -30], [-154, -49], [-52, -36], [-189, -8], [-121, -17], [-26, -15], [12, -26], [-58, -29], [-191, -4], [-24, -9], [-37, -31], [3, -5], [65, -8], [10, -6], [9, -14], [5, -20], [-9, -26], [-24, -4], [-26, 3], [-60, 20], [-7, -7], [-6, -14], [-19, -28], [-22, -8], [-61, 21], [-20, -6], [-19, -13], [-24, -6], [-56, -4], [-29, 17], [25, 23], [70, 35], [-23, 15], [-70, 4], [-55, -9], [-28, -24], [-26, -5], [-72, 2], [-40, 31], [-30, 12], [-26, 25], [211, 83], [70, 32], [67, 16], [87, 9], [27, 10], [27, 4], [17, -6], [44, -29], [129, 5], [27, 24], [2, 56], [-13, 33], [27, 63], [74, 25], [171, 34], [43, 2]], [[72229, 98414], [-258, -21], [-25, 13], [-8, 8], [36, 44], [30, 21], [164, 8], [131, -14], [41, -13], [-15, -26], [-8, -9], [-88, -11]], [[66983, 98473], [-87, -12], [-141, 15], [-73, 17], [6, 8], [19, 10], [122, 41], [242, 9], [30, -30], [-26, -23], [-92, -35]], [[65199, 98568], [209, -55], [194, 5], [84, -17], [122, -50], [182, -53], [35, -16], [-31, -21], [-213, -53], [-138, -18], [-120, -3], [-48, 6], [-48, 38], [-117, 28], [-125, -8], [-13, 15], [-25, 11], [-43, 2], [-86, 15], [-6, 34], [54, 17], [35, 1], [14, 48], [60, 73], [24, 1]], [[66283, 98526], [39, -30], [15, -33], [24, -20], [8, -38], [-20, -31], [-60, -6], [-99, -2], [-97, 16], [-52, 56], [-96, 15], [-54, 58], [56, 17], [68, -8], [109, 50], [15, -3], [24, -11], [88, -19], [32, -11]], [[64098, 98529], [-39, -4], [-27, 3], [-29, 22], [-10, 11], [-2, 11], [26, 2], [12, 11], [4, 8], [20, 6], [34, 1], [45, -12], [19, -24], [-44, -21], [-9, -14]], [[67603, 98329], [-52, -2], [-51, 9], [-67, 29], [-67, 34], [20, 18], [63, 23], [82, 42], [139, 9], [67, 0], [67, 10], [19, 21], [13, 41], [12, 22], [15, 17], [74, 14], [63, -1], [63, -16], [40, -14], [38, -28], [20, -23], [-6, -28], [3, -23], [18, -21], [-122, -65], [-125, -36], [-326, -32]], [[75435, 98583], [-96, -45], [-346, 29], [-16, 20], [-5, 13], [47, 25], [288, -9], [103, -9], [25, -24]], [[76812, 98545], [10, -26], [36, -21], [18, -21], [183, -67], [80, -8], [36, -17], [10, -20], [-3, -37], [-31, 0], [-22, -12], [-124, -15], [-30, -22], [-24, -45], [13, -9], [12, -13], [37, -77], [10, -12], [37, -11], [-33, -29], [-35, -19], [-366, -37], [-249, -15], [-83, -16], [-27, 2], [-65, -29], [-127, -38], [-61, 0], [-181, 53], [-222, 45], [-31, 25], [-55, 15], [-71, 12], [-31, 51], [45, 35], [58, 34], [97, 12], [92, 20], [69, 49], [43, 48], [78, 51], [-135, -13], [-51, 7], [5, 17], [28, 36], [15, 12], [49, 19], [35, 36], [81, 25], [39, 4], [38, -1], [70, 12], [70, 18], [66, 10], [65, 5], [63, 14], [62, 28], [27, 48], [179, 5], [28, -11], [22, -29], [26, -10], [31, -6], [79, -48], [15, -14]], [[66475, 98677], [-60, -7], [-105, 12], [-30, 14], [7, 13], [68, 18], [54, 4], [57, -19], [26, -23], [-17, -12]], [[66058, 98816], [14, -23], [43, -13], [117, -11], [35, -26], [-53, -19], [-143, -10], [15, -38], [29, -28], [-29, -33], [-40, -16], [-88, -19], [-81, 24], [-94, 35], [-42, -23], [-44, -14], [-41, 2], [-48, 27], [-132, -21], [-40, 23], [-29, 48], [87, 10], [104, -15], [69, 48], [88, 21], [70, 51], [33, 17], [76, -3], [25, 4], [73, 13], [26, -11]], [[67680, 98853], [-34, -8], [-179, 7], [-86, 14], [-12, 8], [-4, 7], [-114, 12], [49, 16], [142, 7], [254, -19], [16, -13], [5, -8], [-37, -23]], [[66193, 98914], [-92, -12], [-13, 9], [-3, 6], [10, 15], [11, 29], [42, 17], [313, 16], [41, -17], [-15, -26], [0, -12], [-294, -25]], [[58474, 51228], [-9, -9], [-2, -28], [11, -44], [34, -92], [22, -17], [14, -36], [14, -60], [5, -75], [-6, -90], [3, -68], [13, -44], [3, -57], [-6, -70], [-7, -42], [-9, -14], [-9, -6], [-14, 5], [-16, -6], [-17, -13], [-11, -2]], [[58215, 51043], [9, 1], [60, 29], [6, -9], [10, -58], [5, -8], [8, -2], [17, 13], [31, 45], [13, 28], [16, 38], [20, 44], [12, 37], [11, 23], [14, 6], [16, -1], [11, -1]], [[45264, 63828], [-14, 29], [25, 300], [1, 25]], [[61663, 61471], [21, -3], [-9, 19], [-2, 9], [10, 26], [30, -55], [-1, -64], [-2, -15], [-8, 14], [-6, 13], [-2, 15], [-8, 16], [-30, -10], [-18, 17], [-27, 55], [-7, 39], [11, 8], [12, 19], [7, 31], [-7, 32], [16, -5], [9, -33], [1, -75], [3, -16], [-5, -17], [12, -20]], [[60250, 66464], [-7, 0], [-20, 39], [-11, 29], [-12, 19], [-53, 39], [-8, 25], [9, 25], [5, -25], [10, -14], [44, -36], [49, -76], [9, -7], [-15, -18]], [[60165, 66654], [-3, -8], [-12, 21], [1, 44], [10, 25], [-1, -34], [5, -35], [0, -13]], [[63456, 68284], [15, -54], [7, -54], [29, -128], [41, -100], [9, -36], [7, -55], [-7, -21], [-3, -23], [30, -55], [51, -46], [19, -12], [22, -21], [-17, -31], [30, -74], [34, -74], [37, -17], [50, -113], [74, -73], [46, -96], [-4, -2], [-14, 10], [-16, 13], [-5, -12], [0, -40], [5, -47], [23, -41], [21, -29], [8, -56], [-17, -120], [-5, 1], [-11, 10], [-12, 2], [-6, -7], [14, -86], [13, -66], [17, -52], [14, -77], [11, -32], [49, -82], [14, -68], [14, -127], [30, -70], [17, -55], [22, -46]], [[64240, 66017], [20, -24], [20, 3], [2, -23], [-13, -31], [-17, -78], [24, -13], [22, -6], [17, -13], [9, 0]], [[64438, 62785], [-66, -18], [-63, -18], [-71, -20], [-86, -24], [-67, -18], [-98, -28], [-88, -24], [-82, -23], [-83, -23], [-70, -20], [-42, -23], [-49, -49], [-76, -77], [-77, -78], [-39, -40], [-42, -104], [-21, -52], [-39, -95], [-29, -72], [-34, -85], [-15, -77], [-23, -117], [-20, -30], [-33, -38], [-30, -27], [-47, 3], [-26, 73], [-29, 76], [-14, 31], [-12, 2], [-47, -10], [-57, -12], [-66, 13], [-77, 15], [-72, 13], [-36, 10], [-47, 50], [-12, 10], [-13, 2], [-55, 2], [-56, 1], [-56, -16], [-53, 6], [-55, -9], [-20, -19], [-21, 1], [-14, -17], [-11, -8], [-15, 15], [-17, -4], [-25, 13], [-17, 32], [-15, 29], [-16, 16], [-18, 9], [-16, 1], [-20, -18], [-12, -17], [-31, -56], [-1, -20], [14, -33], [-5, -16], [-18, -20], [-5, -53], [-3, -29], [-3, -69], [8, -55], [11, -20], [1, -24], [-6, -47], [-17, -14], [-12, -45], [-8, -21], [-13, -24], [-52, -79]], [[61888, 61273], [-3, 46], [-16, 68], [-1, 49], [-8, 48], [-14, 37], [-26, 38], [-3, 53], [-19, 52], [-25, 42], [-15, 77], [-10, 103], [-67, 135], [-84, 124], [-26, 71], [-42, 143], [-21, 113], [-56, 130], [-2, 50], [-9, 61], [-13, 68], [-7, 54], [-57, 235], [-18, 37], [-16, 53], [-4, 40], [-5, 22], [-39, 39], [-38, 99], [-111, 157], [-55, 15], [-43, 56], [-32, 74], [-34, 126], [-60, 136], [-50, 194], [16, 71], [-1, 49], [-16, 84], [-17, 64], [-12, 61], [10, 88], [3, 98], [10, 52], [7, 57], [-9, 115], [-17, 61], [2, 41], [-19, 20], [-16, 45], [16, -1], [-29, 62], [-11, 34], [-11, 84], [-14, 64], [-45, 146], [-22, 89], [-49, 114], [-53, 85], [-33, 38], [-16, 35], [-28, 2], [-30, 50], [-21, 1], [-26, 8], [-31, 97], [-26, 90], [-44, 118], [11, 31], [13, 50], [-6, 65], [-7, 44], [-19, 81], [-64, 202], [-17, 29], [-27, 34], [-16, 88], [-8, 78], [-44, 38], [-74, 282], [-44, 99], [-17, 66], [-50, 109], [-24, 109], [-51, 100], [-44, 173], [-67, 174], [-29, 30], [-69, 12], [-30, 13], [-27, -38], [-2, 48], [19, 67], [26, 140], [6, 123], [42, 364]], [[60241, 64514], [4, -132], [12, -105], [43, -150], [36, -81], [13, -44], [1, -21], [-1, -19], [-11, 22], [-19, 15], [-3, -70], [5, -50], [4, -94], [15, -101], [-11, -93], [2, -158], [19, -190], [-4, -120], [32, -283], [30, -156], [17, -39], [19, -20], [36, -14], [53, -79], [43, -85], [15, -44], [20, -48], [14, 9], [9, 12], [13, -39], [67, -84], [10, -39]], [[59466, 57293], [-1, 0], [-51, 0], [-1, 1], [-1, 2], [-1, 2], [-1, 4], [-2, 17], [-1, 25], [2, 44], [6, 52], [18, 74], [0, 6], [1, 3], [0, 4], [-2, 13], [-2, 12], [-1, 17], [3, 38], [0, 12], [0, 15], [-2, 10], [-12, 64], [-4, 10], [-120, 202], [-22, 55], [-3, 4], [-3, 3], [-61, 46], [-3, 5], [1, 6], [1, 9], [8, 27], [1, 7], [1, 11], [-28, 427], [0, 8], [2, 6], [1, 3], [3, 9], [4, 10], [3, 16], [1, 6], [4, 77], [0, 66], [16, 112], [1, 47], [-132, 4], [-1, -3], [0, -3], [0, -3], [0, -4], [0, -7], [-1, -14], [0, -7], [0, -8], [2, -26], [4, -20], [0, -7], [0, -7], [0, -14], [-185, -2], [73, -168], [1, -3], [2, -9], [0, -7], [1, -59], [-3, -93], [0, -60], [5, -39], [19, -76], [-1, -15], [-4, -18], [-131, -227], [-4, -11], [-18, -95], [-17, -55], [-8, -16], [-31, -78], [-119, -243], [-20, -16], [-59, -7], [-32, -1], [-3, -2], [-5, -4], [-4, -7], [-4, -4], [-3, 2], [-5, 7], [-73, 136], [-131, 172], [-13, -16], [-74, -74], [-15, -19], [-9, -14], [0, -82], [-13, -42], [-24, -46], [-64, -29], [-33, -25], [-34, -38], [-6, -9], [-13, -26], [-26, -52], [-2, -40], [4, -36], [-221, 1], [-15, 29], [-31, 127], [-1, 2], [-22, -8], [-202, 15], [-29, -14], [-57, -52], [-29, -9], [-30, 24], [-106, 253], [-23, 31], [-9, 16], [-15, 44], [-23, 27], [-7, 19], [-3, 27], [1, 55], [-8, 35], [-16, 8], [-143, -59], [-20, 7], [-30, -10], [-11, -11], [-12, -33], [-2, -35], [0, -35], [-3, -34], [-11, -38], [-41, -86], [-9, -38], [2, -94], [-3, -48], [-6, -22], [-17, -37], [-7, -21], [-3, -29], [-1, -63], [-3, -29], [-22, -73], [-5, -26], [-2, -53], [-3, -16], [-65, -42], [-24, -27], [-14, -41], [-4, -18]], [[56349, 58133], [10, 63], [12, 94], [1, 43], [-5, 45], [-21, 33], [-18, 4], [-8, 17], [-16, 25], [-15, 19], [-14, 37], [-10, 52], [7, 184], [-5, 25], [-20, 7], [-5, 13], [1, 36], [-12, 105], [-12, 87], [7, 48], [-18, 66], [-33, 28], [-31, -9], [-33, -13], [-20, 4], [-14, 12], [-10, 24], [-5, 28], [5, 43], [18, 79], [23, 64], [46, 59], [13, 31], [7, 35], [1, 40], [-3, 42], [-5, 38], [-14, 51], [-13, 60], [0, 40], [6, 29], [13, 35], [24, 39], [6, 8], [16, 21], [13, 15], [34, 42], [8, 19], [-3, 24], [-8, 20], [-14, 27], [-2, 33], [-4, 57], [-7, 37], [-5, 26], [9, 20], [14, 28], [18, 17], [28, 15], [11, 19], [3, 38], [-1, 37], [10, 27], [14, 57], [10, 27], [18, 30], [19, 38], [8, 43], [2, 43], [-10, 127], [21, 54], [27, 44], [38, -3], [60, 9], [40, 19], [29, -1], [66, -24], [5, 6], [2, 5], [3, 34], [0, 85], [0, 257], [0, 257], [0, 257], [0, 257], [0, 257], [0, 257], [0, 256], [0, 257]], [[59437, 54274], [-65, -136], [-48, -100], [-8, -14], [-14, -18], [-46, -1], [-47, 12], [-44, 61], [-44, -47], [-28, -15], [-17, -6], [-39, -7], [-55, -25], [-26, -32], [-13, -25], [-11, -46], [-6, -5], [-10, 6], [-14, 18], [-30, 27], [-15, 58], [-14, 36], [-11, 18], [-47, -58], [-22, -14], [-19, 2], [-34, 33], [-38, 27], [-19, 0], [-29, -35], [-33, -52], [-17, -52], [-8, -31]], [[45357, 58959], [-9, 26], [-11, 42], [7, 31], [23, 20], [34, 26], [19, -14], [10, 0], [2, 16], [-3, 9], [-26, 22], [-14, 30], [-11, -17], [-10, -37], [-8, -10], [-12, -11], [-6, 25], [-3, 24], [5, 19], [-2, 104], [3, 55], [-2, 49]], [[45399, 59669], [-7, 59], [-17, 47], [-27, 40], [-6, 37], [9, 33], [26, 26], [6, 19], [-13, -2], [-21, -18], [-14, 0], [-1, 51], [-23, 66], [-26, 112], [-30, 46], [-24, 91], [-26, 35], [-24, 16], [-20, -3], [-7, -42], [-25, 60], [34, 21], [73, 75], [85, 215], [76, 253], [9, 60]], [[78880, 52610], [-42, -38], [-47, 34], [15, 57], [32, 13], [25, -18], [14, -13], [10, -16], [-7, -19]], [[42704, 18182], [1, -33], [-43, 30], [-10, 14], [14, 19], [27, 0], [7, -11], [4, -19]], [[39693, 20699], [27, -28], [22, 19], [22, -2], [12, -10], [12, -3], [16, -1], [27, -47], [-11, -41], [29, 8], [26, -35], [12, 3], [5, 14], [17, 16], [11, -22], [14, -41], [18, -12], [15, -44], [12, -55], [11, -8], [19, -1], [20, 8], [-8, -48], [3, -42], [32, -30], [-19, -17], [-20, -24], [-41, -19], [-11, 8], [-35, 42], [-17, 50], [-37, 71], [-8, 21], [-9, 13], [-34, 9], [-30, 17], [-24, 36], [-8, 22], [-10, 15], [-33, -1], [-21, 17], [-21, 23], [-94, 67], [-37, -7], [-17, 19], [0, 33], [20, 20], [-82, 8], [-29, 12], [20, 7], [114, 1], [43, 6], [3, -15], [38, -29], [36, -3]], [[48418, 42627], [-25, -3], [2, 27], [19, 29], [13, -4], [0, -33], [-9, -16]], [[46009, 47249], [-9, -1], [-3, 5], [-2, 14], [5, 22], [4, 13], [7, -2], [8, -15], [8, -13], [-4, -12], [-14, -11]], [[96368, 45123], [-24, -9], [-10, 2], [-16, 50], [12, 11], [18, -4], [5, -29], [15, -21]], [[94604, 45047], [-20, -20], [-17, 10], [-14, 15], [-11, 44], [-23, 28], [-34, 11], [-14, 19], [-3, 10], [-24, 8], [-6, 24], [2, 25], [3, 13], [22, -12], [103, -117], [25, -36], [11, -22]], [[96147, 45646], [-22, -10], [-7, 3], [-17, -6], [-18, -41], [-13, 6], [-10, -2], [-8, 34], [0, 17], [13, -3], [6, 33], [14, 17], [32, 7], [28, -10], [10, -8], [-9, -30], [1, -7]], [[94920, 45859], [35, -34], [20, 6], [30, -23], [23, 13], [15, -30], [36, -118], [0, -38], [24, -27], [-20, -5], [-28, 14], [-22, -10], [-22, 23], [-38, 12], [-33, 27], [-69, 87], [0, 43], [-11, 21], [-3, 54], [-25, 17], [-29, 3], [-2, 26], [5, 45], [21, -1], [26, -19], [50, -65], [12, -12], [5, -9]], [[94873, 46298], [4, -62], [-2, -21], [-21, 45], [-10, -16], [-9, 22], [1, 46], [1, 50], [-4, 38], [-11, 55], [12, -9], [39, -148]], [[94374, 46501], [61, -92], [27, 8], [80, -2], [47, -66], [28, -30], [16, -59], [19, -14], [12, -30], [7, -55], [-5, -9], [-24, -20], [-18, -9], [-47, 20], [-44, 42], [-89, 5], [-41, 12], [-14, 17], [-13, 21], [-21, 51], [-17, 61], [-2, 35], [-2, 68], [5, 24], [17, 25], [18, -3]], [[94490, 46661], [16, -8], [8, 1], [18, -31], [25, -46], [-10, -23], [-20, 12], [-7, -5], [-2, 3], [-4, 23], [-22, 23], [-19, 2], [-3, 27], [20, 22]], [[94218, 46587], [-4, -1], [-13, 7], [-16, 2], [-9, 20], [11, 29], [15, 18], [6, -4], [7, -12], [14, -5], [2, -37], [-13, -17]], [[93789, 46797], [0, -20], [-16, 6], [-36, 31], [-1, 14], [20, 5], [15, -4], [12, -18], [6, -14]], [[93944, 46761], [-6, -2], [-7, 23], [15, 62], [8, -50], [4, -19], [-14, -14]], [[93918, 46840], [-27, -45], [-20, 15], [-17, 39], [6, 47], [3, 13], [8, 2], [8, 10], [9, 21], [29, -17], [8, -11], [-18, -29], [6, -9], [4, -14], [1, -22]], [[93718, 46823], [0, -8], [-15, 16], [-34, 78], [6, 26], [31, 50], [10, 7], [8, -31], [-7, -46], [-10, -12], [-5, -43], [16, -37]], [[94357, 46942], [-13, -8], [-20, 21], [-9, 19], [4, 30], [12, 12], [13, -20], [1, -21], [12, -33]], [[94652, 47053], [69, -171], [-3, -31], [-9, -19], [-3, -58], [8, -22], [19, -10], [32, -62], [13, -75], [1, -23], [14, -34], [0, -72], [30, -100], [3, -48], [-3, -22], [-12, 13], [-37, 113], [-41, 49], [-5, 21], [-42, 66], [-28, 111], [-30, 198], [14, 47], [-34, 96], [1, 25], [15, -6], [10, 2], [5, 11], [13, 1]], [[93822, 47095], [18, -47], [20, -105], [-4, -36], [-14, -3], [-4, -22], [-20, 51], [-26, 14], [-19, 31], [-6, 62], [-2, 39], [-15, 7], [-42, -10], [-14, -34], [-19, 11], [-4, 30], [3, 29], [26, 29], [5, 38], [26, 64], [15, 11], [31, -23], [3, -92], [11, -30], [31, -14]], [[93500, 47136], [-3, -15], [-15, 71], [1, 36], [3, 23], [5, 7], [12, -79], [-3, -43]], [[93658, 47172], [-6, -9], [-30, 4], [-23, 59], [0, 44], [18, 40], [22, 8], [12, -16], [11, -34], [4, -43], [-3, -38], [-5, -15]], [[93523, 47279], [-5, -8], [-9, 31], [-7, 10], [0, 34], [-28, 57], [-2, 39], [16, 38], [22, -22], [22, -48], [25, -16], [-5, -32], [-23, -57], [-6, -26]], [[94410, 46927], [0, -14], [-37, 48], [-28, 59], [-81, 64], [-17, 33], [-15, 4], [-41, 54], [-41, 36], [-25, 47], [-6, 19], [-15, 11], [-25, 51], [-25, 34], [-9, 62], [-24, 43], [-6, 19], [77, -35], [36, -68], [30, -38], [11, -28], [27, -38], [25, -4], [24, -38], [23, -10], [18, -20], [114, -172], [-14, -46], [15, -33], [9, -40]], [[93288, 47754], [-28, -13], [-17, 18], [7, 44], [10, 23], [35, -41], [-7, -31]], [[93745, 47620], [9, -20], [-21, -35], [-29, 19], [-6, 19], [0, 11], [-20, -7], [-40, 17], [-54, 82], [-58, 156], [-56, 86], [-11, 26], [-1, 45], [8, 17], [34, -19], [45, -71], [74, -73], [20, -38], [12, -90], [13, -27], [40, -69], [21, -16], [11, -3], [9, -10]], [[46520, 56126], [-4, -15], [-18, 37], [-96, 56], [27, 29], [66, 9], [20, -17], [9, -15], [3, -27], [-7, -57]], [[46803, 55821], [-11, 23], [-52, 82], [-54, 55], [-116, 91], [-39, 25], [2, 33], [13, 59], [-22, 69], [9, 51], [-9, 0], [-16, -31], [-36, 9], [-23, 44], [-19, 15], [-9, 22], [-12, 115], [-9, 52], [-17, 32], [-36, 8], [-15, 69], [-19, 54], [3, 34], [16, -2], [13, -24], [20, -10], [25, 58], [23, 32], [5, 28], [-3, 15], [-14, -24], [-37, 6], [-9, -21], [-17, -7], [-13, 69], [1, 40], [5, 45], [38, 7], [3, 14], [-26, 10], [-33, 52], [-6, 35]], [[25607, 59561], [-7, -8], [5, -58], [-16, -35], [-14, -25], [-26, -7], [-44, -2], [-66, 28], [-48, 39], [-26, 0], [8, -13], [21, -8], [27, -27], [-8, -8], [-99, 57], [-114, 112], [-68, 18], [-78, 30], [-46, 71], [-35, 30]], [[63593, 58328], [0, -159], [0, -155], [0, -161], [0, -265], [0, -96], [0, -140], [0, -65], [-40, -126], [-49, -154], [-52, -165], [-44, -136], [-40, -127], [-41, -130]], [[62012, 58467], [54, -88], [53, -180], [62, -144], [85, -135], [33, -45], [30, -24], [155, 4], [109, 122], [100, 89], [33, 18], [58, -24], [64, -7], [57, -27], [29, 7], [114, 103], [71, 101], [48, 42], [20, 1], [66, -36], [85, 15], [117, 87], [37, 18], [28, 1], [64, -39], [9, 2]], [[63593, 58328], [35, 7], [90, 41], [71, 63], [130, 45], [99, 114], [17, 55], [30, 70], [43, 23], [111, -82], [18, -6], [-7, -50], [-3, -50], [-23, -88], [-15, -98], [11, -149], [5, -242], [-3, -35], [-7, -34], [-3, -28], [-12, -9], [-5, -16], [9, -6], [34, 26], [0, 29], [2, 14], [28, -32], [21, -13], [5, -31], [-1, -20], [-32, 9], [-17, 16], [-48, -26], [-29, -29], [-9, -47], [-7, -190], [-11, -123], [-3, -162], [-38, -108], [-14, -76], [-57, -152], [-31, -130], [-9, -64], [-51, -178], [-70, -137], [-25, -174], [-25, -110], [-28, -99], [-62, -177], [-31, -122], [-40, -213], [-12, -135], [-111, -391], [-115, -312], [-72, -263], [-129, -305], [-176, -393], [-230, -467], [-62, -95], [-252, -288], [-163, -241], [-83, -164], [-88, -143], [-69, -136], [-210, -460], [-22, -43], [-20, -41], [-27, -77], [-18, -31], [-50, -131], [-31, -69], [-36, -67], [-14, -47], [-11, -55], [-12, -31], [-31, -130], [-28, -86], [-28, -67]], [[34402, 78779], [-6, -5], [-19, 8], [9, 18], [7, 5], [9, 2], [4, -5], [-1, -13], [-3, -10]], [[34370, 78823], [-24, -25], [-9, 14], [2, 17], [13, 39], [-1, 11], [-14, 76], [2, 13], [4, 5], [21, -16], [3, -21], [-10, -46], [7, -31], [9, -23], [-3, -13]], [[51849, 51912], [-28, -42], [-10, 11], [-7, 29], [-8, 64], [3, 30], [13, 35], [28, 34], [17, 3], [17, -46], [0, -47], [-25, -71]], [[52062, 52746], [-11, -15], [-12, 12], [-3, 23], [16, 44], [7, 11], [6, -9], [4, -12], [1, -18], [-8, -36]], [[34112, 55039], [4, -12], [11, 67], [2, 53], [8, 54], [14, 63], [24, 31], [140, -32], [64, -30], [82, -52], [12, -55], [0, 55], [-4, 56], [23, 40], [50, 14], [75, -19], [64, 23], [87, -3], [133, -45], [59, -31], [25, -28], [4, -50], [-2, -64], [-10, -62], [-21, -82]], [[56260, 80110], [-4, -24], [-11, -27], [-14, -29], [-12, -34], [-16, -74], [-10, -35], [-43, -67], [-3, -94]], [[53771, 78062], [17, 11], [23, 30]], [[54591, 84268], [-15, -29], [-12, 2], [-9, 39], [-2, 99], [5, 49], [61, 178], [27, 14], [38, 109], [10, 48], [17, 44], [10, 39], [8, 15], [17, -7], [8, -7], [-18, -23], [2, -29], [-1, -13], [-48, -128], [-12, -83], [-17, -21], [-69, -296]], [[55298, 85158], [-23, -14], [-13, -40], [-19, -7], [-17, -14], [-7, -128], [33, -49], [-18, -7], [-17, -14], [-11, -22], [-12, -47], [-45, -26], [-17, -19], [-25, -44], [-13, -63], [-25, -27], [-29, -6], [17, 52], [22, 42], [-21, 28], [-13, 46], [-16, 34], [13, 39], [-7, 63], [2, 62], [19, 32], [22, 25], [34, 59], [37, 42], [51, 19], [23, -17], [10, 38], [17, 9], [15, -9], [33, -37]], [[55321, 85208], [-5, -36], [-15, 3], [-13, 26], [27, 41], [40, -2], [14, -9], [-48, -23]], [[55115, 85846], [-12, -6], [-6, 2], [7, 27], [6, 11], [19, 11], [5, -2], [-19, -43]], [[55165, 86100], [-7, -19], [-7, 23], [3, 5], [4, 23], [14, 12], [21, -7], [0, -6], [-20, -19], [-8, -12]], [[56709, 89749], [-73, -13], [-56, 26], [-27, -13], [-48, -1], [-55, -10], [-19, -21], [-14, -8], [-51, 29], [-48, 49], [-35, -37], [-23, -7], [-20, 33], [-18, 6], [-10, -12], [-8, -29], [-14, -24], [-3, -14], [-2, -60], [-4, -14], [-46, 8], [2, -16], [10, -8], [5, -10], [-17, -13], [-47, 2], [-4, -14], [13, -22], [-10, -19], [-10, -8], [-55, -12], [-32, 3], [-9, -12], [-3, -16], [6, -16], [14, -9], [5, -10], [-1, -21], [-12, -4], [-33, 38], [-10, -2], [7, -20], [19, -22], [11, -22], [10, -26], [-2, -21], [-41, -65], [-37, -41], [-27, -37], [-16, -39], [19, -20], [20, -29], [15, -55], [17, -49], [35, -46], [-7, -27], [-8, -21], [-58, -47], [-66, -70], [-71, -178], [-24, -24], [-62, -30], [-23, -30], [-46, -35], [-81, -29], [-37, -42], [-16, -43], [-19, -3], [-18, 17], [-24, 12], [-3, -28], [1, -21], [-39, 31], [-19, -28], [-14, -47], [-56, -63], [-61, 11], [-6, -11], [16, -8], [2, -10], [-11, -5], [-17, 0], [-25, -12], [-17, 1], [-8, -30], [-13, -37], [-34, -15], [-18, -3], [-9, -20], [53, -5], [-4, -17], [-1, -17], [-6, -19], [-60, -27], [-9, -21], [-12, -13], [-27, 0], [1, 13], [4, 13], [-39, -1], [-12, 31], [-8, -8], [4, -25], [11, -25], [11, -38], [-9, -24], [-10, -11], [7, -11], [21, -8], [9, -15], [-25, -13], [-32, -44], [-32, -1], [-20, -28], [-21, 0], [-17, 18], [-27, 15], [-9, -27], [-2, -20], [16, -53], [29, -41], [28, -18], [-20, -12], [-15, -26], [-17, -83], [-10, -33], [-10, -57], [6, -49], [6, -24], [13, -32], [-36, 4], [-39, 19], [6, -39], [-24, -47], [4, -40], [5, -27], [-7, -44], [11, -14], [6, -26], [-10, -20], [5, -17], [1, -59], [8, -92], [-3, -20], [21, -80], [-5, -29], [-3, -36], [31, -34], [27, 0], [27, 1], [10, -9], [11, -24], [8, -29], [23, 2], [36, 24], [23, 6], [16, -46], [42, -59], [24, -27], [42, -14], [43, -48], [-6, -58], [18, -20], [52, -22], [18, -31], [9, -27], [14, -21], [16, -66], [-6, -41], [-21, -14], [-49, -44], [-22, -32], [-17, -20], [-49, -44], [-18, -8], [-17, -22], [-16, -10], [-15, 6], [-55, -41], [4, -18], [42, -7], [22, 9], [17, 20], [18, 5], [16, -4], [18, 16], [14, 7], [14, -8], [16, -39], [-33, -20], [-23, -1], [-12, -64], [-14, -27], [-10, -13], [-52, -27], [-35, -35], [-40, -27], [-18, 6], [-26, -29], [-59, -33], [-31, -45], [-68, -40], [-34, -32], [-95, -2], [-89, 7], [-29, -16], [29, -4], [20, -16], [25, 7], [57, -8], [29, -8], [38, -54], [-28, -19], [-48, -14], [18, -76], [15, -51], [-20, -31], [-1, -140], [-27, -2], [-12, -58], [9, -30], [-1, -69], [6, -42], [13, -39], [-6, -41], [-43, -95], [1, -44], [8, -27], [6, -42], [-20, -81], [-14, -69], [-16, -57], [-37, -69], [-18, -51], [-43, -160], [-21, -32], [-26, -24], [-29, 22], [-27, 13], [-32, -2], [-51, -18], [-77, 12], [-74, -6], [-19, -16], [11, -58], [-28, -8], [-26, 17], [-24, -20], [-20, -22], [-39, -51], [-13, -32], [-3, -59], [20, -54], [18, -62], [-46, -76], [-26, -2], [-76, 20], [-135, -47], [-121, 38], [15, 40], [0, 30], [6, 45], [4, 47], [-1, 32], [-9, 33], [-29, 44], [-68, 147], [-19, 62], [-14, 26], [10, 1], [55, -33], [13, 4], [13, 13], [-16, 47], [-14, 22], [-10, 32], [33, 9], [23, -2], [17, 37], [-10, 58], [-25, 19], [-21, 7], [-40, 93], [-42, 48], [-75, 184], [-27, 127], [-26, -12], [-12, 55], [-9, 53], [-2, 38], [-40, 22], [-1, 27], [-8, 120], [-42, 16], [-28, 68], [-5, 128], [-28, 23], [-23, -7], [1, 32], [5, 30], [-13, 117], [-4, 108], [-11, 32], [-6, 38], [5, 33], [8, 19], [28, 5], [26, -29]], [[58920, 36382], [-9, 9], [-16, 7], [-8, -3], [-8, -83], [-6, -122], [4, -77], [-60, -2], [-76, 8], [-54, 33], [-59, 73], [-35, 113], [-15, 71], [-21, 4], [-4, 12], [-2, 87], [1, 91], [4, 25], [39, 112], [25, 69], [15, 68], [33, 79], [36, 51], [13, 7], [9, -2], [62, -70], [65, -66], [14, 8], [7, 6]], [[32497, 62251], [-1, -14], [-3, -15], [-18, 13], [-10, 13], [0, 3]], [[65427, 49139], [1, -53], [-13, 18], [-4, 34], [-18, 26], [-9, 24], [20, 29], [23, -78]], [[59993, 71790], [-22, 129], [-3, 55], [1, 65], [15, 94], [-7, 43], [-1, 30], [-4, 40], [-38, 87], [21, 160], [15, 39]], [[59970, 72532], [20, -4], [45, -45], [7, 1], [13, 60], [14, 20], [27, 18], [8, 97], [12, 18], [16, 10], [24, 2], [20, 6], [2, 17], [-29, 111], [2, 29], [14, 112], [9, 44], [8, 14], [33, -5], [46, -20], [12, -32], [23, -29], [33, 2], [39, -6], [30, -2], [25, 21], [54, 37], [27, 13], [25, 17], [79, 61], [32, -4], [22, -9], [16, -9], [38, -43], [30, -42], [22, -13], [39, 1], [56, -8], [69, 1], [40, 11], [51, 21], [92, 51], [121, 105], [71, 51], [30, 6], [40, 1], [40, -14], [45, -9], [21, 1], [48, 10], [64, 22], [40, 17], [48, 29], [30, 47], [9, 5], [13, -8], [6, -4], [12, -27], [13, -69]], [[29907, 64430], [32, -32], [19, 5], [2, -7], [-11, -7], [-2, -6], [-31, -9], [-9, 2], [-2, 22], [2, 32]], [[30094, 64380], [-1, -8], [-16, 23], [-30, 0], [-5, 30], [12, 5], [38, -11], [9, -26], [-7, -13]], [[30033, 64424], [-5, -7], [-16, 20], [-2, 16], [-6, 1], [-10, 14], [3, 19], [22, 1], [9, -52], [5, -12]], [[50450, 55424], [-86, -41], [-35, -33]], [[77683, 55599], [-5, -3], [-10, 47], [13, 67], [13, -82], [-11, -29]], [[77521, 56216], [7, -70], [-10, 15], [-8, 30], [0, 44], [2, 7], [9, -26]], [[77386, 56413], [-3, -10], [-14, 110], [20, -29], [-3, -71]], [[77335, 56395], [-3, -43], [-11, 1], [-12, -27], [-5, -4], [-10, 86], [11, 121], [6, 18], [8, -32], [23, -15], [-10, -69], [3, -36]], [[77307, 57057], [-16, -7], [2, 32], [4, 20], [8, 5], [3, -34], [-1, -16]], [[77797, 57365], [1, -33], [-6, -39], [-25, -23], [-9, 31], [2, 49], [4, 12], [25, -3], [8, 6]], [[77798, 57428], [-3, -9], [-11, 18], [-8, 21], [-4, 26], [17, -1], [8, -25], [1, -30]], [[78501, 58569], [-5, -60], [-15, 24], [3, 31], [7, 13], [10, -8]], [[78451, 58749], [1, -14], [-14, 10], [-5, -5], [-17, 4], [-8, 80], [2, 19], [11, -6], [17, -40], [8, -27], [5, -21]], [[78592, 58586], [-6, -2], [-8, 40], [-26, 67], [-8, 71], [-30, 79], [-16, 31], [-6, -26], [-9, -28], [-30, 40], [-25, 43], [-23, 81], [-3, -19], [-6, -17], [-26, 64], [-28, 51], [-25, 19], [-15, 17], [-15, 27], [-31, 28], [-78, -40], [-98, 31], [-38, -30], [-16, 19], [-9, 35], [9, 59], [2, 125], [12, 88], [-6, 67], [6, 31], [4, 43], [-15, 17], [-70, 34], [-15, 27], [-18, -31], [-84, -17], [-31, -26], [-29, -49], [-8, -64], [17, -41], [11, -73], [-30, -158], [-5, -46], [12, -194], [-5, -106], [-16, -71], [-26, -63], [-11, -109], [-20, -50], [-28, -114], [-18, -143], [-13, -66], [-8, -122], [-56, -184], [-13, -104], [-20, -40], [7, -31], [1, -52], [-7, -139], [-2, -115], [8, -62], [27, -122], [-6, -36], [-3, -50], [22, -23], [17, -7], [91, 58], [31, -15], [12, -54], [8, -47], [15, -254], [8, -48], [19, -45], [20, -47], [7, 8], [1, 18], [1, 20], [19, -48], [14, -90], [48, -476], [14, -61], [11, -63], [-29, 31], [-8, 105], [-8, 45], [-11, 6], [-16, 0], [-1, 18], [12, 35], [-2, 41], [-17, 34], [-27, -27], [1, -74], [12, -57], [46, -127], [15, -53], [18, -15], [27, 8], [32, -54], [25, -50], [63, -77], [38, 8], [41, 19], [27, -5], [27, -20], [32, -64], [52, -161], [84, -134]], [[77810, 55553], [-69, 178], [-48, 73], [6, 132], [-14, 26], [-18, 2], [-14, 37], [12, 79], [-19, -15], [-26, 3], [-21, 21], [-16, 109], [-11, 33], [-22, 58], [-29, 0], [-10, 27], [2, 70], [-21, 43], [-28, 36], [-23, 20], [-24, 114], [-19, 28], [-16, 22], [-22, -15], [-7, -41], [-15, -39], [-16, 5], [-16, 22], [-18, 114], [-4, 69], [5, 129], [23, 116], [13, 185], [20, 117], [13, 39], [20, 159], [39, 204]], [[69625, 75424], [-8, -2], [-15, 28], [-5, 19], [6, 5], [13, -13], [8, -23], [1, -14]], [[68821, 73255], [11, 42], [5, 139], [13, 49], [41, 86], [22, 66], [24, 54], [17, 18], [16, 42], [13, 48], [4, 31], [-1, 24], [-5, 15], [-23, 33], [-30, 51], [-16, 52], [-8, 66], [-3, 47], [28, 127], [-4, 21], [-8, 20], [-16, 13], [-24, 5], [-23, -6], [-30, 0], [-21, 7], [-5, 8], [-2, 58], [-5, 13], [-9, 11], [-60, 26], [-12, 12], [-2, 14], [21, 129], [9, 10], [9, 21], [14, 22], [49, 37], [53, -16], [47, -17], [46, -9], [16, -6], [27, -5], [18, 4], [12, 15], [22, 42], [7, 62], [8, 55], [13, 5], [13, -6], [7, 11], [3, 15], [2, 13], [6, 3], [9, -15], [6, 4], [5, 10], [-2, 11], [-11, 19], [-10, 31], [1, 10], [4, 11], [29, 10], [13, 2], [4, 11], [-1, 17], [-11, 10], [-40, -6], [-40, 1], [-5, 11], [2, 11], [6, 9], [84, 23], [44, -8], [32, -12], [13, 6], [-15, 52], [21, 5], [2, 18], [-27, 137], [15, 13], [15, 27], [-1, 51], [13, 25], [16, 17], [23, -17], [37, -51], [11, -10], [12, -2], [17, 15], [64, 50], [37, 29], [43, 41], [7, 16], [15, 62], [8, 4], [11, -6], [38, -65], [22, -41], [0, -14], [-6, -11], [1, -10], [31, -23], [0, -10], [-7, -20], [-3, -11], [-4, -4], [-42, -57], [-46, -63], [-1, -8], [-3, -16], [1, -16], [7, -13], [20, -9], [18, -12], [9, -33], [10, -31], [14, -7], [69, 19], [16, 3]], [[64752, 74195], [-3, -27], [-15, 81], [-7, 89], [9, 26], [11, -2], [-10, -32], [15, -135]], [[64976, 73354], [-5, 40], [-14, 148], [-7, 148], [1, 69], [8, 138], [-1, 69], [-3, 63], [3, 61], [6, 69], [4, 71], [-5, 49], [-15, 39], [-25, 49], [-4, 29], [-2, 33], [-24, 3], [-22, 34], [-17, 18], [-39, 20], [-19, 1], [-18, -14], [-13, -30], [-9, 47], [0, 49], [31, 102], [19, -30], [24, -12], [30, -2], [29, 8], [-6, 35], [-13, 20], [-17, 15], [-6, 46], [2, 48], [8, 45], [-9, 18], [-14, 11], [-32, -1], [-42, 12], [-42, 5], [-10, -53], [23, -70], [-19, 34], [-19, 46], [-26, 81], [-16, 96], [-3, 103], [14, 85], [18, 80], [11, 102], [15, 101], [15, -45], [17, -40], [24, -38], [13, -9], [39, -15], [25, 6], [27, 22], [26, -7], [22, -42], [20, -46], [29, -10], [61, 33], [29, 8], [25, -15], [13, -3], [13, 2], [-11, 42], [-5, 40], [15, 21], [48, -23], [31, 16], [8, 8], [7, 10], [3, 35], [-1, 36], [-4, 33], [-9, 29], [-22, 42], [-86, 98], [-28, 39], [-24, 50], [-16, 72], [-12, 74], [-11, 55], [-30, 129], [-12, 15], [-14, 7], [-36, 4], [-36, -10], [-58, -22], [-34, 7], [-15, -13], [-39, -55], [-18, -46], [-25, -106], [19, -34], [0, -22], [-15, -157], [9, -76], [-3, -6], [-7, 18], [-22, 78], [-38, 94], [-32, 145]], [[65549, 75646], [73, -7], [66, -6], [82, -7], [24, -7], [29, -6], [15, -1], [13, 25], [8, 14], [7, 11], [-2, 12], [-10, 11], [-16, 35], [-10, 126], [-5, 108], [19, 33], [22, 24], [32, 74], [17, 22], [26, 19], [84, 5], [36, 14], [11, 24], [19, 60], [6, 49], [11, 22], [12, 17], [13, -1], [25, -14], [19, -8], [14, -11], [12, -17], [12, -30], [2, -20], [6, -11], [9, -1], [7, 0], [5, 5], [3, 10], [-2, 13], [-16, 38], [-36, 70], [-24, 28], [-12, 15], [-2, 15], [15, 22], [15, 13], [26, -10], [34, -5], [15, 11], [16, 56], [39, -59], [41, -66], [15, -13], [29, -7], [24, -2], [11, -7], [11, -17], [21, -73], [22, -19], [27, -13], [86, 1], [27, -4], [21, -34], [14, -14], [6, -12], [-2, -15], [-5, -19], [-1, -37], [-1, -28], [-7, -14], [-2, -12], [6, -11], [40, -27], [13, -29], [10, -13], [3, -18], [-7, -12], [-19, 6], [-9, -19], [0, -34], [13, -32], [4, -30], [-9, -28], [-10, -40], [0, -28], [6, -16], [31, -29], [70, -73], [17, -3], [67, 17], [31, 1], [18, -11], [52, -10], [17, -12], [17, -1], [24, 3], [16, 33], [9, 8], [7, 5], [15, 1], [41, -21], [43, -44], [29, -40], [14, -36], [17, -79], [22, -121], [26, -82], [30, -43], [22, -78], [18, -170], [12, -35], [12, -18], [34, -49], [71, -82], [42, -48], [65, -77], [60, -71], [60, -109], [11, -15], [53, -59], [58, -61], [41, 14], [62, -93], [25, -34], [10, -12], [45, -37], [71, -76], [90, -110], [59, -64], [16, -7], [16, 0], [17, 14], [19, 11], [32, -14], [34, -26], [22, -19], [25, -28], [20, -26], [15, -13], [51, -23], [9, -14], [6, -15], [0, -16], [-28, -84], [-4, -108], [-1, -81], [4, -63]], [[84454, 46462], [45, 49], [68, 38]], [[84700, 46691], [29, 48], [25, 88], [17, 34], [40, 33], [16, 9], [118, 48], [28, 3], [74, -1], [100, 10], [24, 7], [32, 21], [31, 26], [16, 21], [18, 14], [25, -18], [44, -14], [11, -13], [11, -17], [-50, -92], [-56, -76], [-34, -23], [-35, -15], [-27, -29], [-23, -46], [-29, -26], [-32, -9], [-28, -14], [-26, -27], [-35, -46], [-14, -5], [-15, 1], [-29, -17], [-91, -67], [-55, -73], [-40, -63]], [[84901, 47154], [-19, -99], [-20, 21], [22, 55], [10, 17], [7, 6]], [[1413, 39573], [-2, -87], [-13, 40], [-2, 18], [14, 27], [3, 2]], [[1344, 39648], [4, 0], [4, 17], [15, 7], [-1, -19], [-21, -59], [-12, 23], [-37, 38], [-8, 29], [13, 23], [-2, -18], [6, -8], [21, -4], [19, -15], [-12, -6], [11, -8]], [[1680, 41106], [-11, -34], [-5, 0], [-12, 20], [-5, 13], [19, 40], [10, 3], [12, -13], [0, -12], [-8, -17]], [[33052, 57680], [-45, -32], [-118, -8], [-48, 12], [-37, -9], [67, 70], [8, 30], [29, 6], [9, 9], [9, 155], [-4, 38], [-5, 20], [-12, 15], [-26, 20], [-5, 11], [17, 17], [35, 9], [26, 19], [55, 4], [26, 16], [45, 5], [-22, -71], [-10, -27], [4, -65], [-5, -43], [6, -55], [13, -37], [-9, -35], [-1, -54], [-2, -20]], [[33123, 58282], [-15, -6], [2, 23], [26, 40], [41, 26], [10, 1], [-6, -35], [-58, -49]], [[53043, 71268], [-7, -3], [-13, -16], [-8, -1], [-20, 17], [-7, 0], [-10, 12], [3, 68], [3, 19], [49, 2], [27, -40], [4, -10], [1, -12], [-12, -22], [-10, -14]], [[53132, 71862], [-43, -41], [9, 36], [28, 43], [7, -10], [-1, -28]], [[52382, 73120], [68, 35], [66, 91], [23, 22], [152, 84], [19, -6], [22, -12], [-6, -31], [-9, -25], [13, -44], [18, 27], [-4, 18], [-1, 23], [31, 2], [28, -3], [30, -26], [-2, -100], [40, -97], [-11, -48], [33, -29], [29, 35], [15, 51], [54, 29], [52, 74], [28, 8], [6, -61], [14, -54], [-19, -18], [-25, -57], [-47, -144], [-43, -42], [-33, -56], [-10, -39], [-3, -46], [8, -82], [23, -84], [28, -51], [26, -15], [61, -80], [-1, -47], [9, -57], [3, -68], [21, -55], [-45, -119], [-25, -86], [-49, -118], [-43, -77], [-93, -115], [-23, -38], [-15, -39], [-7, -41], [3, -49], [30, -119], [41, -70], [41, -38], [72, 16], [-2, -46], [5, -55], [29, 3], [20, 8], [16, 54], [36, -37], [18, -111], [30, -35], [3, -13], [-10, -9], [-9, -13], [9, -9], [29, -14], [17, 9], [29, -24]], [[57213, 74963], [-64, -18], [-19, 17], [20, 35], [37, 22], [12, 2], [16, -34], [-2, -24]], [[59970, 72532], [17, 47], [-19, 93], [-21, 86], [20, 56], [41, 67], [44, 79], [0, 48], [-3, 37], [-12, 25], [-24, 34], [-40, -36], [-29, -40], [-18, -8], [-21, -23], [-10, -41], [-24, -32], [-40, -13], [-60, 35], [-65, 52], [-37, 42], [-30, 10], [-28, -18], [-84, -104], [-77, -152], [-19, -26], [-72, -65], [-48, -22], [-22, 5], [-95, -29], [-48, -4], [-37, -34], [-72, 37], [-44, 48], [-26, 48], [-42, 105], [-31, 49], [-67, 45], [-119, 108], [-31, 12], [-80, 16], [-85, 10], [-18, -40], [-6, -156], [-15, -43], [-6, -81], [-10, -24], [-17, -15], [-25, 26], [-18, 11], [-41, -33], [-82, -47], [-28, -7], [-94, 59], [-35, 38], [-22, 42], [-8, 71], [-14, 40], [-2, 28], [-5, 31], [-19, 13], [-21, -24], [-22, 1], [-27, 15], [-65, 59], [-50, 5], [-30, -73], [-24, -23], [-25, -7], [-2, 21], [20, 47], [-78, -9], [-41, -35], [-32, 5], [-24, 16], [3, 20], [25, 7], [21, 16], [84, 13], [20, 13], [21, 51], [40, 44], [5, 19], [-31, 0], [-129, -13], [-89, 7], [-10, -21], [-14, -4], [-3, 60], [14, 27], [19, -3], [46, 24], [-4, 49], [-33, 34], [-7, 19], [-24, 5], [-20, 23], [-4, 59], [-15, 65], [-23, 31], [3, 17], [41, 22], [8, 90], [-6, 56], [-20, 4], [-60, 44], [-18, -4], [-20, 48], [-35, 34], [-17, -12], [-11, -16], [-16, 7], [-26, 30], [-27, 17], [-12, 20], [15, 53], [20, -1], [4, 42], [-16, 70], [2, 36], [17, 9], [20, -6], [21, -42], [6, -41], [-4, -39], [13, -38], [9, -10], [6, 41], [9, 7], [12, -17], [25, -9], [66, 24], [12, 21], [-48, -2], [-17, 19], [-20, 44], [-11, 40], [-3, 19], [-6, 29], [7, 15], [33, 23], [29, 64], [-12, 18], [-14, 9], [-15, -6], [-14, 22], [-2, 30], [12, 25], [1, 34], [-38, 83], [-10, 18], [8, 28], [29, 45], [27, 57], [-4, 19], [-20, 7], [-95, -24], [-37, -21], [-66, -10], [-5, 31], [2, 28], [15, 50], [-2, 125], [9, 67], [37, 20], [45, 100], [73, 117], [76, -3], [30, 33], [45, 2], [9, -24], [5, -22], [40, -33], [70, 5], [17, 13], [16, 18], [-32, 57], [10, 17], [29, 2], [32, -14], [2, -13], [-9, -18], [-10, -32], [10, -6], [90, 19], [95, -15], [30, 8], [75, 0], [13, 19], [-22, 25], [-22, 9], [-15, 12], [-15, 18], [47, 55], [27, 11], [126, 34], [94, 17], [1, 13], [-14, 0], [-121, 28], [-29, 22], [-40, 52], [-9, 15], [-10, 25], [6, 55], [7, 43], [15, 25], [48, 4], [166, -44], [119, 27], [129, -65], [123, 13], [26, 29], [31, 93], [174, 156], [61, 80], [66, 45], [112, 49], [94, 65], [27, 7], [225, -31], [155, -4], [71, 62], [42, -21], [-4, -22], [-8, -19], [3, -38], [24, -55], [24, -38], [73, -55], [100, 46], [16, -5], [21, -13], [35, -147], [28, -52], [35, -36], [29, -7], [21, 37], [17, 15], [36, 6], [60, -50], [21, -53], [101, -40], [93, -20], [40, -45], [131, -44], [49, 7], [82, 46], [159, 51], [106, -71], [29, -9], [25, 6], [35, -20], [38, 11], [117, 84], [37, 48], [39, 12], [34, 29], [92, 93], [27, 54]], [[57781, 76018], [-7, -65], [17, -73], [41, -100], [41, -51], [167, -126], [31, -11], [-7, -51], [-10, -46], [-11, -30], [-49, -20], [-135, 56], [-34, 6], [-24, -12], [-45, -40], [-49, 13], [-69, -23], [-19, -77], [-48, -88], [-79, -71], [-56, -38], [-84, -136], [-39, -80], [-16, -15], [-19, -13], [6, 39], [10, 35], [-2, 26], [0, 38], [28, 44], [26, 31], [76, 58], [20, 47], [-60, -1], [-60, -11], [-38, 7], [-33, -4], [-11, 42], [-8, 25]], [[82890, 65968], [12, -38], [-5, -24], [-38, 13], [-2, 23], [14, -4], [19, 30]], [[83613, 64873], [-17, -68], [-14, -71], [-6, -68], [1, -69], [-4, -63], [-7, -62], [-27, 18], [-15, 44], [-3, 73], [-20, 88], [-7, 26], [-28, 49], [-26, 25], [-20, 36], [3, -3], [-15, 49], [-11, 52], [-23, 148], [-8, 36], [-10, 32], [-3, 33], [3, 36], [10, 53], [6, 54], [-5, 74], [2, 73], [8, 32], [130, 443], [36, 94], [22, 47], [18, 52], [17, 66], [22, 60], [15, 19], [75, 54], [23, 52], [19, 16], [21, -1], [14, -25], [12, -29], [13, -16], [33, -28], [15, -28], [6, -48], [-20, -45], [-10, -41], [-2, -45], [4, -61], [0, -61], [-25, -143], [-27, -90], [-7, -44], [-9, -111], [-16, -111], [-13, -140], [-22, -145], [-13, -61], [-16, -58], [-37, -109], [-42, -90]], [[61030, 47247], [-15, -7], [-6, 7], [-9, 24], [16, 21], [16, 39], [36, 59], [12, 38], [5, 8], [-3, -45], [-20, -99], [-18, -7], [-14, -38]], [[60971, 48286], [21, -123], [-3, -23], [-15, -14], [-8, -1], [-9, 20], [-7, 41], [-11, -10], [-19, 50], [-20, 2], [-17, 59], [7, 51], [-4, 88], [21, 45], [12, 76], [13, -52], [3, -80], [18, -95], [15, -29], [3, -5]], [[61073, 49017], [2, -30], [-5, -27], [1, -87], [-1, -58], [-16, -80], [-13, -28], [-12, 8], [-9, 13], [-8, 22], [15, 147], [-7, 107], [30, -10], [23, 23]], [[60894, 49140], [-5, -49], [-22, -117], [-1, -49], [-9, -58], [-8, -38], [-22, -165], [-19, -62], [-25, -145], [-5, -111], [15, -78], [5, -72], [30, -72], [23, -25], [17, -33], [28, -74], [17, -75], [51, -37], [20, -83], [-7, -58], [-24, -48], [-22, -77], [-18, -102], [-1, -155], [13, 23], [27, -38], [3, -114], [-28, -134], [-8, -62], [-2, -53], [21, -160], [30, -81], [-2, -26], [-8, -21], [53, -144], [-5, -125], [20, -97], [9, -84], [13, -65], [2, -44], [-16, -50], [39, -12], [22, -41], [11, -39], [28, 2], [15, -26], [22, -22], [47, -65], [13, -33], [5, -19], [3, -12]], [[59144, 46424], [-16, 15], [-30, 34], [-41, 29], [-33, 34], [-15, 32], [-32, 13], [-27, 5], [-26, 30], [-26, 4], [-26, 7], [-5, 20], [-1, 45], [-9, 11], [-19, 12], [-21, -1], [-12, -6], [-7, 3], [-17, 26], [-16, 33], [-6, 53], [-24, 35], [-27, 27], [-76, -3], [-12, 8], [-18, 27], [-21, 44], [-18, 51], [-14, 69], [-8, 42]], [[58474, 51228], [3, 3], [22, -5], [21, 11], [19, 25], [19, 8], [4, -3], [5, -2], [30, 0], [49, 0], [49, 0], [50, 0], [49, 0], [49, 0], [50, 0], [49, 0], [50, 0], [49, 0], [49, 0], [50, 0], [49, 0], [50, 0], [49, 0], [49, 0], [50, 0], [30, 0]], [[58892, 78458], [38, -29], [-39, 8], [-86, 27], [-38, 25], [-10, 28], [-5, 38], [21, -40], [15, -18], [104, -39]], [[60614, 78969], [-10, -6], [-97, 9], [-79, -13], [-56, -91], [-34, 1], [-48, -24], [-32, -29], [-38, -64], [-29, 28], [-36, 0], [-36, -18], [-42, -42], [-24, -8], [-47, 12], [-55, -24], [-118, -140], [-40, -102], [-15, -20], [-20, -25], [-21, -13], [-11, 1], [56, 73], [17, 27], [3, 20], [1, 33], [-17, 40], [-47, -100], [-26, -14], [-33, -30], [-2, -67], [4, -50], [14, -63], [32, -102], [66, -146], [31, -54], [24, -22], [28, -3], [53, 46], [23, 7], [50, -18], [18, 31], [26, 16], [33, 2], [38, -13], [41, -23], [-17, -52], [-17, -41], [-7, -45], [-9, -51], [-46, -23], [-48, 3], [-52, -15], [-18, 20], [-12, 18], [-23, 18], [-30, 10], [-27, -12], [-32, -69], [-56, -47], [-19, -54], [-56, 12], [-47, -10], [-69, -49], [-52, -106], [-57, -66], [-46, -21], [-43, 7], [-28, 20], [-57, 69], [4, 25], [8, 13], [10, 35], [23, 131], [-3, 43], [-13, 66], [-45, 52], [-36, -9], [-21, 13], [-75, 89], [-40, 6], [-45, -18], [-16, 13], [-13, 31], [89, 109], [88, 90], [38, 9], [52, 42], [55, 63], [-8, 49], [-12, 37], [-26, -10], [-20, -13], [-46, 40], [-17, 29], [-72, -30], [-40, 4], [-89, -28], [-41, 27], [-82, 76], [-30, 15], [-27, -3], [-14, 24], [18, 13], [20, 1], [21, 9], [6, 13], [-1, 25], [-43, 19], [-39, 5], [-25, 22], [-19, 26], [44, 0], [45, -19], [71, -7], [64, -20], [16, 25], [37, 42], [7, 14], [-62, -29], [-63, 18], [-23, 26], [-20, 39], [-8, 43], [5, 41], [-6, 73], [-21, 65], [-8, 36], [-22, 32], [22, -73], [8, -48], [13, -44], [-3, -118], [-8, -41], [-26, -11], [-34, 6], [-35, 13], [9, 65], [-18, -22], [-27, -64], [-23, -9], [-50, 7], [-95, -42], [-7, -45], [-14, -62], [-14, -36], [-4, -21], [-40, -93], [-5, -9], [-76, -128], [-10, -10], [-49, -30], [-30, -26], [-22, -12], [-38, 13], [-15, -19], [-8, -23], [0, -47], [19, -34], [16, -114], [-6, -48]], [[35174, 32406], [-13, -21], [-15, -41], [-17, -97], [-58, -133], [-12, -76], [-62, -78], [-44, -89], [-29, 2], [-26, -38], [-149, -115], [-54, 22], [-39, -1], [-37, 51], [-84, 19], [-53, -21], [-71, -56], [-21, 1], [-15, 3], [-39, 23], [-21, 50], [-108, 57], [-88, 129], [-104, 2], [-79, -17], [-12, 18], [-8, 33], [-17, 48], [-68, 114], [-54, 113], [-10, 111], [7, 121], [16, 144], [-2, 44], [19, 26], [20, 5], [19, 37], [17, 56], [3, 43], [-13, 78], [-10, 110], [-10, 55]], [[6783, 62794], [-12, -27], [-16, 2], [-55, 59], [-7, 32], [4, 148], [-21, 120], [-23, 91], [17, 47], [22, 37], [25, 69], [-21, 88], [6, 53], [11, 9], [59, -65], [117, -97], [31, -68], [6, -74], [21, -9], [11, -50], [30, -44], [11, -26], [-13, -40], [-56, -78], [-72, -34], [-62, -87], [-13, -56]], [[6431, 63808], [-17, -16], [-18, 8], [-4, 39], [-17, 50], [30, 10], [17, -14], [9, -16], [11, -27], [-11, -34]], [[6531, 63901], [8, -11], [29, 16], [22, 5], [35, -38], [13, -26], [23, -27], [8, -21], [-6, -24], [-26, -40], [-36, -10], [-20, -17], [-28, 4], [-8, 7], [-3, 51], [-9, 55], [-17, -7], [-20, 19], [-21, 46], [-2, 27], [11, 44], [20, 5], [15, -24], [12, -34]], [[6329, 64063], [59, -15], [14, 6], [10, -12], [48, -8], [9, -5], [-10, -30], [-31, -27], [-45, 24], [-75, 8], [3, 23], [7, 16], [1, 29], [10, -9]], [[6167, 64202], [9, -3], [13, 4], [4, -46], [14, -25], [5, -15], [-15, -16], [-30, -7], [-14, 13], [-15, 29], [-15, -8], [-3, 23], [-3, 6], [-11, -6], [10, -30], [-27, -2], [-9, 4], [-7, 34], [-28, 64], [0, 25], [-10, 31], [42, 8], [28, 53], [16, 5], [31, -85], [0, -24], [6, -23], [9, -9]], [[5505, 64424], [-5, -26], [-10, 4], [-2, 23], [6, 31], [16, 27], [18, 41], [14, -6], [-8, -27], [-1, -29], [-20, -16], [-8, -22]], [[5730, 64476], [-25, -32], [-14, 14], [-27, 5], [-10, 25], [-29, 22], [-11, 30], [17, 56], [41, 48], [63, -2], [14, -38], [1, -28], [-8, -31], [-4, -45], [-8, -24]], [[27282, 65981], [-7, -1], [-1, 9], [12, 11], [9, -1], [-1, -12], [-12, -6]], [[27342, 66013], [-18, -6], [15, 23], [5, 34], [8, -26], [0, -17], [-10, -8]], [[27407, 66042], [-9, -12], [-4, 4], [0, 17], [-11, 39], [0, 10], [27, -38], [1, -10], [-4, -10]], [[27487, 66080], [-12, -13], [-13, 10], [14, 13], [43, 15], [-16, -18], [-16, -7]], [[27547, 66130], [-5, 0], [2, 9], [11, 16], [4, -6], [0, -9], [-12, -10]], [[27600, 66188], [-7, -3], [11, 25], [3, -2], [-7, -20]], [[27671, 66325], [-55, -108], [6, 27], [22, 58], [7, 28], [14, 17], [14, 31], [1, 37], [20, 25], [6, 4], [-35, -119]], [[27212, 67081], [-10, -15], [-20, 11], [-11, 20], [-5, 38], [17, -41], [7, -9], [22, -4]], [[27199, 67138], [-1, -34], [-14, 57], [-9, 62], [13, -20], [11, -65]], [[23008, 66911], [-4, -26], [-23, 125], [-37, 282], [-2, 161], [6, 56], [10, -228], [41, -289], [9, -81]], [[22957, 67568], [-9, -33], [3, 50], [22, 112], [46, 147], [20, 25], [-53, -162], [-29, -139]], [[27726, 67556], [4, -42], [-25, 98], [-32, 154], [-17, 120], [12, -33], [11, -66], [47, -231]], [[23051, 67915], [-6, -1], [14, 47], [2, 19], [22, 59], [12, 9], [5, -25], [-23, -42], [-26, -66]], [[23121, 68060], [-10, -3], [12, 31], [21, 16], [45, 60], [18, 4], [10, 20], [4, 3], [-3, -25], [-36, -36], [-61, -70]], [[23600, 68632], [-14, -6], [61, 89], [12, 29], [16, -1], [-27, -50], [-48, -61]], [[24502, 68836], [-11, -8], [-46, 50], [-3, 21], [23, 20], [14, -2], [22, -25], [8, -8], [3, -10], [-2, -16], [-8, -22]], [[26414, 68918], [-28, -21], [-30, 15], [19, 3], [13, -6], [35, 30], [18, 22], [21, 9], [-48, -52]], [[25308, 68958], [-15, -30], [1, 12], [11, 30], [8, 11], [-5, -23]], [[25325, 69013], [-7, -18], [7, 87], [-11, 74], [12, -32], [4, -39], [-5, -72]], [[25215, 69172], [1, -27], [-13, 14], [-20, 1], [8, 9], [7, 9], [3, 10], [25, 33], [-7, -25], [-4, -24]], [[25400, 69248], [-3, -6], [-25, 12], [-15, 11], [-2, 11], [41, -20], [4, -8]], [[25535, 69269], [-24, -12], [-36, 1], [-8, 4], [15, 8], [43, 11], [10, -12]], [[27383, 69683], [-12, -140], [-5, 50], [-1, 48], [9, 28], [9, 14]], [[17125, 70753], [-16, -6], [-18, 12], [-16, 56], [-17, 43], [9, 13], [14, -42], [35, -64], [9, -12]], [[16823, 70977], [-13, -1], [-17, 5], [-8, 31], [13, 2], [13, -4], [10, -24], [2, -9]], [[17125, 71074], [14, -42], [-20, 5], [-21, -3], [-6, 24], [-7, 32], [-4, 8], [-14, 3], [-1, 3], [-2, 15], [4, 8], [45, -36], [12, -17]], [[16654, 71381], [-19, -8], [-15, 8], [-23, 55], [50, 7], [21, -24], [3, -7], [-17, -31]], [[16581, 71442], [-14, -1], [-23, 6], [8, 13], [12, 10], [4, -7], [13, -21]], [[16699, 71474], [57, -30], [30, 14], [6, -14], [-4, -12], [-69, -23], [-21, 16], [-2, 21], [-7, 21], [10, 7]], [[28737, 71805], [-6, -1], [-11, 6], [-15, 12], [-4, 9], [15, -3], [21, -23]], [[28749, 71798], [-7, -6], [25, 72], [50, 91], [14, 14], [-42, -78], [-40, -93]], [[28949, 72113], [-50, -41], [-6, 3], [33, 29], [23, 9]], [[29015, 72142], [-37, -16], [-3, 6], [42, 32], [14, 116], [2, 53], [-7, 95], [1, 19], [6, -30], [7, -88], [-3, -67], [-12, -97], [-10, -23]], [[28990, 72497], [-4, -12], [-19, 64], [19, -21], [4, -17], [0, -14]], [[29074, 73668], [-13, -10], [43, 116], [24, 96], [11, 34], [-10, -68], [-19, -62], [-36, -106]], [[29407, 74700], [-32, -87], [-1, 17], [41, 108], [-8, -38]], [[29392, 75185], [-13, -2], [13, 55], [24, 25], [9, -5], [0, -19], [-3, -17], [-16, -26], [-14, -11]], [[29858, 75452], [-20, -37], [18, -4], [16, 11], [14, 22], [34, 30], [29, 13], [9, 3], [13, -21], [28, 17], [28, 9], [-121, -96], [-25, -11], [-36, -28], [-33, -21], [-24, -7], [-120, -71], [-10, -2], [-10, 7], [-99, -36], [-40, -5], [-37, -12], [27, 29], [1, 11], [-7, 9], [-14, -3], [-15, -30], [-24, -10], [-5, 33], [8, 26], [11, 24], [24, 38], [34, 24], [17, 21], [12, -18], [2, 25], [10, 14], [10, 8], [24, 0], [12, 4], [10, 8], [9, 2], [27, -12], [25, 4], [21, 15], [22, 5], [56, 4], [57, 11], [23, 21], [47, 56], [28, 16], [-43, -66], [-23, -30]], [[30561, 75613], [-21, -9], [-49, 21], [40, 18], [7, 6], [5, 27], [1, 13], [15, -57], [2, -19]], [[30414, 75677], [-77, -28], [-12, 18], [19, 8], [24, 43], [16, 5], [25, -24], [5, -22]], [[30176, 75740], [-8, -11], [-3, 28], [6, 32], [5, 0], [3, -17], [-3, -32]], [[30210, 75743], [-13, -15], [-16, 2], [8, 22], [3, 31], [8, 34], [4, 11], [9, 9], [-3, -94]], [[30938, 77301], [-11, -11], [-11, 3], [0, 29], [3, 9], [4, 5], [6, -8], [9, -27]], [[31059, 77380], [-16, -11], [-18, 4], [0, -30], [-2, -11], [-19, 16], [-8, 10], [1, 40], [17, 38], [14, 15], [17, -10], [13, -43], [1, -18]], [[15874, 79034], [-3, -11], [-4, 1], [-8, 23], [-1, 16], [7, 12], [10, -34], [-1, -7]], [[16001, 79144], [-1, -13], [-10, -10], [-6, 2], [0, 16], [-3, 2], [-12, -18], [1, 36], [6, 39], [5, 1], [7, -26], [13, -29]], [[15973, 79259], [-2, -11], [-15, 13], [-5, 12], [1, 27], [3, 18], [3, 4], [9, -8], [3, -4], [3, -51]], [[15952, 79583], [13, -76], [6, 31], [38, -54], [0, -27], [-4, -9], [-8, -3], [-8, 8], [-6, 19], [-9, 10], [-18, 6], [-9, 21], [-4, 15], [0, 42], [-5, 14], [-10, 2], [-9, 11], [-14, 29], [-2, 8], [7, 24], [15, 41], [11, 19], [7, -2], [9, -13], [10, -22], [-2, -15], [-41, -31], [-2, -7], [21, -9], [7, -7], [7, -25]], [[15883, 79741], [-4, -6], [-15, 8], [-9, 13], [-3, 16], [6, 30], [7, 8], [5, -2], [2, -27], [13, -28], [-2, -12]], [[15830, 79781], [7, -19], [-30, 12], [-13, 11], [-3, 11], [-5, 34], [2, 12], [13, 4], [25, -43], [4, -22]], [[15894, 79880], [3, -13], [-11, -12], [-8, -2], [-12, 20], [-6, 2], [5, -30], [-2, -10], [-26, 18], [-5, 15], [8, 16], [16, 16], [6, 2], [32, -22]], [[31354, 77862], [-2, -18], [8, -29], [6, -57], [-9, -26], [2, -34], [26, -10], [6, -10], [1, -13], [-57, -88], [-48, 13], [-26, -24], [-27, -6], [-12, -40], [-15, -8], [-20, 3], [-18, 11], [-13, -6], [-19, -70], [-16, 6], [-6, -26], [-8, -11], [-12, -9], [-10, 31], [-7, 30], [-9, 6], [-13, 8], [-13, 0], [-9, -5], [-11, -19], [-16, -16], [-12, 13], [-9, 23], [-8, -36], [-12, -38], [2, -44], [-5, -26], [-11, 7], [-11, 23], [-31, 18], [-25, -1], [5, 24], [24, 35], [-8, 7], [-11, -5], [-5, 5], [8, 32], [1, 35], [-10, -12], [-14, -37], [-31, -30], [1, -49], [-30, -102], [-1, -43], [-19, -34], [-25, -30], [-33, 9], [-25, -26], [-13, -29], [-11, -5], [-5, 38], [-5, 11], [-9, -55], [-9, -4], [-4, 40], [-4, 26], [-13, -23], [-9, -59], [-9, 5], [-2, 22], [-7, 7], [-2, -25], [3, -36], [-5, -19], [-8, 10], [-9, 17], [-15, -13], [-14, -5], [0, 17], [3, 22], [-27, -12], [-32, -39], [-26, -55], [9, -9], [10, -17], [-44, -84], [-44, -76], [-34, -123], [-14, -15], [-11, -22], [-13, -75], [-14, -66], [8, -30], [5, -30], [13, -30], [11, -3], [11, 5], [9, -1], [5, -13], [-2, -15], [-13, -4], [-26, -26], [-22, -11], [-11, -32], [-16, -37], [-32, -58], [13, -18], [50, -20], [22, -21], [34, -109], [-8, -10], [-3, -20], [30, -28], [9, -78], [25, -27], [36, -16], [45, 24], [37, 32], [-1, 27], [-24, 61], [-5, 29], [-18, 19], [-6, -16], [-11, 21], [-2, 12], [11, 5], [12, -2], [14, -11], [36, -67], [10, -89], [3, -56], [-4, -19], [-11, 4], [-20, -4], [-96, -29], [-21, -25], [-49, -28], [-3, 14], [3, 28], [-3, 59], [-10, 3], [-75, -96], [-30, -6], [-24, -28], [-6, 16], [-4, 71], [15, 61], [-8, -1], [-26, -36], [-11, 22], [-5, 24], [-8, 14], [-9, 5], [7, -53], [-17, -40], [-5, -104], [-22, -43], [-68, -27], [-45, 6], [-40, -9], [-53, -20], [-29, 12], [-30, -21], [-103, -6], [-21, 11], [-28, -39], [-44, -24], [-111, -88], [-25, -33], [-29, -50], [-21, -27], [-16, -9], [-10, -22], [-11, -15], [10, 50], [12, 43], [10, 82], [-3, 66], [-12, 28], [-12, 18], [14, -66], [2, -80], [-5, -47], [-27, -91], [-12, -21], [-13, -19], [-10, -8], [-10, -15], [-11, -23], [-10, -45], [6, -42], [53, -15], [15, 13], [7, -30], [4, -42], [-4, -45], [-9, -45], [-7, -57], [-5, -86], [-9, -78], [-1, 24], [5, 94], [-9, -10], [-6, -22], [-16, -121], [-22, -65], [-21, -45], [-21, 7], [5, -36], [-6, -18], [-5, -39], [-13, -26], [-12, 3], [-17, -18], [-6, -13], [-1, -26], [-11, -23], [-42, -119], [-35, -35], [-9, 5], [10, 56], [6, 57], [-22, 24], [-21, 13], [-23, -1], [-27, 44], [-34, 32], [-47, 86], [1, 24], [-1, 41], [14, 63], [14, 45], [19, 23], [56, 23], [14, 36], [8, 30], [-28, -52], [-41, -17], [-22, -19], [-18, -29], [-10, -37], [-24, -44], [2, -29], [4, -21], [-2, -44], [15, -43], [30, -70], [5, -109], [23, -72], [35, -85], [27, -24], [1, -32], [-12, -52], [-17, -24], [22, 5], [10, -12], [10, -43], [0, -44], [-4, -25], [-6, -10], [0, 25], [-5, 9], [-7, -11], [-5, -13], [-2, -49], [-5, -25], [-18, -7], [-19, -66], [-17, -37], [-67, -249], [2, -42], [-12, -14], [-19, -11], [-19, -25], [-12, -27], [-12, -74], [-22, -84], [-14, 35], [-4, 30], [7, 77], [24, 128], [26, 79], [21, 37], [16, 76], [-21, 12], [-32, -1], [6, 35], [9, 31], [-16, 31], [-10, 4], [-10, 12], [12, 26], [5, 27], [-3, 34], [5, 25], [-9, -4], [-13, -27], [-8, -10], [-5, 23], [-6, -5], [-4, -16], [-9, -9], [-18, 22], [-26, 25], [-15, 43], [-8, 34], [8, 61], [18, 10], [24, -9], [31, 0], [-4, 13], [-11, -2], [-33, 49], [-11, 30], [-18, 8], [-8, -29], [-9, -7], [11, 62], [15, 3], [22, 17], [-6, 36], [-14, 16], [-25, -20], [0, 26], [5, 32], [19, 0], [16, -10], [14, 52], [1, 24], [-24, -34], [-5, 73], [23, 72], [22, 31], [27, -1], [28, 5], [-17, 13], [-18, 7], [13, 28], [12, 5], [11, 24], [-27, -3], [3, 46], [-13, -9], [-16, -5], [-6, -19], [1, -33], [-4, -21], [-13, -18], [-20, -13], [-2, 23], [-7, 11], [-3, -50], [-5, -17], [-15, 47], [-5, -10], [1, -13], [-4, -23], [-13, -12], [1, -29], [-5, -16], [-42, 25], [-1, -8], [24, -56], [17, -18], [2, -30], [-15, -25], [-20, 21], [-4, -1], [11, -37], [7, -33], [-7, -27], [1, -33], [-1, -30], [-5, -26], [10, -121], [12, -33], [12, -32], [6, -29], [-12, -5], [-20, 25], [-17, 18], [-21, 59], [-4, 24], [-5, 19], [3, -43], [7, -48], [65, -107], [12, -42], [9, -32], [-2, -31], [-17, 22], [-15, 28], [-38, 32], [-49, 19], [-28, 74], [1, -31], [-7, -26], [-16, 32], [-11, 27], [-4, 29], [-20, -2], [-22, -25], [-22, 6], [-2, 50], [5, 27], [24, 62], [23, 33], [10, 41], [-4, 64], [-4, -65], [-13, -33], [-20, -24], [-27, -44], [-6, -41], [-8, -77], [11, -25], [11, -7], [34, 17], [18, -8], [39, -91], [72, -37], [27, -23], [22, -48], [32, -27], [25, -40], [1, -27], [-9, -30], [-3, -42], [-11, -27], [-26, -3], [-15, 7], [-84, 147], [-10, 14], [-31, 77], [-36, 41], [-11, -1], [52, -76], [21, -53], [37, -75], [26, -32], [20, -50], [18, -23], [50, -33], [-18, -24], [28, -20], [4, -37], [-3, -42], [-38, 16], [-1, -31], [3, -18], [-16, -15], [-24, 20], [-61, 113], [1, -15], [5, -18], [35, -72], [31, -44], [27, -20], [21, -36], [7, -22], [5, -34], [-15, -22], [-18, -13], [-17, 23], [-12, 24], [-27, 40], [-8, 46], [-20, -3], [-84, 58], [-68, 7], [7, -12], [8, -8], [54, -14], [22, -26], [44, -24], [26, -6], [11, -73], [35, -49], [5, -37], [25, -4], [43, 36], [28, -13], [40, -10], [9, -30], [7, -55], [14, -63], [37, -246], [55, -202], [7, -34], [-13, 30], [-41, 134], [-23, 96], [-23, 170], [-7, 38], [-8, 16], [-5, -13], [-2, -21], [4, -17], [-9, -56], [4, -26], [14, -26], [17, -67], [13, -89], [-18, 36], [-19, 19], [-29, 15], [-25, 26], [1, -37], [-2, -40], [-20, 12], [-14, 13], [12, -42], [-26, 13], [-17, -3], [-11, -38], [-15, -23], [-23, -7], [-33, 34], [-11, 42], [-4, 47], [-2, -55], [6, -58], [-2, -43], [32, -9], [30, 8], [40, -2], [26, 8], [16, 14], [38, -12], [3, -53], [-4, -52], [-3, -56], [11, 0], [12, 18], [6, 100], [35, 37], [12, -3], [11, -32], [4, -32], [4, -45], [-9, -68], [-53, -80], [-38, -74], [-20, -15], [-28, 8], [-32, 19], [-15, 4], [-12, -6], [-8, 22], [-4, 42], [-13, 14], [-9, -2], [-7, -44], [-29, -13], [-41, 19], [-42, 37], [18, -40], [105, -74], [12, -14], [11, -20], [-15, -32], [-11, -36], [-2, -28], [-4, -18], [-42, -48], [-23, 9], [-58, 86], [27, -75], [21, -31], [43, -17], [80, 28], [26, -31], [-22, -54], [-21, -37], [-28, -5], [-25, -10], [-7, -26], [-18, -2], [-27, -1], [-43, -2], [-23, 6], [-33, -54], [-12, -7], [-18, 10], [-7, 43], [-8, 21], [0, -80], [3, -22], [6, -16], [-38, -43], [-37, -54], [-13, -15], [-15, -27], [-30, -78], [-8, -57], [-11, -64], [-1, 29], [2, 48], [-8, 55], [-5, -101], [-12, -47], [-109, 3], [-47, -25], [-74, -86], [-22, -38], [-60, -145], [-16, -94], [-12, 40], [3, 29], [0, 24], [-15, -51], [15, -76], [-13, -28], [-40, -54], [-22, -8], [-25, -16], [-8, -52], [-33, -49], [-19, -22], [-36, 13], [11, -46], [-13, -36], [-23, -27], [-28, -18], [-16, 2], [-13, -9], [-11, -23], [-26, -21], [-28, 12], [-30, 7], [-18, -12], [29, -21], [16, -31], [-3, -41], [-8, -15], [-18, -22], [-8, 3], [-5, 20], [-6, 40], [-9, -9], [-1, -18], [-8, -7], [-25, 64], [1, -49], [9, -37], [9, -19], [8, -12], [3, -17], [-18, -42], [-9, -10], [-16, -7], [-10, -26], [3, -22], [-14, -49], [-34, -30], [-10, 1], [-9, -9], [5, -22], [9, -16], [-1, -14], [-9, -20], [-17, -6], [-10, -23], [3, -21], [6, -12], [-1, -21], [-21, -20], [-4, -21], [10, -6], [7, 6], [6, -4], [-12, -34], [-11, -21], [-10, -37], [-24, -11], [1, -12], [13, -11], [12, -28], [-22, -53], [-13, 4], [-8, 12], [-5, -42], [2, -22], [-5, -46], [-8, -55], [-6, -22], [1, -42], [4, -41], [13, -52], [20, -214], [13, -74], [24, -200], [41, -194], [57, -235], [93, -284], [11, -40], [-12, -35], [-4, -35], [-1, -54], [3, -52], [11, -64], [22, -98], [-12, 20], [-31, 140], [-4, 82], [5, 117], [-7, -3], [-6, -38], [-3, -44], [-8, -18], [-11, 68], [1, 31], [11, 36], [-3, 13], [-18, 18], [-4, 29], [2, 29], [-10, 15], [-8, -1], [5, -70], [9, -43], [11, -104], [17, -63], [10, -52], [118, -561], [28, -72], [10, -51], [11, -107], [2, -138], [-19, -252], [-5, -171], [-2, 5], [-2, 18], [-5, 2], [-16, -78], [-23, -71], [-8, -110], [-10, -56], [-33, -58], [-20, 1], [-50, -43], [-35, 11], [-42, -25], [-27, 3], [-16, 52], [3, 23], [6, 24], [11, 5], [36, -54], [7, 23], [-11, 27], [-21, 15], [-16, 17], [-31, 125], [-33, 85], [-6, 57], [-56, 35], [-41, 53], [-27, 94], [-15, 166], [-18, 19], [-8, 13], [18, 62], [19, 51], [-15, -13], [-11, -19], [-14, -45], [-10, -7], [-9, 7], [-11, 87], [3, 108], [15, 40], [-23, 2], [-23, -16], [3, -36], [-3, -20], [-18, 6], [-13, 12], [-17, 38], [-25, 71], [-49, 197], [-10, 27], [-17, 29], [8, 9], [14, 6], [32, 88], [25, 54], [9, 37], [-2, 16], [-11, 23], [-14, -20], [-7, 5], [-16, 47], [-16, 13], [-11, -10], [12, -38], [10, -14], [-4, -56], [-4, -18], [-10, -16], [-15, 9], [-7, -14], [-9, 15], [-9, 24], [-10, 40], [26, 225], [24, 144], [3, 163], [2, 24], [-2, 44], [-33, 94], [-145, 231], [-112, 273], [-97, 103], [-74, -23], [-12, -21], [-6, -26], [5, -31], [-7, -13], [-20, 2], [-26, -7], [-70, -72], [-25, 3], [-22, -19], [-17, -14], [-43, -8], [-37, -15], [-16, 8], [-10, 42], [0, 43], [8, -33], [13, -26], [6, 10], [2, 23], [-13, 45], [-41, 58], [-48, 84], [14, -3], [4, 18], [-15, 24], [7, 27], [10, 29], [-20, -4], [-18, -21], [-1, -24], [-3, -20], [-10, 3], [-18, 24], [-89, 68], [-77, 39], [59, 17], [32, -14], [-3, 21], [-8, 13], [-26, 17], [-32, -7], [-21, 8], [-21, -16], [-22, -25], [-21, -12], [-80, -18], [-65, -19], [11, 20], [11, 13], [38, 20], [6, 41], [-9, 39], [-10, -9], [-11, -31], [-13, 22], [-14, 0], [-4, -49], [-19, -33], [-8, -33], [-54, -26], [-7, 9], [16, 31], [-1, 18], [-19, -15], [-30, -60], [-106, -19], [5, 13], [23, 3], [32, 19], [-7, 32], [-12, 34], [-11, 4], [-8, 21], [1, 64], [-7, 38], [-18, 39], [-6, -8], [-12, -66], [-11, -87], [-5, -28], [-32, -2], [-28, 6], [-95, -11], [-35, 30], [-15, 6], [-9, -1], [-41, -27], [-48, -21], [-11, 7], [-16, 1], [-34, -71], [-40, -33], [-102, 60], [-25, 47], [-22, 10], [-28, 6], [-29, -58], [-23, -79], [36, -44], [30, -21], [50, 18], [28, 38], [23, -1], [11, 8], [10, 20], [19, -16], [1, -16], [-14, -22], [-17, -19], [-11, -22], [20, -45], [31, -15], [12, 7], [7, 50], [19, 32], [26, -7], [-3, -20], [3, -19], [12, -33], [-1, -47], [2, -11], [-28, -20], [-21, -8], [-17, -27], [9, -15], [-17, -14], [-11, 6], [-6, -6], [-2, -16], [-9, -16], [13, -46], [26, -30], [19, -38], [74, -50], [18, 1], [18, -50], [14, -18], [14, -8], [-1, -35], [-25, -25], [-7, -31], [-6, -17], [-11, 22], [-11, 15], [-26, -47], [-13, -10], [6, 51], [-10, 20], [-15, 52], [-21, 31], [-16, 11], [-12, 20], [-14, 8], [-13, -2], [-21, 12], [-1, 27], [-6, 20], [-16, 25], [-78, 45], [-1, -19], [6, -14], [11, -9], [13, -19], [0, -54], [-6, -23], [-2, -33], [-5, -34], [-10, -26], [-21, -18], [-10, 15], [-15, 72], [-22, 23], [-34, 2], [-23, -16], [-25, -70], [-21, -11], [-70, 36], [-80, 55], [2, 18], [13, 6], [24, -7], [-1, 19], [-25, 61], [-4, 28], [3, 34], [-8, -1], [-15, -28], [-51, 24], [-14, 28], [-30, 81], [-42, 3], [-19, 49], [-35, -20], [-17, -23], [-15, -35], [6, -19], [15, -29], [-7, -14], [-49, -21], [-114, 24], [-34, 21], [-44, 46], [-62, 37], [-30, 6], [-29, -7], [-86, -4], [-19, -10], [-17, -16], [-11, 18], [-5, 31], [10, 5], [11, 19], [10, 36], [1, 22], [-7, 15], [-13, 1], [-29, -95], [16, -53], [-1, -19], [-58, -11], [-132, -107], [-51, -58], [2, 19], [62, 75], [-21, 12], [-36, -19], [-13, 7], [15, 62], [-4, 55], [-26, 1], [-16, -43], [-11, 1], [-14, 19], [-11, -6], [8, -98], [16, -41], [13, -52], [-36, -64], [-34, -53], [-3, -51], [-34, -66], [-32, -38], [-74, -88], [-22, -19], [-33, -42], [-47, -30], [-44, -49], [-15, -8], [28, 42], [34, 41], [-29, -6], [-44, 19], [-28, 1], [0, -15], [-21, -21], [-21, 31], [-9, 21], [-5, 18], [-9, 4], [-9, -8], [32, -127], [14, -5], [15, -13], [-19, -29], [-20, -23], [-32, -15], [-27, 47], [-6, -59], [-3, -58], [-9, -14], [-15, -22], [-7, 16], [-4, 23], [-9, -20], [-14, -15], [-22, -3], [-17, -8], [0, -24], [4, -24], [30, 19], [-11, -62], [-27, -62], [-23, -14], [-34, 9], [-8, -6], [-8, -13], [40, -96], [-25, -145], [-17, -52], [-11, -7], [-12, -2], [-44, 47], [-24, 36], [21, -98], [58, -29], [3, -37], [-1, -31], [-11, -38], [-11, -49], [8, -35], [9, -85], [8, -39], [8, -119], [10, -51], [52, -189], [18, -2], [2, -20], [-1, -40]], [[17464, 70583], [0, 4], [-2, 63], [-13, 22], [-17, -14], [-7, 82], [4, 39], [-2, 38], [-16, 92], [-41, 113], [-89, 140], [-46, 47], [-35, 59], [-23, 16], [-28, 5], [-9, -27], [-32, 18], [5, 66], [-32, 92], [-25, 10], [-65, -6], [-87, 50], [-25, 30], [-9, 54], [-41, 47], [-53, 46], [-30, -11], [-39, 7], [-55, 33], [-33, 4], [-63, -9], [-23, 7], [-22, 41], [-24, 21], [5, 51], [-3, 47], [4, 36], [-11, 79], [9, 73], [-8, 26], [-13, 21], [-42, 30], [-7, 37], [7, 52], [-11, 35], [-35, 32], [-32, 73], [-40, 39], [-17, 67], [-25, 42], [-8, 36], [-56, 131], [-59, 102], [-9, 58], [-2, 81], [23, 49], [12, 43], [-1, 39], [-4, 29], [-20, 51], [-79, 30], [-64, 124], [-4, 96], [-25, 98], [0, 63], [-4, 69], [19, 15], [17, -6], [-1, -27], [5, -49], [20, -37], [19, -16], [18, -36], [13, -11], [13, -3], [-7, 23], [-8, 15], [-9, 48], [-18, 61], [-20, 33], [-11, 61], [-9, 15], [-5, 22], [20, 27], [27, 19], [36, 6], [103, -9], [21, 15], [19, -5], [13, 2], [-28, 16], [-16, -5], [-18, 3], [-37, -3], [-15, 7], [-16, 19], [-11, 2], [-34, -33], [-15, 4], [-36, 36], [-15, 5], [-25, -20], [-4, -90], [8, -66], [-15, -7], [-17, 27], [-27, 17], [-22, 25], [-32, 46], [-16, 17], [-18, -39], [-1, 18], [9, 45], [-3, 75], [28, -60], [-8, 42], [-22, 47], [-17, 16], [-20, 83], [-47, 50], [-38, 80], [-77, 134], [-5, 117], [-28, 148], [12, 85], [-1, 59], [-14, 91], [-15, 49], [-62, 135], [-60, 90], [-9, 69], [-4, 69], [13, 62], [12, 64], [8, 17], [3, -7], [-2, -13], [8, -5], [3, 29], [6, 15], [-9, 2], [1, 9], [5, 18], [18, 85], [-1, 107], [19, 131], [-1, 44], [-12, 93], [-13, 56], [-23, 40], [10, 58], [0, 55], [-40, 80], [-15, 104], [-3, 45], [4, 116], [-11, 50], [-27, 82], [12, 72], [12, 43], [30, 190], [7, 15], [13, 0], [22, 32], [-10, 8], [-16, -16], [14, 75], [15, 64], [10, 24], [5, 209], [9, 160], [14, 53], [-5, 55], [6, 74], [-4, 74], [31, 359], [-4, 43], [9, 59], [-9, 153], [4, 171], [-8, 22], [-4, 24], [8, 3], [14, -25], [66, 0], [42, 24], [16, -8], [17, -31], [23, -7], [28, 6], [-9, 8], [-13, 2], [-29, 29], [-17, 28], [-51, -1], [-11, 18], [-58, -18], [-17, 19], [-32, -13], [8, 54], [-2, 68], [2, 66], [8, -48], [19, -52], [10, 59], [6, 72], [-19, 29], [-32, 20], [-11, 68], [75, 58], [-40, 12], [-15, 26], [-20, 4], [-1, -20], [-6, -27], [-7, 35], [-2, 41], [-8, 70], [-31, 113], [-18, 147], [-23, 72], [-45, 69], [-12, 40], [-11, 103], [7, 77], [-9, 54], [22, -3], [56, -42], [71, -34], [21, -24], [34, -19], [189, -28], [13, 3], [24, 17], [11, -2], [27, -40], [14, -4], [18, 2], [14, 7], [23, 28], [3, -11], [-1, -25], [8, -36], [17, -47], [7, -29], [-34, -82], [-7, -2], [-1, 28], [-4, 5], [-64, -139], [-22, -66], [-2, -29], [0, -18], [9, -4], [21, 7], [30, 27], [1, 6], [-28, -10], [-13, 0], [1, 31], [4, 14], [18, 47], [19, 27], [28, 30], [16, 24], [11, 35], [30, 43], [6, 11], [-2, 35], [2, 7], [15, -5], [6, -60], [-4, -27], [-26, -32], [-3, -12], [5, -44], [-5, -4], [-10, 5], [-3, -3], [25, -48], [8, -38], [1, -33], [-7, -65], [-7, -10], [-12, 3], [-17, 21], [-3, -7], [-13, -50], [-5, 4], [-8, 60], [-4, 4], [-25, -27], [-11, -26], [-8, -41], [-11, -20], [31, -4], [28, 8], [23, -19], [8, -1], [21, 19], [6, 14], [17, 62], [9, 11], [13, 1], [12, 9], [19, 34], [0, 14], [-6, 77], [2, 43], [-4, 14], [-8, 14], [1, 14], [6, 23], [1, 21], [-6, 18], [3, 21], [17, 45], [3, 20], [22, 45], [-6, 18], [-15, 22], [-10, 19], [-10, 30], [-8, 10], [-2, -4], [11, -50], [-3, -3], [-27, 27], [-7, 16], [-3, 23], [2, 17], [15, 17], [18, 6], [-2, 15], [-22, 46], [-15, 21], [-11, 10], [-15, 3], [-7, 7], [-2, 11], [3, 15], [9, 4], [23, -6], [13, 11], [-1, 18], [-4, 10], [1, 66], [-9, 53], [-5, 9], [-5, 1], [-6, -7], [-14, -2], [-10, 18], [-10, 34], [-18, 80]], [[99847, 81435], [-49, 0], [-97, 94], [-50, 29], [-28, 33], [13, 7], [60, -23], [49, -51], [27, -33], [31, -28], [34, -12], [10, -16]], [[1031, 81677], [-17, -34], [-13, 15], [-5, 47], [10, 12], [27, -34], [-2, -6]], [[1109, 81688], [-24, -12], [-31, 25], [3, 30], [34, -25], [18, -18]], [[589, 81595], [-6, -19], [-7, 0], [-37, 32], [-5, 11], [22, 15], [6, 11], [-3, 16], [-16, 21], [-30, 27], [-11, 20], [7, 12], [14, 7], [45, 2], [25, -34], [18, -12], [43, -8], [-22, -14], [-13, -13], [-15, -53], [-15, -21]], [[792, 81633], [-8, -7], [-15, -6], [-42, 6], [-26, -2], [-28, -4], [-22, -10], [-4, 14], [1, 12], [92, 32], [22, 16], [13, 21], [12, 39], [10, 12], [6, -1], [13, -15], [-5, -20], [-11, -18], [-4, -17], [-4, -52]], [[946, 81720], [2, -20], [32, 3], [10, -10], [0, -38], [-5, -11], [-4, -2], [-12, 8], [-13, -19], [-59, -48], [-18, 27], [-35, -42], [24, 108], [28, 16], [11, 12], [-3, 32], [13, 52], [28, -2], [13, -22], [0, -14], [-12, -30]], [[99603, 81748], [-17, -10], [-10, 25], [-1, 15], [10, 15], [17, -9], [10, -15], [-9, -21]], [[99923, 81742], [-23, -14], [-26, 7], [-15, 23], [2, 27], [34, 29], [43, -37], [-15, -35]], [[1105, 81798], [-6, -17], [-28, 18], [-9, 15], [-2, 15], [8, 25], [22, 0], [12, -10], [12, -19], [4, -12], [-13, -15]], [[99281, 81729], [-24, -24], [-19, 24], [-3, 12], [36, 42], [28, 9], [11, 15], [12, 53], [20, 2], [10, -6], [-5, -25], [-16, -38], [0, -27], [-50, -37]], [[1791, 81875], [54, -23], [68, 2], [25, -5], [0, -7], [-43, -10], [-15, 4], [-38, -13], [-26, -3], [-58, 13], [-46, -9], [-12, 3], [-14, 11], [-16, 18], [-1, 12], [15, 4], [40, -15], [4, 8], [34, 14], [29, -4]], [[2093, 81953], [-21, -8], [-22, 9], [10, 30], [11, 16], [21, 20], [24, -9], [19, -25], [-42, -33]], [[1478, 81817], [-149, -24], [-22, 16], [22, 10], [27, 5], [56, 27], [69, 23], [54, 29], [47, 18], [13, 30], [-41, 16], [-8, 12], [19, 14], [16, 21], [39, 25], [34, -31], [8, -20], [-4, -25], [-7, -25], [-30, -13], [-4, -13], [16, -38], [-62, -33], [-93, -24]], [[98255, 82004], [-18, -2], [-11, 20], [-60, 8], [6, 19], [26, 8], [39, 30], [33, -5], [-9, -28], [-6, -50]], [[2574, 82131], [-18, -18], [-5, 7], [-3, 23], [10, 17], [30, 38], [21, -7], [6, -10], [0, -14], [-8, -19], [-10, -10], [-12, 0], [-11, -7]], [[2863, 82285], [-4, -24], [-4, -8], [-43, 12], [-29, -4], [-3, 14], [3, 12], [45, 18], [18, 1], [12, -10], [5, -11]], [[98002, 82380], [48, -19], [33, 9], [41, -30], [52, -53], [-12, -10], [-13, -5], [-12, 0], [-40, -8], [-22, 2], [-40, -36], [-45, 26], [-15, 51], [-35, 12], [-28, 18], [51, 40], [37, 3]], [[3343, 82571], [-85, -61], [-28, -45], [-21, -44], [-16, -24], [-12, -4], [-14, -11], [-28, -31], [-12, -3], [-90, -71], [-6, -1], [4, 18], [28, 26], [18, 24], [20, 40], [11, 14], [4, 20], [1, 40], [5, 15], [20, 30], [14, 17], [18, 6], [38, -5], [16, 15], [4, 11], [-9, 11], [-2, 18], [2, 32], [11, 28], [19, 25], [27, 19], [33, 13], [24, 1], [44, -29], [7, -13], [-11, -29], [-6, -27], [-28, -25]], [[3831, 82789], [-4, -1], [-7, 14], [-1, 13], [5, 9], [13, 22], [9, 8], [11, 4], [3, -6], [-10, -26], [-12, -17], [-7, -20]], [[3718, 82891], [12, -27], [21, 17], [15, 24], [12, 31], [7, 12], [11, -16], [29, -22], [-25, -34], [-47, -51], [-16, -34], [-1, -15], [46, 12], [13, -2], [8, -12], [-13, -13], [-25, -13], [-21, -24], [-50, -42], [-19, -35], [-23, -14], [-30, -3], [-54, -23], [-32, -21], [-8, -12], [-11, -5], [-12, 1], [-13, -10], [-14, -19], [-12, -9], [-19, -2], [-11, -8], [-11, 0], [-31, 23], [-8, 14], [28, 27], [20, 9], [30, 4], [29, 25], [61, 34], [19, 18], [12, 63], [14, 11], [8, 25], [33, -1], [16, -28], [5, -4], [3, 3], [2, 22], [17, 16], [-10, 12], [-31, 15], [-23, 6], [-15, 0], [-13, 8], [-9, 17], [-5, 17], [1, 17], [8, 19], [14, 21], [17, 12], [36, 9], [32, 14], [17, 2], [13, -6], [3, -55]], [[3933, 82989], [-11, -10], [-8, -2], [-7, 6], [-28, -7], [-6, 4], [-13, 34], [-1, 18], [5, 14], [13, 13], [21, 11], [21, -2], [35, -32], [17, -18], [3, -12], [-12, -11], [-29, -6]], [[4011, 83027], [-12, -4], [-3, 6], [-2, 25], [-9, 40], [18, 15], [11, 3], [4, -6], [13, -30], [13, -8], [9, -6], [-16, -9], [-26, -26]], [[4846, 83180], [-24, -13], [-26, 13], [-22, 25], [-2, 28], [49, -18], [10, -9], [15, -26]], [[4917, 83436], [-6, -2], [-20, 17], [-7, 14], [-5, 20], [39, 30], [8, 0], [8, -16], [1, -14], [-11, -37], [-7, -12]], [[4590, 83513], [27, -95], [12, -18], [17, -10], [24, -11], [15, -14], [12, -21], [2, -10], [-76, 38], [-48, -56], [-15, -7], [-136, -3], [-27, -10], [-18, -18], [-31, -52], [-16, -19], [-16, -12], [-36, -14], [-42, 2], [-22, 7], [-12, 24], [-11, 48], [0, 14], [5, 23], [38, 31], [12, 17], [49, 109], [14, 15], [16, 4], [41, -8], [36, 32], [77, 48], [17, 6], [55, 1], [16, -8], [11, -13], [10, -20]], [[5733, 83509], [-9, -3], [-8, 6], [-10, 33], [-1, 13], [20, -10], [7, -24], [1, -15]], [[5690, 83612], [-1, -46], [-4, -7], [-8, 12], [-15, -13], [-9, 10], [4, 16], [-1, 12], [11, 1], [3, 23], [-2, 9], [6, 21], [8, 5], [8, -43]], [[13517, 83571], [28, -75], [2, -27], [-28, -9], [-21, 4], [-11, 8], [-3, 13], [7, 38], [-14, 22], [-16, 8], [-15, -14], [0, 38], [11, 27], [-7, 36], [0, 28], [4, 9], [15, -1], [30, -29], [18, -76]], [[5591, 83599], [-17, -13], [-5, -16], [-13, -7], [-11, -13], [-37, -59], [-16, -11], [18, 51], [3, 16], [0, 10], [-5, 38], [10, -1], [9, 8], [18, 34], [16, 3], [17, 40], [9, 3], [4, -6], [-7, -24], [16, -22], [-4, -22], [-5, -9]], [[13094, 83464], [6, -8], [7, 5], [12, 21], [20, -4], [14, -7], [9, -8], [-5, -30], [-4, -49], [-8, -17], [-8, -24], [-28, 14], [-23, 31], [-33, 53], [-19, 38], [-1, 16], [-12, 12], [-22, 66], [-13, 52], [-21, 6], [-26, 15], [-10, 29], [7, 25], [37, 12], [55, -64], [9, -28], [20, -32], [3, -44], [10, -18], [24, -62]], [[5464, 83719], [-4, -45], [-38, 29], [-10, 14], [7, 11], [36, 2], [9, -11]], [[5365, 83706], [4, 0], [9, 4], [18, 33], [6, 1], [0, -10], [-8, -32], [14, -43], [13, -21], [-1, -7], [-34, -15], [-25, 11], [-14, -4], [-12, -15], [-9, 17], [-6, 79], [2, 14], [14, 27], [18, 13], [8, -4], [7, -11], [1, -11], [-5, -26]], [[12971, 83838], [6, -16], [0, -11], [-40, -38], [-1, -8], [-9, -23], [-9, -9], [-15, -26], [-28, -27], [4, 83], [-28, 48], [28, 24], [19, -7], [31, -3], [30, 22], [12, -9]], [[6787, 83998], [-11, -19], [-21, 2], [-12, 6], [-3, 16], [32, 48], [7, 6], [6, -2], [3, -20], [-1, -37]], [[13617, 83806], [-10, -63], [-19, -65], [-29, -35], [-21, 8], [-15, 28], [-14, -1], [-15, 6], [-8, 23], [8, 30], [-7, 23], [-8, -20], [-13, -19], [-33, -24], [-23, -47], [-11, -30], [-13, 33], [-9, 78], [-1, 33], [24, 50], [31, 48], [6, 142], [99, 71], [9, -4], [32, -53], [35, -74], [8, -34], [1, -58], [-4, -46]], [[12898, 84296], [53, -12], [48, 1], [17, -24], [10, -25], [7, -24], [1, -22], [-1, -15], [-6, -17], [2, -5], [94, -55], [44, -58], [18, -30], [10, -26], [19, -64], [39, -74], [21, -23], [11, -22], [-6, 0], [-28, 16], [-60, 50], [-5, -2], [-5, -27], [-9, -24], [-14, -17], [11, -5], [48, 11], [41, -49], [15, -8], [16, -35], [0, -14], [-9, -26], [-6, -10], [2, -7], [11, -4], [45, 7], [8, -12], [-7, -101], [6, -37], [0, -17], [-5, -22], [0, -19], [4, -19], [1, -18], [-12, -45], [-12, -8], [-19, 0], [-15, 13], [-22, 39], [-21, 60], [-8, 9], [-27, 9], [-5, 7], [-17, 1], [-13, 25], [2, 33], [-11, 33], [1, 15], [-12, 6], [-10, -9], [6, -33], [-6, -25], [-22, 11], [-36, 80], [-41, 65], [-17, 15], [5, 19], [20, 10], [17, -1], [3, 11], [-34, 63], [1, 18], [12, 31], [-15, 13], [-43, -9], [-15, 6], [-13, 26], [-7, 21], [-37, 4], [-14, -2], [-24, 33], [-12, 21], [5, 11], [22, 18], [13, -2], [25, -20], [10, 0], [25, 27], [4, 24], [18, 20], [-3, 21], [-10, 35], [-23, 10], [-46, -21], [-41, -32], [-16, 12], [-3, 20], [43, 55], [19, 30], [-4, 17], [-14, 23], [-1, 58], [9, 13]], [[13117, 84243], [-15, -2], [-16, 9], [-40, 47], [-1, 14], [6, 15], [22, 29], [10, 7], [54, -3], [17, -8], [4, -13], [0, -14], [-6, -13], [-1, -15], [3, -15], [-7, -15], [-30, -23]], [[13302, 84164], [-6, -96], [-11, 5], [-10, 1], [-22, -14], [-22, 6], [-11, 11], [-4, 12], [4, 28], [-12, 16], [-42, 6], [-16, 7], [-9, 30], [-2, 39], [7, 14], [21, 11], [16, 47], [10, 7], [35, 94], [17, -7], [31, -57], [39, -83], [-13, -77]], [[7032, 84352], [-19, -14], [-6, 5], [-1, 11], [5, 18], [9, 18], [29, 34], [29, 23], [15, -2], [6, -14], [-19, -30], [-48, -49]], [[7164, 84397], [-13, -1], [-21, 15], [3, 18], [29, 22], [29, -3], [3, -12], [-2, -14], [-2, -8], [-9, -8], [-17, -9]], [[2846, 84466], [36, -11], [21, 7], [18, -6], [3, -13], [-31, -30], [-13, 2], [-37, 36], [3, 15]], [[13126, 84403], [-3, -8], [-36, 1], [-12, 7], [-5, 24], [3, 23], [8, 18], [10, 34], [8, 56], [52, -63], [16, -28], [8, -35], [-18, -13], [-22, -6], [-9, -10]], [[12781, 84587], [18, -40], [26, 4], [14, -30], [11, -46], [-8, -29], [-11, 7], [-13, -17], [-8, -56], [4, -55], [-4, -56], [-15, -57], [-3, -38], [-6, -11], [-7, -4], [-8, 10], [-12, 8], [-15, -32], [-19, 0], [-15, 73], [13, 121], [31, 25], [-18, 32], [-39, 39], [3, 21], [-29, 62], [-2, 14], [5, 52], [27, 46], [37, 8], [25, -20], [14, -17], [4, -14]], [[12954, 84679], [18, -18], [10, 19], [19, -1], [35, -17], [20, -25], [12, -29], [1, -17], [-3, -40], [2, -40], [-1, -20], [-5, -18], [-8, -13], [-8, -2], [-27, 36], [-31, 65], [-24, 20], [-1, -7], [7, -18], [19, -35], [3, -21], [14, -26], [6, -19], [3, -26], [0, -22], [-4, -19], [-6, -12], [-9, -6], [-47, 6], [-28, -13], [-33, 7], [-8, 11], [-5, 19], [-2, 46], [-9, 66], [2, 50], [-21, 46], [-18, 27], [-26, 25], [-18, 24], [5, 20], [27, 14], [44, -3], [95, -34]], [[7498, 84749], [-35, -19], [-7, 1], [-21, -38], [-17, -16], [-22, 30], [5, 46], [20, 30], [97, -10], [7, -9], [1, -7], [-8, -6], [-20, -2]], [[2733, 84783], [-29, -28], [-26, 10], [-7, 20], [-1, 9], [75, 22], [-12, -33]], [[12508, 84879], [24, -63], [17, -49], [15, -59], [26, -122], [12, -46], [3, -26], [3, -66], [-4, -14], [-7, -13], [-2, -19], [7, -50], [1, -77], [-7, -43], [-8, -7], [-19, 14], [-15, 24], [-12, 24], [-28, 77], [-9, 36], [0, 25], [4, 19], [9, 12], [17, 31], [-3, 5], [-12, -7], [-25, -4], [-22, 24], [-17, 13], [3, 45], [-4, 12], [-34, -13], [-13, 12], [-3, 17], [1, 25], [6, 21], [32, 55], [-3, 11], [-15, 2], [-21, 19], [-9, 61], [-22, 35], [-14, -3], [-29, -99], [-15, -22], [-42, -14], [9, 28], [4, 25], [-15, 74], [-1, 29], [10, 21], [30, 9], [15, 13], [13, 20], [3, 20], [23, 53], [10, 10], [29, 0], [60, -59], [18, -8], [26, -38]], [[7433, 85166], [-8, -16], [-7, 4], [-16, 19], [-31, 28], [-15, 18], [-1, 8], [11, 9], [38, -22], [15, -20], [14, -28]], [[7528, 85151], [2, -31], [12, 3], [42, 33], [23, 10], [29, 1], [23, -15], [4, -11], [-2, -14], [-18, -27], [1, -18], [19, -33], [49, -18], [6, -10], [0, -12], [-34, -55], [-12, -12], [-9, -3], [-61, 9], [-55, 18], [-23, 3], [-8, -5], [-15, -17], [11, -5], [49, -4], [17, -25], [7, -18], [4, -20], [-10, -8], [-20, -6], [-25, 0], [-31, -22], [-17, -25], [-62, -7], [-47, -34], [-17, -17], [-6, -20], [-17, -15], [-41, -14], [24, -13], [4, -11], [1, -16], [-4, -13], [-31, -59], [-60, -48], [-15, 2], [-7, 6], [-5, 9], [-1, 9], [78, 98], [-3, 4], [-21, 4], [-34, 26], [-23, -17], [-5, 1], [6, 23], [15, 27], [-3, 8], [-8, 7], [-19, 4], [-31, 1], [-22, -6], [-15, -15], [-1, -6], [31, 2], [9, -7], [8, -14], [5, -16], [2, -17], [-7, -24], [-14, -30], [-22, 5], [-44, 67], [-20, 97], [-38, 75], [-2, 18], [11, 46], [38, 65], [42, 18], [29, 27], [28, 9], [18, -1], [24, -12], [10, -25], [-6, -12], [2, -6], [17, -15], [18, -52], [21, -47], [14, -19], [19, -12], [-19, 36], [-12, 44], [-5, 88], [-6, 23], [11, 6], [30, -3], [-1, 13], [-32, 29], [-19, 25], [-8, 19], [1, 17], [17, 25], [10, 7], [10, 3], [21, -5], [9, -8], [26, -56], [12, -17], [10, 0], [10, 9], [9, 18], [8, 12], [10, 3], [29, -8], [10, 3], [4, 14], [0, 25], [7, 9], [2, 18], [-16, 27], [18, 9], [61, -21], [25, -23], [-13, -42]], [[12297, 85393], [40, -56], [0, -13], [-8, -38], [-22, -11], [6, -15], [17, -12], [11, 10], [42, 54], [13, 11], [8, 1], [51, -16], [44, -26], [13, -20], [8, -36], [-12, -79], [-37, -13], [-17, 1], [-18, 12], [-30, -28], [25, -20], [75, -5], [23, -44], [6, -34], [-16, -62], [-43, 17], [-37, 36], [-77, 51], [-19, 3], [-12, -9], [-4, -31], [1, -68], [-20, -34], [-61, 15], [-24, 51], [-22, 80], [-84, 96], [-23, 19], [-30, 57], [12, 45], [4, 26], [16, 7], [23, 20], [14, 44], [21, -36], [28, -34], [1, 32], [13, 26], [28, -1], [13, 5], [18, 24], [26, 12], [16, -14]], [[12691, 85385], [-2, -15], [-38, 2], [-38, 21], [-19, 27], [4, 13], [35, 11], [34, -26], [24, -33]], [[12589, 85346], [70, -13], [52, 3], [47, -86], [29, -70], [17, -49], [10, -47], [13, -45], [-1, -7], [-28, 31], [-19, 62], [-10, 24], [-10, 11], [-10, 23], [-21, 59], [0, 17], [-9, 16], [-11, 6], [-12, -3], [-4, -5], [2, -41], [9, -46], [51, -99], [34, -57], [7, -18], [5, -52], [-15, -23], [18, -48], [-1, -9], [-4, -9], [-48, -21], [-45, -89], [-48, -52], [-23, -8], [-10, 9], [-11, 20], [-6, 26], [-1, 33], [12, 21], [24, 109], [0, 35], [-30, 50], [-18, 40], [-9, 57], [-17, 149], [-7, 48], [-11, 39], [-14, 32], [-10, 35], [-8, 38], [3, 15], [24, -20], [29, -55], [15, -36]], [[7662, 85460], [10, -4], [10, 34], [8, 1], [33, -29], [20, 6], [13, -35], [12, -4], [10, 5], [7, -3], [-2, -38], [-24, -38], [-12, -9], [-15, 9], [-6, 4], [-10, 17], [-8, 21], [-5, 1], [-18, -25], [0, -13], [8, -19], [-1, -11], [-20, -6], [-20, 3], [-24, -16], [-5, 10], [-4, 29], [-7, -4], [-12, -35], [-12, -22], [-22, -18], [-5, -9], [-17, -1], [-24, -12], [-15, 2], [-90, 38], [-21, 14], [74, 87], [39, 34], [22, -2], [22, -11], [12, 2], [1, 39], [-21, 29], [1, 12], [46, 19], [18, -3], [19, -10], [18, -16], [17, -23]], [[7643, 85532], [-9, -4], [-20, 18], [-13, 19], [9, 14], [39, 30], [19, 0], [8, -4], [3, -10], [-2, -13], [-8, -18], [-26, -32]], [[5300, 85585], [-20, -9], [-22, 5], [-17, 57], [13, 1], [28, 38], [60, 30], [15, 4], [-57, -126]], [[9843, 86300], [-14, -3], [20, 38], [27, 41], [26, 27], [32, 11], [-3, -20], [-43, -35], [-45, -59]], [[8883, 86442], [-15, -17], [-55, 10], [12, 35], [42, 22], [46, -34], [-30, -16]], [[8962, 86297], [-31, -8], [-7, 17], [16, 42], [13, 24], [10, 6], [35, 48], [39, 35], [36, 51], [37, 72], [6, 27], [17, 3], [28, -18], [17, -25], [-8, -20], [-92, -103], [-8, -13], [-8, -35], [-8, -13], [-12, -5], [-9, -15], [-5, -25], [-11, -14], [-18, -1], [-12, -7], [-6, -12], [-19, -11]], [[3851, 86626], [26, -29], [13, -1], [43, 8], [16, -6], [15, -12], [9, -19], [2, -33], [-7, -30], [2, -41], [-1, -18], [22, -24], [8, -32], [3, -34], [-49, -12], [-49, -2], [-43, -23], [-9, -17], [7, -26], [-11, -6], [-11, 5], [-21, 24], [-22, 11], [-79, 18], [-100, 69], [-42, 14], [-44, 50], [-39, 64], [25, 10], [26, 5], [116, -9], [14, 46], [15, 11], [36, 13], [35, 25], [15, 0], [16, -10], [32, 15], [17, 3], [14, -7]], [[9689, 86599], [-9, -14], [-24, 5], [-13, 9], [44, 37], [7, -8], [-5, -29]], [[9335, 86664], [6, -16], [53, 4], [16, -3], [6, -7], [-7, -11], [-21, -14], [-60, -25], [-49, -33], [-6, 3], [-9, 36], [-9, 15], [-6, 20], [0, 7], [9, 14], [18, 20], [13, 8], [46, -18]], [[8984, 86664], [0, -15], [-9, -14], [8, -27], [-14, -46], [-6, -29], [-8, -19], [-7, -7], [-8, 4], [-2, 11], [5, 16], [-18, -1], [-6, 40], [10, 13], [4, 17], [1, 12], [12, 51], [4, 3], [2, -12], [3, -3], [7, 5], [9, 22], [4, 3], [9, -24]], [[7772, 86613], [-13, -2], [17, 28], [13, 56], [17, -8], [3, -10], [-28, -57], [-9, -7]], [[2016, 86668], [60, -38], [39, 4], [30, -31], [13, -26], [-46, 19], [-66, -2], [-90, 77], [-32, 18], [7, 43], [35, 22], [17, -58], [33, -28]], [[8908, 86881], [-35, -5], [-16, 7], [-3, 8], [7, 29], [0, 12], [17, 5], [21, -14], [6, -14], [3, -28]], [[2371, 88502], [5, -14], [29, 2], [40, -6], [45, -14], [45, 5], [56, 43], [33, 11], [34, 6], [37, -10], [35, -23], [14, -13], [11, -24], [7, -28], [11, -21], [67, -25], [42, -10], [10, -14], [9, -19], [36, -14], [37, 5], [20, -5], [63, -1], [77, -21], [-12, -56], [-25, -24], [-72, 7], [-71, -8], [-29, -28], [-25, -37], [-3, -35], [-14, -16], [-15, -7], [-12, 19], [-17, 60], [-11, 16], [-12, 11], [-35, 19], [-35, 12], [-21, 1], [-15, 21], [-8, 30], [-14, 15], [-28, 22], [-29, 17], [-89, 38], [-29, 5], [-30, -4], [-32, -17], [-31, -26], [-31, -19], [-33, -4], [-32, 11], [-29, 25], [-15, 18], [-8, 30], [1, 30], [4, 29], [16, 71], [27, 14], [51, -50]], [[3858, 89992], [-10, -3], [0, 9], [32, 23], [58, 29], [-2, -6], [-31, -23], [-47, -29]], [[13882, 84036], [-14, -30], [-10, -32], [-7, -35], [-3, -37], [2, -40], [5, -35], [17, -65], [6, -39], [1, -27], [-38, -92], [-13, -45], [1, -19]], [[13729, 83392], [-11, 12], [-65, 10], [-24, 82], [-12, 64], [-19, 55], [0, 13], [17, 37], [65, 31], [1, 12], [-24, 8], [-6, 13], [-7, 60], [2, 53], [-2, 35], [-10, 72], [-17, 43], [-41, 86], [-4, 21], [18, 27], [12, 25], [-71, -43], [-96, -46], [-42, -32], [-9, -13], [-3, -11], [8, -30], [-1, -10], [-9, -18], [-10, -51], [-21, -53], [-10, -11], [-38, 20], [-10, 17], [-19, 70], [5, 19], [13, 15], [19, 34], [24, 52], [45, 133], [29, 1], [52, 26], [-82, 13], [-12, 7], [-11, 18], [-9, 29], [-17, 33], [-31, 11], [-13, 12], [-21, 39], [-14, 18], [-7, 22], [-1, 26], [-6, 13], [-21, 5], [-12, 9], [-3, 67], [-42, 17], [-18, 15], [-28, 42], [-7, 21], [-3, 17], [7, 46], [-3, 9], [-25, -5], [-153, 72], [8, 95], [-28, 125], [-31, 51], [6, 19], [7, 11], [13, 0], [59, -37], [56, -44], [7, 7], [-89, 92], [-22, 28], [-5, 33], [-1, 18], [7, 10], [84, -9], [4, 7], [-84, 27], [-17, 0], [-18, -39], [-9, -9], [-18, 2], [-6, 6], [-22, 47], [-20, 33], [-38, 45], [-7, 33], [-2, 47], [5, 45], [31, 103], [13, 18], [3, 11], [-10, -1], [-9, -10], [-25, -48], [-27, -78], [-21, -27], [-14, 6], [-20, 32], [-43, 39], [-50, 10], [-31, 40], [-46, 111], [-6, 55], [-6, 14], [-25, 18], [-16, 26], [-24, 135], [-31, 93], [-8, 50], [3, 49], [-4, 5], [-11, -38], [-3, -20], [-20, -5], [19, -39], [5, -19], [-10, 1], [-19, -5], [33, -66], [14, -102], [21, -76], [14, -62], [7, -47], [9, -44], [25, -99], [3, -20], [-3, -16], [-8, -19], [-14, -7], [-45, 13], [-17, 25], [-24, 44], [-34, 21], [-84, -10], [-6, 3], [0, 37], [10, 65], [-8, 26], [-44, 96], [1, 19], [60, 44], [-29, 3], [-24, -17], [-9, 11], [-14, 62], [-9, 23], [-5, 4], [-2, -58], [10, -31], [1, -17], [-1, -25], [-7, -18], [-11, -11], [-11, -2], [-20, 12], [-23, 23], [-19, 11], [-8, 10], [-9, 25], [-15, 20], [-74, 24], [-44, 30], [-3, -8], [13, -31], [2, -19], [-11, -5], [-20, -30], [6, -4], [21, 10], [23, -1], [39, -19], [35, -23], [12, -13], [6, -20], [4, -7], [34, -23], [2, -12], [-22, -35], [45, 3], [27, -12], [34, -56], [11, -30], [2, -40], [-7, -11], [-14, -8], [-92, -13], [-34, -48], [-7, -1], [-25, 13], [-46, 38], [-58, 36], [-131, 108], [-3, 5], [-3, 20], [-9, 11], [-17, 9], [-25, 27], [-32, 45], [-19, 36], [-8, 25], [-18, 29], [-59, 61], [-31, 23], [-28, 13], [-24, 3], [-6, 8], [11, 13], [2, 8], [-53, 13], [-50, 28], [-127, 80], [-65, 50], [-39, 24], [-16, 13], [-7, 11], [9, 12], [26, 12], [17, 13], [27, 51], [2, 16], [-14, 37], [-7, 33], [0, 19], [4, 18], [4, 12], [11, 12], [9, 6], [10, -4], [32, -46], [4, -17], [-1, -63], [9, -73], [3, 5], [3, 24], [2, 47], [4, 22], [6, 22], [12, 12], [36, -7], [17, 4], [-71, 33], [-44, 62], [-8, 7], [-24, 3], [-26, -26], [-66, -82], [-19, -14], [-83, -46], [-57, -9], [-63, 7], [-54, 15], [-136, 72], [-21, 17], [31, 44], [2, 14], [-11, 45], [-9, 13], [-13, 8], [-4, -6], [0, -13], [3, -25], [-10, -13], [-23, -14], [-39, -15], [-120, 37], [-124, 30], [-110, 7], [-156, -25], [-83, -24], [-48, -2], [-47, 4], [-4, 17], [21, 10], [-1, 12], [-27, 39], [-40, 23], [-55, 8], [-32, 11], [-8, 14], [-19, 14], [-31, 13], [-13, 23], [10, 71], [11, 43], [10, 30], [27, 48], [-9, -3], [-39, -36], [-33, -37], [-32, -48], [-18, -22], [-24, -20], [-37, 5], [-50, 30], [-43, 15], [-36, 1], [-15, 5], [25, 27], [14, 22], [19, 34], [5, 17], [-132, 5], [-5, 19], [0, 13], [-4, 11], [-19, 8], [-27, -6], [-43, -22], [-19, 17], [7, 9], [14, 7], [28, 31], [-38, 16], [-20, 18], [-10, 16], [1, 55], [10, 35], [87, 34], [-27, 13], [-56, -5], [-37, -29], [-43, -41], [-30, -16], [-15, 11], [-20, 3], [-25, -3], [-16, -11], [-9, -18], [-10, -12], [-11, -6], [-8, 2], [-12, 18], [-25, 12], [-12, 14], [-7, -9], [-9, -27], [-9, -13], [-42, -14], [-23, 2], [-28, 34], [-4, 12], [10, 29], [61, 115], [-6, -1], [-20, -18], [-39, -46], [-18, -14], [-30, -1], [-14, 5], [-17, -4], [-20, -12], [-13, -14], [-6, -15], [4, -2], [30, 17], [17, 4], [5, -8], [-24, -52], [-14, -50], [-13, -12], [-22, 2], [-24, -5], [0, -14], [44, -39], [16, -6], [20, -14], [3, -14], [-7, -38], [-6, -15], [-9, -8], [-36, 1], [-12, -4], [-24, -24], [-12, -19], [4, -2], [21, 16], [31, 9], [39, 1], [30, 9], [20, 16], [19, -4], [18, -26], [6, -22], [-8, -19], [-15, -13], [-23, -9], [-15, -12], [-6, -16], [-3, -24], [-1, -32], [6, -58], [-5, -7], [-8, -5], [-13, 0], [-12, -14], [-27, -76], [-9, -9], [-12, 8], [-10, 0], [-9, -10], [-19, -8], [-30, -5], [-25, 2], [-45, 16], [-18, 12], [-15, 19], [-40, -20], [-11, 9], [-25, 53], [-5, -3], [-5, -58], [-8, -20], [-25, -41], [-13, -71], [-4, -3], [-5, 11], [-15, 63], [-8, 14], [-23, -36], [-2, -14], [6, -47], [-6, -7], [-45, 25], [-11, 2], [-3, -5], [15, -37], [-1, -13], [-65, -71], [-17, 3], [-10, 7], [-12, -1], [-41, -27], [-11, 1], [-15, 16], [-7, -1], [-4, -16], [-1, -32], [-15, -30], [-49, -49], [-13, -23], [-9, -31], [-8, -3], [-28, 20], [-33, 13], [-5, -6], [10, -19], [-2, -12], [-14, -4], [-18, 2], [-22, 7], [-31, -8], [-40, -25], [-33, 0], [-46, 41], [-12, 3], [-4, 12], [9, 33], [13, 25], [9, 12], [44, 32], [50, 12], [31, 19], [39, 40], [20, 30], [40, 77], [-3, 6], [-9, 4], [-88, -73], [-13, -7], [-17, 1], [-70, 28], [-14, 12], [-11, 35], [20, 80], [13, 39], [35, 60], [44, 64], [15, 41], [24, 110], [-2, 51], [-10, 61], [-1, 36], [10, 12], [102, 56], [49, 43], [94, 62], [25, 0], [19, -22], [22, -17], [25, -13], [32, 1], [39, 16], [62, -6], [128, -41], [27, -2], [1, 5], [-19, 29], [-89, 17], [-37, 16], [-104, 74], [-24, 28], [10, 14], [26, 11], [8, 10], [4, 19], [15, 25], [25, 32], [39, 31], [75, 46], [-29, 2], [-54, -8], [-19, -9], [-36, -33], [-14, -23], [-20, -46], [-8, -8], [-37, -7], [-101, -4], [-17, 23], [-9, 4], [-13, -4], [-92, -59], [-34, -30], [-23, -35], [-37, -25], [-49, -16], [-37, -20], [-39, -40], [-14, -30], [0, -14], [9, -45], [-10, -9], [-22, -3], [-36, -30], [-76, -89], [-10, -32], [0, -11], [12, -25], [-8, -17], [-22, -25], [-48, -41], [-31, -16], [-20, -1], [-20, 6], [-35, 26], [-28, 2], [-2, -4], [39, -28], [39, -36], [24, -30], [10, -24], [0, -25], [-9, -25], [-27, -44], [-27, -13], [-70, -13], [-22, -11], [-7, -8], [48, -18], [4, -10], [-6, -37], [-13, -12], [-40, -22], [-35, -6], [-6, 4], [7, 29], [-2, 7], [-13, 6], [-19, -11], [-47, -43], [-5, -7], [17, -11], [-4, -10], [-26, -30], [-10, -21], [-17, -20], [-76, -64], [5, -15], [-19, -56], [-11, -49], [13, -20], [64, -24], [31, -6], [37, -17], [66, -45], [22, -30], [3, -14], [-2, -15], [-8, -21], [-21, -38], [-50, -58], [-22, -16], [-34, -13], [-12, -10], [-43, -54], [-12, -30], [2, -26], [-9, -18], [-56, -35], [2, -6], [20, -3], [-7, -31], [-3, -43], [-10, -8], [-36, 1], [-44, -17], [-3, -5], [-1, -31], [-118, -23], [-25, -59], [-14, -18], [-45, -43], [-29, -18], [-32, -10], [-17, -15], [-1, -18], [-9, -17], [-28, -26], [-14, -34], [-10, -5], [-51, -8], [-11, -11], [-5, -46], [-9, -1], [-19, 11], [-24, -9], [-53, -51], [-12, -18], [1, -10], [8, -10], [13, -31], [-1, -20], [-20, -58], [-8, -9], [-25, -14], [-10, -32], [-23, 4], [-19, -6], [-12, -21], [-14, -12], [-14, -4], [-18, -16], [-22, -31], [-20, -19], [-18, -9], [-18, -2], [-18, 5], [-16, -4], [-14, -11], [-13, -18], [-11, -50], [-14, -22], [-9, -4], [-17, 4], [-27, 10], [-28, -4], [-44, -30], [-14, -23], [28, -5], [14, -7], [-1, -7], [-14, -6], [-25, 1], [-14, -6], [-19, -13], [-45, -14], [-17, -10], [-34, -58], [-4, -13], [4, -3], [19, 6], [23, -10], [11, -12], [8, -15], [7, -29], [4, -4], [-43, -49], [-12, -21], [-8, -8], [-5, 6], [-6, 55], [-3, 9], [-10, 1], [-10, -17], [-22, -65], [-23, -32], [-178, -83], [-26, -19], [-5, -35], [-7, -31], [-12, -24], [-14, -16], [-3, 11], [1, 86], [-3, 18], [-18, 11], [-8, -2], [-11, -5], [-18, -18], [-10, -5], [-14, 1], [-23, -18], [-55, -59], [-36, -15], [-10, -12], [-15, -32], [-10, -12], [-15, -1], [-20, 10], [-16, -7], [-12, -24], [-13, -9], [-35, 17], [-15, -11], [-20, -31], [-21, -20], [-22, -9], [-56, -11], [-23, 7], [-5, 9], [1, 38], [9, 28], [9, 13], [11, 12], [17, 1], [31, -8], [-4, 9], [-11, 11], [-29, 19], [-28, 10], [-16, -6], [-23, -15], [-15, -17], [-8, -19], [-10, -63], [-6, -17], [-67, -111], [-26, -34], [-25, 2], [-13, -13], [-17, -27], [-17, -13], [-14, 1], [-12, 5], [-8, 9], [1, 9], [11, 8], [-4, 22], [-19, 37], [-13, 19], [-24, 3], [-4, -17], [8, -84], [-1, -19], [-15, -24], [-41, -27], [-12, 2], [-37, 53], [-34, 11], [-2, -17], [7, -36], [-8, -32], [-25, -31], [-19, -15], [-13, 1], [-1, 21], [12, 42], [3, 35], [-6, 28], [1, 22], [7, 15], [45, 41], [20, 7], [10, -11], [13, -1], [15, 6], [10, 14], [4, 19], [20, 26], [35, 31], [40, 57], [46, 83], [53, 72], [62, 60], [66, 48], [134, 66], [10, -4], [-12, -21], [8, -14], [13, -1], [49, 10], [20, 14], [6, -13], [-7, -17], [-30, -17], [1, -14], [43, -67], [13, -10], [12, 1], [4, 9], [-3, 48], [14, 9], [30, 2], [19, -6], [9, -15], [17, -12], [25, -10], [15, 3], [6, 16], [-10, 19], [-48, 40], [-13, 18], [-3, 23], [7, 31], [14, 45], [24, 60], [21, 42], [42, 47], [29, 23], [72, 72], [140, 73], [34, 47], [47, 52], [20, 13], [0, -20], [6, -18], [32, -12], [20, -4], [10, 4], [2, 19], [-4, 34], [-1, 33], [2, 30], [4, 24], [21, 43], [31, 49], [43, 57], [27, 26], [25, 14], [24, 25], [42, 58], [14, 10], [30, 11], [11, -5], [7, -14], [8, -10], [30, -8], [21, 13], [-4, 7], [-16, 5], [-11, 8], [-10, 35], [-20, 21], [-5, 24], [4, 37], [17, 87], [3, 90], [16, 51], [31, 19], [69, 13], [-40, 23], [-16, 0], [-26, 11], [-10, 56], [0, 40], [18, 47], [64, 80], [71, 55], [-10, 4], [-8, 17], [32, 110], [32, 98], [-43, -84], [-50, -64], [-145, -74], [-99, -63], [-47, -14], [-31, 15], [-24, 60], [-14, 22], [-18, 39], [8, 50], [14, 35], [31, 6], [34, -17], [31, -1], [-39, 34], [-56, 30], [-26, -9], [-19, -49], [-26, -34], [-23, 12], [-14, 14], [10, -41], [-18, -63], [-6, -43], [25, -115], [-5, -45], [-45, -21], [-37, 37], [-76, 145], [-27, 41], [-60, 69], [-20, -10], [-25, -34], [-24, -9], [-65, 50], [-30, 37], [-28, 46], [-44, -25], [-38, -30], [-44, -48], [-30, 0], [-81, -41], [-9, -1], [-11, -22], [-11, -10], [-10, -43], [-109, -33], [-108, 19], [38, 23], [42, 19], [37, 44], [-16, 60], [-3, 30], [1, 38], [40, 54], [-42, 0], [-27, -19], [-25, 40], [-12, 79], [29, 47], [13, 36], [12, 50], [1, 43], [-23, 72], [-63, 153], [-29, 115], [-50, 60], [37, 100], [41, 91], [54, 40], [-4, 6], [-30, 0], [-19, -5], [-18, -30], [-18, -22], [-56, -116], [-37, -56], [-23, -16], [38, -22], [6, -19], [7, -41], [-10, -51], [-10, -28], [-45, 2], [-40, -41], [-95, -44], [-128, -26], [-63, 3], [-65, 52], [0, 30], [3, 26], [-94, 90], [-54, 89], [-38, 2], [-33, 23], [-39, 37], [3, 30], [6, 21], [-24, 15], [-31, -2], [-36, 11], [94, 114], [32, 77], [27, 11], [34, -12], [47, -30], [40, -14], [14, -14], [15, -27], [-16, -45], [-14, -31], [17, 8], [50, 49], [37, 43], [17, -4], [12, -8], [20, -44], [25, -45], [56, 43], [30, 53], [-25, 24], [-31, 13], [-79, 19], [20, 15], [50, -2], [19, 15], [-20, 20], [-25, 18], [-68, -60], [-124, 3], [-87, 35], [-87, -6], [-13, 7], [-17, 19], [49, 45], [34, 25], [2, 14], [-20, 2], [-38, -12], [-17, 21], [3, 36], [-6, -4], [-15, -19], [-21, 10], [-18, 16], [9, 17], [19, 24], [-8, 3], [-17, -5], [-16, -31], [3, -25], [0, -36], [-28, -7], [-24, 5], [-17, 36], [-17, 78], [-48, 20], [-12, 39], [30, 51], [-13, 26], [-32, 8], [-37, -25], [-17, 22], [-3, 25], [-1, 36], [10, 3], [9, -7], [74, 20], [7, 10], [-59, 30], [-16, 31], [24, 18], [44, 2], [61, 19], [-25, 33], [-6, 18], [-5, 31], [10, 51], [72, 117], [71, 98], [22, 22], [32, 12], [30, -9], [31, -21], [6, 9], [-11, 9], [-13, 40], [43, 15], [26, 45], [2, 13], [-28, -18], [-29, -31], [-7, 31], [-7, 71], [12, 68], [10, 30], [24, 29], [69, 11], [13, -6], [2, 14], [-41, 42], [17, 34], [15, 17], [84, 27], [45, -9], [58, -31], [33, -39], [-5, -20], [-8, -12], [-17, -13], [-7, -10], [3, -8], [25, 24], [40, 28], [23, -12], [17, -23], [20, 1], [63, 19], [32, 20], [39, 53], [51, 34], [73, 108], [21, 44], [25, 7], [23, -4], [15, -37], [23, -10], [130, 9], [67, 16], [46, 35], [48, 59], [28, 40], [13, 52], [-17, 66], [-18, 56], [-23, 127], [-64, 83], [-46, 25], [-30, -3], [22, 53], [61, -6], [40, 11], [33, 26], [10, 19], [16, 40], [-5, 42], [-9, 23], [-22, 26], [-27, 37], [-18, 12], [-16, -1], [-78, -74], [-46, -2], [-35, 14], [-30, -42], [-85, -37], [-45, -38], [-84, -93], [-21, -43], [-26, -2], [-19, 82], [-91, 79], [-28, -27], [15, -25], [21, -17], [34, -8], [-15, -23], [-11, -32], [-34, 30], [-61, 43], [-63, 22], [-164, -3], [-108, -44], [-10, 9], [-10, 4], [-18, -11], [-8, -17], [-11, -12], [-22, -4], [-45, 7], [-85, 27], [-194, 41], [-50, 24], [-44, 59], [1, 40], [19, 17], [-1, 58], [-38, 15], [-77, 82], [-28, 35], [6, 4], [14, -9], [26, -7], [64, 11], [22, 53], [48, 16], [44, -8], [-10, 15], [-11, 11], [-114, 27], [-16, -8], [-205, 48], [-162, 84], [-13, 16], [-15, 36], [22, 35], [22, 17], [1, -20], [3, -19], [93, 45], [48, 58], [92, 10], [22, 16], [28, 31], [41, 54], [58, 28], [39, 25], [51, 15], [44, -25], [13, -3], [80, -5], [26, 11], [11, 8], [8, 12], [-78, 45], [8, 25], [10, 18], [91, 52], [70, 17], [37, -1], [108, 68], [59, 19], [112, 13], [92, 3], [25, -24], [-49, 5], [-22, -4], [15, -9], [18, -17], [-5, -22], [-31, -66], [3, -53], [-20, -17], [-19, -24], [94, -76], [146, -5], [79, 14], [45, -23], [38, -5], [103, 12], [78, -16], [33, 6], [72, 113], [28, 18], [31, -20], [40, -16], [25, 12], [21, -29], [-10, 61], [-14, 23], [-118, 41], [-78, -20], [-25, 23], [8, 47], [-84, 115], [-35, 24], [-42, 1], [-21, 40], [-18, 51], [36, 21], [33, 10], [30, -17], [33, -67], [32, -10], [-9, -68], [39, -62], [89, -57], [70, 21], [50, -1], [30, -12], [74, -52], [37, -6], [116, 27], [1, 51], [-9, 37], [-28, 23], [-78, -5], [-62, 38], [-52, -10], [-96, -58], [-48, 23], [-30, 31], [-49, 31], [-6, 60], [41, 69], [30, 32], [-27, 24], [-68, 17], [-119, -18], [-5, 24], [0, 25], [-48, -49], [-50, 10], [-66, -5], [-148, 43], [-52, 54], [-22, 43], [-40, 119], [-50, 75], [-351, 252], [-159, 64], [-77, 70], [-48, 17], [-46, 8], [-59, 22], [40, 28], [27, 10], [-28, -30], [21, -7], [35, 17], [18, 20], [27, 85], [28, 129], [-7, 51], [194, -10], [129, 8], [43, 12], [163, 20], [43, 14], [78, 43], [92, 77], [80, 101], [12, 27], [5, -7], [7, 5], [9, 38], [10, 90], [39, 85], [168, 193], [77, 77], [26, 35], [27, 25], [19, -24], [9, -7], [5, -11], [-16, -6], [-26, -25], [-36, -16], [-9, -9], [22, 2], [63, 18], [36, 22], [179, 41], [97, 66], [3, 15], [144, 84], [20, -4], [23, -10], [-40, -55], [28, -14], [-25, -66], [52, -1], [12, -30], [3, 26], [-1, 37], [4, 37], [8, 25], [36, -11], [83, 27], [-100, 4], [-60, 59], [-33, 1], [111, 87], [102, 53], [23, -1], [11, -10], [2, -16], [-22, -10], [-21, -19], [10, -16], [15, -3], [48, 14], [22, 17], [105, -2], [30, 13], [8, 12], [134, 2], [25, 9], [85, 46], [78, 57], [36, 31], [61, 79], [53, 51], [87, 51], [21, -6], [-28, -10], [-20, -22], [27, -29], [183, -59], [46, -4], [18, -35], [-15, -34], [-47, -38], [-95, -39], [29, -15], [19, -35], [28, -4], [46, 13], [35, 21], [74, 70], [24, 39], [17, 9], [62, -9], [35, -20], [40, -35], [-15, -34], [-16, -20], [52, -26], [57, -6], [55, -21], [77, 44], [60, 9], [57, -2], [73, 24], [125, -32], [31, 8], [50, -5], [53, -20], [19, -21], [-57, -44], [-9, -46], [20, -19], [36, -4], [4, -27], [23, -6], [112, 2], [-9, -13], [-5, -15], [-35, -34], [200, -20], [27, 19], [41, 8], [88, 26], [33, -12], [39, -26], [36, -6], [34, 6], [78, 38], [91, 2], [37, -13], [39, 6], [118, -44], [44, -5], [58, -57], [30, -1], [34, 24], [29, -1], [29, -23], [47, -7], [22, -37], [24, -13], [178, -27], [88, 13], [129, -4], [62, -17], [65, 2], [107, -63], [56, -9], [11, -15], [161, -15], [56, 33], [98, 8], [88, 28], [50, 0], [59, -7], [22, 3], [16, 12], [142, -47], [79, -55], [35, -40], [166, -57], [48, -32], [33, -36], [19, -3], [14, 10], [58, -3], [22, -5]], [[53455, 75978], [-3, -1], [0, 2], [0, 3], [3, 0], [0, -4]], [[32962, 59156], [-2, -1], [-3, 2], [1, 2], [3, 1], [1, 4], [0, 5], [0, 6], [2, 3], [2, 1], [1, -2], [1, -6], [-2, -4], [-1, -3], [-1, -5], [-2, -3]], [[32992, 59328], [-4, -6], [2, 0], [-2, -5], [-1, 5], [-3, 2], [-2, 1], [-4, 0], [0, 5], [4, -3], [7, 3], [0, 4], [-2, 4], [-1, 3], [2, 5], [8, 10], [3, 5], [1, -2], [0, -2], [0, -2], [1, -2], [-4, -8], [-5, -17]], [[33007, 59422], [-8, -9], [-21, 39], [3, 45], [12, 25], [12, 14], [12, 2], [4, -38], [-3, -52], [-11, -26]], [[33056, 56951], [-17, -12], [-3, 58], [5, 15], [30, 47], [8, 8], [6, -9], [-2, -13], [14, -21], [-3, -26], [-16, -29], [-22, -18]], [[33105, 57107], [-33, -19], [0, 15], [9, 27], [17, 7], [7, 10], [11, 6], [6, -1], [7, -8], [-16, -15], [-8, -22]], [[31885, 58125], [-15, -13], [-27, 13], [-14, 18], [9, 21], [22, 0], [21, -25], [4, -14]], [[32264, 58254], [9, -75], [-3, -14], [-25, -51], [-21, -3], [-17, 1], [-13, 10], [-17, 33], [-16, -10], [-40, 12], [-11, 11], [15, 41], [28, 16], [10, 4], [8, -25], [20, -22], [23, -2], [6, 38], [32, 57], [12, -21]], [[30189, 58676], [-9, -28], [-18, -34], [-20, -21], [-106, -53], [-11, -11], [-13, -22], [0, -50], [2, -39], [32, -129], [12, -32], [41, -70], [-9, -10], [-16, -1], [12, -92], [25, -63], [1, -39], [-19, -123], [-36, -74], [-25, -86], [-20, -34], [-44, -168], [34, -101], [4, -50], [29, -73], [19, -23], [12, -30], [-6, -49], [12, -67], [15, -35], [18, -14], [23, 0], [67, 44], [15, 20], [10, 36], [34, 73], [2, 93], [7, 113], [-8, 73], [-35, 104], [-15, 75], [-35, 69], [-21, 118], [-9, 37], [-6, 51], [-8, 91], [23, 32], [-2, 74], [57, 21], [123, 120], [77, 31], [87, 64], [20, 32], [17, 52], [14, 7], [45, -50], [22, 17], [9, 39], [-12, 75], [-26, 0], [-78, -27], [-8, 32], [0, 29], [-18, 89], [11, 68], [12, 55], [22, 22], [33, 24], [25, -37], [15, -35], [8, -33], [6, -92], [13, -93], [14, -64], [23, -49], [17, 4], [12, 8], [81, 11], [50, -33], [63, -17], [59, -71], [60, -85], [15, -63], [6, -59], [14, -40], [-14, -41], [7, -69], [18, -69], [26, -44], [74, -12], [81, 30], [125, 27], [40, 23], [206, 12], [39, -33], [4, -33], [0, -26], [67, -124], [54, -16], [46, -40], [48, -22], [52, -30], [30, 4], [22, 11], [26, 2], [184, 207], [98, -6], [15, 14], [13, 18], [-36, 32], [-82, 12], [-25, -21], [-14, 53], [27, -2], [91, 18], [105, -11], [85, 38], [43, 6], [24, -8], [68, 25], [128, -29], [101, 24], [-12, -34], [-33, -21], [-53, -7], [-41, -50], [-87, 9], [-61, -18], [19, -14], [0, -51], [9, -11], [8, 0], [21, -38], [6, -25], [7, -53], [-10, -56], [-12, -26], [25, 9], [14, 26], [-2, 27], [2, 31], [14, -10], [9, -14], [32, -148], [22, -78], [6, 3], [5, 3], [7, 15], [10, 36], [9, -23], [5, -9], [5, -3], [-5, 34], [6, 42], [-2, 15], [10, 3], [12, -5], [17, -12], [30, -49], [20, -51], [1, -28], [8, -16], [12, -16], [7, -26], [1, 41], [-8, 30], [-2, 34], [40, 1], [10, 45], [21, -27], [56, -123], [21, -21], [62, -24], [38, -59], [23, -53], [-14, -56], [-36, -28], [-14, -35], [-9, -34], [0, -35], [-11, -40], [-1, -14], [-7, -56], [-15, -68], [-19, -72], [-104, -2], [26, -29], [23, -22], [39, -57], [30, 45], [44, 3], [48, 49], [18, 8], [88, -26], [22, 36], [17, 11], [48, -7], [42, -39]], [[32057, 62443], [-22, -2], [-6, 7], [12, 18], [23, 2], [6, -4], [-13, -21]], [[32112, 62479], [-7, -4], [-5, 1], [-1, 8], [5, 23], [28, 2], [-20, -30]], [[32142, 62638], [4, -19], [-3, 0], [-15, 13], [-13, 1], [-5, 4], [-2, 7], [24, 1], [10, -7]], [[32009, 62093], [24, -26], [28, 0], [-30, -25], [-56, -3], [1, 41], [33, 13]], [[32039, 62415], [-19, -15], [-12, 2], [-5, 6], [10, 18], [26, -11]], [[31987, 62401], [-21, -5], [-28, 27], [22, 10], [15, -6], [12, -26]], [[79615, 56844], [-8, -1], [-6, 12], [26, 37], [-3, -25], [1, -12], [-10, -11]], [[78906, 57828], [5, -29], [-2, -66], [-11, -66], [4, -29], [-9, -18], [-18, 123], [-24, 53], [-5, 21], [14, -2], [24, 34], [12, 1], [10, -22]], [[79768, 57832], [-23, -35], [-2, 29], [20, 19], [7, 15], [6, 0], [-8, -28]], [[79730, 63794], [-11, -3], [-22, 47], [11, 25], [26, -18], [5, -11], [0, -10], [-6, -22], [-3, -8]], [[79684, 63833], [-3, -11], [-14, 27], [-10, 12], [8, 37], [16, -40], [3, -25]], [[79866, 63897], [-15, -15], [-19, 2], [22, 28], [12, 35], [9, 12], [-1, -30], [-8, -32]], [[79889, 64064], [-40, -72], [-15, 1], [13, 82], [7, 19], [24, -28], [11, -2]], [[79992, 64232], [-13, -5], [-33, -1], [-28, -53], [-20, -22], [-30, -18], [-33, -30], [-9, -52], [-1, -38], [-5, -42], [-53, -61], [-15, 6], [-10, 23], [-15, -5], [-11, -11], [-12, 1], [-14, -13], [-18, 4], [-17, 19], [-10, 5], [-12, 1], [-2, -23], [17, -89], [5, -41], [-56, -120], [6, -78], [-15, -59], [-34, -48], [-64, -123], [-29, -3], [-22, -28], [-47, -202], [-1, -70], [-7, -50], [2, -49], [-21, -96], [-22, -41], [-4, -52], [30, -108], [4, -19], [17, -58], [9, -41], [14, -41], [49, -107], [22, -33], [26, -23], [48, -96], [24, -62], [-11, -41], [6, -89], [-35, 26], [5, -11], [40, -48], [61, -170], [53, -84], [54, -96], [17, -91], [48, -60], [54, -87], [-2, -19], [14, -24], [37, -46], [22, -49], [8, -46], [13, -7], [16, 11], [15, 4], [10, -3], [17, -51], [22, -46], [11, -41], [9, 5], [7, -6], [2, -35], [4, -23], [30, -67], [14, -63], [37, -103], [26, -58], [20, -33], [21, -28], [22, -114], [11, -103], [23, -114], [18, -50], [0, -95], [14, -97], [15, -65], [5, -67], [4, -33], [6, -25], [16, -114], [-4, -52], [-11, 51], [1, -152], [10, -80], [-5, -99], [11, -35], [19, -111], [13, -40], [-1, -137], [7, -69], [-18, 41], [-13, 47], [-17, -25], [-15, -36], [24, -147], [-28, 14], [3, -197], [11, -46], [1, -22], [-3, -27], [-8, 29], [-1, 30], [-5, -6], [1, -16], [-10, -35], [-2, -43], [9, -36], [2, -28], [-7, -35], [-11, -37], [-26, -5], [-6, -71], [-9, -76], [-46, -12], [-33, -67], [-42, -25], [-37, -67], [-40, -61], [-27, -8], [-22, -13], [-26, -102], [-44, -12], [-78, -83], [-26, -40], [-24, -16], [-34, -35], [-7, 13], [-12, 30], [-29, 15], [-15, 33], [-4, 43], [-4, 17], [-6, -24], [-5, -102], [-5, -23], [-13, -10], [-25, 29], [-23, 59], [-34, -41], [10, -5], [16, 3], [12, -10], [10, -39], [-1, -22], [-5, -25], [-32, -4], [-42, 9], [-7, -3], [38, -39], [35, -22], [16, -24], [0, -20], [-20, -32], [-15, -40], [-1, -25], [0, -27], [-17, -24], [-11, 5], [-30, 41], [-86, 163], [13, -46], [90, -185], [15, -61], [3, -43], [-10, -21], [-15, -26], [-29, -2], [-49, 69], [-77, 165], [-26, 22], [78, -188], [13, -46], [13, -53], [-4, -31], [-7, -30], [-185, -174], [-28, -76], [-22, -93], [-36, -51], [-21, -48], [-62, -26], [-34, 8], [35, 86], [-22, 32], [-1, 221], [9, 242], [16, 121], [23, 30], [30, 19], [0, 25], [-3, 30], [-15, 41], [-18, 19], [-25, 8], [-20, 51], [-15, -2], [-24, -17], [-14, 22], [-5, 34], [-22, 42], [-24, 41]], [[97192, 40214], [-9, -31], [-15, 0], [-20, 22], [4, 29], [22, 5], [6, -2], [12, -23]], [[97080, 40587], [-15, -63], [-25, 15], [-24, 45], [-12, 40], [8, 75], [12, 14], [13, -5], [6, -74], [37, -47]], [[97036, 40932], [-12, -27], [-12, 3], [-72, 64], [3, 27], [-3, 67], [8, 37], [20, 15], [15, -8], [10, -54], [22, -22], [-16, -18], [27, -41], [10, -43]], [[96790, 41738], [27, -82], [11, -7], [-17, -59], [-34, -5], [-41, 15], [15, 20], [-8, 23], [-13, 5], [-14, -11], [-6, 4], [9, 38], [23, 53], [6, 4], [6, 1], [6, -5], [30, 6]], [[96790, 42177], [8, -8], [-4, -24], [-39, 27], [-30, -10], [-9, 1], [-9, 22], [-7, 44], [3, 30], [13, 22], [5, 3], [10, -26], [8, -18], [9, -8], [19, -43], [23, -12]], [[96748, 42432], [-32, -6], [-44, 18], [-18, 25], [-8, 25], [15, 19], [23, 9], [27, 57], [10, -22], [10, -64], [11, -20], [6, -19], [0, -22]], [[96503, 42571], [12, -13], [7, 0], [4, -28], [40, -56], [11, 2], [9, -31], [17, -15], [5, -31], [12, -32], [-21, -38], [-41, 10], [-24, -44], [-21, 11], [-4, 23], [3, 8], [-13, 58], [-5, 90], [-9, 52], [-9, 23], [-20, -20], [-8, -3], [-18, 43], [9, 87], [4, 25], [15, 5], [23, -23], [22, -103]], [[96449, 42785], [-5, -15], [-30, 37], [7, 36], [32, -12], [-4, -46]], [[96725, 42643], [-5, -1], [-4, 27], [-16, 141], [10, 126], [7, -27], [23, -221], [-3, -36], [-12, -9]], [[96641, 42951], [-19, -26], [-34, 2], [-13, 15], [42, 80], [49, 17], [-25, -88]], [[96718, 43013], [-5, -36], [-11, 41], [-7, 175], [3, 16], [6, 1], [14, -121], [0, -76]], [[96317, 43302], [18, -191], [21, 1], [11, 10], [12, 45], [5, 70], [11, 10], [14, -8], [-6, -22], [4, -56], [10, -31], [7, -6], [14, -146], [6, -31], [-1, -25], [-29, -54], [-44, 1], [-30, -33], [-19, 3], [0, 37], [-17, 29], [-19, 63], [5, 112], [-33, 208], [-1, 52], [12, 68], [11, 3], [15, -56], [23, -53]], [[96550, 43628], [-11, -29], [-32, 9], [-7, 8], [2, 48], [8, 17], [19, 15], [25, -24], [-4, -44]], [[96524, 43832], [-4, -6], [-7, 4], [-16, 70], [4, 23], [21, 22], [18, -38], [2, -22], [0, -18], [-3, -16], [-13, -6], [-2, -13]], [[543, 43595], [-16, -4], [-16, 7], [-9, 33], [4, 14], [10, -7], [10, -24], [17, -11], [0, -8]], [[1066, 44162], [-4, -4], [-5, 22], [7, 34], [6, 12], [6, -26], [-10, -38]], [[2374, 43751], [-76, 0], [-38, 26], [-13, 0], [-33, 55], [-5, 28], [17, 19], [36, 10], [70, -41], [11, -37], [16, -4], [13, -16], [3, -26], [-1, -14]], [[2130, 44086], [31, -54], [12, -72], [-13, -69], [-30, 17], [-42, -15], [-15, 5], [-34, 85], [-23, 38], [-10, 35], [30, -4], [44, 24], [50, 10]], [[64934, 59122], [17, -7], [26, 20], [74, 3], [90, -65], [-17, -16], [-10, -24], [-39, -21], [-40, -49], [-114, -24], [-33, 13], [-28, 48], [-51, 62], [20, 40], [5, 18], [7, 17], [29, 30], [29, -4], [35, -41]], [[61876, 59737], [-18, -18], [12, 46], [13, 9], [4, -2], [-11, -35]], [[61885, 59891], [-4, -13], [-5, 3], [-17, 31], [19, 34], [10, -32], [-3, -23]], [[61830, 60658], [-9, -13], [-2, 23], [5, 50], [9, 14], [7, -37], [-4, -20], [-6, -17]], [[64745, 61433], [-140, -103], [-37, -45], [-33, -57], [-25, -70], [-18, -124], [13, -113], [-1, -60], [-36, -40], [-34, -29], [-37, -44], [-23, -11], [-19, -35], [-21, -25], [-78, -63], [-86, -50], [-135, -59], [-53, -64], [-47, -44], [-73, -13], [-99, -61], [-55, -48], [-69, -80], [-15, -25], [-12, -58], [-21, -51], [-42, -83], [-31, -42], [-20, -2], [-41, -23], [-47, -5], [-80, 29], [-21, -20], [-17, -33], [-61, -56], [-63, -114], [-46, -30], [-74, -36], [-52, -47], [-35, -19], [-44, -10], [-83, 5], [-79, -17], [-73, -32], [-34, -60], [-39, -96], [-64, -40], [-15, -34], [-20, -71], [-41, -18], [-38, -12], [-38, 31], [-72, -85], [-27, -15], [-41, -3], [-30, -18], [-21, 5], [-26, 34], [-56, 40], [-41, -26], [-3, 80], [-68, 247], [14, 215], [0, 30], [-13, 96], [-40, 87], [1, 111], [-14, 80], [-10, 81], [3, 22], [1, 20], [-21, 125], [-7, 26], [-2, 26], [6, 20], [0, 24], [-11, 38], [-11, 74], [-55, 57], [11, 54], [11, -19], [14, -16], [3, 35], [0, 26], [-23, 163], [34, 218], [-11, 195]], [[60515, 24801], [-12, -11], [-56, 10], [-6, 22], [17, 34], [9, 14], [29, -7], [24, -28], [4, -9], [-9, -25]], [[59134, 36376], [-10, -133], [-40, -208], [-13, -95], [-34, -341], [-44, -172], [-25, -71], [-72, -126], [-20, -25], [-18, -17], [-31, -14], [-123, -254], [-46, -123], [-41, -178], [-40, -98], [-60, -210], [-53, -161], [-51, -147], [-88, -203], [-39, -59], [-27, -26], [-70, -118], [-99, -189], [-75, -168], [-113, -190], [-65, -84], [-99, -164], [-27, -24], [-111, -152], [-79, -93], [-129, -107], [-51, -30], [-122, 28], [-51, -15], [-43, -65], [-4, -93], [-18, -14], [-27, 4], [-85, 39], [-46, -7], [-27, -50], [-22, -63], [-64, -3], [-115, 65], [-135, 40], [-31, 4], [-65, -48], [-23, -7], [-95, 10], [-53, 31], [-51, 0], [-38, -26], [-47, -8], [-127, -175], [-66, 0], [-56, -21], [-28, 1], [-53, 24], [-19, -1], [-30, -11], [-30, -31], [-68, -13], [-26, -27], [-115, -159], [-26, 6], [-22, 11], [-59, 1], [-68, 86], [-26, -6], [7, 26], [2, 45], [-14, 32], [-10, 14], [-26, -3], [-14, 39], [-41, 3], [-14, -9], [-20, -2], [-1, 39], [1, 24], [-1, 38], [-5, 46], [-16, 15], [-12, 6], [-28, -3], [-20, -5], [-10, -14], [-10, -33], [0, -103], [-15, 29], [-16, 62], [-5, 66], [6, 78], [31, 29], [-3, 53], [-6, 45], [-35, 117], [-13, 54], [-29, 36], [-23, 87], [-23, 32], [-9, 61], [-22, 49], [-8, 77], [12, 44], [20, 24], [20, -38], [24, 15], [35, 56], [21, 85], [1, 135], [-5, 85], [-28, 219], [-13, 50], [-63, 157], [-72, 210], [-92, 330], [-44, 199], [-66, 401], [-59, 227], [-72, 212], [-9, 14]], [[58156, 39058], [4, 1], [79, 27], [67, -22], [80, -62], [75, -22], [69, 18], [57, 4], [44, -9], [34, -22], [25, -33]], [[58443, 42832], [-41, -1], [-71, 0], [-73, 0], [-68, -30], [-55, -46], [-66, -72], [-22, -28], [-16, -22], [-11, -28], [-5, -61], [0, -94], [-6, -68], [-21, -62], [-100, -76], [-65, -61], [-65, -73], [-48, -95], [-34, -116], [-55, -144], [-56, -125], [-60, -132], [-67, -48], [-56, 11], [-68, 54], [-54, 10], [-39, -34], [-37, 11], [-34, 54], [-28, 19], [-23, -14], [-30, 2], [-53, 30]]],
  "bbox": [-180, -89.999, 180, 83.59960937500006],
  "transform": {
    "scale": [0.0036000360003600037, 0.0017360034537845382],
    "translate": [-180, -89.999]
  }
};
},{}],"static/data/countries50m.tsv":[function(require,module,exports) {
module.exports = "/countries50m.fac2bcd7.tsv";
},{}],"src/ColorLegend/colorLegend.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.colorLegend = void 0;

var colorLegend = function colorLegend(selection, props) {
  var colorScale = props.colorScale,
      _props$circleRadius = props.circleRadius,
      circleRadius = _props$circleRadius === void 0 ? 50 : _props$circleRadius,
      _props$spacing = props.spacing,
      spacing = _props$spacing === void 0 ? 30 : _props$spacing,
      _props$textOffset = props.textOffset,
      textOffset = _props$textOffset === void 0 ? 15 : _props$textOffset,
      onClick = props.onFilter,
      selectedValue = props.selectedValue;
  var n = colorScale.domain().length;
  selection.append('rect').attr('x', -circleRadius * 2).attr('y', -circleRadius * 2).attr('fill', 'white').attr('height', spacing * n + circleRadius * 2 - 10).attr('width', 250).attr('stroke', 'grey').attr('rx', circleRadius).attr('opacity', 0.75);
  selection.attr('transform', "translate(".concat(circleRadius * 2 + 10, ", ").concat(window.innerHeight - (spacing * n + circleRadius * 2 - 10), ")"));
  var groups = selection.selectAll('g').data(colorScale.domain());
  var groupsEnter = groups.enter().append('g').attr('transform', function (d, i) {
    return "translate(0, ".concat(i * spacing, ")");
  }).attr('class', 'legendOption').merge(groups).attr('opacity', function (d) {
    return !selectedValue || d === selectedValue ? 1 : 0.5;
  }).on('click', function (d) {
    onClick(selectedValue === d ? null : d);
  });
  groupsEnter.append('circle').merge(groups.select('circle')).attr('r', circleRadius).attr('fill', colorScale).attr('stroke', 'black');
  groupsEnter.append('text').text(function (d) {
    return d;
  }).attr('dy', '0.32em').attr('text-anchor', 'start').attr('dx', textOffset).attr('class', 'label');
};

exports.colorLegend = colorLegend;
},{}],"static/data/airport.csv":[function(require,module,exports) {
module.exports = "/airport.2f804009.csv";
},{}],"node_modules/faker/lib/fake.js":[function(require,module,exports) {
/*
  fake.js - generator method for combining faker methods based on string input

*/

function Fake (faker) {
  
  /**
   * Generator method for combining faker methods based on string input
   *
   * __Example:__
   *
   * ```
   * console.log(faker.fake('{{name.lastName}}, {{name.firstName}} {{name.suffix}}'));
   * //outputs: "Marks, Dean Sr."
   * ```
   *
   * This will interpolate the format string with the value of methods
   * [name.lastName]{@link faker.name.lastName}, [name.firstName]{@link faker.name.firstName},
   * and [name.suffix]{@link faker.name.suffix}
   *
   * @method faker.fake
   * @param {string} str
   */
  this.fake = function fake (str) {
    // setup default response as empty string
    var res = '';

    // if incoming str parameter is not provided, return error message
    if (typeof str !== 'string' || str.length === 0) {
      res = 'string parameter is required!';
      return res;
    }

    // find first matching {{ and }}
    var start = str.search('{{');
    var end = str.search('}}');

    // if no {{ and }} is found, we are done
    if (start === -1 && end === -1) {
      return str;
    }

    // console.log('attempting to parse', str);

    // extract method name from between the {{ }} that we found
    // for example: {{name.firstName}}
    var token = str.substr(start + 2,  end - start - 2);
    var method = token.replace('}}', '').replace('{{', '');

    // console.log('method', method)

    // extract method parameters
    var regExp = /\(([^)]+)\)/;
    var matches = regExp.exec(method);
    var parameters = '';
    if (matches) {
      method = method.replace(regExp, '');
      parameters = matches[1];
    }

    // split the method into module and function
    var parts = method.split('.');

    if (typeof faker[parts[0]] === "undefined") {
      throw new Error('Invalid module: ' + parts[0]);
    }

    if (typeof faker[parts[0]][parts[1]] === "undefined") {
      throw new Error('Invalid method: ' + parts[0] + "." + parts[1]);
    }

    // assign the function from the module.function namespace
    var fn = faker[parts[0]][parts[1]];

    // If parameters are populated here, they are always going to be of string type
    // since we might actually be dealing with an object or array,
    // we always attempt to the parse the incoming parameters into JSON
    var params;
    // Note: we experience a small performance hit here due to JSON.parse try / catch
    // If anyone actually needs to optimize this specific code path, please open a support issue on github
    try {
      params = JSON.parse(parameters)
    } catch (err) {
      // since JSON.parse threw an error, assume parameters was actually a string
      params = parameters;
    }

    var result;
    if (typeof params === "string" && params.length === 0) {
      result = fn.call(this);
    } else {
      result = fn.call(this, params);
    }

    // replace the found tag with the returned fake value
    res = str.replace('{{' + token + '}}', result);

    // return the response recursively until we are done finding all tags
    return fake(res);    
  }
  
  return this;
  
  
}

module['exports'] = Fake;
},{}],"node_modules/faker/vendor/mersenne.js":[function(require,module,exports) {
// this program is a JavaScript version of Mersenne Twister, with concealment and encapsulation in class,
// an almost straight conversion from the original program, mt19937ar.c,
// translated by y. okada on July 17, 2006.
// and modified a little at july 20, 2006, but there are not any substantial differences.
// in this program, procedure descriptions and comments of original source code were not removed.
// lines commented with //c// were originally descriptions of c procedure. and a few following lines are appropriate JavaScript descriptions.
// lines commented with /* and */ are original comments.
// lines commented with // are additional comments in this JavaScript version.
// before using this version, create at least one instance of MersenneTwister19937 class, and initialize the each state, given below in c comments, of all the instances.
/*
   A C-program for MT19937, with initialization improved 2002/1/26.
   Coded by Takuji Nishimura and Makoto Matsumoto.

   Before using, initialize the state by using init_genrand(seed)
   or init_by_array(init_key, key_length).

   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

     1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

     3. The names of its contributors may not be used to endorse or promote
        products derived from this software without specific prior written
        permission.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


   Any feedback is very welcome.
   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
   email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
*/

function MersenneTwister19937()
{
	/* constants should be scoped inside the class */
	var N, M, MATRIX_A, UPPER_MASK, LOWER_MASK;
	/* Period parameters */
	//c//#define N 624
	//c//#define M 397
	//c//#define MATRIX_A 0x9908b0dfUL   /* constant vector a */
	//c//#define UPPER_MASK 0x80000000UL /* most significant w-r bits */
	//c//#define LOWER_MASK 0x7fffffffUL /* least significant r bits */
	N = 624;
	M = 397;
	MATRIX_A = 0x9908b0df;   /* constant vector a */
	UPPER_MASK = 0x80000000; /* most significant w-r bits */
	LOWER_MASK = 0x7fffffff; /* least significant r bits */
	//c//static unsigned long mt[N]; /* the array for the state vector  */
	//c//static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
	var mt = new Array(N);   /* the array for the state vector  */
	var mti = N+1;           /* mti==N+1 means mt[N] is not initialized */

	function unsigned32 (n1) // returns a 32-bits unsiged integer from an operand to which applied a bit operator.
	{
		return n1 < 0 ? (n1 ^ UPPER_MASK) + UPPER_MASK : n1;
	}

	function subtraction32 (n1, n2) // emulates lowerflow of a c 32-bits unsiged integer variable, instead of the operator -. these both arguments must be non-negative integers expressible using unsigned 32 bits.
	{
		return n1 < n2 ? unsigned32((0x100000000 - (n2 - n1)) & 0xffffffff) : n1 - n2;
	}

	function addition32 (n1, n2) // emulates overflow of a c 32-bits unsiged integer variable, instead of the operator +. these both arguments must be non-negative integers expressible using unsigned 32 bits.
	{
		return unsigned32((n1 + n2) & 0xffffffff)
	}

	function multiplication32 (n1, n2) // emulates overflow of a c 32-bits unsiged integer variable, instead of the operator *. these both arguments must be non-negative integers expressible using unsigned 32 bits.
	{
		var sum = 0;
		for (var i = 0; i < 32; ++i){
			if ((n1 >>> i) & 0x1){
				sum = addition32(sum, unsigned32(n2 << i));
			}
		}
		return sum;
	}

	/* initializes mt[N] with a seed */
	//c//void init_genrand(unsigned long s)
	this.init_genrand = function (s)
	{
		//c//mt[0]= s & 0xffffffff;
		mt[0]= unsigned32(s & 0xffffffff);
		for (mti=1; mti<N; mti++) {
			mt[mti] =
			//c//(1812433253 * (mt[mti-1] ^ (mt[mti-1] >> 30)) + mti);
			addition32(multiplication32(1812433253, unsigned32(mt[mti-1] ^ (mt[mti-1] >>> 30))), mti);
			/* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
			/* In the previous versions, MSBs of the seed affect   */
			/* only MSBs of the array mt[].                        */
			/* 2002/01/09 modified by Makoto Matsumoto             */
			//c//mt[mti] &= 0xffffffff;
			mt[mti] = unsigned32(mt[mti] & 0xffffffff);
			/* for >32 bit machines */
		}
	}

	/* initialize by an array with array-length */
	/* init_key is the array for initializing keys */
	/* key_length is its length */
	/* slight change for C++, 2004/2/26 */
	//c//void init_by_array(unsigned long init_key[], int key_length)
	this.init_by_array = function (init_key, key_length)
	{
		//c//int i, j, k;
		var i, j, k;
		//c//init_genrand(19650218);
		this.init_genrand(19650218);
		i=1; j=0;
		k = (N>key_length ? N : key_length);
		for (; k; k--) {
			//c//mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1664525))
			//c//	+ init_key[j] + j; /* non linear */
			mt[i] = addition32(addition32(unsigned32(mt[i] ^ multiplication32(unsigned32(mt[i-1] ^ (mt[i-1] >>> 30)), 1664525)), init_key[j]), j);
			mt[i] =
			//c//mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */
			unsigned32(mt[i] & 0xffffffff);
			i++; j++;
			if (i>=N) { mt[0] = mt[N-1]; i=1; }
			if (j>=key_length) j=0;
		}
		for (k=N-1; k; k--) {
			//c//mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1566083941))
			//c//- i; /* non linear */
			mt[i] = subtraction32(unsigned32((dbg=mt[i]) ^ multiplication32(unsigned32(mt[i-1] ^ (mt[i-1] >>> 30)), 1566083941)), i);
			//c//mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */
			mt[i] = unsigned32(mt[i] & 0xffffffff);
			i++;
			if (i>=N) { mt[0] = mt[N-1]; i=1; }
		}
		mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */
	}

    /* moved outside of genrand_int32() by jwatte 2010-11-17; generate less garbage */
    var mag01 = [0x0, MATRIX_A];

	/* generates a random number on [0,0xffffffff]-interval */
	//c//unsigned long genrand_int32(void)
	this.genrand_int32 = function ()
	{
		//c//unsigned long y;
		//c//static unsigned long mag01[2]={0x0UL, MATRIX_A};
		var y;
		/* mag01[x] = x * MATRIX_A  for x=0,1 */

		if (mti >= N) { /* generate N words at one time */
			//c//int kk;
			var kk;

			if (mti == N+1)   /* if init_genrand() has not been called, */
				//c//init_genrand(5489); /* a default initial seed is used */
				this.init_genrand(5489); /* a default initial seed is used */

			for (kk=0;kk<N-M;kk++) {
				//c//y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
				//c//mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
				y = unsigned32((mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK));
				mt[kk] = unsigned32(mt[kk+M] ^ (y >>> 1) ^ mag01[y & 0x1]);
			}
			for (;kk<N-1;kk++) {
				//c//y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
				//c//mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
				y = unsigned32((mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK));
				mt[kk] = unsigned32(mt[kk+(M-N)] ^ (y >>> 1) ^ mag01[y & 0x1]);
			}
			//c//y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
			//c//mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
			y = unsigned32((mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK));
			mt[N-1] = unsigned32(mt[M-1] ^ (y >>> 1) ^ mag01[y & 0x1]);
			mti = 0;
		}

		y = mt[mti++];

		/* Tempering */
		//c//y ^= (y >> 11);
		//c//y ^= (y << 7) & 0x9d2c5680;
		//c//y ^= (y << 15) & 0xefc60000;
		//c//y ^= (y >> 18);
		y = unsigned32(y ^ (y >>> 11));
		y = unsigned32(y ^ ((y << 7) & 0x9d2c5680));
		y = unsigned32(y ^ ((y << 15) & 0xefc60000));
		y = unsigned32(y ^ (y >>> 18));

		return y;
	}

	/* generates a random number on [0,0x7fffffff]-interval */
	//c//long genrand_int31(void)
	this.genrand_int31 = function ()
	{
		//c//return (genrand_int32()>>1);
		return (this.genrand_int32()>>>1);
	}

	/* generates a random number on [0,1]-real-interval */
	//c//double genrand_real1(void)
	this.genrand_real1 = function ()
	{
		//c//return genrand_int32()*(1.0/4294967295.0);
		return this.genrand_int32()*(1.0/4294967295.0);
		/* divided by 2^32-1 */
	}

	/* generates a random number on [0,1)-real-interval */
	//c//double genrand_real2(void)
	this.genrand_real2 = function ()
	{
		//c//return genrand_int32()*(1.0/4294967296.0);
		return this.genrand_int32()*(1.0/4294967296.0);
		/* divided by 2^32 */
	}

	/* generates a random number on (0,1)-real-interval */
	//c//double genrand_real3(void)
	this.genrand_real3 = function ()
	{
		//c//return ((genrand_int32()) + 0.5)*(1.0/4294967296.0);
		return ((this.genrand_int32()) + 0.5)*(1.0/4294967296.0);
		/* divided by 2^32 */
	}

	/* generates a random number on [0,1) with 53-bit resolution*/
	//c//double genrand_res53(void)
	this.genrand_res53 = function ()
	{
		//c//unsigned long a=genrand_int32()>>5, b=genrand_int32()>>6;
		var a=this.genrand_int32()>>>5, b=this.genrand_int32()>>>6;
		return(a*67108864.0+b)*(1.0/9007199254740992.0);
	}
	/* These real versions are due to Isaku Wada, 2002/01/09 added */
}

//  Exports: Public API

//  Export the twister class
exports.MersenneTwister19937 = MersenneTwister19937;

//  Export a simplified function to generate random numbers
var gen = new MersenneTwister19937;
gen.init_genrand((new Date).getTime() % 1000000000);

// Added max, min range functionality, Marak Squires Sept 11 2014
exports.rand = function(max, min) {
    if (max === undefined)
        {
        min = 0;
        max = 32768;
        }
    return Math.floor(gen.genrand_real2() * (max - min) + min);
}
exports.seed = function(S) {
    if (typeof(S) != 'number')
        {
        throw new Error("seed(S) must take numeric argument; is " + typeof(S));
        }
    gen.init_genrand(S);
}
exports.seed_array = function(A) {
    if (typeof(A) != 'object')
        {
        throw new Error("seed_array(A) must take array of numbers; is " + typeof(A));
        }
    gen.init_by_array(A);
}

},{}],"node_modules/faker/lib/random.js":[function(require,module,exports) {
var mersenne = require('../vendor/mersenne');

/**
 *
 * @namespace faker.random
 */
function Random (faker, seed) {
  // Use a user provided seed if it exists
  if (seed) {
    if (Array.isArray(seed) && seed.length) {
      mersenne.seed_array(seed);
    }
    else {
      mersenne.seed(seed);
    }
  }
  /**
   * returns a single random number based on a max number or range
   *
   * @method faker.random.number
   * @param {mixed} options
   */
  this.number = function (options) {

    if (typeof options === "number") {
      options = {
        max: options
      };
    }

    options = options || {};

    if (typeof options.min === "undefined") {
      options.min = 0;
    }

    if (typeof options.max === "undefined") {
      options.max = 99999;
    }
    if (typeof options.precision === "undefined") {
      options.precision = 1;
    }

    // Make the range inclusive of the max value
    var max = options.max;
    if (max >= 0) {
      max += options.precision;
    }

    var randomNumber = options.precision * Math.floor(
      mersenne.rand(max / options.precision, options.min / options.precision));

    return randomNumber;

  }

  /**
   * takes an array and returns a random element of the array
   *
   * @method faker.random.arrayElement
   * @param {array} array
   */
  this.arrayElement = function (array) {
      array = array || ["a", "b", "c"];
      var r = faker.random.number({ max: array.length - 1 });
      return array[r];
  }

  /**
   * takes an object and returns the randomly key or value
   *
   * @method faker.random.objectElement
   * @param {object} object
   * @param {mixed} field
   */
  this.objectElement = function (object, field) {
      object = object || { "foo": "bar", "too": "car" };
      var array = Object.keys(object);
      var key = faker.random.arrayElement(array);

      return field === "key" ? key : object[key];
  }

  /**
   * uuid
   *
   * @method faker.random.uuid
   */
  this.uuid = function () {
      var self = this;
      var RFC4122_TEMPLATE = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
      var replacePlaceholders = function (placeholder) {
          var random = self.number({ min: 0, max: 15 });
          var value = placeholder == 'x' ? random : (random &0x3 | 0x8);
          return value.toString(16);
      };
      return RFC4122_TEMPLATE.replace(/[xy]/g, replacePlaceholders);
  }

  /**
   * boolean
   *
   * @method faker.random.boolean
   */
  this.boolean = function () {
      return !!faker.random.number(1)
  }

  // TODO: have ability to return specific type of word? As in: noun, adjective, verb, etc
  /**
   * word
   *
   * @method faker.random.word
   * @param {string} type
   */
  this.word = function randomWord (type) {

    var wordMethods = [
    'commerce.department',
    'commerce.productName',
    'commerce.productAdjective',
    'commerce.productMaterial',
    'commerce.product',
    'commerce.color',

    'company.catchPhraseAdjective',
    'company.catchPhraseDescriptor',
    'company.catchPhraseNoun',
    'company.bsAdjective',
    'company.bsBuzz',
    'company.bsNoun',
    'address.streetSuffix',
    'address.county',
    'address.country',
    'address.state',

    'finance.accountName',
    'finance.transactionType',
    'finance.currencyName',

    'hacker.noun',
    'hacker.verb',
    'hacker.adjective',
    'hacker.ingverb',
    'hacker.abbreviation',

    'name.jobDescriptor',
    'name.jobArea',
    'name.jobType'];

    // randomly pick from the many faker methods that can generate words
    var randomWordMethod = faker.random.arrayElement(wordMethods);
    return faker.fake('{{' + randomWordMethod + '}}');

  }

  /**
   * randomWords
   *
   * @method faker.random.words
   * @param {number} count defaults to a random value between 1 and 3
   */
  this.words = function randomWords (count) {
    var words = [];
    if (typeof count === "undefined") {
      count = faker.random.number({min:1, max: 3});
    }
    for (var i = 0; i<count; i++) {
      words.push(faker.random.word());
    }
    return words.join(' ');
  }

  /**
   * locale
   *
   * @method faker.random.image
   */
  this.image = function randomImage () {
    return faker.image.image();
  }

  /**
   * locale
   *
   * @method faker.random.locale
   */
  this.locale = function randomLocale () {
    return faker.random.arrayElement(Object.keys(faker.locales));
  };

  /**
   * alphaNumeric
   *
   * @method faker.random.alphaNumeric
   * @param {number} count defaults to 1
   */
  this.alphaNumeric = function alphaNumeric(count) {
    if (typeof count === "undefined") {
      count = 1;
    }

    var wholeString = "";
    for(var i = 0; i < count; i++) {
      wholeString += faker.random.arrayElement(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]);
    }

    return wholeString;
  };

  return this;

}

module['exports'] = Random;

},{"../vendor/mersenne":"node_modules/faker/vendor/mersenne.js"}],"node_modules/faker/lib/helpers.js":[function(require,module,exports) {
/**
 *
 * @namespace faker.helpers
 */
var Helpers = function (faker) {

  var self = this;

  /**
   * backword-compatibility
   *
   * @method faker.helpers.randomize
   * @param {array} array
   */
  self.randomize = function (array) {
      array = array || ["a", "b", "c"];
      return faker.random.arrayElement(array);
  };

  /**
   * slugifies string
   *
   * @method faker.helpers.slugify
   * @param {string} string
   */
  self.slugify = function (string) {
      string = string || "";
      return string.replace(/ /g, '-').replace(/[^\w\.\-]+/g, '');
  };

  /**
   * parses string for a symbol and replace it with a random number from 1-10
   *
   * @method faker.helpers.replaceSymbolWithNumber
   * @param {string} string
   * @param {string} symbol defaults to `"#"`
   */
  self.replaceSymbolWithNumber = function (string, symbol) {
      string = string || "";
      // default symbol is '#'
      if (symbol === undefined) {
          symbol = '#';
      }

      var str = '';
      for (var i = 0; i < string.length; i++) {
          if (string.charAt(i) == symbol) {
              str += faker.random.number(9);
          } else {
              str += string.charAt(i);
          }
      }
      return str;
  };

  /**
   * parses string for symbols (numbers or letters) and replaces them appropriately
   *
   * @method faker.helpers.replaceSymbols
   * @param {string} string
   */
  self.replaceSymbols = function (string) {
      string = string || "";
      var alpha = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']
      var str = '';

      for (var i = 0; i < string.length; i++) {
          if (string.charAt(i) == "#") {
              str += faker.random.number(9);
          } else if (string.charAt(i) == "?") {
              str += faker.random.arrayElement(alpha);
          } else {
              str += string.charAt(i);
          }
      }
      return str;
  };

  /**
   * takes an array and returns it randomized
   *
   * @method faker.helpers.shuffle
   * @param {array} o
   */
  self.shuffle = function (o) {
      if (typeof o === 'undefined' || o.length === 0) {
        return [];
      }
      o = o || ["a", "b", "c"];
      for (var j, x, i = o.length-1; i; j = faker.random.number(i), x = o[--i], o[i] = o[j], o[j] = x);
      return o;
  };

  /**
   * mustache
   *
   * @method faker.helpers.mustache
   * @param {string} str
   * @param {object} data
   */
  self.mustache = function (str, data) {
    if (typeof str === 'undefined') {
      return '';
    }
    for(var p in data) {
      var re = new RegExp('{{' + p + '}}', 'g')
      str = str.replace(re, data[p]);
    }
    return str;
  };

  /**
   * createCard
   *
   * @method faker.helpers.createCard
   */
  self.createCard = function () {
      return {
          "name": faker.name.findName(),
          "username": faker.internet.userName(),
          "email": faker.internet.email(),
          "address": {
              "streetA": faker.address.streetName(),
              "streetB": faker.address.streetAddress(),
              "streetC": faker.address.streetAddress(true),
              "streetD": faker.address.secondaryAddress(),
              "city": faker.address.city(),
              "state": faker.address.state(),
              "country": faker.address.country(),
              "zipcode": faker.address.zipCode(),
              "geo": {
                  "lat": faker.address.latitude(),
                  "lng": faker.address.longitude()
              }
          },
          "phone": faker.phone.phoneNumber(),
          "website": faker.internet.domainName(),
          "company": {
              "name": faker.company.companyName(),
              "catchPhrase": faker.company.catchPhrase(),
              "bs": faker.company.bs()
          },
          "posts": [
              {
                  "words": faker.lorem.words(),
                  "sentence": faker.lorem.sentence(),
                  "sentences": faker.lorem.sentences(),
                  "paragraph": faker.lorem.paragraph()
              },
              {
                  "words": faker.lorem.words(),
                  "sentence": faker.lorem.sentence(),
                  "sentences": faker.lorem.sentences(),
                  "paragraph": faker.lorem.paragraph()
              },
              {
                  "words": faker.lorem.words(),
                  "sentence": faker.lorem.sentence(),
                  "sentences": faker.lorem.sentences(),
                  "paragraph": faker.lorem.paragraph()
              }
          ],
          "accountHistory": [faker.helpers.createTransaction(), faker.helpers.createTransaction(), faker.helpers.createTransaction()]
      };
  };

  /**
   * contextualCard
   *
   * @method faker.helpers.contextualCard
   */
  self.contextualCard = function () {
    var name = faker.name.firstName(),
        userName = faker.internet.userName(name);
    return {
        "name": name,
        "username": userName,
        "avatar": faker.internet.avatar(),
        "email": faker.internet.email(userName),
        "dob": faker.date.past(50, new Date("Sat Sep 20 1992 21:35:02 GMT+0200 (CEST)")),
        "phone": faker.phone.phoneNumber(),
        "address": {
            "street": faker.address.streetName(true),
            "suite": faker.address.secondaryAddress(),
            "city": faker.address.city(),
            "zipcode": faker.address.zipCode(),
            "geo": {
                "lat": faker.address.latitude(),
                "lng": faker.address.longitude()
            }
        },
        "website": faker.internet.domainName(),
        "company": {
            "name": faker.company.companyName(),
            "catchPhrase": faker.company.catchPhrase(),
            "bs": faker.company.bs()
        }
    };
  };


  /**
   * userCard
   *
   * @method faker.helpers.userCard
   */
  self.userCard = function () {
      return {
          "name": faker.name.findName(),
          "username": faker.internet.userName(),
          "email": faker.internet.email(),
          "address": {
              "street": faker.address.streetName(true),
              "suite": faker.address.secondaryAddress(),
              "city": faker.address.city(),
              "zipcode": faker.address.zipCode(),
              "geo": {
                  "lat": faker.address.latitude(),
                  "lng": faker.address.longitude()
              }
          },
          "phone": faker.phone.phoneNumber(),
          "website": faker.internet.domainName(),
          "company": {
              "name": faker.company.companyName(),
              "catchPhrase": faker.company.catchPhrase(),
              "bs": faker.company.bs()
          }
      };
  };

  /**
   * createTransaction
   *
   * @method faker.helpers.createTransaction
   */
  self.createTransaction = function(){
    return {
      "amount" : faker.finance.amount(),
      "date" : new Date(2012, 1, 2),  //TODO: add a ranged date method
      "business": faker.company.companyName(),
      "name": [faker.finance.accountName(), faker.finance.mask()].join(' '),
      "type" : self.randomize(faker.definitions.finance.transaction_type),
      "account" : faker.finance.account()
    };
  };

  return self;

};


/*
String.prototype.capitalize = function () { //v1.0
    return this.replace(/\w+/g, function (a) {
        return a.charAt(0).toUpperCase() + a.substr(1).toLowerCase();
    });
};
*/

module['exports'] = Helpers;

},{}],"node_modules/faker/lib/name.js":[function(require,module,exports) {
/**
 *
 * @namespace faker.name
 */
function Name (faker) {

  /**
   * firstName
   *
   * @method firstName
   * @param {mixed} gender
   * @memberof faker.name
   */
  this.firstName = function (gender) {
    if (typeof faker.definitions.name.male_first_name !== "undefined" && typeof faker.definitions.name.female_first_name !== "undefined") {
      // some locale datasets ( like ru ) have first_name split by gender. since the name.first_name field does not exist in these datasets,
      // we must randomly pick a name from either gender array so faker.name.firstName will return the correct locale data ( and not fallback )
      if (typeof gender !== 'number') {
        gender = faker.random.number(1);
      }
      if (gender === 0) {
        return faker.random.arrayElement(faker.locales[faker.locale].name.male_first_name)
      } else {
        return faker.random.arrayElement(faker.locales[faker.locale].name.female_first_name);
      }
    }
    return faker.random.arrayElement(faker.definitions.name.first_name);
  };

  /**
   * lastName
   *
   * @method lastName
   * @param {mixed} gender
   * @memberof faker.name
   */
  this.lastName = function (gender) {
    if (typeof faker.definitions.name.male_last_name !== "undefined" && typeof faker.definitions.name.female_last_name !== "undefined") {
      // some locale datasets ( like ru ) have last_name split by gender. i have no idea how last names can have genders, but also i do not speak russian
      // see above comment of firstName method
      if (typeof gender !== 'number') {
        gender = faker.random.number(1);
      }
      if (gender === 0) {
        return faker.random.arrayElement(faker.locales[faker.locale].name.male_last_name);
      } else {
        return faker.random.arrayElement(faker.locales[faker.locale].name.female_last_name);
      }
    }
    return faker.random.arrayElement(faker.definitions.name.last_name);
  };

  /**
   * findName
   *
   * @method findName
   * @param {string} firstName
   * @param {string} lastName
   * @param {mixed} gender
   * @memberof faker.name
   */
  this.findName = function (firstName, lastName, gender) {
      var r = faker.random.number(8);
      var prefix, suffix;
      // in particular locales first and last names split by gender,
      // thus we keep consistency by passing 0 as male and 1 as female
      if (typeof gender !== 'number') {
        gender = faker.random.number(1);
      }
      firstName = firstName || faker.name.firstName(gender);
      lastName = lastName || faker.name.lastName(gender);
      switch (r) {
      case 0:
          prefix = faker.name.prefix(gender);
          if (prefix) {
              return prefix + " " + firstName + " " + lastName;
          }
      case 1:
          suffix = faker.name.suffix(gender);
          if (suffix) {
              return firstName + " " + lastName + " " + suffix;
          }
      }

      return firstName + " " + lastName;
  };

  /**
   * jobTitle
   *
   * @method jobTitle
   * @memberof faker.name
   */
  this.jobTitle = function () {
    return  faker.name.jobDescriptor() + " " +
      faker.name.jobArea() + " " +
      faker.name.jobType();
  };
  
  /**
   * prefix
   *
   * @method prefix
   * @param {mixed} gender
   * @memberof faker.name
   */
  this.prefix = function (gender) {
    if (typeof faker.definitions.name.male_prefix !== "undefined" && typeof faker.definitions.name.female_prefix !== "undefined") {
      if (typeof gender !== 'number') {
        gender = faker.random.number(1);
      }
      if (gender === 0) {
        return faker.random.arrayElement(faker.locales[faker.locale].name.male_prefix);
      } else {
        return faker.random.arrayElement(faker.locales[faker.locale].name.female_prefix);
      }
    }
    return faker.random.arrayElement(faker.definitions.name.prefix);
  };

  /**
   * suffix
   *
   * @method suffix
   * @memberof faker.name
   */
  this.suffix = function () {
      return faker.random.arrayElement(faker.definitions.name.suffix);
  };

  /**
   * title
   *
   * @method title
   * @memberof faker.name
   */
  this.title = function() {
      var descriptor  = faker.random.arrayElement(faker.definitions.name.title.descriptor),
          level       = faker.random.arrayElement(faker.definitions.name.title.level),
          job         = faker.random.arrayElement(faker.definitions.name.title.job);

      return descriptor + " " + level + " " + job;
  };

  /**
   * jobDescriptor
   *
   * @method jobDescriptor
   * @memberof faker.name
   */
  this.jobDescriptor = function () {
    return faker.random.arrayElement(faker.definitions.name.title.descriptor);
  };

  /**
   * jobArea
   *
   * @method jobArea
   * @memberof faker.name
   */
  this.jobArea = function () {
    return faker.random.arrayElement(faker.definitions.name.title.level);
  };

  /**
   * jobType
   *
   * @method jobType
   * @memberof faker.name
   */
  this.jobType = function () {
    return faker.random.arrayElement(faker.definitions.name.title.job);
  };

}

module['exports'] = Name;

},{}],"node_modules/faker/lib/address.js":[function(require,module,exports) {
/**
 *
 * @namespace faker.address
 */
function Address (faker) {
  var f = faker.fake,
      Helpers = faker.helpers;

  /**
   * Generates random zipcode from format. If format is not specified, the
   * locale's zip format is used.
   *
   * @method faker.address.zipCode
   * @param {String} format
   */
  this.zipCode = function(format) {
    // if zip format is not specified, use the zip format defined for the locale
    if (typeof format === 'undefined') {
      var localeFormat = faker.definitions.address.postcode;
      if (typeof localeFormat === 'string') {
        format = localeFormat;
      } else {
        format = faker.random.arrayElement(localeFormat);
      }
    }
    return Helpers.replaceSymbols(format);
  }

  /**
   * Generates a random localized city name. The format string can contain any
   * method provided by faker wrapped in `{{}}`, e.g. `{{name.firstName}}` in
   * order to build the city name.
   *
   * If no format string is provided one of the following is randomly used:
   * 
   * * `{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}`
   * * `{{address.cityPrefix}} {{name.firstName}}`
   * * `{{name.firstName}}{{address.citySuffix}}`
   * * `{{name.lastName}}{{address.citySuffix}}`
   *
   * @method faker.address.city
   * @param {String} format
   */
  this.city = function (format) {
    var formats = [
      '{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}',
      '{{address.cityPrefix}} {{name.firstName}}',
      '{{name.firstName}}{{address.citySuffix}}',
      '{{name.lastName}}{{address.citySuffix}}'
    ];

    if (typeof format !== "number") {
      format = faker.random.number(formats.length - 1);
    }

    return f(formats[format]);

  }

  /**
   * Return a random localized city prefix
   * @method faker.address.cityPrefix
   */
  this.cityPrefix = function () {
    return faker.random.arrayElement(faker.definitions.address.city_prefix);
  }

  /**
   * Return a random localized city suffix
   *
   * @method faker.address.citySuffix
   */
  this.citySuffix = function () {
    return faker.random.arrayElement(faker.definitions.address.city_suffix);
  }

  /**
   * Returns a random localized street name
   *
   * @method faker.address.streetName
   */
  this.streetName = function () {
      var result;
      var suffix = faker.address.streetSuffix();
      if (suffix !== "") {
          suffix = " " + suffix
      }

      switch (faker.random.number(1)) {
      case 0:
          result = faker.name.lastName() + suffix;
          break;
      case 1:
          result = faker.name.firstName() + suffix;
          break;
      }
      return result;
  }

  //
  // TODO: change all these methods that accept a boolean to instead accept an options hash.
  //
  /**
   * Returns a random localized street address
   *
   * @method faker.address.streetAddress
   * @param {Boolean} useFullAddress
   */
  this.streetAddress = function (useFullAddress) {
      if (useFullAddress === undefined) { useFullAddress = false; }
      var address = "";
      switch (faker.random.number(2)) {
      case 0:
          address = Helpers.replaceSymbolWithNumber("#####") + " " + faker.address.streetName();
          break;
      case 1:
          address = Helpers.replaceSymbolWithNumber("####") +  " " + faker.address.streetName();
          break;
      case 2:
          address = Helpers.replaceSymbolWithNumber("###") + " " + faker.address.streetName();
          break;
      }
      return useFullAddress ? (address + " " + faker.address.secondaryAddress()) : address;
  }

  /**
   * streetSuffix
   *
   * @method faker.address.streetSuffix
   */
  this.streetSuffix = function () {
      return faker.random.arrayElement(faker.definitions.address.street_suffix);
  }
  
  /**
   * streetPrefix
   *
   * @method faker.address.streetPrefix
   */
  this.streetPrefix = function () {
      return faker.random.arrayElement(faker.definitions.address.street_prefix);
  }

  /**
   * secondaryAddress
   *
   * @method faker.address.secondaryAddress
   */
  this.secondaryAddress = function () {
      return Helpers.replaceSymbolWithNumber(faker.random.arrayElement(
          [
              'Apt. ###',
              'Suite ###'
          ]
      ));
  }

  /**
   * county
   *
   * @method faker.address.county
   */
  this.county = function () {
    return faker.random.arrayElement(faker.definitions.address.county);
  }

  /**
   * country
   *
   * @method faker.address.country
   */
  this.country = function () {
    return faker.random.arrayElement(faker.definitions.address.country);
  }

  /**
   * countryCode
   *
   * @method faker.address.countryCode
   */
  this.countryCode = function () {
    return faker.random.arrayElement(faker.definitions.address.country_code);
  }

  /**
   * state
   *
   * @method faker.address.state
   * @param {Boolean} useAbbr
   */
  this.state = function (useAbbr) {
      return faker.random.arrayElement(faker.definitions.address.state);
  }

  /**
   * stateAbbr
   *
   * @method faker.address.stateAbbr
   */
  this.stateAbbr = function () {
      return faker.random.arrayElement(faker.definitions.address.state_abbr);
  }

  /**
   * latitude
   *
   * @method faker.address.latitude
   */
  this.latitude = function () {
      return (faker.random.number(180 * 10000) / 10000.0 - 90.0).toFixed(4);
  }

  /**
   * longitude
   *
   * @method faker.address.longitude
   */
  this.longitude = function () {
      return (faker.random.number(360 * 10000) / 10000.0 - 180.0).toFixed(4);
  }
  
  return this;
}


module.exports = Address;

},{}],"node_modules/faker/lib/company.js":[function(require,module,exports) {
/**
 *
 * @namespace faker.company
 */
var Company = function (faker) {
  
  var self = this;
  var f = faker.fake;
  
  /**
   * suffixes
   *
   * @method faker.company.suffixes
   */
  this.suffixes = function () {
    // Don't want the source array exposed to modification, so return a copy
    return faker.definitions.company.suffix.slice(0);
  }

  /**
   * companyName
   *
   * @method faker.company.companyName
   * @param {string} format
   */
  this.companyName = function (format) {

    var formats = [
      '{{name.lastName}} {{company.companySuffix}}',
      '{{name.lastName}} - {{name.lastName}}',
      '{{name.lastName}}, {{name.lastName}} and {{name.lastName}}'
    ];

    if (typeof format !== "number") {
      format = faker.random.number(formats.length - 1);
    }

    return f(formats[format]);
  }

  /**
   * companySuffix
   *
   * @method faker.company.companySuffix
   */
  this.companySuffix = function () {
      return faker.random.arrayElement(faker.company.suffixes());
  }

  /**
   * catchPhrase
   *
   * @method faker.company.catchPhrase
   */
  this.catchPhrase = function () {
    return f('{{company.catchPhraseAdjective}} {{company.catchPhraseDescriptor}} {{company.catchPhraseNoun}}')
  }

  /**
   * bs
   *
   * @method faker.company.bs
   */
  this.bs = function () {
    return f('{{company.bsAdjective}} {{company.bsBuzz}} {{company.bsNoun}}');
  }

  /**
   * catchPhraseAdjective
   *
   * @method faker.company.catchPhraseAdjective
   */
  this.catchPhraseAdjective = function () {
      return faker.random.arrayElement(faker.definitions.company.adjective);
  }

  /**
   * catchPhraseDescriptor
   *
   * @method faker.company.catchPhraseDescriptor
   */
  this.catchPhraseDescriptor = function () {
      return faker.random.arrayElement(faker.definitions.company.descriptor);
  }

  /**
   * catchPhraseNoun
   *
   * @method faker.company.catchPhraseNoun
   */
  this.catchPhraseNoun = function () {
      return faker.random.arrayElement(faker.definitions.company.noun);
  }

  /**
   * bsAdjective
   *
   * @method faker.company.bsAdjective
   */
  this.bsAdjective = function () {
      return faker.random.arrayElement(faker.definitions.company.bs_adjective);
  }

  /**
   * bsBuzz
   *
   * @method faker.company.bsBuzz
   */
  this.bsBuzz = function () {
      return faker.random.arrayElement(faker.definitions.company.bs_verb);
  }

  /**
   * bsNoun
   *
   * @method faker.company.bsNoun
   */
  this.bsNoun = function () {
      return faker.random.arrayElement(faker.definitions.company.bs_noun);
  }
  
}

module['exports'] = Company;
},{}],"node_modules/faker/lib/iban.js":[function(require,module,exports) {
module["exports"] = {
  alpha: [
    'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'
  ],
  pattern10: [
    "01", "02", "03", "04", "05", "06", "07", "08", "09"
  ],
  pattern100: [
    "001", "002", "003", "004", "005", "006", "007", "008", "009"
  ],
  toDigitString: function (str) {
      return str.replace(/[A-Z]/gi, function(match) {
          return match.toUpperCase().charCodeAt(0) - 55;
      });
  },
  mod97: function (digitStr) {
      var m = 0;
      for (var i = 0; i < digitStr.length; i++) {
          m = ((m * 10) + (digitStr[i] |0)) % 97;
      }
      return m;
  },
  formats: [
    {
      country: "AL",
      total: 28,
      bban: [
        {
          type: "n",
          count: 8
        },
        {
          type: "c",
          count: 16
        }
      ],
      format: "ALkk bbbs sssx cccc cccc cccc cccc"
    },
    {
      country: "AD",
      total: 24,
      bban: [
        {
          type: "n",
          count: 8
        },
        {
          type: "c",
          count: 12
        }
      ],
      format: "ADkk bbbb ssss cccc cccc cccc"
    },
    {
      country: "AT",
      total: 20,
      bban: [
        {
          type: "n",
          count: 5
        },
        {
          type: "n",
          count: 11
        }
      ],
      format: "ATkk bbbb bccc cccc cccc"
    },
    {
      country: "AZ",
      total: 28,
      bban: [
        {
          type: "c",
          count: 4
        },
        {
          type: "n",
          count: 20
        }
      ],
      format: "AZkk bbbb cccc cccc cccc cccc cccc"
    },
    {
      country: "BH",
      total: 22,
      bban: [
        {
          type: "a",
          count: 4
        },
        {
          type: "c",
          count: 14
        }
      ],
      format: "BHkk bbbb cccc cccc cccc cc"
    },
    {
      country: "BE",
      total: 16,
      bban: [
        {
          type: "n",
          count: 3
        },
        {
          type: "n",
          count: 9
        }
      ],
      format: "BEkk bbbc cccc ccxx"
    },
    {
      country: "BA",
      total: 20,
      bban: [
        {
          type: "n",
          count: 6
        },
        {
          type: "n",
          count: 10
        }
      ],
      format: "BAkk bbbs sscc cccc ccxx"
    },
    {
      country: "BR",
      total: 29,
      bban: [
        {
          type: "n",
          count: 13
        },
        {
          type: "n",
          count: 10
        },
        {
          type: "a",
          count: 1
        },
        {
          type: "c",
          count: 1
        }
      ],
      format: "BRkk bbbb bbbb ssss sccc cccc ccct n"
    },
    {
      country: "BG",
      total: 22,
      bban: [
        {
          type: "a",
          count: 4
        },
        {
          type: "n",
          count: 6
        },
        {
          type: "c",
          count: 8
        }
      ],
      format: "BGkk bbbb ssss ddcc cccc cc"
    },
    {
      country: "CR",
      total: 21,
      bban: [
        {
          type: "n",
          count: 3
        },
        {
          type: "n",
          count: 14
        }
      ],
      format: "CRkk bbbc cccc cccc cccc c"
    },
    {
      country: "HR",
      total: 21,
      bban: [
        {
          type: "n",
          count: 7
        },
        {
          type: "n",
          count: 10
        }
      ],
      format: "HRkk bbbb bbbc cccc cccc c"
    },
    {
      country: "CY",
      total: 28,
      bban: [
        {
          type: "n",
          count: 8
        },
        {
          type: "c",
          count: 16
        }
      ],
      format: "CYkk bbbs ssss cccc cccc cccc cccc"
    },
    {
      country: "CZ",
      total: 24,
      bban: [
        {
          type: "n",
          count: 10
        },
        {
          type: "n",
          count: 10
        }
      ],
      format: "CZkk bbbb ssss sscc cccc cccc"
    },
    {
      country: "DK",
      total: 18,
      bban: [
        {
          type: "n",
          count: 4
        },
        {
          type: "n",
          count: 10
        }
      ],
      format: "DKkk bbbb cccc cccc cc"
    },
    {
      country: "DO",
      total: 28,
      bban: [
        {
          type: "a",
          count: 4
        },
        {
          type: "n",
          count: 20
        }
      ],
      format: "DOkk bbbb cccc cccc cccc cccc cccc"
    },
    {
      country: "TL",
      total: 23,
      bban: [
        {
          type: "n",
          count: 3
        },
        {
          type: "n",
          count: 16
        }
      ],
      format: "TLkk bbbc cccc cccc cccc cxx"
    },
    {
      country: "EE",
      total: 20,
      bban: [
        {
          type: "n",
          count: 4
        },
        {
          type: "n",
          count: 12
        }
      ],
      format: "EEkk bbss cccc cccc cccx"
    },
    {
      country: "FO",
      total: 18,
      bban: [
        {
          type: "n",
          count: 4
        },
        {
          type: "n",
          count: 10
        }
      ],
      format: "FOkk bbbb cccc cccc cx"
    },
    {
      country: "FI",
      total: 18,
      bban: [
        {
          type: "n",
          count: 6
        },
        {
          type: "n",
          count: 8
        }
      ],
      format: "FIkk bbbb bbcc cccc cx"
    },
    {
      country: "FR",
      total: 27,
      bban: [
        {
          type: "n",
          count: 10
        },
        {
          type: "c",
          count: 11
        },
        {
          type: "n",
          count: 2
        }
      ],
      format: "FRkk bbbb bggg ggcc cccc cccc cxx"
    },
    {
      country: "GE",
      total: 22,
      bban: [
        {
          type: "c",
          count: 2
        },
        {
          type: "n",
          count: 16
        }
      ],
      format: "GEkk bbcc cccc cccc cccc cc"
    },
    {
      country: "DE",
      total: 22,
      bban: [
        {
          type: "n",
          count: 8
        },
        {
          type: "n",
          count: 10
        }
      ],
      format: "DEkk bbbb bbbb cccc cccc cc"
    },
    {
      country: "GI",
      total: 23,
      bban: [
        {
          type: "a",
          count: 4
        },
        {
          type: "c",
          count: 15
        }
      ],
      format: "GIkk bbbb cccc cccc cccc ccc"
    },
    {
      country: "GR",
      total: 27,
      bban: [
        {
          type: "n",
          count: 7
        },
        {
          type: "c",
          count: 16
        }
      ],
      format: "GRkk bbbs sssc cccc cccc cccc ccc"
    },
    {
      country: "GL",
      total: 18,
      bban: [
        {
          type: "n",
          count: 4
        },
        {
          type: "n",
          count: 10
        }
      ],
      format: "GLkk bbbb cccc cccc cc"
    },
    {
      country: "GT",
      total: 28,
      bban: [
        {
          type: "c",
          count: 4
        },
        {
          type: "c",
          count: 4
        },
        {
          type: "c",
          count: 16
        }
      ],
      format: "GTkk bbbb mmtt cccc cccc cccc cccc"
    },
    {
      country: "HU",
      total: 28,
      bban: [
        {
          type: "n",
          count: 8
        },
        {
          type: "n",
          count: 16
        }
      ],
      format: "HUkk bbbs sssk cccc cccc cccc cccx"
    },
    {
      country: "IS",
      total: 26,
      bban: [
        {
          type: "n",
          count: 6
        },
        {
          type: "n",
          count: 16
        }
      ],
      format: "ISkk bbbb sscc cccc iiii iiii ii"
    },
    {
      country: "IE",
      total: 22,
      bban: [
        {
          type: "c",
          count: 4
        },
        {
          type: "n",
          count: 6
        },
        {
          type: "n",
          count: 8
        }
      ],
      format: "IEkk aaaa bbbb bbcc cccc cc"
    },
    {
      country: "IL",
      total: 23,
      bban: [
        {
          type: "n",
          count: 6
        },
        {
          type: "n",
          count: 13
        }
      ],
      format: "ILkk bbbn nncc cccc cccc ccc"
    },
    {
      country: "IT",
      total: 27,
      bban: [
        {
          type: "a",
          count: 1
        },
        {
          type: "n",
          count: 10
        },
        {
          type: "c",
          count: 12
        }
      ],
      format: "ITkk xaaa aabb bbbc cccc cccc ccc"
    },
    {
      country: "JO",
      total: 30,
      bban: [
        {
          type: "a",
          count: 4
        },
        {
          type: "n",
          count: 4
        },
        {
          type: "n",
          count: 18
        }
      ],
      format: "JOkk bbbb nnnn cccc cccc cccc cccc cc"
    },
    {
      country: "KZ",
      total: 20,
      bban: [
        {
          type: "n",
          count: 3
        },
        {
          type: "c",
          count: 13
        }
      ],
      format: "KZkk bbbc cccc cccc cccc"
    },
    {
      country: "XK",
      total: 20,
      bban: [
        {
          type: "n",
          count: 4
        },
        {
          type: "n",
          count: 12
        }
      ],
      format: "XKkk bbbb cccc cccc cccc"
    },
    {
      country: "KW",
      total: 30,
      bban: [
        {
          type: "a",
          count: 4
        },
        {
          type: "c",
          count: 22
        }
      ],
      format: "KWkk bbbb cccc cccc cccc cccc cccc cc"
    },
    {
      country: "LV",
      total: 21,
      bban: [
        {
          type: "a",
          count: 4
        },
        {
          type: "c",
          count: 13
        }
      ],
      format: "LVkk bbbb cccc cccc cccc c"
    },
    {
      country: "LB",
      total: 28,
      bban: [
        {
          type: "n",
          count: 4
        },
        {
          type: "c",
          count: 20
        }
      ],
      format: "LBkk bbbb cccc cccc cccc cccc cccc"
    },
    {
      country: "LI",
      total: 21,
      bban: [
        {
          type: "n",
          count: 5
        },
        {
          type: "c",
          count: 12
        }
      ],
      format: "LIkk bbbb bccc cccc cccc c"
    },
    {
      country: "LT",
      total: 20,
      bban: [
        {
          type: "n",
          count: 5
        },
        {
          type: "n",
          count: 11
        }
      ],
      format: "LTkk bbbb bccc cccc cccc"
    },
    {
      country: "LU",
      total: 20,
      bban: [
        {
          type: "n",
          count: 3
        },
        {
          type: "c",
          count: 13
        }
      ],
      format: "LUkk bbbc cccc cccc cccc"
    },
    {
      country: "MK",
      total: 19,
      bban: [
        {
          type: "n",
          count: 3
        },
        {
          type: "c",
          count: 10
        },
        {
          type: "n",
          count: 2
        }
      ],
      format: "MKkk bbbc cccc cccc cxx"
    },
    {
      country: "MT",
      total: 31,
      bban: [
        {
          type: "a",
          count: 4
        },
        {
          type: "n",
          count: 5
        },
        {
          type: "c",
          count: 18
        }
      ],
      format: "MTkk bbbb ssss sccc cccc cccc cccc ccc"
    },
    {
      country: "MR",
      total: 27,
      bban: [
        {
          type: "n",
          count: 10
        },
        {
          type: "n",
          count: 13
        }
      ],
      format: "MRkk bbbb bsss sscc cccc cccc cxx"
    },
    {
      country: "MU",
      total: 30,
      bban: [
        {
          type: "a",
          count: 4
        },
        {
          type: "n",
          count: 4
        },
        {
          type: "n",
          count: 15
        },
        {
          type: "a",
          count: 3
        }
      ],
      format: "MUkk bbbb bbss cccc cccc cccc 000d dd"
    },
    {
      country: "MC",
      total: 27,
      bban: [
        {
          type: "n",
          count: 10
        },
        {
          type: "c",
          count: 11
        },
        {
          type: "n",
          count: 2
        }
      ],
      format: "MCkk bbbb bsss sscc cccc cccc cxx"
    },
    {
      country: "MD",
      total: 24,
      bban: [
        {
          type: "c",
          count: 2
        },
        {
          type: "c",
          count: 18
        }
      ],
      format: "MDkk bbcc cccc cccc cccc cccc"
    },
    {
      country: "ME",
      total: 22,
      bban: [
        {
          type: "n",
          count: 3
        },
        {
          type: "n",
          count: 15
        }
      ],
      format: "MEkk bbbc cccc cccc cccc xx"
    },
    {
      country: "NL",
      total: 18,
      bban: [
        {
          type: "a",
          count: 4
        },
        {
          type: "n",
          count: 10
        }
      ],
      format: "NLkk bbbb cccc cccc cc"
    },
    {
      country: "NO",
      total: 15,
      bban: [
        {
          type: "n",
          count: 4
        },
        {
          type: "n",
          count: 7
        }
      ],
      format: "NOkk bbbb cccc ccx"
    },
    {
      country: "PK",
      total: 24,
      bban: [
        {
          type: "c",
          count: 4
        },
        {
          type: "n",
          count: 16
        }
      ],
      format: "PKkk bbbb cccc cccc cccc cccc"
    },
    {
      country: "PS",
      total: 29,
      bban: [
        {
          type: "c",
          count: 4
        },
        {
          type: "n",
          count: 9
        },
        {
          type: "n",
          count: 12
        }
      ],
      format: "PSkk bbbb xxxx xxxx xccc cccc cccc c"
    },
    {
      country: "PL",
      total: 28,
      bban: [
        {
          type: "n",
          count: 8
        },
        {
          type: "n",
          count: 16
        }
      ],
      format: "PLkk bbbs sssx cccc cccc cccc cccc"
    },
    {
      country: "PT",
      total: 25,
      bban: [
        {
          type: "n",
          count: 8
        },
        {
          type: "n",
          count: 13
        }
      ],
      format: "PTkk bbbb ssss cccc cccc cccx x"
    },
    {
      country: "QA",
      total: 29,
      bban: [
        {
          type: "a",
          count: 4
        },
        {
          type: "c",
          count: 21
        }
      ],
      format: "QAkk bbbb cccc cccc cccc cccc cccc c"
    },
    {
      country: "RO",
      total: 24,
      bban: [
        {
          type: "a",
          count: 4
        },
        {
          type: "c",
          count: 16
        }
      ],
      format: "ROkk bbbb cccc cccc cccc cccc"
    },
    {
      country: "SM",
      total: 27,
      bban: [
        {
          type: "a",
          count: 1
        },
        {
          type: "n",
          count: 10
        },
        {
          type: "c",
          count: 12
        }
      ],
      format: "SMkk xaaa aabb bbbc cccc cccc ccc"
    },
    {
      country: "SA",
      total: 24,
      bban: [
        {
          type: "n",
          count: 2
        },
        {
          type: "c",
          count: 18
        }
      ],
      format: "SAkk bbcc cccc cccc cccc cccc"
    },
    {
      country: "RS",
      total: 22,
      bban: [
        {
          type: "n",
          count: 3
        },
        {
          type: "n",
          count: 15
        }
      ],
      format: "RSkk bbbc cccc cccc cccc xx"
    },
    {
      country: "SK",
      total: 24,
      bban: [
        {
          type: "n",
          count: 10
        },
        {
          type: "n",
          count: 10
        }
      ],
      format: "SKkk bbbb ssss sscc cccc cccc"
    },
    {
      country: "SI",
      total: 19,
      bban: [
        {
          type: "n",
          count: 5
        },
        {
          type: "n",
          count: 10
        }
      ],
      format: "SIkk bbss sccc cccc cxx"
    },
    {
      country: "ES",
      total: 24,
      bban: [
        {
          type: "n",
          count: 10
        },
        {
          type: "n",
          count: 10
        }
      ],
      format: "ESkk bbbb gggg xxcc cccc cccc"
    },
    {
      country: "SE",
      total: 24,
      bban: [
        {
          type: "n",
          count: 3
        },
        {
          type: "n",
          count: 17
        }
      ],
      format: "SEkk bbbc cccc cccc cccc cccc"
    },
    {
      country: "CH",
      total: 21,
      bban: [
        {
          type: "n",
          count: 5
        },
        {
          type: "c",
          count: 12
        }
      ],
      format: "CHkk bbbb bccc cccc cccc c"
    },
    {
      country: "TN",
      total: 24,
      bban: [
        {
          type: "n",
          count: 5
        },
        {
          type: "n",
          count: 15
        }
      ],
      format: "TNkk bbss sccc cccc cccc cccc"
    },
    {
      country: "TR",
      total: 26,
      bban: [
        {
          type: "n",
          count: 5
        },
        {
          type: "c",
          count: 1
        },
        {
          type: "c",
          count: 16
        }
      ],
      format: "TRkk bbbb bxcc cccc cccc cccc cc"
    },
    {
      country: "AE",
      total: 23,
      bban: [
        {
          type: "n",
          count: 3
        },
        {
          type: "n",
          count: 16
        }
      ],
      format: "AEkk bbbc cccc cccc cccc ccc"
    },
    {
      country: "GB",
      total: 22,
      bban: [
        {
          type: "a",
          count: 4
        },
        {
          type: "n",
          count: 6
        },
        {
          type: "n",
          count: 8
        }
      ],
      format: "GBkk bbbb ssss sscc cccc cc"
    },
    {
      country: "VG",
      total: 24,
      bban: [
        {
          type: "c",
          count: 4
        },
        {
          type: "n",
          count: 16
        }
      ],
      format: "VGkk bbbb cccc cccc cccc cccc"
    }
  ],
  iso3166: [
    "AC", "AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS",
    "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI",
    "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BU", "BV", "BW", "BY",
    "BZ", "CA", "CC", "CD", "CE", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN",
    "CO", "CP", "CR", "CS", "CS", "CU", "CV", "CW", "CX", "CY", "CZ", "DD", "DE",
    "DG", "DJ", "DK", "DM", "DO", "DZ", "EA", "EC", "EE", "EG", "EH", "ER", "ES",
    "ET", "EU", "FI", "FJ", "FK", "FM", "FO", "FR", "FX", "GA", "GB", "GD", "GE",
    "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU",
    "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "IC", "ID", "IE", "IL", "IM",
    "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH",
    "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK",
    "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH",
    "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW",
    "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR",
    "NT", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN",
    "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB",
    "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR",
    "SS", "ST", "SU", "SV", "SX", "SY", "SZ", "TA", "TC", "TD", "TF", "TG", "TH",
    "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG",
    "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS",
    "YE", "YT", "YU", "ZA", "ZM", "ZR", "ZW"
  ]
}
},{}],"node_modules/faker/lib/finance.js":[function(require,module,exports) {
/**
 * @namespace faker.finance
 */
var Finance = function (faker) {
  var ibanLib = require("./iban");
  var Helpers = faker.helpers,
      self = this;

  /**
   * account
   *
   * @method faker.finance.account
   * @param {number} length
   */
  self.account = function (length) {

      length = length || 8;

      var template = '';

      for (var i = 0; i < length; i++) {
          template = template + '#';
      }
      length = null;
      return Helpers.replaceSymbolWithNumber(template);
  };

  /**
   * accountName
   *
   * @method faker.finance.accountName
   */
  self.accountName = function () {

      return [Helpers.randomize(faker.definitions.finance.account_type), 'Account'].join(' ');
  };

  /**
   * mask
   *
   * @method faker.finance.mask
   * @param {number} length
   * @param {boolean} parens
   * @param {boolean} ellipsis
   */
  self.mask = function (length, parens, ellipsis) {

      //set defaults
      length = (length == 0 || !length || typeof length == 'undefined') ? 4 : length;
      parens = (parens === null) ? true : parens;
      ellipsis = (ellipsis === null) ? true : ellipsis;

      //create a template for length
      var template = '';

      for (var i = 0; i < length; i++) {
          template = template + '#';
      }

      //prefix with ellipsis
      template = (ellipsis) ? ['...', template].join('') : template;

      template = (parens) ? ['(', template, ')'].join('') : template;

      //generate random numbers
      template = Helpers.replaceSymbolWithNumber(template);

      return template;
  };

  //min and max take in minimum and maximum amounts, dec is the decimal place you want rounded to, symbol is $, €, £, etc
  //NOTE: this returns a string representation of the value, if you want a number use parseFloat and no symbol

  /**
   * amount
   *
   * @method faker.finance.amount
   * @param {number} min
   * @param {number} max
   * @param {number} dec
   * @param {string} symbol
   *
   * @return {string}
   */
  self.amount = function (min, max, dec, symbol) {

      min = min || 0;
      max = max || 1000;
      dec = dec === undefined ? 2 : dec;
      symbol = symbol || '';
      var randValue = faker.random.number({ max: max, min: min, precision: Math.pow(10, -dec) });

      return symbol + randValue.toFixed(dec);
  };

  /**
   * transactionType
   *
   * @method faker.finance.transactionType
   */
  self.transactionType = function () {
      return Helpers.randomize(faker.definitions.finance.transaction_type);
  };

  /**
   * currencyCode
   *
   * @method faker.finance.currencyCode
   */
  self.currencyCode = function () {
      return faker.random.objectElement(faker.definitions.finance.currency)['code'];
  };

  /**
   * currencyName
   *
   * @method faker.finance.currencyName
   */
  self.currencyName = function () {
      return faker.random.objectElement(faker.definitions.finance.currency, 'key');
  };

  /**
   * currencySymbol
   *
   * @method faker.finance.currencySymbol
   */
  self.currencySymbol = function () {
      var symbol;

      while (!symbol) {
          symbol = faker.random.objectElement(faker.definitions.finance.currency)['symbol'];
      }
      return symbol;
  };

  /**
   * bitcoinAddress
   *
   * @method  faker.finance.bitcoinAddress
   */
  self.bitcoinAddress = function () {
    var addressLength = faker.random.number({ min: 27, max: 34 });

    var address = faker.random.arrayElement(['1', '3']);

    for (var i = 0; i < addressLength - 1; i++)
      address += faker.random.alphaNumeric().toUpperCase();

    return address;
  };

  /**
   * iban
   *
   * @method  faker.finance.iban
   */
  self.iban = function (formatted) {
      var ibanFormat = faker.random.arrayElement(ibanLib.formats);
      var s = "";
      var count = 0;
      for (var b = 0; b < ibanFormat.bban.length; b++) {
          var bban = ibanFormat.bban[b];
          var c = bban.count;
          count += bban.count;
          while (c > 0) {
              if (bban.type == "a") {
                  s += faker.random.arrayElement(ibanLib.alpha);
              } else if (bban.type == "c") {
                  if (faker.random.number(100) < 80) {
                      s += faker.random.number(9);
                  } else {
                      s += faker.random.arrayElement(ibanLib.alpha);
                  }
              } else {
                  if (c >= 3 && faker.random.number(100) < 30) {
                      if (faker.random.boolean()) {
                          s += faker.random.arrayElement(ibanLib.pattern100);
                          c -= 2;
                      } else {
                          s += faker.random.arrayElement(ibanLib.pattern10);
                          c--;
                      }
                  } else {
                      s += faker.random.number(9);
                  }
              }
              c--;
          }
          s = s.substring(0, count);
      }
      var checksum = 98 - ibanLib.mod97(ibanLib.toDigitString(s + ibanFormat.country + "00"));
      if (checksum < 10) {
          checksum = "0" + checksum;
      }
      var iban = ibanFormat.country + checksum + s;
      return formatted ? iban.match(/.{1,4}/g).join(" ") : iban;
  };

  /**
   * bic
   *
   * @method  faker.finance.bic
   */
  self.bic = function () {
      var vowels = ["A", "E", "I", "O", "U"];
      var prob = faker.random.number(100);
      return Helpers.replaceSymbols("???") +
          faker.random.arrayElement(vowels) +
          faker.random.arrayElement(ibanLib.iso3166) +
          Helpers.replaceSymbols("?") + "1" +
          (prob < 10 ?
              Helpers.replaceSymbols("?" + faker.random.arrayElement(vowels) + "?") :
          prob < 40 ?
              Helpers.replaceSymbols("###") : "");
  };
};

module['exports'] = Finance;

},{"./iban":"node_modules/faker/lib/iban.js"}],"node_modules/faker/lib/image.js":[function(require,module,exports) {
/**
 *
 * @namespace faker.image
 */
var Image = function (faker) {

  var self = this;

  /**
   * image
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.image
   */
  self.image = function (width, height, randomize) {
    var categories = ["abstract", "animals", "business", "cats", "city", "food", "nightlife", "fashion", "people", "nature", "sports", "technics", "transport"];
    return self[faker.random.arrayElement(categories)](width, height, randomize);
  };
  /**
   * avatar
   *
   * @method faker.image.avatar
   */
  self.avatar = function () {
    return faker.internet.avatar();
  };
  /**
   * imageUrl
   *
   * @param {number} width
   * @param {number} height
   * @param {string} category
   * @param {boolean} randomize
   * @method faker.image.imageUrl
   */
  self.imageUrl = function (width, height, category, randomize, https) {
      var width = width || 640;
      var height = height || 480;
      var protocol = 'http://';
      if (typeof https !== 'undefined' && https === true) {
        protocol = 'https://';
      }
      var url = protocol + 'lorempixel.com/' + width + '/' + height;
      if (typeof category !== 'undefined') {
        url += '/' + category;
      }

      if (randomize) {
        url += '?' + faker.random.number()
      }

      return url;
  };
  /**
   * abstract
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.abstract
   */
  self.abstract = function (width, height, randomize) {
    return faker.image.imageUrl(width, height, 'abstract', randomize);
  };
  /**
   * animals
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.animals
   */
  self.animals = function (width, height, randomize) {
    return faker.image.imageUrl(width, height, 'animals', randomize);
  };
  /**
   * business
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.business
   */
  self.business = function (width, height, randomize) {
    return faker.image.imageUrl(width, height, 'business', randomize);
  };
  /**
   * cats
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.cats
   */
  self.cats = function (width, height, randomize) {
    return faker.image.imageUrl(width, height, 'cats', randomize);
  };
  /**
   * city
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.city
   */
  self.city = function (width, height, randomize) {
    return faker.image.imageUrl(width, height, 'city', randomize);
  };
  /**
   * food
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.food
   */
  self.food = function (width, height, randomize) {
    return faker.image.imageUrl(width, height, 'food', randomize);
  };
  /**
   * nightlife
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.nightlife
   */
  self.nightlife = function (width, height, randomize) {
    return faker.image.imageUrl(width, height, 'nightlife', randomize);
  };
  /**
   * fashion
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.fashion
   */
  self.fashion = function (width, height, randomize) {
    return faker.image.imageUrl(width, height, 'fashion', randomize);
  };
  /**
   * people
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.people
   */
  self.people = function (width, height, randomize) {
    return faker.image.imageUrl(width, height, 'people', randomize);
  };
  /**
   * nature
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.nature
   */
  self.nature = function (width, height, randomize) {
    return faker.image.imageUrl(width, height, 'nature', randomize);
  };
  /**
   * sports
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.sports
   */
  self.sports = function (width, height, randomize) {
    return faker.image.imageUrl(width, height, 'sports', randomize);
  };
  /**
   * technics
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.technics
   */
  self.technics = function (width, height, randomize) {
    return faker.image.imageUrl(width, height, 'technics', randomize);
  };
  /**
   * transport
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.transport
   */
  self.transport = function (width, height, randomize) {
    return faker.image.imageUrl(width, height, 'transport', randomize);
  };
  /**
   * dataUri
   *
   * @param {number} width
   * @param {number} height
   * @method faker.image.dataurl
   */
  self.dataUri = function (width, height) {
    var rawPrefix = 'data:image/svg+xml;charset=UTF-8,';
    var svgString = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1" baseProfile="full" width="' + width + '" height="' + height + '"> <rect width="100%" height="100%" fill="grey"/>  <text x="0" y="20" font-size="20" text-anchor="start" fill="white">' + width + 'x' + height + '</text> </svg>';
    return rawPrefix + encodeURIComponent(svgString);
  };
}

module["exports"] = Image;
},{}],"node_modules/faker/lib/lorem.js":[function(require,module,exports) {

/**
 *
 * @namespace faker.lorem
 */
var Lorem = function (faker) {
  var self = this;
  var Helpers = faker.helpers;

  /**
   * word
   *
   * @method faker.lorem.word
   * @param {number} num
   */
  self.word = function (num) {
    return faker.random.arrayElement(faker.definitions.lorem.words);
  };

  /**
   * generates a space separated list of words
   *
   * @method faker.lorem.words
   * @param {number} num number of words, defaults to 3
   */
  self.words = function (num) {
      if (typeof num == 'undefined') { num = 3; }
      var words = [];
      for (var i = 0; i < num; i++) {
        words.push(faker.lorem.word());
      }
      return words.join(' ');
  };

  /**
   * sentence
   *
   * @method faker.lorem.sentence
   * @param {number} wordCount defaults to a random number between 3 and 10
   * @param {number} range
   */
  self.sentence = function (wordCount, range) {
      if (typeof wordCount == 'undefined') { wordCount = faker.random.number({ min: 3, max: 10 }); }
      // if (typeof range == 'undefined') { range = 7; }

      // strange issue with the node_min_test failing for captialize, please fix and add faker.lorem.back
      //return  faker.lorem.words(wordCount + Helpers.randomNumber(range)).join(' ').capitalize();

      var sentence = faker.lorem.words(wordCount);
      return sentence.charAt(0).toUpperCase() + sentence.slice(1) + '.';
  };

  /**
   * slug
   *
   * @method faker.lorem.slug
   * @param {number} wordCount number of words, defaults to 3
   */
  self.slug = function (wordCount) {
      var words = faker.lorem.words(wordCount);
      return Helpers.slugify(words);
  };

  /**
   * sentences
   *
   * @method faker.lorem.sentences
   * @param {number} sentenceCount defautls to a random number between 2 and 6
   * @param {string} separator defaults to `' '`
   */
  self.sentences = function (sentenceCount, separator) {
      if (typeof sentenceCount === 'undefined') { sentenceCount = faker.random.number({ min: 2, max: 6 });}
      if (typeof separator == 'undefined') { separator = " "; }
      var sentences = [];
      for (sentenceCount; sentenceCount > 0; sentenceCount--) {
        sentences.push(faker.lorem.sentence());
      }
      return sentences.join(separator);
  };

  /**
   * paragraph
   *
   * @method faker.lorem.paragraph
   * @param {number} sentenceCount defaults to 3
   */
  self.paragraph = function (sentenceCount) {
      if (typeof sentenceCount == 'undefined') { sentenceCount = 3; }
      return faker.lorem.sentences(sentenceCount + faker.random.number(3));
  };

  /**
   * paragraphs
   *
   * @method faker.lorem.paragraphs
   * @param {number} paragraphCount defaults to 3
   * @param {string} separator defaults to `'\n \r'`
   */
  self.paragraphs = function (paragraphCount, separator) {
    if (typeof separator === "undefined") {
      separator = "\n \r";
    }
    if (typeof paragraphCount == 'undefined') { paragraphCount = 3; }
    var paragraphs = [];
    for (paragraphCount; paragraphCount > 0; paragraphCount--) {
        paragraphs.push(faker.lorem.paragraph());
    }
    return paragraphs.join(separator);
  }

  /**
   * returns random text based on a random lorem method
   *
   * @method faker.lorem.text
   * @param {number} times
   */
  self.text = function loremText (times) {
    var loremMethods = ['lorem.word', 'lorem.words', 'lorem.sentence', 'lorem.sentences', 'lorem.paragraph', 'lorem.paragraphs', 'lorem.lines'];
    var randomLoremMethod = faker.random.arrayElement(loremMethods);
    return faker.fake('{{' + randomLoremMethod + '}}');
  };

  /**
   * returns lines of lorem separated by `'\n'`
   *
   * @method faker.lorem.lines
   * @param {number} lineCount defaults to a random number between 1 and 5
   */
  self.lines = function lines (lineCount) {
    if (typeof lineCount === 'undefined') { lineCount = faker.random.number({ min: 1, max: 5 });}
    return faker.lorem.sentences(lineCount, '\n')
  };

  return self;
};


module["exports"] = Lorem;

},{}],"node_modules/faker/lib/hacker.js":[function(require,module,exports) {
/**
 *
 * @namespace faker.hacker
 */
var Hacker = function (faker) {
  var self = this;
  
  /**
   * abbreviation
   *
   * @method faker.hacker.abbreviation
   */
  self.abbreviation = function () {
    return faker.random.arrayElement(faker.definitions.hacker.abbreviation);
  };

  /**
   * adjective
   *
   * @method faker.hacker.adjective
   */
  self.adjective = function () {
    return faker.random.arrayElement(faker.definitions.hacker.adjective);
  };

  /**
   * noun
   *
   * @method faker.hacker.noun
   */
  self.noun = function () {
    return faker.random.arrayElement(faker.definitions.hacker.noun);
  };

  /**
   * verb
   *
   * @method faker.hacker.verb
   */
  self.verb = function () {
    return faker.random.arrayElement(faker.definitions.hacker.verb);
  };

  /**
   * ingverb
   *
   * @method faker.hacker.ingverb
   */
  self.ingverb = function () {
    return faker.random.arrayElement(faker.definitions.hacker.ingverb);
  };

  /**
   * phrase
   *
   * @method faker.hacker.phrase
   */
  self.phrase = function () {

    var data = {
      abbreviation: self.abbreviation,
      adjective: self.adjective,
      ingverb: self.ingverb,
      noun: self.noun,
      verb: self.verb
    };

    var phrase = faker.random.arrayElement([ "If we {{verb}} the {{noun}}, we can get to the {{abbreviation}} {{noun}} through the {{adjective}} {{abbreviation}} {{noun}}!",
      "We need to {{verb}} the {{adjective}} {{abbreviation}} {{noun}}!",
      "Try to {{verb}} the {{abbreviation}} {{noun}}, maybe it will {{verb}} the {{adjective}} {{noun}}!",
      "You can't {{verb}} the {{noun}} without {{ingverb}} the {{adjective}} {{abbreviation}} {{noun}}!",
      "Use the {{adjective}} {{abbreviation}} {{noun}}, then you can {{verb}} the {{adjective}} {{noun}}!",
      "The {{abbreviation}} {{noun}} is down, {{verb}} the {{adjective}} {{noun}} so we can {{verb}} the {{abbreviation}} {{noun}}!",
      "{{ingverb}} the {{noun}} won't do anything, we need to {{verb}} the {{adjective}} {{abbreviation}} {{noun}}!",
      "I'll {{verb}} the {{adjective}} {{abbreviation}} {{noun}}, that should {{noun}} the {{abbreviation}} {{noun}}!"
   ]);

   return faker.helpers.mustache(phrase, data);

  };
  
  return self;
};

module['exports'] = Hacker;
},{}],"node_modules/faker/vendor/user-agent.js":[function(require,module,exports) {
/*

Copyright (c) 2012-2014 Jeffrey Mealo

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

------------------------------------------------------------------------------------------------------------------------

Based loosely on Luka Pusic's PHP Script: http://360percents.com/posts/php-random-user-agent-generator/

The license for that script is as follows:

"THE BEER-WARE LICENSE" (Revision 42):

<pusic93@gmail.com> wrote this file. As long as you retain this notice you can do whatever you want with this stuff.
If we meet some day, and you think this stuff is worth it, you can buy me a beer in return. Luka Pusic
*/

function rnd(a, b) {
    //calling rnd() with no arguments is identical to rnd(0, 100)
    a = a || 0;
    b = b || 100;

    if (typeof b === 'number' && typeof a === 'number') {
        //rnd(int min, int max) returns integer between min, max
        return (function (min, max) {
            if (min > max) {
                throw new RangeError('expected min <= max; got min = ' + min + ', max = ' + max);
            }
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }(a, b));
    }

    if (Object.prototype.toString.call(a) === "[object Array]") {
        //returns a random element from array (a), even weighting
        return a[Math.floor(Math.random() * a.length)];
    }

    if (a && typeof a === 'object') {
        //returns a random key from the passed object; keys are weighted by the decimal probability in their value
        return (function (obj) {
            var rand = rnd(0, 100) / 100, min = 0, max = 0, key, return_val;

            for (key in obj) {
                if (obj.hasOwnProperty(key)) {
                    max = obj[key] + min;
                    return_val = key;
                    if (rand >= min && rand <= max) {
                        break;
                    }
                    min = min + obj[key];
                }
            }

            return return_val;
        }(a));
    }

    throw new TypeError('Invalid arguments passed to rnd. (' + (b ? a + ', ' + b : a) + ')');
}

function randomLang() {
    return rnd(['AB', 'AF', 'AN', 'AR', 'AS', 'AZ', 'BE', 'BG', 'BN', 'BO', 'BR', 'BS', 'CA', 'CE', 'CO', 'CS',
                'CU', 'CY', 'DA', 'DE', 'EL', 'EN', 'EO', 'ES', 'ET', 'EU', 'FA', 'FI', 'FJ', 'FO', 'FR', 'FY',
                'GA', 'GD', 'GL', 'GV', 'HE', 'HI', 'HR', 'HT', 'HU', 'HY', 'ID', 'IS', 'IT', 'JA', 'JV', 'KA',
                'KG', 'KO', 'KU', 'KW', 'KY', 'LA', 'LB', 'LI', 'LN', 'LT', 'LV', 'MG', 'MK', 'MN', 'MO', 'MS',
                'MT', 'MY', 'NB', 'NE', 'NL', 'NN', 'NO', 'OC', 'PL', 'PT', 'RM', 'RO', 'RU', 'SC', 'SE', 'SK',
                'SL', 'SO', 'SQ', 'SR', 'SV', 'SW', 'TK', 'TR', 'TY', 'UK', 'UR', 'UZ', 'VI', 'VO', 'YI', 'ZH']);
}

function randomBrowserAndOS() {
    var browser = rnd({
        chrome:    .45132810566,
        iexplorer: .27477061836,
        firefox:   .19384170608,
        safari:    .06186781118,
        opera:     .01574236955
    }),
    os = {
        chrome:  {win: .89,  mac: .09 , lin: .02},
        firefox: {win: .83,  mac: .16,  lin: .01},
        opera:   {win: .91,  mac: .03 , lin: .06},
        safari:  {win: .04 , mac: .96  },
        iexplorer: ['win']
    };

    return [browser, rnd(os[browser])];
}

function randomProc(arch) {
    var procs = {
        lin:['i686', 'x86_64'],
        mac: {'Intel' : .48, 'PPC': .01, 'U; Intel':.48, 'U; PPC' :.01},
        win:['', 'WOW64', 'Win64; x64']
    };
    return rnd(procs[arch]);
}

function randomRevision(dots) {
    var return_val = '';
    //generate a random revision
    //dots = 2 returns .x.y where x & y are between 0 and 9
    for (var x = 0; x < dots; x++) {
        return_val += '.' + rnd(0, 9);
    }
    return return_val;
}

var version_string = {
    net: function () {
        return [rnd(1, 4), rnd(0, 9), rnd(10000, 99999), rnd(0, 9)].join('.');
    },
    nt: function () {
        return rnd(5, 6) + '.' + rnd(0, 3);
    },
    ie: function () {
        return rnd(7, 11);
    },
    trident: function () {
        return rnd(3, 7) + '.' + rnd(0, 1);
    },
    osx: function (delim) {
        return [10, rnd(5, 10), rnd(0, 9)].join(delim || '.');
    },
    chrome: function () {
        return [rnd(13, 39), 0, rnd(800, 899), 0].join('.');
    },
    presto: function () {
        return '2.9.' + rnd(160, 190);
    },
    presto2: function () {
        return rnd(10, 12) + '.00';
    },
    safari: function () {
        return rnd(531, 538) + '.' + rnd(0, 2) + '.' + rnd(0,2);
    }
};

var browser = {
    firefox: function firefox(arch) {
        //https://developer.mozilla.org/en-US/docs/Gecko_user_agent_string_reference
        var firefox_ver = rnd(5, 15) + randomRevision(2),
            gecko_ver = 'Gecko/20100101 Firefox/' + firefox_ver,
            proc = randomProc(arch),
            os_ver = (arch === 'win') ? '(Windows NT ' + version_string.nt() + ((proc) ? '; ' + proc : '')
            : (arch === 'mac') ? '(Macintosh; ' + proc + ' Mac OS X ' + version_string.osx()
            : '(X11; Linux ' + proc;

        return 'Mozilla/5.0 ' + os_ver + '; rv:' + firefox_ver.slice(0, -2) + ') ' + gecko_ver;
    },

    iexplorer: function iexplorer() {
        var ver = version_string.ie();

        if (ver >= 11) {
            //http://msdn.microsoft.com/en-us/library/ie/hh869301(v=vs.85).aspx
            return 'Mozilla/5.0 (Windows NT 6.' + rnd(1,3) + '; Trident/7.0; ' + rnd(['Touch; ', '']) + 'rv:11.0) like Gecko';
        }

        //http://msdn.microsoft.com/en-us/library/ie/ms537503(v=vs.85).aspx
        return 'Mozilla/5.0 (compatible; MSIE ' + ver + '.0; Windows NT ' + version_string.nt() + '; Trident/' +
            version_string.trident() + ((rnd(0, 1) === 1) ? '; .NET CLR ' + version_string.net() : '') + ')';
    },

    opera: function opera(arch) {
        //http://www.opera.com/docs/history/
        var presto_ver = ' Presto/' + version_string.presto() + ' Version/' + version_string.presto2() + ')',
            os_ver = (arch === 'win') ? '(Windows NT ' + version_string.nt() + '; U; ' + randomLang() + presto_ver
            : (arch === 'lin') ? '(X11; Linux ' + randomProc(arch) + '; U; ' + randomLang() + presto_ver
            : '(Macintosh; Intel Mac OS X ' + version_string.osx() + ' U; ' + randomLang() + ' Presto/' +
            version_string.presto() + ' Version/' + version_string.presto2() + ')';

        return 'Opera/' + rnd(9, 14) + '.' + rnd(0, 99) + ' ' + os_ver;
    },

    safari: function safari(arch) {
        var safari = version_string.safari(),
            ver = rnd(4, 7) + '.' + rnd(0,1) + '.' + rnd(0,10),
            os_ver = (arch === 'mac') ? '(Macintosh; ' + randomProc('mac') + ' Mac OS X '+ version_string.osx('_') + ' rv:' + rnd(2, 6) + '.0; '+ randomLang() + ') '
            : '(Windows; U; Windows NT ' + version_string.nt() + ')';

        return 'Mozilla/5.0 ' + os_ver + 'AppleWebKit/' + safari + ' (KHTML, like Gecko) Version/' + ver + ' Safari/' + safari;
    },

    chrome: function chrome(arch) {
        var safari = version_string.safari(),
            os_ver = (arch === 'mac') ? '(Macintosh; ' + randomProc('mac') + ' Mac OS X ' + version_string.osx('_') + ') '
            : (arch === 'win') ? '(Windows; U; Windows NT ' + version_string.nt() + ')'
            : '(X11; Linux ' + randomProc(arch);

        return 'Mozilla/5.0 ' + os_ver + ' AppleWebKit/' + safari + ' (KHTML, like Gecko) Chrome/' + version_string.chrome() + ' Safari/' + safari;
    }
};

exports.generate = function generate() {
    var random = randomBrowserAndOS();
    return browser[random[0]](random[1]);
};

},{}],"node_modules/faker/lib/internet.js":[function(require,module,exports) {
var random_ua = require('../vendor/user-agent');

/**
 *
 * @namespace faker.internet
 */
var Internet = function (faker) {
  var self = this;
  /**
   * avatar
   *
   * @method faker.internet.avatar
   */
  self.avatar = function () {
      return faker.random.arrayElement(faker.definitions.internet.avatar_uri);
  };

  self.avatar.schema = {
    "description": "Generates a URL for an avatar.",
    "sampleResults": ["https://s3.amazonaws.com/uifaces/faces/twitter/igorgarybaldi/128.jpg"]
  };

  /**
   * email
   *
   * @method faker.internet.email
   * @param {string} firstName
   * @param {string} lastName
   * @param {string} provider
   */
  self.email = function (firstName, lastName, provider) {
      provider = provider || faker.random.arrayElement(faker.definitions.internet.free_email);
      return  faker.helpers.slugify(faker.internet.userName(firstName, lastName)) + "@" + provider;
  };

  self.email.schema = {
    "description": "Generates a valid email address based on optional input criteria",
    "sampleResults": ["foo.bar@gmail.com"],
    "properties": {
      "firstName": {
        "type": "string",
        "required": false,
        "description": "The first name of the user"
      },
      "lastName": {
        "type": "string",
        "required": false,
        "description": "The last name of the user"
      },
      "provider": {
        "type": "string",
        "required": false,
        "description": "The domain of the user"
      }
    }
  };
  /**
   * exampleEmail
   *
   * @method faker.internet.exampleEmail
   * @param {string} firstName
   * @param {string} lastName
   */
  self.exampleEmail = function (firstName, lastName) {
      var provider = faker.random.arrayElement(faker.definitions.internet.example_email);
      return self.email(firstName, lastName, provider);
  };

  /**
   * userName
   *
   * @method faker.internet.userName
   * @param {string} firstName
   * @param {string} lastName
   */
  self.userName = function (firstName, lastName) {
      var result;
      firstName = firstName || faker.name.firstName();
      lastName = lastName || faker.name.lastName();
      switch (faker.random.number(2)) {
      case 0:
          result = firstName + faker.random.number(99);
          break;
      case 1:
          result = firstName + faker.random.arrayElement([".", "_"]) + lastName;
          break;
      case 2:
          result = firstName + faker.random.arrayElement([".", "_"]) + lastName + faker.random.number(99);
          break;
      }
      result = result.toString().replace(/'/g, "");
      result = result.replace(/ /g, "");
      return result;
  };

  self.userName.schema = {
    "description": "Generates a username based on one of several patterns. The pattern is chosen randomly.",
    "sampleResults": [
      "Kirstin39",
      "Kirstin.Smith",
      "Kirstin.Smith39",
      "KirstinSmith",
      "KirstinSmith39",
    ],
    "properties": {
      "firstName": {
        "type": "string",
        "required": false,
        "description": "The first name of the user"
      },
      "lastName": {
        "type": "string",
        "required": false,
        "description": "The last name of the user"
      }
    }
  };

  /**
   * protocol
   *
   * @method faker.internet.protocol
   */
  self.protocol = function () {
      var protocols = ['http','https'];
      return faker.random.arrayElement(protocols);
  };

  self.protocol.schema = {
    "description": "Randomly generates http or https",
    "sampleResults": ["https", "http"]
  };

  /**
   * url
   *
   * @method faker.internet.url
   */
  self.url = function () {
      return faker.internet.protocol() + '://' + faker.internet.domainName();
  };

  self.url.schema = {
    "description": "Generates a random URL. The URL could be secure or insecure.",
    "sampleResults": [
      "http://rashawn.name",
      "https://rashawn.name"
    ]
  };

  /**
   * domainName
   *
   * @method faker.internet.domainName
   */
  self.domainName = function () {
      return faker.internet.domainWord() + "." + faker.internet.domainSuffix();
  };

  self.domainName.schema = {
    "description": "Generates a random domain name.",
    "sampleResults": ["marvin.org"]
  };

  /**
   * domainSuffix
   *
   * @method faker.internet.domainSuffix
   */
  self.domainSuffix = function () {
      return faker.random.arrayElement(faker.definitions.internet.domain_suffix);
  };

  self.domainSuffix.schema = {
    "description": "Generates a random domain suffix.",
    "sampleResults": ["net"]
  };

  /**
   * domainWord
   *
   * @method faker.internet.domainWord
   */
  self.domainWord = function () {
      return faker.name.firstName().replace(/([\\~#&*{}/:<>?|\"'])/ig, '').toLowerCase();
  };

  self.domainWord.schema = {
    "description": "Generates a random domain word.",
    "sampleResults": ["alyce"]
  };

  /**
   * ip
   *
   * @method faker.internet.ip
   */
  self.ip = function () {
      var randNum = function () {
          return (faker.random.number(255)).toFixed(0);
      };

      var result = [];
      for (var i = 0; i < 4; i++) {
          result[i] = randNum();
      }

      return result.join(".");
  };

  self.ip.schema = {
    "description": "Generates a random IP.",
    "sampleResults": ["97.238.241.11"]
  };

  /**
   * ipv6
   *
   * @method faker.internet.ipv6
   */
  self.ipv6 = function () {
      var randHash = function () {
          var result = "";
          for (var i = 0; i < 4; i++) {
            result += (faker.random.arrayElement(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"]));
          }
          return result
      };

      var result = [];
      for (var i = 0; i < 8; i++) {
        result[i] = randHash();
      }
      return result.join(":");
  };

  self.ipv6.schema = {
    "description": "Generates a random IPv6 address.",
    "sampleResults": ["2001:0db8:6276:b1a7:5213:22f1:25df:c8a0"]
  };

  /**
   * userAgent
   *
   * @method faker.internet.userAgent
   */
  self.userAgent = function () {
    return random_ua.generate();
  };

  self.userAgent.schema = {
    "description": "Generates a random user agent.",
    "sampleResults": ["Mozilla/5.0 (Macintosh; U; PPC Mac OS X 10_7_5 rv:6.0; SL) AppleWebKit/532.0.1 (KHTML, like Gecko) Version/7.1.6 Safari/532.0.1"]
  };

  /**
   * color
   *
   * @method faker.internet.color
   * @param {number} baseRed255
   * @param {number} baseGreen255
   * @param {number} baseBlue255
   */
  self.color = function (baseRed255, baseGreen255, baseBlue255) {
      baseRed255 = baseRed255 || 0;
      baseGreen255 = baseGreen255 || 0;
      baseBlue255 = baseBlue255 || 0;
      // based on awesome response : http://stackoverflow.com/questions/43044/algorithm-to-randomly-generate-an-aesthetically-pleasing-color-palette
      var red = Math.floor((faker.random.number(256) + baseRed255) / 2);
      var green = Math.floor((faker.random.number(256) + baseGreen255) / 2);
      var blue = Math.floor((faker.random.number(256) + baseBlue255) / 2);
      var redStr = red.toString(16);
      var greenStr = green.toString(16);
      var blueStr = blue.toString(16);
      return '#' +
        (redStr.length === 1 ? '0' : '') + redStr +
        (greenStr.length === 1 ? '0' : '') + greenStr +
        (blueStr.length === 1 ? '0': '') + blueStr;

  };

  self.color.schema = {
    "description": "Generates a random hexadecimal color.",
    "sampleResults": ["#06267f"],
    "properties": {
      "baseRed255": {
        "type": "number",
        "required": false,
        "description": "The red value. Valid values are 0 - 255."
      },
      "baseGreen255": {
        "type": "number",
        "required": false,
        "description": "The green value. Valid values are 0 - 255."
      },
      "baseBlue255": {
        "type": "number",
        "required": false,
        "description": "The blue value. Valid values are 0 - 255."
      }
    }
  };

  /**
   * mac
   *
   * @method faker.internet.mac
   */
  self.mac = function(){
      var i, mac = "";
      for (i=0; i < 12; i++) {
          mac+= faker.random.number(15).toString(16);
          if (i%2==1 && i != 11) {
              mac+=":";
          }
      }
      return mac;
  };

  self.mac.schema = {
    "description": "Generates a random mac address.",
    "sampleResults": ["78:06:cc:ae:b3:81"]
  };

  /**
   * password
   *
   * @method faker.internet.password
   * @param {number} len
   * @param {boolean} memorable
   * @param {string} pattern
   * @param {string} prefix
   */
   self.password = function (len, memorable, pattern, prefix) {
     len = len || 15;
     if (typeof memorable === "undefined") {
       memorable = false;
     }
     /*
      * password-generator ( function )
      * Copyright(c) 2011-2013 Bermi Ferrer <bermi@bermilabs.com>
      * MIT Licensed
      */
     var consonant, letter, password, vowel;
     letter = /[a-zA-Z]$/;
     vowel = /[aeiouAEIOU]$/;
     consonant = /[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]$/;
     var _password = function (length, memorable, pattern, prefix) {
       var char, n;
       if (length == null) {
         length = 10;
       }
       if (memorable == null) {
         memorable = true;
       }
       if (pattern == null) {
         pattern = /\w/;
       }
       if (prefix == null) {
         prefix = '';
       }
       if (prefix.length >= length) {
         return prefix;
       }
       if (memorable) {
         if (prefix.match(consonant)) {
           pattern = vowel;
         } else {
           pattern = consonant;
         }
       }
       n = faker.random.number(94) + 33;
       char = String.fromCharCode(n);
       if (memorable) {
         char = char.toLowerCase();
       }
       if (!char.match(pattern)) {
         return _password(length, memorable, pattern, prefix);
       }
       return _password(length, memorable, pattern, "" + prefix + char);
     };
     return _password(len, memorable, pattern, prefix);
   }

  self.password.schema = {
    "description": "Generates a random password.",
    "sampleResults": [
      "AM7zl6Mg",
      "susejofe"
    ],
    "properties": {
      "length": {
        "type": "number",
        "required": false,
        "description": "The number of characters in the password."
      },
      "memorable": {
        "type": "boolean",
        "required": false,
        "description": "Whether a password should be easy to remember."
      },
      "pattern": {
        "type": "regex",
        "required": false,
        "description": "A regex to match each character of the password against. This parameter will be negated if the memorable setting is turned on."
      },
      "prefix": {
        "type": "string",
        "required": false,
        "description": "A value to prepend to the generated password. The prefix counts towards the length of the password."
      }
    }
  };

};


module["exports"] = Internet;

},{"../vendor/user-agent":"node_modules/faker/vendor/user-agent.js"}],"node_modules/faker/lib/database.js":[function(require,module,exports) {
/**
 *
 * @namespace faker.database
 */
var Database = function (faker) {
  var self = this;
  /**
   * column
   *
   * @method faker.database.column
   */
  self.column = function () {
      return faker.random.arrayElement(faker.definitions.database.column);
  };

  self.column.schema = {
    "description": "Generates a column name.",
    "sampleResults": ["id", "title", "createdAt"]
  };

  /**
   * type
   *
   * @method faker.database.type
   */
  self.type = function () {
      return faker.random.arrayElement(faker.definitions.database.type);
  };

  self.type.schema = {
    "description": "Generates a column type.",
    "sampleResults": ["byte", "int", "varchar", "timestamp"]
  };

  /**
   * collation
   *
   * @method faker.database.collation
   */
  self.collation = function () {
      return faker.random.arrayElement(faker.definitions.database.collation);
  };

  self.collation.schema = {
    "description": "Generates a collation.",
    "sampleResults": ["utf8_unicode_ci", "utf8_bin"]
  };

  /**
   * engine
   *
   * @method faker.database.engine
   */
  self.engine = function () {
      return faker.random.arrayElement(faker.definitions.database.engine);
  };

  self.engine.schema = {
    "description": "Generates a storage engine.",
    "sampleResults": ["MyISAM", "InnoDB"]
  };
};

module["exports"] = Database;

},{}],"node_modules/faker/lib/phone_number.js":[function(require,module,exports) {
/**
 *
 * @namespace faker.phone
 */
var Phone = function (faker) {
  var self = this;

  /**
   * phoneNumber
   *
   * @method faker.phone.phoneNumber
   * @param {string} format
   */
  self.phoneNumber = function (format) {
      format = format || faker.phone.phoneFormats();
      return faker.helpers.replaceSymbolWithNumber(format);
  };

  // FIXME: this is strange passing in an array index.
  /**
   * phoneNumberFormat
   *
   * @method faker.phone.phoneFormatsArrayIndex
   * @param phoneFormatsArrayIndex
   */
  self.phoneNumberFormat = function (phoneFormatsArrayIndex) {
      phoneFormatsArrayIndex = phoneFormatsArrayIndex || 0;
      return faker.helpers.replaceSymbolWithNumber(faker.definitions.phone_number.formats[phoneFormatsArrayIndex]);
  };

  /**
   * phoneFormats
   *
   * @method faker.phone.phoneFormats
   */
  self.phoneFormats = function () {
    return faker.random.arrayElement(faker.definitions.phone_number.formats);
  };
  
  return self;

};

module['exports'] = Phone;
},{}],"node_modules/faker/lib/date.js":[function(require,module,exports) {
/**
 *
 * @namespace faker.date
 */
var _Date = function (faker) {
  var self = this;
  /**
   * past
   *
   * @method faker.date.past
   * @param {number} years
   * @param {date} refDate
   */
  self.past = function (years, refDate) {
      var date = (refDate) ? new Date(Date.parse(refDate)) : new Date();
      var range = {
        min: 1000,
        max: (years || 1) * 365 * 24 * 3600 * 1000
      };

      var past = date.getTime();
      past -= faker.random.number(range); // some time from now to N years ago, in milliseconds
      date.setTime(past);

      return date;
  };

  /**
   * future
   *
   * @method faker.date.future
   * @param {number} years
   * @param {date} refDate
   */
  self.future = function (years, refDate) {
      var date = (refDate) ? new Date(Date.parse(refDate)) : new Date();
      var range = {
        min: 1000,
        max: (years || 1) * 365 * 24 * 3600 * 1000
      };

      var future = date.getTime();
      future += faker.random.number(range); // some time from now to N years later, in milliseconds
      date.setTime(future);

      return date;
  };

  /**
   * between
   *
   * @method faker.date.between
   * @param {date} from
   * @param {date} to
   */
  self.between = function (from, to) {
      var fromMilli = Date.parse(from);
      var dateOffset = faker.random.number(Date.parse(to) - fromMilli);

      var newDate = new Date(fromMilli + dateOffset);

      return newDate;
  };

  /**
   * recent
   *
   * @method faker.date.recent
   * @param {number} days
   */
  self.recent = function (days) {
      var date = new Date();
      var range = {
        min: 1000,
        max: (days || 1) * 24 * 3600 * 1000
      };

      var future = date.getTime();
      future -= faker.random.number(range); // some time from now to N days ago, in milliseconds
      date.setTime(future);

      return date;
  };

  /**
   * month
   *
   * @method faker.date.month
   * @param {object} options
   */
  self.month = function (options) {
      options = options || {};

      var type = 'wide';
      if (options.abbr) {
          type = 'abbr';
      }
      if (options.context && typeof faker.definitions.date.month[type + '_context'] !== 'undefined') {
          type += '_context';
      }

      var source = faker.definitions.date.month[type];

      return faker.random.arrayElement(source);
  };

  /**
   * weekday
   *
   * @param {object} options
   * @method faker.date.weekday
   */
  self.weekday = function (options) {
      options = options || {};

      var type = 'wide';
      if (options.abbr) {
          type = 'abbr';
      }
      if (options.context && typeof faker.definitions.date.weekday[type + '_context'] !== 'undefined') {
          type += '_context';
      }

      var source = faker.definitions.date.weekday[type];

      return faker.random.arrayElement(source);
  };
  
  return self;
  
};

module['exports'] = _Date;
},{}],"node_modules/faker/lib/commerce.js":[function(require,module,exports) {
/**
 *
 * @namespace faker.commerce
 */
var Commerce = function (faker) {
  var self = this;

  /**
   * color
   *
   * @method faker.commerce.color
   */
  self.color = function() {
      return faker.random.arrayElement(faker.definitions.commerce.color);
  };

  /**
   * department
   *
   * @method faker.commerce.department
   */
  self.department = function() {
      return faker.random.arrayElement(faker.definitions.commerce.department);
  };

  /**
   * productName
   *
   * @method faker.commerce.productName
   */
  self.productName = function() {
      return faker.commerce.productAdjective() + " " +
              faker.commerce.productMaterial() + " " +
              faker.commerce.product();
  };

  /**
   * price
   *
   * @method faker.commerce.price
   * @param {number} min
   * @param {number} max
   * @param {number} dec
   * @param {string} symbol
   *
   * @return {string}
   */
  self.price = function(min, max, dec, symbol) {
      min = min || 0;
      max = max || 1000;
      dec = dec === undefined ? 2 : dec;
      symbol = symbol || '';

      if (min < 0 || max < 0) {
          return symbol + 0.00;
      }

      var randValue = faker.random.number({ max: max, min: min });

      return symbol + (Math.round(randValue * Math.pow(10, dec)) / Math.pow(10, dec)).toFixed(dec);
  };

  /*
  self.categories = function(num) {
      var categories = [];

      do {
          var category = faker.random.arrayElement(faker.definitions.commerce.department);
          if(categories.indexOf(category) === -1) {
              categories.push(category);
          }
      } while(categories.length < num);

      return categories;
  };

  */
  /*
  self.mergeCategories = function(categories) {
      var separator = faker.definitions.separator || " &";
      // TODO: find undefined here
      categories = categories || faker.definitions.commerce.categories;
      var commaSeparated = categories.slice(0, -1).join(', ');

      return [commaSeparated, categories[categories.length - 1]].join(separator + " ");
  };
  */

  /**
   * productAdjective
   *
   * @method faker.commerce.productAdjective
   */
  self.productAdjective = function() {
      return faker.random.arrayElement(faker.definitions.commerce.product_name.adjective);
  };

  /**
   * productMaterial
   *
   * @method faker.commerce.productMaterial
   */
  self.productMaterial = function() {
      return faker.random.arrayElement(faker.definitions.commerce.product_name.material);
  };

  /**
   * product
   *
   * @method faker.commerce.product
   */
  self.product = function() {
      return faker.random.arrayElement(faker.definitions.commerce.product_name.product);
  };

  return self;
};

module['exports'] = Commerce;

},{}],"node_modules/faker/lib/system.js":[function(require,module,exports) {
// generates fake data for many computer systems properties

/**
 *
 * @namespace faker.system
 */
function System (faker) {

  /**
   * generates a file name with extension or optional type
   *
   * @method faker.system.fileName
   * @param {string} ext
   * @param {string} type
   */
  this.fileName = function (ext, type) {
    var str = faker.fake("{{random.words}}.{{system.fileExt}}");
    str = str.replace(/ /g, '_');
    str = str.replace(/\,/g, '_');
    str = str.replace(/\-/g, '_');
    str = str.replace(/\\/g, '_');
    str = str.replace(/\//g, '_');
    str = str.toLowerCase();
    return str;
  };

  /**
   * commonFileName
   *
   * @method faker.system.commonFileName
   * @param {string} ext
   * @param {string} type
   */
  this.commonFileName = function (ext, type) {
    var str = faker.random.words() + "." + (ext || faker.system.commonFileExt());
    str = str.replace(/ /g, '_');
    str = str.replace(/\,/g, '_');
    str = str.replace(/\-/g, '_');
    str = str.replace(/\\/g, '_');
    str = str.replace(/\//g, '_');
    str = str.toLowerCase();
    return str;
  };

  /**
   * mimeType
   *
   * @method faker.system.mimeType
   */
  this.mimeType = function () {
    return faker.random.arrayElement(Object.keys(faker.definitions.system.mimeTypes));
  };

  /**
   * returns a commonly used file type
   *
   * @method faker.system.commonFileType
   */
  this.commonFileType = function () {
    var types = ['video', 'audio', 'image', 'text', 'application'];
    return faker.random.arrayElement(types)
  };

  /**
   * returns a commonly used file extension based on optional type
   *
   * @method faker.system.commonFileExt
   * @param {string} type
   */
  this.commonFileExt = function (type) {
    var types = [
      'application/pdf',
      'audio/mpeg',
      'audio/wav',
      'image/png',
      'image/jpeg',
      'image/gif',
      'video/mp4',
      'video/mpeg',
      'text/html'
    ];
    return faker.system.fileExt(faker.random.arrayElement(types));
  };


  /**
   * returns any file type available as mime-type
   *
   * @method faker.system.fileType
   */
  this.fileType = function () {
    var types = [];
    var mimes = faker.definitions.system.mimeTypes;
    Object.keys(mimes).forEach(function(m){
      var parts = m.split('/');
      if (types.indexOf(parts[0]) === -1) {
        types.push(parts[0]);
      }
    });
    return faker.random.arrayElement(types);
  };

  /**
   * fileExt
   *
   * @method faker.system.fileExt
   * @param {string} mimeType
   */
  this.fileExt = function (mimeType) {
    var exts = [];
    var mimes = faker.definitions.system.mimeTypes;

    // get specific ext by mime-type
    if (typeof mimes[mimeType] === "object") {
      return faker.random.arrayElement(mimes[mimeType].extensions);
    }

    // reduce mime-types to those with file-extensions
    Object.keys(mimes).forEach(function(m){
      if (mimes[m].extensions instanceof Array) {
        mimes[m].extensions.forEach(function(ext){
          exts.push(ext)
        });
      }
    });
    return faker.random.arrayElement(exts);
  };

  /**
   * not yet implemented
   *
   * @method faker.system.directoryPath
   */
  this.directoryPath = function () {
    // TODO
  };

  /**
   * not yet implemented
   *
   * @method faker.system.filePath
   */
  this.filePath = function () {
    // TODO
  };

  /**
   * semver
   *
   * @method faker.system.semver
   */
  this.semver = function () {
      return [faker.random.number(9),
              faker.random.number(9),
              faker.random.number(9)].join('.');
  }

}

module['exports'] = System;

},{}],"node_modules/faker/lib/index.js":[function(require,module,exports) {
/*

   this index.js file is used for including the faker library as a CommonJS module, instead of a bundle

   you can include the faker library into your existing node.js application by requiring the entire /faker directory

    var faker = require(./faker);
    var randomName = faker.name.findName();

   you can also simply include the "faker.js" file which is the auto-generated bundled version of the faker library

    var faker = require(./customAppPath/faker);
    var randomName = faker.name.findName();


  if you plan on modifying the faker library you should be performing your changes in the /lib/ directory

*/

/**
 *
 * @namespace faker
 */
function Faker (opts) {

  var self = this;

  opts = opts || {};

  // assign options
  var locales = self.locales || opts.locales || {};
  var locale = self.locale || opts.locale || "en";
  var localeFallback = self.localeFallback || opts.localeFallback || "en";

  self.locales = locales;
  self.locale = locale;
  self.localeFallback = localeFallback;

  self.definitions = {};

  function bindAll(obj) {
      Object.keys(obj).forEach(function(meth) {
          if (typeof obj[meth] === 'function') {
              obj[meth] = obj[meth].bind(obj);
          }
      });
      return obj;
  }

  var Fake = require('./fake');
  self.fake = new Fake(self).fake;

  var Random = require('./random');
  self.random = bindAll(new Random(self));

  var Helpers = require('./helpers');
  self.helpers = new Helpers(self);

  var Name = require('./name');
  self.name = bindAll(new Name(self));

  var Address = require('./address');
  self.address = bindAll(new Address(self));

  var Company = require('./company');
  self.company = bindAll(new Company(self));

  var Finance = require('./finance');
  self.finance = bindAll(new Finance(self));

  var Image = require('./image');
  self.image = bindAll(new Image(self));

  var Lorem = require('./lorem');
  self.lorem = bindAll(new Lorem(self));

  var Hacker = require('./hacker');
  self.hacker = bindAll(new Hacker(self));

  var Internet = require('./internet');
  self.internet = bindAll(new Internet(self));

  var Database = require('./database');
  self.database = bindAll(new Database(self));

  var Phone = require('./phone_number');
  self.phone = bindAll(new Phone(self));

  var _Date = require('./date');
  self.date = bindAll(new _Date(self));

  var Commerce = require('./commerce');
  self.commerce = bindAll(new Commerce(self));

  var System = require('./system');
  self.system = bindAll(new System(self));

  var _definitions = {
    "name": ["first_name", "last_name", "prefix", "suffix", "title", "male_first_name", "female_first_name", "male_middle_name", "female_middle_name", "male_last_name", "female_last_name"],
    "address": ["city_prefix", "city_suffix", "street_suffix", "county", "country", "country_code", "state", "state_abbr", "street_prefix", "postcode"],
    "company": ["adjective", "noun", "descriptor", "bs_adjective", "bs_noun", "bs_verb", "suffix"],
    "lorem": ["words"],
    "hacker": ["abbreviation", "adjective", "noun", "verb", "ingverb"],
    "phone_number": ["formats"],
    "finance": ["account_type", "transaction_type", "currency", "iban"],
    "internet": ["avatar_uri", "domain_suffix", "free_email", "example_email", "password"],
    "commerce": ["color", "department", "product_name", "price", "categories"],
    "database": ["collation", "column", "engine", "type"],
    "system": ["mimeTypes"],
    "date": ["month", "weekday"],
    "title": "",
    "separator": ""
  };

  // Create a Getter for all definitions.foo.bar properties
  Object.keys(_definitions).forEach(function(d){
    if (typeof self.definitions[d] === "undefined") {
      self.definitions[d] = {};
    }

    if (typeof _definitions[d] === "string") {
        self.definitions[d] = _definitions[d];
      return;
    }

    _definitions[d].forEach(function(p){
      Object.defineProperty(self.definitions[d], p, {
        get: function () {
          if (typeof self.locales[self.locale][d] === "undefined" || typeof self.locales[self.locale][d][p] === "undefined") {
            // certain localization sets contain less data then others.
            // in the case of a missing definition, use the default localeFallback to substitute the missing set data
            // throw new Error('unknown property ' + d + p)
            return self.locales[localeFallback][d][p];
          } else {
            // return localized data
            return self.locales[self.locale][d][p];
          }
        }
      });
    });
  });

};

Faker.prototype.seed = function(value) {
  var Random = require('./random');
  this.seedValue = value;
  this.random = new Random(this, this.seedValue);
}
module['exports'] = Faker;

},{"./fake":"node_modules/faker/lib/fake.js","./random":"node_modules/faker/lib/random.js","./helpers":"node_modules/faker/lib/helpers.js","./name":"node_modules/faker/lib/name.js","./address":"node_modules/faker/lib/address.js","./company":"node_modules/faker/lib/company.js","./finance":"node_modules/faker/lib/finance.js","./image":"node_modules/faker/lib/image.js","./lorem":"node_modules/faker/lib/lorem.js","./hacker":"node_modules/faker/lib/hacker.js","./internet":"node_modules/faker/lib/internet.js","./database":"node_modules/faker/lib/database.js","./phone_number":"node_modules/faker/lib/phone_number.js","./date":"node_modules/faker/lib/date.js","./commerce":"node_modules/faker/lib/commerce.js","./system":"node_modules/faker/lib/system.js"}],"node_modules/faker/lib/locales/az/address/country.js":[function(require,module,exports) {
module["exports"] = [
  "Akrotiri və Dekeliya",
  "Aland adaları",
  "Albaniya",
  "Almaniya",
  "Amerika Samoası",
  "Andorra",
  "Angilya",
  "Anqola",
  "Antiqua və Barbuda",
  "Argentina",
  "Aruba",
  "Avstraliya",
  "Avstriya",
  "Azərbaycan",
  "Baham adaları",
  "Banqladeş",
  "Barbados",
  "Belçika",
  "Beliz",
  "Belarus",
  "Benin",
  "Bermud adaları",
  "BƏƏ",
  "ABŞ",
  "Boliviya",
  "Bolqarıstan",
  "Bosniya və Herseqovina",
  "Botsvana",
  "Böyük Britaniya",
  "Braziliya",
  "Bruney",
  "Burkina-Faso",
  "Burundi",
  "Butan",
  "Bəhreyn",
  "Cersi",
  "Cəbəli-Tariq",
  "CAR",
  "Cənubi Sudan",
  "Cənubi Koreya",
  "Cibuti",
  "Çad",
  "Çexiya",
  "Monteneqro",
  "Çili",
  "ÇXR",
  "Danimarka",
  "Dominika",
  "Dominikan Respublikası",
  "Efiopiya",
  "Ekvador",
  "Ekvatorial Qvineya",
  "Eritreya",
  "Ermənistan",
  "Estoniya",
  "Əfqanıstan",
  "Əlcəzair",
  "Farer adaları",
  "Fələstin Dövləti",
  "Fici",
  "Kot-d’İvuar",
  "Filippin",
  "Finlandiya",
  "Folklend adaları",
  "Fransa",
  "Fransa Polineziyası",
  "Gernsi",
  "Gürcüstan",
  "Haiti",
  "Hindistan",
  "Honduras",
  "Honkonq",
  "Xorvatiya",
  "İndoneziya",
  "İordaniya",
  "İraq",
  "İran",
  "İrlandiya",
  "İslandiya",
  "İspaniya",
  "İsrail",
  "İsveç",
  "İsveçrə",
  "İtaliya",
  "Kabo-Verde",
  "Kamboca",
  "Kamerun",
  "Kanada",
  "Kayman adaları",
  "Keniya",
  "Kipr",
  "Kiribati",
  "Kokos adaları",
  "Kolumbiya",
  "Komor adaları",
  "Konqo Respublikası",
  "KDR",
  "Kosovo",
  "Kosta-Rika",
  "Kuba",
  "Kuk adaları",
  "Küveyt",
  "Qabon",
  "Qambiya",
  "Qana",
  "Qətər",
  "Qayana",
  "Qazaxıstan",
  "Qərbi Sahara",
  "Qırğızıstan",
  "Qrenada",
  "Qrenlandiya",
  "Quam",
  "Qvatemala",
  "Qvineya",
  "Qvineya-Bisau",
  "Laos",
  "Latviya",
  "Lesoto",
  "Liberiya",
  "Litva",
  "Livan",
  "Liviya",
  "Lixtenşteyn",
  "Lüksemburq",
  "Macarıstan",
  "Madaqaskar",
  "Makao",
  "Makedoniya",
  "Malavi",
  "Malayziya",
  "Maldiv adaları",
  "Mali",
  "Malta",
  "Marşall adaları",
  "Mavriki",
  "Mavritaniya",
  "Mayotta",
  "Meksika",
  "Men adası",
  "Mərakeş",
  "MAR",
  "Mikroneziya",
  "Milad adası",
  "Misir",
  "Myanma",
  "Moldova",
  "Monako",
  "Monqolustan",
  "Montserrat",
  "Mozambik",
  "Müqəddəs Yelena, Askenson və Tristan-da-Kunya adaları",
  "Namibiya",
  "Nauru",
  "Nepal",
  "Niderland",
  "Niderland Antil adaları",
  "Niger",
  "Nigeriya",
  "Nikaraqua",
  "Niue",
  "Norfolk adası",
  "Norveç",
  "Oman",
  "Özbəkistan",
  "Pakistan",
  "Palau",
  "Panama",
  "Papua-Yeni Qvineya",
  "Paraqvay",
  "Peru",
  "Pitkern adaları",
  "Polşa",
  "Portuqaliya",
  "Prednestroviya",
  "Puerto-Riko",
  "Ruanda",
  "Rumıniya",
  "Rusiya",
  "Salvador",
  "Samoa",
  "San-Marino",
  "San-Tome və Prinsipi",
  "Seneqal",
  "Sen-Bartelemi",
  "Sent-Kits və Nevis",
  "Sent-Lüsiya",
  "Sen-Marten",
  "Sen-Pyer və Mikelon",
  "Sent-Vinsent və Qrenadina",
  "Serbiya",
  "Seyşel adaları",
  "Səudiyyə Ərəbistanı",
  "Sinqapur",
  "Slovakiya",
  "Sloveniya",
  "Solomon adaları",
  "Somali",
  "Somalilend",
  "Sudan",
  "Surinam",
  "Suriya",
  "Svazilend",
  "Syerra-Leone",
  "Şərqi Timor",
  "Şimali Marian adaları",
  "Şpisbergen və Yan-Mayen",
  "Şri-Lanka",
  "Tacikistan",
  "Tanzaniya",
  "Tailand",
  "Çin Respublikası",
  "Törks və Kaykos adaları",
  "Tokelau",
  "Tonqa",
  "Toqo",
  "Trinidad və Tobaqo",
  "Tunis",
  "Tuvalu",
  "Türkiyə",
  "Türkmənistan",
  "Ukrayna",
  "Uollis və Futuna",
  "Uqanda",
  "Uruqvay",
  "Vanuatu",
  "Vatikan",
  "Venesuela",
  "Amerika Virgin adaları",
  "Britaniya Virgin adaları",
  "Vyetnam",
  "Yamayka",
  "Yaponiya",
  "Yeni Kaledoniya",
  "Yeni Zelandiya",
  "Yəmən",
  "Yunanıstan",
  "Zambiya",
  "Zimbabve"
];

},{}],"node_modules/faker/lib/locales/az/address/building_number.js":[function(require,module,exports) {
module["exports"] = [
  "###"
];

},{}],"node_modules/faker/lib/locales/az/address/street_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "küç.",
  "küçəsi",
  "prospekti",
  "pr.",
  "sahəsi",
  "sh."
];

},{}],"node_modules/faker/lib/locales/az/address/secondary_address.js":[function(require,module,exports) {
module["exports"] = [
  "m. ###"
];

},{}],"node_modules/faker/lib/locales/az/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "AZ####"
];

},{}],"node_modules/faker/lib/locales/az/address/state.js":[function(require,module,exports) {
module["exports"] = [

];

},{}],"node_modules/faker/lib/locales/az/address/street_title.js":[function(require,module,exports) {
module["exports"] = [
  "Abbas Fətullayev",
  "Abbas Mirzə Şərifzadə",
  "Abbas Səhhət",
  "Abdulla Şaiq",
  "Afiyəddin Cəlilov",
  "Axundov",
  "Ağa Nemətulla",
  "Ağadadaş Qurbanov",
  "Akademik Həsən Əliyev",
  "Akademik Lətif İmanov",
  "Alı Mustafayev",
  "Almas İldırım",
  "Asəf Zeynallı",
  "Asif Əsədullayev",
  "Aşıq Alı",
  "Aşıq Ələsgər",
  "Azadlıq prospekti",
  "Bakıxanov",
  "Balababa Məcidov",
  "Balaəmi Dadaşov",
  "Behbud Şaxtantinski",
  "Bəkir Çobanzadə",
  "Bəsti Bağırova",
  "Bəşir Səfəroğlu",
  "Böyük Qala",
  "Cabir Əliyev",
  "Camal Hacıəliyev",
  "Cavadxan",
  "Cavanşir",
  "Ceyhun Səlimov",
  "Ceyhunbəy Hacıbəyli",
  "Cəbiyev",
  "Cəfər Xəndan",
  "Cəfər Cabbarlı",
  "Cəlal Qurbanov",
  "Cəlil Məmmədquluzadə",
  "Çingiz Mustafayev",
  "Çobanzadə",
  "Dadaş Bünyadzadə",
  "Dağlı Yunus",
  "Dilarə Əliyeva",
  "Elçin Əzimov",
  "Eldar və Abdulla Əlibəyovlar",
  "Elxan Həsənov",
  "Elşən Mehdiyev",
  "Elşən Süleymanov",
  "Etibar Bəkirov",
  "Əbdüləzəl Dəmirçizadə",
  "Əbdülhəsən Anaplı",
  "Əbdülkərim Əlizadə",
  "Əhməd bəy Ağaoğlu",
  "Əhməd Cavad",
  "Əhməd Cəmil",
  "Əhməd Mehbalıyev",
  "Əhməd Rəcəbli",
  "Əjdər Xanbabayev",
  "Əkrəm Cəfərov",
  "Ələsgər Qayıbov",
  "Əliağa Vahid",
  "Əli Bəy Hüseynzadə",
  "Əlimərdan bəy Topçubaşov",
  "Əliyar Əliyev",
  "Əlövsət Abdulrəhimov",
  "Əlövsət Quliyev",
  "Əmir Bağırov",
  "Əsəd Əhmədov",
  "Əşrəf Yunusov",
  "Əzim Əzimzadə",
  "Əziz Əliyev",
  "Heybət Heybətov",
  "Həqiqət Rzayeva",
  "Həmid Araslı",
  "Hənifə Ələsgərova",
  "Hərbçilər",
  "Həsənoğu",
  "Həsən Seyidbəyli",
  "Hətəm Allahverdiyev",
  "Həzi Aslanov",
  "Hüsü Hacıyev",
  "Hüseynqulu Sarabski",
  "Fətəli xan Xoyski",
  "Fəzail Bayramov",
  "Fikrət Əmirov",
  "Fuad İbrahimbəyov",
  "Fuad Yusifov",
  "General Əliağa Şıxlinski",
  "Gülayə Qədirbəyova",
  "Gənclik",
  "Xaqani",
  "Xan Şuşinski",
  "Xanlar",
  "Xudu Məmmədov",
  "İbrahimpaşa Dadaşov",
  "İdris Süleymanov",
  "İlqar Abbasov",
  "İlqar İsmayılov",
  "İmran Qasımov",
  "İnqilab İsmayılov",
  "İsfəndiyar Zülalov",
  "İslam Abışov",
  "İslam Səfərli",
  "İsmayıl bəy Qutqaşınlı",
  "İsmayıl Mirzəgülov",
  "İstiqlaliyyət",
  "28 May",
  "İsgəndərov",
  "İvan Turgenev",
  "İzmir",
  "İzzət Həmidov",
  "İzzət Orucova",
  "Kamal Rəhimov",
  "Kazım Kazımzadə",
  "Kazımağa Kərimov",
  "Kərəm İsmayılov",
  "Kiçik Qala",
  "Koroğlu Rəhimov",
  "Qaçaq Nəbi",
  "Qarabağ",
  "Qədirbəyov",
  "Qəzənfər Musabəyov",
  "Qəzənfər Vəliyev",
  "Leyla Məmmədbəyova",
  "Mahmud İbrahimov",
  "Malik Məmmədov",
  "Mehdi Abbasov",
  "Mehdi Mehdizadə",
  "Məhəmməd Əmin Rəsulzadə",
  "Məhəmməd Hadi",
  "Məhəmməd Xiyabani",
  "Məhəmməd ibn Hinduşah Naxçıvani",
  "Məhsəti Gəncəvi",
  "Məmmədyarov",
  "Mərdanov qardaşları",
  "Mətləb Ağayev",
  "Məşədi Hilal",
  "Məzahir Rüstəmov",
  "Mikayıl Müşviq",
  "Mingəçevir",
  "Mirəli Qaşqay",
  "Mirəli Seyidov",
  "Mirzağa Əliyev",
  "Mirzə İbrahimov",
  "Mirzə Mənsur",
  "Mirzə Mustafayev",
  "Murtuza Muxtarov",
  "Mustafa Topçubaşov",
  "Müqtədir Aydınbəyov",
  "Müslüm Maqomayev",
  "Müzəffər Həsənov",
  "Nabat Aşurbəyova",
  "Naxçıvani",
  "Naximov",
  "Nazim İsmaylov",
  "Neapol",
  "Neftçi Qurban Abbasov",
  "Neftçilər prospekti",
  "Nəcəfbəy Vəzirov",
  "Nəcəfqulu Rəfiyev",
  "Nəriman Nərimanov",
  "Nəsirəddin Tusi",
  "Nigar Rəfibəyli",
  "Niyazi",
  "Nizami",
  "Nizami Abdullayev",
  "Nobel prospekti",
  "Novruz",
  "Novruzov qardaşları",
  "Oqtay Vəliyev",
  "Parlament",
  "Puşkin",
  "Rafiq Ağayev",
  "Ramiz Qəmbərov",
  "Rəşid Behbudov",
  "Rəşid Məcidov",
  "Ruhulla Axundov",
  "Ruslan Allahverdiyev",
  "Rüstəm Rüstəmov",
  "Tahir Bağırov",
  "Tarzan Hacı Məmmədov",
  "Tbilisi prospekti",
  "Təbriz (Bakı)",
  "Təbriz Xəlilbəyli",
  "Tofiq Məmmədov",
  "Tolstoy",
  "Sabit Orucov",
  "Sabit Rəhman",
  "Sahib Hümmətov",
  "Salatın Əsgərova",
  "Sarayevo",
  "Seyid Əzim Şirvani",
  "Seyid Şuşinski",
  "Seyidov",
  "Səməd bəy Mehmandarov",
  "Səməd Vurğun",
  "Səttar Bəhlulzadə",
  "Sona xanım Vəlixanlı",
  "Sübhi Salayev",
  "Süleyman Əhmədov",
  "Süleyman Rəhimov",
  "Süleyman Rüstəm",
  "Süleyman Sani Axundov",
  "Süleyman Vəzirov",
  "Şahin Səmədov",
  "Şamil Əzizbəyov",
  "Şamil Kamilov",
  "Şeyx Şamil",
  "Şəfayət Mehdiyev",
  "Şəmsi Bədəlbəyli",
  "Şirin Mirzəyev",
  "Şıxəli Qurbanov",
  "Şövkət Ələkbərova",
  "Ülvi Bünyadzadə",
  "Üzeyir Hacıbəyov",
  "Vasif Əliyev",
  "Vəli Məmmədov",
  "Vladislav Plotnikov",
  "Vüqar Quliyev",
  "Vunq Tau",
  "Yaqub Əliyev",
  "Yaşar Abdullayev",
  "Yaşar Əliyev",
  "Yavər Əliyev",
  "Yesenin",
  "Yəhya Hüseynov",
  "Yılmaz Axundzadə",
  "Yüsif Eyvazov",
  "Yusif Qasımov",
  "Yusif Məmmədəliyev",
  "Yusif Səfərov",
  "Yusif Vəzir Çəmənzəminli",
  "Zahid Əliyev",
  "Zahid Xəlilov",
  "Zaur Kərimov",
  "Zavod",
  "Zərgərpalan"
];

},{}],"node_modules/faker/lib/locales/az/address/city_name.js":[function(require,module,exports) {
module["exports"] = [
  "Ağcabədi",
  "Ağdam",
  "Ağdaş",
  "Ağdərə",
  "Ağstafa",
  "Ağsu",
  "Astara",
  "Bakı",
  "Balakən",
  "Beyləqan",
  "Bərdə",
  "Biləsuvar",
  "Cəbrayıl",
  "Cəlilabad",
  "Culfa",
  "Daşkəsən",
  "Dəliməmmədli",
  "Füzuli",
  "Gədəbəy",
  "Gəncə",
  "Goranboy",
  "Göyçay",
  "Göygöl",
  "Göytəpə",
  "Hacıqabul",
  "Horadiz",
  "Xaçmaz",
  "Xankəndi",
  "Xocalı",
  "Xocavənd",
  "Xırdalan",
  "Xızı",
  "Xudat",
  "İmişli",
  "İsmayıllı",
  "Kəlbəcər",
  "Kürdəmir",
  "Qax",
  "Qazax",
  "Qəbələ",
  "Qobustan",
  "Qovlar",
  "Quba",
  "Qubadlı",
  "Qusar",
  "Laçın",
  "Lerik",
  "Lənkəran",
  "Liman",
  "Masallı",
  "Mingəçevir",
  "Naftalan",
  "Naxçıvan (şəhər)",
  "Neftçala",
  "Oğuz",
  "Ordubad",
  "Saatlı",
  "Sabirabad",
  "Salyan",
  "Samux",
  "Siyəzən",
  "Sumqayıt",
  "Şabran",
  "Şahbuz",
  "Şamaxı",
  "Şəki",
  "Şəmkir",
  "Şərur",
  "Şirvan",
  "Şuşa",
  "Tərtər",
  "Tovuz",
  "Ucar",
  "Yardımlı",
  "Yevlax",
  "Zaqatala",
  "Zəngilan",
  "Zərdab"
];

},{}],"node_modules/faker/lib/locales/az/address/city.js":[function(require,module,exports) {
module["exports"] = [
  "#{Address.city_name}"
];

},{}],"node_modules/faker/lib/locales/az/address/street_name.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_suffix} #{Address.street_title}",
  "#{Address.street_title} #{street_suffix}"
];

},{}],"node_modules/faker/lib/locales/az/address/street_address.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_name}, #{building_number}"
];

},{}],"node_modules/faker/lib/locales/az/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "Azərbaycan"
];

},{}],"node_modules/faker/lib/locales/az/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.country = require("./country");
address.building_number = require("./building_number");
address.street_suffix = require("./street_suffix");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.state = require("./state");
address.street_title = require("./street_title");
address.city_name = require("./city_name");
address.city = require("./city");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./country":"node_modules/faker/lib/locales/az/address/country.js","./building_number":"node_modules/faker/lib/locales/az/address/building_number.js","./street_suffix":"node_modules/faker/lib/locales/az/address/street_suffix.js","./secondary_address":"node_modules/faker/lib/locales/az/address/secondary_address.js","./postcode":"node_modules/faker/lib/locales/az/address/postcode.js","./state":"node_modules/faker/lib/locales/az/address/state.js","./street_title":"node_modules/faker/lib/locales/az/address/street_title.js","./city_name":"node_modules/faker/lib/locales/az/address/city_name.js","./city":"node_modules/faker/lib/locales/az/address/city.js","./street_name":"node_modules/faker/lib/locales/az/address/street_name.js","./street_address":"node_modules/faker/lib/locales/az/address/street_address.js","./default_country":"node_modules/faker/lib/locales/az/address/default_country.js"}],"node_modules/faker/lib/locales/az/internet/free_email.js":[function(require,module,exports) {
module["exports"] = [
  "box.az",
  "mail.az",
  "gmail.com",
  "yahoo.com",
  "hotmail.com"
];

},{}],"node_modules/faker/lib/locales/az/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "com",
  "az",
  "com.az",
  "info",
  "net",
  "org"
];

},{}],"node_modules/faker/lib/locales/az/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.free_email = require("./free_email");
internet.domain_suffix = require("./domain_suffix");

},{"./free_email":"node_modules/faker/lib/locales/az/internet/free_email.js","./domain_suffix":"node_modules/faker/lib/locales/az/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/az/name/male_first_name.js":[function(require,module,exports) {
module["exports"] = [
  "Anar",
  "Amid",
  "Afəl",
  "Abbas",
  "Abdulla",
  "Adil",
  "Akif",
  "Aqil",
  "Bəhram",
  "Nurlan",
  "Rafiq",
  "Tərlan",
  "Zaur",
  "Emin",
  "Emil",
  "Kamran",
  "Elnur",
  "Natiq",
  "Rəşad",
  "Rəşid",
  "Tahir",
  "Əhməd",
  "Zahir",
  "İlham",
  "İlqar",
  "Nahid",
  "Nihad",
  "Faiq",
  "İxtiyar",
  "Şəhriyar",
  "Şaiq",
  "Bəxtiyar",
  "Bəhruz",
  "Tunar",
  "Nadir"
];

},{}],"node_modules/faker/lib/locales/az/name/male_last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Əhmədov",
  "Ələkbərov",
  "Əliyev",
  "Vəliyev",
  "Soltanov",
  "Quliyev",
  "Məmmədov",
  "Xəlilov",
  "Nəzərov",
  "Rəhimov"
];

},{}],"node_modules/faker/lib/locales/az/name/female_first_name.js":[function(require,module,exports) {
module["exports"] = [
  "Anna",
  "Adeliya",
  "Afaq",
  "Afət",
  "Afərim",
  "Aidə",
  "Aygün",
  "Aynur",
  "Alsu",
  "Ayan",
  "Aytən",
  "Aygül",
  "Aydan",
  "Aylin",
  "Bahar",
  "Banu",
  "Bəyaz",
  "Billurə",
  "Cansu",
  "Ceyla",
  "Damla",
  "Dəniz",
  "Diana",
  "Dilarə",
  "Ella",
  "Elza",
  "Elyanora",
  "Ellada",
  "Elvira",
  "Elnarə",
  "Esmira",
  "Estella",
  "Fatimə",
  "Fəxriyyə",
  "Fərəh",
  "Fərqanə",
  "Fidan",
  "Firuzə",
  "Gövhər",
  "Günay",
  "Gülay",
  "Gülçin",
  "Gülər",
  "Gülsüm",
  "Humay",
  "Hüriyə",
  "Hülya",
  "Jalə",
  "Jasmin",
  "Kübra",
  "Ləman",
  "Lamiyə",
  "Lalə",
  "Liliya",
  "Laura",
  "Leyla",
  "Maya",
  "Mehriban",
  "Mələk",
  "Nuray",
  "Nurgün",
  "Nərgiz",
  "Nigar",
  "Ofelya",
  "Pəri",
  "Röya",
  "Səbinə",
  "Selcan",
  "Tansu",
  "Tuba",
  "Ülviyyə",
  "Ulduz",
  "Ülkər"
];

},{}],"node_modules/faker/lib/locales/az/name/female_last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Qasımova",
  "Əfəndiyeva",
  "Soltanova",
  "Abdullayeva",
  "Rəşidova",
  "Ələkbərova",
  "Əliyeva",
  "Tahirova",
  "Seyidova",
  "Vəsiyeva"
];

},{}],"node_modules/faker/lib/locales/az/name/prefix.js":[function(require,module,exports) {
module["exports"] = [];

},{}],"node_modules/faker/lib/locales/az/name/suffix.js":[function(require,module,exports) {
module["exports"] = [];

},{}],"node_modules/faker/lib/locales/az/name/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{male_first_name}",
  "#{male_last_name} #{male_first_name}",
  "#{male_first_name} #{male_last_name}",
  "#{female_first_name}",
  "#{female_first_name} #{female_last_name}",
  "#{female_last_name} #{female_first_name}",
];

},{}],"node_modules/faker/lib/locales/az/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.male_first_name = require("./male_first_name");
name.male_last_name = require("./male_last_name");
name.female_first_name = require("./female_first_name");
name.female_last_name = require("./female_last_name");
name.prefix = require("./prefix");
name.suffix = require("./suffix");
name.name = require("./name");

},{"./male_first_name":"node_modules/faker/lib/locales/az/name/male_first_name.js","./male_last_name":"node_modules/faker/lib/locales/az/name/male_last_name.js","./female_first_name":"node_modules/faker/lib/locales/az/name/female_first_name.js","./female_last_name":"node_modules/faker/lib/locales/az/name/female_last_name.js","./prefix":"node_modules/faker/lib/locales/az/name/prefix.js","./suffix":"node_modules/faker/lib/locales/az/name/suffix.js","./name":"node_modules/faker/lib/locales/az/name/name.js"}],"node_modules/faker/lib/locales/az/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "(9##)###-##-##"
];

},{}],"node_modules/faker/lib/locales/az/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/az/phone_number/formats.js"}],"node_modules/faker/lib/locales/az/commerce/color.js":[function(require,module,exports) {
module["exports"] = [
  "ala",
  "açıq bənövşəyi",
  "ağ",
  "mavi",
  "boz",
  "bənövşəyi",
  "göy rəng",
  "gümüşü",
  "kardinal",
  "narıncı",
  "qara",
  "qırmızı",
  "qəhvəyi",
  "tünd göy",
  "tünd qırmızı",
  "xlorofil",
  "yaşıl",
  "çəhrayı"
];

},{}],"node_modules/faker/lib/locales/az/commerce/department.js":[function(require,module,exports) {
module["exports"] = [
  "Kitablar",
  "Filmlər",
  "musiqi",
  "oyunlar",
  "Elektronika",
  "Kompyuterlər",
  "Ev",
  "садинструмент",
  "Səhiyyə",
  "gözəllik",
  "Oyuncaqlar",
  "uşaq üçün",
  "Geyim",
  "Ayyaqqabı",
  "bəzək",
  "İdman",
  "turizm",
  "Avtomobil",
];

},{}],"node_modules/faker/lib/locales/az/commerce/product_name.js":[function(require,module,exports) {
module["exports"] = {
  "adjective": [
    "Balaca",
    "Ergonomik",
    "Kobud",
    "İntellektual",
    "Möhtəşəm",
    "İnanılmaz",
    "Fantastik",
    "Əlverişli",
    "Parlaq",
    "Mükəmməl"
  ],
  "material": [
    "Polad",
    "Ağac",
    "Beton",
    "Plastik",
    "Pambıq",
    "Qranit",
    "Rezin"
  ],
  "product": [
    "Stul",
    "Avtomobil",
    "Kompyuter",
    "Beret",
    "Kulon",
    "Stol",
    "Sviter",
    "Kəmər",
  ]
};

},{}],"node_modules/faker/lib/locales/az/commerce/index.js":[function(require,module,exports) {
var commerce = {};
module['exports'] = commerce;
commerce.color = require("./color");
commerce.department = require("./department");
commerce.product_name = require("./product_name");

},{"./color":"node_modules/faker/lib/locales/az/commerce/color.js","./department":"node_modules/faker/lib/locales/az/commerce/department.js","./product_name":"node_modules/faker/lib/locales/az/commerce/product_name.js"}],"node_modules/faker/lib/locales/az/company/prefix.js":[function(require,module,exports) {
module["exports"] = [
  "ASC",
  "MMC",
  "QSC",
];

},{}],"node_modules/faker/lib/locales/az/company/suffix.js":[function(require,module,exports) {
module["exports"] = [

];

},{}],"node_modules/faker/lib/locales/az/company/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{prefix} #{Name.female_first_name}",
  "#{prefix} #{Name.male_first_name}",
  "#{prefix} #{Name.male_last_name}",
  "#{prefix} #{suffix}#{suffix}",
  "#{prefix} #{suffix}#{suffix}#{suffix}",
  "#{prefix} #{Address.city_name}#{suffix}",
  "#{prefix} #{Address.city_name}#{suffix}#{suffix}",
  "#{prefix} #{Address.city_name}#{suffix}#{suffix}#{suffix}"
];

},{}],"node_modules/faker/lib/locales/az/company/index.js":[function(require,module,exports) {
var company = {};
module['exports'] = company;
company.prefix = require("./prefix");
company.suffix = require("./suffix");
company.name = require("./name");

},{"./prefix":"node_modules/faker/lib/locales/az/company/prefix.js","./suffix":"node_modules/faker/lib/locales/az/company/suffix.js","./name":"node_modules/faker/lib/locales/az/company/name.js"}],"node_modules/faker/lib/locales/az/date/month.js":[function(require,module,exports) {
// source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/ru.xml#L1734
module["exports"] = {
  wide: [
    "yanvar",
    "fevral",
    "mart",
    "aprel",
    "may",
    "iyun",
    "iyul",
    "avqust",
    "sentyabr",
    "oktyabr",
    "noyabr",
    "dekabr"
  ],
  wide_context: [
    "января",
    "февраля",
    "марта",
    "апреля",
    "мая",
    "июня",
    "июля",
    "августа",
    "сентября",
    "октября",
    "ноября",
    "декабря"
  ],
  abbr: [
    "янв.",
    "февр.",
    "март",
    "апр.",
    "май",
    "июнь",
    "июль",
    "авг.",
    "сент.",
    "окт.",
    "нояб.",
    "дек."
  ],
  abbr_context: [
    "янв.",
    "февр.",
    "марта",
    "апр.",
    "мая",
    "июня",
    "июля",
    "авг.",
    "сент.",
    "окт.",
    "нояб.",
    "дек."
  ]
};

},{}],"node_modules/faker/lib/locales/az/date/weekday.js":[function(require,module,exports) {
// source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/ru.xml#L1825
module["exports"] = {
  wide: [
    "Bazar",
    "Bazar ertəsi",
    "Çərşənbə axşamı",
    "Çərşənbə",
    "Cümə axşamı",
    "Cümə",
    "Şənbə"
  ],
  wide_context: [
    "воскресенье",
    "понедельник",
    "вторник",
    "среда",
    "четверг",
    "пятница",
    "суббота"
  ],
  abbr: [
    "Ba",
    "BE",
    "ÇA",
    "Çə",
    "CA",
    "Cü",
    "Şə"
  ],
  abbr_context: [
    "вс",
    "пн",
    "вт",
    "ср",
    "чт",
    "пт",
    "сб"
  ]
};

},{}],"node_modules/faker/lib/locales/az/date/index.js":[function(require,module,exports) {
var date = {};
module["exports"] = date;
date.month = require("./month");
date.weekday = require("./weekday");

},{"./month":"node_modules/faker/lib/locales/az/date/month.js","./weekday":"node_modules/faker/lib/locales/az/date/weekday.js"}],"node_modules/faker/lib/locales/az/index.js":[function(require,module,exports) {
var az = {};
module['exports'] = az;
az.title = "Azerbaijani";
az.separator = " və ";
az.address = require("./address");
az.internet = require("./internet");
az.name = require("./name");
az.phone_number = require("./phone_number");
az.commerce = require("./commerce");
az.company = require("./company");
az.date = require("./date");

},{"./address":"node_modules/faker/lib/locales/az/address/index.js","./internet":"node_modules/faker/lib/locales/az/internet/index.js","./name":"node_modules/faker/lib/locales/az/name/index.js","./phone_number":"node_modules/faker/lib/locales/az/phone_number/index.js","./commerce":"node_modules/faker/lib/locales/az/commerce/index.js","./company":"node_modules/faker/lib/locales/az/company/index.js","./date":"node_modules/faker/lib/locales/az/date/index.js"}],"node_modules/faker/lib/locales/cz/address/country.js":[function(require,module,exports) {
module["exports"] = [
  "Afghánistán",
  "Albánie",
  "Alžírsko",
  "Andorra",
  "Angola",
  "Antigua a Barbuda",
  "Argentina",
  "Arménie",
  "Austrálie",
  "Ázerbájdžán",
  "Bahamy",
  "Bahrajn",
  "Bangladéš",
  "Barbados",
  "Belgie",
  "Belize",
  "Benin",
  "Bělorusko",
  "Bhútán",
  "Bolívie",
  "Bosna a Hercegovina",
  "Botswana",
  "Brazílie",
  "Brunej",
  "Bulharsko",
  "Burkina Faso",
  "Burundi",
  "Čad",
  "Černá Hora",
  "Česko",
  "Čína",
  "Dánsko",
  "DR Kongo",
  "Dominika",
  "Dominik",
  "Džibutsko",
  "Egypt",
  "Ekvádor",
  "Eritrea",
  "Estonsko",
  "Etiopie",
  "Fidži",
  "Filipíny",
  "Finsko",
  "Francie",
  "Gabon",
  "Gambie",
  "Gruzie",
  "Německo",
  "Ghana",
  "Grenada",
  "Guatemala",
  "Guinea",
  "Guinea-Bissau",
  "Guyana",
  "Haiti",
  "Honduras",
  "Chile",
  "Chorvatsko",
  "Indie",
  "Indonésie",
  "Irák",
  "Írán",
  "Irsko",
  "Island",
  "Itálie",
  "Izrael",
  "Jamajka",
  "Japonsko",
  "Jemen",
  "Jihoaf",
  "Jižní Korea",
  "Jižní Súdán",
  "Jordánsko",
  "Kambodža",
  "Kamerun",
  "Kanada",
  "Kapverdy",
  "Katar",
  "Kazachstán",
  "Keňa",
  "Kiribati",
  "Kolumbie",
  "Komory",
  "Kongo",
  "Kostarika",
  "Kuba",
  "Kuvajt",
  "Kypr",
  "Kyrgyzstán",
  "Laos",
  "Lesotho",
  "Libanon",
  "Libérie",
  "Libye",
  "Lichtenštejnsko",
  "Litva",
  "Lotyšsko",
  "Lucembursko",
  "Madagaskar",
  "Maďarsko",
  "Makedonie",
  "Malajsie",
  "Malawi",
  "Maledivy",
  "Mali",
  "Malta",
  "Maroko",
  "Marshallovy ostrovy",
  "Mauritánie",
  "Mauricius",
  "Mexiko",
  "Mikronésie",
  "Moldavsko",
  "Monako",
  "Mongolsko",
  "Mosambik",
  "Myanmar (Barma)",
  "Namibie",
  "Nauru",
  "Nepál",
  "Niger",
  "Nigérie",
  "Nikaragua",
  "Nizozemsko",
  "Norsko",
  "Nový Zéland",
  "Omán",
  "Pákistán",
  "Palau",
  "Palestina",
  "Panama",
  "Papua-Nová Guinea",
  "Paraguay",
  "Peru",
  "Pobřeží slonoviny",
  "Polsko",
  "Portugalsko",
  "Rakousko",
  "Rovníková Guinea",
  "Rumunsko",
  "Rusko",
  "Rwanda",
  "Řecko",
  "Salvador",
  "Samoa",
  "San Marino",
  "Saúdská Arábie",
  "Senegal",
  "Severní Korea",
  "Seychely",
  "Sierra Leone",
  "Singapur",
  "Slovensko",
  "Slovinsko",
  "Srbsko",
  "Středo",
  "Somálsko",
  "Surinam",
  "Súdán",
  "Svatá Lucie",
  "Svatý Kryštof a Nevis",
  "Svatý Tomáš a Princův ostrov",
  "Svatý Vincenc a Grenadiny",
  "Svazijsko",
  "Spojené arabské emiráty",
  "Spojené království",
  "Spojené státy americké",
  "Sýrie",
  "Šalamounovy ostrovy",
  "Španělsko",
  "Srí Lanka",
  "Švédsko",
  "Švýcarsko",
  "Tádžikistán",
  "Tanzanie",
  "Thajsko",
  "Togo",
  "Tonga",
  "Trinidad a Tobago",
  "Tunisko",
  "Turecko",
  "Turkmenistán",
  "Tuvalu",
  "Uganda",
  "Ukrajina",
  "Uruguay",
  "Uzbekistán",
  "Vanuatu",
  "Vatikán",
  "Venezuela",
  "Vietnam",
  "Východní Timor",
  "Zambie",
  "Zimbabwe",
];

},{}],"node_modules/faker/lib/locales/cz/address/building_number.js":[function(require,module,exports) {
module["exports"] = [
  "#",
  "##",
  "###"
];

},{}],"node_modules/faker/lib/locales/cz/address/secondary_address.js":[function(require,module,exports) {
module["exports"] = [
  "Apt. ###",
  "Suite ###"
];

},{}],"node_modules/faker/lib/locales/cz/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "#####",
  "### ##",
  "###-##"
];

},{}],"node_modules/faker/lib/locales/cz/address/state.js":[function(require,module,exports) {
module["exports"] = [];

},{}],"node_modules/faker/lib/locales/cz/address/state_abbr.js":[function(require,module,exports) {
module["exports"] = [];

},{}],"node_modules/faker/lib/locales/cz/address/time_zone.js":[function(require,module,exports) {
module["exports"] = [
  "Pacific/Midway",
  "Pacific/Pago_Pago",
  "Pacific/Honolulu",
  "America/Juneau",
  "America/Los_Angeles",
  "America/Tijuana",
  "America/Denver",
  "America/Phoenix",
  "America/Chihuahua",
  "America/Mazatlan",
  "America/Chicago",
  "America/Regina",
  "America/Mexico_City",
  "America/Mexico_City",
  "America/Monterrey",
  "America/Guatemala",
  "America/New_York",
  "America/Indiana/Indianapolis",
  "America/Bogota",
  "America/Lima",
  "America/Lima",
  "America/Halifax",
  "America/Caracas",
  "America/La_Paz",
  "America/Santiago",
  "America/St_Johns",
  "America/Sao_Paulo",
  "America/Argentina/Buenos_Aires",
  "America/Guyana",
  "America/Godthab",
  "Atlantic/South_Georgia",
  "Atlantic/Azores",
  "Atlantic/Cape_Verde",
  "Europe/Dublin",
  "Europe/London",
  "Europe/Lisbon",
  "Europe/London",
  "Africa/Casablanca",
  "Africa/Monrovia",
  "Etc/UTC",
  "Europe/Belgrade",
  "Europe/Bratislava",
  "Europe/Budapest",
  "Europe/Ljubljana",
  "Europe/Prague",
  "Europe/Sarajevo",
  "Europe/Skopje",
  "Europe/Warsaw",
  "Europe/Zagreb",
  "Europe/Brussels",
  "Europe/Copenhagen",
  "Europe/Madrid",
  "Europe/Paris",
  "Europe/Amsterdam",
  "Europe/Berlin",
  "Europe/Berlin",
  "Europe/Rome",
  "Europe/Stockholm",
  "Europe/Vienna",
  "Africa/Algiers",
  "Europe/Bucharest",
  "Africa/Cairo",
  "Europe/Helsinki",
  "Europe/Kiev",
  "Europe/Riga",
  "Europe/Sofia",
  "Europe/Tallinn",
  "Europe/Vilnius",
  "Europe/Athens",
  "Europe/Istanbul",
  "Europe/Minsk",
  "Asia/Jerusalem",
  "Africa/Harare",
  "Africa/Johannesburg",
  "Europe/Moscow",
  "Europe/Moscow",
  "Europe/Moscow",
  "Asia/Kuwait",
  "Asia/Riyadh",
  "Africa/Nairobi",
  "Asia/Baghdad",
  "Asia/Tehran",
  "Asia/Muscat",
  "Asia/Muscat",
  "Asia/Baku",
  "Asia/Tbilisi",
  "Asia/Yerevan",
  "Asia/Kabul",
  "Asia/Yekaterinburg",
  "Asia/Karachi",
  "Asia/Karachi",
  "Asia/Tashkent",
  "Asia/Kolkata",
  "Asia/Kolkata",
  "Asia/Kolkata",
  "Asia/Kolkata",
  "Asia/Kathmandu",
  "Asia/Dhaka",
  "Asia/Dhaka",
  "Asia/Colombo",
  "Asia/Almaty",
  "Asia/Novosibirsk",
  "Asia/Rangoon",
  "Asia/Bangkok",
  "Asia/Bangkok",
  "Asia/Jakarta",
  "Asia/Krasnoyarsk",
  "Asia/Shanghai",
  "Asia/Chongqing",
  "Asia/Hong_Kong",
  "Asia/Urumqi",
  "Asia/Kuala_Lumpur",
  "Asia/Singapore",
  "Asia/Taipei",
  "Australia/Perth",
  "Asia/Irkutsk",
  "Asia/Ulaanbaatar",
  "Asia/Seoul",
  "Asia/Tokyo",
  "Asia/Tokyo",
  "Asia/Tokyo",
  "Asia/Yakutsk",
  "Australia/Darwin",
  "Australia/Adelaide",
  "Australia/Melbourne",
  "Australia/Melbourne",
  "Australia/Sydney",
  "Australia/Brisbane",
  "Australia/Hobart",
  "Asia/Vladivostok",
  "Pacific/Guam",
  "Pacific/Port_Moresby",
  "Asia/Magadan",
  "Asia/Magadan",
  "Pacific/Noumea",
  "Pacific/Fiji",
  "Asia/Kamchatka",
  "Pacific/Majuro",
  "Pacific/Auckland",
  "Pacific/Auckland",
  "Pacific/Tongatapu",
  "Pacific/Fakaofo",
  "Pacific/Apia"
];

},{}],"node_modules/faker/lib/locales/cz/address/city_name.js":[function(require,module,exports) {
module["exports"] = [
  "Abertamy",
  "Adamov",
  "Andělská Hora",
  "Aš",
  "Bakov nad Jizerou",
  "Bavorov",
  "Bechyně",
  "Bečov nad Teplou",
  "Bělá nad Radbuzou",
  "Bělá pod Bezdězem",
  "Benátky nad Jizerou",
  "Benešov",
  "Benešov nad Ploučnicí",
  "Beroun",
  "Bezdružice",
  "Bílina",
  "Bílovec",
  "Blansko",
  "Blatná",
  "Blovice",
  "Blšany",
  "Bochov",
  "Bohumín",
  "Bohušovice nad Ohří",
  "Bojkovice",
  "Bor",
  "Borohrádek",
  "Borovany",
  "Boskovice",
  "Boží Dar",
  "Brandýs nad Labem-Stará Boleslav",
  "Brandýs nad Orlicí",
  "Brno",
  "Broumov",
  "Brtnice",
  "Brumov-Bylnice",
  "Bruntál",
  "Brušperk",
  "Břeclav",
  "Březnice",
  "Březová",
  "Březová nad Svitavou",
  "Břidličná",
  "Bučovice",
  "Budišov nad Budišovkou",
  "Budyně nad Ohří",
  "Buštěhrad",
  "Bystré",
  "Bystřice",
  "Bystřice nad Pernštejnem",
  "Bystřice pod Hostýnem",
  "Bzenec",
  "Chabařovice",
  "Cheb",
  "Chlumec",
  "Chlumec nad Cidlinou",
  "Choceň",
  "Chodov",
  "Chomutov",
  "Chotěboř",
  "Chrast",
  "Chrastava",
  "Chropyně",
  "Chrudim",
  "Chřibská",
  "Chvaletice",
  "Chýnov",
  "Chyše",
  "Cvikov",
  "Čáslav",
  "Čelákovice",
  "Černošice",
  "Černošín",
  "Černovice",
  "Červená Řečice",
  "Červený Kostelec",
  "Česká Kamenice",
  "Česká Lípa",
  "Česká Skalice",
  "Česká Třebová",
  "České Budějovice",
  "České Velenice",
  "Český Brod",
  "Český Dub",
  "Český Krumlov",
  "Český Těšín",
  "Dačice",
  "Dašice",
  "Děčín",
  "Desná",
  "Deštná",
  "Dobrovice",
  "Dobruška",
  "Dobřany",
  "Dobřichovice",
  "Dobříš",
  "Doksy",
  "Dolní Benešov",
  "Dolní Bousov",
  "Dolní Kounice",
  "Dolní Poustevna",
  "Domažlice",
  "Dubá",
  "Dubí",
  "Dubňany",
  "Duchcov",
  "Dvůr Králové nad Labem",
  "Františkovy Lázně",
  "Frenštát pod Radhoštěm",
  "Frýdek-Místek",
  "Frýdlant",
  "Frýdlant nad Ostravicí",
  "Fryšták",
  "Fulnek",
  "Golčův Jeníkov",
  "Habartov",
  "Habry",
  "Hanušovice",
  "Harrachov",
  "Hartmanice",
  "Havířov",
  "Havlíčkův Brod",
  "Hejnice",
  "Heřmanův Městec",
  "Hlinsko",
  "Hluboká nad Vltavou",
  "Hlučín",
  "Hluk",
  "Hodkovice nad Mohelkou",
  "Hodonín",
  "Holešov",
  "Holice",
  "Holýšov",
  "Hora Svaté Kateřiny",
  "Horažďovice",
  "Horní Benešov",
  "Horní Blatná",
  "Horní Bříza",
  "Horní Cerekev",
  "Horní Jelení",
  "Horní Jiřetín",
  "Horní Planá",
  "Horní Slavkov",
  "Horšovský Týn",
  "Hořice",
  "Hořovice",
  "Hostinné",
  "Hostivice",
  "Hostomice",
  "Hostouň",
  "Hoštka",
  "Hradec Králové",
  "Hradec nad Moravicí",
  "Hrádek",
  "Hrádek nad Nisou",
  "Hranice (okres Cheb)",
  "Hranice (okres Přerov)",
  "Hrob",
  "Hrochův Týnec",
  "Hronov",
  "Hrotovice",
  "Hroznětín",
  "Hrušovany nad Jevišovkou",
  "Hulín",
  "Humpolec",
  "Husinec",
  "Hustopeče",
  "Ivančice",
  "Ivanovice na Hané",
  "Jablonec nad Jizerou",
  "Jablonec nad Nisou",
  "Jablonné nad Orlicí",
  "Jablonné v Podještědí",
  "Jablunkov",
  "Jáchymov",
  "Janov",
  "Janovice nad Úhlavou",
  "Janské Lázně",
  "Jaroměř",
  "Jaroměřice nad Rokytnou",
  "Javorník",
  "Jemnice",
  "Jesenice (okres Rakovník)",
  "Jeseník",
  "Jevíčko",
  "Jevišovice",
  "Jičín",
  "Jihlava",
  "Jilemnice",
  "Jílové",
  "Jílové u Prahy",
  "Jindřichův Hradec",
  "Jirkov",
  "Jiříkov",
  "Jistebnice",
  "Kadaň",
  "Kamenice nad Lipou",
  "Kamenický Šenov",
  "Kaplice",
  "Kardašova Řečice",
  "Karlovy Vary",
  "Karolinka",
  "Karviná",
  "Kasejovice",
  "Kašperské Hory",
  "Kaznějov",
  "Kdyně",
  "Kelč",
  "Kladno",
  "Kladruby",
  "Klášterec nad Ohří",
  "Klatovy",
  "Klecany",
  "Klimkovice",
  "Klobouky u Brna",
  "Kojetín",
  "Kolín",
  "Konice",
  "Kopidlno",
  "Kopřivnice",
  "Koryčany",
  "Kosmonosy",
  "Kostelec na Hané",
  "Kostelec nad Černými lesy",
  "Kostelec nad Labem",
  "Kostelec nad Orlicí",
  "Košťany",
  "Kouřim",
  "Kožlany",
  "Králíky",
  "Kralovice",
  "Kralupy nad Vltavou",
  "Králův Dvůr",
  "Kraslice",
  "Krásná Hora nad Vltavou",
  "Krásná Lípa",
  "Krásné Údolí",
  "Krásno",
  "Kravaře",
  "Krnov",
  "Kroměříž",
  "Krupka",
  "Kryry",
  "Kunovice",
  "Kunštát",
  "Kuřim",
  "Kutná Hora",
  "Kyjov",
  "Kynšperk nad Ohří",
  "Lanškroun",
  "Lanžhot",
  "Lázně Bělohrad",
  "Lázně Bohdaneč",
  "Lázně Kynžvart",
  "Ledeč nad Sázavou",
  "Ledvice",
  "Letohrad",
  "Letovice",
  "Libáň",
  "Libčice nad Vltavou",
  "Liběchov",
  "Liberec",
  "Libochovice",
  "Libušín",
  "Lipník nad Bečvou",
  "Lišov",
  "Litoměřice",
  "Litomyšl",
  "Litovel",
  "Litvínov",
  "Loket",
  "Lom",
  "Lomnice nad Lužnicí",
  "Lomnice nad Popelkou",
  "Loštice",
  "Loučná pod Klínovcem",
  "Louny",
  "Lovosice",
  "Luby",
  "Lučany nad Nisou",
  "Luhačovice",
  "Luže",
  "Lysá nad Labem",
  "Manětín",
  "Mariánské Lázně",
  "Mašťov",
  "Měčín",
  "Mělník",
  "Městec Králové",
  "Město Albrechtice",
  "Město Touškov",
  "Meziboří",
  "Meziměstí",
  "Mikulášovice",
  "Mikulov",
  "Miletín",
  "Milevsko",
  "Milovice",
  "Mimoň",
  "Miroslav",
  "Mirošov",
  "Mirotice",
  "Mirovice",
  "Mladá Boleslav",
  "Mladá Vožice",
  "Mnichovice",
  "Mnichovo Hradiště",
  "Mníšek pod Brdy",
  "Modřice",
  "Mohelnice",
  "Moravská Třebová",
  "Moravské Budějovice",
  "Moravský Beroun",
  "Moravský Krumlov",
  "Morkovice-Slížany",
  "Most",
  "Mšeno",
  "Mýto",
  "Náchod",
  "Nalžovské Hory",
  "Náměšť nad Oslavou",
  "Napajedla",
  "Nasavrky",
  "Nechanice",
  "Nejdek",
  "Němčice nad Hanou",
  "Nepomuk",
  "Neratovice",
  "Netolice",
  "Neveklov",
  "Nová Bystřice",
  "Nová Paka",
  "Nová Role",
  "Nová Včelnice",
  "Nové Hrady",
  "Nové Město na Moravě",
  "Nové Město nad Metují",
  "Nové Město pod Smrkem",
  "Nové Sedlo",
  "Nové Strašecí",
  "Nový Bor",
  "Nový Bydžov",
  "Nový Jičín",
  "Nový Knín",
  "Nymburk",
  "Nýrsko",
  "Nýřany",
  "Odolena Voda",
  "Odry",
  "Olešnice",
  "Olomouc",
  "Oloví",
  "Opava",
  "Opočno",
  "Orlová",
  "Osečná",
  "Osek",
  "Oslavany",
  "Ostrava",
  "Ostrov",
  "Otrokovice",
  "Pacov",
  "Pardubice",
  "Paskov",
  "Pec pod Sněžkou",
  "Pečky",
  "Pelhřimov",
  "Petřvald",
  "Pilníkov",
  "Písek",
  "Planá",
  "Planá nad Lužnicí",
  "Plánice",
  "Plasy",
  "Plesná",
  "Plumlov",
  "Plzeň",
  "Poběžovice",
  "Počátky",
  "Podbořany",
  "Poděbrady",
  "Podivín",
  "Pohořelice",
  "Police nad Metují",
  "Polička",
  "Polná",
  "Postoloprty",
  "Potštát",
  "Prachatice",
  "Praha",
  "Proseč",
  "Prostějov",
  "Protivín",
  "Přebuz",
  "Přelouč",
  "Přerov",
  "Přeštice",
  "Příbor",
  "Příbram",
  "Přibyslav",
  "Přimda",
  "Pyšely",
  "Rabí",
  "Radnice",
  "Rájec-Jestřebí",
  "Rajhrad",
  "Rakovník",
  "Ralsko",
  "Raspenava",
  "Rejštejn",
  "Rokycany",
  "Rokytnice nad Jizerou",
  "Rokytnice v Orlických horách",
  "Ronov nad Doubravou",
  "Rosice",
  "Rotava",
  "Roudnice nad Labem",
  "Rousínov",
  "Rovensko pod Troskami",
  "Roztoky",
  "Rožďalovice",
  "Rožmberk nad Vltavou",
  "Rožmitál pod Třemšínem",
  "Rožnov pod Radhoštěm",
  "Rtyně v Podkrkonoší",
  "Rudná",
  "Rudolfov",
  "Rumburk",
  "Rychnov nad Kněžnou",
  "Rychnov u Jablonce nad Nisou",
  "Rychvald",
  "Rýmařov",
  "Řevnice",
  "Říčany",
  "Sadská",
  "Sázava",
  "Seč",
  "Sedlčany",
  "Sedlec-Prčice",
  "Sedlice",
  "Semily",
  "Sezemice",
  "Sezimovo Ústí",
  "Skalná",
  "Skuteč",
  "Slaný",
  "Slatiňany",
  "Slavičín",
  "Slavkov u Brna",
  "Slavonice",
  "Slušovice",
  "Smečno",
  "Smiřice",
  "Smržovka",
  "Soběslav",
  "Sobotka",
  "Sokolov",
  "Solnice",
  "Spálené Poříčí",
  "Staňkov",
  "Staré Město (okres Šumperk)",
  "Staré Město (okres Uherské Hradiště)",
  "Stárkov",
  "Starý Plzenec",
  "Stochov",
  "Stod",
  "Strakonice",
  "Stráž nad Nežárkou",
  "Stráž pod Ralskem",
  "Strážnice",
  "Strážov",
  "Strmilov",
  "Stříbro",
  "Studénka",
  "Suchdol nad Lužnicí",
  "Sušice",
  "Světlá nad Sázavou",
  "Svitavy",
  "Svoboda nad Úpou",
  "Svratka",
  "Šenov",
  "Šlapanice",
  "Šluknov",
  "Špindlerův Mlýn",
  "Šternberk",
  "Štětí",
  "Štíty",
  "Štramberk",
  "Šumperk",
  "Švihov",
  "Tábor",
  "Tachov",
  "Tanvald",
  "Telč",
  "Teplá",
  "Teplice",
  "Teplice nad Metují",
  "Terezín",
  "Tišnov",
  "Toužim",
  "Tovačov",
  "Trhové Sviny",
  "Trhový Štěpánov",
  "Trmice",
  "Trutnov",
  "Třebechovice pod Orebem",
  "Třebenice",
  "Třebíč",
  "Třeboň",
  "Třemošná",
  "Třemošnice",
  "Třešť",
  "Třinec",
  "Turnov",
  "Týn nad Vltavou",
  "Týnec nad Labem",
  "Týnec nad Sázavou",
  "Týniště nad Orlicí",
  "Uherské Hradiště",
  "Uherský Brod",
  "Uherský Ostroh",
  "Uhlířské Janovice",
  "Újezd u Brna",
  "Unhošť",
  "Uničov",
  "Úpice",
  "Úsov",
  "Ústí nad Labem",
  "Ústí nad Orlicí",
  "Úštěk",
  "Úterý",
  "Úvaly",
  "Valašské Klobouky",
  "Valašské Meziříčí",
  "Valtice",
  "Vamberk",
  "Varnsdorf",
  "Vejprty",
  "Velešín",
  "Velká Bíteš",
  "Velká Bystřice",
  "Velké Bílovice",
  "Velké Hamry",
  "Velké Meziříčí",
  "Velké Opatovice",
  "Velké Pavlovice",
  "Velký Šenov",
  "Veltrusy",
  "Velvary",
  "Verneřice",
  "Veselí nad Lužnicí",
  "Veselí nad Moravou",
  "Vidnava",
  "Vimperk",
  "Vítkov",
  "Vizovice",
  "Vlachovo Březí",
  "Vlašim",
  "Vodňany",
  "Volary",
  "Volyně",
  "Votice",
  "Vracov",
  "Vratimov",
  "Vrbno pod Pradědem",
  "Vrchlabí",
  "Vroutek",
  "Vsetín",
  "Všeruby",
  "Výsluní",
  "Vysoké Mýto",
  "Vysoké nad Jizerou",
  "Vysoké Veselí",
  "Vyškov",
  "Vyšší Brod",
  "Zábřeh",
  "Zákupy",
  "Zásmuky",
  "Zbiroh",
  "Zbýšov",
  "Zdice",
  "Zlaté Hory",
  "Zlín",
  "Zliv",
  "Znojmo",
  "Zruč nad Sázavou",
  "Zubří",
  "Žacléř",
  "Žamberk",
  "Žandov",
  "Žatec",
  "Ždánice",
  "Žďár nad Sázavou",
  "Ždírec nad Doubravou",
  "Žebrák",
  "Železná Ruda",
  "Železnice",
  "Železný Brod",
  "Židlochovice",
  "Žirovnice",
  "Žlutice",
  "Žulová",
];

},{}],"node_modules/faker/lib/locales/cz/address/city.js":[function(require,module,exports) {
module["exports"] = [
  "#{city_name}"
];

},{}],"node_modules/faker/lib/locales/cz/address/street.js":[function(require,module,exports) {
module["exports"] = [
  "17. Listopadu",
  "17. Listopadu",
  "28. Pluku",
  "28. Října",
  "28. Října",
  "5. Května",
  "5. Května",
  "5. Máje",
  "7. Května",
  "8. Listopadu",
  "9. Května",
  "Achátová",
  "Adamova",
  "Adamovská",
  "Adélčina",
  "Africká",
  "Akademická",
  "Aksamitova",
  "Akátová",
  "Alabastrová",
  "Albertov",
  "Albrechtická",
  "Albánská",
  "Albíny Hochové",
  "Aldašínská",
  "Alej Českých Exulantů",
  "Aleny Santarové",
  "Aloisovská",
  "Aloisovská",
  "Aloisovská",
  "Altajská",
  "Alšovo Nábř.",
  "Alšovo Nábřeží",
  "Alšovy Sady",
  "Alžírská",
  "Ambrožova",
  "Americká",
  "Ametystová",
  "Amforová",
  "Amortova",
  "Ampérova",
  "Amurská",
  "Anastázova",
  "Anderleho",
  "Andersenova",
  "Andrštova",
  "Andělova",
  "Anenská",
  "Anenské Nám.",
  "Anenské Náměstí",
  "Anežky Malé",
  "Anežská",
  "Angelovova",
  "Anglická",
  "Angolská",
  "Anhaltova",
  "Ankarská",
  "Anny Drabíkové",
  "Anny Letenské",
  "Anny Rybníčkové",
  "Anny Čížkové",
  "Anny Čížkové",
  "Antala Staška",
  "Antonína Hodného",
  "Antonína Čermáka",
  "Antonínská",
  "Anýzová",
  "Apolinářská",
  "Arabská",
  "Aranžérská",
  "Arbesovo Nám.",
  "Arbesovo Náměstí",
  "Archangelská",
  "Archeologická",
  "Archimédova",
  "Archivní",
  "Argentinská",
  "Aristotelova",
  "Arkalycká",
  "Armádní",
  "Armádního Sboru",
  "Armády",
  "Arménská",
  "Arnošta Valenty",
  "Astlova",
  "Athénská",
  "Atletická",
  "Aubrechtové",
  "Augustinova",
  "Augustova",
  "Austova",
  "Aviatická",
  "Axmanova",
  "Azalková",
  "Azuritová",
  "Ašská",
  "Baarova",
  "Babická",
  "Babiččina",
  "Babočková",
  "Babská",
  "Babylonská",
  "Babákova",
  "Bachmačské Nám.",
  "Bachmačské Náměstí",
  "Bachova",
  "Bacháčkova",
  "Badeniho",
  "Badeniho",
  "Bajgarova",
  "Bajkalská",
  "Bajkonurská",
  "Bakalářská",
  "Bakovská",
  "Bakurinova",
  "Balabánova",
  "Balbínova",
  "Banskobystrická",
  "Baranova",
  "Barchovická",
  "Barešova",
  "Barrandova",
  "Barrandovská",
  "Bartolomějská",
  "Bartoňkova",
  "Bartoňova",
  "Bartoškova",
  "Bartoškova",
  "Bartoškova",
  "Bartákova",
  "Bartůňkova",
  "Barunčina",
  "Barvířská",
  "Barákova",
  "Basilejské Nám.",
  "Basilejské Náměstí",
  "Bassova",
  "Batelovská",
  "Batličkova",
  "Bavorovská",
  "Bavorská",
  "Bazalková",
  "Bazovského",
  "Bačetínská",
  "Baňská",
  "Baškirská",
  "Bašteckého",
  "Baštýřská",
  "Bažantní",
  "Beaufortova",
  "Bechlínská",
  "Bechyňova",
  "Bechyňská",
  "Beckovská",
  "Bedlová",
  "Bednářská",
  "Bedrnova",
  "Bedřichovská",
  "Beethovenova",
  "Beldova",
  "Belgická",
  "Bellova",
  "Bellušova",
  "Bendlova",
  "Bendova",
  "Benecká",
  "Benediktská",
  "Benešovská",
  "Benická",
  "Benkova",
  "Benákova",
  "Benátská",
  "Benáčanova",
  "Beníškové",
  "Beranových",
  "Bergerova",
  "Bergmanova",
  "Berkovská",
  "Berlínská",
  "Bermanova",
  "Bernartická",
  "Bernolákova",
  "Berounská",
  "Bertrámová",
  "Berylová",
  "Besední",
  "Beskydská",
  "Betlémská",
  "Betlémské Nám.",
  "Betlémské Náměstí",
  "Betáňská",
  "Bezdrevská",
  "Bezděkovská",
  "Bezinková",
  "Bezová",
  "Bezprašná",
  "Bečovská",
  "Bečvářova",
  "Bečvářská",
  "Bečvářská",
  "Beřkovická",
  "Bešťákova",
  "Bieblova",
  "Binarova",
  "Biskupcova",
  "Biskupská",
  "Biskupský Dvůr",
  "Blachutova",
  "Blahníkova",
  "Blahoslavova",
  "Blanická",
  "Blatenská",
  "Blatnická",
  "Blatovská",
  "Blatská",
  "Blattného",
  "Blažimská",
  "Blažkova",
  "Blažíčkova",
  "Blešnovská",
  "Blodkova",
  "Bludovická",
  "Blériotova",
  "Blšanecká",
  "Bobkova",
  "Bochovská",
  "Bodláková",
  "Bohdalec",
  "Bohdalec",
  "Bohdalecká",
  "Bohdalecká",
  "Bohdanečská",
  "Bohdašínská",
  "Bohnická",
  "Bohrova",
  "Bohumínská",
  "Bohuslava Martinů",
  "Bohuslava Martinů",
  "Bohuslava Ze Švamberka",
  "Bohuslavická",
  "Bohušovická",
  "Bohušovická",
  "Boháčova",
  "Bohúňova",
  "Bojanovická",
  "Bojasova",
  "Bojetická",
  "Boješická",
  "Bojkovická",
  "Bojovská",
  "Bojínková",
  "Bojčenkova",
  "Bolebořská",
  "Boleratická",
  "Boleslavova",
  "Boleslavská",
  "Boletická",
  "Bolevecká",
  "Bolinská",
  "Boloňská",
  "Bolzanova",
  "Bolívarova",
  "Borecká",
  "Borečkova",
  "Borodinská",
  "Borotínská",
  "Borovanská",
  "Borovanského",
  "Borovnická",
  "Borovská",
  "Borová",
  "Borošova",
  "Borská",
  "Borského",
  "Boršov",
  "Boršovská",
  "Borůvková",
  "Boseňská",
  "Botevova",
  "Botičská",
  "Botičská",
  "Boudova",
  "Bousovská",
  "Boučkova",
  "Bouřilova",
  "Boušova",
  "Bozděchova",
  "Boční I",
  "Boční Ii",
  "Bořanovická",
  "Bořetická",
  "Bořetínská",
  "Bořivojova",
  "Bořivojova",
  "Boříkova",
  "Bošická",
  "Bošilecká",
  "Bošínská",
  "Božanovská",
  "Božecká",
  "Božejovická",
  "Boženy Hofmeisterové",
  "Boženy Jandlové",
  "Boženy Němcové",
  "Boženy Němcové",
  "Boženy Stárkové",
  "Božetická",
  "Božetěchova",
  "Božkova",
  "Božkovská",
  "Božídarská",
  "Brabcova",
  "Bramboříková",
  "Branaldova",
  "Brandejsova",
  "Brandejsovo Nám.",
  "Brandejsovo Náměstí",
  "Brandlova",
  "Brandýská",
  "Branická",
  "Branická",
  "Branické Nám.",
  "Branické Náměstí",
  "Branislavova",
  "Branišovská",
  "Branská",
  "Bratislavská",
  "Bratranců Veverkových",
  "Bratří Dohalských",
  "Bratří Venclíků",
  "Bratří Čapků",
  "Bratříkovská",
  "Braunerova",
  "Braunova",
  "Braškovská",
  "Brdecká",
  "Brdičkova",
  "Brdlíkova",
  "Brechtova",
  "Brechtova",
  "Brehmova",
  "Breitcetlova",
  "Brichtova",
  "Brigádnická",
  "Brigádníků",
  "Brixiho",
  "Brodecká",
  "Brodecká",
  "Brodského",
  "Bromova",
  "Bronzová",
  "Broskvoňová",
  "Broumarská",
  "Broumovská",
  "Brozánská",
  "Brožíkova",
  "Brtecká",
  "Brtnická",
  "Brumovická",
  "Brunclíkova",
  "Brunelova",
  "Brunnerova",
  "Bruselská",
  "Brusinková",
  "Bruslařská",
  "Bryksova",
  "Brzická",
  "Brzorádových",
  "Brázdimská",
  "Brňovská",
  "Bubenečská",
  "Bubenečská",
  "Bubenská",
  "Bubenské Nábř.",
  "Bubenské Nábřeží",
  "Bubeníčkova",
  "Bublavská",
  "Bublíkova",
  "Bubnova",
  "Bucharova",
  "Buchlovská",
  "Buchovcova",
  "Budapešťská",
  "Budečská",
  "Budilova",
  "Budilovská",
  "Budovatelská",
  "Budyňská",
  "Budyšínská",
  "Budínova",
  "Budčická",
  "Budějovická",
  "Budějovická",
  "Bukolská",
  "Bukovecká",
  "Bukovinská",
  "Buková",
  "Bulharská",
  "Buližníková",
  "Bulovka",
  "Burdova",
  "Burešova",
  "Burianova",
  "Butovická",
  "Butovická",
  "Buzulucká",
  "Buštěhradská",
  "Bydhošťská",
  "Bydžovská",
  "Bydžovského",
  "Bylanská",
  "Bystrá",
  "Bystřická",
  "Bystřičná",
  "Byšická",
  "Byškovická",
  "Bzenecká",
  "Bártlova",
  "Bášťská",
  "Bílenecké Nám.",
  "Bílenecké Náměstí",
  "Bílinská",
  "Bílkova",
  "Bílkova",
  "Bílovská",
  "Bílá",
  "Bílčická",
  "Bínova",
  "Bítovská",
  "Böhmova",
  "Býšovská",
  "Běchorská",
  "Běchovická",
  "Běhounkova",
  "Bělehradská",
  "Bělehradská",
  "Bělehradská",
  "Bělečská",
  "Bělinského",
  "Bělocerkevská",
  "Bělocká",
  "Bělohorská",
  "Bělohorská",
  "Bělomlýnská",
  "Bělomlýnská",
  "Běloveská",
  "Běluňská",
  "Bělušická",
  "Bělásková",
  "Bělčická",
  "Bělčická",
  "Běžecká",
  "Běžná",
  "Břeclavská",
  "Břehová",
  "Břehová",
  "Břetislavova",
  "Břevnovská",
  "Březanova",
  "Březecká",
  "Březenská",
  "Březinova",
  "Březiněveská",
  "Březnická",
  "Březnová",
  "Březovická",
  "Březovského",
  "Březová",
  "Břečťanová",
  "Břežanská",
  "Břežánecká",
  "Břidlicová",
  "Břidličná",
  "Břízova",
  "Bříšťanská",
  "Cafourkova",
  "Cedrová",
  "Celetná",
  "Celniční",
  "Celsiova",
  "Cementářská",
  "Ceplechova",
  "Cerhenická",
  "Cerhýnská",
  "Cetyňská",
  "Chabařovická",
  "Chaberská",
  "Chabeřická",
  "Chabská",
  "Chalabalova",
  "Chaloupeckého",
  "Chaloupky",
  "Chaltická",
  "Chalupkova",
  "Chalupnická",
  "Chaplinovo Nám.",
  "Chaplinovo Náměstí",
  "Charkovská",
  "Charlese De Gaulla",
  "Charvátova",
  "Chatařská",
  "Chatová",
  "Chebská",
  "Chelčického",
  "Chemická",
  "Chilská",
  "Chittussiho",
  "Chladírenská",
  "Chlebovická",
  "Chlumecká",
  "Chlumecká",
  "Chlumecká",
  "Chlumova",
  "Chlumínská",
  "Chlumčanského",
  "Chlupova",
  "Chlupáčova",
  "Chládkova",
  "Chmelařská",
  "Chmelická",
  "Chmelová",
  "Chmelířova",
  "Choceradská",
  "Choceňská",
  "Chocholouškova",
  "Chocholova",
  "Chodecká",
  "Chodovecké Nám.",
  "Chodovecké Náměstí",
  "Chodovická",
  "Chodovská",
  "Chodovská",
  "Chodovská",
  "Chodská",
  "Cholupická",
  "Chomutovická",
  "Chomutovská",
  "Chopinova",
  "Choratická",
  "Chorošová",
  "Chorušická",
  "Chorvatská",
  "Chotečská",
  "Chotkova",
  "Chotouchovská",
  "Chotouňská",
  "Chotovická",
  "Chotutická",
  "Chotěbuzská",
  "Chotěnovská",
  "Chotětovská",
  "Chotěšovská",
  "Chovatelská",
  "Chrastavská",
  "Chrobolská",
  "Chrpová",
  "Chrudimská",
  "Chráněná",
  "Chrášťanská",
  "Chuchelská",
  "Chudenická",
  "Chudoměřická",
  "Churnajevova",
  "Churáňovská",
  "Chvaletická",
  "Chvaletická",
  "Chvalečská",
  "Chvalkovická",
  "Chvalova",
  "Chvalská",
  "Chvalská",
  "Chvalšovická",
  "Chvatěrubská",
  "Chvojenecká",
  "Chyjická",
  "Chýnická",
  "Chýnovská",
  "Chýňská",
  "Chřibská",
  "Cibulka",
  "Cidlinská",
  "Cigánkova",
  "Cihelná",
  "Cihlářova",
  "Cihlářská",
  "Cimburkova",
  "Ciolkovského",
  "Cirkusová",
  "Cisterciácká",
  "Citolibská",
  "Coriových",
  "Ctiborova",
  "Ctiněveská",
  "Ctiradova",
  "Ctěnická",
  "Cukerní",
  "Cukrovarnická",
  "Cukrovarská",
  "Cuřínova",
  "Cvikovská",
  "Cvičebná",
  "Cvrčkova",
  "Cvrčkova",
  "Cvrčkova",
  "Cyprichova",
  "Cíglerova",
  "Cílkova",
  "Cínovecká",
  "Církova",
  "Církvická",
  "Církvičná",
  "Císařská Louka",
  "Císařský Ostrov",
  "Císařský Ostrov",
  "Císařský Ostrov",
  "Cítovská",
  "Daimlerova",
  "Dalejská",
  "Dalejská",
  "Dalešická",
  "Daliborova",
  "Dalimilova",
  "Dalovická",
  "Dandova",
  "Danielova",
  "Dany Medřické",
  "Darwinova",
  "Dasnická",
  "Davelská",
  "Davidovičova",
  "Davídkova",
  "Davídkova",
  "Dačická",
  "Dačického",
  "Daňkova",
  "Dašická",
  "Daškova",
  "Dehtínská",
  "Dejvická",
  "Dejvická",
  "Demlova",
  "Demoliční",
  "Desenská",
  "Destinnové",
  "Destinové",
  "Devonská",
  "Deylova",
  "Deštná",
  "Dešťová",
  "Diabasová",
  "Diamantová",
  "Diblíkova",
  "Diblíkova",
  "Dienzenhoferovy Sady",
  "Dieselova",
  "Diskařská",
  "Diskařská",
  "Dismanova",
  "Dittrichova",
  "Divadelní",
  "Divadelní",
  "Divecká",
  "Diviznová",
  "Divišova",
  "Divišovská",
  "Divoká Šárka",
  "Divoká Šárka",
  "Dlabačov",
  "Dlabačov",
  "Dlouhá",
  "Dlážděná",
  "Do Blatin",
  "Do Borovin",
  "Do Chuchle",
  "Do Dolnic",
  "Do Dubin",
  "Do Dubče",
  "Do Hlinek",
  "Do Klukovic",
  "Do Kopečka",
  "Do Koutů",
  "Do Koutů",
  "Do Lipan",
  "Do Lipin",
  "Do Lipin",
  "Do Luk",
  "Do Panenek",
  "Do Podkovy",
  "Do Polí",
  "Do Potoků",
  "Do Píšovic",
  "Do Roklí",
  "Do Rybníčků",
  "Do Svépravic",
  "Do Vozovny",
  "Do Vrchu",
  "Do Vršku",
  "Do Zahrádek I",
  "Do Zahrádek I",
  "Do Zahrádek I",
  "Do Zahrádek Ii",
  "Do Zahrádek Ii",
  "Do Zátiší",
  "Do Údolí",
  "Do Újezda",
  "Do Čertous",
  "Do Čtvrti",
  "Do Říčan",
  "Dobevská",
  "Dobnerova",
  "Dobratická",
  "Dobronická",
  "Dobronická",
  "Dobropolská",
  "Dobrovická",
  "Dobrovolného",
  "Dobrovolského",
  "Dobrovského",
  "Dobrovízská",
  "Dobročovická",
  "Dobrošovská",
  "Dobrušská",
  "Dobřanská",
  "Dobřejovická",
  "Dobřenická",
  "Dobřichovská",
  "Dobšická",
  "Dobšínská",
  "Dohalická",
  "Doksanská",
  "Dolanská",
  "Dolejškova",
  "Doležalova",
  "Dolina",
  "Dolnobranská",
  "Dolnobřežanská",
  "Dolnocholupická",
  "Dolnojirčanská",
  "Dolnokrčská",
  "Dolnokřeslická",
  "Dolnomlýnská",
  "Dolnoměcholupská",
  "Dolnoměcholupská",
  "Dolnopočernická",
  "Dolnočernošická",
  "Dolní",
  "Dolní",
  "Dolní Chaloupky",
  "Dolomitová",
  "Dolská",
  "Dolákova",
  "Dolínecká",
  "Dolňanská",
  "Domanovická",
  "Domašínská",
  "Domažlická",
  "Dominova",
  "Dominínská",
  "Domkovská",
  "Domkářská",
  "Domousnická",
  "Donatellova",
  "Donovalská",
  "Donská",
  "Donátova",
  "Donínská",
  "Dopplerova",
  "Dopravní",
  "Dopraváků",
  "Dopraváků",
  "Dostihová",
  "Dostojevského",
  "Doubecká",
  "Doubická",
  "Doubravická",
  "Doubravská",
  "Doubravínova",
  "Doubravčická",
  "Doudlebská",
  "Doudova",
  "Doupovská",
  "Dr. Marodyho",
  "Dr. Zikmunda Wintra",
  "Dr.Zikmunda Wintra",
  "Dragounská",
  "Drahanská",
  "Drahanská",
  "Drahelická",
  "Drahelčická",
  "Drahobejlova",
  "Drahorádova",
  "Drahotická",
  "Drahotínská",
  "Drahovská",
  "Drahovská",
  "Drahoňovského",
  "Draženovská",
  "Draženovská",
  "Dražetická",
  "Dražická",
  "Dražického",
  "Dražického Nám.",
  "Dražického Náměstí",
  "Dražkovská",
  "Dreyerova",
  "Drimlova",
  "Drnovská",
  "Drobná",
  "Drtikolova",
  "Drtinova",
  "Druhanická",
  "Druhého Odboje",
  "Družicová",
  "Družnosti",
  "Družná",
  "Družstevní",
  "Družstevní Ochoz",
  "Družstevní Ochoz",
  "Drážní",
  "Drůbežnická",
  "Drůbežářská",
  "Dubanská",
  "Dubenecká",
  "Dubečská",
  "Dubečské Horky",
  "Dubinská",
  "Dubnická",
  "Dubnova",
  "Dubovická",
  "Dubová",
  "Dubrovnická",
  "Dubská",
  "Duchcovská",
  "Duchoslávka",
  "Dudkova",
  "Dudínská",
  "Duhová",
  "Dukelská",
  "Dukelských Hrdinů",
  "Dunajevského",
  "Dunajská",
  "Dunická",
  "Dunovského",
  "Durychova",
  "Durychova",
  "Dusíkova",
  "Duškova",
  "Duškova",
  "Dušní",
  "Dušní",
  "Dvorecká",
  "Dvorecké Nám.",
  "Dvorecké Náměstí",
  "Dvorní",
  "Dvorská",
  "Dvoudílná",
  "Dvouletky",
  "Dvouramenná",
  "Dvořeckého",
  "Dvořišťská",
  "Dvořákova",
  "Dvořákovo Nábř.",
  "Dvořákovo Nábřeží",
  "Dygrýnova",
  "Dyjská",
  "Dykova",
  "Dářská",
  "Dürerova",
  "Dýšinská",
  "Děbolínská",
  "Dědická",
  "Dědinova",
  "Dědinská",
  "Děkanská",
  "Děkanská Vinice I",
  "Děkanská Vinice Ii",
  "Dělená",
  "Dělnická",
  "Dělostřelecká",
  "Dětenická",
  "Dětská",
  "Dětský Ostrov",
  "Děvínská",
  "Děčínská",
  "Děčínská",
  "Dřevařská",
  "Dřevnická",
  "Dřevná",
  "Dřevčická",
  "Dřínovská",
  "Dřínová",
  "Dřítenská",
  "Eberlova",
  "Ebrova",
  "Edisonova",
  "Edvardova",
  "Egyptská",
  "Eichlerova",
  "Einsteinova",
  "Ejpovická",
  "Ekonomická",
  "Eledrova",
  "Elektrárenská",
  "Eliášova",
  "Eliášova",
  "Elišky Junkové",
  "Elišky Krásnohorské",
  "Elišky Krásnohorské",
  "Elišky Peškové",
  "Elišky Přemyslovny",
  "Ellnerové",
  "Elsnicovo Náměstí",
  "Emilie Hyblerové",
  "Emlerova",
  "Engelmüllerova",
  "Engelova",
  "Engelova",
  "Englerova",
  "Erbenova",
  "Erbenova",
  "Estonská",
  "Etiopská",
  "Euklidova",
  "Evropská",
  "Evropská",
  "Evropská",
  "Evropská",
  "Evropská",
  "Evy Olmerové",
  "Exnárova",
  "F.V.Veselého",
  "Fabiánova",
  "Fabiánská",
  "Fadějevova",
  "Fajmanové",
  "Fajtlova",
  "Falcká",
  "Faltysova",
  "Famfulíkova",
  "Fantova",
  "Faradayova",
  "Farkašova",
  "Farní",
  "Farská",
  "Farského",
  "Fastrova",
  "Federova",
  "Fejfarova",
  "Felberova",
  "Fenyklová",
  "Fetrovská",
  "Feřtekova",
  "Fialková",
  "Fibichova",
  "Fikerova",
  "Filipova",
  "Filipovského",
  "Filipíny Welserové",
  "Fillova",
  "Filmařská",
  "Filosofská",
  "Fingerova",
  "Finkovská",
  "Finská",
  "Firkušného",
  "Fischlova",
  "Fišerova",
  "Flemingovo Nám.",
  "Flemingovo Náměstí",
  "Flájská",
  "Flöglova",
  "Foerstrova",
  "Folmavská",
  "Formanská",
  "Formánkova",
  "Fořtova",
  "Fragnerova",
  "Francouzská",
  "Francouzská",
  "Francouzská",
  "Františka Diviše",
  "Františka Jansy",
  "Františka Kadlece",
  "Františka Křížka",
  "Františka Černého",
  "Františka Červeného",
  "Františka Šimáčka",
  "Františkova",
  "Franty Kocourka",
  "Frančíkova",
  "Freiwaldova",
  "Freyova",
  "Frimlova",
  "Fričova",
  "Froncova",
  "Frostova",
  "Froňkova",
  "Frydrychova",
  "Fryčovická",
  "Fráni Šrámka",
  "Frézařská",
  "Frýdecká",
  "Frýdlantská",
  "Fuchsova",
  "Fügnerovo Nám.",
  "Fügnerovo Náměstí",
  "Gabinova",
  "Gabčíkova",
  "Gagarinova",
  "Galandova",
  "Galileova",
  "Gallašova",
  "Galvaniho",
  "Gaussova",
  "Gdaňská",
  "Generála Janouška",
  "Generála Mejstříka",
  "Generála Píky",
  "Generála Šišky",
  "Generála Šišky",
  "Gensovská",
  "Geologická",
  "Gercenova",
  "Gerstnerova",
  "Ginzova",
  "Glazunovova",
  "Glinkova",
  "Glowackého",
  "Goetheho",
  "Gogolova",
  "Golfová",
  "Gollova",
  "Golčova",
  "Gončarenkova",
  "Gončarenkova",
  "Gorazdova",
  "Gotthardská",
  "Goyova",
  "Gočárova",
  "Grafická",
  "Grafitová",
  "Grammova",
  "Granátová",
  "Gregorova",
  "Grussova",
  "Gruzínská",
  "Gutfreundova",
  "Gutova",
  "Gymnasijní",
  "Gymnastická",
  "Habartická",
  "Habartická",
  "Habartovská",
  "Haberfeldova",
  "Habrovská",
  "Habrová",
  "Habřická",
  "Habřická",
  "Hackerova",
  "Hadovitá",
  "Hadravská",
  "Hajní",
  "Hakenova",
  "Halasova",
  "Halenkovská",
  "Halštatská",
  "Hamerská",
  "Hamplova",
  "Hamrová",
  "Hamsíkova",
  "Hankova",
  "Hanouškova",
  "Hanusova",
  "Hanušova",
  "Hanzelkova",
  "Hanzlíkova",
  "Harantova",
  "Harcovská",
  "Harlacherova",
  "Harmonická",
  "Harrachovská",
  "Hartenberská",
  "Hasičská",
  "Hasičů",
  "Hasova",
  "Hastrmanská",
  "Haunerova",
  "Hauptova",
  "Hausmannova",
  "Havanská",
  "Havelská",
  "Havelská Ulička",
  "Havlovického",
  "Havlovického",
  "Havlovská",
  "Havlínova",
  "Havlíčkova",
  "Havlíčkovo Nám.",
  "Havlíčkovo Náměstí",
  "Havlíčkovy Sady",
  "Havlůjové",
  "Havlůjové",
  "Havranická",
  "Havraní",
  "Havránkova",
  "Havířovská",
  "Havířská",
  "Haškova",
  "Hašlerova",
  "Haštalská",
  "Haštalské Nám.",
  "Haštalské Náměstí",
  "Heckelova",
  "Heineho",
  "Heinemannova",
  "Hejnická",
  "Hejnická",
  "Hejplíkova",
  "Hejtmanská",
  "Hejtmánkova",
  "Hekova",
  "Hekrova",
  "Heldova",
  "Heleny Malířové",
  "Hellichova",
  "Helmova",
  "Helsinská",
  "Helénská",
  "Hennerova",
  "Heranova",
  "Herbenova",
  "Herdovská",
  "Herlíkovická",
  "Hermanická",
  "Hermelínská",
  "Hermíny Týrlové",
  "Heroldovy Sady",
  "Herrmannova",
  "Herrova",
  "Hertzova",
  "Herálecká I",
  "Herálecká Ii",
  "Herálecká Iii",
  "Herálecká Iv",
  "Herčíkova",
  "Hevlínská",
  "Heydukova",
  "Heyrovského Nám.",
  "Heyrovského Nám.",
  "Heyrovského Náměstí",
  "Heyrovského Náměstí",
  "Hečkova",
  "Heřmanova",
  "Heřmánková",
  "Hildy Čihákové",
  "Hillebrantova",
  "Hilmarova",
  "Hiršlova",
  "Hlavatého",
  "Hlavenecká",
  "Hlavní",
  "Hlavova",
  "Hlaváčkova",
  "Hlaváčova",
  "Hlaďova",
  "Hledíková",
  "Hlinská",
  "Hlivická",
  "Hlohová",
  "Hloubětínská",
  "Hloubětínská",
  "Hlubocká",
  "Hluboká",
  "Hlubočepská",
  "Hlušičkova",
  "Hládkov",
  "Hládkov",
  "Hlávkova",
  "Hněvkovská",
  "Hněvkovského",
  "Hnězdenská",
  "Hoblířská",
  "Hodkovická",
  "Hodkovská",
  "Hodonínská",
  "Hodčina",
  "Hodějovská",
  "Hodějovská",
  "Hoděšovická",
  "Hofbauerova",
  "Hoffmannova",
  "Hokejová",
  "Hokešovo Nám.",
  "Hokešovo Náměstí",
  "Holandská",
  "Holekova",
  "Holenická",
  "Holenská",
  "Holečkova",
  "Holečkova",
  "Holešovické Nábřeží",
  "Holešovický Přístav",
  "Holická",
  "Hollarovo Nám.",
  "Hollarovo Náměstí",
  "Holohlavská",
  "Holotínská",
  "Holoubkova",
  "Holoubkovská",
  "Holubická",
  "Holubinková",
  "Holubkova",
  "Holubova",
  "Holubí",
  "Holušická",
  "Holyňská",
  "Holátova",
  "Holínská",
  "Holýšovská",
  "Holčovická",
  "Holšická",
  "Homolová",
  "Homérova",
  "Honzíkova",
  "Hornická",
  "Hornocholupická",
  "Hornocholupická",
  "Hornofova",
  "Hornokrčská",
  "Hornokřeslická",
  "Hornomlýnská",
  "Hornoměcholupská",
  "Hornoměcholupská",
  "Hornopočernická",
  "Horní",
  "Horní Chaloupky",
  "Horní Hrdlořezská",
  "Horní Stromky",
  "Horníčkova",
  "Horolezecká",
  "Horoměřická",
  "Horoměřická",
  "Horoušanská",
  "Horoušanská",
  "Horovo Nám.",
  "Horovo Náměstí",
  "Horská",
  "Horusická",
  "Horymírovo Nám.",
  "Horymírovo Náměstí",
  "Horákova",
  "Horáčkova",
  "Horčičkova",
  "Horňátecká",
  "Horšovská",
  "Horšovská",
  "Hospodářská",
  "Hostavická",
  "Hostavická",
  "Hostinského",
  "Hostivařská",
  "Hostivařské Nám.",
  "Hostivařské Náměstí",
  "Hostivická",
  "Hostivítova",
  "Hostišovská",
  "Hostouňská",
  "Hostošova",
  "Hostýnská",
  "Hostýnská",
  "Houbařská",
  "Houdova",
  "Hovorčovická",
  "Hořanská",
  "Hořejší Náb.",
  "Hořejší Nábřeží",
  "Hořejšího",
  "Hořelická",
  "Hořická",
  "Hořovského",
  "Hořínecká",
  "Hoškova",
  "Hoštická",
  "Hošťálkova",
  "Hrabačovská",
  "Hrabákova",
  "Hrachovská",
  "Hrad I. Nádvoří",
  "Hrad Ii. Nádvoří",
  "Hrad Iii. Nádvoří",
  "Hradební",
  "Hradecká",
  "Hradeckých",
  "Hradečkova",
  "Hradešínská",
  "Hradčanské Nám.",
  "Hradčanské Náměstí",
  "Hraniční",
  "Hrazanská",
  "Hrazanská",
  "Hrdinova",
  "Hrdličkova",
  "Hrdlořezská",
  "Hrdoňovická",
  "Hroncova",
  "Hronovská",
  "Hronětická",
  "Hrozenkovská",
  "Hroznová",
  "Hrozného",
  "Hrubého",
  "Hrubínova",
  "Hrudičkova",
  "Hrusická",
  "Hruškovská",
  "Hruškovská",
  "Hrušovanské Nám.",
  "Hrušovanské Náměstí",
  "Hrušovická",
  "Hrušovská",
  "Hrušínského",
  "Hrušňová",
  "Hrušňová",
  "Hrádková",
  "Hráského",
  "Huberova",
  "Hubičkova",
  "Hubáčkova",
  "Hudcova",
  "Hudební",
  "Hudečkova",
  "Hudečkova",
  "Hugo Haase",
  "Hulanova",
  "Hulická",
  "Humenecká",
  "Humpolecká",
  "Huntířovská",
  "Hurbanova",
  "Husařská",
  "Husinecká",
  "Husitská",
  "Husitská",
  "Husníkova",
  "Husova",
  "Husovo Nám.",
  "Husovo Náměstí",
  "Hustopečská",
  "Hutnická",
  "Huťská",
  "Hviezdoslavova",
  "Hviezdoslavova",
  "Hvozdecká",
  "Hvozdnická",
  "Hvozdíková",
  "Hvožďanská",
  "Hvězdonická",
  "Hvězdova",
  "Hvězdářská",
  "Hyacintová",
  "Hybernská",
  "Hybešova",
  "Hynaisova",
  "Hypšmanova",
  "Hábova",
  "Hájecká",
  "Hájenská",
  "Hájkova",
  "Hájovna U Podjezdu",
  "Hájovna V Šárce",
  "Hájová",
  "Hájíčkova",
  "Hájčí",
  "Hákova",
  "Hálkova",
  "Hálova",
  "Hálův Statek",
  "Högerova",
  "Hübnerové",
  "Hřbitovní",
  "Hřebenová",
  "Hřebíkova",
  "Hřenská",
  "Hřibojedská",
  "Hřibská",
  "Hříbková",
  "Hřídelecká",
  "Hůlkova",
  "Hůlkova",
  "Hůrská",
  "Ibsenova",
  "Imrychova",
  "Ingrišova",
  "Internacionální",
  "Irkutská",
  "Irská",
  "Irvingova",
  "Italská",
  "Italská",
  "Italská",
  "Ivančická",
  "Izraelská",
  "Izraelská",
  "Jabkenická",
  "Jablonecká",
  "Jablonecká",
  "Jablonského",
  "Jabloňová",
  "Jablunkovská",
  "Jagellonská",
  "Jagellonská",
  "Jahodnická",
  "Jahodová",
  "Jakobiho",
  "Jakubovská",
  "Jakubská",
  "Jakutská",
  "Jalodvorská",
  "Jalovcová",
  "Jaltská",
  "Jamborova",
  "Jamská",
  "Jana Bílka",
  "Jana Jindřicha",
  "Jana Karafiáta",
  "Jana Kašpara",
  "Jana Marka",
  "Jana Masaryka",
  "Jana Ouřady",
  "Jana Přibíka",
  "Jana Růžičky",
  "Jana Srba",
  "Jana Zajíce",
  "Jana Čerstvého",
  "Jana Želivského",
  "Janderova",
  "Jandova",
  "Janečkova",
  "Jankovcova",
  "Jankovská",
  "Janouchova",
  "Janouškova",
  "Janovická",
  "Janovská",
  "Janovského",
  "Jansenova",
  "Janského",
  "Jansova",
  "Jantarová",
  "Janákova",
  "Janáčkovo Nábř.",
  "Janáčkovo Nábř.",
  "Janáčkovo Nábřeží",
  "Janáčkovo Nábřeží",
  "Janýrova",
  "Jančova",
  "Jarešova",
  "Jarkovská",
  "Jarmily Novotné",
  "Jarní",
  "Jarníkova",
  "Jaromíra Jindry",
  "Jaromíra Vejvody",
  "Jaromírova",
  "Jaroměřská",
  "Jaroslava Foglara",
  "Jaroslava Švehly",
  "Jaroslavická",
  "Jasanová",
  "Jaselská",
  "Jaselská",
  "Jasenická",
  "Jasenná",
  "Jasmínová",
  "Jasná I",
  "Jasná Ii",
  "Jaspisová",
  "Jateční",
  "Jaurisova",
  "Jaurisova",
  "Javorenská",
  "Javornická",
  "Javorová",
  "Javorská",
  "Javořická",
  "Jašíkova",
  "Jažlovická",
  "Jedlová",
  "Jednostranná",
  "Jednostranná",
  "Jednotného Zemědělského Družstva",
  "Jednořadá",
  "Jelenovská",
  "Jelení",
  "Jelínkova",
  "Jemenská",
  "Jemnická",
  "Jenerálka",
  "Jenečská",
  "Jenišovská",
  "Jenská",
  "Jeníkovická",
  "Jenštejnská",
  "Jeremenkova",
  "Jeremenkova",
  "Jeremenkova",
  "Jeremiášova",
  "Jeremiášova",
  "Jerevanská",
  "Jeronýmova",
  "Jeruzalémská",
  "Jesenická",
  "Jeseniova",
  "Jestřebická",
  "Jetelová",
  "Jetřichovická",
  "Jevanská",
  "Jezdecká",
  "Jezdovická",
  "Jezerní",
  "Jezerská",
  "Jezevčí",
  "Ječná",
  "Jeřabinová",
  "Jeřabinová",
  "Jeřická",
  "Jeřábkova",
  "Jeřábnická",
  "Jeřábová",
  "Ješetická",
  "Ještědská",
  "Ježdíkova",
  "Ježkova",
  "Ježovická",
  "Ježovická",
  "Ježovská",
  "Jihlavská",
  "Jihovýchodní I",
  "Jihovýchodní Ii",
  "Jihovýchodní Iii",
  "Jihovýchodní Iv",
  "Jihovýchodní Ix",
  "Jihovýchodní V",
  "Jihovýchodní Vi",
  "Jihovýchodní Vii",
  "Jihovýchodní Viii",
  "Jihozápadní I",
  "Jihozápadní Ii",
  "Jihozápadní Iii",
  "Jihozápadní Iv",
  "Jihozápadní V",
  "Jihozápadní Vi",
  "Jihočeská",
  "Jilemnická",
  "Jilemnická",
  "Jilemnického",
  "Jilmová",
  "Jilská",
  "Jindrova",
  "Jindřicha Jindřicha",
  "Jindřicha Plachty",
  "Jindřichova",
  "Jindřišská",
  "Jinolická",
  "Jinonická",
  "Jinonická",
  "Jinočanská",
  "Jirenská",
  "Jirečkova",
  "Jirkovská",
  "Jirsákova",
  "Jirsíkova",
  "Jiránkova",
  "Jiráskovo Nám.",
  "Jiráskovo Náměstí",
  "Jirčanská",
  "Jiskrova",
  "Jistebnická",
  "Jitkovská",
  "Jitravská",
  "Jitravská",
  "Jitrocelová",
  "Jitřní",
  "Jivenská",
  "Jizerská",
  "Jičínská",
  "Jičínská",
  "Jiřická",
  "Jiřinková",
  "Jiřiny Štěpničkové",
  "Jiřská",
  "Jiřího Jandy",
  "Jiřího Mašína",
  "Jiřího Ze Vtelna",
  "Jiříčkova",
  "Jiříčkové",
  "Jižní I",
  "Jižní Ii",
  "Jižní Iii",
  "Jižní Iv",
  "Jižní Ix",
  "Jižní Nám.",
  "Jižní Náměstí",
  "Jižní Spojka",
  "Jižní Spojka",
  "Jižní Spojka",
  "Jižní Spojka",
  "Jižní V",
  "Jižní Vi",
  "Jižní Vii",
  "Jižní Viii",
  "Jižní Xi",
  "Jižní Xii",
  "Jižní Xiii",
  "Jižní Xiv",
  "Jižní Xv",
  "Jižní Xvi",
  "Jižní Xvii",
  "Johanitská",
  "Jordana Jovkova",
  "Jordánská",
  "Josefa Bíbrdlíka",
  "Josefa Houdka",
  "Josefa Houdka",
  "Josefa Kočího",
  "Josefa Němce",
  "Josefa Vašíčka",
  "Josefa Šimůnka",
  "Josefská",
  "José Martího",
  "Juarézova",
  "Jugoslávská",
  "Jugoslávských Partyzánů",
  "Jugoslávských Partyzánů",
  "Jungmannova",
  "Jungmannova",
  "Jungmannovo Náměstí",
  "Junácká",
  "Jupiterova",
  "Jurkovičova",
  "Juárezova",
  "Jzd",
  "Jáchymova",
  "Jáchymova",
  "Jáchymovská",
  "Jánošíkova",
  "Jánská",
  "Jánský Vršek",
  "Jíchova",
  "Jílkova",
  "Jílovická",
  "Jílovišťská",
  "Jílovská",
  "Jílovská",
  "Jílová",
  "Jírova",
  "Jírovcovo Nám.",
  "Jírovcovo Náměstí",
  "Jívanská",
  "Jívová",
  "K Austisu",
  "K Avii",
  "K Barrandovu",
  "K Bateriím",
  "K Bažantnici",
  "K Belvederu",
  "K Berance",
  "K Beranovu",
  "K Berounce",
  "K Beránku",
  "K Betonárně",
  "K Betáni",
  "K Blatovu",
  "K Bohnicím",
  "K Borovíčku",
  "K Botiči",
  "K Brance",
  "K Brnkám",
  "K Brusce",
  "K Brusce",
  "K Brůdku",
  "K Bílému Vrchu",
  "K Běchovicům",
  "K Březince",
  "K Březiněvsi",
  "K Břečkám",
  "K Celinám",
  "K Cementárně",
  "K Chabům",
  "K Chabům",
  "K Chaloupce",
  "K Chaloupkám",
  "K Chatám",
  "K Chmelnici",
  "K Chumberku",
  "K Cihelně",
  "K Cikánce",
  "K Cíli",
  "K Dalejím",
  "K Dobré Vodě",
  "K Dobré Vodě",
  "K Dolům",
  "K Drahani",
  "K Drahani",
  "K Drazdům",
  "K Drsnici",
  "K Dubinám",
  "K Dubovému Mlýnu",
  "K Dubu",
  "K Dubči",
  "K Dálnici",
  "K Dálnici",
  "K Dýmači",
  "K Děrám",
  "K Fantovu Mlýnu",
  "K Farkám",
  "K Fialce",
  "K Fišpance",
  "K Habrovce",
  "K Habru",
  "K Haltýři",
  "K Havlínu",
  "K Hluboké Cestě",
  "K Hlásku",
  "K Holyni",
  "K Holému Vrchu",
  "K Holému Vrchu",
  "K Homolce",
  "K Horkám",
  "K Horkám",
  "K Horkám",
  "K Horním Počernicím",
  "K Horoměřicům",
  "K Hořavce",
  "K Hradišti",
  "K Hrnčířům",
  "K Hrušovu",
  "K Hrušovu",
  "K Hrázi",
  "K Hutím",
  "K Hutím",
  "K Hutím",
  "K Hádku",
  "K Háječku",
  "K Háji",
  "K Háji",
  "K Hájku",
  "K Hájovně",
  "K Hájovně",
  "K Hájovně",
  "K Hájům",
  "K Hárunce",
  "K Interně",
  "K Jalovce",
  "K Jasánkám",
  "K Jelenu",
  "K Jelenám",
  "K Jezeru",
  "K Jezeru",
  "K Jezu",
  "K Jezírku",
  "K Jihu",
  "K Jihu",
  "K Jinočanům",
  "K Jinočanům",
  "K Jižnímu Městu",
  "K Juliáně",
  "K Jízdárně",
  "K Labeškám",
  "K Ladům",
  "K Lahovičkám",
  "K Lahovské",
  "K Lažance",
  "K Lesoparku",
  "K Lesu",
  "K Lesu",
  "K Lesíku",
  "K Letišti",
  "K Letňanům",
  "K Libuši",
  "K Lindě",
  "K Lipanům",
  "K Lipinám",
  "K Lipám",
  "K Lochkovu",
  "K Lomu",
  "K Louži",
  "K Luhu",
  "K Lukám",
  "K Lučinám",
  "K Lužinám",
  "K Ládví",
  "K Ládví",
  "K Lánu",
  "K Lávce",
  "K Lázním",
  "K Lípě",
  "K Markétě",
  "K Matěji",
  "K Mejtu",
  "K Metru",
  "K Metru",
  "K Milíčovu",
  "K Mlíčníku",
  "K Mlýnu",
  "K Modřanskému Nádraží",
  "K Mohyle",
  "K Moravině",
  "K Moravině",
  "K Mostku",
  "K Mostu",
  "K Motelu",
  "K Motolu",
  "K Mírám",
  "K Měcholupům",
  "K Měchurce",
  "K Nedvězí",
  "K Netlukám",
  "K Noskovně",
  "K Nouzovu",
  "K Nové Vsi",
  "K Nové Vsi",
  "K Nové Škole",
  "K Novému Dvoru",
  "K Novému Hradu",
  "K Novému Sídlišti",
  "K Novým Domkům",
  "K Nádraží",
  "K Nádrži",
  "K Náhonu",
  "K Náměstí",
  "K Náplavce",
  "K Náplavce",
  "K Návrší",
  "K Návrší",
  "K Návsi",
  "K Obci",
  "K Obecním Hájovnám",
  "K Oboře",
  "K Obsinám",
  "K Ochozu",
  "K Ohradě",
  "K Okrouhlíku",
  "K Olympiku",
  "K Opatřilce",
  "K Opatřilce",
  "K Oplocení",
  "K Orionce",
  "K Osmidomkům",
  "K Otočce",
  "K Ovčínu",
  "K Ovčínu",
  "K Padesátníku",
  "K Palečku",
  "K Panenkám",
  "K Parku",
  "K Pastvinám",
  "K Pazderkám",
  "K Pekárně",
  "K Peluňku",
  "K Petrově Komoře",
  "K Pitkovicům",
  "K Podchodu",
  "K Podjezdu",
  "K Podjezdu",
  "K Polím",
  "K Pomníku",
  "K Popelce",
  "K Popelce",
  "K Potoku",
  "K Poště",
  "K Pramenu",
  "K Prelátům",
  "K Prádelně",
  "K Průhonicům",
  "K Průhonu",
  "K Průmstavu",
  "K Pyramidce",
  "K Pérovně",
  "K Pískovně",
  "K Písnici",
  "K Přehradám",
  "K Přejezdu",
  "K Přístavišti",
  "K Přívozu",
  "K Radhošti",
  "K Radonicům",
  "K Radotínu",
  "K Radotínu",
  "K Remízku",
  "K Rokli",
  "K Rokytce",
  "K Rotundě",
  "K Rovinám",
  "K Rozkoši",
  "K Rozmezí",
  "K Roztokům",
  "K Rozvodně",
  "K Rukavičkárně",
  "K Rybníku",
  "K Rybníčku",
  "K Rybníčkům",
  "K Rybárně",
  "K Ryšánce",
  "K Ryšánce",
  "K Sadu",
  "K Safině",
  "K Samoobsluze",
  "K Samotě",
  "K Sedlišti",
  "K Sibřině",
  "K Sokolovně",
  "K Sopce",
  "K Sopce",
  "K Starému Bubenči",
  "K Starému Lomu",
  "K Stavebninám",
  "K Sukovu",
  "K Sádkám",
  "K Sádkám",
  "K Sídlišti",
  "K Sídlišti",
  "K Teplárně",
  "K Topolům",
  "K Topírně",
  "K Transformátoru",
  "K Trati",
  "K Trninám",
  "K Trnkám",
  "K Trníčku",
  "K Truhlářce",
  "K Tržišti",
  "K Tuchoměřicům",
  "K Táboru",
  "K Třebonicům",
  "K Třešňovce",
  "K Tůni",
  "K Ubytovnám",
  "K Uhříněvsi",
  "K Uhříněvsi",
  "K Učilišti",
  "K Valu",
  "K Vejvoďáku",
  "K Velké Ohradě",
  "K Velké Ohradě",
  "K Velkému Dvoru",
  "K Verneráku",
  "K Viaduktu",
  "K Vidouli",
  "K Vilkám",
  "K Vinici",
  "K Vinicím",
  "K Vinoři",
  "K Vizerce",
  "K Višňovce",
  "K Višňovce",
  "K Višňovému Sadu",
  "K Vltavě",
  "K Vlásence",
  "K Vodici",
  "K Vodojemu",
  "K Vodárně",
  "K Vodě",
  "K Vrbičkám",
  "K Vrbě",
  "K Vrcholu",
  "K Vrtilce",
  "K Vršíčku",
  "K Vyhlídce",
  "K Vysoké Cestě",
  "K Vystrkovu",
  "K Václavce",
  "K Vápence",
  "K Váze",
  "K Výboru",
  "K Výtopně",
  "K Výzkumným Ústavům",
  "K Větrolamu",
  "K Zabrkům",
  "K Zadní Kopanině",
  "K Zadní Kopanině",
  "K Zahradnictví",
  "K Zahradám",
  "K Zahrádkám",
  "K Zastávce",
  "K Zatáčce",
  "K Zelené Louce",
  "K Zeleným Domkům",
  "K Zelenči",
  "K Zámku",
  "K Zátiší",
  "K Závodišti",
  "K Závorám",
  "K Závěrce",
  "K Závětinám",
  "K Údolí",
  "K Údolí Hvězd",
  "K Újezdu",
  "K Ústavu",
  "K Úvozu",
  "K Černošicím",
  "K Červenému Dvoru",
  "K Červenému Dvoru",
  "K Červenému Dvoru",
  "K Červenému Vrchu",
  "K Čestlicům",
  "K Čihadlům",
  "K Ďáblicům",
  "K Řece",
  "K Řeporyjím",
  "K Řeporyjím",
  "K Říčanům",
  "K Šafránce",
  "K Šafránce",
  "K Šancím",
  "K Šeberovu",
  "K Šeberáku",
  "K Šedivce",
  "K Šubrtce",
  "K Železnici",
  "K Žižkovu",
  "Kabeláčova",
  "Kabešova",
  "Kabátové",
  "Kadaňská",
  "Kadeřávkovská",
  "Kafkova",
  "Kahovská",
  "Kaizlovy Sady",
  "Kakosova",
  "Kakostová",
  "Kalabisova",
  "Kalašova",
  "Kalinová",
  "Kališnická",
  "Kališťská",
  "Kalská",
  "Kalvodova",
  "Kamelova",
  "Kamencová",
  "Kamenická",
  "Kamenická",
  "Kamenitá",
  "Kamenná",
  "Kameníků",
  "Kamerunská",
  "Kampanova",
  "Kamzíková",
  "Kamýcká",
  "Kamýcká",
  "Kamýcká",
  "Kanadská",
  "Kandertova",
  "Kanovnická",
  "Kapitulská",
  "Kaplanova",
  "Kaplická",
  "Kapraďová",
  "Kaprova",
  "Kaprova",
  "Kapucínská",
  "Karafiátová",
  "Karasova",
  "Karasovská",
  "Kardausova",
  "Kardašovská",
  "Kardašovská",
  "Karenova",
  "Karfíkova",
  "Karla Engliše",
  "Karla Hlaváčka",
  "Karla Kryla",
  "Karla Křížka",
  "Karla Michala",
  "Karla Rachůnka",
  "Karla Tomáše",
  "Karla Zicha",
  "Karla Černého",
  "Karlická",
  "Karlova",
  "Karlovarská",
  "Karlovarská",
  "Karlovická",
  "Karlovo Nám.",
  "Karlovo Nám.",
  "Karlovo Náměstí",
  "Karlovo Náměstí",
  "Karlínské Nám.",
  "Karlínské Náměstí",
  "Karlštejnská",
  "Karmelitská",
  "Karolinská",
  "Karoliny Světlé",
  "Karpatská",
  "Kartounářů",
  "Kartouzská",
  "Kasalická",
  "Kateřinská",
  "Kateřinské Nám.",
  "Kateřinské Náměstí",
  "Katovická",
  "Katusická",
  "Kavkazská",
  "Kazaňská",
  "Kazašská",
  "Kazimírova",
  "Kaznějovská",
  "Kazín",
  "Kazínská",
  "Kačerovská",
  "Kačínská",
  "Kaňkova",
  "Kaňkovského",
  "Kaňovská",
  "Kašeho",
  "Kaškova",
  "Kašovická",
  "Kašparovo Nám.",
  "Kašparovo Náměstí",
  "Kašperská",
  "Kaštanová",
  "Kbelská",
  "Kbelská",
  "Kbelská",
  "Kbelská",
  "Kdoulová",
  "Ke Březině",
  "Ke Břvům",
  "Ke Cvičišti",
  "Ke Dračkám",
  "Ke Dráze",
  "Ke Dvoru",
  "Ke Džbánu",
  "Ke Garážím",
  "Ke Golfu",
  "Ke Goniu",
  "Ke Hlásce",
  "Ke Hrádku",
  "Ke Hrázi",
  "Ke Hrázi",
  "Ke Hřbitovu",
  "Ke Hřišti",
  "Ke Kablu",
  "Ke Kablu",
  "Ke Kalvárii",
  "Ke Kaménce",
  "Ke Kamínce",
  "Ke Kamýku",
  "Ke Kapličce",
  "Ke Kapslovně",
  "Ke Karlovu",
  "Ke Kateřinkám",
  "Ke Kazínu",
  "Ke Kašně",
  "Ke Kinu",
  "Ke Kladivům",
  "Ke Klimentce",
  "Ke Klubovně",
  "Ke Klínku",
  "Ke Klínku",
  "Ke Klíčovu",
  "Ke Koh-I-Nooru",
  "Ke Kolodějskému Zámku",
  "Ke Kolodějům",
  "Ke Kolonii",
  "Ke Konstruktivě",
  "Ke Kopečku",
  "Ke Korunce",
  "Ke Kostelu",
  "Ke Kostelíčku",
  "Ke Kotlářce",
  "Ke Koulce",
  "Ke Koupališti",
  "Ke Kovárně",
  "Ke Kozím Hřbetům",
  "Ke Královicům",
  "Ke Krči",
  "Ke Krčské Stráni",
  "Ke Kulišce",
  "Ke Kulturnímu Domu",
  "Ke Kurtům",
  "Ke Kyjovu",
  "Ke Kálku",
  "Ke Křížku",
  "Ke Křížkám",
  "Ke Lhoteckému Lesu",
  "Ke Mlýnku",
  "Ke Mlýnu",
  "Ke Mlýnu",
  "Ke Schodům",
  "Ke Skalce",
  "Ke Skalkám",
  "Ke Skladům",
  "Ke Sklárně",
  "Ke Skále",
  "Ke Slatinám",
  "Ke Slivenci",
  "Ke Smrčině",
  "Ke Smíchovu",
  "Ke Smíchovu",
  "Ke Splávku",
  "Ke Spofě",
  "Ke Spořilovu",
  "Ke Spálence",
  "Ke Srážku",
  "Ke Stadionu",
  "Ke Stanici",
  "Ke Starému Hřišti",
  "Ke Starým Rybníkům",
  "Ke Stinkovskému Rybníku",
  "Ke Strašnické",
  "Ke Strouze",
  "Ke Stráni",
  "Ke Strži",
  "Ke Studni",
  "Ke Studni",
  "Ke Studánce",
  "Ke Stupicím",
  "Ke Stáčírně",
  "Ke Stírce",
  "Ke Střelnici",
  "Ke Střelnici",
  "Ke Sv. Izidoru",
  "Ke Třem Mostům",
  "Ke Xaverovu",
  "Ke Zbraslavi",
  "Ke Zbrojnici",
  "Ke Zbuzanům",
  "Ke Zdibům",
  "Ke Zdravotnímu Středisku",
  "Ke Zděři",
  "Ke Zlatému Kopci",
  "Ke Zličínu",
  "Ke Znaku",
  "Ke Zvonici",
  "Ke Zvoničce",
  "Ke Školce",
  "Ke Škole",
  "Ke Šmejkalu",
  "Ke Štvanici",
  "Ke Štítu",
  "Ke Štěpcům",
  "Ke Štěrkovně",
  "Ke Švestkovce",
  "Kecova",
  "Kejhova",
  "Kejnická",
  "Kellnerova",
  "Keltská",
  "Keltů",
  "Kelvinova",
  "Kemrova",
  "Keplerova",
  "Keplerova",
  "Keramická",
  "Kesnerka",
  "Kestřanská",
  "Keteňská",
  "Kettnerova",
  "Keřová",
  "Khodlova",
  "Kischova",
  "Kišiněvská",
  "Kladenská",
  "Kladenská",
  "Kladenská",
  "Kladinovská",
  "Kladrubská",
  "Kladská",
  "Klamovka",
  "Klapkova",
  "Klapálkova",
  "Klatovská",
  "Klausova",
  "Klecandova",
  "Klecanská",
  "Klenečská",
  "Klenovická",
  "Klenovská",
  "Klenová",
  "Klečkova",
  "Klečákova",
  "Klešická",
  "Klicperova",
  "Klidná",
  "Klihařská",
  "Klikatá",
  "Klikatá",
  "Klimentská",
  "Klivarova",
  "Kloboukova",
  "Kloboučnická",
  "Kloknerova",
  "Klokotská",
  "Klostermannova",
  "Klouzková",
  "Kludských",
  "Klukovická",
  "Klánova",
  "Klánova",
  "Klánova",
  "Klánovická",
  "Klánovická",
  "Klárov",
  "Klášterecká",
  "Klášterská",
  "Klášterského",
  "Klímova",
  "Klímova",
  "Klínecká",
  "Klínovecká",
  "Klínová",
  "Klírova",
  "Klíčanská",
  "Klíčova",
  "Klíčovská",
  "Klíčovská",
  "Kmochova",
  "Knínická",
  "Kněževeská",
  "Kněžická",
  "Koberkova",
  "Kobrova",
  "Kobyliská",
  "Kobyliské Nám.",
  "Kobyliské Náměstí",
  "Kobylákova",
  "Kochanova",
  "Kocianova",
  "Koclířova",
  "Kocourova",
  "Kodaňská",
  "Kodicilova",
  "Kodymova",
  "Kohoutovská",
  "Kohoutových",
  "Kojetická",
  "Kojická",
  "Kokořínská",
  "Kolbenova",
  "Kolbenova",
  "Kolbenova",
  "Koldínova",
  "Kolejní",
  "Kolektivní",
  "Kolešovská",
  "Kollárova",
  "Kolmistrova",
  "Kolmá",
  "Kolocova",
  "Kolodějská",
  "Kolonie U Obecní Cihelny",
  "Kolonka",
  "Kolovečská",
  "Kolovratská",
  "Kolová",
  "Kolátorova",
  "Koláčkova",
  "Koláře Kaliny",
  "Kolářova",
  "Kolínova",
  "Kolínská",
  "Kolčavka",
  "Komenského Nám.",
  "Komenského Náměstí",
  "Komornická",
  "Komořanská",
  "Komořanská",
  "Komořanská",
  "Komunardů",
  "Komárkova",
  "Komárovská",
  "Koncová",
  "Konecchlumského",
  "Konečná",
  "Kongresová",
  "Konojedská",
  "Konopišťská",
  "Konopova",
  "Konopáskova",
  "Konstantinova",
  "Konvalinková",
  "Konviktská",
  "Konzumní",
  "Konzumní",
  "Koníčkovo Nám.",
  "Koníčkovo Náměstí",
  "Konětopská",
  "Koněvova",
  "Konšelská",
  "Konžská",
  "Kopalova",
  "Kopanina",
  "Kopanská",
  "Kopeckého",
  "Koperníkova",
  "Kopečná",
  "Kopretinová",
  "Kopřivnická",
  "Korandova",
  "Korandova",
  "Korunní",
  "Korunní",
  "Korunní",
  "Korunovační",
  "Korunovační",
  "Korybutova",
  "Korycanská",
  "Korytná",
  "Kosatcová",
  "Kosařova",
  "Kosmická",
  "Kosmonoská",
  "Kosova",
  "Kosořická",
  "Kosořská",
  "Kostelecká",
  "Kostelecká",
  "Kostelní",
  "Kostelní Náměstí",
  "Kostečná",
  "Kostková",
  "Kostlivého",
  "Kostnické Nám.",
  "Kostnické Náměstí",
  "Kostomlatská",
  "Kostrbova",
  "Kostřínská",
  "Kosárkovo Nábř.",
  "Kosárkovo Nábřeží",
  "Kosí",
  "Koterovská",
  "Koterovská",
  "Kotevní",
  "Kotlaska",
  "Kotlářka",
  "Kotorská",
  "Kotovka",
  "Kotrčová",
  "Kotršálova",
  "Kotíkova",
  "Kotěrova",
  "Koubkova",
  "Koubkova",
  "Koubova",
  "Koukolová",
  "Koulka",
  "Koulova",
  "Kounická",
  "Kounovská",
  "Koutská",
  "Kouřimská",
  "Kovanecká",
  "Kovařovicova",
  "Kovriginova",
  "Kováků",
  "Kovárenská",
  "Kovářova",
  "Kovářská",
  "Kováříkova",
  "Kozinova",
  "Kozinovo Náměstí",
  "Kozlova",
  "Kozlovská",
  "Kozmíkova",
  "Kozomínská",
  "Kozácká",
  "Kozákovská",
  "Kozáková",
  "Kozí",
  "Kočova",
  "Kořenského",
  "Košařova",
  "Košická",
  "Koštířova",
  "Košátecká",
  "Košíkářská",
  "Košířské Nám.",
  "Košířské Náměstí",
  "Košťálkova",
  "Koťátkova",
  "Koželužská",
  "Kožlanská",
  "Kožná",
  "Kožíškova",
  "Kpt. Nálepky",
  "Kpt. Stránského",
  "Krabošická",
  "Krahulčí",
  "Krajanská",
  "Krajní",
  "Krajová",
  "Krajánkova",
  "Krakovská",
  "Kralická",
  "Kralupská",
  "Krameriova",
  "Kramlova",
  "Kramolná",
  "Kramolínská",
  "Kramperova",
  "Kraslická",
  "Krasnická",
  "Krasnojarská",
  "Kratochvílova",
  "Krausova",
  "Krbická",
  "Krchlebská",
  "Krejnická",
  "Krejčího",
  "Kremličkova",
  "Kremnická",
  "Kremnická",
  "Krhanická",
  "Krhanická",
  "Kristiánova",
  "Kriváňská",
  "Krkonošská",
  "Krnovská",
  "Krnská",
  "Krocínova",
  "Krocínovská",
  "Kroftova",
  "Krohova",
  "Krokova",
  "Krolmusova",
  "Kropáčkova",
  "Krosenská",
  "Kroupova",
  "Kroupova",
  "Krouzova",
  "Krovova",
  "Krteňská",
  "Kruhová",
  "Krumlovská",
  "Krupkovo Nám.",
  "Krupkovo Náměstí",
  "Krupná",
  "Krupská",
  "Krušovická",
  "Kružberská",
  "Krylovecká",
  "Krylovecká",
  "Krymská",
  "Krynická",
  "Krystalová",
  "Kryšpínova",
  "Kryštofova",
  "Krále Václava Iv.",
  "Králodvorská",
  "Králova",
  "Královická",
  "Královny Žofie",
  "Královská Obora",
  "Královská Obora",
  "Krásnolipská",
  "Krásného",
  "Krásova",
  "Krátká",
  "Krátká",
  "Krátkého",
  "Krátký Lán",
  "Krčmářovská",
  "Krčská",
  "Krčínovo Nám.",
  "Krčínovo Náměstí",
  "Krčínská",
  "Krňovická",
  "Krškova",
  "Kubatova",
  "Kubaštova",
  "Kubelíkova",
  "Kubišova",
  "Kubištova",
  "Kubova",
  "Kubánské Nám.",
  "Kubánské Náměstí",
  "Kubíkova",
  "Kubínova",
  "Kuchařská",
  "Kudeříkové",
  "Kudrnova",
  "Kukelská",
  "Kukelská",
  "Kukulova",
  "Kukulova",
  "Kukučínova",
  "Kulhavého",
  "Kulhánkovská",
  "Kuncova",
  "Kundratka",
  "Kunešova",
  "Kunická",
  "Kunratická",
  "Kunratická Spojka",
  "Kunratická Spojka",
  "Kuní",
  "Kuní",
  "Kunínova",
  "Kunčická",
  "Kunětická",
  "Kupeckého",
  "Kupkova",
  "Kurandové",
  "Kurkova",
  "Kurta Konráda",
  "Kurzova",
  "Kurčatovova",
  "Kusá",
  "Kusého",
  "Kutilova",
  "Kutnauerovo Náměstí",
  "Kutnohorská",
  "Kutnohorská",
  "Kutrovická",
  "Kuttelwascherova",
  "Kutvirtova",
  "Kučerova",
  "Kučerové",
  "Kuťatská",
  "Kuželova",
  "Kvapilova",
  "Kvasinská",
  "Kvestorská",
  "Květinková",
  "Květinářská",
  "Květnická",
  "Květnová",
  "Květnového Povstání",
  "Květnového Povstání",
  "Květnového Vítězství",
  "Květnového Vítězství",
  "Květná",
  "Květoslavova",
  "Květová",
  "Kyjevská",
  "Kyjevská",
  "Kyjovská",
  "Kyjská",
  "Kyjská",
  "Kykalova",
  "Kymrova",
  "Kynická",
  "Kyselova",
  "Kyslíková",
  "Kysucká",
  "Kysúcká",
  "Kytlická",
  "Kytínská",
  "Kácovská",
  "Kádnerova",
  "Kálikova",
  "Kálmánova",
  "Káranská",
  "Křejpského",
  "Křelovická",
  "Křemelná",
  "Křemencova",
  "Křemenná",
  "Křemenáčová",
  "Křemílkova",
  "Křenická",
  "Křenova",
  "Křepelčí",
  "Křepelčí",
  "Křesadlova",
  "Křesanovská",
  "Křeslická",
  "Křesomyslova",
  "Křešínská",
  "Křimická",
  "Křimovská",
  "Křivatcová",
  "Křivenická",
  "Křivoklátská",
  "Křivá",
  "Křičkova",
  "Křišťanova",
  "Křišťálová",
  "Křižovnická",
  "Křižovnické Nám.",
  "Křižovnické Náměstí",
  "Křižíkova",
  "Křižíkova",
  "Křovinovo Nám.",
  "Křovinovo Náměstí",
  "Křtinská",
  "Kříženeckého Nám.",
  "Kříženeckého Náměstí",
  "Křížkovského",
  "Křížová",
  "Křížová",
  "Labská",
  "Labětínská",
  "Ladislava Coňka",
  "Ladova",
  "Laglerové",
  "Lahovská",
  "Lahovská",
  "Lamačova",
  "Langweilova",
  "Lannova",
  "Lanýžová",
  "Lanžhotská",
  "Lanžovská",
  "Laténská",
  "Laubova",
  "Laudonova",
  "Laudova",
  "Laurinova",
  "Lazarská",
  "Lazarská",
  "Lačnovská",
  "Lažanská",
  "Lažanská",
  "Lažanského",
  "Lebeděvova",
  "Ledařská",
  "Ledecká",
  "Ledečská",
  "Ledkovská",
  "Lednická",
  "Lednová",
  "Ledvická",
  "Ledvinova",
  "Ledč",
  "Ledčická",
  "Legerova",
  "Legerova",
  "Legerova",
  "Legerova",
  "Legionářů",
  "Lehárova",
  "Leitzova",
  "Leknínová",
  "Leopoldova",
  "Leskovecká",
  "Lesnická",
  "Lesného",
  "Lesní",
  "Lessnerova",
  "Lesáků",
  "Letců",
  "Letecká",
  "Letenská",
  "Letenské Nám.",
  "Letenské Nám.",
  "Letenské Náměstí",
  "Letenské Náměstí",
  "Letenské Sady",
  "Letní",
  "Letohradská",
  "Letovská",
  "Letňanská",
  "Letňanská",
  "Levandulová",
  "Levobřežní",
  "Levského",
  "Levá",
  "Lexova",
  "Lečkova",
  "Lešanská",
  "Lešenská",
  "Lešetínská",
  "Lešovská",
  "Leštínská",
  "Lhenická",
  "Lhotecká",
  "Lhotecká",
  "Lhotská",
  "Lhotákova",
  "Liberecká",
  "Liberijská",
  "Libečkova",
  "Libeňská",
  "Libeňský Ostrov",
  "Libeňský Ostrov",
  "Libeřská",
  "Libichovská",
  "Libická",
  "Libišanská",
  "Libišská",
  "Libkovská",
  "Liblická",
  "Liblická",
  "Libochovická",
  "Libocká",
  "Liborova",
  "Libotovská",
  "Libovická",
  "Libočanská",
  "Liboňovská",
  "Libošovická",
  "Libuňská",
  "Libušina",
  "Libušská",
  "Libušská",
  "Libušská",
  "Libušská",
  "Libáňská",
  "Libínská",
  "Libčanská",
  "Libčická",
  "Liběchovská",
  "Libědická",
  "Liběšická",
  "Libřická",
  "Lichá",
  "Lidečská",
  "Lidická",
  "Lidického",
  "Lihovarská",
  "Liliová",
  "Lilková",
  "Limuzská",
  "Limuzská",
  "Lindavská",
  "Lindleyova",
  "Lindnerova",
  "Linhartova",
  "Linhartská",
  "Lipanská",
  "Lipecká",
  "Lipenecká",
  "Lipenská",
  "Lipenská",
  "Lipenské Nám.",
  "Lipenské Náměstí",
  "Lipnická",
  "Lipoltická",
  "Lipovická",
  "Lipovská",
  "Lipová Alej",
  "Lipové Náměstí",
  "Lipského",
  "Lipí",
  "Lisabonská",
  "Lisabonská",
  "Listopadová",
  "Lisztova",
  "Litavská",
  "Litevská",
  "Litická",
  "Litochlebská",
  "Litoměřická",
  "Litoměřická",
  "Litovická",
  "Litošická",
  "Litošická",
  "Litožnická",
  "Litvínovská",
  "Litvínovská",
  "Livornská",
  "Lišanská",
  "Lišická",
  "Liškova",
  "Lišovická",
  "Liščí",
  "Liščí",
  "Lnářská",
  "Lobečská",
  "Lochenická",
  "Lochkovská",
  "Lochotínská",
  "Lodecká",
  "Lodní Mlýny",
  "Loděnická",
  "Lodžská",
  "Lodžská",
  "Lohenická",
  "Lohniského",
  "Lojovická",
  "Lojovická",
  "Lojovická",
  "Lolkova",
  "Lomařská",
  "Lomecká",
  "Lomená",
  "Lomnická",
  "Lomnického",
  "Lomová",
  "Londýnská",
  "Loosova",
  "Lopatecká",
  "Lopatecká",
  "Lopuchová",
  "Loretánská",
  "Loretánské Nám.",
  "Loretánské Náměstí",
  "Losinská",
  "Lotyšská",
  "Loucká",
  "Loudova",
  "Lounská",
  "Lounských",
  "Loutkářská",
  "Loučanská",
  "Loučimská",
  "Loučná",
  "Louňovická",
  "Lovecká",
  "Lovosická",
  "Lovosická",
  "Lovosická",
  "Lovčenská",
  "Lovčická",
  "Lozická",
  "Lošetická",
  "Lošáková",
  "Lstibořská",
  "Lubenecká",
  "Lublaňská",
  "Lublaňská",
  "Lublinská",
  "Lubnická",
  "Lucemburská",
  "Lucemburská",
  "Lucinková",
  "Ludmilina",
  "Ludvíkova",
  "Luhovská",
  "Lukavecká",
  "Lukavského",
  "Lukešova",
  "Lukešova",
  "Lukovská",
  "Lukášova",
  "Lumiérů",
  "Lumírova",
  "Lumírova",
  "Luníkovská",
  "Lupenická",
  "Lupáčova",
  "Lutínská",
  "Luční",
  "Luštěnická",
  "Lužanská",
  "Lužecká",
  "Lužická",
  "Lužnická",
  "Lužná",
  "Lužní",
  "Lužská",
  "Lvovská",
  "Lysinská",
  "Lysolajská",
  "Lysolajské Údolí",
  "Lyčkovo Nám.",
  "Lyčkovo Náměstí",
  "Lyžařská",
  "Ládevská",
  "Lánovská",
  "Lánská",
  "Lásenická",
  "Láskova",
  "Lázeňská",
  "Lékařská",
  "Lékořicová",
  "Líbalova",
  "Líbeznická",
  "Lípová",
  "Lískovická",
  "Lísková",
  "Líšnická",
  "Lýskova",
  "M. J. Lermontova",
  "Macešková",
  "Macharovo Nám.",
  "Macharovo Náměstí",
  "Machatého",
  "Machkova",
  "Machnova",
  "Machovcova",
  "Machovická",
  "Machovská",
  "Machuldova",
  "Macháčkova",
  "Madarova",
  "Madaťjanova",
  "Madridská",
  "Magd. Rettigové",
  "Magdalény Rettigové",
  "Magistrů",
  "Magnitogorská",
  "Mahenova",
  "Mahlerovy Sady",
  "Mahulenina",
  "Maiselova",
  "Maiselova",
  "Majerové",
  "Majerského",
  "Makedonská",
  "Makovská",
  "Makovského",
  "Maková",
  "Malachitová",
  "Malebná",
  "Malenická",
  "Malešická",
  "Malešická",
  "Malešická",
  "Malešické Nám.",
  "Malešické Náměstí",
  "Malešovská",
  "Malinová",
  "Maličká",
  "Malkovského",
  "Malletova",
  "Malletova",
  "Malobřevnovská",
  "Malostranské Nábř.",
  "Malostranské Nábřeží",
  "Malostranské Náměstí",
  "Malotická",
  "Malovická",
  "Maltézské Nám.",
  "Maltézské Náměstí",
  "Malá",
  "Malá Bylanská",
  "Malá Houdova",
  "Malá Klášterní",
  "Malá Lada",
  "Malá Michnovka",
  "Malá Plynární",
  "Malá Skloněná",
  "Malá Smidarská",
  "Malá Tyršovka",
  "Malá Xaveriova",
  "Malá Štupartská",
  "Malá Štěpánská",
  "Malátova",
  "Malé Nám.",
  "Malé Náměstí",
  "Malého",
  "Malínská",
  "Malířská",
  "Malý Dvůr",
  "Malý Okrouhlík",
  "Malšovická",
  "Malšovské Nám.",
  "Malšovské Náměstí",
  "Mandloňová",
  "Mandova",
  "Mansfeldova",
  "Manská Zahrada",
  "Mantovská",
  "Manželů Dostálových",
  "Manželů Kotrbových",
  "Manželů Lyčkových",
  "Marciho",
  "Marešova",
  "Marie Cibulkové",
  "Marie Podvalové",
  "Mariánská",
  "Mariánská",
  "Mariánské Hradby",
  "Mariánské Hradby",
  "Mariánské Nám.",
  "Mariánské Náměstí",
  "Markova",
  "Markupova",
  "Markušova",
  "Markvartická",
  "Markyta",
  "Markétská",
  "Maroldova",
  "Martinelliho",
  "Martinická",
  "Martinova",
  "Martinovská",
  "Martinská",
  "Marty Krásové",
  "Marvanova",
  "Maršovská",
  "Masarykovo Nábř.",
  "Masarykovo Nábř.",
  "Masarykovo Nábřeží",
  "Masarykovo Nábřeží",
  "Masná",
  "Matek",
  "Matenská",
  "Maternova",
  "Mateřská",
  "Mateřídoušková",
  "Matjuchinova",
  "Matoušova",
  "Mattioliho",
  "Matúškova",
  "Matěchova",
  "Matějkova",
  "Matějovského",
  "Matějská",
  "Maxovská",
  "Mazancova",
  "Mazovská",
  "Mazurská",
  "Maďarská",
  "Maňákova",
  "Mařatkova",
  "Mařákova",
  "Maříkova",
  "Mašatova",
  "Maškova",
  "Mašovická",
  "Maštěřovského",
  "Mašínova",
  "Mechovka",
  "Mechová",
  "Medinská",
  "Medkova",
  "Medlovská",
  "Medová",
  "Meduňková",
  "Meinlinova",
  "Mejstříkova",
  "Melantrichova",
  "Meliorační",
  "Melodická",
  "Melounová",
  "Menclova",
  "Mendelova",
  "Mendíků",
  "Menšíkova",
  "Menšíkovská",
  "Merhoutova",
  "Merkurova",
  "Meruňková",
  "Meskářova",
  "Meteorologická",
  "Meteorologická",
  "Metodějova",
  "Metujská",
  "Mexická",
  "Mezi Chatami",
  "Mezi Domky",
  "Mezi Domy",
  "Mezi Humny",
  "Mezi Lysinami",
  "Mezi Lány",
  "Mezi Poli",
  "Mezi Potoky",
  "Mezi Rolemi",
  "Mezi Rybníky",
  "Mezi Sklady",
  "Mezi Stráněmi",
  "Mezi Vodami",
  "Mezi Úvozy",
  "Mezi Školami",
  "Mezibranská",
  "Mezihorská",
  "Mezihoří",
  "Mezilehlá",
  "Mezilesní",
  "Mezilesí",
  "Meziluží",
  "Mezipolí",
  "Mezitraťová",
  "Mezitraťová",
  "Mezitraťová",
  "Mezivrší",
  "Meziškolská",
  "Mečislavova",
  "Mečovská",
  "Mečíková",
  "Michalovicova",
  "Michalská",
  "Michelangelova",
  "Michelská",
  "Michelská",
  "Michnova",
  "Michnovka",
  "Mickiewiczova",
  "Mikanova",
  "Mikova",
  "Mikovcova",
  "Mikovická",
  "Mikulandská",
  "Mikuleckého",
  "Mikulova",
  "Mikulovická",
  "Mikuláše Z Husi",
  "Mikulášská",
  "Mikulčická",
  "Mikšovského",
  "Milady Horákové",
  "Milady Horákové",
  "Milady Horákové",
  "Milady Horákové",
  "Milady Horákové",
  "Milana Kadlece",
  "Milenovská",
  "Milerova",
  "Miletická",
  "Miletínská",
  "Milevská",
  "Milevská",
  "Milešovská",
  "Milotická",
  "Milovická",
  "Milovická",
  "Milánská",
  "Milínská",
  "Milíčova",
  "Milíčovská",
  "Mimoňská",
  "Minaříkova",
  "Minerální",
  "Minická",
  "Minská",
  "Miranova",
  "Miroslava Hajna",
  "Miroslava Hamra",
  "Mirotická",
  "Mirotická",
  "Mirovická",
  "Mirošovická",
  "Mirošovská",
  "Mistrovská",
  "Mistřínská",
  "Miřetická",
  "Miškovická",
  "Mladenovova",
  "Mladoboleslavská",
  "Mladoboleslavská",
  "Mladoboleslavská",
  "Mladoboleslavská",
  "Mladoboleslavská",
  "Mladotická",
  "Mladotova",
  "Mladých",
  "Mladých Běchovic",
  "Mladčina",
  "Mladějovská",
  "Mlynářská",
  "Mládeže",
  "Mládežnická",
  "Mládkova",
  "Mládí",
  "Mlázovická",
  "Mlékárenská",
  "Mlýnská",
  "Mlýnská",
  "Mnichovická",
  "Mochovská",
  "Mochovská",
  "Modenská",
  "Modlanská",
  "Modletická",
  "Modletínská",
  "Modravská",
  "Modrá",
  "Modrého",
  "Modřanská",
  "Modřanská",
  "Modřanská",
  "Modřanská",
  "Modřínová",
  "Mohelnická",
  "Mohylová",
  "Mojmírova",
  "Mokrá",
  "Mokřanská",
  "Moldavská",
  "Molitorovská",
  "Molákova",
  "Mongolská",
  "Moravanská",
  "Moravanů",
  "Moravská",
  "Morseova",
  "Morstadtova",
  "Morušová",
  "Morušová",
  "Morávkova",
  "Moskevská",
  "Mostecká",
  "Motolská",
  "Moulíkova",
  "Moysesova",
  "Mozambická",
  "Mozartova",
  "Mošnova",
  "Možného",
  "Mramorová",
  "Mratínská",
  "Mračnická",
  "Mrkosova",
  "Mrkvičkova",
  "Mrákovská",
  "Mrázkova",
  "Mrázovka",
  "Mráčkova",
  "Mrštíkova",
  "Mrštíkova",
  "Muchomůrková",
  "Muchova",
  "Mukařovská",
  "Mukařovského",
  "Murgašova",
  "Murmanská",
  "Musilova",
  "Musorgského",
  "Musílkova",
  "Mutěnínská",
  "Muzejní",
  "Muzikova",
  "Muškova",
  "Mydlářka",
  "Myjavská",
  "Mylnerovka",
  "Myslbekova",
  "Myslbekova",
  "Myslivecká",
  "Myslivečkova",
  "Myslíkova",
  "Myslíkova",
  "Myšlínská",
  "Máchova",
  "Máchova",
  "Mádrova",
  "Májovková",
  "Májová",
  "Málkovská",
  "Mánesova",
  "Márova",
  "Máslova",
  "Máslovická",
  "Mátová",
  "Mílovská",
  "Mílová",
  "Mírová",
  "Mírového Hnutí",
  "Mírového Hnutí",
  "Místecká",
  "Míčova",
  "Míšeňská",
  "Míšovická",
  "Münzbergerových",
  "Mýtní",
  "Měchenická",
  "Měcholupská",
  "Měděnecká",
  "Mělická",
  "Mělnická",
  "Městská",
  "Měsíčková",
  "Měsíční",
  "Měšická",
  "Měšínská",
  "Mšecká",
  "Mšenská",
  "N. A. Někrasova",
  "Na Babách",
  "Na Babě",
  "Na Bahnech",
  "Na Balkáně",
  "Na Balkáně",
  "Na Bambouzku",
  "Na Baních",
  "Na Barikádách",
  "Na Bartoňce",
  "Na Bateriích",
  "Na Bateriích",
  "Na Bačálkách",
  "Na Baště Sv. Jiří",
  "Na Baště Sv. Ludmily",
  "Na Baště Sv. Tomáše",
  "Na Bendovce",
  "Na Benátkách",
  "Na Beránce",
  "Na Betonce",
  "Na Bečvářce",
  "Na Bitevní Pláni",
  "Na Blanici",
  "Na Blanseku",
  "Na Blatech",
  "Na Bluku",
  "Na Bohdalci",
  "Na Bojišti",
  "Na Boleslavce",
  "Na Borovém",
  "Na Botiči",
  "Na Botě",
  "Na Božkovně",
  "Na Brabenci",
  "Na Brázdě",
  "Na Bučance",
  "Na Bělici",
  "Na Bělidle",
  "Na Bělohorské Pláni",
  "Na Břehu",
  "Na Břevnovské Pláni",
  "Na Březince",
  "Na Celné",
  "Na Cestě",
  "Na Chmelnici",
  "Na Chobotě",
  "Na Chodovci",
  "Na Chvalce",
  "Na Chvalské Tvrzi",
  "Na Cihelně",
  "Na Cihlářce",
  "Na Cikorce",
  "Na Cikánce",
  "Na Cimbále",
  "Na Cípu",
  "Na Císařce",
  "Na Dionysce",
  "Na Dlouhé Mezi",
  "Na Dlouhé Mezi",
  "Na Dlouhé Mezi",
  "Na Dlouhé Mezi",
  "Na Dlouhém Lánu",
  "Na Dlážděnce",
  "Na Dlážděnce",
  "Na Dlážděnce",
  "Na Dlážděnce",
  "Na Dobešce",
  "Na Dobré Vodě",
  "Na Dolinách",
  "Na Dolinách",
  "Na Dolnici",
  "Na Dolíku",
  "Na Domovině",
  "Na Doubkové",
  "Na Drahách",
  "Na Dračkách",
  "Na Dračkách",
  "Na Dražkách",
  "Na Dubině",
  "Na Dvorcích",
  "Na Dyrince",
  "Na Dílcích",
  "Na Dílech",
  "Na Dědince",
  "Na Dědinách",
  "Na Děkance",
  "Na Děkance",
  "Na Dělostřílnách",
  "Na Džbánu",
  "Na Fabiánce",
  "Na Farkách",
  "Na Farkáně I",
  "Na Farkáně Ii",
  "Na Farkáně Iii",
  "Na Farkáně Iv",
  "Na Fialce I",
  "Na Fialce Ii",
  "Na Fidlovačce",
  "Na Fišerce",
  "Na Florenci",
  "Na Florenci",
  "Na Floře",
  "Na Folimance",
  "Na Formance",
  "Na Františku",
  "Na Groši",
  "Na Habrovce",
  "Na Habrové",
  "Na Hanspaulce",
  "Na Harfě",
  "Na Havránce",
  "Na Hlavní",
  "Na Hlinách",
  "Na Hloubětínské Vinici",
  "Na Hlídce",
  "Na Holém Vrchu",
  "Na Homolce",
  "Na Homoli",
  "Na Horce",
  "Na Horkách",
  "Na Hradním Vodovodu",
  "Na Hranicích",
  "Na Hranicích",
  "Na Hrobci",
  "Na Hroudě",
  "Na Hroudě",
  "Na Hrádku",
  "Na Hrázi",
  "Na Hubálce",
  "Na Humnech",
  "Na Hupech",
  "Na Hutmance",
  "Na Hutích",
  "Na Hutích",
  "Na Hvížďalce",
  "Na Hvězdárně",
  "Na Hádku",
  "Na Hájku",
  "Na Hřebenech I",
  "Na Hřebenech Ii",
  "Na Hřebenech Ii",
  "Na Hřebenkách",
  "Na Hůrce",
  "Na Jabloňce",
  "Na Jabloňce",
  "Na Jahodách",
  "Na Jarově",
  "Na Jelenách",
  "Na Jelenách",
  "Na Jetelce",
  "Na Jetelce",
  "Na Jezerce",
  "Na Jezerách",
  "Na Jitřence",
  "Na Jivinách",
  "Na Julisce",
  "Na Jílech",
  "Na Jílu",
  "Na Kameni",
  "Na Kampě",
  "Na Kapličce",
  "Na Karlovce",
  "Na Kavčích Horách",
  "Na Kazance",
  "Na Kačence",
  "Na Kačerově",
  "Na Kindlovce",
  "Na Klaudiánce",
  "Na Klaudiánce",
  "Na Kleovce",
  "Na Klikovce",
  "Na Klimentce",
  "Na Klášterním",
  "Na Klínech",
  "Na Klínech",
  "Na Klínku",
  "Na Knížce",
  "Na Kocourkách",
  "Na Kocínce",
  "Na Kodymce",
  "Na Kolejním Statku",
  "Na Komořsku",
  "Na Komořsku",
  "Na Konci",
  "Na Konečné",
  "Na Konvářce",
  "Na Kopanině",
  "Na Kopci",
  "Na Kopečku",
  "Na Kopytářce",
  "Na Korunce",
  "Na Korábě",
  "Na Korálově",
  "Na Kotlářce",
  "Na Koupaliště",
  "Na Kovárně",
  "Na Kozačce",
  "Na Kozinci",
  "Na Košince",
  "Na Košíku",
  "Na Kraji",
  "Na Krocínce",
  "Na Krutci",
  "Na Královce",
  "Na Královně",
  "Na Krčské Stráni",
  "Na Kuthence",
  "Na Kvintusce",
  "Na Květnici",
  "Na Kyjově",
  "Na Křemínku",
  "Na Křenkově",
  "Na Křečku",
  "Na Křivce",
  "Na Křivce",
  "Na Křivce",
  "Na Křivině",
  "Na Křtině",
  "Na Křídle",
  "Na Labuťce",
  "Na Labuťce I",
  "Na Labuťce Ii",
  "Na Labuťce Iii",
  "Na Labuťce Iv",
  "Na Ladách",
  "Na Lahovské",
  "Na Laurové",
  "Na Lepším",
  "Na Lhotech",
  "Na Lhotkách",
  "Na Libušince",
  "Na Losách",
  "Na Louce",
  "Na Loukoti",
  "Na Louži",
  "Na Loužku",
  "Na Luka",
  "Na Lukách",
  "Na Luzích",
  "Na Lučinách",
  "Na Lužci",
  "Na Lysinách",
  "Na Lysině",
  "Na Ládví",
  "Na Lánech",
  "Na Lávce",
  "Na Lázeňce",
  "Na Líše",
  "Na Malovance",
  "Na Malé Šárce",
  "Na Malém Klínu",
  "Na Maninách",
  "Na Manoušce",
  "Na Markvartce",
  "Na Marně",
  "Na Mezi",
  "Na Mlejnku",
  "Na Moklině",
  "Na Mokřině",
  "Na Moráni",
  "Na Močále",
  "Na Mrázovce",
  "Na Musilech",
  "Na Mírách",
  "Na Míčánce",
  "Na Míčánkách",
  "Na Mýtě",
  "Na Můstku",
  "Na Neklance",
  "Na Nežárce",
  "Na Nivách",
  "Na Novině",
  "Na Nové Silnici",
  "Na Náspu",
  "Na Návrati",
  "Na Návrší",
  "Na Návsi",
  "Na Obrátce",
  "Na Obrátce",
  "Na Odbočce",
  "Na Ohradě",
  "Na Okraji",
  "Na Okraji",
  "Na Okrouhlíku",
  "Na Okruhu",
  "Na Opyši",
  "Na Opyši",
  "Na Ostrohu",
  "Na Ostrově",
  "Na Ostrůvku",
  "Na Ovesníku",
  "Na Ovčinách",
  "Na Ovčáckém",
  "Na Ovčíně",
  "Na Ořechovce",
  "Na Padesátníku I",
  "Na Padesátníku Ii",
  "Na Padesátníku Iii",
  "Na Padesátníku Iv",
  "Na Padesátníku V",
  "Na Padesátém",
  "Na Pahorku",
  "Na Pahoubce",
  "Na Palouku",
  "Na Paloučku",
  "Na Pankráci",
  "Na Panorámě",
  "Na Parcelách",
  "Na Parkáně",
  "Na Parukářce",
  "Na Pasece",
  "Na Pasece",
  "Na Pastvinách",
  "Na Pavím Vrchu",
  "Na Pazderce",
  "Na Pecích",
  "Na Pernikářce",
  "Na Perštýně",
  "Na Petynce",
  "Na Petynce",
  "Na Petřinách",
  "Na Petřinách",
  "Na Placích",
  "Na Planině",
  "Na Plužině",
  "Na Plzeňce",
  "Na Plácku",
  "Na Pláni",
  "Na Plískavě",
  "Na Podkovce",
  "Na Pokraji",
  "Na Pokraji",
  "Na Poli",
  "Na Polníku",
  "Na Pomezí",
  "Na Pomezí",
  "Na Popelce",
  "Na Popelce",
  "Na Potůčku",
  "Na Poustkách",
  "Na Pozorce",
  "Na Poříčním Právu",
  "Na Poříčí",
  "Na Poříčí",
  "Na Požáru",
  "Na Požáru",
  "Na Pramenech",
  "Na Pramenech",
  "Na Prosecké Vyhlídce",
  "Na Proseku",
  "Na Prostřední Cestě",
  "Na Proutcích",
  "Na Provaznici",
  "Na Průhonu",
  "Na Průseku",
  "Na Pučálce",
  "Na Pískovně",
  "Na Písku",
  "Na Pískách",
  "Na Pěkné Vyhlídce",
  "Na Pěšinách",
  "Na Pěšinách",
  "Na Pěšině",
  "Na Předevsi",
  "Na Přesypu",
  "Na Přesypu",
  "Na Přídole",
  "Na Příkopě",
  "Na Příkopě",
  "Na Přívozích",
  "Na Příčce",
  "Na Příčné Mezi",
  "Na Radosti",
  "Na Radosti",
  "Na Rampách",
  "Na Rejdišti",
  "Na Roháčku",
  "Na Rokytce",
  "Na Rolích",
  "Na Rovinách",
  "Na Rovině",
  "Na Rovni",
  "Na Rovnosti",
  "Na Rovném",
  "Na Rozcestí",
  "Na Rozdílu",
  "Na Rozdílu",
  "Na Rozhledu",
  "Na Rozhraní",
  "Na Rozhraní",
  "Na Rozvodí",
  "Na Ročkově",
  "Na Rybníčku",
  "Na Rybářce",
  "Na Rybářce",
  "Na Rymáni",
  "Na Rynku",
  "Na Salabce",
  "Na Samotě",
  "Na Schodech",
  "Na Schůdkách",
  "Na Sedlišti",
  "Na Sekyrce",
  "Na Selském",
  "Na Seníku",
  "Na Skalce",
  "Na Skalách",
  "Na Sklonku",
  "Na Skále",
  "Na Slatince",
  "Na Slatinách",
  "Na Slatinách",
  "Na Slatinách",
  "Na Slavíkově",
  "Na Slovance",
  "Na Slupi",
  "Na Slupi",
  "Na Smetance",
  "Na Souvrati",
  "Na Souvrati",
  "Na Spojce",
  "Na Spádu",
  "Na Spáleništi",
  "Na Srpečku",
  "Na Srázu",
  "Na Srážku",
  "Na Staré",
  "Na Staré Cestě",
  "Na Staré Návsi",
  "Na Staré Silnici",
  "Na Staré Vinici",
  "Na Stezce",
  "Na Stezce",
  "Na Struze",
  "Na Stráni",
  "Na Stráňkách",
  "Na Stráži",
  "Na Stráži",
  "Na Strži",
  "Na Strži",
  "Na Stupních",
  "Na Stárce",
  "Na Stírce",
  "Na Střelnici",
  "Na Svahu",
  "Na Svěcence",
  "Na Sychrově",
  "Na Sychrově",
  "Na Sypkém",
  "Na Sypčině",
  "Na Sádce",
  "Na Terase",
  "Na Topolce",
  "Na Topolce",
  "Na Truhlářce",
  "Na Tržišti",
  "Na Tykačce",
  "Na Táboře",
  "Na Třebešíně",
  "Na Třebešíně",
  "Na Universitním Statku",
  "Na Usedlosti",
  "Na Vackově",
  "Na Valech",
  "Na Valentince",
  "Na Vartě",
  "Na Vaňhově",
  "Na Veselí",
  "Na Vidouli",
  "Na Viktorce",
  "Na Vinici",
  "Na Viničce",
  "Na Viničkách",
  "Na Viničních Horách",
  "Na Vinobraní",
  "Na Vinohradu",
  "Na Višňovce",
  "Na Vlasačce",
  "Na Vlastní Půdě",
  "Na Vlastním",
  "Na Vlku",
  "Na Vlčovce",
  "Na Volánové",
  "Na Vrchmezí",
  "Na Vrchmezí",
  "Na Vrchmezí",
  "Na Vrcholu",
  "Na Vrchu",
  "Na Vrchu",
  "Na Vrchách",
  "Na Vrchách",
  "Na Vrstevnici",
  "Na Vrstvách",
  "Na Vršku",
  "Na Vrškách",
  "Na Vrších",
  "Na Vrších",
  "Na Vydrholci",
  "Na Vyhlídce",
  "Na Vypichu",
  "Na Vypichu",
  "Na Vysoké I",
  "Na Vysoké I",
  "Na Vysoké Ii",
  "Na Vysočanských Vinicích",
  "Na Vysočině",
  "Na Václavce",
  "Na Vápence",
  "Na Vápenném",
  "Na Vítězné Pláni",
  "Na Výběžku",
  "Na Výhledech",
  "Na Výhonku",
  "Na Výrovně",
  "Na Výsledku I",
  "Na Výsledku Ii",
  "Na Výsluní",
  "Na Výspě",
  "Na Výspě",
  "Na Výstupu",
  "Na Výtoni",
  "Na Výši",
  "Na Výšince",
  "Na Výšinách",
  "Na Výšině",
  "Na Věnečku",
  "Na Větrníku",
  "Na Větrníku",
  "Na Větrově",
  "Na Větru",
  "Na Zahrádkách",
  "Na Zatlance",
  "Na Zavadilce",
  "Na Zbořenci",
  "Na Zderaze",
  "Na Zedníkové",
  "Na Zelené Louce",
  "Na Zemance",
  "Na Zkratce",
  "Na Zlatnici",
  "Na Zlaté",
  "Na Zlíchově",
  "Na Zlíchově",
  "Na Zmrzlíku",
  "Na Znělci",
  "Na Zvoničce",
  "Na Zábradlí",
  "Na Záhonech",
  "Na Zájezdu",
  "Na Zámecké",
  "Na Zámkách",
  "Na Zámyšli",
  "Na Zástřelu",
  "Na Zástřelu",
  "Na Zátorce",
  "Na Zátorách",
  "Na Závěji",
  "Na Úbočí",
  "Na Úhoru",
  "Na Úlehli",
  "Na Úseku",
  "Na Úspěchu",
  "Na Černé Hoře",
  "Na Černé Strouze",
  "Na Černém Vrchu",
  "Na Července",
  "Na Čečeličce",
  "Na Čihadle",
  "Na Čisté",
  "Na Říháku",
  "Na Šabatce",
  "Na Šachtě",
  "Na Šafránce",
  "Na Šancích",
  "Na Šedivé",
  "Na Šejdru",
  "Na Šejdru",
  "Na Šmukýřce",
  "Na Špejcharu",
  "Na Špitálce",
  "Na Špitálsku",
  "Na Štamberku",
  "Na Štěpnici",
  "Na Šubě",
  "Na Šumavě",
  "Na Šutce",
  "Na Švihance",
  "Na Šťáhlavce",
  "Na Žertvách",
  "Na Žvahově",
  "Naardenská",
  "Nad Akcízem",
  "Nad Akáty",
  "Nad Alejí",
  "Nad Belvederem",
  "Nad Belárií",
  "Nad Berounkou",
  "Nad Bertramkou",
  "Nad Botičem",
  "Nad Bořislavkou",
  "Nad Bořislavkou",
  "Nad Branickým Pivovarem",
  "Nad Brůdkem",
  "Nad Brůdkem",
  "Nad Buďánkami I",
  "Nad Buďánkami Ii",
  "Nad Buďánkami Iii",
  "Nad Cementárnou",
  "Nad Chaloupkami",
  "Nad Chuchlí",
  "Nad Cihelnou",
  "Nad Dalejským Údolím",
  "Nad Doly",
  "Nad Dolíky",
  "Nad Drahou",
  "Nad Dubovým Mlýnem",
  "Nad Dvorem",
  "Nad Dálnicí",
  "Nad Elektrárnou",
  "Nad Elektrárnou",
  "Nad Flajšnerkou",
  "Nad Habrovkou",
  "Nad Havlem",
  "Nad Helmrovkou",
  "Nad Hercovkou",
  "Nad Hercovkou",
  "Nad Hliníkem",
  "Nad Hliníkem",
  "Nad Horizontem",
  "Nad Hradním Potokem",
  "Nad Hradním Vodojemem",
  "Nad Husovými Sady",
  "Nad Hutěmi",
  "Nad Hutěmi",
  "Nad Hájem",
  "Nad Hřištěm",
  "Nad Jenerálkou",
  "Nad Jetelkou",
  "Nad Jezem",
  "Nad Jezerkou",
  "Nad Jordánkem",
  "Nad Kajetánkou",
  "Nad Kamínkou",
  "Nad Kaplankou",
  "Nad Kapličkou",
  "Nad Kavalírkou",
  "Nad Kazankou",
  "Nad Kazínem",
  "Nad Kelerkou",
  "Nad Kesnerkou",
  "Nad Klamovkou",
  "Nad Klikovkou",
  "Nad Klíčovem",
  "Nad Kolonií",
  "Nad Kolčavkou",
  "Nad Komornickou",
  "Nad Konečnou",
  "Nad Konvářkou",
  "Nad Kostelem",
  "Nad Kotlaskou I",
  "Nad Kotlaskou Ii",
  "Nad Kotlaskou Iii",
  "Nad Kotlaskou Iv",
  "Nad Kotlaskou V",
  "Nad Koulkou",
  "Nad Koupadly",
  "Nad Koupalištěm",
  "Nad Košinkou",
  "Nad Košíkem",
  "Nad Krocínkou",
  "Nad Krocínkou",
  "Nad Královskou Oborou",
  "Nad Kuliškou",
  "Nad Kundratkou",
  "Nad Kundratkou",
  "Nad Kundratkou",
  "Nad Křížkem",
  "Nad Laurovou",
  "Nad Lesem",
  "Nad Lesním Divadlem",
  "Nad Lesíkem",
  "Nad Libeňským Nádražím",
  "Nad Libeřským Potokem",
  "Nad Libušským Potokem",
  "Nad Libří",
  "Nad Lomem",
  "Nad Lomy",
  "Nad Lukami",
  "Nad Lávkou",
  "Nad Malým Mýtem",
  "Nad Manovkou",
  "Nad Markytou",
  "Nad Mazankou",
  "Nad Meandry",
  "Nad Mlynářkou",
  "Nad Mlýnem",
  "Nad Mlýnským Potokem",
  "Nad Mohylou",
  "Nad Mokřinou",
  "Nad Mostem",
  "Nad Motolskou Nemocnicí",
  "Nad Motolskou Nemocnicí",
  "Nad Mrázovkou",
  "Nad Mušlovkou",
  "Nad Mušlovkou",
  "Nad Novou Libní",
  "Nad Nuslemi",
  "Nad Nádražím",
  "Nad Nádrží",
  "Nad Náhonem",
  "Nad Náměstím",
  "Nad Návsí",
  "Nad Obcí I",
  "Nad Obcí Ii",
  "Nad Octárnou",
  "Nad Odbočkou",
  "Nad Ohradou",
  "Nad Okrouhlíkem",
  "Nad Olšinami",
  "Nad Olšinami",
  "Nad Ondřejovem",
  "Nad Opatovem",
  "Nad Ostrovem",
  "Nad Pahorkem",
  "Nad Palatou",
  "Nad Panenskou",
  "Nad Parkem",
  "Nad Parkánem",
  "Nad Paťankou",
  "Nad Pentlovkou",
  "Nad Petruskou",
  "Nad Petynkou",
  "Nad Plynovodem",
  "Nad Podbabskou Skálou",
  "Nad Pomníkem",
  "Nad Popelkou",
  "Nad Popelářkou",
  "Nad Potůčkem",
  "Nad Prahou",
  "Nad Pramenem",
  "Nad Primaskou",
  "Nad Primaskou",
  "Nad Propustí",
  "Nad Pruhy",
  "Nad Pískovnou",
  "Nad Přehradou",
  "Nad Přívozem",
  "Nad Radotínem",
  "Nad Rohatci",
  "Nad Roklí",
  "Nad Rokoskou",
  "Nad Rokytkou",
  "Nad Rybníkem",
  "Nad Rybníkem",
  "Nad Rybníčky",
  "Nad Ryšánkou",
  "Nad Rážákem",
  "Nad Sadem",
  "Nad Sady",
  "Nad Santoškou",
  "Nad Schody",
  "Nad Skálou",
  "Nad Slávií",
  "Nad Slávií",
  "Nad Smetankou",
  "Nad Sokolovnou",
  "Nad Soutokem",
  "Nad Soutokem",
  "Nad Splavem",
  "Nad Spádem",
  "Nad Spáleným Mlýnem",
  "Nad Stanicí",
  "Nad Starou Pískovnou",
  "Nad Statkem",
  "Nad Strakovkou",
  "Nad Strouhou",
  "Nad Strání",
  "Nad Strání",
  "Nad Studánkou",
  "Nad Svahem",
  "Nad Sýpkou",
  "Nad Tejnkou",
  "Nad Teplárnou",
  "Nad Topoly",
  "Nad Tratí",
  "Nad Trnkovem",
  "Nad Trojou",
  "Nad Turbovou",
  "Nad Třebešínem I",
  "Nad Třebešínem Ii",
  "Nad Třebešínem Ii",
  "Nad Třebešínem Iii",
  "Nad Třebešínem Iii",
  "Nad Vavrouškou",
  "Nad Vernerákem",
  "Nad Vinicí",
  "Nad Vinným Potokem",
  "Nad Vinným Potokem",
  "Nad Vinným Potokem",
  "Nad Vinohradem",
  "Nad Višňovkou",
  "Nad Vltavou",
  "Nad Vodovodem",
  "Nad Vodovodem",
  "Nad Vojenským Hřbitovem",
  "Nad Vokolky",
  "Nad Volyňkou",
  "Nad Vrbami",
  "Nad Vrstvami",
  "Nad Vršovskou Horou",
  "Nad Vsí",
  "Nad Vysočany",
  "Nad Václavkou",
  "Nad Výpustí",
  "Nad Výšinkou",
  "Nad Zahradnictvím",
  "Nad Zatáčkou",
  "Nad Zavážkou",
  "Nad Zbraslaví",
  "Nad Zbrojnicí",
  "Nad Zemankou",
  "Nad Zemankou",
  "Nad Zlatnicí",
  "Nad Zlíchovem",
  "Nad Záložnou",
  "Nad Zámečkem",
  "Nad Zámečnicí",
  "Nad Zátiším",
  "Nad Závodištěm",
  "Nad Závěrkou",
  "Nad Údolím",
  "Nad Údolím Hvězd",
  "Nad Úpadem",
  "Nad Úvozem",
  "Nad Úžlabinou",
  "Nad Úžlabinou",
  "Nad Šafránkou",
  "Nad Šancemi",
  "Nad Šauerovými Sady",
  "Nad Šeberákem",
  "Nad Šejdrem",
  "Nad Šestikopy",
  "Nad Šetelkou",
  "Nad Štolou",
  "Nad Šutkou",
  "Nad Šálkovnou",
  "Nad Šárkou",
  "Nad Želivkou",
  "Nad Žlábkem",
  "Nademlejnská",
  "Nadějovská",
  "Narcisová",
  "Naskové",
  "Natanaelka",
  "Navarova",
  "Navigátorů",
  "Navrátilova",
  "Načeradecká",
  "Načešická",
  "Neapolská",
  "Nebeského",
  "Nebovidská",
  "Nebozízek-Sady",
  "Nebušická",
  "Nechanická",
  "Nechanského",
  "Nechvalická",
  "Nechvílova",
  "Nechybova",
  "Nedašovská",
  "Nedbalova",
  "Nedokončená",
  "Nedokončená",
  "Nedošínské",
  "Nedražická",
  "Nedvědická",
  "Nedvědovo Nám.",
  "Nedvědovo Náměstí",
  "Nedvězská",
  "Neffova",
  "Nefritová",
  "Neherovská",
  "Nehvizdská",
  "Nehvizdská",
  "Nejdkova",
  "Neklanova",
  "Nekvasilova",
  "Nekázanka",
  "Nemocniční",
  "Nemošická",
  "Nepasické Nám.",
  "Nepasické Náměstí",
  "Nepelova",
  "Nepilova",
  "Nepomucká",
  "Nepomuckých",
  "Nepovolená",
  "Nepravidelná",
  "Neprůjezdná",
  "Nepálská",
  "Neratovická",
  "Nerudova",
  "Nerudova",
  "Nesměřická",
  "Nespecká",
  "Nesvadbova",
  "Netlucká",
  "Netluky",
  "Netolická",
  "Netušilská",
  "Netínská",
  "Netřebická",
  "Netřebská",
  "Neumannova",
  "Neustupného",
  "Neužilova",
  "Nevanova",
  "Neveklovská",
  "Newtonova",
  "Nezamyslova",
  "Nezdova",
  "Nezvalova",
  "Nečova",
  "Nešporova",
  "Nežárská",
  "Nickerleho",
  "Niederleho",
  "Nikodémova",
  "Nikoly Tesly",
  "Nikoly Vapcarova",
  "Niská",
  "Nitranská",
  "Nitranská",
  "Nivnická",
  "Nobelova",
  "Norbertov",
  "Norská",
  "Nosická",
  "Nosticova",
  "Notečská",
  "Noutonická",
  "Nouzov",
  "Nouzovské Nám.",
  "Nouzovské Náměstí",
  "Nouzová",
  "Novgorodská",
  "Novobohdalecká",
  "Novoborská",
  "Novoborská",
  "Novochuchelská",
  "Novodvorská",
  "Novodvorská",
  "Novodvorská",
  "Novodvorská",
  "Novohradská",
  "Novohrádecká",
  "Novohrádecká",
  "Novolhotská",
  "Novolipanská",
  "Novomeského",
  "Novomeského",
  "Novomlýnská",
  "Novopacká",
  "Novopetrovická",
  "Novorossijská",
  "Novosibřinská",
  "Novostrašnická",
  "Novosuchdolská",
  "Novosvětská",
  "Novotného Lávka",
  "Novoveská",
  "Novoveská",
  "Novovysočanská",
  "Novovysočanská",
  "Novovysočanská",
  "Novozámecká",
  "Novozámecká",
  "Novoškolská",
  "Novoštěrboholská",
  "Nová",
  "Nová Cesta",
  "Nová Kolonie",
  "Nová Ves",
  "Nová Ves",
  "Nová Šárka",
  "Novákovo Nám.",
  "Novákovo Náměstí",
  "Novákových",
  "Nové Domy",
  "Nové Dvory",
  "Nové Mlýny",
  "Nové Náměstí",
  "Nového",
  "Nový Lesík",
  "Nový Svět",
  "Nový Zlíchov",
  "Nový Zlíchov",
  "Nupacká",
  "Nuselská",
  "Nuselská",
  "Nučická",
  "Nušlova",
  "Nymburská",
  "Nábř. Edvarda Beneše",
  "Nábř. Edvarda Beneše",
  "Nábř. Edvarda Beneše",
  "Nábř. Kapitána Jaroše",
  "Nábř. Kapitána Jaroše",
  "Nábřežní",
  "Nábřeží Edvarda Beneše",
  "Nábřeží Edvarda Beneše",
  "Nábřeží Edvarda Beneše",
  "Nábřeží Kapitána Jaroše",
  "Nábřeží Ludvíka Svobody",
  "Náchodská",
  "Nádražní",
  "Nádražní",
  "Nádvorní",
  "Náhorní",
  "Nákupní",
  "Nám. 14. Října",
  "Nám. 25. Března",
  "Nám. Antonína Pecáka",
  "Nám. Barikád",
  "Nám. Bořislavka",
  "Nám. Bratří Synků",
  "Nám. Chuchelských Bojovníků",
  "Nám. Chuchleských Bojovníků",
  "Nám. Curieových",
  "Nám. Dr. V. Holého",
  "Nám. Franze Kafky",
  "Nám. Generála Kutlvašra",
  "Nám. Hrdinů",
  "Nám. I. P. Pavlova",
  "Nám. Interbrigády",
  "Nám. Jana Palacha",
  "Nám. Jana Palacha",
  "Nám. Jiřího Berana",
  "Nám. Jiřího Z Lobkovic",
  "Nám. Jiřího Z Poděbrad",
  "Nám. Jiřího Z Poděbrad",
  "Nám. Josefa Machka",
  "Nám. Kinských",
  "Nám. Kinských",
  "Nám. Mezi Zahrádkami",
  "Nám. Na Balabence",
  "Nám. Na Farkáně",
  "Nám. Na Lužinách",
  "Nám. Na Santince",
  "Nám. Na Stráži",
  "Nám. Omladiny",
  "Nám. Osvoboditelů",
  "Nám. Padlých",
  "Nám. Pod Kaštany",
  "Nám. Pod Lípou",
  "Nám. Prezidenta Masaryka",
  "Nám. Před Bateriemi",
  "Nám. Republiky",
  "Nám. Smiřických",
  "Nám. Svatopluka Čecha",
  "Nám. Svobody",
  "Nám. U Lva",
  "Nám. U Lípy Svobody",
  "Nám. U Svatého Jiří",
  "Nám. Winstona Churchilla",
  "Nám. Českého Povstání",
  "Nám.Organizace Spojených Národ",
  "Nám.Plukovníka Vlčka",
  "Náměstí 14. Října",
  "Náměstí 25. Března",
  "Náměstí Antonína Pecáka",
  "Náměstí Barikád",
  "Náměstí Bořislavka",
  "Náměstí Bořislavka",
  "Náměstí Bratří Jandusů",
  "Náměstí Bratří Synků",
  "Náměstí Chuchelských Bojovníků",
  "Náměstí Curieových",
  "Náměstí Dr. Václava Holého",
  "Náměstí Generála Kutlvašra",
  "Náměstí Hrdinů",
  "Náměstí I. P. Pavlova",
  "Náměstí Interbrigády",
  "Náměstí Jana Palacha",
  "Náměstí Jana Palacha",
  "Náměstí Jiřího Berana",
  "Náměstí Jiřího Z Lobkovic",
  "Náměstí Jiřího Z Poděbrad",
  "Náměstí Jiřího Z Poděbrad",
  "Náměstí Josefa Machka",
  "Náměstí Junkových",
  "Náměstí Kinských",
  "Náměstí Kinských",
  "Náměstí Kosmonautů",
  "Náměstí Mezi Zahrádkami",
  "Náměstí Míru",
  "Náměstí Na Balabence",
  "Náměstí Na Farkáně",
  "Náměstí Na Lužinách",
  "Náměstí Na Santince",
  "Náměstí Na Stráži",
  "Náměstí Omladiny",
  "Náměstí Organizace Spojených Národů",
  "Náměstí Osvoboditelů",
  "Náměstí Padlých",
  "Náměstí Plukovníka Vlčka",
  "Náměstí Pod Emauzy",
  "Náměstí Pod Kaštany",
  "Náměstí Pod Lípou",
  "Náměstí Prezidenta Masaryka",
  "Náměstí Protifašistických Bojovníků",
  "Náměstí Před Bateriemi",
  "Náměstí Přátelství",
  "Náměstí Republiky",
  "Náměstí Republiky",
  "Náměstí Smiřických",
  "Náměstí Sv. Petra A Pavla",
  "Náměstí Svatopluka Čecha",
  "Náměstí Svobody",
  "Náměstí U Lva",
  "Náměstí U Lípy Svobody",
  "Náměstí U Svatého Jiří",
  "Náměstí Winstona Churchilla",
  "Náměstí Zdenky Braunerové",
  "Náměstí Českého Povstání",
  "Náplavní",
  "Náprstkova",
  "Národní",
  "Národní",
  "Národní Obrany",
  "Národních Hrdinů",
  "Nárožní",
  "Násirovo Nám.",
  "Násirovo Náměstí",
  "Nástrojářská",
  "Návazná",
  "Návršní",
  "Návětrná",
  "Návětrná",
  "Názovská",
  "Nýdecká",
  "Nýrská",
  "Nýřanská",
  "Němčická",
  "Něvská",
  "Obchodní",
  "Obchodní Nám.",
  "Obchodní Náměstí",
  "Obilní",
  "Objízdná",
  "Oblouková",
  "Obora Hvězda",
  "Oborská",
  "Obrataňská",
  "Obrovského",
  "Obsiny",
  "Obslužná",
  "Obvodová",
  "Obědovická",
  "Obětí 6. Května",
  "Obětí 6.Května",
  "Ocelkova",
  "Ocelářská",
  "Ocelářská",
  "Ocelíkova",
  "Ochozská",
  "Ochranovská",
  "Od Rozcestí",
  "Od Vysoké",
  "Od Školy",
  "Odboje",
  "Odborů",
  "Odbočná",
  "Oddechová",
  "Oddělená",
  "Oderská",
  "Odlehlá",
  "Ohmova",
  "Ohnivcova",
  "Ohnišťanská",
  "Ohradní",
  "Ohradní",
  "Ohradská",
  "Ohradské Nám.",
  "Ohradské Náměstí",
  "Ohrobecká",
  "Okenská",
  "Okořská",
  "Okrajní",
  "Okrajová",
  "Okrajová",
  "Okrasná",
  "Okrouhlická",
  "Okrouhlíkova",
  "Okrová",
  "Okruhová",
  "Okružní",
  "Okružní",
  "Okřínecká",
  "Olbrachtova",
  "Olbramovická",
  "Oldřichova",
  "Olešnická",
  "Olešská",
  "Olgy Havlové",
  "Olivova",
  "Olomoucká",
  "Olympijská",
  "Olšanská",
  "Olšanské Nám.",
  "Olšanské Náměstí",
  "Olšovická",
  "Olšová",
  "Olštýnská",
  "Omladinářů",
  "Omská",
  "Ondřejovská",
  "Ondříčkova",
  "Ondříčkova",
  "Onšovecká",
  "Opata Konráda",
  "Opatovická",
  "Opatovská",
  "Opatovská",
  "Opatřilka",
  "Opatřilka",
  "Opařanská",
  "Oplanská",
  "Opletalova",
  "Opolská",
  "Opočenská",
  "Opočínská",
  "Opravářská",
  "Opuková",
  "Opálkova",
  "Opálová",
  "Oravská",
  "Ordovická",
  "Orebitská",
  "Orelská",
  "Orlická",
  "Ortenovo Náměstí",
  "Osadní",
  "Osamocená",
  "Osecká",
  "Osetá",
  "Osická",
  "Osiková",
  "Osinalická",
  "Osluněná",
  "Osmého Listopadu",
  "Osnická",
  "Osnická",
  "Osnická",
  "Ostravická",
  "Ostravská",
  "Ostromečská",
  "Ostrov Štvanice",
  "Ostrovní",
  "Ostrovského",
  "Ostruženská",
  "Ostružinová",
  "Ostrá",
  "Ostrčilovo Nám.",
  "Ostrčilovo Náměstí",
  "Ostředecká",
  "Ostřicová",
  "Osvobození",
  "Osvětová",
  "Otakara Vrby",
  "Otakarova",
  "Otavova",
  "Otavova",
  "Otavská",
  "Otevřená",
  "Otická",
  "Otlíkovská",
  "Otopašská",
  "Otovická",
  "Otradovická",
  "Ottova",
  "Otvovická",
  "Oty Pavla",
  "Otínská",
  "Otěšínská",
  "Ouholická",
  "Ouhrabkova",
  "Ovenecká",
  "Ovenecká",
  "Ovesná",
  "Ovocná",
  "Ovocnářská",
  "Ovocný Trh",
  "Ovsíková",
  "Oválová",
  "Ovčárská",
  "Ovčí Hájek",
  "Ořechová",
  "Ořešská",
  "Paběnická",
  "Paběnická",
  "Pacajevova",
  "Paceřická",
  "Pacholíkova",
  "Pacovská",
  "Paculova",
  "Padovská",
  "Pajerova",
  "Pakoměřická",
  "Palackého",
  "Palackého Nám.",
  "Palackého Náměstí",
  "Palmetová",
  "Palmovka",
  "Paláskova",
  "Pampelišková",
  "Pancířova",
  "Panelová",
  "Panenky",
  "Panenská",
  "Pankrácké Náměstí",
  "Panská",
  "Panská Zahrada",
  "Panský Dvůr",
  "Panuškova",
  "Paprsková",
  "Papírenská",
  "Papírníkova",
  "Parašutistů",
  "Pardubická",
  "Park Přátelství",
  "Parková",
  "Parléřova",
  "Parléřova",
  "Parmská",
  "Paroplavební",
  "Partyzánská",
  "Pasecká",
  "Pasteurova",
  "Pastevců",
  "Patočkova",
  "Patočkova",
  "Patočkova",
  "Pavelkova",
  "Pavla Beneše",
  "Pavla Švandy Ze Semčic",
  "Pavlická",
  "Pavlišovská",
  "Pavlovická",
  "Pavlovská",
  "Pavlíkova",
  "Pavrovského",
  "Paříkova",
  "Pařízkova",
  "Pařížská",
  "Pařížská",
  "Paškova",
  "Paťanka",
  "Peceradská",
  "Pecharova",
  "Pechlátova",
  "Pechlátova",
  "Pecháčkova",
  "Peckova",
  "Pejevové",
  "Pekařova",
  "Pekařova",
  "Pekařská",
  "Pekárenská",
  "Pekárkova",
  "Pelclova",
  "Pelechovská",
  "Pelhřimovská",
  "Pelikánova",
  "Pelléova",
  "Pelléova",
  "Pelnářova",
  "Pelušková",
  "Pelyňková",
  "Pelzova",
  "Penízovková",
  "Perlitová",
  "Perlitová",
  "Perlová",
  "Pernerova",
  "Pernerova",
  "Peroutkova",
  "Peroutkova",
  "Peroutkova",
  "Peroutkova",
  "Perspektivní",
  "Pertoldova",
  "Perucká",
  "Perunova",
  "Perštejnská",
  "Petra Bezruče",
  "Petra Rezka",
  "Petra Slezáka",
  "Petrbokova",
  "Petrklíčová",
  "Petrohradská",
  "Petrovická",
  "Petrovská",
  "Petrská",
  "Petrské Nám.",
  "Petrské Náměstí",
  "Petráčkova",
  "Petržílkova",
  "Petržílova",
  "Petýrkova",
  "Petříkova",
  "Petříkovská",
  "Petřínská",
  "Petřínská",
  "Petřínské Sady",
  "Petřínské Sady",
  "Pevnostní",
  "Pečárková",
  "Pešinova",
  "Peškova",
  "Pešlova",
  "Pešova",
  "Peštukova",
  "Pešákova",
  "Picassova",
  "Pickova",
  "Pihelská",
  "Pikovická",
  "Pikrtova",
  "Pilařská",
  "Pilníkovská",
  "Pilotů",
  "Pilovská",
  "Pilovská",
  "Pilská",
  "Pirinská",
  "Pirnerova",
  "Pitkovická",
  "Pitterova",
  "Pivcova",
  "Pivovarnická",
  "Pivovarská",
  "Pivoňková",
  "Pištěkova",
  "Placina",
  "Placina",
  "Plajnerova",
  "Plamínkové",
  "Plaská",
  "Platanová",
  "Platnéřská",
  "Platónova",
  "Plavecká",
  "Plavínová",
  "Plačická",
  "Plaňanská",
  "Plevenská",
  "Plečnikova",
  "Plhovská",
  "Plickova",
  "Plkovská",
  "Plojharova",
  "Ploskovická",
  "Ploučnická",
  "Plovdivská",
  "Plošná",
  "Ploštilova",
  "Plukovníka Mráze",
  "Plumlovská",
  "Plutova",
  "Plynární",
  "Plzeňská",
  "Plzeňská",
  "Plzeňská",
  "Plzeňská",
  "Plzeňská",
  "Plánická",
  "Pláničkova",
  "Poberova",
  "Pobočná",
  "Pobořská",
  "Poběžovická",
  "Pobřežní",
  "Pobřežní Cesta",
  "Pod Akáty",
  "Pod Altánem",
  "Pod Altánem",
  "Pod Andělkou",
  "Pod Areálem",
  "Pod Aritmou",
  "Pod Ateliéry",
  "Pod Bahnivkou",
  "Pod Balkánem",
  "Pod Barvířkou",
  "Pod Bateriemi",
  "Pod Baštami",
  "Pod Belvederem",
  "Pod Belárií",
  "Pod Beránkem",
  "Pod Beránkou",
  "Pod Betání",
  "Pod Bohdalcem I",
  "Pod Bohdalcem I",
  "Pod Bohdalcem Ii",
  "Pod Brentovou",
  "Pod Bruskou",
  "Pod Buďánkou",
  "Pod Bání",
  "Pod Březinou",
  "Pod Chaloupkami",
  "Pod Chodovem",
  "Pod Cihelnou",
  "Pod Cihelnou",
  "Pod Cukrákem",
  "Pod Císařkou",
  "Pod Dlážděnkou",
  "Pod Domky",
  "Pod Drinopolem",
  "Pod Dráhou",
  "Pod Duby",
  "Pod Dvorem",
  "Pod Dálnicí",
  "Pod Děkankou",
  "Pod Děkankou",
  "Pod Děvínem",
  "Pod Farou",
  "Pod Fialkou",
  "Pod Formankou",
  "Pod Fořtem",
  "Pod Garážemi",
  "Pod Habrovkou",
  "Pod Habrovou",
  "Pod Haltýřem",
  "Pod Harfou",
  "Pod Havlínem",
  "Pod Havránkou",
  "Pod Havránkou",
  "Pod Hliništěm",
  "Pod Hloubětínskou Zastávkou",
  "Pod Hláskem",
  "Pod Homolkou",
  "Pod Hotelem",
  "Pod Hořavkou",
  "Pod Hrachovkou",
  "Pod Hradbami",
  "Pod Hradem",
  "Pod Hranicí",
  "Pod Hrází",
  "Pod Hvězdou",
  "Pod Hvězdárnou",
  "Pod Hvězdárnou",
  "Pod Hybšmankou",
  "Pod Hájem",
  "Pod Hájkem",
  "Pod Hájovnou",
  "Pod Hřbitovem",
  "Pod Hřištěm",
  "Pod Jalovým Dvorem",
  "Pod Jankovem",
  "Pod Jarovem",
  "Pod Javory",
  "Pod Jiráskovou Čtvrtí",
  "Pod Juliskou",
  "Pod Kamínkou",
  "Pod Kapličkou",
  "Pod Kapličkou",
  "Pod Karlovarskou Silnicí",
  "Pod Karlovem",
  "Pod Kavalírkou",
  "Pod Kaštany",
  "Pod Kaštany",
  "Pod Kesnerkou",
  "Pod Kladenskou Silnicí",
  "Pod Klamovkou",
  "Pod Klapicí",
  "Pod Klaudiánkou",
  "Pod Klikovkou",
  "Pod Kopcem",
  "Pod Kostelem",
  "Pod Kotlaskou",
  "Pod Kotlářkou",
  "Pod Kotlářkou",
  "Pod Kotlářkou",
  "Pod Krejcárkem",
  "Pod Krocínkou",
  "Pod Královkou",
  "Pod Krčským Lesem",
  "Pod Kulturním Domem",
  "Pod Kynclovkou",
  "Pod Křížem",
  "Pod Křížkem",
  "Pod Labuťkou",
  "Pod Lahovskou",
  "Pod Lesem",
  "Pod Lesíkem",
  "Pod Letištěm",
  "Pod Lečí",
  "Pod Lipami",
  "Pod Lipkami",
  "Pod Lisem",
  "Pod Lisem",
  "Pod Lochkovem",
  "Pod Lomem",
  "Pod Lysinami",
  "Pod Lázní",
  "Pod Marjánkou",
  "Pod Markétou",
  "Pod Martinem",
  "Pod Meliškou",
  "Pod Mlýnkem",
  "Pod Mohylou",
  "Pod Mostem",
  "Pod Napětím",
  "Pod Nouzovem",
  "Pod Novou Školou",
  "Pod Novým Lesem",
  "Pod Novým Lesem",
  "Pod Nuselskými Schody",
  "Pod Náměstím",
  "Pod Náplavkou",
  "Pod Náplavkou",
  "Pod Náspem",
  "Pod Návsí",
  "Pod Oborou",
  "Pod Ovčínem",
  "Pod Ořechovkou",
  "Pod Palatou",
  "Pod Palírkou",
  "Pod Parukářkou",
  "Pod Paťankou",
  "Pod Paťankou",
  "Pod Pekařkou",
  "Pod Pekárnami",
  "Pod Petřinami",
  "Pod Plynojemem",
  "Pod Plynojemem",
  "Pod Plynojemem",
  "Pod Plískavou",
  "Pod Poštou",
  "Pod Pramenem",
  "Pod Prodejnou",
  "Pod Průsekem",
  "Pod Písečnou",
  "Pod Přehradou",
  "Pod Přesypem",
  "Pod Radnicí",
  "Pod Rapidem",
  "Pod Rapidem",
  "Pod Rapidem",
  "Pod Remízkem",
  "Pod Rovinou",
  "Pod Rozvodnou",
  "Pod Rybníkem",
  "Pod Rybníčkem",
  "Pod Sady",
  "Pod Salabkou",
  "Pod Sirénou",
  "Pod Skalkou",
  "Pod Skalou",
  "Pod Sklenářkou",
  "Pod Slovany",
  "Pod Smetankou",
  "Pod Sokolovnou",
  "Pod Soutratím",
  "Pod Spalovnou",
  "Pod Spiritkou",
  "Pod Spravedlností",
  "Pod Srázem",
  "Pod Stadiony",
  "Pod Stanicí",
  "Pod Starou Školou",
  "Pod Starákem",
  "Pod Statky",
  "Pod Strašnickou Vinicí",
  "Pod Strojírnami",
  "Pod Strání",
  "Pod Studánkou",
  "Pod Stupni",
  "Pod Stárkou",
  "Pod Stárkou",
  "Pod Stírkou",
  "Pod Svahem",
  "Pod Sychrovem I",
  "Pod Sychrovem I",
  "Pod Sychrovem I",
  "Pod Sychrovem Ii",
  "Pod Sídlištěm",
  "Pod Terasami",
  "Pod Terebkou",
  "Pod Topoly",
  "Pod Tratí",
  "Pod Turnovskou Tratí",
  "Pod Turnovskou Tratí",
  "Pod Táborem",
  "Pod Táborem",
  "Pod Třebešínem",
  "Pod Třešněmi",
  "Pod Třešňovkou",
  "Pod Urnovým Hájem",
  "Pod Valem",
  "Pod Vartou",
  "Pod Vavřincem",
  "Pod Velkým Hájem",
  "Pod Viaduktem",
  "Pod Vidoulí",
  "Pod Viktorkou",
  "Pod Vilami",
  "Pod Vinicemi",
  "Pod Vinicí",
  "Pod Vinohradem",
  "Pod Višňovkou",
  "Pod Vlachovkou",
  "Pod Vlastním Krovem",
  "Pod Vlkem",
  "Pod Vodojemem",
  "Pod Vodovodem",
  "Pod Vodárenskou Věží",
  "Pod Vrchem",
  "Pod Vrcholem",
  "Pod Vrstevnicí",
  "Pod Vrškem",
  "Pod Vrškem",
  "Pod Vršovickou Vodárnou I",
  "Pod Vršovickou Vodárnou Ii",
  "Pod Vršovickou Vodárnou Iii",
  "Pod Vsí",
  "Pod Vyhlídkou",
  "Pod Vysokou",
  "Pod Vysokou Mezí",
  "Pod Vysílačkou",
  "Pod Vyšehradem",
  "Pod Václavem",
  "Pod Vítkovem",
  "Pod Výtopnou",
  "Pod Výšinkou",
  "Pod Větrolamem",
  "Pod Větrovem",
  "Pod Věží",
  "Pod Zahradami",
  "Pod Zahrádkami",
  "Pod Zastávkou",
  "Pod Zatáčkou",
  "Pod Zbuzany",
  "Pod Zemankou",
  "Pod Zličínem",
  "Pod Zvonařkou",
  "Pod Zvoničkou",
  "Pod Zámečkem",
  "Pod Závěrkou",
  "Pod Útesy",
  "Pod Čertovou Skalou",
  "Pod Čihadlem",
  "Pod Čimickým Hájem",
  "Pod Šancemi",
  "Pod Školou",
  "Pod Šmukýřkou",
  "Pod Špejcharem",
  "Pod Špitálem",
  "Pod Štěpem",
  "Pod Žvahovem",
  "Podbabská",
  "Podbabská",
  "Podbělohorská",
  "Podbělová",
  "Podchýšská",
  "Podedvorská",
  "Podhajská Pole",
  "Podholí",
  "Podhorská",
  "Podhořská",
  "Podivínská",
  "Podjavorinské",
  "Podjezd",
  "Podkovářská",
  "Podkrkonošská",
  "Podkrkonošských Tkalců",
  "Podle Kačerova",
  "Podle Lomu",
  "Podle Lomu",
  "Podle Náhonu",
  "Podle Náhonu",
  "Podle Sadů",
  "Podle Trati",
  "Podlesek",
  "Podleská",
  "Podlesní",
  "Podlešínská",
  "Podlibská",
  "Podlipného",
  "Podlišovská",
  "Podlužanská",
  "Podléšková",
  "Podnikatelská",
  "Podnádražní",
  "Podohradská",
  "Podolanská",
  "Podolská",
  "Podolská",
  "Podolské Nábř.",
  "Podolské Nábřeží",
  "Podolské Schody",
  "Podpěrova",
  "Podskalská",
  "Podsychrovská",
  "Podvinný Mlýn",
  "Podvinný Mlýn",
  "Podzámecká",
  "Podéšťova",
  "Poděbradova",
  "Poděbradova",
  "Poděbradská",
  "Poděbradská",
  "Poděbradská",
  "Podůlší",
  "Pohledná",
  "Pohnertova",
  "Pohořelec",
  "Pohořelec",
  "Pokojná",
  "Pokorného",
  "Pokřivená",
  "Polabská",
  "Polabská",
  "Polaneckého",
  "Polední",
  "Polední",
  "Polenská",
  "Polepská",
  "Poleradská",
  "Polesná",
  "Polešovická",
  "Politických Vězňů",
  "Poličanská",
  "Poljanovova",
  "Polní",
  "Polovnická",
  "Polská",
  "Polygrafická",
  "Polákova",
  "Poláčkova",
  "Políkenská",
  "Polívkova",
  "Pomezní",
  "Pomněnková",
  "Pomořanská",
  "Ponrepova",
  "Poplužní",
  "Popovická",
  "Popovova",
  "Poslední",
  "Pospíchalova",
  "Pospíšilova",
  "Postlova",
  "Postranní",
  "Postupická",
  "Postřekovská",
  "Postřižínská",
  "Postřižínská",
  "Potocká",
  "Potoční",
  "Pouchova",
  "Poupětova",
  "Poustka",
  "Povltavská",
  "Povltavská",
  "Povltavská",
  "Povodňová",
  "Pozdeňská",
  "Poznaňská",
  "Počeradská",
  "Počernická",
  "Počernická",
  "Počátecká",
  "Počátecká",
  "Poříčanská",
  "Poříčanská",
  "Poříčská",
  "Pošepného Nám.",
  "Pošepného Náměstí",
  "Poštovská",
  "Požárnická",
  "Pplk. Nováčka",
  "Pplk. Sochora",
  "Prachatická",
  "Prachnerova",
  "Prachovická",
  "Prachovská",
  "Pramenná",
  "Pramenná",
  "Pravoúhlá",
  "Pravská",
  "Pravá",
  "Prašná",
  "Pražská",
  "Pražského",
  "Pražského Povstání",
  "Pražský Okruh",
  "Pražákovská",
  "Prefátova",
  "Preislerova",
  "Preláta",
  "Prelátská",
  "Preslova",
  "Primátorská",
  "Probluzská",
  "Proboštská",
  "Procházkova",
  "Prodloužená",
  "Prokofjevova",
  "Prokopka",
  "Prokopova",
  "Prokopovo Nám.",
  "Prokopovo Náměstí",
  "Prokopových",
  "Prokopská",
  "Prokopské Údolí",
  "Prokopské Údolí",
  "Prorektorská",
  "Prosecká",
  "Prosecká",
  "Prosecká",
  "Prosincová",
  "Prosluněná",
  "Prosná",
  "Prostřední",
  "Proti Proudu",
  "Protilehlá",
  "Protivínská",
  "Proutěná",
  "Prouzova",
  "Provaznická",
  "Provozní",
  "Prunéřovská",
  "Prusická",
  "Prusíkova",
  "Prušánecká",
  "Prvního Pluku",
  "Prvního Pluku",
  "Prvomájová",
  "Prácheňská",
  "Práčská",
  "Průběžná",
  "Průchodní",
  "Průchova",
  "Průhledová",
  "Průhonek",
  "Průhonek",
  "Průhonická",
  "Průhonská",
  "Průjezdná",
  "Průmyslová",
  "Průmyslová",
  "Průmyslová",
  "Průmyslová",
  "Průtažní",
  "Průčelní",
  "Průškova",
  "Psohlavců",
  "Pstružná",
  "Psárská",
  "Ptáčnická",
  "Puchmajerova",
  "Puchmajerova",
  "Pujmanové",
  "Pujmanové",
  "Pujmanové",
  "Purkrabská",
  "Purkyňova",
  "Putimská",
  "Pučova",
  "Puškinovo Nám.",
  "Puškinovo Náměstí",
  "Pyšelská",
  "Pálavská",
  "Pálkařská",
  "Pámelníková",
  "Pánkova",
  "Pátkova",
  "Pávovské Náměstí",
  "Písecká",
  "Píseckého",
  "Písečná",
  "Pískařská",
  "Pískovcová",
  "Pískovna",
  "Písková",
  "Písnická",
  "Písnická",
  "Písnické Zahrady",
  "Písčitá",
  "Píškova",
  "Píšovická",
  "Pöslova",
  "Púchovská",
  "Púchovská",
  "Pýchavková",
  "Pýrová",
  "Pěnkaví",
  "Pěstitelská",
  "Pětidomí",
  "Pětipeského",
  "Pěší",
  "Přecechtělova",
  "Přechodní",
  "Před Cibulkami",
  "Před Dráhou",
  "Před Mosty",
  "Před Nádražím",
  "Před Oborou",
  "Před Rybníkem",
  "Před Skalkami I",
  "Před Skalkami Ii",
  "Před Skálou",
  "Před Sokolovnou",
  "Před Tratí",
  "Před Ústavem",
  "Předbořská",
  "Předměřická",
  "Přední",
  "Předpolní",
  "Předposlední",
  "Předvoje",
  "Předvoje",
  "Předškolní",
  "Přeletová",
  "Přeloučská",
  "Přemyslova",
  "Přemyslovská",
  "Přemyslovská",
  "Přemyšlenská",
  "Přerušená",
  "Přesličková",
  "Přespolní",
  "Přetlucká",
  "Přeučilova",
  "Převoznická",
  "Přezletická",
  "Přeštická",
  "Přeštínská",
  "Přeťatá",
  "Při Hranici",
  "Při Hranici",
  "Při Trati",
  "Přibyslavská",
  "Přibíkova",
  "Přistoupimská",
  "Přádova",
  "Přátelství",
  "Příborská",
  "Příbramská",
  "Příběnická",
  "Příchovická",
  "Přídolská",
  "Příkrá",
  "Přílepská",
  "Přímské Nám.",
  "Přímské Náměstí",
  "Přímá",
  "Přímětická",
  "Přípotoční",
  "Přípřežní",
  "Přírodní",
  "Přístavní",
  "Přívorská",
  "Přívozní",
  "Příčka",
  "Příčná",
  "Pšeničná",
  "Pšenčíkova",
  "Pšovanská",
  "Pštrossova",
  "Půdova",
  "Půlkruhová",
  "Půlnoční",
  "Půtova",
  "R.A. Dvorského",
  "Rabasova",
  "Rabyňská",
  "Rackova",
  "Rackova Zahrada",
  "Radbuzská",
  "Radechovská",
  "Radešovská",
  "Radhošťská",
  "Radhošťská",
  "Radimova",
  "Radimovická",
  "Radimská",
  "Radiová",
  "Radiová",
  "Radistů",
  "Radkovská",
  "Radlická",
  "Radlická",
  "Radlická",
  "Radnické Schody",
  "Radomská",
  "Radonická",
  "Radostavická",
  "Radostná",
  "Radotínská",
  "Radotínská",
  "Radouňova",
  "Radouňova",
  "Radouňova",
  "Radova",
  "Radovská",
  "Radošovická",
  "Radvanická",
  "Radúzova",
  "Radčina",
  "Radějovská",
  "Raffaelova",
  "Raichlova",
  "Raisova",
  "Rajhradská",
  "Rajmonova",
  "Rajská",
  "Rakousova",
  "Rakovnická",
  "Rakovského",
  "Randova",
  "Ranská",
  "Ratajova",
  "Ratajská",
  "Ratbořská",
  "Ratibořická",
  "Ratibořská",
  "Ratibořská",
  "Ravennská",
  "Račická",
  "Račiněveská",
  "Rašilovova",
  "Rašova",
  "Rašovická",
  "Rašovská",
  "Rašínovo Nábř.",
  "Rašínovo Nábř.",
  "Rašínovo Nábřeží",
  "Rašínovo Nábřeží",
  "Rašínská",
  "Ražická",
  "Reinerova",
  "Rejchova",
  "Rejskova",
  "Rekreační",
  "Rektorská",
  "Rembrandtova",
  "Remízková",
  "Renoirova",
  "Resslova",
  "Revoluce",
  "Revoluční",
  "Revoluční",
  "Rezedová",
  "Rezlerova",
  "Rečkova",
  "Richtrova",
  "Riegrova",
  "Riegrovy Sady",
  "Rilská",
  "Ringhofferova",
  "Ringhofferova",
  "Rižská",
  "Roblínská",
  "Rochovská",
  "Rochovská",
  "Rodopská",
  "Rodovská",
  "Rodvinovská",
  "Roentgenova",
  "Rohanovská",
  "Rohanské Nábřeží",
  "Rohanský Ostrov",
  "Rohatecká",
  "Rohenická",
  "Rohlovská",
  "Rohová",
  "Rohozecká",
  "Rohožnická",
  "Roháčova",
  "Roithova",
  "Rojická",
  "Roklova",
  "Rokycanova",
  "Rokycanská",
  "Rokytnická",
  "Rokytná",
  "Rolnická",
  "Rolní",
  "Romaina Rollanda",
  "Romana Blahníka",
  "Ronalda Reagana",
  "Ronešova",
  "Ronkova",
  "Ronovská",
  "Rooseveltova",
  "Rorýsová",
  "Rosečská",
  "Rosická",
  "Rostislavova",
  "Rostoklatská",
  "Rostovská",
  "Rotavská",
  "Rotenská",
  "Roudnická",
  "Rousovická",
  "Rousínovská",
  "Rovenská",
  "Rovnoběžná",
  "Rovná",
  "Rozdělená",
  "Rozdělovská",
  "Rozhovická",
  "Rozkošného",
  "Rozkošská",
  "Rozmarýnová",
  "Rozrazilová",
  "Roztocká",
  "Roztylská",
  "Roztylské Náměstí",
  "Roztylské Sady",
  "Rozvadovská",
  "Rozvodova",
  "Rozvojová",
  "Rozárčina",
  "Rozýnova",
  "Rozšířená",
  "Ročovská",
  "Rošických",
  "Roškotova",
  "Rošovická",
  "Rožmberská",
  "Rožmitálská",
  "Rožnovská",
  "Rožďalovická",
  "Rtyňská",
  "Rubensova",
  "Rubeška",
  "Rubešova",
  "Rubličova",
  "Rubínová",
  "Rudečská",
  "Rudníkovská",
  "Rudolfa Holeky",
  "Rudoltická",
  "Rudoltická",
  "Rujanská",
  "Rumburská",
  "Rumunská",
  "Rumunská",
  "Ruprechtická",
  "Ruská",
  "Ruská",
  "Ruzyňská",
  "Ruzyňská",
  "Ruzyňské Schody",
  "Ružinovská",
  "Rybalkova",
  "Rybalkova",
  "Rybalkova",
  "Rybničná",
  "Rybná",
  "Rybova",
  "Rybářská",
  "Rybízová",
  "Rychnovská",
  "Rychtáře Petříka",
  "Rychtáře Šimona",
  "Rychtářská",
  "Rypkova",
  "Rytířova",
  "Rytířská",
  "Ryzcová",
  "Ryzlinková",
  "Ryšánkova",
  "Rájecká",
  "Rámová",
  "Rápošovská",
  "Rážova",
  "Révová",
  "Rýmařovská",
  "Rýnská",
  "Rýznerova",
  "Růženínová",
  "Růženínská",
  "Růženínská",
  "Růžová",
  "S. K. Neumanna",
  "Sabinova",
  "Sadařská",
  "Sadová",
  "Sadská",
  "Sadská",
  "Sady Bratří Čapků",
  "Safírová",
  "Salabova",
  "Salačova",
  "Salmovská",
  "Salvátorská",
  "Samcova",
  "Samohelova",
  "Samota U Podleského Rybníka",
  "Sarajevská",
  "Saratovská",
  "Sartoriova",
  "Sasanková",
  "Saská",
  "Satalická",
  "Saturnova",
  "Saudkova",
  "Sauerova",
  "Saveljevova",
  "Savojská",
  "Sazečská",
  "Sazečská",
  "Sazovická",
  "Sbíhavá I",
  "Sbíhavá Ii",
  "Schnirchova",
  "Schodišťová",
  "Schodová",
  "Schoellerova",
  "Schoellerova",
  "Schulhoffova",
  "Schwaigerova",
  "Schwarzenberská",
  "Schöfflerova",
  "Sdružení",
  "Sechterova",
  "Sedlecká",
  "Sedlovická",
  "Sedloňovská",
  "Sedlčanská",
  "Sedmidomky",
  "Sedmidomky",
  "Sedmikrásková",
  "Sedmnáctého Listopadu",
  "Seidlova",
  "Seifertova",
  "Sekaninova",
  "Sekeřická",
  "Sekorova",
  "Selmická",
  "Selská",
  "Selských Baterií",
  "Semanského",
  "Semická",
  "Semilská",
  "Semilská",
  "Seminární",
  "Seminářská",
  "Seminářská Zahrada",
  "Semonická",
  "Semtínská",
  "Semčická",
  "Sendražická",
  "Senegalská",
  "Senohrabská",
  "Senovážná",
  "Senovážné Nám.",
  "Senovážné Náměstí",
  "Senožatská",
  "Sestupná",
  "Sestupná",
  "Setbová",
  "Sevastopolská",
  "Severní I",
  "Severní Ii",
  "Severní Iii",
  "Severní Iv",
  "Severní Ix",
  "Severní V",
  "Severní Vi",
  "Severní Vii",
  "Severní Viii",
  "Severní X",
  "Severní Xi",
  "Severovýchodní I",
  "Severovýchodní Ii",
  "Severovýchodní Iii",
  "Severovýchodní Iv",
  "Severovýchodní V",
  "Severovýchodní Vi",
  "Severozápadní I",
  "Severozápadní Ii",
  "Severozápadní Iii",
  "Severozápadní Iv",
  "Severozápadní V",
  "Severozápadní Vi",
  "Severýnova",
  "Sevřená",
  "Seydlerova",
  "Sezemická",
  "Sezemínská",
  "Sezimova",
  "Sečská",
  "Sibeliova",
  "Sibiřské Nám.",
  "Sibiřské Náměstí",
  "Sicherova",
  "Sichrovského",
  "Siemensova",
  "Silurská",
  "Sinkulova",
  "Sinkulova",
  "Sitteho",
  "Siwiecova",
  "Skalecká",
  "Skalnatá",
  "Skalnická",
  "Skalní",
  "Skalská",
  "Skaláků",
  "Skandinávská",
  "Skandinávská",
  "Skautská",
  "Sklenská",
  "Skloněná",
  "Sklářská",
  "Skokanská",
  "Skorkovská",
  "Skorkovská",
  "Skotská",
  "Skořepka",
  "Skořicová",
  "Skryjská",
  "Skupova",
  "Skuteckého",
  "Skálova",
  "Skřivanova",
  "Skřivanská",
  "Skřivánčí",
  "Sladkovského Nám.",
  "Sladkovského Náměstí",
  "Sladovnická",
  "Slancova",
  "Slaná",
  "Slapská",
  "Slatinová",
  "Slatinská",
  "Slatiny",
  "Slatiňanská",
  "Slavatova",
  "Slaviborské Nám.",
  "Slaviborské Náměstí",
  "Slavická",
  "Slavičí",
  "Slavičínská",
  "Slavníkova",
  "Slavojova",
  "Slavonická",
  "Slavíkova",
  "Slavíkova",
  "Slavíkova",
  "Slavínského",
  "Slavíčkova",
  "Slavětínská",
  "Slepá I",
  "Slepá Ii",
  "Slezanů",
  "Slezská",
  "Slezská",
  "Sliačská",
  "Sliačská",
  "Slibná",
  "Slinková",
  "Slivenecká",
  "Slovanský Ostrov",
  "Slovačíkova",
  "Slovenská",
  "Slovenská",
  "Slovinská",
  "Slunečnicová",
  "Slunečná",
  "Sluneční",
  "Sluneční Nám.",
  "Sluneční Náměstí",
  "Slunná",
  "Sluštická",
  "Služeb",
  "Služeb",
  "Služská",
  "Sládkova",
  "Sládkovičova",
  "Slámova",
  "Slánská",
  "Slávy Horníka",
  "Slévačská",
  "Slévačská",
  "Slévačská",
  "Slídová",
  "Slívová",
  "Smaragdová",
  "Smetanovo Nábř.",
  "Smetanovo Nábřeží",
  "Smetáčkova",
  "Smidarská",
  "Smikova",
  "Smiřická",
  "Smiřického",
  "Smolenská",
  "Smolkova",
  "Smolíkova",
  "Smotlachova",
  "Smotlachova",
  "Smrková",
  "Smrčinská",
  "Smržovská",
  "Smržová",
  "Smíchovská",
  "Smíchovská",
  "Smíchovská",
  "Smírná",
  "Snopkova",
  "Sněmovní",
  "Sněženková",
  "Sněžná",
  "Sobolákova",
  "Soborská",
  "Sobotecká",
  "Sobínská",
  "Soběslavova",
  "Soběslavská",
  "Sobětická",
  "Sobětušská",
  "Soběšínská",
  "Sochařská",
  "Socháňova",
  "Sodomkova",
  "Sofijské Nám.",
  "Sofijské Náměstí",
  "Sojkovská",
  "Sojovická",
  "Sojčí",
  "Sojčí",
  "Sokolovská",
  "Sokolovská",
  "Sokolovská",
  "Sokolovská",
  "Sokolská",
  "Sokratova",
  "Solidarity",
  "Solnická",
  "Solná",
  "Sopotská",
  "Sosnovecká",
  "Souběžná I",
  "Souběžná Ii",
  "Souběžná Iii",
  "Souběžná Iv",
  "Soudní",
  "Soukalova",
  "Soukenická",
  "Soumarská",
  "Sousední",
  "Sousední",
  "Sousedská",
  "Sousedíkova",
  "Soustružnická",
  "Soustružnická",
  "Souvratní",
  "Součkova",
  "Sovenická",
  "Sovova",
  "Sovákova",
  "Soví Vršek",
  "Spinozova",
  "Spiritka",
  "Splavná",
  "Spodní",
  "Spojařů",
  "Spojenců",
  "Spojená",
  "Spojná",
  "Spojovací",
  "Spojovací",
  "Spojovací",
  "Spojovací",
  "Spojová",
  "Společná",
  "Spolská",
  "Spolupráce",
  "Sportovců",
  "Sportovců",
  "Sportovní",
  "Spotřebitelská",
  "Spořická",
  "Spořilovská",
  "Spytihněvova",
  "Spádná",
  "Spádová",
  "Spálená",
  "Spálená",
  "Spálený Mlýn",
  "Srbova",
  "Srbská",
  "Srbínská",
  "Srnečkova",
  "Srnčí",
  "Srnčí",
  "Srpnová",
  "Srázná",
  "Stachova",
  "Stadická",
  "Stadionová",
  "Stadiónová",
  "Stallichova",
  "Stamicova",
  "Staniční",
  "Starobylá",
  "Starochodovská",
  "Starochuchelská",
  "Starodejvická",
  "Starodubečská",
  "Starodvorská",
  "Staroklánovická",
  "Starokolínská",
  "Starokošířská",
  "Starolázeňská",
  "Staromlýnská",
  "Staromodřanská",
  "Staroměstské Nám.",
  "Staroměstské Náměstí",
  "Staropacká",
  "Staropramenná",
  "Starostrašnická",
  "Starostřešovická",
  "Starosuchdolská",
  "Staroújezdská",
  "Staročeská",
  "Stará Cesta",
  "Stará Náves",
  "Stará Obec",
  "Stará Spojovací",
  "Stará Stodůlecká",
  "Staré Nám.",
  "Staré Náměstí",
  "Staré Zámecké Schody",
  "Staré Zámecké Schody",
  "Starého",
  "Starý Lis",
  "Statenická",
  "Statková",
  "Stavbařů",
  "Stavební",
  "Stavitelská",
  "Stavovská",
  "Staňkova",
  "Staňkovka",
  "Staňkovská",
  "Stehlíkova",
  "Steinerova",
  "Stejskalova",
  "Stiessova",
  "Stinkovská",
  "Stochovská",
  "Stodůlecká",
  "Stojická",
  "Stoličkova",
  "Stoliňská",
  "Stoupající",
  "Stoupající",
  "Stradonická",
  "Strahovská",
  "Strahovské Nádvoří",
  "Strakatého",
  "Strakonická",
  "Strakonická",
  "Strakonická",
  "Strakonická",
  "Strakonická",
  "Strakonická",
  "Strakošová",
  "Strančická",
  "Stratovská",
  "Strašnická",
  "Strašnická",
  "Strašovská",
  "Strašínská",
  "Strmá",
  "Strmý Vrch",
  "Strnadova",
  "Strnady",
  "Strojická",
  "Strojnická",
  "Strojírenská",
  "Stromovka",
  "Stromovka",
  "Stropnická",
  "Stropnická",
  "Stropnická",
  "Strossmayerovo Nám.",
  "Strossmayerovo Náměstí",
  "Strouhalova",
  "Stroupežnického",
  "Struhařovská",
  "Strunkovská",
  "Stružky",
  "Stružná",
  "Strážkovická",
  "Strážnická",
  "Strážní",
  "Strážovská",
  "Stržná",
  "Studenecká",
  "Studentská",
  "Studená",
  "Studnická",
  "Studničkova",
  "Studniční",
  "Studánková",
  "Stulíková",
  "Stupická",
  "Stupkova",
  "Stupská",
  "Stupňová",
  "Stádlecká",
  "Stárkova",
  "Stýblova",
  "Střední",
  "Středohorská",
  "Středová",
  "Střekovská",
  "Střelecký Ostrov",
  "Střelečská",
  "Střelničná",
  "Střelničná",
  "Střemchová",
  "Střešovická",
  "Střešovická",
  "Střimelická",
  "Stříbrná",
  "Stříbrského",
  "Stříbrského",
  "Střížkovská",
  "Střížkovská",
  "Střížkovská",
  "Suchardova",
  "Suchdolská",
  "Suchdolská",
  "Suchdolská",
  "Suchdolské Nám.",
  "Suchdolské Náměstí",
  "Suchý Vršek",
  "Sudkova",
  "Sudoměřská",
  "Sudějovická",
  "Sukova",
  "Sulanského",
  "Sulická",
  "Sulická",
  "Sulova",
  "Sulovická",
  "Sumova",
  "Suppého",
  "Suttnerové",
  "Sušická",
  "Sušilova",
  "Svahová",
  "Svatavina",
  "Svatojánská",
  "Svatoplukova",
  "Svatoslavova",
  "Svatovítská",
  "Svatovítská",
  "Svatoňovická",
  "Svažitá",
  "Svijanská",
  "Svitavská",
  "Svitákova",
  "Svobodova",
  "Svobodova",
  "Svojetická",
  "Svojsíkova",
  "Svojšická",
  "Svojšovická",
  "Svornosti",
  "Svratecká",
  "Svárovská",
  "Svátkova",
  "Svážná",
  "Svépomoci",
  "Svépomocná",
  "Svépravická",
  "Svépravická",
  "Svídnická",
  "Svěceného",
  "Světická",
  "Světova",
  "Světská",
  "Sychrovská",
  "Symfonická",
  "Synkovická",
  "Synkovská",
  "Syrská",
  "Sádky",
  "Sádovská",
  "Sámova",
  "Sárská",
  "Sárská",
  "Sárská",
  "Sázavská",
  "Sáňkařská",
  "Sídlištní",
  "Sídlištní",
  "Sídliště",
  "Súdánská",
  "Sýkorčí",
  "Sýkovecká",
  "Tachlovická",
  "Tachovská",
  "Tachovské Nám.",
  "Tachovské Náměstí",
  "Tadrova",
  "Tajovského",
  "Talafúsova",
  "Talichova",
  "Talmberská",
  "Tanvaldská",
  "Tasovská",
  "Tatarkova",
  "Tatranská",
  "Tauerova",
  "Tauferova",
  "Taussigova",
  "Tavolníková",
  "Tařicová",
  "Taškentská",
  "Technická",
  "Technologická",
  "Tehovská",
  "Tejnická",
  "Tejnka",
  "Telčská",
  "Templová",
  "Tenisová",
  "Teplická",
  "Teplárenská",
  "Teplárenská",
  "Terasovitá",
  "Tererova",
  "Terezínská",
  "Terronská",
  "Tesaříkova",
  "Tetínská",
  "Theinova",
  "Thomayerova",
  "Thunovská",
  "Thurnova",
  "Thákurova",
  "Thámova",
  "Tibetská",
  "Tichnova",
  "Tichnova",
  "Tichonická",
  "Tichá",
  "Tichého",
  "Tigridova",
  "Tikovská",
  "Tilleho Nám.",
  "Tilleho Náměstí",
  "Tilschové",
  "Tiskařská",
  "Tismická",
  "Tišická",
  "Tlumačovská",
  "Tlustého",
  "Tobrucká",
  "Tolstého",
  "Tomanova",
  "Tomická",
  "Tomkova",
  "Tomsova",
  "Tomáškova",
  "Tomášská",
  "Tomíčkova",
  "Topasová",
  "Topolová",
  "Toruňská",
  "Toulovská",
  "Toušeňská",
  "Toušická",
  "Toužimská",
  "Toužimská",
  "Tovarova",
  "Tovačovského",
  "Tovární",
  "Točenská",
  "Točitá",
  "Trabantská",
  "Trachtova",
  "Trampotova",
  "Travnatá",
  "Travná",
  "Travná",
  "Trenčínská",
  "Trhanovské Náměstí",
  "Trmická",
  "Trnavská",
  "Trnavská",
  "Trnitá",
  "Trnkovo Nám.",
  "Trnkovo Náměstí",
  "Trnková",
  "Trnovanská",
  "Trní",
  "Trocnovská",
  "Troilova",
  "Trojanova",
  "Trojanův Mlýn",
  "Trojdílná",
  "Trojická",
  "Trojmezní",
  "Trojmezní",
  "Trojská",
  "Trojská",
  "Trojská",
  "Trojská",
  "Troskovická",
  "Trousilova",
  "Truhlářka",
  "Truhlářova",
  "Truhlářská",
  "Trutnovská",
  "Tryskovická",
  "Tryskovická",
  "Trytova",
  "Trávnická",
  "Trávníčkova",
  "Tréglova",
  "Tržiště",
  "Tuchoměřická",
  "Tuchorazská",
  "Tuchotická",
  "Tuháňská",
  "Tuklatská",
  "Tulešická",
  "Tulipánová",
  "Tulkova",
  "Tulská",
  "Tunelářů",
  "Tuniská",
  "Tupolevova",
  "Turgeněvova",
  "Turistická",
  "Turkmenská",
  "Turkovická",
  "Turkovská",
  "Turnovská",
  "Turnovského",
  "Turská",
  "Turínská",
  "Tusarova",
  "Tuřická",
  "Tušimická",
  "Tužebníková",
  "Tvrdonická",
  "Tvrdého",
  "Tychonova",
  "Tylišovská",
  "Tylovická",
  "Tylovo Nám.",
  "Tylovo Náměstí",
  "Tymiánová",
  "Tyrkysová",
  "Tyršova",
  "Táboritská",
  "Táborská",
  "Tádžická",
  "Táhlá",
  "Tálínská",
  "Türkova",
  "Týmlova",
  "Týmlova",
  "Týn",
  "Týnecká",
  "Týnská",
  "Týnská Ulička",
  "Týřovická",
  "Tělovýchovná",
  "Těšnov",
  "Těšovická",
  "Těšíkova",
  "Těšínská",
  "Třanovského",
  "Třebanická",
  "Třebechovická",
  "Třebenická",
  "Třebešovská",
  "Třebihošťská",
  "Třebohostická",
  "Třebonická",
  "Třeboradická",
  "Třebotovská",
  "Třeboňská",
  "Třebízského",
  "Třebějická",
  "Třebětínská",
  "Třešňová",
  "Třešňová",
  "Třešňová",
  "Třinecká",
  "Třtinová",
  "Třídomá",
  "Třístoličná",
  "Tůmova",
  "U Akademie",
  "U Akátů",
  "U Albrechtova Vrchu",
  "U Andělky",
  "U Arborky",
  "U Bakaláře",
  "U Balabenky",
  "U Bazénu",
  "U Bažantnice",
  "U Berounky",
  "U Beránky",
  "U Besedy",
  "U Blaženky",
  "U Boroviček",
  "U Botiče",
  "U Botiče",
  "U Božích Bojovníků",
  "U Branek",
  "U Bruských Kasáren",
  "U Brusnice",
  "U Brusnice",
  "U Bubce",
  "U Bulhara",
  "U Bulhara",
  "U Bílého Mlýnku",
  "U Břehu",
  "U Chaloupek",
  "U Chmelnice",
  "U Chodovského Hřbitova",
  "U Cibulky",
  "U Cihelny",
  "U Cikánky",
  "U Cukrovaru",
  "U Císařské Cesty",
  "U Dejvického Rybníčku",
  "U Demartinky",
  "U Divadla",
  "U Divadla",
  "U Dobešky",
  "U Dobráků",
  "U Dobráků",
  "U Dobřenských",
  "U Domu Služeb",
  "U Drahaně",
  "U Druhé Baterie",
  "U Druhé Baterie",
  "U Drupolu",
  "U Družstev",
  "U Družstva Ideál",
  "U Družstva Klid",
  "U Družstva Práce",
  "U Družstva Práce",
  "U Družstva Repo",
  "U Družstva Tempo",
  "U Družstva Život",
  "U Dráhy",
  "U Dráhy",
  "U Drážky",
  "U Drůbežárny",
  "U Dubečské Tvrze",
  "U Dubu",
  "U Dvojdomů",
  "U Dvora",
  "U Dvou Srpů",
  "U Dálnice",
  "U Dívčích Hradů",
  "U Dívčích Hradů",
  "U Děkanky",
  "U Dělnického Cvičiště",
  "U Dětského Domova",
  "U Dětského Hřiště",
  "U Elektry",
  "U Elektry",
  "U Elektrárny",
  "U Floriána",
  "U Fořta",
  "U Gabrielky",
  "U Garáží",
  "U Golfu",
  "U Gymnázia",
  "U Habeše",
  "U Habrovky",
  "U Hadovky",
  "U Harfy",
  "U Hasičské Zbrojnice",
  "U Hasičské Zbrojnice",
  "U Havlíčkových Sadů",
  "U Hellady",
  "U Hercovky",
  "U Hliníku",
  "U Hodin",
  "U Homolky",
  "U Hostavického Potoka",
  "U Hostivařského Nádraží",
  "U Hostivařského Nádraží",
  "U Hotelu",
  "U Hranic",
  "U Hrnčířského Rybníka",
  "U Hrocha",
  "U Hrušky",
  "U Hráze",
  "U Hudební Školy",
  "U Hvozdu",
  "U Hvězdy",
  "U Hvězdy",
  "U Háje",
  "U Hájku",
  "U Hájovny",
  "U Házů",
  "U Hřbitovů",
  "U Hřiště",
  "U Invalidovny",
  "U Jamské",
  "U Jankovky",
  "U Javoru",
  "U Jedličkova Ústavu",
  "U Jednoty",
  "U Jeslí",
  "U Jezera",
  "U Jezerky",
  "U Jezu",
  "U Jezírka",
  "U Jinonického Rybníčka",
  "U Jirkovské",
  "U Jizby",
  "U Járku",
  "U Jízdárny",
  "U Kabelovny",
  "U Kabelovny",
  "U Kaménky",
  "U Kamýku",
  "U Kanálky",
  "U Kapliček",
  "U Kapličky",
  "U Karlova Stánku",
  "U Kasáren",
  "U Kavalírky",
  "U Kazína",
  "U Kašny",
  "U Kaštanu",
  "U Kempinku",
  "U Kina",
  "U Klavírky",
  "U Klikovky",
  "U Klimentky",
  "U Kloubových Domů",
  "U Klubovny",
  "U Klubu",
  "U Kněžské Louky",
  "U Kola",
  "U Kolejí",
  "U Kolejí",
  "U Koloděj",
  "U Kolonie",
  "U Koloniálu",
  "U Kombinátu",
  "U Konečné",
  "U Koní",
  "U Kosinů",
  "U Kostela",
  "U Kostrounku",
  "U Kotlářky",
  "U Koupadel",
  "U Košíku",
  "U Krbu",
  "U Krbu",
  "U Krelovy Studánky",
  "U Kruhovky",
  "U Královské Louky",
  "U Krčské Vodárny",
  "U Krčského Nádraží",
  "U Kublova",
  "U Kunratického Lesa",
  "U Křižovatky",
  "U Kříže",
  "U Kříže",
  "U Křížku",
  "U Laboratoře",
  "U Ladronky",
  "U Lanové Dráhy",
  "U Ledáren",
  "U Lesa",
  "U Lesa",
  "U Lesíka",
  "U Letenského Sadu",
  "U Letiště",
  "U Letohrádku Královny Anny",
  "U Libeňského Pivovaru",
  "U Libeňského Zámku",
  "U Libušiných Lázní",
  "U Libušské Sokolovny",
  "U Lidového Domu",
  "U Lip",
  "U Lipové Aleje",
  "U Lisu",
  "U Loděnice",
  "U Lomu",
  "U Loskotů",
  "U Louky",
  "U Lužického Semináře",
  "U Lázeňky",
  "U Lázní",
  "U Lékárny",
  "U Líhní",
  "U Lípy",
  "U Malvazinky",
  "U Malé Řeky",
  "U Markéty",
  "U Mateřské Školy",
  "U Matěje",
  "U Maří Magdaleny",
  "U Meteoru",
  "U Mezníku",
  "U Michelské Školy",
  "U Michelského Lesa",
  "U Michelského Lesa",
  "U Michelského Mlýna",
  "U Milosrdných",
  "U Mlýna",
  "U Mlýna",
  "U Mlýnského Rybníka",
  "U Modré Školy",
  "U Modřanské Školy",
  "U Močálu",
  "U Mrázovky",
  "U Mydlárny",
  "U Myslivny",
  "U Městských Domů",
  "U Měšťanského Pivovaru",
  "U Měšťanských Škol",
  "U Nadýmače",
  "U Nemocenské Pojišťovny",
  "U Nemocnice",
  "U Nesypky",
  "U Nikolajky",
  "U Nové Dálnice",
  "U Nové Louky",
  "U Nové Školy",
  "U Nového Dvora",
  "U Nového Suchdola",
  "U Nového Suchdola",
  "U Nových Domů I",
  "U Nových Domů Ii",
  "U Nových Domů Iii",
  "U Nových Vil",
  "U Nádražní Lávky",
  "U Nádraží",
  "U Nádrže",
  "U Náhonu",
  "U Náhonu",
  "U Nákladového Nádraží",
  "U Nákladového Nádraží",
  "U Národní Galerie",
  "U Nás",
  "U Obce",
  "U Obecního Domu",
  "U Obecního Dvora",
  "U Obory",
  "U Okrouhlíku",
  "U Olšiček",
  "U Opatrovny",
  "U Ovčína",
  "U Palaty",
  "U Paliárky",
  "U Paloučku",
  "U Památníku",
  "U Panské Zahrady",
  "U Papírny",
  "U Parku",
  "U Parkánu",
  "U Parního Mlýna",
  "U Pastoušky",
  "U Pavilónu",
  "U Pazderek",
  "U Pejřárny",
  "U Pekařky",
  "U Pekáren",
  "U Pentlovky",
  "U Pergamenky",
  "U Pernikářky",
  "U Pernštejnských",
  "U Petřin",
  "U Pily",
  "U Plovárny",
  "U Plynárny",
  "U Plynárny",
  "U Plátenice",
  "U Podchodu",
  "U Podjezdu",
  "U Podolského Hřbitova",
  "U Podolského Sanatoria",
  "U Pohádky",
  "U Polikliniky",
  "U Pomníku",
  "U Potoka",
  "U Poustek",
  "U Poštovky",
  "U Pošty",
  "U Pramene",
  "U Prašné Brány",
  "U Prašného Mostu",
  "U Prašného Mostu",
  "U Pražských Lomů",
  "U Prefy",
  "U Prioru",
  "U Prknovky",
  "U Prodejny",
  "U Propusti",
  "U Prosecké Školy",
  "U Proseckého Kostela",
  "U První Baterie",
  "U První Baterie",
  "U Prádelny",
  "U Průhonu",
  "U Průseku",
  "U Pumpy",
  "U Párníků",
  "U Páté Baterie",
  "U Páté Baterie",
  "U Písecké Brány",
  "U Pískovny",
  "U Přechodu",
  "U Přehrady",
  "U Přejezdu",
  "U Půjčovny",
  "U Radiály",
  "U Radnice",
  "U Rajské Zahrady",
  "U Rakovky",
  "U Roháčových Kasáren",
  "U Rokytky",
  "U Rokytky",
  "U Rokytky",
  "U Rozkoše",
  "U Roztockého Háje",
  "U Rybníka",
  "U Rybníčka",
  "U Rybářství",
  "U Rychty",
  "U Rychty",
  "U Ryšánky",
  "U Ryšánky",
  "U Sadu",
  "U Sanatoria",
  "U Sanopzu",
  "U Santošky",
  "U Schodů",
  "U Sedlecké Školy",
  "U Seřadiště",
  "U Sila",
  "U Silnice",
  "U Silnice",
  "U Skalky",
  "U Skladu",
  "U Skládky",
  "U Skopců",
  "U Skály",
  "U Sladovny",
  "U Slavie",
  "U Sloupu",
  "U Slovanky",
  "U Slovanské Pojišťovny",
  "U Sluncové",
  "U Slévárny",
  "U Smaltovny",
  "U Smetanky",
  "U Smolnic",
  "U Smíchovského Hřbitova",
  "U Sokolovny",
  "U Soutoku",
  "U Sovových Mlýnů",
  "U Sparty",
  "U Splavu",
  "U Spojky",
  "U Spojů",
  "U Společenské Zahrady",
  "U Sportoviště",
  "U Spořitelny",
  "U Stanice",
  "U Staré Cihelny",
  "U Staré Plynárny",
  "U Staré Pošty",
  "U Staré Skládky",
  "U Staré Sokolovny",
  "U Staré Studánky",
  "U Staré Tvrze",
  "U Staré Školy",
  "U Staré Školy",
  "U Starého Hřbitova",
  "U Starého Hřiště",
  "U Starého Mlýna",
  "U Starého Nádraží",
  "U Starého Splavu",
  "U Starého Stadionu",
  "U Starého Stadiónu",
  "U Starého Židovského Hřbitova",
  "U Starého Židovského Hřbitova",
  "U Statku",
  "U Stavoservisu",
  "U Stojanu",
  "U Strouhy",
  "U Strže",
  "U Studny",
  "U Studánky",
  "U Studánky",
  "U Stárovny",
  "U Státní Dráhy",
  "U Státní Dráhy",
  "U Stírky",
  "U Střediska",
  "U Střešovických Hřišť",
  "U Sušičky",
  "U Svahu",
  "U Svatého Ducha",
  "U Svobodárny",
  "U Svodnice",
  "U Svornosti",
  "U Svépomoci",
  "U Světličky",
  "U Synagogy",
  "U Sádek",
  "U Sídliště",
  "U Tabulky",
  "U Technoplynu",
  "U Tenisu",
  "U Teplárny",
  "U Topíren",
  "U Továren",
  "U Transformační Stanice",
  "U Transformátoru",
  "U Trati",
  "U Trativodu",
  "U Trezorky",
  "U Trojice",
  "U Trojského Zámku",
  "U Trpce",
  "U Tržnice",
  "U Tvrze",
  "U Tyrše",
  "U Tyršovky",
  "U Tyršovy Školy",
  "U Třetí Baterie",
  "U Třešňovky",
  "U Třešňového Sadu",
  "U Tůně",
  "U Uhříněveské Obory",
  "U Uranie",
  "U Učiliště",
  "U Valu",
  "U Velké Skály",
  "U Vesny",
  "U Viktorky",
  "U Vinice",
  "U Viniček",
  "U Vinné Révy",
  "U Vinných Sklepů",
  "U Vinohradské Nemocnice",
  "U Vinohradského Hřbitova",
  "U Vinohradského Hřbitova",
  "U Vizerky",
  "U Višňovky",
  "U Višňovky",
  "U Vlachovky",
  "U Vlasačky",
  "U Vlečky",
  "U Vlečky",
  "U Vltavy",
  "U Voborníků",
  "U Vodice",
  "U Vodojemu",
  "U Vodojemu",
  "U Vodotoku",
  "U Vody",
  "U Vodárny",
  "U Vojanky",
  "U Vojenské Nemocnice",
  "U Vojtěšky",
  "U Vokovické Školy",
  "U Vorlíků",
  "U Vozovny",
  "U Vrbiček",
  "U Vrby",
  "U Vrtilky",
  "U Vršovického Hřbitova",
  "U Vršovického Hřbitova",
  "U Vršovického Nádraží",
  "U Vysočanského Cukrovaru",
  "U Vysočanského Pivovaru",
  "U Václava",
  "U Váhy",
  "U Vápenice",
  "U Vápenky",
  "U Vápenné Skály",
  "U Výkupního Střediska",
  "U Výstavby",
  "U Výstaviště",
  "U Výstaviště",
  "U Výzkumu",
  "U Včely",
  "U Větrníku",
  "U Větrolamu",
  "U Větrolamu",
  "U Věže",
  "U Waltrovky",
  "U Zahradnictví",
  "U Zahradního Města",
  "U Zahrady",
  "U Zahrádek",
  "U Zahrádkářské Kolonie",
  "U Zastávky",
  "U Zbrojnice",
  "U Zdravotního Ústavu",
  "U Zeleného Ptáka",
  "U Zemníku",
  "U Zeměpisného Ústavu",
  "U Zlaté Studně",
  "U Zličína",
  "U Zličína",
  "U Zličínského Hřiště",
  "U Zvonařky",
  "U Zvoničky",
  "U Záběhlického Zámku",
  "U Zájezdku",
  "U Zákrutu",
  "U Zámeckého Parku",
  "U Zámečku",
  "U Zámečnice",
  "U Zásobní Zahrady",
  "U Zátiší",
  "U Závodiště",
  "U Závor",
  "U Úlů",
  "U Čekárny",
  "U Černé Rokle",
  "U Červeného Mlýnku",
  "U Červeného Mlýnku",
  "U Českých Loděnic",
  "U Čihadel",
  "U Čističky",
  "U Čokoládoven",
  "U Čtvrté Baterie",
  "U Čtyř Domů",
  "U Řempa",
  "U Říčanky",
  "U Šalamounky",
  "U Šalamounky",
  "U Šesté Baterie",
  "U Šesté Baterie",
  "U Školičky",
  "U Školky",
  "U Školního Pole",
  "U Školské Zahrady",
  "U Školy",
  "U Štěpu",
  "U Šumavy",
  "U Šumavěnky",
  "U Šálkovny",
  "U Šíchů",
  "U Šípků",
  "U Železnice",
  "U Železničního Mostu",
  "U Železné Lávky",
  "U Želivky",
  "U Židovského Hřbitova",
  "U Žlábku",
  "U Županských",
  "Uhelný Trh",
  "Uherská",
  "Uhříněveská",
  "Ukončená",
  "Ukrajinská",
  "Uljanovská",
  "Ulrychova",
  "Ulčova",
  "Umělecká",
  "Ungarova",
  "Unhošťská",
  "Univerzitní",
  "Upolínová",
  "Upravená",
  "Uralská",
  "Urbanická",
  "Urbanova",
  "Urbánkova",
  "Urešova",
  "Uruguayská",
  "Urxova",
  "Utěšilova",
  "Uzavřená",
  "Uzbecká",
  "Uzoučká",
  "Učitelská",
  "Učňovská",
  "Užocká",
  "V Aleji",
  "V Alejích",
  "V Americe",
  "V Babyku",
  "V Bambouskách",
  "V Bažinách",
  "V Benátkách",
  "V Bezpečí",
  "V Bokách I",
  "V Bokách Ii",
  "V Bokách Iii",
  "V Borovičkách",
  "V Botanice",
  "V Brance",
  "V Brůdku",
  "V Brůdku",
  "V Bytovkách",
  "V Bílce",
  "V Březinkách",
  "V Březině",
  "V Březí",
  "V Břízkách",
  "V Celnici",
  "V Cestičkách",
  "V Cestkách",
  "V Chaloupkách",
  "V Chaloupkách",
  "V Chatách",
  "V Chotejně",
  "V Cibulkách",
  "V Cihelně",
  "V Cípu",
  "V Dolinách",
  "V Dolině",
  "V Dolině",
  "V Dolích",
  "V Domcích",
  "V Domově",
  "V Doubcích",
  "V Dílcích",
  "V Edenu",
  "V Haltýři",
  "V Hliništi",
  "V Hluboké",
  "V Hodkovičkách",
  "V Holešovičkách",
  "V Honu",
  "V Horkách",
  "V Horní Stromce",
  "V Hrobech",
  "V Humenci",
  "V Humenci",
  "V Humnech",
  "V Háji",
  "V Hájkách",
  "V Hájích",
  "V Hůrkách",
  "V Jahodách",
  "V Javorech",
  "V Javoříčku",
  "V Jehličině",
  "V Jehličí",
  "V Jezerách",
  "V Jezevčinách",
  "V Jezírkách",
  "V Jirchářích",
  "V Jámě",
  "V Kališti",
  "V Kališti",
  "V Kapslovně",
  "V Klukovicích",
  "V Kole",
  "V Kolkovně",
  "V Korytech",
  "V Korytech",
  "V Kotcích",
  "V Koutku",
  "V Koutě",
  "V Kratinách",
  "V Kruhu",
  "V Kuťatech",
  "V Kálku",
  "V Křepelkách",
  "V Křovinách",
  "V Křížkách",
  "V Ladech",
  "V Lesíčku",
  "V Lipinách",
  "V Lipinách",
  "V Lipkách",
  "V Lipách",
  "V Listnáčích",
  "V Lomech",
  "V Louce",
  "V Luhu",
  "V Lukách",
  "V Lučinách",
  "V Lužích",
  "V Lánech",
  "V Lázních",
  "V Lískách",
  "V Malých Domech I",
  "V Malých Domech Ii",
  "V Malých Domech Iii",
  "V Mezihoří",
  "V Milíři",
  "V Mokřinách",
  "V Mydlinkách",
  "V Nové Hostivaři",
  "V Nové Vsi",
  "V Nové Vsi",
  "V Nové Čtvrti",
  "V Novém Hloubětíně",
  "V Novém Hloubětíně",
  "V Nových Bohnicích",
  "V Nových Domcích",
  "V Nových Vokovicích",
  "V Náklích",
  "V Násypu",
  "V Nížinách",
  "V Oblouku",
  "V Občanském Domově",
  "V Obůrkách",
  "V Ochozu",
  "V Ohradě",
  "V Ohybu",
  "V Okruží",
  "V Okálech",
  "V Olšinách",
  "V Olšinách",
  "V Olšině",
  "V Ondřejově",
  "V Opatově",
  "V Osikách",
  "V Ostružiní",
  "V Oudolku",
  "V Ořeší",
  "V Pachmance",
  "V Padolině",
  "V Parcelách",
  "V Parku",
  "V Parníku",
  "V Pačátkách",
  "V Pařezinách",
  "V Pevnosti",
  "V Pevnosti",
  "V Pitkovičkách",
  "V Planinách",
  "V Platýzu",
  "V Pláni",
  "V Podbabě",
  "V Podhoří",
  "V Podhájí",
  "V Podhájí",
  "V Podluží",
  "V Podskalí",
  "V Podvrší",
  "V Podzámčí",
  "V Poli",
  "V Polích",
  "V Potokách",
  "V Potočinách",
  "V Potočkách",
  "V Prutinách",
  "V Průhledu",
  "V Průčelí",
  "V Pátém",
  "V Pískovně",
  "V Pěšinkách",
  "V Předním Hloubětíně",
  "V Předním Veleslavíně",
  "V Předpolí",
  "V Předpolí",
  "V Přelomu",
  "V Přístavu",
  "V Remízku",
  "V Rohožníku",
  "V Rohu",
  "V Roháčích",
  "V Rokli",
  "V Roklích",
  "V Rovinách",
  "V Rovinách",
  "V Rybníkách",
  "V Rybníčkách",
  "V Ráji",
  "V Ráji",
  "V Rákosí",
  "V Sadech",
  "V Sedlci",
  "V Sedlci",
  "V Slavětíně",
  "V Soudním",
  "V Stráni",
  "V Středu",
  "V Sudech",
  "V Sídlišti",
  "V Tehovičkách",
  "V Tišině",
  "V Trninách",
  "V Třešňovce",
  "V Tůních",
  "V Uličce",
  "V Uličkách",
  "V Zahradní Čtvrti",
  "V Zahradách",
  "V Zahrádkách",
  "V Zatáčce",
  "V Zeleni",
  "V Zeleném Údolí",
  "V Záhorském",
  "V Záhybu",
  "V Zákopech",
  "V Zákoutí",
  "V Zálesí",
  "V Zálomu",
  "V Zámcích",
  "V Zápolí",
  "V Zátiší",
  "V Zátočce",
  "V Závitu",
  "V Závětří",
  "V Zářezu",
  "V Údolí",
  "V Údolí Hvězd",
  "V Úhlu",
  "V Úhoru",
  "V Úvalu",
  "V Úvoze",
  "V Úzké",
  "V Úžlabině",
  "V Úžlabině",
  "V Čeňku",
  "V Štíhlách",
  "V Šáreckém Údolí",
  "V Žabokřiku",
  "V Žáčku",
  "V. P. Čkalova",
  "V. P. Čkalova",
  "Vachkova",
  "Vackova",
  "Vacovská",
  "Vacínova",
  "Vacínovská",
  "Vajdova",
  "Vajgarská",
  "Valcířská",
  "Valdická",
  "Valdovská",
  "Valdštejnská",
  "Valdštejnské Nám.",
  "Valdštejnské Náměstí",
  "Valentinská",
  "Valentinská",
  "Valentova",
  "Valečovská",
  "Valská",
  "Valtická",
  "Valtínovská",
  "Valčíkova",
  "Valšovská",
  "Vamberská",
  "Vanická",
  "Vaníčkova",
  "Vaníčkova",
  "Varhulíkové",
  "Varnsdorfská",
  "Varšavská",
  "Vavákova",
  "Vavřenova",
  "Vavřinecká",
  "Vazovova",
  "Vačkářova",
  "Vaňkova",
  "Vaňkova",
  "Vašátkova",
  "Ve Dvoře",
  "Ve Lhotce",
  "Ve Lhotce",
  "Ve Skalkách",
  "Ve Skalách",
  "Ve Skále",
  "Ve Slatinách",
  "Ve Smečkách",
  "Ve Smrčině",
  "Ve Stromořadí",
  "Ve Struhách",
  "Ve Struhách",
  "Ve Stráni",
  "Ve Studeném",
  "Ve Stínu",
  "Ve Střešovičkách",
  "Ve Střešovičkách",
  "Ve Svahu",
  "Ve Vilkách",
  "Ve Vilách",
  "Ve Višňovce",
  "Ve Vratech",
  "Ve Vrbách",
  "Ve Vrchu",
  "Ve Vrších",
  "Ve Výhledu",
  "Ve Výhledu",
  "Ve Výrech",
  "Ve Zliči",
  "Ve Štěpnici",
  "Ve Žlíbku",
  "Vedlejší",
  "Vehlovická",
  "Vejražkova",
  "Vejvanovského",
  "Vejvodova",
  "Velebného",
  "Velehradská",
  "Velemínská",
  "Velemínská",
  "Velenická",
  "Velenovského",
  "Veleslavínova",
  "Veleslavínská",
  "Veleslavínská",
  "Veletovská",
  "Veletržní",
  "Veletržní",
  "Veleňská",
  "Velešínská",
  "Velfloviců",
  "Velflíkova",
  "Velhartická",
  "Velichovská",
  "Velimská",
  "Velkoborská",
  "Velkoosecká",
  "Velkopřevorské Nám.",
  "Velkopřevorské Náměstí",
  "Velká Lada",
  "Velká Lada",
  "Velká Skála",
  "Velké Kunratické",
  "Veltruská",
  "Veltěžská",
  "Velvarská",
  "Velínská",
  "Venušina",
  "Verdiho",
  "Verdunská",
  "Verneřická",
  "Verneřická",
  "Vernéřovská",
  "Veronské Nám.",
  "Veselská",
  "Veská",
  "Veslařský Ostrov",
  "Vestavěná",
  "Vestecká",
  "Veverkova",
  "Večerní",
  "Vidimova",
  "Vidimská",
  "Vidlicová",
  "Vidlák",
  "Vidonická",
  "Vidoulská",
  "Vidovická",
  "Vietnamská",
  "Viklefova",
  "Vikova",
  "Viktora Huga",
  "Viktorinova",
  "Viktorčina",
  "Vikářská",
  "Vilová",
  "Vilímkova",
  "Vilímovská",
  "Vimperské Náměstí",
  "Vinařického",
  "Vinařská",
  "Viničná",
  "Vinohradská",
  "Vinohradská",
  "Vinohradská",
  "Vinohradská",
  "Vinohradská",
  "Vinohradská",
  "Vinohradská",
  "Vinohrady",
  "Vinopalnická",
  "Vinořská",
  "Vinořské Nám.",
  "Vinořské Náměstí",
  "Vinšova",
  "Violková",
  "Vitošská",
  "Vitíkova",
  "Vitějovská",
  "Vizovická",
  "Višňovka",
  "Višňovka",
  "Višňová",
  "Vlachova",
  "Vladimírova",
  "Vladislava Vančury",
  "Vladislavova",
  "Vladivostocká",
  "Vladycká",
  "Vlastibořská",
  "Vlastina",
  "Vlastina",
  "Vlastislavova",
  "Vlasty Buriana",
  "Vlasty Hilské",
  "Vlasty Průchové",
  "Vlasákova",
  "Vlašimská",
  "Vlašská",
  "Vlašská",
  "Vlaštovčí",
  "Vlkanovská",
  "Vlkova",
  "Vlkovická",
  "Vlnitá",
  "Vltavanů",
  "Vltavanů",
  "Vltavanů",
  "Vltavická",
  "Vltavská",
  "Vltavínová",
  "Vlárská",
  "Vlásenická",
  "Vlčická",
  "Vlčkova",
  "Vlčnovská",
  "Vnislavova",
  "Vnitřní",
  "Vnoučkova",
  "Vnější",
  "Voborského",
  "Vobrubova",
  "Vocelova",
  "Voctářova",
  "Voctářova",
  "Vodická",
  "Vodičkova",
  "Vodičkova",
  "Vodnická",
  "Vodní",
  "Vodochodská",
  "Vodojemská",
  "Vodácká",
  "Vodárenská",
  "Voděradská",
  "Vodňanská",
  "Vodňanského",
  "Vojenova",
  "Vojetická",
  "Vojická",
  "Vojkovická",
  "Vojslavická",
  "Vojtova",
  "Vojtíškova",
  "Vojtěšská",
  "Vojáčkova",
  "Vokovická",
  "Vokovická",
  "Vokrojova",
  "Vokáčova",
  "Vokřínská",
  "Volarská",
  "Volavkova",
  "Voleníkova",
  "Volkova",
  "Volkovova",
  "Voltova",
  "Volutová",
  "Volyňská",
  "Volšovská",
  "Volšovská",
  "Vondroušova",
  "Vorařská",
  "Voroněžská",
  "Voroněžská",
  "Voráčovská",
  "Voršilská",
  "Voskova",
  "Voskovcova",
  "Vosmíkových",
  "Vostrovská",
  "Vostrého",
  "Vosátkova",
  "Votavova",
  "Votická",
  "Votočkova",
  "Votrubova",
  "Votuzská",
  "Vozová",
  "Vozová",
  "Voňkova",
  "Voříškova",
  "Vošahlíkova",
  "Vožická",
  "Vrabčí",
  "Vranická",
  "Vranovská",
  "Vranská",
  "Vratimovská",
  "Vratislavova",
  "Vratislavská",
  "Vratičová",
  "Vraňanská",
  "Vrbenského",
  "Vrbická",
  "Vrbková",
  "Vrbova",
  "Vrbčanská",
  "Vrchlabská",
  "Vrchlického",
  "Vrchlického Sady",
  "Vrchovinská",
  "Vrátenská",
  "Vrátkovská",
  "Vrázova",
  "Vrážská",
  "Vrútecká",
  "Vršní",
  "Vršovická",
  "Vršovické Nám.",
  "Vršovické Náměstí",
  "Vršovka",
  "Vsetínská",
  "Vstavačová",
  "Vstupní",
  "Vybíralova",
  "Vycpálkova",
  "Vyderská",
  "Vydrova",
  "Vyhlídkova",
  "Vykoukových",
  "Vykáňská",
  "Vyskočilova",
  "Vysokovská",
  "Vysokoškolská",
  "Vysoká Cesta",
  "Vysočanská",
  "Vysočanská",
  "Vysočanská",
  "Vysočanské Nám.",
  "Vysočanské Náměstí",
  "Vyvýšená",
  "Vyšebrodská",
  "Vyšehradská",
  "Vyšší",
  "Vyžlovská",
  "Vzdušná",
  "Vzdálená",
  "Vzestupná",
  "Vzpoury",
  "Váchalova",
  "Václava Balého",
  "Václava Kovaříka",
  "Václava Rady",
  "Václava Trojana",
  "Václava Špačka",
  "Václavická",
  "Václavkova",
  "Václavská",
  "Václavské Nám.",
  "Václavské Náměstí",
  "Vágnerova",
  "Vánková",
  "Vápencová",
  "Vápenná",
  "Vápeníkova",
  "Vášova",
  "Vážská",
  "Vídeňská",
  "Vídeňská",
  "Vídeňská",
  "Vírská",
  "Víta Nejedlého",
  "Vítkova",
  "Vítkovická",
  "Vítovcova",
  "Vítovcova",
  "Vítězná",
  "Vítězná",
  "Vítězné Nám.",
  "Vítězné Nám.",
  "Vítězné Náměstí",
  "Vítězné Náměstí",
  "Východní",
  "Východní Nám.",
  "Východní Náměstí",
  "Výchozí",
  "Výhledová",
  "Výhledské Nám.",
  "Výhledské Náměstí",
  "Výjezdní",
  "Výjezdová",
  "Výletní",
  "Výletní",
  "Výmarova",
  "Výmolova",
  "Výpadová",
  "Výpadová",
  "Výravská",
  "Výrobní",
  "Výstaviště",
  "Výstavní",
  "Výstupní",
  "Výtoňská",
  "Výtvarnická",
  "Výtvarná",
  "Výzkumníků",
  "Včelařská",
  "Včelničná",
  "Věkova",
  "Věstonická",
  "Větrná",
  "Větrovcova",
  "Větrová",
  "Větrušická",
  "Vězeňská",
  "Vězeňská",
  "Věštínská",
  "Věšínova",
  "Věžická",
  "Vřesovická",
  "Vřesová",
  "Všehrdova",
  "Všejanská",
  "Všelipská",
  "Všerubská",
  "Všestarská",
  "Všetatská",
  "Všeňská",
  "Wagnerova",
  "Waldesova",
  "Washingtonova",
  "Wassermannova",
  "Wattova",
  "Weberova",
  "Weberova",
  "Weilova",
  "Weissova",
  "Wenzigova",
  "Wenzigova",
  "Werichova",
  "Wichterlova",
  "Wiedermannova",
  "Wiesenthalova",
  "Wilsonova",
  "Wilsonova",
  "Winklerova",
  "Wolfova",
  "Wolkerova",
  "Wuchterlova",
  "Xaveriova",
  "Xaverovská",
  "Za Archivem",
  "Za Arielem",
  "Za Avií",
  "Za Bažantnicí",
  "Za Botičem",
  "Za Brankou",
  "Za Brumlovkou",
  "Za Brůdkem",
  "Za Břízami",
  "Za Chalupami",
  "Za Cukrovarem",
  "Za Císařským Mlýnem",
  "Za Dolejšákem",
  "Za Drahou",
  "Za Dvorem",
  "Za Dálnicí",
  "Za Dálnicí",
  "Za Elektrárnou",
  "Za Elektrárnou",
  "Za Farou",
  "Za Fořtem",
  "Za Hanspaulkou",
  "Za Haštalem",
  "Za Hládkovem",
  "Za Horou",
  "Za Horou",
  "Za Hospodou",
  "Za Hrází",
  "Za Humny",
  "Za Hájem",
  "Za Hájem",
  "Za Hájovnou",
  "Za Hřbitovem",
  "Za Invalidovnou",
  "Za Jalovým Dvorem",
  "Za Jednotou",
  "Za Kajetánkou",
  "Za Kapličkou",
  "Za Karlínským Přístavem",
  "Za Kačabkou",
  "Za Klíčovem",
  "Za Knotkem",
  "Za Knotkem",
  "Za Kostelem",
  "Za Kovárnou",
  "Za Kovářským Rybníkem",
  "Za Křížem",
  "Za Křížkem",
  "Za Lesíkem",
  "Za Lidovým Domem",
  "Za Luhem",
  "Za Lužinami",
  "Za Lány",
  "Za Lázeňkou",
  "Za Mlýnem",
  "Za Mosty",
  "Za Mosty",
  "Za Mototechnou",
  "Za Můstkem",
  "Za Nadýmačem",
  "Za Novákovou Zahradou",
  "Za Návsí",
  "Za Obecním Úřadem",
  "Za Oborou",
  "Za Opravnou",
  "Za Opusem",
  "Za Ovčínem",
  "Za Papírnou",
  "Za Parkem",
  "Za Pavilónem",
  "Za Pekařkou",
  "Za Pekárnou",
  "Za Pivovarem",
  "Za Ploty",
  "Za Podjezdem",
  "Za Pohořelcem",
  "Za Pohádkou",
  "Za Potokem",
  "Za Poříčskou Branou",
  "Za Poříčskou Bránou",
  "Za Poštou",
  "Za Poštovskou Zahradou",
  "Za Poštovskou Zahradou",
  "Za Prodejnou",
  "Za Pruhy",
  "Za Průsekem",
  "Za Pískovnou",
  "Za Radostí",
  "Za Rokytkou",
  "Za Rybníkem",
  "Za Rybníčky",
  "Za Rybářstvím",
  "Za Rájem",
  "Za Sadem",
  "Za Sedmidomky",
  "Za Skalkou",
  "Za Skalkou",
  "Za Slatinami",
  "Za Slovankou",
  "Za Sokolovnou",
  "Za Stadionem",
  "Za Statkem",
  "Za Statky",
  "Za Stodolami",
  "Za Stodolou",
  "Za Strahovem",
  "Za Strašnickou Vozovnou",
  "Za Strašnickou Vozovnou",
  "Za Strojírnami",
  "Za Studánkou",
  "Za Střelnicí",
  "Za Sídlištěm",
  "Za Teplárnou",
  "Za Tratí",
  "Za Tratí",
  "Za Třebešínem",
  "Za Vackovem",
  "Za Valem",
  "Za Viaduktem",
  "Za Vinicí",
  "Za Vlasačkou",
  "Za Vodárnou",
  "Za Vokovickou Vozovnou",
  "Za Vokovickou Vozovnou",
  "Za Větrem",
  "Za Zahradami",
  "Za Zahradou",
  "Za Zastávkou",
  "Za Zelenou Liškou",
  "Za Zámečkem",
  "Za Černým Mostem",
  "Za Černým Mostem",
  "Za Černým Mostem",
  "Za Školkou",
  "Za Školou",
  "Za Šmatlíkem",
  "Za Železnicí",
  "Za Ženskými Domovy",
  "Za Žižkovskou Vozovnou",
  "Zacharská",
  "Zachova",
  "Zadní",
  "Zahrada Na Baště",
  "Zahradnická",
  "Zahradní",
  "Zahradníčkova",
  "Zahradníčkova",
  "Zahrádecká",
  "Zahrádecká",
  "Zahrádkářská",
  "Zahrádkářů",
  "Zaječická",
  "Zaječí",
  "Zaječí",
  "Zakouřilova",
  "Zakrytá",
  "Zakšínská",
  "Zalešanská",
  "Zalinská",
  "Zamašská",
  "Zamenhofova",
  "Zapadlá",
  "Zapomenutá",
  "Zapova",
  "Zapských",
  "Zastavěná",
  "Zastrčená",
  "Zavadilova",
  "Zavátá",
  "Zaříčanská",
  "Zbečenská",
  "Zborovská",
  "Zborovská",
  "Zbraslavská",
  "Zbraslavská",
  "Zbraslavské Nám.",
  "Zbraslavské Náměstí",
  "Zbrojnická",
  "Zbudovská",
  "Zbuzanská",
  "Zbuzkova",
  "Zbynická",
  "Zbyslavská",
  "Zbytinská",
  "Zbýšovská",
  "Zdaru",
  "Zdařilá",
  "Zderazská",
  "Zdeňky Nyplové",
  "Zdibská",
  "Zdická",
  "Zdiměřická",
  "Zdislavická",
  "Zdobnická",
  "Zdoňovská",
  "Zdíkovská",
  "Zelenečská",
  "Zelenečská",
  "Zelenkova",
  "Zelenky-Hajského",
  "Zelenohorská",
  "Zelená",
  "Zelená",
  "Zelená Louka",
  "Zelený Pruh",
  "Zelený Pruh",
  "Zelený Pruh",
  "Zelinářská",
  "Zemanka",
  "Zemské Právo",
  "Zemědělská",
  "Zengrova",
  "Zenklova",
  "Zenklova",
  "Zeyerova Alej",
  "Zhořelecká",
  "Zikova",
  "Zimova",
  "Zimákova",
  "Zkrácená",
  "Zlatnice",
  "Zlatnická",
  "Zlatokorunská",
  "Zlatá",
  "Zlatá Ulička U Daliborky",
  "Zlenická",
  "Zlešická",
  "Zlivská",
  "Zličínská",
  "Zličínská",
  "Zlonická",
  "Zlonínská",
  "Zlončická",
  "Zlíchovská",
  "Znojemská",
  "Zoubkova",
  "Zrzavého",
  "Ztracená",
  "Zubatého",
  "Zubrnická",
  "Zvolenská",
  "Zvolská",
  "Zvolská",
  "Zvonařova",
  "Zvonařovská",
  "Zvonařská",
  "Zvoncovitá",
  "Zvonická",
  "Zvonková",
  "Zvoníčkova",
  "Zvánovická",
  "Zvíkovská",
  "Záblatská",
  "Záblatská",
  "Zábranská",
  "Zábrodí",
  "Záběhlická",
  "Zádražanská",
  "Záhornická",
  "Záhorského",
  "Záhořanská",
  "Záhořanského",
  "Záhřebská",
  "Zájezdní",
  "Zákolanská",
  "Zákostelní",
  "Zákupská",
  "Zálesí",
  "Zálesí",
  "Zálesí",
  "Záluské",
  "Zálužanského",
  "Zálužická",
  "Zálužská",
  "Zálužská",
  "Zámecká",
  "Zámecké Schody",
  "Zámezí",
  "Zámišova",
  "Zámělská",
  "Západní",
  "Zápasnická",
  "Zápolská",
  "Zápotoční",
  "Zápská",
  "Zárubova",
  "Zárybnická",
  "Zárybničná",
  "Zárybská",
  "Zásadská",
  "Zásmucká",
  "Zátišská",
  "Zátiší",
  "Zátopkova",
  "Zátoňská",
  "Závadova",
  "Záveská",
  "Závist",
  "Závišova",
  "Závišova",
  "Závodní",
  "Závrchy",
  "Závěrka",
  "Zázvorkova",
  "Zářijová",
  "Zítkova",
  "Zívrova",
  "Zúžená",
  "Údlická",
  "Údolní",
  "Údolní",
  "Údolí Hvězd",
  "Úhlavská",
  "Úhlová",
  "Újezd",
  "Újezd",
  "Újezdská",
  "Úlibická",
  "Únorová",
  "Únětická",
  "Únětická",
  "Úpická",
  "Úprkova",
  "Úpská",
  "Úslavská",
  "Ústavní",
  "Ústecká",
  "Ústecká",
  "Ústřední",
  "Útulná",
  "Útulná",
  "Úvalská",
  "Úvoz",
  "Úvoz",
  "Úvozová",
  "Úzká",
  "Čajkovského",
  "Čakovická",
  "Čakovická",
  "Čankovská",
  "Čapkova",
  "Častavina",
  "Častonická",
  "Čechova",
  "Čechtická",
  "Čechurova",
  "Čedičová",
  "Čejetická",
  "Čejkovická",
  "Čekanková",
  "Čekanková",
  "Čekanovská",
  "Čelakovského Sady",
  "Čelakovského Sady",
  "Čeljabinská",
  "Čelkovická",
  "Čelná",
  "Čelákovická",
  "Čenkovská",
  "Čenovická",
  "Čentická",
  "Čenětická",
  "Čeperská",
  "Čeradická",
  "Čerchovská",
  "Čermákova",
  "Černická",
  "Černilovská",
  "Černičná",
  "Černochova",
  "Černockého",
  "Černohorského",
  "Černokostelecká",
  "Černokostelecká",
  "Černokostelecká",
  "Černomořská",
  "Černotínská",
  "Černovická",
  "Černošická",
  "Černá",
  "Černého",
  "Černínova",
  "Černínská",
  "Čerpadlová",
  "Čertouská",
  "Čertouská",
  "Čertův Vršek",
  "Červencová",
  "Červenkova",
  "Červená",
  "Červená Báň",
  "Červený Mlýn",
  "Červeňanského",
  "Červnová",
  "Čerčanská",
  "Českobratrská",
  "Českobrodská",
  "Českobrodská",
  "Českobrodská",
  "Českobrodská",
  "Českobrodská",
  "Českobrodská",
  "Českobrodská",
  "Českobrodská",
  "Českodubská",
  "Českolipská",
  "Českolipská",
  "Českomalínská",
  "Českomoravská",
  "Českomoravská",
  "Československého Exilu",
  "Československého Exilu",
  "Česká",
  "České Družiny",
  "Českého Červeného Kříže",
  "Čestlická",
  "Čestmírova",
  "Česákova",
  "Čečelická",
  "Čeňkova",
  "Češovská",
  "Čibuzská",
  "Čihákova",
  "Čiklova",
  "Čiklova",
  "Čimelická",
  "Čimická",
  "Čimická",
  "Čimická",
  "Čimická",
  "Čirůvková",
  "Čistovická",
  "Čmelická",
  "Čs. Armády",
  "Čs. Tankistů",
  "Čtyřdílná",
  "Čtyřkolská",
  "Čumpelíkova",
  "Čuprova",
  "Čábelecká",
  "Čápova",
  "Čáslavská",
  "Čílova",
  "Čílova",
  "Čínská",
  "Čínská",
  "Čížovská",
  "Ďáblická",
  "Ďáblická",
  "Ďáblická",
  "Řadová",
  "Řehořova",
  "Řepečská",
  "Řepná",
  "Řeporyjská",
  "Řeporyjská",
  "Řeporyjská",
  "Řeporyjské Náměstí",
  "Řepová",
  "Řepská",
  "Řepíková",
  "Řepínská",
  "Řepčická",
  "Řepčická",
  "Řetězokovářů",
  "Řetězová",
  "Řevnická",
  "Řevnická",
  "Řeznická",
  "Řezáčovo Nám.",
  "Řezáčovo Náměstí",
  "Řečického",
  "Řešetovská",
  "Řešovská",
  "Řipská",
  "Řipská",
  "Řásnovka",
  "Říjnová",
  "Římovská",
  "Římovská",
  "Římská",
  "Říčanova",
  "Říčanská",
  "Říční",
  "Šachovská",
  "Šafaříkova",
  "Šafránecká",
  "Šafránkova",
  "Šafránová",
  "Šafářova",
  "Šakvická",
  "Šaldova",
  "Šalounova",
  "Šalvějová",
  "Šanovská",
  "Šantrochova",
  "Šatrova",
  "Šatrova",
  "Šebelova",
  "Šeberovská",
  "Šebestiánská",
  "Šebkova",
  "Šedivého",
  "Šedova",
  "Šejbalové",
  "Šemberova",
  "Šenovská",
  "Šermířská",
  "Šermířská",
  "Šestajovická",
  "Šestajovická",
  "Šestidomí",
  "Šetelíkova",
  "Ševce Matouše",
  "Ševčenkova",
  "Ševčíkova",
  "Šeříková",
  "Šeříková",
  "Šibřinská",
  "Šikmá",
  "Šimanovská",
  "Šimkova",
  "Šimonova",
  "Šimáčkova",
  "Šimůnkova",
  "Šircova",
  "Široká",
  "Široká",
  "Šiškova",
  "Školní",
  "Školská",
  "Škroupovo Nám.",
  "Škroupovo Náměstí",
  "Škrétova",
  "Škvorecká",
  "Škábova",
  "Šlechtitelská",
  "Šlejnická",
  "Šlikova",
  "Šlitrova",
  "Šluknovská",
  "Šmeralova",
  "Šmilovského",
  "Šmolíkova",
  "Šolínova",
  "Šostakovičovo Nám.",
  "Šostakovičovo Náměstí",
  "Španielova",
  "Španělská",
  "Špačkova",
  "Špeciánova",
  "Šperlova",
  "Špirkova",
  "Špitálská",
  "Šplechnerova",
  "Šporkova",
  "Špotzova",
  "Špálova",
  "Šrobárova",
  "Šrobárova",
  "Šromova",
  "Štamberk",
  "Štefkova",
  "Štefánikova",
  "Štemberova",
  "Šternberkova",
  "Šternova",
  "Šternovská",
  "Štichova",
  "Štiplova",
  "Štičkova",
  "Štiřínská",
  "Štochlova",
  "Štolbova",
  "Štolcova",
  "Štolmířská",
  "Štolmířská",
  "Štorchova",
  "Štorkánova",
  "Štramberská",
  "Štulcova",
  "Štupartská",
  "Štursova",
  "Štverákova",
  "Štychova",
  "Štychova",
  "Štíbrova",
  "Štíhlická",
  "Štítného",
  "Štítová",
  "Štúrova",
  "Štúrova",
  "Štěchovická",
  "Štěpanická",
  "Štěpařská",
  "Štěpničná",
  "Štěpánkova",
  "Štěpánovská",
  "Štěpánská",
  "Štěpánská",
  "Štěrboholská",
  "Štěrková",
  "Štětkova",
  "Štětínská",
  "Šubertova",
  "Šulcova",
  "Šultysova",
  "Šumavská",
  "Šumavského",
  "Šumberova",
  "Šumenská",
  "Šumická",
  "Šumperská",
  "Šustova",
  "Švabinského",
  "Švecova",
  "Švehlova",
  "Švehlova",
  "Švejcarovo Náměstí",
  "Švestková",
  "Švestková",
  "Švestková",
  "Švihovská",
  "Švábky",
  "Švábova",
  "Švédská",
  "Šárecká",
  "Šárovo Kolo",
  "Šárčina",
  "Šátalská",
  "Šífařská",
  "Šímova",
  "Šípková",
  "Šítkova",
  "Šťastného",
  "Šůrova",
  "Žabovřeská",
  "Žacléřská",
  "Žalanského",
  "Žalmanova",
  "Žalovská",
  "Žamberská",
  "Žampašská",
  "Žampiónová",
  "Žandovská",
  "Žatecká",
  "Žatecká",
  "Žateckých",
  "Ždírnická",
  "Žehuňská",
  "Žehušická",
  "Želetavská",
  "Železniční",
  "Železničářů",
  "Železnobrodská",
  "Železná",
  "Želivecká",
  "Želivka",
  "Želivská",
  "Želkovická",
  "Želnavská",
  "Ženíškova",
  "Žeretická",
  "Žermanická",
  "Žernosecká",
  "Žernovská",
  "Žerotínova",
  "Žherská",
  "Žichlínská",
  "Židlického",
  "Žilinská",
  "Žilovská",
  "Žinkovská",
  "Žirovnická",
  "Žitavská",
  "Žitavského",
  "Žitná",
  "Žitná",
  "Žitomírská",
  "Živanická",
  "Živcová",
  "Živcových",
  "Živonínská",
  "Žiželická",
  "Žižkova",
  "Žižkovo Nám.",
  "Žižkovo Náměstí",
  "Žlebská",
  "Žluťásková",
  "Žofie Podlipské",
  "Žufanova",
  "Žukovského",
  "Žukovského",
  "Žulová",
  "Županovická",
  "Žvahovská",
  "Žábova",
  "Žákovská",
  "Žárovická",
  "Žíšovská",
  "Žďárská",
];

},{}],"node_modules/faker/lib/locales/cz/address/street_name.js":[function(require,module,exports) {
module["exports"] = [
  "#{street}"
];

},{}],"node_modules/faker/lib/locales/cz/address/street_address.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_name} #{building_number}"
];

},{}],"node_modules/faker/lib/locales/cz/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "Česká republika"
];

},{}],"node_modules/faker/lib/locales/cz/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.country = require("./country");
address.building_number = require("./building_number");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.time_zone = require("./time_zone");
address.city_name = require("./city_name");
address.city = require("./city");
address.street = require("./street");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./country":"node_modules/faker/lib/locales/cz/address/country.js","./building_number":"node_modules/faker/lib/locales/cz/address/building_number.js","./secondary_address":"node_modules/faker/lib/locales/cz/address/secondary_address.js","./postcode":"node_modules/faker/lib/locales/cz/address/postcode.js","./state":"node_modules/faker/lib/locales/cz/address/state.js","./state_abbr":"node_modules/faker/lib/locales/cz/address/state_abbr.js","./time_zone":"node_modules/faker/lib/locales/cz/address/time_zone.js","./city_name":"node_modules/faker/lib/locales/cz/address/city_name.js","./city":"node_modules/faker/lib/locales/cz/address/city.js","./street":"node_modules/faker/lib/locales/cz/address/street.js","./street_name":"node_modules/faker/lib/locales/cz/address/street_name.js","./street_address":"node_modules/faker/lib/locales/cz/address/street_address.js","./default_country":"node_modules/faker/lib/locales/cz/address/default_country.js"}],"node_modules/faker/lib/locales/cz/company/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "s.r.o.",
  "a.s.",
  "v.o.s."
];

},{}],"node_modules/faker/lib/locales/cz/company/adjective.js":[function(require,module,exports) {
module["exports"] = [
  "Adaptive",
  "Advanced",
  "Ameliorated",
  "Assimilated",
  "Automated",
  "Balanced",
  "Business-focused",
  "Centralized",
  "Cloned",
  "Compatible",
  "Configurable",
  "Cross-group",
  "Cross-platform",
  "Customer-focused",
  "Customizable",
  "Decentralized",
  "De-engineered",
  "Devolved",
  "Digitized",
  "Distributed",
  "Diverse",
  "Down-sized",
  "Enhanced",
  "Enterprise-wide",
  "Ergonomic",
  "Exclusive",
  "Expanded",
  "Extended",
  "Face to face",
  "Focused",
  "Front-line",
  "Fully-configurable",
  "Function-based",
  "Fundamental",
  "Future-proofed",
  "Grass-roots",
  "Horizontal",
  "Implemented",
  "Innovative",
  "Integrated",
  "Intuitive",
  "Inverse",
  "Managed",
  "Mandatory",
  "Monitored",
  "Multi-channelled",
  "Multi-lateral",
  "Multi-layered",
  "Multi-tiered",
  "Networked",
  "Object-based",
  "Open-architected",
  "Open-source",
  "Operative",
  "Optimized",
  "Optional",
  "Organic",
  "Organized",
  "Persevering",
  "Persistent",
  "Phased",
  "Polarised",
  "Pre-emptive",
  "Proactive",
  "Profit-focused",
  "Profound",
  "Programmable",
  "Progressive",
  "Public-key",
  "Quality-focused",
  "Reactive",
  "Realigned",
  "Re-contextualized",
  "Re-engineered",
  "Reduced",
  "Reverse-engineered",
  "Right-sized",
  "Robust",
  "Seamless",
  "Secured",
  "Self-enabling",
  "Sharable",
  "Stand-alone",
  "Streamlined",
  "Switchable",
  "Synchronised",
  "Synergistic",
  "Synergized",
  "Team-oriented",
  "Total",
  "Triple-buffered",
  "Universal",
  "Up-sized",
  "Upgradable",
  "User-centric",
  "User-friendly",
  "Versatile",
  "Virtual",
  "Visionary",
  "Vision-oriented"
];

},{}],"node_modules/faker/lib/locales/cz/company/descriptor.js":[function(require,module,exports) {
module["exports"] = [
  "24 hour",
  "24/7",
  "3rd generation",
  "4th generation",
  "5th generation",
  "6th generation",
  "actuating",
  "analyzing",
  "asymmetric",
  "asynchronous",
  "attitude-oriented",
  "background",
  "bandwidth-monitored",
  "bi-directional",
  "bifurcated",
  "bottom-line",
  "clear-thinking",
  "client-driven",
  "client-server",
  "coherent",
  "cohesive",
  "composite",
  "context-sensitive",
  "contextually-based",
  "content-based",
  "dedicated",
  "demand-driven",
  "didactic",
  "directional",
  "discrete",
  "disintermediate",
  "dynamic",
  "eco-centric",
  "empowering",
  "encompassing",
  "even-keeled",
  "executive",
  "explicit",
  "exuding",
  "fault-tolerant",
  "foreground",
  "fresh-thinking",
  "full-range",
  "global",
  "grid-enabled",
  "heuristic",
  "high-level",
  "holistic",
  "homogeneous",
  "human-resource",
  "hybrid",
  "impactful",
  "incremental",
  "intangible",
  "interactive",
  "intermediate",
  "leading edge",
  "local",
  "logistical",
  "maximized",
  "methodical",
  "mission-critical",
  "mobile",
  "modular",
  "motivating",
  "multimedia",
  "multi-state",
  "multi-tasking",
  "national",
  "needs-based",
  "neutral",
  "next generation",
  "non-volatile",
  "object-oriented",
  "optimal",
  "optimizing",
  "radical",
  "real-time",
  "reciprocal",
  "regional",
  "responsive",
  "scalable",
  "secondary",
  "solution-oriented",
  "stable",
  "static",
  "systematic",
  "systemic",
  "system-worthy",
  "tangible",
  "tertiary",
  "transitional",
  "uniform",
  "upward-trending",
  "user-facing",
  "value-added",
  "web-enabled",
  "well-modulated",
  "zero administration",
  "zero defect",
  "zero tolerance"
];

},{}],"node_modules/faker/lib/locales/cz/company/noun.js":[function(require,module,exports) {
module["exports"] = [
  "ability",
  "access",
  "adapter",
  "algorithm",
  "alliance",
  "analyzer",
  "application",
  "approach",
  "architecture",
  "archive",
  "artificial intelligence",
  "array",
  "attitude",
  "benchmark",
  "budgetary management",
  "capability",
  "capacity",
  "challenge",
  "circuit",
  "collaboration",
  "complexity",
  "concept",
  "conglomeration",
  "contingency",
  "core",
  "customer loyalty",
  "database",
  "data-warehouse",
  "definition",
  "emulation",
  "encoding",
  "encryption",
  "extranet",
  "firmware",
  "flexibility",
  "focus group",
  "forecast",
  "frame",
  "framework",
  "function",
  "functionalities",
  "Graphic Interface",
  "groupware",
  "Graphical User Interface",
  "hardware",
  "help-desk",
  "hierarchy",
  "hub",
  "implementation",
  "info-mediaries",
  "infrastructure",
  "initiative",
  "installation",
  "instruction set",
  "interface",
  "internet solution",
  "intranet",
  "knowledge user",
  "knowledge base",
  "local area network",
  "leverage",
  "matrices",
  "matrix",
  "methodology",
  "middleware",
  "migration",
  "model",
  "moderator",
  "monitoring",
  "moratorium",
  "neural-net",
  "open architecture",
  "open system",
  "orchestration",
  "paradigm",
  "parallelism",
  "policy",
  "portal",
  "pricing structure",
  "process improvement",
  "product",
  "productivity",
  "project",
  "projection",
  "protocol",
  "secured line",
  "service-desk",
  "software",
  "solution",
  "standardization",
  "strategy",
  "structure",
  "success",
  "superstructure",
  "support",
  "synergy",
  "system engine",
  "task-force",
  "throughput",
  "time-frame",
  "toolset",
  "utilisation",
  "website",
  "workforce"
];

},{}],"node_modules/faker/lib/locales/cz/company/bs_verb.js":[function(require,module,exports) {
module["exports"] = [
  "implement",
  "utilize",
  "integrate",
  "streamline",
  "optimize",
  "evolve",
  "transform",
  "embrace",
  "enable",
  "orchestrate",
  "leverage",
  "reinvent",
  "aggregate",
  "architect",
  "enhance",
  "incentivize",
  "morph",
  "empower",
  "envisioneer",
  "monetize",
  "harness",
  "facilitate",
  "seize",
  "disintermediate",
  "synergize",
  "strategize",
  "deploy",
  "brand",
  "grow",
  "target",
  "syndicate",
  "synthesize",
  "deliver",
  "mesh",
  "incubate",
  "engage",
  "maximize",
  "benchmark",
  "expedite",
  "reintermediate",
  "whiteboard",
  "visualize",
  "repurpose",
  "innovate",
  "scale",
  "unleash",
  "drive",
  "extend",
  "engineer",
  "revolutionize",
  "generate",
  "exploit",
  "transition",
  "e-enable",
  "iterate",
  "cultivate",
  "matrix",
  "productize",
  "redefine",
  "recontextualize"
];

},{}],"node_modules/faker/lib/locales/cz/company/bs_noun.js":[function(require,module,exports) {
module["exports"] = [
  "clicks-and-mortar",
  "value-added",
  "vertical",
  "proactive",
  "robust",
  "revolutionary",
  "scalable",
  "leading-edge",
  "innovative",
  "intuitive",
  "strategic",
  "e-business",
  "mission-critical",
  "sticky",
  "one-to-one",
  "24/7",
  "end-to-end",
  "global",
  "B2B",
  "B2C",
  "granular",
  "frictionless",
  "virtual",
  "viral",
  "dynamic",
  "24/365",
  "best-of-breed",
  "killer",
  "magnetic",
  "bleeding-edge",
  "web-enabled",
  "interactive",
  "dot-com",
  "sexy",
  "back-end",
  "real-time",
  "efficient",
  "front-end",
  "distributed",
  "seamless",
  "extensible",
  "turn-key",
  "world-class",
  "open-source",
  "cross-platform",
  "cross-media",
  "synergistic",
  "bricks-and-clicks",
  "out-of-the-box",
  "enterprise",
  "integrated",
  "impactful",
  "wireless",
  "transparent",
  "next-generation",
  "cutting-edge",
  "user-centric",
  "visionary",
  "customized",
  "ubiquitous",
  "plug-and-play",
  "collaborative",
  "compelling",
  "holistic",
  "rich",
  "synergies",
  "web-readiness",
  "paradigms",
  "markets",
  "partnerships",
  "infrastructures",
  "platforms",
  "initiatives",
  "channels",
  "eyeballs",
  "communities",
  "ROI",
  "solutions",
  "e-tailers",
  "e-services",
  "action-items",
  "portals",
  "niches",
  "technologies",
  "content",
  "vortals",
  "supply-chains",
  "convergence",
  "relationships",
  "architectures",
  "interfaces",
  "e-markets",
  "e-commerce",
  "systems",
  "bandwidth",
  "infomediaries",
  "models",
  "mindshare",
  "deliverables",
  "users",
  "schemas",
  "networks",
  "applications",
  "metrics",
  "e-business",
  "functionalities",
  "experiences",
  "web services",
  "methodologies"
];

},{}],"node_modules/faker/lib/locales/cz/company/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{Name.last_name} #{suffix}",
  "#{Name.last_name} #{suffix}",
  "#{Name.man_last_name} a #{Name.man_last_name} #{suffix}"
];

},{}],"node_modules/faker/lib/locales/cz/company/index.js":[function(require,module,exports) {
var company = {};
module['exports'] = company;
company.suffix = require("./suffix");
company.adjective = require("./adjective");
company.descriptor = require("./descriptor");
company.noun = require("./noun");
company.bs_verb = require("./bs_verb");
company.bs_noun = require("./bs_noun");
company.name = require("./name");

},{"./suffix":"node_modules/faker/lib/locales/cz/company/suffix.js","./adjective":"node_modules/faker/lib/locales/cz/company/adjective.js","./descriptor":"node_modules/faker/lib/locales/cz/company/descriptor.js","./noun":"node_modules/faker/lib/locales/cz/company/noun.js","./bs_verb":"node_modules/faker/lib/locales/cz/company/bs_verb.js","./bs_noun":"node_modules/faker/lib/locales/cz/company/bs_noun.js","./name":"node_modules/faker/lib/locales/cz/company/name.js"}],"node_modules/faker/lib/locales/cz/internet/free_email.js":[function(require,module,exports) {
module["exports"] = [
  "gmail.com",
  "seznam.cz",
  "centrum.cz",
  "volny.cz",
  "atlas.cz"
];

},{}],"node_modules/faker/lib/locales/cz/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "cz",
  "com",
  "net",
  "eu",
  "org"
];

},{}],"node_modules/faker/lib/locales/cz/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.free_email = require("./free_email");
internet.domain_suffix = require("./domain_suffix");

},{"./free_email":"node_modules/faker/lib/locales/cz/internet/free_email.js","./domain_suffix":"node_modules/faker/lib/locales/cz/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/cz/lorem/words.js":[function(require,module,exports) {
module["exports"] = [
  "alias",
  "consequatur",
  "aut",
  "perferendis",
  "sit",
  "voluptatem",
  "accusantium",
  "doloremque",
  "aperiam",
  "eaque",
  "ipsa",
  "quae",
  "ab",
  "illo",
  "inventore",
  "veritatis",
  "et",
  "quasi",
  "architecto",
  "beatae",
  "vitae",
  "dicta",
  "sunt",
  "explicabo",
  "aspernatur",
  "aut",
  "odit",
  "aut",
  "fugit",
  "sed",
  "quia",
  "consequuntur",
  "magni",
  "dolores",
  "eos",
  "qui",
  "ratione",
  "voluptatem",
  "sequi",
  "nesciunt",
  "neque",
  "dolorem",
  "ipsum",
  "quia",
  "dolor",
  "sit",
  "amet",
  "consectetur",
  "adipisci",
  "velit",
  "sed",
  "quia",
  "non",
  "numquam",
  "eius",
  "modi",
  "tempora",
  "incidunt",
  "ut",
  "labore",
  "et",
  "dolore",
  "magnam",
  "aliquam",
  "quaerat",
  "voluptatem",
  "ut",
  "enim",
  "ad",
  "minima",
  "veniam",
  "quis",
  "nostrum",
  "exercitationem",
  "ullam",
  "corporis",
  "nemo",
  "enim",
  "ipsam",
  "voluptatem",
  "quia",
  "voluptas",
  "sit",
  "suscipit",
  "laboriosam",
  "nisi",
  "ut",
  "aliquid",
  "ex",
  "ea",
  "commodi",
  "consequatur",
  "quis",
  "autem",
  "vel",
  "eum",
  "iure",
  "reprehenderit",
  "qui",
  "in",
  "ea",
  "voluptate",
  "velit",
  "esse",
  "quam",
  "nihil",
  "molestiae",
  "et",
  "iusto",
  "odio",
  "dignissimos",
  "ducimus",
  "qui",
  "blanditiis",
  "praesentium",
  "laudantium",
  "totam",
  "rem",
  "voluptatum",
  "deleniti",
  "atque",
  "corrupti",
  "quos",
  "dolores",
  "et",
  "quas",
  "molestias",
  "excepturi",
  "sint",
  "occaecati",
  "cupiditate",
  "non",
  "provident",
  "sed",
  "ut",
  "perspiciatis",
  "unde",
  "omnis",
  "iste",
  "natus",
  "error",
  "similique",
  "sunt",
  "in",
  "culpa",
  "qui",
  "officia",
  "deserunt",
  "mollitia",
  "animi",
  "id",
  "est",
  "laborum",
  "et",
  "dolorum",
  "fuga",
  "et",
  "harum",
  "quidem",
  "rerum",
  "facilis",
  "est",
  "et",
  "expedita",
  "distinctio",
  "nam",
  "libero",
  "tempore",
  "cum",
  "soluta",
  "nobis",
  "est",
  "eligendi",
  "optio",
  "cumque",
  "nihil",
  "impedit",
  "quo",
  "porro",
  "quisquam",
  "est",
  "qui",
  "minus",
  "id",
  "quod",
  "maxime",
  "placeat",
  "facere",
  "possimus",
  "omnis",
  "voluptas",
  "assumenda",
  "est",
  "omnis",
  "dolor",
  "repellendus",
  "temporibus",
  "autem",
  "quibusdam",
  "et",
  "aut",
  "consequatur",
  "vel",
  "illum",
  "qui",
  "dolorem",
  "eum",
  "fugiat",
  "quo",
  "voluptas",
  "nulla",
  "pariatur",
  "at",
  "vero",
  "eos",
  "et",
  "accusamus",
  "officiis",
  "debitis",
  "aut",
  "rerum",
  "necessitatibus",
  "saepe",
  "eveniet",
  "ut",
  "et",
  "voluptates",
  "repudiandae",
  "sint",
  "et",
  "molestiae",
  "non",
  "recusandae",
  "itaque",
  "earum",
  "rerum",
  "hic",
  "tenetur",
  "a",
  "sapiente",
  "delectus",
  "ut",
  "aut",
  "reiciendis",
  "voluptatibus",
  "maiores",
  "doloribus",
  "asperiores",
  "repellat"
];

},{}],"node_modules/faker/lib/locales/cz/lorem/supplemental.js":[function(require,module,exports) {
module["exports"] = [
  "abbas",
  "abduco",
  "abeo",
  "abscido",
  "absconditus",
  "absens",
  "absorbeo",
  "absque",
  "abstergo",
  "absum",
  "abundans",
  "abutor",
  "accedo",
  "accendo",
  "acceptus",
  "accipio",
  "accommodo",
  "accusator",
  "acer",
  "acerbitas",
  "acervus",
  "acidus",
  "acies",
  "acquiro",
  "acsi",
  "adamo",
  "adaugeo",
  "addo",
  "adduco",
  "ademptio",
  "adeo",
  "adeptio",
  "adfectus",
  "adfero",
  "adficio",
  "adflicto",
  "adhaero",
  "adhuc",
  "adicio",
  "adimpleo",
  "adinventitias",
  "adipiscor",
  "adiuvo",
  "administratio",
  "admiratio",
  "admitto",
  "admoneo",
  "admoveo",
  "adnuo",
  "adopto",
  "adsidue",
  "adstringo",
  "adsuesco",
  "adsum",
  "adulatio",
  "adulescens",
  "adultus",
  "aduro",
  "advenio",
  "adversus",
  "advoco",
  "aedificium",
  "aeger",
  "aegre",
  "aegrotatio",
  "aegrus",
  "aeneus",
  "aequitas",
  "aequus",
  "aer",
  "aestas",
  "aestivus",
  "aestus",
  "aetas",
  "aeternus",
  "ager",
  "aggero",
  "aggredior",
  "agnitio",
  "agnosco",
  "ago",
  "ait",
  "aiunt",
  "alienus",
  "alii",
  "alioqui",
  "aliqua",
  "alius",
  "allatus",
  "alo",
  "alter",
  "altus",
  "alveus",
  "amaritudo",
  "ambitus",
  "ambulo",
  "amicitia",
  "amiculum",
  "amissio",
  "amita",
  "amitto",
  "amo",
  "amor",
  "amoveo",
  "amplexus",
  "amplitudo",
  "amplus",
  "ancilla",
  "angelus",
  "angulus",
  "angustus",
  "animadverto",
  "animi",
  "animus",
  "annus",
  "anser",
  "ante",
  "antea",
  "antepono",
  "antiquus",
  "aperio",
  "aperte",
  "apostolus",
  "apparatus",
  "appello",
  "appono",
  "appositus",
  "approbo",
  "apto",
  "aptus",
  "apud",
  "aqua",
  "ara",
  "aranea",
  "arbitro",
  "arbor",
  "arbustum",
  "arca",
  "arceo",
  "arcesso",
  "arcus",
  "argentum",
  "argumentum",
  "arguo",
  "arma",
  "armarium",
  "armo",
  "aro",
  "ars",
  "articulus",
  "artificiose",
  "arto",
  "arx",
  "ascisco",
  "ascit",
  "asper",
  "aspicio",
  "asporto",
  "assentator",
  "astrum",
  "atavus",
  "ater",
  "atqui",
  "atrocitas",
  "atrox",
  "attero",
  "attollo",
  "attonbitus",
  "auctor",
  "auctus",
  "audacia",
  "audax",
  "audentia",
  "audeo",
  "audio",
  "auditor",
  "aufero",
  "aureus",
  "auris",
  "aurum",
  "aut",
  "autem",
  "autus",
  "auxilium",
  "avaritia",
  "avarus",
  "aveho",
  "averto",
  "avoco",
  "baiulus",
  "balbus",
  "barba",
  "bardus",
  "basium",
  "beatus",
  "bellicus",
  "bellum",
  "bene",
  "beneficium",
  "benevolentia",
  "benigne",
  "bestia",
  "bibo",
  "bis",
  "blandior",
  "bonus",
  "bos",
  "brevis",
  "cado",
  "caecus",
  "caelestis",
  "caelum",
  "calamitas",
  "calcar",
  "calco",
  "calculus",
  "callide",
  "campana",
  "candidus",
  "canis",
  "canonicus",
  "canto",
  "capillus",
  "capio",
  "capitulus",
  "capto",
  "caput",
  "carbo",
  "carcer",
  "careo",
  "caries",
  "cariosus",
  "caritas",
  "carmen",
  "carpo",
  "carus",
  "casso",
  "caste",
  "casus",
  "catena",
  "caterva",
  "cattus",
  "cauda",
  "causa",
  "caute",
  "caveo",
  "cavus",
  "cedo",
  "celebrer",
  "celer",
  "celo",
  "cena",
  "cenaculum",
  "ceno",
  "censura",
  "centum",
  "cerno",
  "cernuus",
  "certe",
  "certo",
  "certus",
  "cervus",
  "cetera",
  "charisma",
  "chirographum",
  "cibo",
  "cibus",
  "cicuta",
  "cilicium",
  "cimentarius",
  "ciminatio",
  "cinis",
  "circumvenio",
  "cito",
  "civis",
  "civitas",
  "clam",
  "clamo",
  "claro",
  "clarus",
  "claudeo",
  "claustrum",
  "clementia",
  "clibanus",
  "coadunatio",
  "coaegresco",
  "coepi",
  "coerceo",
  "cogito",
  "cognatus",
  "cognomen",
  "cogo",
  "cohaero",
  "cohibeo",
  "cohors",
  "colligo",
  "colloco",
  "collum",
  "colo",
  "color",
  "coma",
  "combibo",
  "comburo",
  "comedo",
  "comes",
  "cometes",
  "comis",
  "comitatus",
  "commemoro",
  "comminor",
  "commodo",
  "communis",
  "comparo",
  "compello",
  "complectus",
  "compono",
  "comprehendo",
  "comptus",
  "conatus",
  "concedo",
  "concido",
  "conculco",
  "condico",
  "conduco",
  "confero",
  "confido",
  "conforto",
  "confugo",
  "congregatio",
  "conicio",
  "coniecto",
  "conitor",
  "coniuratio",
  "conor",
  "conqueror",
  "conscendo",
  "conservo",
  "considero",
  "conspergo",
  "constans",
  "consuasor",
  "contabesco",
  "contego",
  "contigo",
  "contra",
  "conturbo",
  "conventus",
  "convoco",
  "copia",
  "copiose",
  "cornu",
  "corona",
  "corpus",
  "correptius",
  "corrigo",
  "corroboro",
  "corrumpo",
  "coruscus",
  "cotidie",
  "crapula",
  "cras",
  "crastinus",
  "creator",
  "creber",
  "crebro",
  "credo",
  "creo",
  "creptio",
  "crepusculum",
  "cresco",
  "creta",
  "cribro",
  "crinis",
  "cruciamentum",
  "crudelis",
  "cruentus",
  "crur",
  "crustulum",
  "crux",
  "cubicularis",
  "cubitum",
  "cubo",
  "cui",
  "cuius",
  "culpa",
  "culpo",
  "cultellus",
  "cultura",
  "cum",
  "cunabula",
  "cunae",
  "cunctatio",
  "cupiditas",
  "cupio",
  "cuppedia",
  "cupressus",
  "cur",
  "cura",
  "curatio",
  "curia",
  "curiositas",
  "curis",
  "curo",
  "curriculum",
  "currus",
  "cursim",
  "curso",
  "cursus",
  "curto",
  "curtus",
  "curvo",
  "curvus",
  "custodia",
  "damnatio",
  "damno",
  "dapifer",
  "debeo",
  "debilito",
  "decens",
  "decerno",
  "decet",
  "decimus",
  "decipio",
  "decor",
  "decretum",
  "decumbo",
  "dedecor",
  "dedico",
  "deduco",
  "defaeco",
  "defendo",
  "defero",
  "defessus",
  "defetiscor",
  "deficio",
  "defigo",
  "defleo",
  "defluo",
  "defungo",
  "degenero",
  "degero",
  "degusto",
  "deinde",
  "delectatio",
  "delego",
  "deleo",
  "delibero",
  "delicate",
  "delinquo",
  "deludo",
  "demens",
  "demergo",
  "demitto",
  "demo",
  "demonstro",
  "demoror",
  "demulceo",
  "demum",
  "denego",
  "denique",
  "dens",
  "denuncio",
  "denuo",
  "deorsum",
  "depereo",
  "depono",
  "depopulo",
  "deporto",
  "depraedor",
  "deprecator",
  "deprimo",
  "depromo",
  "depulso",
  "deputo",
  "derelinquo",
  "derideo",
  "deripio",
  "desidero",
  "desino",
  "desipio",
  "desolo",
  "desparatus",
  "despecto",
  "despirmatio",
  "infit",
  "inflammatio",
  "paens",
  "patior",
  "patria",
  "patrocinor",
  "patruus",
  "pauci",
  "paulatim",
  "pauper",
  "pax",
  "peccatus",
  "pecco",
  "pecto",
  "pectus",
  "pecunia",
  "pecus",
  "peior",
  "pel",
  "ocer",
  "socius",
  "sodalitas",
  "sol",
  "soleo",
  "solio",
  "solitudo",
  "solium",
  "sollers",
  "sollicito",
  "solum",
  "solus",
  "solutio",
  "solvo",
  "somniculosus",
  "somnus",
  "sonitus",
  "sono",
  "sophismata",
  "sopor",
  "sordeo",
  "sortitus",
  "spargo",
  "speciosus",
  "spectaculum",
  "speculum",
  "sperno",
  "spero",
  "spes",
  "spiculum",
  "spiritus",
  "spoliatio",
  "sponte",
  "stabilis",
  "statim",
  "statua",
  "stella",
  "stillicidium",
  "stipes",
  "stips",
  "sto",
  "strenuus",
  "strues",
  "studio",
  "stultus",
  "suadeo",
  "suasoria",
  "sub",
  "subito",
  "subiungo",
  "sublime",
  "subnecto",
  "subseco",
  "substantia",
  "subvenio",
  "succedo",
  "succurro",
  "sufficio",
  "suffoco",
  "suffragium",
  "suggero",
  "sui",
  "sulum",
  "sum",
  "summa",
  "summisse",
  "summopere",
  "sumo",
  "sumptus",
  "supellex",
  "super",
  "suppellex",
  "supplanto",
  "suppono",
  "supra",
  "surculus",
  "surgo",
  "sursum",
  "suscipio",
  "suspendo",
  "sustineo",
  "suus",
  "synagoga",
  "tabella",
  "tabernus",
  "tabesco",
  "tabgo",
  "tabula",
  "taceo",
  "tactus",
  "taedium",
  "talio",
  "talis",
  "talus",
  "tam",
  "tamdiu",
  "tamen",
  "tametsi",
  "tamisium",
  "tamquam",
  "tandem",
  "tantillus",
  "tantum",
  "tardus",
  "tego",
  "temeritas",
  "temperantia",
  "templum",
  "temptatio",
  "tempus",
  "tenax",
  "tendo",
  "teneo",
  "tener",
  "tenuis",
  "tenus",
  "tepesco",
  "tepidus",
  "ter",
  "terebro",
  "teres",
  "terga",
  "tergeo",
  "tergiversatio",
  "tergo",
  "tergum",
  "termes",
  "terminatio",
  "tero",
  "terra",
  "terreo",
  "territo",
  "terror",
  "tersus",
  "tertius",
  "testimonium",
  "texo",
  "textilis",
  "textor",
  "textus",
  "thalassinus",
  "theatrum",
  "theca",
  "thema",
  "theologus",
  "thermae",
  "thesaurus",
  "thesis",
  "thorax",
  "thymbra",
  "thymum",
  "tibi",
  "timidus",
  "timor",
  "titulus",
  "tolero",
  "tollo",
  "tondeo",
  "tonsor",
  "torqueo",
  "torrens",
  "tot",
  "totidem",
  "toties",
  "totus",
  "tracto",
  "trado",
  "traho",
  "trans",
  "tredecim",
  "tremo",
  "trepide",
  "tres",
  "tribuo",
  "tricesimus",
  "triduana",
  "triginta",
  "tripudio",
  "tristis",
  "triumphus",
  "trucido",
  "truculenter",
  "tubineus",
  "tui",
  "tum",
  "tumultus",
  "tunc",
  "turba",
  "turbo",
  "turpe",
  "turpis",
  "tutamen",
  "tutis",
  "tyrannus",
  "uberrime",
  "ubi",
  "ulciscor",
  "ullus",
  "ulterius",
  "ultio",
  "ultra",
  "umbra",
  "umerus",
  "umquam",
  "una",
  "unde",
  "undique",
  "universe",
  "unus",
  "urbanus",
  "urbs",
  "uredo",
  "usitas",
  "usque",
  "ustilo",
  "ustulo",
  "usus",
  "uter",
  "uterque",
  "utilis",
  "utique",
  "utor",
  "utpote",
  "utrimque",
  "utroque",
  "utrum",
  "uxor",
  "vaco",
  "vacuus",
  "vado",
  "vae",
  "valde",
  "valens",
  "valeo",
  "valetudo",
  "validus",
  "vallum",
  "vapulus",
  "varietas",
  "varius",
  "vehemens",
  "vel",
  "velociter",
  "velum",
  "velut",
  "venia",
  "venio",
  "ventito",
  "ventosus",
  "ventus",
  "venustas",
  "ver",
  "verbera",
  "verbum",
  "vere",
  "verecundia",
  "vereor",
  "vergo",
  "veritas",
  "vero",
  "versus",
  "verto",
  "verumtamen",
  "verus",
  "vesco",
  "vesica",
  "vesper",
  "vespillo",
  "vester",
  "vestigium",
  "vestrum",
  "vetus",
  "via",
  "vicinus",
  "vicissitudo",
  "victoria",
  "victus",
  "videlicet",
  "video",
  "viduata",
  "viduo",
  "vigilo",
  "vigor",
  "vilicus",
  "vilis",
  "vilitas",
  "villa",
  "vinco",
  "vinculum",
  "vindico",
  "vinitor",
  "vinum",
  "vir",
  "virga",
  "virgo",
  "viridis",
  "viriliter",
  "virtus",
  "vis",
  "viscus",
  "vita",
  "vitiosus",
  "vitium",
  "vito",
  "vivo",
  "vix",
  "vobis",
  "vociferor",
  "voco",
  "volaticus",
  "volo",
  "volubilis",
  "voluntarius",
  "volup",
  "volutabrum",
  "volva",
  "vomer",
  "vomica",
  "vomito",
  "vorago",
  "vorax",
  "voro",
  "vos",
  "votum",
  "voveo",
  "vox",
  "vulariter",
  "vulgaris",
  "vulgivagus",
  "vulgo",
  "vulgus",
  "vulnero",
  "vulnus",
  "vulpes",
  "vulticulus",
  "vultuosus",
  "xiphias"
];

},{}],"node_modules/faker/lib/locales/cz/lorem/index.js":[function(require,module,exports) {
var lorem = {};
module['exports'] = lorem;
lorem.words = require("./words");
lorem.supplemental = require("./supplemental");

},{"./words":"node_modules/faker/lib/locales/cz/lorem/words.js","./supplemental":"node_modules/faker/lib/locales/cz/lorem/supplemental.js"}],"node_modules/faker/lib/locales/cz/name/male_first_name.js":[function(require,module,exports) {
module["exports"] = [
  "Abadon",
  "Abdon",
  "Ábel",
  "Abelard",
  "Abraham",
  "Abrahám",
  "Absolon",
  "Absolón",
  "Adalbert",
  "Adam",
  "Adin",
  "Adolf",
  "Adrian",
  "Adrián",
  "Agaton",
  "Achil",
  "Achiles",
  "Alan",
  "Alban",
  "Albert",
  "Albín",
  "Albrecht",
  "Aldo",
  "Alen",
  "Aleš",
  "Alexandr",
  "Alexej",
  "Alfons",
  "Alfréd",
  "Alois",
  "Alojz",
  "Alva",
  "Alvar",
  "Alvin",
  "Amadeus",
  "Amand",
  "Amát",
  "Ambrož",
  "Amos",
  "Ámos",
  "Anastáz",
  "Anatol",
  "Anděl",
  "Andělín",
  "Andrej",
  "Anselm",
  "Antal",
  "Antonín",
  "Aram",
  "Ariel",
  "Aristid",
  "Arkád",
  "Armand",
  "Armin",
  "Arne",
  "Arnold",
  "Arnošt",
  "Áron",
  "Árón",
  "Arpád",
  "Arsen",
  "Artur",
  "Artuš",
  "Arzen",
  "Atanas",
  "Atanáš",
  "Atila",
  "August",
  "Augustin",
  "Augustýn",
  "Aurel",
  "Aurelián",
  "Axel",
  "Baltazar",
  "Barnabáš",
  "Bartoloměj",
  "Basil",
  "Bazil",
  "Beatus",
  "Bedřich",
  "Benedikt",
  "Benjamin",
  "Benjamín",
  "Bernard",
  "Bertold",
  "Bertram",
  "Bivoj",
  "Blahomil",
  "Blahomír",
  "Blahoslav",
  "Blažej",
  "Bohdan",
  "Bohuchval",
  "Bohumil",
  "Bohumír",
  "Bohun",
  "Bohuslav",
  "Bohuš",
  "Bojan",
  "Bolemír",
  "Boleslav",
  "Bonifác",
  "Borek",
  "Boris",
  "Borislav",
  "Bořek",
  "Bořislav",
  "Bořivoj",
  "Božetěch",
  "Božidar",
  "Božislav",
  "Branimír",
  "Branislav",
  "Bratislav",
  "Bret",
  "Brian",
  "Brit",
  "Bronislav",
  "Bruno",
  "Břetislav",
  "Budimír",
  "Budislav",
  "Budivoj",
  "Cecil",
  "Cedrik",
  "Celestin",
  "Celestýn",
  "César",
  "Cézar",
  "Ctibor",
  "Ctirad",
  "Ctislav",
  "Cyprián",
  "Cyril",
  "Čeněk",
  "Čestmír",
  "Čistoslav",
  "Dag",
  "Dalibor",
  "Dalimil",
  "Dalimír",
  "Damián",
  "Dan",
  "Daniel",
  "Darek",
  "Darius",
  "David",
  "Denis",
  "Děpold",
  "Dětmar",
  "Dětřich",
  "Dezider",
  "Dimitrij",
  "Dino",
  "Dionýz",
  "Dionýzos",
  "Diviš",
  "Dluhoš",
  "Dobromil",
  "Dobromír",
  "Dobroslav",
  "Dominik",
  "Donald",
  "Donát",
  "Dorian",
  "Dorián",
  "Drahomil",
  "Drahomír",
  "Drahoň",
  "Drahoslav",
  "Drahoš",
  "Drahotín",
  "Drahutin",
  "Dušan",
  "Edgar",
  "Edmond",
  "Edmund",
  "Eduard",
  "Edvard",
  "Edvin",
  "Edvín",
  "Egmont",
  "Egon",
  "Eliáš",
  "Elizej",
  "Elizeus",
  "Elmar",
  "Elvis",
  "Emanuel",
  "Emanuel",
  "Emerich",
  "Emil",
  "Emilián",
  "Engelbert",
  "Erazim",
  "Erazmus",
  "Erhard",
  "Erich",
  "Erik",
  "Ernest",
  "Ernst",
  "Ervín",
  "Eugen",
  "Eusebius",
  "Evald",
  "Evan",
  "Evarist",
  "Evžen",
  "Ezechiel",
  "Ezra",
  "Fabián",
  "Faust",
  "Faustin",
  "Faustýn",
  "Fedor",
  "Felicián",
  "Felix",
  "Ferdinand",
  "Fidel",
  "Fidelius",
  "Filemon",
  "Filibert",
  "Filip",
  "Filomen",
  "Flavián",
  "Flavius",
  "Florentin",
  "Florentýn",
  "Florián",
  "Fortunát",
  "Fráňa",
  "Franc",
  "František",
  "Fridolín",
  "Gabin",
  "Gabriel",
  "Gál",
  "Garik",
  "Gaston",
  "Gedeon",
  "Gejza",
  "Genadij",
  "Gerald",
  "Gerard",
  "Gerazim",
  "Gerhard",
  "Géza",
  "Gilbert",
  "Gleb",
  "Glen",
  "Gorazd",
  "Gordon",
  "Gothard",
  "Gracián",
  "Grant",
  "Gunter",
  "Gűnter",
  "Gustav",
  "Hanuš",
  "Harald",
  "Harold",
  "Haštal",
  "Havel",
  "Helmut",
  "Herbert",
  "Herman",
  "Heřman",
  "Hilar",
  "Hilarius",
  "Hjalmar",
  "Homér",
  "Honor",
  "Honorius",
  "Horác",
  "Horst",
  "Horymír",
  "Hostimil",
  "Hostimír",
  "Hostislav",
  "Hostivít",
  "Hovard",
  "Hubert",
  "Hugo",
  "Hvězdoslav",
  "Hyacint",
  "Hynek",
  "Hypolit",
  "Chrabroš",
  "Chraniboj",
  "Chranibor",
  "Chranislav",
  "Chrudoš",
  "Chval",
  "Ignác",
  "Ignát",
  "Igor",
  "Ilja",
  "Inocenc",
  "Irenej",
  "Ireneus",
  "Irvin",
  "Isidor",
  "Ivan",
  "Ivar",
  "Ivo",
  "Ivor",
  "Izaiáš",
  "Izák",
  "Izidor",
  "Izmael",
  "Jacek",
  "Jáchym",
  "Jakub",
  "Jan",
  "Jarmil",
  "Jarolím",
  "Jaromil",
  "Jaromír",
  "Jaroslav",
  "Jason",
  "Jasoň",
  "Jeremiáš",
  "Jeroným",
  "Jiljí",
  "Jimram",
  "Jindřich",
  "Jiří",
  "Job",
  "Joel",
  "Jonáš",
  "Jonatan",
  "Jonathan",
  "Jordan",
  "Josef",
  "Jošt",
  "Jozef",
  "Jozue",
  "Juda",
  "Julián",
  "Julius",
  "Justin",
  "Justýn",
  "Kajetán",
  "Kamil",
  "Karel",
  "Kasián",
  "Kastor",
  "Kašpar",
  "Kazimír",
  "Kilián",
  "Kim",
  "Klaudián",
  "Klaudius",
  "Klement",
  "Kliment",
  "Knut",
  "Koloman",
  "Kolombín",
  "Kolumbán",
  "Kolumbín",
  "Konrád",
  "Konstantin",
  "Konstantýn",
  "Kornel",
  "Kornelius",
  "Kosma",
  "Kosmas",
  "Krasomil",
  "Krasoslav",
  "Kristián",
  "Kryšpín",
  "Kryštof",
  "Křesomysl",
  "Křišťan",
  "Kurt",
  "Květoň",
  "Květoslav",
  "Květoš",
  "Kvido",
  "Ladislav",
  "Lambert",
  "Lars",
  "Laurenc",
  "Lazar",
  "Leander",
  "Leandr",
  "Leo",
  "Leodegar",
  "Leon",
  "Leonard",
  "Leonid",
  "Leontýn",
  "Leopold",
  "Leoš",
  "Lešek",
  "Lev",
  "Libor",
  "Liboslav",
  "Lionel",
  "Livius",
  "Lorenc",
  "Lotar",
  "Lothar",
  "Lubomír",
  "Lubor",
  "Luboslav",
  "Luboš",
  "Lucián",
  "Lucius",
  "Luděk",
  "Ludivoj",
  "Ludomír",
  "Ludoslav",
  "Ludvík",
  "Lukáš",
  "Lukrecius",
  "Lumír",
  "Lutibor",
  "Lutobor",
  "Magnus",
  "Makar",
  "Manfred",
  "Manfréd",
  "Mansvet",
  "Manuel",
  "Marcel",
  "Marek",
  "Marian",
  "Marián",
  "Marin",
  "Mario",
  "Marius",
  "Martin",
  "Matěj",
  "Matouš",
  "Matyáš",
  "Max",
  "Maxim",
  "Maximilián",
  "Maxmilián",
  "Mečislav",
  "Medard",
  "Melichar",
  "Merlin",
  "Mervin",
  "Metod",
  "Metoděj",
  "Michael",
  "Michal",
  "Mikoláš",
  "Mikuláš",
  "Milan",
  "Milíč",
  "Milík",
  "Milivoj",
  "Miloň",
  "Milorad",
  "Miloslav",
  "Miloš",
  "Milota",
  "Milouš",
  "Milovan",
  "Milovín",
  "Milutín",
  "Mirek",
  "Mirko",
  "Miromil",
  "Miron",
  "Miroslav",
  "Mirtil",
  "Mlad",
  "Mladen",
  "Mnata",
  "Mnislav",
  "Modest",
  "Mojmír",
  "Mojžíš",
  "Morgan",
  "Moric",
  "Moris",
  "Mořic",
  "Mstislav",
  "Myron",
  "Myrtil",
  "Napoleon",
  "Narcis",
  "Natan",
  "Natanael",
  "Nathan",
  "Nathanael",
  "Něhoslav",
  "Neklan",
  "Nepomuk",
  "Nezamysl",
  "Nikita",
  "Nikodém",
  "Nikola",
  "Nikolas",
  "Norbert",
  "Norman",
  "Odolen",
  "Odon",
  "Oktavián",
  "Oktavius",
  "Olaf",
  "Olbram",
  "Oldřich",
  "Oleg",
  "Oliver",
  "Omar",
  "Ondřej",
  "Orest",
  "Oskar",
  "Osvald",
  "Ota",
  "Otakar",
  "Otmar",
  "Oto",
  "Otokar",
  "Otomar",
  "Ovidius",
  "Palmiro",
  "Pankrác",
  "Pantaleon",
  "Paris",
  "Parsival",
  "Paskal",
  "Patrik",
  "Pavel",
  "Pavlín",
  "Pelhřim",
  "Perikles",
  "Petr",
  "Petronius",
  "Pius",
  "Platon",
  "Platón",
  "Polykarp",
  "Pravdomil",
  "Pravomil",
  "Prokop",
  "Prosper",
  "Přemysl",
  "Přibyslav",
  "Radan",
  "Radegast",
  "Radek",
  "Radhost",
  "Radim",
  "Radimír",
  "Radislav",
  "Radivoj",
  "Radko",
  "Radmil",
  "Radomil",
  "Radomír",
  "Radoslav",
  "Radoš",
  "Radovan",
  "Radúz",
  "Radvan",
  "Rafael",
  "Raimund",
  "Rainald",
  "Rainer",
  "Rainhard",
  "Rainold",
  "Rajko",
  "Ralf",
  "Ramon",
  "Randolf",
  "Ranek",
  "Ranko",
  "Rastislav",
  "Ratibor",
  "Ratmír",
  "Redmond",
  "Reginald",
  "Remig",
  "Remus",
  "Renát",
  "René",
  "Richard",
  "Robert",
  "Robin",
  "Robinson",
  "Rodan",
  "Roderik",
  "Rodrigo",
  "Roger",
  "Roch",
  "Roland",
  "Rolf",
  "Roman",
  "Romeo",
  "Romuald",
  "Romul",
  "Romulus",
  "Ronald",
  "Rostislav",
  "Ruben",
  "Rudolf",
  "Rufus",
  "Rupert",
  "Ruprecht",
  "Ruslan",
  "Řehoř",
  "Sába",
  "Sámo",
  "Samson",
  "Samuel",
  "Saturnin",
  "Saul",
  "Sáva",
  "Sebastian",
  "Sebastián",
  "Sebestian",
  "Sedrik",
  "Serafín",
  "Serenus",
  "Sergej",
  "Servác",
  "Severín",
  "Sidon",
  "Sigfríd",
  "Silvan",
  "Silván",
  "Silvestr",
  "Silvius",
  "Simeon",
  "Simon",
  "Sinkler",
  "Sixt",
  "Sixtus",
  "Slávek",
  "Slaviboj",
  "Slavibor",
  "Slavoboj",
  "Slavoj",
  "Slavomil",
  "Slavomír",
  "Smil",
  "Soběslav",
  "Sokrat",
  "Soter",
  "Spytihněv",
  "Stanimír",
  "Stanislav",
  "Stojan",
  "Stojmír",
  "Svatoboj",
  "Svatobor",
  "Svatomír",
  "Svatopluk",
  "Svatoslav",
  "Sven",
  "Svetozar",
  "Šalamoun",
  "Šalomoun",
  "Šavel",
  "Šebastián",
  "Šimon",
  "Šťasta",
  "Štefan",
  "Štěpán",
  "Tadeáš",
  "Tankred",
  "Taras",
  "Teobald",
  "Teodor",
  "Teodorik",
  "Teodoz",
  "Teofan",
  "Teofil",
  "Terenc",
  "Terencius",
  "Theobald",
  "Theodor",
  "Theodorik",
  "Theofan",
  "Theofil",
  "Tiber",
  "Tiberius",
  "Tibor",
  "Tiburcius",
  "Tichomil",
  "Tichomír",
  "Tichon",
  "Timon",
  "Timotej",
  "Timoteus",
  "Timur",
  "Titus",
  "Tobiáš",
  "Tomáš",
  "Tomislav",
  "Tor",
  "Torkvát",
  "Torsten",
  "Tristan",
  "Udo",
  "Ulrich",
  "Upton",
  "Urban",
  "Uve",
  "Václav",
  "Vadim",
  "Valdemar",
  "Valentin",
  "Valentýn",
  "Valerián",
  "Valter",
  "Valtr",
  "Vasil",
  "Vavřinec",
  "Veleslav",
  "Velimír",
  "Velislav",
  "Věnceslav",
  "Vendelín",
  "Věnek",
  "Verner",
  "Věroslav",
  "Vidor",
  "Viktor",
  "Viktorin",
  "Viktorín",
  "Vilém",
  "Vilibald",
  "Vilmar",
  "Vincenc",
  "Virgil",
  "Virgin",
  "Vít",
  "Vítězslav",
  "Vitold",
  "Vítoslav",
  "Vivian",
  "Vladan",
  "Vladimír",
  "Vladislav",
  "Vladivoj",
  "Vlastimil",
  "Vlastimír",
  "Vlastislav",
  "Vlk",
  "Vojen",
  "Vojmil",
  "Vojmír",
  "Vojslav",
  "Vojtěch",
  "Vok",
  "Volfgang",
  "Vratislav",
  "Vsevolod",
  "Všeboj",
  "Všebor",
  "Všerad",
  "Všeslav",
  "Xaver",
  "Xaverius",
  "Záboj",
  "Zachar",
  "Zachariáš",
  "Záviš",
  "Zbislav",
  "Zbyhněv",
  "Zbyněk",
  "Zbyslav",
  "Zbyšek",
  "Zdeněk",
  "Zderad",
  "Zdeslav",
  "Zdík",
  "Zdirad",
  "Zdislav",
  "Zeno",
  "Zenon",
  "Zikmund",
  "Zlatan",
  "Zlatko",
  "Zlatomír",
  "Zoltán",
  "Zoran",
  "Zoroslav",
  "Zosim",
  "Zvonimír",
  "Žarko",
  "Ždan",
  "Želibor",
  "Želimír",
  "Želislav",
  "Želmír",
  "Žitomír",
  "Žitoslav",
  "Živan",
];

},{}],"node_modules/faker/lib/locales/cz/name/female_first_name.js":[function(require,module,exports) {
module["exports"] = [
  "Abigail",
  "Ada",
  "Adalberta",
  "Adéla",
  "Adelaida",
  "Adina",
  "Adolfa",
  "Adolfína",
  "Adriana",
  "Adriána",
  "Adriena",
  "Afra",
  "Agáta",
  "Aglaja",
  "Aida",
  "Alana",
  "Albena",
  "Alberta",
  "Albertina",
  "Albertýna",
  "Albína",
  "Alena",
  "Aleška",
  "Alexandra",
  "Alfréda",
  "Alice",
  "Alida",
  "Alina",
  "Alma",
  "Aloisie",
  "Alojzije",
  "Alžběta",
  "Amálie",
  "Amanda",
  "Amáta",
  "Amélie",
  "Anabela",
  "Anastázie",
  "Anatázie",
  "Anatolie",
  "Anatólie",
  "Anděla",
  "Andělína",
  "Andrea",
  "Aneta",
  "Anežka",
  "Angela",
  "Angelika",
  "Anita",
  "Anna",
  "Anselma",
  "Antonie",
  "Apolena",
  "Arabela",
  "Aranka",
  "Areta",
  "Ariadna",
  "Ariana",
  "Ariela",
  "Arleta",
  "Armida",
  "Arna",
  "Arnolda",
  "Arnoštka",
  "Astrid",
  "Astrida",
  "Atanázie",
  "Augusta",
  "Augustina",
  "Augustýna",
  "Aura",
  "Aurélie",
  "Aurora",
  "Babeta",
  "Barbara",
  "Barbora",
  "Beáta",
  "Beatrice",
  "Bedřiška",
  "Bela",
  "Běla",
  "Belinda",
  "Benedikta",
  "Berenika",
  "Berit",
  "Bernarda",
  "Berta",
  "Bertolda",
  "Bianka",
  "Bibiana",
  "Birgit",
  "Birgita",
  "Blahomila",
  "Blahomíra",
  "Blahoslava",
  "Blanka",
  "Blažena",
  "Bohdana",
  "Bohumila",
  "Bohumíra",
  "Bohuna",
  "Bohuslava",
  "Bohuše",
  "Bojana",
  "Bojislava",
  "Boleslava",
  "Borislava",
  "Bořislava",
  "Božena",
  "Božetěcha",
  "Božidara",
  "Branimíra",
  "Branislava",
  "Bratislava",
  "Brenda",
  "Brigita",
  "Brita",
  "Bronislava",
  "Bruna",
  "Brunhilda",
  "Břetislava",
  "Cecilie",
  "Cecílie",
  "Celestina",
  "Celestýna",
  "Celie",
  "Celina",
  "Ctibora",
  "Ctirada",
  "Ctislava",
  "Cyntie",
  "Cyrila",
  "Čeňka",
  "Čestmíra",
  "Čistoslava",
  "Dagmar",
  "Dagmara",
  "Dalibora",
  "Dalida",
  "Dalie",
  "Dalila",
  "Dalimila",
  "Dalimíra",
  "Damaris",
  "Damiana",
  "Damiána",
  "Dana",
  "Danica",
  "Daniela",
  "Danuše",
  "Danuta",
  "Daria",
  "Darie",
  "Darina",
  "Darja",
  "Davida",
  "Debora",
  "Delie",
  "Denisa",
  "Diana",
  "Dina",
  "Dita",
  "Diviška",
  "Dobrava",
  "Dobromila",
  "Dobromíra",
  "Dobroslava",
  "Dominika",
  "Donalda",
  "Donáta",
  "Dora",
  "Doris",
  "Dorota",
  "Doubrava",
  "Doubravka",
  "Drahomila",
  "Drahomíra",
  "Drahoslava",
  "Drahotína",
  "Drahuše",
  "Dulcinea",
  "Dušana",
  "Edita",
  "Eduarda",
  "Edvarda",
  "Egona",
  "Ela",
  "Elektra",
  "Elena",
  "Eleonora",
  "Elfrída",
  "Eliška",
  "Elsa",
  "Elvíra",
  "Elza",
  "Ema",
  "Emanuela",
  "Emilie",
  "Emílie",
  "Erika",
  "Erna",
  "Ervína",
  "Estela",
  "Ester",
  "Estera",
  "Etela",
  "Eufrozina",
  "Eufrozína",
  "Eugenie",
  "Eulálie",
  "Eunika",
  "Eusebie",
  "Eva",
  "Evelina",
  "Evelína",
  "Evženie",
  "Fabiána",
  "Fabie",
  "Fatima",
  "Faustina",
  "Faustýna",
  "Féba",
  "Fedora",
  "Felicie",
  "Felície",
  "Felicita",
  "Ferdinanda",
  "Fidelie",
  "Filipa",
  "Filoména",
  "Flavie",
  "Flora",
  "Flóra",
  "Florentina",
  "Florentýna",
  "Františka",
  "Frída",
  "Gabriela",
  "Gaja",
  "Gajana",
  "Galina",
  "Garika",
  "Gema",
  "Geralda",
  "Geraldina",
  "Gerarda",
  "Gerardina",
  "Gerda",
  "Gerharda",
  "Gertruda",
  "Gilberta",
  "Gina",
  "Gisela",
  "Gita",
  "Gizela",
  "Glorie",
  "Gordana",
  "Graciána",
  "Gracie",
  "Grácie",
  "Gražina",
  "Gréta",
  "Griselda",
  "Grizelda",
  "Gudrun",
  "Gustava",
  "Gvendolina",
  "Gvendolína",
  "Halina",
  "Hana",
  "Háta",
  "Havla",
  "Heda",
  "Hedvika",
  "Heidrun",
  "Helena",
  "Helga",
  "Herberta",
  "Hermína",
  "Herta",
  "Hilda",
  "Hortensie",
  "Hortenzie",
  "Horymíra",
  "Hostimila",
  "Hostimíra",
  "Hostislava",
  "Hvězdoslava",
  "Hyacinta",
  "Chranislava",
  "Iboja",
  "Ida",
  "Ignácie",
  "Ignáta",
  "Ildika",
  "Iljana",
  "Ilona",
  "Ilsa",
  "Ilza",
  "Ines",
  "Inesa",
  "Inéz",
  "Ingeborg",
  "Ingeborga",
  "Ingrid",
  "Ingrida",
  "Inka",
  "Irena",
  "Iris",
  "Irma",
  "Isabela",
  "Isidora",
  "Isolda",
  "Iva",
  "Ivana",
  "Iveta",
  "Ivona",
  "Izabela",
  "Izidora",
  "Izolda",
  "Jadrana",
  "Jadranka",
  "Jakuba",
  "Jakubka",
  "Jana",
  "Jarmila",
  "Jarolíma",
  "Jaromíra",
  "Jaroslava",
  "Jasmína",
  "Jasna",
  "Jasněna",
  "Jelena",
  "Jenovéfa",
  "Jesika",
  "Jindra",
  "Jindřiška",
  "Jiřina",
  "Jitka",
  "Johana",
  "Jolana",
  "Jolanta",
  "Jordana",
  "Jorga",
  "Josefa",
  "Josefína",
  "Jovana",
  "Jozefa",
  "Jozefína",
  "Judita",
  "Juliana",
  "Juliána",
  "Julie",
  "Justina",
  "Justýna",
  "Juta",
  "Kamila",
  "Karin",
  "Karina",
  "Karla",
  "Karmela",
  "Karmen",
  "Karolina",
  "Karolína",
  "Kateřina",
  "Katrin",
  "Katrina",
  "Kazi",
  "Kazimíra",
  "Kira",
  "Klára",
  "Klaudie",
  "Klementina",
  "Klementýna",
  "Kleopatra",
  "Klotylda",
  "Koleta",
  "Kolombína",
  "Kolumbína",
  "Konstance",
  "Konstancie",
  "Konsuela",
  "Konzuela",
  "Kora",
  "Kordula",
  "Korina",
  "Kornélie",
  "Krasava",
  "Krasomila",
  "Kristina",
  "Kristýna",
  "Kunhuta",
  "Květa",
  "Květoslava",
  "Květuše",
  "Lada",
  "Ladislava",
  "Larisa",
  "Laura",
  "Laurencie",
  "Lea",
  "Léda",
  "Leila",
  "Lejla",
  "Lena",
  "Lenka",
  "Leokádie",
  "Leona",
  "Leonora",
  "Leontina",
  "Leontýna",
  "Leopolda",
  "Leopoldina",
  "Leopoldýna",
  "Leticie",
  "Lia",
  "Liana",
  "Liběna",
  "Libora",
  "Liboslava",
  "Libuše",
  "Lidmila",
  "Liliana",
  "Lina",
  "Linda",
  "Livie",
  "Ljuba",
  "Lola",
  "Loreta",
  "Lorna",
  "Lota",
  "Lubomíra",
  "Luboslava",
  "Luciána",
  "Lucie",
  "Ludiše",
  "Luďka",
  "Ludmila",
  "Ludomíra",
  "Ludoslava",
  "Ludvika",
  "Ludvíka",
  "Luisa",
  "Lujza",
  "Lukrécie",
  "Lumíra",
  "Lydie",
  "Lýdie",
  "Mabel",
  "Mabela",
  "Magda",
  "Magdalena",
  "Magdaléna",
  "Mahulena",
  "Maja",
  "Mája",
  "Malvína",
  "Manon",
  "Manona",
  "Manuela",
  "Marcela",
  "Marcelína",
  "Margit",
  "Margita",
  "Mariana",
  "Marie",
  "Marieta",
  "Marika",
  "Marilyn",
  "Marina",
  "Mariola",
  "Marion",
  "Marisa",
  "Marita",
  "Markéta",
  "Marlena",
  "Marta",
  "Martina",
  "Matylda",
  "Maud",
  "Maxima",
  "Mečislava",
  "Medea",
  "Médea",
  "Melánie",
  "Melinda",
  "Melisa",
  "Melita",
  "Mercedes",
  "Michaela",
  "Michala",
  "Milada",
  "Milana",
  "Milena",
  "Miloslava",
  "Milred",
  "Miluše",
  "Mína",
  "Mira",
  "Mirabela",
  "Miranda",
  "Mirela",
  "Miriam",
  "Mirjam",
  "Mirka",
  "Miromila",
  "Miroslava",
  "Mnislava",
  "Mona",
  "Monika",
  "Muriel",
  "Muriela",
  "Myrna",
  "Naďa",
  "Naděžda",
  "Naneta",
  "Narcisa",
  "Natalie",
  "Natálie",
  "Nataša",
  "Neda",
  "Nela",
  "Nevena",
  "Nika",
  "Niké",
  "Nikodéma",
  "Nikol",
  "Nikola",
  "Nila",
  "Nina",
  "Noema",
  "Noemi",
  "Nona",
  "Nora",
  "Norberta",
  "Norma",
  "Odeta",
  "Ofélie",
  "Oktavie",
  "Oktávie",
  "Oldřiška",
  "Olga",
  "Oliva",
  "Olivie",
  "Olympie",
  "Ondřejka",
  "Otakara",
  "Otilie",
  "Otýlie",
  "Oxana",
  "Palmira",
  "Pamela",
  "Paskala",
  "Patricie",
  "Pavla",
  "Pavlína",
  "Pelagie",
  "Penelopa",
  "Perla",
  "Persida",
  "Perzida",
  "Petra",
  "Petrana",
  "Petronela",
  "Petronila",
  "Petruše",
  "Petula",
  "Pilar",
  "Polyxena",
  "Pravdomila",
  "Pravomila",
  "Pravoslav",
  "Pravoslava",
  "Priscila",
  "Priska",
  "Prokopa",
  "Přibyslava",
  "Radana",
  "Radimíra",
  "Radislava",
  "Radka",
  "Radmila",
  "Radomila",
  "Radomíra",
  "Radoslava",
  "Radovana",
  "Radslava",
  "Rafaela",
  "Ráchel",
  "Raisa",
  "Rajsa",
  "Ramona",
  "Rastislava",
  "Rebeka",
  "Regina",
  "Regína",
  "Renata",
  "Renáta",
  "René",
  "Ria",
  "Riana",
  "Richarda",
  "Rina",
  "Rita",
  "Roberta",
  "Robina",
  "Romana",
  "Rosa",
  "Rosalinda",
  "Rosamunda",
  "Rosana",
  "Rostislava",
  "Rovena",
  "Roxana",
  "Róza",
  "Rozálie",
  "Rozalinda",
  "Rozamunda",
  "Rozana",
  "Rozina",
  "Rozita",
  "Rozvita",
  "Rudolfa",
  "Rudolfina",
  "Rudolfína",
  "Rut",
  "Rút",
  "Růžena",
  "Řehořka",
  "Sabina",
  "Sabrina",
  "Salomea",
  "Salomena",
  "Samuela",
  "Sandra",
  "Sára",
  "Saskia",
  "Saskie",
  "Saxona",
  "Selena",
  "Selma",
  "Senta",
  "Serafína",
  "Serena",
  "Scholastika",
  "Sibyla",
  "Sidonie",
  "Silvána",
  "Silvie",
  "Simeona",
  "Simona",
  "Skarlet",
  "Skarleta",
  "Slavěna",
  "Slávka",
  "Slavomila",
  "Slavomíra",
  "Soběslava",
  "Sofie",
  "Sofronie",
  "Solveig",
  "Solveiga",
  "Soňa",
  "Sotira",
  "Stanislava",
  "Stáza",
  "Stela",
  "Svatava",
  "Svatoslava",
  "Světla",
  "Světlana",
  "Světluše",
  "Sylva",
  "Sylvie",
  "Sylvie",
  "Šárka",
  "Šarlota",
  "Šimona",
  "Štěpána",
  "Štěpánka",
  "Tamara",
  "Táňa",
  "Taťána",
  "Tea",
  "Tekla",
  "Teodora",
  "Teodozie",
  "Teofila",
  "Tereza",
  "Terezie",
  "Thea",
  "Theodora",
  "Theodosie",
  "Theofila",
  "Tomáška",
  "Toska",
  "Ulrika",
  "Una",
  "Uršula",
  "Václava",
  "Valburga",
  "Valdemara",
  "Valentina",
  "Valentýna",
  "Valerie",
  "Valérie",
  "Vanda",
  "Vanesa",
  "Věduna",
  "Veleslava",
  "Velislava",
  "Věnceslava",
  "Vendelína",
  "Vendula",
  "Vendulka",
  "Věnka",
  "Venuše",
  "Věra",
  "Verona",
  "Veronika",
  "Věroslava",
  "Věslava",
  "Vesna",
  "Viktorie",
  "Viléma",
  "Vilemína",
  "Vilma",
  "Vincencie",
  "Viola",
  "Violeta",
  "Virginie",
  "Virgínie",
  "Víta",
  "Vítězslava",
  "Viviana",
  "Vladana",
  "Vladěna",
  "Vladimíra",
  "Vladislava",
  "Vlasta",
  "Vlastimila",
  "Vlastimíra",
  "Vlastislava",
  "Vojmíra",
  "Vojslava",
  "Vojtěška",
  "Voršila",
  "Vratislava",
  "Xaverie",
  "Xenie",
  "Zaida",
  "Zaira",
  "Zbyhněva",
  "Zbyňka",
  "Zbyslava",
  "Zbyška",
  "Zdena",
  "Zdenka",
  "Zdeňka",
  "Zdeslava",
  "Zdislava",
  "Zenobie",
  "Zina",
  "Zinaida",
  "Zita",
  "Zlata",
  "Zlatomíra",
  "Zlatuše",
  "Zoe",
  "Zoja",
  "Zora",
  "Zoroslava",
  "Zuzana",
  "Zvonimíra",
  "Žakelina",
  "Žakelína",
  "Žaneta",
  "Ždana",
  "Želimíra",
  "Želislava",
  "Želmíra",
  "Žitomíra",
  "Žitoslava",
  "Živa",
  "Živana",
  "Žofie",
];

},{}],"node_modules/faker/lib/locales/cz/name/male_last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Adam",
  "Adamec",
  "Adámek",
  "Albrecht",
  "Ambrož",
  "Anděl",
  "Andrle",
  "Antoš",
  "Bajer",
  "Baláž",
  "Balcar",
  "Balog",
  "Baloun",
  "Barák",
  "Baran",
  "Bareš",
  "Bárta",
  "Barták",
  "Bartoň",
  "Bartoš",
  "Bartošek",
  "Bartůněk",
  "Bašta",
  "Bauer",
  "Bayer",
  "Bažant",
  "Bečka",
  "Bečvář",
  "Bednář",
  "Bednařík",
  "Bělohlávek",
  "Benda",
  "Beneš",
  "Beran",
  "Beránek",
  "Berger",
  "Berka",
  "Berky",
  "Bernard",
  "Bezděk",
  "Bílek",
  "Bílý",
  "Bína",
  "Bittner",
  "Blaha",
  "Bláha",
  "Blažek",
  "Blecha",
  "Bobek",
  "Boček",
  "Boháč",
  "Boháček",
  "Böhm",
  "Borovička",
  "Bouček",
  "Bouda",
  "Bouška",
  "Brabec",
  "Brabenec",
  "Brada",
  "Bradáč",
  "Braun",
  "Brázda",
  "Brázdil",
  "Brejcha",
  "Březina",
  "Bříza",
  "Brož",
  "Brožek",
  "Brychta",
  "Bubeník",
  "Buček",
  "Buchta",
  "Burda",
  "Bureš",
  "Burian",
  "Buriánek",
  "Byrtus",
  "čada",
  "Caha",
  "čáp",
  "čapek",
  "čech",
  "čejka",
  "čermák",
  "černík",
  "černoch",
  "černohorský",
  "černý",
  "červeňák",
  "červenka",
  "červený",
  "červinka",
  "Chaloupka",
  "Chalupa",
  "Charvát",
  "Chládek",
  "Chlup",
  "Chmelař",
  "Chmelík",
  "Chovanec",
  "Chromý",
  "Chudoba",
  "Chvátal",
  "Chvojka",
  "Chytil",
  "Cibulka",
  "čihák",
  "Cihlář",
  "Císař",
  "čížek",
  "čonka",
  "Coufal",
  "čurda",
  "Daněk",
  "Daniel",
  "Daniš",
  "David",
  "Dědek",
  "Demeter",
  "Dittrich",
  "Diviš",
  "Dlouhý",
  "Dobeš",
  "Dobiáš",
  "Dobrovolný",
  "Dočekal",
  "Dočkal",
  "Dohnal",
  "Dokoupil",
  "Doleček",
  "Dolejš",
  "Dolejší",
  "Doležal",
  "Doležel",
  "Doskočil",
  "Dostál",
  "Doubek",
  "Doubrava",
  "Douša",
  "Drábek",
  "Drozd",
  "Dubský",
  "Duchoň",
  "Duda",
  "Dudek",
  "Dufek",
  "Dunka",
  "Dušek",
  "Dvořáček",
  "Dvořák",
  "Dvorský",
  "Eliáš",
  "Erben",
  "Fabián",
  "Fanta",
  "Farkaš",
  "Fejfar",
  "Fencl",
  "Ferenc",
  "Ferko",
  "Fiala",
  "Fiedler",
  "Filip",
  "Fischer",
  "Fišer",
  "Florián",
  "Fojtík",
  "Foltýn",
  "Forman",
  "Formánek",
  "Fořt",
  "Fousek",
  "Franc",
  "Franěk",
  "Frank",
  "Fridrich",
  "Frydrych",
  "Fuchs",
  "Fučík",
  "Fuksa",
  "Gábor",
  "Gabriel",
  "Gajdoš",
  "Gaži",
  "Gottwald",
  "Gregor",
  "Gruber",
  "Grundza",
  "Grygar",
  "Hájek",
  "Hajný",
  "Hála",
  "Hampl",
  "Hána",
  "Hanáček",
  "Hanák",
  "Hanousek",
  "Hanus",
  "Hanuš",
  "Hanzal",
  "Hanzl",
  "Hanzlík",
  "Hartman",
  "Hašek",
  "Havel",
  "Havelka",
  "Havlíček",
  "Havlík",
  "Havránek",
  "Heczko",
  "Heger",
  "Hejda",
  "Hejduk",
  "Hejl",
  "Hejna",
  "Hendrych",
  "Herman",
  "Heřman",
  "Heřmánek",
  "Hladík",
  "Hladký",
  "Hlaváč",
  "Hlaváček",
  "Hlavatý",
  "Hlávka",
  "Hloušek",
  "Hoffmann",
  "Hofman",
  "Holan",
  "Holas",
  "Holec",
  "Holeček",
  "Holík",
  "Holoubek",
  "Holub",
  "Holý",
  "Homola",
  "Homolka",
  "Hora",
  "Horáček",
  "Horák",
  "Hořejší",
  "Horký",
  "Horňák",
  "Horníček",
  "Horník",
  "Horský",
  "Horvát",
  "Horváth",
  "Hošek",
  "Houdek",
  "Houška",
  "Hovorka",
  "Hrabal",
  "Hrabovský",
  "Hradecký",
  "Hradil",
  "Hrbáček",
  "Hrbek",
  "Hrdina",
  "Hrdlička",
  "Hrdý",
  "Hrnčíř",
  "Hroch",
  "Hromádka",
  "Hron",
  "Hrubeš",
  "Hrubý",
  "Hruška",
  "Hrůza",
  "Hubáček",
  "Hudec",
  "Hudeček",
  "Hůlka",
  "Huml",
  "Husák",
  "Hušek",
  "Hýbl",
  "Hynek",
  "Jahoda",
  "Jakeš",
  "Jakl",
  "Jakoubek",
  "Jakubec",
  "Janáček",
  "Janák",
  "Janata",
  "Janča",
  "Jančík",
  "Janda",
  "Janeček",
  "Janečka",
  "Janíček",
  "Janík",
  "Janků",
  "Janota",
  "Janoušek",
  "Janovský",
  "Jansa",
  "Jánský",
  "Janů",
  "Jareš",
  "Jaroš",
  "Jašek",
  "Javůrek",
  "Jech",
  "Jedlička",
  "Jelen",
  "Jelínek",
  "Jeníček",
  "Jeřábek",
  "Jež",
  "Ježek",
  "Jílek",
  "Jindra",
  "Jíra",
  "Jirák",
  "Jiránek",
  "Jirásek",
  "Jiřík",
  "Jirka",
  "Jirků",
  "Jiroušek",
  "Jirsa",
  "John",
  "Jonáš",
  "Junek",
  "Jurčík",
  "Jurečka",
  "Juřica",
  "Juřík",
  "Kabát",
  "Kačírek",
  "Kadeřábek",
  "Kadlec",
  "Kafka",
  "Kaiser",
  "Kala",
  "Kaláb",
  "Kalaš",
  "Kalina",
  "Kalivoda",
  "Kalous",
  "Kalousek",
  "Kameník",
  "Kaňa",
  "Káňa",
  "Kaňka",
  "Kantor",
  "Kaplan",
  "Karas",
  "Karásek",
  "Karban",
  "Karel",
  "Karlík",
  "Kasal",
  "Kašík",
  "Kašpar",
  "Kašpárek",
  "Kavka",
  "Kazda",
  "Kindl",
  "Klečka",
  "Klein",
  "Klement",
  "Klíma",
  "Kliment",
  "Klimeš",
  "Klouček",
  "Klouda",
  "Knap",
  "Knotek",
  "Koch",
  "Kočí",
  "Kocián",
  "Kocman",
  "Kocourek",
  "Kohout",
  "Kohoutek",
  "Koláček",
  "Kolář",
  "Kolařík",
  "Kolek",
  "Kolman",
  "Komárek",
  "Komínek",
  "Konečný",
  "Koníček",
  "Kopal",
  "Kopeček",
  "Kopecký",
  "Kopečný",
  "Kopřiva",
  "Korbel",
  "Kořínek",
  "Kos",
  "Kosík",
  "Kosina",
  "Košťál",
  "Kostka",
  "Kotas",
  "Kotek",
  "Kotlár",
  "Kotrba",
  "Kouba",
  "Koubek",
  "Koudela",
  "Koudelka",
  "Koukal",
  "Kouřil",
  "Koutný",
  "Kováč",
  "Kovář",
  "Kovařík",
  "Kovářík",
  "Kozák",
  "Kozel",
  "Krajíček",
  "Král",
  "Králíček",
  "Králík",
  "Krátký",
  "Kratochvíl",
  "Kraus",
  "Krčmář",
  "Křeček",
  "Krejčí",
  "Krejčík",
  "Krejčíř",
  "Křenek",
  "Krištof",
  "Křivánek",
  "Kříž",
  "Křížek",
  "Kropáček",
  "Kroupa",
  "Krupa",
  "Krupička",
  "Krupka",
  "Kuba",
  "Kubánek",
  "Kubát",
  "Kubec",
  "Kubelka",
  "Kubeš",
  "Kubica",
  "Kubíček",
  "Kubík",
  "Kubín",
  "Kubiš",
  "Kuča",
  "Kučera",
  "Kuchař",
  "Kuchta",
  "Kudláček",
  "Kudrna",
  "Kukla",
  "Kulhánek",
  "Kulhavý",
  "Kunc",
  "Kuneš",
  "Kupec",
  "Kupka",
  "Kurka",
  "Kužel",
  "Kvapil",
  "Kvasnička",
  "Kyncl",
  "Kysela",
  "Lacina",
  "Lacko",
  "Lakatoš",
  "Landa",
  "Lang",
  "Langer",
  "Langr",
  "Látal",
  "Lavička",
  "Le",
  "Lebeda",
  "Levý",
  "Líbal",
  "Linhart",
  "Liška",
  "Lorenc",
  "Louda",
  "Ludvík",
  "Lukáč",
  "Lukáš",
  "Lukášek",
  "Lukeš",
  "Macák",
  "Macek",
  "Mach",
  "Mácha",
  "Machač",
  "Macháč",
  "Macháček",
  "Machala",
  "Machálek",
  "Macura",
  "Majer",
  "Maleček",
  "Málek",
  "Malík",
  "Malina",
  "Malý",
  "Maňák",
  "Mareček",
  "Marek",
  "Mareš",
  "Mařík",
  "Maršálek",
  "Maršík",
  "Martinec",
  "Martinek",
  "Martínek",
  "Mašek",
  "Masopust",
  "Matějíček",
  "Matějka",
  "Matouš",
  "Matoušek",
  "Matula",
  "Matuška",
  "Matyáš",
  "Matys",
  "Maxa",
  "Mayer",
  "Mazánek",
  "Medek",
  "Melichar",
  "Mencl",
  "Menšík",
  "Merta",
  "Michal",
  "Michalec",
  "Michálek",
  "Michalík",
  "Michna",
  "Mička",
  "Mika",
  "Míka",
  "Mikeš",
  "Miko",
  "Mikula",
  "Mikulášek",
  "Minář",
  "Minařík",
  "Mirga",
  "Mládek",
  "Mlčoch",
  "Mlejnek",
  "Mojžíš",
  "Mokrý",
  "Molnár",
  "Moravec",
  "Morávek",
  "Motl",
  "Motyčka",
  "Moučka",
  "Moudrý",
  "Mráček",
  "Mráz",
  "Mrázek",
  "Mrkvička",
  "Mucha",
  "Müller",
  "Műller",
  "Musil",
  "Mužík",
  "Myška",
  "Nagy",
  "Najman",
  "Navrátil",
  "Nečas",
  "Nedbal",
  "Nedoma",
  "Nedvěd",
  "Nejedlý",
  "Němec",
  "Němeček",
  "Nešpor",
  "Nesvadba",
  "Neubauer",
  "Neuman",
  "Neumann",
  "Nguyen",
  "Nguyen van",
  "Nosek",
  "Nováček",
  "Novák",
  "Novosad",
  "Novotný",
  "Nový",
  "Odehnal",
  "Oláh",
  "Oliva",
  "Ondra",
  "Ondráček",
  "Orság",
  "Otáhal",
  "Paleček",
  "Pánek",
  "Papež",
  "Pařízek",
  "Pašek",
  "Pátek",
  "Patočka",
  "Paul",
  "Pavel",
  "Pavelek",
  "Pavelka",
  "Pavlas",
  "Pavlica",
  "Pavlíček",
  "Pavlík",
  "Pavlů",
  "Pazdera",
  "Pech",
  "Pecha",
  "Pecháček",
  "Pecka",
  "Pekař",
  "Pekárek",
  "Pelc",
  "Pelikán",
  "Peřina",
  "Pernica",
  "Peroutka",
  "Pešek",
  "Peška",
  "Pešta",
  "Peterka",
  "Petr",
  "Petrák",
  "Petráš",
  "Petříček",
  "Petřík",
  "Petrů",
  "Pham",
  "Pícha",
  "Pilař",
  "Pilát",
  "Píša",
  "Pivoňka",
  "Plaček",
  "Plachý",
  "Plšek",
  "Pluhař",
  "Podzimek",
  "Pohl",
  "Pokorný",
  "Poláček",
  "Polách",
  "Polák",
  "Polanský",
  "Polášek",
  "Polívka",
  "Popelka",
  "Pospíchal",
  "Pospíšil",
  "Potůček",
  "Pour",
  "Prachař",
  "Prášek",
  "Pražák",
  "Prchal",
  "Přibyl",
  "Příhoda",
  "Přikryl",
  "Procházka",
  "Prokeš",
  "Prokop",
  "Prošek",
  "Provazník",
  "Průcha",
  "Průša",
  "Pšenička",
  "Ptáček",
  "Rác",
  "Rada",
  "Rak",
  "Rambousek",
  "Raška",
  "Rataj",
  "řeháček",
  "řehák",
  "řehoř",
  "Remeš",
  "řezáč",
  "Rezek",
  "řezníček",
  "Richter",
  "Richtr",
  "říha",
  "Roubal",
  "Rous",
  "Rozsypal",
  "Rudolf",
  "Růžek",
  "Růžička",
  "Ryba",
  "Rybář",
  "Rýdl",
  "Ryšavý",
  "Sadílek",
  "šafář",
  "šafařík",
  "šafránek",
  "šálek",
  "Samek",
  "šanda",
  "šašek",
  "Schejbal",
  "Schmidt",
  "Schneider",
  "Schwarz",
  "šebek",
  "šebela",
  "šebesta",
  "šeda",
  "šedivý",
  "Sedláček",
  "Sedlák",
  "Sedlář",
  "Sehnal",
  "Seidl",
  "Seifert",
  "Sekanina",
  "Semerád",
  "šenk",
  "šesták",
  "ševčík",
  "Severa",
  "Sikora",
  "šilhavý",
  "šíma",
  "šimáček",
  "šimák",
  "šimánek",
  "šimčík",
  "šimeček",
  "šimek",
  "šimon",
  "šimůnek",
  "šindelář",
  "šindler",
  "šíp",
  "šípek",
  "šír",
  "široký",
  "šiška",
  "Sivák",
  "Skácel",
  "Skala",
  "Skála",
  "Skalický",
  "Sklenář",
  "škoda",
  "Skopal",
  "Skořepa",
  "škrabal",
  "Skřivánek",
  "Slabý",
  "Sládek",
  "Sladký",
  "Sláma",
  "Slanina",
  "Slavíček",
  "Slavík",
  "šlechta",
  "Slezák",
  "Slováček",
  "Slovák",
  "Sluka",
  "Smejkal",
  "šmejkal",
  "Smékal",
  "šmerda",
  "Smetana",
  "šmíd",
  "Smola",
  "Smolík",
  "Smolka",
  "Smrčka",
  "Smrž",
  "Smutný",
  "šnajdr",
  "Sobek",
  "Sobotka",
  "Sochor",
  "Sojka",
  "Sokol",
  "šolc",
  "Sommer",
  "Souček",
  "Soukup",
  "Sova",
  "špaček",
  "Spáčil",
  "špička",
  "šplíchal",
  "Spurný",
  "šrámek",
  "Srb",
  "Staněk",
  "Stárek",
  "Starý",
  "šťastný",
  "štefan",
  "štefek",
  "štefl",
  "Stehlík",
  "Steiner",
  "Stejskal",
  "štěpán",
  "štěpánek",
  "štěrba",
  "Stibor",
  "Stoklasa",
  "Straka",
  "Stránský",
  "Strejček",
  "Strnad",
  "Strouhal",
  "Stuchlík",
  "Studený",
  "Studnička",
  "Stupka",
  "šubrt",
  "Suchánek",
  "Suchomel",
  "Suchý",
  "Suk",
  "šulc",
  "šustr",
  "šváb",
  "Svačina",
  "švanda",
  "švarc",
  "Svatoň",
  "Svatoš",
  "švec",
  "švehla",
  "švejda",
  "švestka",
  "Světlík",
  "Sviták",
  "Svoboda",
  "Svozil",
  "Sýkora",
  "Synek",
  "Syrový",
  "Táborský",
  "Tancoš",
  "Teplý",
  "Tesař",
  "Tichý",
  "Toman",
  "Tománek",
  "Tomáš",
  "Tomášek",
  "Tomeček",
  "Tomek",
  "Tomeš",
  "Tóth",
  "Tran",
  "Trávníček",
  "Trčka",
  "Tříska",
  "Trnka",
  "Trojan",
  "Truhlář",
  "Tuček",
  "Tůma",
  "Tureček",
  "Turek",
  "Tvrdík",
  "Tvrdý",
  "Uher",
  "Uhlíř",
  "Ulrich",
  "Urban",
  "Urbanec",
  "Urbánek",
  "Vacek",
  "Vácha",
  "Václavek",
  "Václavík",
  "Vaculík",
  "Vágner",
  "Vala",
  "Valášek",
  "Válek",
  "Valenta",
  "Valeš",
  "Váňa",
  "Vančura",
  "Vaněček",
  "Vaněk",
  "Vaníček",
  "Varga",
  "Vašák",
  "Vašek",
  "Vašíček",
  "Vávra",
  "Vavřík",
  "Večeřa",
  "Vejvoda",
  "Verner",
  "Veselý",
  "Veverka",
  "Vícha",
  "Vilímek",
  "Vinš",
  "Víšek",
  "Vít",
  "Vitásek",
  "Vítek",
  "Vlach",
  "Vlasák",
  "Vlček",
  "Vlk",
  "Vobořil",
  "Vodák",
  "Vodička",
  "Vodrážka",
  "Vojáček",
  "Vojta",
  "Vojtěch",
  "Vojtek",
  "Vojtíšek",
  "Vokoun",
  "Volek",
  "Volf",
  "Volný",
  "Vondra",
  "Vondráček",
  "Vondrák",
  "Voráček",
  "Vorel",
  "Voříšek",
  "Vorlíček",
  "Votava",
  "Votruba",
  "Vrabec",
  "Vrána",
  "Vrba",
  "Vrzal",
  "Vybíral",
  "Vydra",
  "Vymazal",
  "Vyskočil",
  "Vysloužil",
  "Wagner",
  "Walter",
  "Weber",
  "Weiss",
  "Winkler",
  "Wolf",
  "Zábranský",
  "žáček",
  "Zach",
  "Zahrádka",
  "Zahradník",
  "Zajíc",
  "Zajíček",
  "žák",
  "Zálešák",
  "Zámečník",
  "Zapletal",
  "Záruba",
  "Zatloukal",
  "Zavadil",
  "Zavřel",
  "Zbořil",
  "žďárský",
  "Zdražil",
  "Zedník",
  "Zelenka",
  "Zelený",
  "Zelinka",
  "Zeman",
  "Zemánek",
  "žemlička",
  "Zezula",
  "žídek",
  "žiga",
  "Zíka",
  "Zikmund",
  "Zima",
  "žižka",
  "Zlámal",
  "Zoubek",
  "Zouhar",
  "žůrek",
  "Zvěřina",
];

},{}],"node_modules/faker/lib/locales/cz/name/female_last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Adamová",
  "Adamcová",
  "Adámková",
  "Albrechtová",
  "Ambrožová",
  "Andělová",
  "Andrleová",
  "Antošová",
  "Bajrová",
  "Balážová",
  "Balcarová",
  "Balogová",
  "Balounová",
  "Baráková",
  "Baranová",
  "Barešová",
  "Bártová",
  "Bartáková",
  "Bartoňová",
  "Bartošová",
  "Bartošková",
  "Bartůněková",
  "Baštová",
  "Baurová",
  "Bayrová",
  "Bažantová",
  "Bečková",
  "Bečvářová",
  "Bednářová",
  "Bednaříková",
  "Bělohlávková",
  "Bendová",
  "Benešová",
  "Beranová",
  "Beránková",
  "Bergrová",
  "Berková",
  "Berkyová",
  "Bernardová",
  "Bezděková",
  "Bílková",
  "Bílýová",
  "Bínová",
  "Bittnrová",
  "Blahová",
  "Bláhová",
  "Blažková",
  "Blechová",
  "Bobková",
  "Bočková",
  "Boháčová",
  "Boháčková",
  "Böhmová",
  "Borovičková",
  "Boučková",
  "Boudová",
  "Boušková",
  "Brabcová",
  "Brabencová",
  "Bradová",
  "Bradáčová",
  "Braunová",
  "Brázdová",
  "Brázdilová",
  "Brejchová",
  "Březinová",
  "Břízová",
  "Brožová",
  "Brožková",
  "Brychtová",
  "Bubeníková",
  "Bučková",
  "Buchtová",
  "Burdová",
  "Burešová",
  "Burianová",
  "Buriánková",
  "Byrtusová",
  "čadová",
  "Cahová",
  "čápová",
  "čapková",
  "čechová",
  "čejková",
  "čermáková",
  "černíková",
  "černochová",
  "černohorskýová",
  "černýová",
  "červeňáková",
  "červenková",
  "červenýová",
  "červinková",
  "Chaloupková",
  "Chalupová",
  "Charvátová",
  "Chládková",
  "Chlupová",
  "Chmelařová",
  "Chmelíková",
  "Chovancová",
  "Chromýová",
  "Chudobová",
  "Chvátalová",
  "Chvojková",
  "Chytilová",
  "Cibulková",
  "čiháková",
  "Cihlářová",
  "Císařová",
  "čížková",
  "čonková",
  "Coufalová",
  "čurdová",
  "Daněková",
  "Danilová",
  "Danišová",
  "Davidová",
  "Dědková",
  "Demetrová",
  "Dittrichová",
  "Divišová",
  "Dlouhýová",
  "Dobešová",
  "Dobiášová",
  "Dobrovolnýová",
  "Dočekalová",
  "Dočkalová",
  "Dohnalová",
  "Dokoupilová",
  "Dolečková",
  "Dolejšová",
  "Dolejšíová",
  "Doležalová",
  "Doležlová",
  "Doskočilová",
  "Dostálová",
  "Doubková",
  "Doubravová",
  "Doušová",
  "Drábková",
  "Drozdová",
  "Dubskýová",
  "Duchoňová",
  "Dudová",
  "Dudková",
  "Dufková",
  "Dunková",
  "Dušková",
  "Dvořáčková",
  "Dvořáková",
  "Dvorskýová",
  "Eliášová",
  "Erbnová",
  "Fabiánová",
  "Fantová",
  "Farkašová",
  "Fejfarová",
  "Fenclová",
  "Ferencová",
  "Ferkoová",
  "Fialová",
  "Fiedlrová",
  "Filipová",
  "Fischrová",
  "Fišrová",
  "Floriánová",
  "Fojtíková",
  "Foltýnová",
  "Formanová",
  "Formánková",
  "Fořtová",
  "Fousková",
  "Francová",
  "Franěková",
  "Franková",
  "Fridrichová",
  "Frydrychová",
  "Fuchsová",
  "Fučíková",
  "Fuksová",
  "Gáborová",
  "Gabrilová",
  "Gajdošová",
  "Gažiová",
  "Gottwaldová",
  "Gregorová",
  "Grubrová",
  "Grundzová",
  "Grygarová",
  "Hájková",
  "Hajnýová",
  "Hálová",
  "Hamplová",
  "Hánová",
  "Hanáčková",
  "Hanáková",
  "Hanousková",
  "Hanusová",
  "Hanušová",
  "Hanzalová",
  "Hanzlová",
  "Hanzlíková",
  "Hartmanová",
  "Hašková",
  "Havlová",
  "Havelková",
  "Havlíčková",
  "Havlíková",
  "Havránková",
  "Heczkoová",
  "Hegrová",
  "Hejdová",
  "Hejduková",
  "Hejlová",
  "Hejnová",
  "Hendrychová",
  "Hermanová",
  "Heřmanová",
  "Heřmánková",
  "Hladíková",
  "Hladkýová",
  "Hlaváčová",
  "Hlaváčková",
  "Hlavatýová",
  "Hlávková",
  "Hloušková",
  "Hoffmannová",
  "Hofmanová",
  "Holanová",
  "Holasová",
  "Holcová",
  "Holečková",
  "Holíková",
  "Holoubková",
  "Holubová",
  "Holýová",
  "Homolová",
  "Homolková",
  "Horová",
  "Horáčková",
  "Horáková",
  "Hořejšíová",
  "Horkýová",
  "Horňáková",
  "Horníčková",
  "Horníková",
  "Horskýová",
  "Horvátová",
  "Horváthová",
  "Hošková",
  "Houdková",
  "Houšková",
  "Hovorková",
  "Hrabalová",
  "Hrabovskýová",
  "Hradeckýová",
  "Hradilová",
  "Hrbáčková",
  "Hrbková",
  "Hrdinová",
  "Hrdličková",
  "Hrdýová",
  "Hrnčířová",
  "Hrochová",
  "Hromádková",
  "Hronová",
  "Hrubešová",
  "Hrubýová",
  "Hrušková",
  "Hrůzová",
  "Hubáčková",
  "Hudcová",
  "Hudečková",
  "Hůlková",
  "Humlová",
  "Husáková",
  "Hušková",
  "Hýblová",
  "Hynková",
  "Jahodová",
  "Jakešová",
  "Jaklová",
  "Jakoubková",
  "Jakubcová",
  "Janáčková",
  "Janáková",
  "Janatová",
  "Jančová",
  "Jančíková",
  "Jandová",
  "Janečková",
  "Janečková",
  "Janíčková",
  "Janíková",
  "Jankůová",
  "Janotová",
  "Janoušková",
  "Janovskýová",
  "Jansová",
  "Jánskýová",
  "Janůová",
  "Jarešová",
  "Jarošová",
  "Jašková",
  "Javůrková",
  "Jechová",
  "Jedličková",
  "Jelnová",
  "Jelínková",
  "Jeníčková",
  "Jeřábková",
  "Ježová",
  "Ježková",
  "Jílková",
  "Jindrová",
  "Jírová",
  "Jiráková",
  "Jiránková",
  "Jirásková",
  "Jiříková",
  "Jirková",
  "Jirkůová",
  "Jiroušková",
  "Jirsová",
  "Johnová",
  "Jonášová",
  "Junková",
  "Jurčíková",
  "Jurečková",
  "Juřicová",
  "Juříková",
  "Kabátová",
  "Kačírková",
  "Kadeřábková",
  "Kadlcová",
  "Kafková",
  "Kaisrová",
  "Kalová",
  "Kalábová",
  "Kalašová",
  "Kalinová",
  "Kalivodová",
  "Kalousová",
  "Kalousková",
  "Kameníková",
  "Kaňová",
  "Káňová",
  "Kaňková",
  "Kantorová",
  "Kaplanová",
  "Karasová",
  "Karásková",
  "Karbanová",
  "Karlová",
  "Karlíková",
  "Kasalová",
  "Kašíková",
  "Kašparová",
  "Kašpárková",
  "Kavková",
  "Kazdová",
  "Kindlová",
  "Klečková",
  "Kleinová",
  "Klementová",
  "Klímová",
  "Klimentová",
  "Klimešová",
  "Kloučková",
  "Kloudová",
  "Knapová",
  "Knotková",
  "Kochová",
  "Kočíová",
  "Kociánová",
  "Kocmanová",
  "Kocourková",
  "Kohoutová",
  "Kohoutková",
  "Koláčková",
  "Kolářová",
  "Kolaříková",
  "Kolková",
  "Kolmanová",
  "Komárková",
  "Komínková",
  "Konečnýová",
  "Koníčková",
  "Kopalová",
  "Kopečková",
  "Kopeckýová",
  "Kopečnýová",
  "Kopřivová",
  "Korblová",
  "Kořínková",
  "Kosová",
  "Kosíková",
  "Kosinová",
  "Košťálová",
  "Kostková",
  "Kotasová",
  "Kotková",
  "Kotlárová",
  "Kotrbová",
  "Koubová",
  "Koubková",
  "Koudelová",
  "Koudelková",
  "Koukalová",
  "Kouřilová",
  "Koutnýová",
  "Kováčová",
  "Kovářová",
  "Kovaříková",
  "Kováříková",
  "Kozáková",
  "Kozlová",
  "Krajíčková",
  "Králová",
  "Králíčková",
  "Králíková",
  "Krátkýová",
  "Kratochvílová",
  "Krausová",
  "Krčmářová",
  "Křečková",
  "Krejčíová",
  "Krejčíková",
  "Krejčířová",
  "Křenková",
  "Krištofová",
  "Křivánková",
  "Křížová",
  "Křížková",
  "Kropáčková",
  "Kroupová",
  "Krupová",
  "Krupičková",
  "Krupková",
  "Kubová",
  "Kubánková",
  "Kubátová",
  "Kubcová",
  "Kubelková",
  "Kubešová",
  "Kubicová",
  "Kubíčková",
  "Kubíková",
  "Kubínová",
  "Kubišová",
  "Kučová",
  "Kučerová",
  "Kuchařová",
  "Kuchtová",
  "Kudláčková",
  "Kudrnová",
  "Kuklová",
  "Kulhánková",
  "Kulhavýová",
  "Kuncová",
  "Kunešová",
  "Kupcová",
  "Kupková",
  "Kurková",
  "Kužlová",
  "Kvapilová",
  "Kvasničková",
  "Kynclová",
  "Kyselová",
  "Lacinová",
  "Lackoová",
  "Lakatošová",
  "Landová",
  "Langová",
  "Langrová",
  "Langrová",
  "Látalová",
  "Lavičková",
  "Leová",
  "Lebedová",
  "Levýová",
  "Líbalová",
  "Linhartová",
  "Lišková",
  "Lorencová",
  "Loudová",
  "Ludvíková",
  "Lukáčová",
  "Lukášová",
  "Lukášková",
  "Lukešová",
  "Macáková",
  "Macková",
  "Machová",
  "Máchová",
  "Machačová",
  "Macháčová",
  "Macháčková",
  "Machalová",
  "Machálková",
  "Macurová",
  "Majrová",
  "Malečková",
  "Málková",
  "Malíková",
  "Malinová",
  "Malýová",
  "Maňáková",
  "Marečková",
  "Marková",
  "Marešová",
  "Maříková",
  "Maršálková",
  "Maršíková",
  "Martincová",
  "Martinková",
  "Martínková",
  "Mašková",
  "Masopustová",
  "Matějíčková",
  "Matějková",
  "Matoušová",
  "Matoušková",
  "Matulová",
  "Matušková",
  "Matyášová",
  "Matysová",
  "Maxová",
  "Mayrová",
  "Mazánková",
  "Medková",
  "Melicharová",
  "Menclová",
  "Menšíková",
  "Mertová",
  "Michalová",
  "Michalcová",
  "Michálková",
  "Michalíková",
  "Michnová",
  "Mičková",
  "Miková",
  "Míková",
  "Mikešová",
  "Mikoová",
  "Mikulová",
  "Mikulášková",
  "Minářová",
  "Minaříková",
  "Mirgová",
  "Mládková",
  "Mlčochová",
  "Mlejnková",
  "Mojžíšová",
  "Mokrýová",
  "Molnárová",
  "Moravcová",
  "Morávková",
  "Motlová",
  "Motyčková",
  "Moučková",
  "Moudrýová",
  "Mráčková",
  "Mrázová",
  "Mrázková",
  "Mrkvičková",
  "Muchová",
  "Müllrová",
  "Műllrová",
  "Musilová",
  "Mužíková",
  "Myšková",
  "Nagyová",
  "Najmanová",
  "Navrátilová",
  "Nečasová",
  "Nedbalová",
  "Nedomová",
  "Nedvědová",
  "Nejedlýová",
  "Němcová",
  "Němečková",
  "Nešporová",
  "Nesvadbová",
  "Neubaurová",
  "Neumanová",
  "Neumannová",
  "Nguynová",
  "Nguyen vanová",
  "Nosková",
  "Nováčková",
  "Nováková",
  "Novosadová",
  "Novotnýová",
  "Novýová",
  "Odehnalová",
  "Oláhová",
  "Olivová",
  "Ondrová",
  "Ondráčková",
  "Orságová",
  "Otáhalová",
  "Palečková",
  "Pánková",
  "Papežová",
  "Pařízková",
  "Pašková",
  "Pátková",
  "Patočková",
  "Paulová",
  "Pavlová",
  "Pavelková",
  "Pavelková",
  "Pavlasová",
  "Pavlicová",
  "Pavlíčková",
  "Pavlíková",
  "Pavlůová",
  "Pazderová",
  "Pechová",
  "Pechová",
  "Pecháčková",
  "Pecková",
  "Pekařová",
  "Pekárková",
  "Pelcová",
  "Pelikánová",
  "Peřinová",
  "Pernicová",
  "Peroutková",
  "Pešková",
  "Pešková",
  "Peštová",
  "Peterková",
  "Petrová",
  "Petráková",
  "Petrášová",
  "Petříčková",
  "Petříková",
  "Petrůová",
  "Phamová",
  "Píchová",
  "Pilařová",
  "Pilátová",
  "Píšová",
  "Pivoňková",
  "Plačková",
  "Plachýová",
  "Plšková",
  "Pluhařová",
  "Podzimková",
  "Pohlová",
  "Pokornýová",
  "Poláčková",
  "Poláchová",
  "Poláková",
  "Polanskýová",
  "Polášková",
  "Polívková",
  "Popelková",
  "Pospíchalová",
  "Pospíšilová",
  "Potůčková",
  "Pourová",
  "Prachařová",
  "Prášková",
  "Pražáková",
  "Prchalová",
  "Přibylová",
  "Příhodová",
  "Přikrylová",
  "Procházková",
  "Prokešová",
  "Prokopová",
  "Prošková",
  "Provazníková",
  "Průchová",
  "Průšová",
  "Pšeničková",
  "Ptáčková",
  "Rácová",
  "Radová",
  "Raková",
  "Rambousková",
  "Rašková",
  "Ratajová",
  "řeháčková",
  "řeháková",
  "řehořová",
  "Remešová",
  "řezáčová",
  "Rezková",
  "řezníčková",
  "Richtrová",
  "Richtrová",
  "říhová",
  "Roubalová",
  "Rousová",
  "Rozsypalová",
  "Rudolfová",
  "Růžková",
  "Růžičková",
  "Rybová",
  "Rybářová",
  "Rýdlová",
  "Ryšavýová",
  "Sadílková",
  "šafářová",
  "šafaříková",
  "šafránková",
  "šálková",
  "Samková",
  "šandová",
  "šašková",
  "Schejbalová",
  "Schmidtová",
  "Schneidrová",
  "Schwarzová",
  "šebková",
  "šebelová",
  "šebestová",
  "šedová",
  "šedivýová",
  "Sedláčková",
  "Sedláková",
  "Sedlářová",
  "Sehnalová",
  "Seidlová",
  "Seifertová",
  "Sekaninová",
  "Semerádová",
  "šenková",
  "šestáková",
  "ševčíková",
  "Severová",
  "Sikorová",
  "šilhavýová",
  "šímová",
  "šimáčková",
  "šimáková",
  "šimánková",
  "šimčíková",
  "šimečková",
  "šimková",
  "šimonová",
  "šimůnková",
  "šindelářová",
  "šindlrová",
  "šípová",
  "šípková",
  "šírová",
  "širokýová",
  "šišková",
  "Siváková",
  "Skáclová",
  "Skalová",
  "Skálová",
  "Skalickýová",
  "Sklenářová",
  "škodová",
  "Skopalová",
  "Skořepová",
  "škrabalová",
  "Skřivánková",
  "Slabýová",
  "Sládková",
  "Sladkýová",
  "Slámová",
  "Slaninová",
  "Slavíčková",
  "Slavíková",
  "šlechtová",
  "Slezáková",
  "Slováčková",
  "Slováková",
  "Sluková",
  "Smejkalová",
  "šmejkalová",
  "Smékalová",
  "šmerdová",
  "Smetanová",
  "šmídová",
  "Smolová",
  "Smolíková",
  "Smolková",
  "Smrčková",
  "Smržová",
  "Smutnýová",
  "šnajdrová",
  "Sobková",
  "Sobotková",
  "Sochorová",
  "Sojková",
  "Sokolová",
  "šolcová",
  "Sommrová",
  "Součková",
  "Soukupová",
  "Sovová",
  "špačková",
  "Spáčilová",
  "špičková",
  "šplíchalová",
  "Spurnýová",
  "šrámková",
  "Srbová",
  "Staněková",
  "Stárková",
  "Starýová",
  "šťastnýová",
  "štefanová",
  "štefková",
  "šteflová",
  "Stehlíková",
  "Steinrová",
  "Stejskalová",
  "štěpánová",
  "štěpánková",
  "štěrbová",
  "Stiborová",
  "Stoklasová",
  "Straková",
  "Stránskýová",
  "Strejčková",
  "Strnadová",
  "Strouhalová",
  "Stuchlíková",
  "Studenýová",
  "Studničková",
  "Stupková",
  "šubrtová",
  "Suchánková",
  "Suchomlová",
  "Suchýová",
  "Suková",
  "šulcová",
  "šustrová",
  "švábová",
  "Svačinová",
  "švandová",
  "švarcová",
  "Svatoňová",
  "Svatošová",
  "švcová",
  "švehlová",
  "švejdová",
  "švestková",
  "Světlíková",
  "Svitáková",
  "Svobodová",
  "Svozilová",
  "Sýkorová",
  "Synková",
  "Syrovýová",
  "Táborskýová",
  "Tancošová",
  "Teplýová",
  "Tesařová",
  "Tichýová",
  "Tomanová",
  "Tománková",
  "Tomášová",
  "Tomášková",
  "Tomečková",
  "Tomková",
  "Tomešová",
  "Tóthová",
  "Tranová",
  "Trávníčková",
  "Trčková",
  "Třísková",
  "Trnková",
  "Trojanová",
  "Truhlářová",
  "Tučková",
  "Tůmová",
  "Turečková",
  "Turková",
  "Tvrdíková",
  "Tvrdýová",
  "Uhrová",
  "Uhlířová",
  "Ulrichová",
  "Urbanová",
  "Urbancová",
  "Urbánková",
  "Vacková",
  "Váchová",
  "Václavková",
  "Václavíková",
  "Vaculíková",
  "Vágnrová",
  "Valová",
  "Valášková",
  "Válková",
  "Valentová",
  "Valešová",
  "Váňová",
  "Vančurová",
  "Vaněčková",
  "Vaněková",
  "Vaníčková",
  "Vargová",
  "Vašáková",
  "Vašková",
  "Vašíčková",
  "Vávrová",
  "Vavříková",
  "Večeřová",
  "Vejvodová",
  "Vernrová",
  "Veselýová",
  "Veverková",
  "Víchová",
  "Vilímková",
  "Vinšová",
  "Víšková",
  "Vítová",
  "Vitásková",
  "Vítková",
  "Vlachová",
  "Vlasáková",
  "Vlčková",
  "Vlková",
  "Vobořilová",
  "Vodáková",
  "Vodičková",
  "Vodrážková",
  "Vojáčková",
  "Vojtová",
  "Vojtěchová",
  "Vojtková",
  "Vojtíšková",
  "Vokounová",
  "Volková",
  "Volfová",
  "Volnýová",
  "Vondrová",
  "Vondráčková",
  "Vondráková",
  "Voráčková",
  "Vorlová",
  "Voříšková",
  "Vorlíčková",
  "Votavová",
  "Votrubová",
  "Vrabcová",
  "Vránová",
  "Vrbová",
  "Vrzalová",
  "Vybíralová",
  "Vydrová",
  "Vymazalová",
  "Vyskočilová",
  "Vysloužilová",
  "Wagnrová",
  "Waltrová",
  "Webrová",
  "Weissová",
  "Winklrová",
  "Wolfová",
  "Zábranskýová",
  "žáčková",
  "Zachová",
  "Zahrádková",
  "Zahradníková",
  "Zajícová",
  "Zajíčková",
  "žáková",
  "Zálešáková",
  "Zámečníková",
  "Zapletalová",
  "Zárubová",
  "Zatloukalová",
  "Zavadilová",
  "Zavřlová",
  "Zbořilová",
  "žďárskýová",
  "Zdražilová",
  "Zedníková",
  "Zelenková",
  "Zelenýová",
  "Zelinková",
  "Zemanová",
  "Zemánková",
  "žemličková",
  "Zezulová",
  "žídková",
  "žigová",
  "Zíková",
  "Zikmundová",
  "Zimová",
  "žižková",
  "Zlámalová",
  "Zoubková",
  "Zouharová",
  "žůrková",
  "Zvěřinová",
];

},{}],"node_modules/faker/lib/locales/cz/name/prefix.js":[function(require,module,exports) {
module["exports"] = [
  "Ing.",
  "Mgr.",
  "JUDr.",
  "MUDr."
];

},{}],"node_modules/faker/lib/locales/cz/name/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "Phd."
];

},{}],"node_modules/faker/lib/locales/cz/name/title.js":[function(require,module,exports) {
module["exports"] = {
  "descriptor": [
    "Lead",
    "Senior",
    "Direct",
    "Corporate",
    "Dynamic",
    "Future",
    "Product",
    "National",
    "Regional",
    "District",
    "Central",
    "Global",
    "Customer",
    "Investor",
    "Dynamic",
    "International",
    "Legacy",
    "Forward",
    "Internal",
    "Human",
    "Chief",
    "Principal"
  ],
  "level": [
    "Solutions",
    "Program",
    "Brand",
    "Security",
    "Research",
    "Marketing",
    "Directives",
    "Implementation",
    "Integration",
    "Functionality",
    "Response",
    "Paradigm",
    "Tactics",
    "Identity",
    "Markets",
    "Group",
    "Division",
    "Applications",
    "Optimization",
    "Operations",
    "Infrastructure",
    "Intranet",
    "Communications",
    "Web",
    "Branding",
    "Quality",
    "Assurance",
    "Mobility",
    "Accounts",
    "Data",
    "Creative",
    "Configuration",
    "Accountability",
    "Interactions",
    "Factors",
    "Usability",
    "Metrics"
  ],
  "job": [
    "Supervisor",
    "Associate",
    "Executive",
    "Liason",
    "Officer",
    "Manager",
    "Engineer",
    "Specialist",
    "Director",
    "Coordinator",
    "Administrator",
    "Architect",
    "Analyst",
    "Designer",
    "Planner",
    "Orchestrator",
    "Technician",
    "Developer",
    "Producer",
    "Consultant",
    "Assistant",
    "Facilitator",
    "Agent",
    "Representative",
    "Strategist"
  ]
};

},{}],"node_modules/faker/lib/locales/cz/name/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{prefix} #{man_first_name} #{man_last_name}",
  "#{prefix} #{woman_first_name} #{woman_last_name}",
  "#{man_first_name} #{man_last_name} #{suffix}",
  "#{woman_first_name} #{woman_last_name} #{suffix}",
  "#{man_first_name} #{man_last_name}",
  "#{man_first_name} #{man_last_name}",
  "#{man_first_name} #{man_last_name}",
  "#{woman_first_name} #{woman_last_name}",
  "#{woman_first_name} #{woman_last_name}",
  "#{woman_first_name} #{woman_last_name}"
];

},{}],"node_modules/faker/lib/locales/cz/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.male_first_name = require("./male_first_name");
name.female_first_name = require("./female_first_name");
name.male_last_name = require("./male_last_name");
name.female_last_name = require("./female_last_name");
name.prefix = require("./prefix");
name.suffix = require("./suffix");
name.title = require("./title");
name.name = require("./name");

},{"./male_first_name":"node_modules/faker/lib/locales/cz/name/male_first_name.js","./female_first_name":"node_modules/faker/lib/locales/cz/name/female_first_name.js","./male_last_name":"node_modules/faker/lib/locales/cz/name/male_last_name.js","./female_last_name":"node_modules/faker/lib/locales/cz/name/female_last_name.js","./prefix":"node_modules/faker/lib/locales/cz/name/prefix.js","./suffix":"node_modules/faker/lib/locales/cz/name/suffix.js","./title":"node_modules/faker/lib/locales/cz/name/title.js","./name":"node_modules/faker/lib/locales/cz/name/name.js"}],"node_modules/faker/lib/locales/cz/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "601 ### ###",
  "737 ### ###",
  "736 ### ###",
  "### ### ###",
  "+420 ### ### ###",
  "00420 ### ### ###"
];

},{}],"node_modules/faker/lib/locales/cz/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/cz/phone_number/formats.js"}],"node_modules/faker/lib/locales/cz/date/month.js":[function(require,module,exports) {
// Source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/en.xml#L1799
module["exports"] = {
  wide: [
    "Leden",
    "Únor",
    "Březen",
    "Duben",
    "Květen",
    "Červen",
    "Červenec",
    "Srpen",
    "Září",
    "Říjen",
    "Listopad",
    "Prosinec"
  ],
  // Property "wide_context" is optional, if not set then "wide" will be used instead
  // It is used to specify a word in context, which may differ from a stand-alone word
  wide_context: [
    "Leden",
    "Únor",
    "Březen",
    "Duben",
    "Květen",
    "Červen",
    "Červenec",
    "Srpen",
    "Září",
    "Říjen",
    "Listopad",
    "Prosinec"
  ],
  abbr: [
    "Led",
    "Úno",
    "Bře",
    "Dub",
    "Kvě",
    "Čer",
    "Črc",
    "Srp",
    "Zář",
    "Říj",
    "Lis",
    "Pro"
  ],
  // Property "abbr_context" is optional, if not set then "abbr" will be used instead
  // It is used to specify a word in context, which may differ from a stand-alone word
  abbr_context: [
    "Led",
    "Úno",
    "Bře",
    "Dub",
    "Kvě",
    "Čer",
    "Črc",
    "Srp",
    "Zář",
    "Říj",
    "Lis",
    "Pro"
  ]
};

},{}],"node_modules/faker/lib/locales/cz/date/weekday.js":[function(require,module,exports) {
// Source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/en.xml#L1847
module["exports"] = {
  wide: [
    "Pondělí",
    "Úterý",
    "Středa",
    "čtvrtek",
    "Pátek",
    "Sobota",
    "Neděle"
  ],
  // Property "wide_context" is optional, if not set then "wide" will be used instead
  // It is used to specify a word in context, which may differ from a stand-alone word
  wide_context: [
    "Pondělí",
    "Úterý",
    "Středa",
    "čtvrtek",
    "Pátek",
    "Sobota",
    "Neděle"
  ],
  abbr: [
    "Po",
    "Út",
    "St",
    "čt",
    "Pá",
    "So",
    "Ne"
  ],
  // Property "abbr_context" is optional, if not set then "abbr" will be used instead
  // It is used to specify a word in context, which may differ from a stand-alone word
  abbr_context: [
    "Po",
    "Út",
    "St",
    "čt",
    "Pá",
    "So",
    "Ne"
  ]
};

},{}],"node_modules/faker/lib/locales/cz/date/index.js":[function(require,module,exports) {
var date = {};
module["exports"] = date;
date.month = require("./month");
date.weekday = require("./weekday");

},{"./month":"node_modules/faker/lib/locales/cz/date/month.js","./weekday":"node_modules/faker/lib/locales/cz/date/weekday.js"}],"node_modules/faker/lib/locales/cz/index.js":[function(require,module,exports) {
var cz = {};
module['exports'] = cz;
cz.title = "Czech";
cz.address = require("./address");
cz.company = require("./company");
cz.internet = require("./internet");
cz.lorem = require("./lorem");
cz.name = require("./name");
cz.phone_number = require("./phone_number");
cz.date = require("./date");

},{"./address":"node_modules/faker/lib/locales/cz/address/index.js","./company":"node_modules/faker/lib/locales/cz/company/index.js","./internet":"node_modules/faker/lib/locales/cz/internet/index.js","./lorem":"node_modules/faker/lib/locales/cz/lorem/index.js","./name":"node_modules/faker/lib/locales/cz/name/index.js","./phone_number":"node_modules/faker/lib/locales/cz/phone_number/index.js","./date":"node_modules/faker/lib/locales/cz/date/index.js"}],"node_modules/faker/lib/locales/de/address/city_prefix.js":[function(require,module,exports) {
module["exports"] = [
  "Nord",
  "Ost",
  "West",
  "Süd",
  "Neu",
  "Alt",
  "Bad"
];

},{}],"node_modules/faker/lib/locales/de/address/city_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "stadt",
  "dorf",
  "land",
  "scheid",
  "burg"
];

},{}],"node_modules/faker/lib/locales/de/address/country.js":[function(require,module,exports) {
module["exports"] = [
  "Ägypten",
  "Äquatorialguinea",
  "Äthiopien",
  "Österreich",
  "Afghanistan",
  "Albanien",
  "Algerien",
  "Amerikanisch-Samoa",
  "Amerikanische Jungferninseln",
  "Andorra",
  "Angola",
  "Anguilla",
  "Antarktis",
  "Antigua und Barbuda",
  "Argentinien",
  "Armenien",
  "Aruba",
  "Aserbaidschan",
  "Australien",
  "Bahamas",
  "Bahrain",
  "Bangladesch",
  "Barbados",
  "Belarus",
  "Belgien",
  "Belize",
  "Benin",
  "die Bermudas",
  "Bhutan",
  "Bolivien",
  "Bosnien und Herzegowina",
  "Botsuana",
  "Bouvetinsel",
  "Brasilien",
  "Britische Jungferninseln",
  "Britisches Territorium im Indischen Ozean",
  "Brunei Darussalam",
  "Bulgarien",
  "Burkina Faso",
  "Burundi",
  "Chile",
  "China",
  "Cookinseln",
  "Costa Rica",
  "Dänemark",
  "Demokratische Republik Kongo",
  "Demokratische Volksrepublik Korea",
  "Deutschland",
  "Dominica",
  "Dominikanische Republik",
  "Dschibuti",
  "Ecuador",
  "El Salvador",
  "Eritrea",
  "Estland",
  "Färöer",
  "Falklandinseln",
  "Fidschi",
  "Finnland",
  "Frankreich",
  "Französisch-Guayana",
  "Französisch-Polynesien",
  "Französische Gebiete im südlichen Indischen Ozean",
  "Gabun",
  "Gambia",
  "Georgien",
  "Ghana",
  "Gibraltar",
  "Grönland",
  "Grenada",
  "Griechenland",
  "Guadeloupe",
  "Guam",
  "Guatemala",
  "Guinea",
  "Guinea-Bissau",
  "Guyana",
  "Haiti",
  "Heard und McDonaldinseln",
  "Honduras",
  "Hongkong",
  "Indien",
  "Indonesien",
  "Irak",
  "Iran",
  "Irland",
  "Island",
  "Israel",
  "Italien",
  "Jamaika",
  "Japan",
  "Jemen",
  "Jordanien",
  "Jugoslawien",
  "Kaimaninseln",
  "Kambodscha",
  "Kamerun",
  "Kanada",
  "Kap Verde",
  "Kasachstan",
  "Katar",
  "Kenia",
  "Kirgisistan",
  "Kiribati",
  "Kleinere amerikanische Überseeinseln",
  "Kokosinseln",
  "Kolumbien",
  "Komoren",
  "Kongo",
  "Kroatien",
  "Kuba",
  "Kuwait",
  "Laos",
  "Lesotho",
  "Lettland",
  "Libanon",
  "Liberia",
  "Libyen",
  "Liechtenstein",
  "Litauen",
  "Luxemburg",
  "Macau",
  "Madagaskar",
  "Malawi",
  "Malaysia",
  "Malediven",
  "Mali",
  "Malta",
  "ehemalige jugoslawische Republik Mazedonien",
  "Marokko",
  "Marshallinseln",
  "Martinique",
  "Mauretanien",
  "Mauritius",
  "Mayotte",
  "Mexiko",
  "Mikronesien",
  "Monaco",
  "Mongolei",
  "Montserrat",
  "Mosambik",
  "Myanmar",
  "Nördliche Marianen",
  "Namibia",
  "Nauru",
  "Nepal",
  "Neukaledonien",
  "Neuseeland",
  "Nicaragua",
  "Niederländische Antillen",
  "Niederlande",
  "Niger",
  "Nigeria",
  "Niue",
  "Norfolkinsel",
  "Norwegen",
  "Oman",
  "Osttimor",
  "Pakistan",
  "Palau",
  "Panama",
  "Papua-Neuguinea",
  "Paraguay",
  "Peru",
  "Philippinen",
  "Pitcairninseln",
  "Polen",
  "Portugal",
  "Puerto Rico",
  "Réunion",
  "Republik Korea",
  "Republik Moldau",
  "Ruanda",
  "Rumänien",
  "Russische Föderation",
  "São Tomé und Príncipe",
  "Südafrika",
  "Südgeorgien und Südliche Sandwichinseln",
  "Salomonen",
  "Sambia",
  "Samoa",
  "San Marino",
  "Saudi-Arabien",
  "Schweden",
  "Schweiz",
  "Senegal",
  "Seychellen",
  "Sierra Leone",
  "Simbabwe",
  "Singapur",
  "Slowakei",
  "Slowenien",
  "Somalien",
  "Spanien",
  "Sri Lanka",
  "St. Helena",
  "St. Kitts und Nevis",
  "St. Lucia",
  "St. Pierre und Miquelon",
  "St. Vincent und die Grenadinen",
  "Sudan",
  "Surinam",
  "Svalbard und Jan Mayen",
  "Swasiland",
  "Syrien",
  "Türkei",
  "Tadschikistan",
  "Taiwan",
  "Tansania",
  "Thailand",
  "Togo",
  "Tokelau",
  "Tonga",
  "Trinidad und Tobago",
  "Tschad",
  "Tschechische Republik",
  "Tunesien",
  "Turkmenistan",
  "Turks- und Caicosinseln",
  "Tuvalu",
  "Uganda",
  "Ukraine",
  "Ungarn",
  "Uruguay",
  "Usbekistan",
  "Vanuatu",
  "Vatikanstadt",
  "Venezuela",
  "Vereinigte Arabische Emirate",
  "Vereinigte Staaten",
  "Vereinigtes Königreich",
  "Vietnam",
  "Wallis und Futuna",
  "Weihnachtsinsel",
  "Westsahara",
  "Zentralafrikanische Republik",
  "Zypern"
];

},{}],"node_modules/faker/lib/locales/de/address/street_root.js":[function(require,module,exports) {
module["exports"] = [
  "Ackerweg",
  "Adalbert-Stifter-Str.",
  "Adalbertstr.",
  "Adolf-Baeyer-Str.",
  "Adolf-Kaschny-Str.",
  "Adolf-Reichwein-Str.",
  "Adolfsstr.",
  "Ahornweg",
  "Ahrstr.",
  "Akazienweg",
  "Albert-Einstein-Str.",
  "Albert-Schweitzer-Str.",
  "Albertus-Magnus-Str.",
  "Albert-Zarthe-Weg",
  "Albin-Edelmann-Str.",
  "Albrecht-Haushofer-Str.",
  "Aldegundisstr.",
  "Alexanderstr.",
  "Alfred-Delp-Str.",
  "Alfred-Kubin-Str.",
  "Alfred-Stock-Str.",
  "Alkenrather Str.",
  "Allensteiner Str.",
  "Alsenstr.",
  "Alt Steinbücheler Weg",
  "Alte Garten",
  "Alte Heide",
  "Alte Landstr.",
  "Alte Ziegelei",
  "Altenberger Str.",
  "Altenhof",
  "Alter Grenzweg",
  "Altstadtstr.",
  "Am Alten Gaswerk",
  "Am Alten Schafstall",
  "Am Arenzberg",
  "Am Benthal",
  "Am Birkenberg",
  "Am Blauen Berg",
  "Am Borsberg",
  "Am Brungen",
  "Am Büchelter Hof",
  "Am Buttermarkt",
  "Am Ehrenfriedhof",
  "Am Eselsdamm",
  "Am Falkenberg",
  "Am Frankenberg",
  "Am Gesundheitspark",
  "Am Gierlichshof",
  "Am Graben",
  "Am Hagelkreuz",
  "Am Hang",
  "Am Heidkamp",
  "Am Hemmelrather Hof",
  "Am Hofacker",
  "Am Hohen Ufer",
  "Am Höllers Eck",
  "Am Hühnerberg",
  "Am Jägerhof",
  "Am Junkernkamp",
  "Am Kemperstiegel",
  "Am Kettnersbusch",
  "Am Kiesberg",
  "Am Klösterchen",
  "Am Knechtsgraben",
  "Am Köllerweg",
  "Am Köttersbach",
  "Am Kreispark",
  "Am Kronefeld",
  "Am Küchenhof",
  "Am Kühnsbusch",
  "Am Lindenfeld",
  "Am Märchen",
  "Am Mittelberg",
  "Am Mönchshof",
  "Am Mühlenbach",
  "Am Neuenhof",
  "Am Nonnenbruch",
  "Am Plattenbusch",
  "Am Quettinger Feld",
  "Am Rosenhügel",
  "Am Sandberg",
  "Am Scherfenbrand",
  "Am Schokker",
  "Am Silbersee",
  "Am Sonnenhang",
  "Am Sportplatz",
  "Am Stadtpark",
  "Am Steinberg",
  "Am Telegraf",
  "Am Thelenhof",
  "Am Vogelkreuz",
  "Am Vogelsang",
  "Am Vogelsfeldchen",
  "Am Wambacher Hof",
  "Am Wasserturm",
  "Am Weidenbusch",
  "Am Weiher",
  "Am Weingarten",
  "Am Werth",
  "Amselweg",
  "An den Irlen",
  "An den Rheinauen",
  "An der Bergerweide",
  "An der Dingbank",
  "An der Evangelischen Kirche",
  "An der Evgl. Kirche",
  "An der Feldgasse",
  "An der Fettehenne",
  "An der Kante",
  "An der Laach",
  "An der Lehmkuhle",
  "An der Lichtenburg",
  "An der Luisenburg",
  "An der Robertsburg",
  "An der Schmitten",
  "An der Schusterinsel",
  "An der Steinrütsch",
  "An St. Andreas",
  "An St. Remigius",
  "Andreasstr.",
  "Ankerweg",
  "Annette-Kolb-Str.",
  "Apenrader Str.",
  "Arnold-Ohletz-Str.",
  "Atzlenbacher Str.",
  "Auerweg",
  "Auestr.",
  "Auf dem Acker",
  "Auf dem Blahnenhof",
  "Auf dem Bohnbüchel",
  "Auf dem Bruch",
  "Auf dem End",
  "Auf dem Forst",
  "Auf dem Herberg",
  "Auf dem Lehn",
  "Auf dem Stein",
  "Auf dem Weierberg",
  "Auf dem Weiherhahn",
  "Auf den Reien",
  "Auf der Donnen",
  "Auf der Grieße",
  "Auf der Ohmer",
  "Auf der Weide",
  "Auf'm Berg",
  "Auf'm Kamp",
  "Augustastr.",
  "August-Kekulé-Str.",
  "A.-W.-v.-Hofmann-Str.",
  "Bahnallee",
  "Bahnhofstr.",
  "Baltrumstr.",
  "Bamberger Str.",
  "Baumberger Str.",
  "Bebelstr.",
  "Beckers Kämpchen",
  "Beerenstr.",
  "Beethovenstr.",
  "Behringstr.",
  "Bendenweg",
  "Bensberger Str.",
  "Benzstr.",
  "Bergische Landstr.",
  "Bergstr.",
  "Berliner Platz",
  "Berliner Str.",
  "Bernhard-Letterhaus-Str.",
  "Bernhard-Lichtenberg-Str.",
  "Bernhard-Ridder-Str.",
  "Bernsteinstr.",
  "Bertha-Middelhauve-Str.",
  "Bertha-von-Suttner-Str.",
  "Bertolt-Brecht-Str.",
  "Berzeliusstr.",
  "Bielertstr.",
  "Biesenbach",
  "Billrothstr.",
  "Birkenbergstr.",
  "Birkengartenstr.",
  "Birkenweg",
  "Bismarckstr.",
  "Bitterfelder Str.",
  "Blankenburg",
  "Blaukehlchenweg",
  "Blütenstr.",
  "Boberstr.",
  "Böcklerstr.",
  "Bodelschwinghstr.",
  "Bodestr.",
  "Bogenstr.",
  "Bohnenkampsweg",
  "Bohofsweg",
  "Bonifatiusstr.",
  "Bonner Str.",
  "Borkumstr.",
  "Bornheimer Str.",
  "Borsigstr.",
  "Borussiastr.",
  "Bracknellstr.",
  "Brahmsweg",
  "Brandenburger Str.",
  "Breidenbachstr.",
  "Breslauer Str.",
  "Bruchhauser Str.",
  "Brückenstr.",
  "Brucknerstr.",
  "Brüder-Bonhoeffer-Str.",
  "Buchenweg",
  "Bürgerbuschweg",
  "Burgloch",
  "Burgplatz",
  "Burgstr.",
  "Burgweg",
  "Bürriger Weg",
  "Burscheider Str.",
  "Buschkämpchen",
  "Butterheider Str.",
  "Carl-Duisberg-Platz",
  "Carl-Duisberg-Str.",
  "Carl-Leverkus-Str.",
  "Carl-Maria-von-Weber-Platz",
  "Carl-Maria-von-Weber-Str.",
  "Carlo-Mierendorff-Str.",
  "Carl-Rumpff-Str.",
  "Carl-von-Ossietzky-Str.",
  "Charlottenburger Str.",
  "Christian-Heß-Str.",
  "Claasbruch",
  "Clemens-Winkler-Str.",
  "Concordiastr.",
  "Cranachstr.",
  "Dahlemer Str.",
  "Daimlerstr.",
  "Damaschkestr.",
  "Danziger Str.",
  "Debengasse",
  "Dechant-Fein-Str.",
  "Dechant-Krey-Str.",
  "Deichtorstr.",
  "Dhünnberg",
  "Dhünnstr.",
  "Dianastr.",
  "Diedenhofener Str.",
  "Diepental",
  "Diepenthaler Str.",
  "Dieselstr.",
  "Dillinger Str.",
  "Distelkamp",
  "Dohrgasse",
  "Domblick",
  "Dönhoffstr.",
  "Dornierstr.",
  "Drachenfelsstr.",
  "Dr.-August-Blank-Str.",
  "Dresdener Str.",
  "Driescher Hecke",
  "Drosselweg",
  "Dudweilerstr.",
  "Dünenweg",
  "Dünfelder Str.",
  "Dünnwalder Grenzweg",
  "Düppeler Str.",
  "Dürerstr.",
  "Dürscheider Weg",
  "Düsseldorfer Str.",
  "Edelrather Weg",
  "Edmund-Husserl-Str.",
  "Eduard-Spranger-Str.",
  "Ehrlichstr.",
  "Eichenkamp",
  "Eichenweg",
  "Eidechsenweg",
  "Eifelstr.",
  "Eifgenstr.",
  "Eintrachtstr.",
  "Elbestr.",
  "Elisabeth-Langgässer-Str.",
  "Elisabethstr.",
  "Elisabeth-von-Thadden-Str.",
  "Elisenstr.",
  "Elsa-Brändström-Str.",
  "Elsbachstr.",
  "Else-Lasker-Schüler-Str.",
  "Elsterstr.",
  "Emil-Fischer-Str.",
  "Emil-Nolde-Str.",
  "Engelbertstr.",
  "Engstenberger Weg",
  "Entenpfuhl",
  "Erbelegasse",
  "Erftstr.",
  "Erfurter Str.",
  "Erich-Heckel-Str.",
  "Erich-Klausener-Str.",
  "Erich-Ollenhauer-Str.",
  "Erlenweg",
  "Ernst-Bloch-Str.",
  "Ernst-Ludwig-Kirchner-Str.",
  "Erzbergerstr.",
  "Eschenallee",
  "Eschenweg",
  "Esmarchstr.",
  "Espenweg",
  "Euckenstr.",
  "Eulengasse",
  "Eulenkamp",
  "Ewald-Flamme-Str.",
  "Ewald-Röll-Str.",
  "Fährstr.",
  "Farnweg",
  "Fasanenweg",
  "Faßbacher Hof",
  "Felderstr.",
  "Feldkampstr.",
  "Feldsiefer Weg",
  "Feldsiefer Wiesen",
  "Feldstr.",
  "Feldtorstr.",
  "Felix-von-Roll-Str.",
  "Ferdinand-Lassalle-Str.",
  "Fester Weg",
  "Feuerbachstr.",
  "Feuerdornweg",
  "Fichtenweg",
  "Fichtestr.",
  "Finkelsteinstr.",
  "Finkenweg",
  "Fixheider Str.",
  "Flabbenhäuschen",
  "Flensburger Str.",
  "Fliederweg",
  "Florastr.",
  "Florianweg",
  "Flotowstr.",
  "Flurstr.",
  "Föhrenweg",
  "Fontanestr.",
  "Forellental",
  "Fortunastr.",
  "Franz-Esser-Str.",
  "Franz-Hitze-Str.",
  "Franz-Kail-Str.",
  "Franz-Marc-Str.",
  "Freiburger Str.",
  "Freiheitstr.",
  "Freiherr-vom-Stein-Str.",
  "Freudenthal",
  "Freudenthaler Weg",
  "Fridtjof-Nansen-Str.",
  "Friedenberger Str.",
  "Friedensstr.",
  "Friedhofstr.",
  "Friedlandstr.",
  "Friedlieb-Ferdinand-Runge-Str.",
  "Friedrich-Bayer-Str.",
  "Friedrich-Bergius-Platz",
  "Friedrich-Ebert-Platz",
  "Friedrich-Ebert-Str.",
  "Friedrich-Engels-Str.",
  "Friedrich-List-Str.",
  "Friedrich-Naumann-Str.",
  "Friedrich-Sertürner-Str.",
  "Friedrichstr.",
  "Friedrich-Weskott-Str.",
  "Friesenweg",
  "Frischenberg",
  "Fritz-Erler-Str.",
  "Fritz-Henseler-Str.",
  "Fröbelstr.",
  "Fürstenbergplatz",
  "Fürstenbergstr.",
  "Gabriele-Münter-Str.",
  "Gartenstr.",
  "Gebhardstr.",
  "Geibelstr.",
  "Gellertstr.",
  "Georg-von-Vollmar-Str.",
  "Gerhard-Domagk-Str.",
  "Gerhart-Hauptmann-Str.",
  "Gerichtsstr.",
  "Geschwister-Scholl-Str.",
  "Gezelinallee",
  "Gierener Weg",
  "Ginsterweg",
  "Gisbert-Cremer-Str.",
  "Glücksburger Str.",
  "Gluckstr.",
  "Gneisenaustr.",
  "Goetheplatz",
  "Goethestr.",
  "Golo-Mann-Str.",
  "Görlitzer Str.",
  "Görresstr.",
  "Graebestr.",
  "Graf-Galen-Platz",
  "Gregor-Mendel-Str.",
  "Greifswalder Str.",
  "Grillenweg",
  "Gronenborner Weg",
  "Große Kirchstr.",
  "Grunder Wiesen",
  "Grundermühle",
  "Grundermühlenhof",
  "Grundermühlenweg",
  "Grüner Weg",
  "Grunewaldstr.",
  "Grünstr.",
  "Günther-Weisenborn-Str.",
  "Gustav-Freytag-Str.",
  "Gustav-Heinemann-Str.",
  "Gustav-Radbruch-Str.",
  "Gut Reuschenberg",
  "Gutenbergstr.",
  "Haberstr.",
  "Habichtgasse",
  "Hafenstr.",
  "Hagenauer Str.",
  "Hahnenblecher",
  "Halenseestr.",
  "Halfenleimbach",
  "Hallesche Str.",
  "Halligstr.",
  "Hamberger Str.",
  "Hammerweg",
  "Händelstr.",
  "Hannah-Höch-Str.",
  "Hans-Arp-Str.",
  "Hans-Gerhard-Str.",
  "Hans-Sachs-Str.",
  "Hans-Schlehahn-Str.",
  "Hans-von-Dohnanyi-Str.",
  "Hardenbergstr.",
  "Haselweg",
  "Hauptstr.",
  "Haus-Vorster-Str.",
  "Hauweg",
  "Havelstr.",
  "Havensteinstr.",
  "Haydnstr.",
  "Hebbelstr.",
  "Heckenweg",
  "Heerweg",
  "Hegelstr.",
  "Heidberg",
  "Heidehöhe",
  "Heidestr.",
  "Heimstättenweg",
  "Heinrich-Böll-Str.",
  "Heinrich-Brüning-Str.",
  "Heinrich-Claes-Str.",
  "Heinrich-Heine-Str.",
  "Heinrich-Hörlein-Str.",
  "Heinrich-Lübke-Str.",
  "Heinrich-Lützenkirchen-Weg",
  "Heinrichstr.",
  "Heinrich-Strerath-Str.",
  "Heinrich-von-Kleist-Str.",
  "Heinrich-von-Stephan-Str.",
  "Heisterbachstr.",
  "Helenenstr.",
  "Helmestr.",
  "Hemmelrather Weg",
  "Henry-T.-v.-Böttinger-Str.",
  "Herderstr.",
  "Heribertstr.",
  "Hermann-Ehlers-Str.",
  "Hermann-Hesse-Str.",
  "Hermann-König-Str.",
  "Hermann-Löns-Str.",
  "Hermann-Milde-Str.",
  "Hermann-Nörrenberg-Str.",
  "Hermann-von-Helmholtz-Str.",
  "Hermann-Waibel-Str.",
  "Herzogstr.",
  "Heymannstr.",
  "Hindenburgstr.",
  "Hirzenberg",
  "Hitdorfer Kirchweg",
  "Hitdorfer Str.",
  "Höfer Mühle",
  "Höfer Weg",
  "Hohe Str.",
  "Höhenstr.",
  "Höltgestal",
  "Holunderweg",
  "Holzer Weg",
  "Holzer Wiesen",
  "Hornpottweg",
  "Hubertusweg",
  "Hufelandstr.",
  "Hufer Weg",
  "Humboldtstr.",
  "Hummelsheim",
  "Hummelweg",
  "Humperdinckstr.",
  "Hüscheider Gärten",
  "Hüscheider Str.",
  "Hütte",
  "Ilmstr.",
  "Im Bergischen Heim",
  "Im Bruch",
  "Im Buchenhain",
  "Im Bühl",
  "Im Burgfeld",
  "Im Dorf",
  "Im Eisholz",
  "Im Friedenstal",
  "Im Frohental",
  "Im Grunde",
  "Im Hederichsfeld",
  "Im Jücherfeld",
  "Im Kalkfeld",
  "Im Kirberg",
  "Im Kirchfeld",
  "Im Kreuzbruch",
  "Im Mühlenfeld",
  "Im Nesselrader Kamp",
  "Im Oberdorf",
  "Im Oberfeld",
  "Im Rosengarten",
  "Im Rottland",
  "Im Scheffengarten",
  "Im Staderfeld",
  "Im Steinfeld",
  "Im Weidenblech",
  "Im Winkel",
  "Im Ziegelfeld",
  "Imbach",
  "Imbacher Weg",
  "Immenweg",
  "In den Blechenhöfen",
  "In den Dehlen",
  "In der Birkenau",
  "In der Dasladen",
  "In der Felderhütten",
  "In der Hartmannswiese",
  "In der Höhle",
  "In der Schaafsdellen",
  "In der Wasserkuhl",
  "In der Wüste",
  "In Holzhausen",
  "Insterstr.",
  "Jacob-Fröhlen-Str.",
  "Jägerstr.",
  "Jahnstr.",
  "Jakob-Eulenberg-Weg",
  "Jakobistr.",
  "Jakob-Kaiser-Str.",
  "Jenaer Str.",
  "Johannes-Baptist-Str.",
  "Johannes-Dott-Str.",
  "Johannes-Popitz-Str.",
  "Johannes-Wislicenus-Str.",
  "Johannisburger Str.",
  "Johann-Janssen-Str.",
  "Johann-Wirtz-Weg",
  "Josefstr.",
  "Jüch",
  "Julius-Doms-Str.",
  "Julius-Leber-Str.",
  "Kaiserplatz",
  "Kaiserstr.",
  "Kaiser-Wilhelm-Allee",
  "Kalkstr.",
  "Kämpchenstr.",
  "Kämpenwiese",
  "Kämper Weg",
  "Kamptalweg",
  "Kanalstr.",
  "Kandinskystr.",
  "Kantstr.",
  "Kapellenstr.",
  "Karl-Arnold-Str.",
  "Karl-Bosch-Str.",
  "Karl-Bückart-Str.",
  "Karl-Carstens-Ring",
  "Karl-Friedrich-Goerdeler-Str.",
  "Karl-Jaspers-Str.",
  "Karl-König-Str.",
  "Karl-Krekeler-Str.",
  "Karl-Marx-Str.",
  "Karlstr.",
  "Karl-Ulitzka-Str.",
  "Karl-Wichmann-Str.",
  "Karl-Wingchen-Str.",
  "Käsenbrod",
  "Käthe-Kollwitz-Str.",
  "Katzbachstr.",
  "Kerschensteinerstr.",
  "Kiefernweg",
  "Kieler Str.",
  "Kieselstr.",
  "Kiesweg",
  "Kinderhausen",
  "Kleiberweg",
  "Kleine Kirchstr.",
  "Kleingansweg",
  "Kleinheider Weg",
  "Klief",
  "Kneippstr.",
  "Knochenbergsweg",
  "Kochergarten",
  "Kocherstr.",
  "Kockelsberg",
  "Kolberger Str.",
  "Kolmarer Str.",
  "Kölner Gasse",
  "Kölner Str.",
  "Kolpingstr.",
  "Königsberger Platz",
  "Konrad-Adenauer-Platz",
  "Köpenicker Str.",
  "Kopernikusstr.",
  "Körnerstr.",
  "Köschenberg",
  "Köttershof",
  "Kreuzbroicher Str.",
  "Kreuzkamp",
  "Krummer Weg",
  "Kruppstr.",
  "Kuhlmannweg",
  "Kump",
  "Kumper Weg",
  "Kunstfeldstr.",
  "Küppersteger Str.",
  "Kursiefen",
  "Kursiefer Weg",
  "Kurtekottenweg",
  "Kurt-Schumacher-Ring",
  "Kyllstr.",
  "Langenfelder Str.",
  "Längsleimbach",
  "Lärchenweg",
  "Legienstr.",
  "Lehner Mühle",
  "Leichlinger Str.",
  "Leimbacher Hof",
  "Leinestr.",
  "Leineweberstr.",
  "Leipziger Str.",
  "Lerchengasse",
  "Lessingstr.",
  "Libellenweg",
  "Lichstr.",
  "Liebigstr.",
  "Lindenstr.",
  "Lingenfeld",
  "Linienstr.",
  "Lippe",
  "Löchergraben",
  "Löfflerstr.",
  "Loheweg",
  "Lohrbergstr.",
  "Lohrstr.",
  "Löhstr.",
  "Lortzingstr.",
  "Lötzener Str.",
  "Löwenburgstr.",
  "Lucasstr.",
  "Ludwig-Erhard-Platz",
  "Ludwig-Girtler-Str.",
  "Ludwig-Knorr-Str.",
  "Luisenstr.",
  "Lupinenweg",
  "Lurchenweg",
  "Lützenkirchener Str.",
  "Lycker Str.",
  "Maashofstr.",
  "Manforter Str.",
  "Marc-Chagall-Str.",
  "Maria-Dresen-Str.",
  "Maria-Terwiel-Str.",
  "Marie-Curie-Str.",
  "Marienburger Str.",
  "Mariendorfer Str.",
  "Marienwerderstr.",
  "Marie-Schlei-Str.",
  "Marktplatz",
  "Markusweg",
  "Martin-Buber-Str.",
  "Martin-Heidegger-Str.",
  "Martin-Luther-Str.",
  "Masurenstr.",
  "Mathildenweg",
  "Maurinusstr.",
  "Mauspfad",
  "Max-Beckmann-Str.",
  "Max-Delbrück-Str.",
  "Max-Ernst-Str.",
  "Max-Holthausen-Platz",
  "Max-Horkheimer-Str.",
  "Max-Liebermann-Str.",
  "Max-Pechstein-Str.",
  "Max-Planck-Str.",
  "Max-Scheler-Str.",
  "Max-Schönenberg-Str.",
  "Maybachstr.",
  "Meckhofer Feld",
  "Meisenweg",
  "Memelstr.",
  "Menchendahler Str.",
  "Mendelssohnstr.",
  "Merziger Str.",
  "Mettlacher Str.",
  "Metzer Str.",
  "Michaelsweg",
  "Miselohestr.",
  "Mittelstr.",
  "Mohlenstr.",
  "Moltkestr.",
  "Monheimer Str.",
  "Montanusstr.",
  "Montessoriweg",
  "Moosweg",
  "Morsbroicher Str.",
  "Moselstr.",
  "Moskauer Str.",
  "Mozartstr.",
  "Mühlenweg",
  "Muhrgasse",
  "Muldestr.",
  "Mülhausener Str.",
  "Mülheimer Str.",
  "Münsters Gäßchen",
  "Münzstr.",
  "Müritzstr.",
  "Myliusstr.",
  "Nachtigallenweg",
  "Nauener Str.",
  "Neißestr.",
  "Nelly-Sachs-Str.",
  "Netzestr.",
  "Neuendriesch",
  "Neuenhausgasse",
  "Neuenkamp",
  "Neujudenhof",
  "Neukronenberger Str.",
  "Neustadtstr.",
  "Nicolai-Hartmann-Str.",
  "Niederblecher",
  "Niederfeldstr.",
  "Nietzschestr.",
  "Nikolaus-Groß-Str.",
  "Nobelstr.",
  "Norderneystr.",
  "Nordstr.",
  "Ober dem Hof",
  "Obere Lindenstr.",
  "Obere Str.",
  "Oberölbach",
  "Odenthaler Str.",
  "Oderstr.",
  "Okerstr.",
  "Olof-Palme-Str.",
  "Ophovener Str.",
  "Opladener Platz",
  "Opladener Str.",
  "Ortelsburger Str.",
  "Oskar-Moll-Str.",
  "Oskar-Schlemmer-Str.",
  "Oststr.",
  "Oswald-Spengler-Str.",
  "Otto-Dix-Str.",
  "Otto-Grimm-Str.",
  "Otto-Hahn-Str.",
  "Otto-Müller-Str.",
  "Otto-Stange-Str.",
  "Ottostr.",
  "Otto-Varnhagen-Str.",
  "Otto-Wels-Str.",
  "Ottweilerstr.",
  "Oulustr.",
  "Overfeldweg",
  "Pappelweg",
  "Paracelsusstr.",
  "Parkstr.",
  "Pastor-Louis-Str.",
  "Pastor-Scheibler-Str.",
  "Pastorskamp",
  "Paul-Klee-Str.",
  "Paul-Löbe-Str.",
  "Paulstr.",
  "Peenestr.",
  "Pescher Busch",
  "Peschstr.",
  "Pestalozzistr.",
  "Peter-Grieß-Str.",
  "Peter-Joseph-Lenné-Str.",
  "Peter-Neuenheuser-Str.",
  "Petersbergstr.",
  "Peterstr.",
  "Pfarrer-Jekel-Str.",
  "Pfarrer-Klein-Str.",
  "Pfarrer-Röhr-Str.",
  "Pfeilshofstr.",
  "Philipp-Ott-Str.",
  "Piet-Mondrian-Str.",
  "Platanenweg",
  "Pommernstr.",
  "Porschestr.",
  "Poststr.",
  "Potsdamer Str.",
  "Pregelstr.",
  "Prießnitzstr.",
  "Pützdelle",
  "Quarzstr.",
  "Quettinger Str.",
  "Rat-Deycks-Str.",
  "Rathenaustr.",
  "Ratherkämp",
  "Ratiborer Str.",
  "Raushofstr.",
  "Regensburger Str.",
  "Reinickendorfer Str.",
  "Renkgasse",
  "Rennbaumplatz",
  "Rennbaumstr.",
  "Reuschenberger Str.",
  "Reusrather Str.",
  "Reuterstr.",
  "Rheinallee",
  "Rheindorfer Str.",
  "Rheinstr.",
  "Rhein-Wupper-Platz",
  "Richard-Wagner-Str.",
  "Rilkestr.",
  "Ringstr.",
  "Robert-Blum-Str.",
  "Robert-Koch-Str.",
  "Robert-Medenwald-Str.",
  "Rolandstr.",
  "Romberg",
  "Röntgenstr.",
  "Roonstr.",
  "Ropenstall",
  "Ropenstaller Weg",
  "Rosenthal",
  "Rostocker Str.",
  "Rotdornweg",
  "Röttgerweg",
  "Rückertstr.",
  "Rudolf-Breitscheid-Str.",
  "Rudolf-Mann-Platz",
  "Rudolf-Stracke-Str.",
  "Ruhlachplatz",
  "Ruhlachstr.",
  "Rüttersweg",
  "Saalestr.",
  "Saarbrücker Str.",
  "Saarlauterner Str.",
  "Saarstr.",
  "Salamanderweg",
  "Samlandstr.",
  "Sanddornstr.",
  "Sandstr.",
  "Sauerbruchstr.",
  "Schäfershütte",
  "Scharnhorststr.",
  "Scheffershof",
  "Scheidemannstr.",
  "Schellingstr.",
  "Schenkendorfstr.",
  "Schießbergstr.",
  "Schillerstr.",
  "Schlangenhecke",
  "Schlebuscher Heide",
  "Schlebuscher Str.",
  "Schlebuschrath",
  "Schlehdornstr.",
  "Schleiermacherstr.",
  "Schloßstr.",
  "Schmalenbruch",
  "Schnepfenflucht",
  "Schöffenweg",
  "Schöllerstr.",
  "Schöne Aussicht",
  "Schöneberger Str.",
  "Schopenhauerstr.",
  "Schubertplatz",
  "Schubertstr.",
  "Schulberg",
  "Schulstr.",
  "Schumannstr.",
  "Schwalbenweg",
  "Schwarzastr.",
  "Sebastianusweg",
  "Semmelweisstr.",
  "Siebelplatz",
  "Siemensstr.",
  "Solinger Str.",
  "Sonderburger Str.",
  "Spandauer Str.",
  "Speestr.",
  "Sperberweg",
  "Sperlingsweg",
  "Spitzwegstr.",
  "Sporrenberger Mühle",
  "Spreestr.",
  "St. Ingberter Str.",
  "Starenweg",
  "Stauffenbergstr.",
  "Stefan-Zweig-Str.",
  "Stegerwaldstr.",
  "Steglitzer Str.",
  "Steinbücheler Feld",
  "Steinbücheler Str.",
  "Steinstr.",
  "Steinweg",
  "Stephan-Lochner-Str.",
  "Stephanusstr.",
  "Stettiner Str.",
  "Stixchesstr.",
  "Stöckenstr.",
  "Stralsunder Str.",
  "Straßburger Str.",
  "Stresemannplatz",
  "Strombergstr.",
  "Stromstr.",
  "Stüttekofener Str.",
  "Sudestr.",
  "Sürderstr.",
  "Syltstr.",
  "Talstr.",
  "Tannenbergstr.",
  "Tannenweg",
  "Taubenweg",
  "Teitscheider Weg",
  "Telegrafenstr.",
  "Teltower Str.",
  "Tempelhofer Str.",
  "Theodor-Adorno-Str.",
  "Theodor-Fliedner-Str.",
  "Theodor-Gierath-Str.",
  "Theodor-Haubach-Str.",
  "Theodor-Heuss-Ring",
  "Theodor-Storm-Str.",
  "Theodorstr.",
  "Thomas-Dehler-Str.",
  "Thomas-Morus-Str.",
  "Thomas-von-Aquin-Str.",
  "Tönges Feld",
  "Torstr.",
  "Treptower Str.",
  "Treuburger Str.",
  "Uhlandstr.",
  "Ulmenweg",
  "Ulmer Str.",
  "Ulrichstr.",
  "Ulrich-von-Hassell-Str.",
  "Umlag",
  "Unstrutstr.",
  "Unter dem Schildchen",
  "Unterölbach",
  "Unterstr.",
  "Uppersberg",
  "Van\\'t-Hoff-Str.",
  "Veit-Stoß-Str.",
  "Vereinsstr.",
  "Viktor-Meyer-Str.",
  "Vincent-van-Gogh-Str.",
  "Virchowstr.",
  "Voigtslach",
  "Volhardstr.",
  "Völklinger Str.",
  "Von-Brentano-Str.",
  "Von-Diergardt-Str.",
  "Von-Eichendorff-Str.",
  "Von-Ketteler-Str.",
  "Von-Knoeringen-Str.",
  "Von-Pettenkofer-Str.",
  "Von-Siebold-Str.",
  "Wacholderweg",
  "Waldstr.",
  "Walter-Flex-Str.",
  "Walter-Hempel-Str.",
  "Walter-Hochapfel-Str.",
  "Walter-Nernst-Str.",
  "Wannseestr.",
  "Warnowstr.",
  "Warthestr.",
  "Weddigenstr.",
  "Weichselstr.",
  "Weidenstr.",
  "Weidfeldstr.",
  "Weiherfeld",
  "Weiherstr.",
  "Weinhäuser Str.",
  "Weißdornweg",
  "Weißenseestr.",
  "Weizkamp",
  "Werftstr.",
  "Werkstättenstr.",
  "Werner-Heisenberg-Str.",
  "Werrastr.",
  "Weyerweg",
  "Widdauener Str.",
  "Wiebertshof",
  "Wiehbachtal",
  "Wiembachallee",
  "Wiesdorfer Platz",
  "Wiesenstr.",
  "Wilhelm-Busch-Str.",
  "Wilhelm-Hastrich-Str.",
  "Wilhelm-Leuschner-Str.",
  "Wilhelm-Liebknecht-Str.",
  "Wilhelmsgasse",
  "Wilhelmstr.",
  "Willi-Baumeister-Str.",
  "Willy-Brandt-Ring",
  "Winand-Rossi-Str.",
  "Windthorststr.",
  "Winkelweg",
  "Winterberg",
  "Wittenbergstr.",
  "Wolf-Vostell-Str.",
  "Wolkenburgstr.",
  "Wupperstr.",
  "Wuppertalstr.",
  "Wüstenhof",
  "Yitzhak-Rabin-Str.",
  "Zauberkuhle",
  "Zedernweg",
  "Zehlendorfer Str.",
  "Zehntenweg",
  "Zeisigweg",
  "Zeppelinstr.",
  "Zschopaustr.",
  "Zum Claashäuschen",
  "Zündhütchenweg",
  "Zur Alten Brauerei",
  "Zur alten Fabrik"
];

},{}],"node_modules/faker/lib/locales/de/address/building_number.js":[function(require,module,exports) {
module["exports"] = [
  "###",
  "##",
  "#",
  "##a",
  "##b",
  "##c"
];

},{}],"node_modules/faker/lib/locales/de/address/secondary_address.js":[function(require,module,exports) {
module["exports"] = [
  "Apt. ###",
  "Zimmer ###",
  "# OG"
];

},{}],"node_modules/faker/lib/locales/de/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "#####",
  "#####"
];

},{}],"node_modules/faker/lib/locales/de/address/state.js":[function(require,module,exports) {
module["exports"] = [
  "Baden-Württemberg",
  "Bayern",
  "Berlin",
  "Brandenburg",
  "Bremen",
  "Hamburg",
  "Hessen",
  "Mecklenburg-Vorpommern",
  "Niedersachsen",
  "Nordrhein-Westfalen",
  "Rheinland-Pfalz",
  "Saarland",
  "Sachsen",
  "Sachsen-Anhalt",
  "Schleswig-Holstein",
  "Thüringen"
];

},{}],"node_modules/faker/lib/locales/de/address/state_abbr.js":[function(require,module,exports) {
module["exports"] = [
  "BW",
  "BY",
  "BE",
  "BB",
  "HB",
  "HH",
  "HE",
  "MV",
  "NI",
  "NW",
  "RP",
  "SL",
  "SN",
  "ST",
  "SH",
  "TH"
];

},{}],"node_modules/faker/lib/locales/de/address/city.js":[function(require,module,exports) {
module["exports"] = [
  "#{city_prefix} #{Name.first_name}#{city_suffix}",
  "#{city_prefix} #{Name.first_name}",
  "#{Name.first_name}#{city_suffix}",
  "#{Name.last_name}#{city_suffix}"
];

},{}],"node_modules/faker/lib/locales/de/address/street_name.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_root}"
];

},{}],"node_modules/faker/lib/locales/de/address/street_address.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_name} #{building_number}"
];

},{}],"node_modules/faker/lib/locales/de/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "Deutschland"
];

},{}],"node_modules/faker/lib/locales/de/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.city_prefix = require("./city_prefix");
address.city_suffix = require("./city_suffix");
address.country = require("./country");
address.street_root = require("./street_root");
address.building_number = require("./building_number");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.city = require("./city");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./city_prefix":"node_modules/faker/lib/locales/de/address/city_prefix.js","./city_suffix":"node_modules/faker/lib/locales/de/address/city_suffix.js","./country":"node_modules/faker/lib/locales/de/address/country.js","./street_root":"node_modules/faker/lib/locales/de/address/street_root.js","./building_number":"node_modules/faker/lib/locales/de/address/building_number.js","./secondary_address":"node_modules/faker/lib/locales/de/address/secondary_address.js","./postcode":"node_modules/faker/lib/locales/de/address/postcode.js","./state":"node_modules/faker/lib/locales/de/address/state.js","./state_abbr":"node_modules/faker/lib/locales/de/address/state_abbr.js","./city":"node_modules/faker/lib/locales/de/address/city.js","./street_name":"node_modules/faker/lib/locales/de/address/street_name.js","./street_address":"node_modules/faker/lib/locales/de/address/street_address.js","./default_country":"node_modules/faker/lib/locales/de/address/default_country.js"}],"node_modules/faker/lib/locales/de/company/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "GmbH",
  "AG",
  "Gruppe",
  "KG",
  "GmbH & Co. KG",
  "UG",
  "OHG"
];

},{}],"node_modules/faker/lib/locales/de/company/legal_form.js":[function(require,module,exports) {
module["exports"] = [
  "GmbH",
  "AG",
  "Gruppe",
  "KG",
  "GmbH & Co. KG",
  "UG",
  "OHG"
];

},{}],"node_modules/faker/lib/locales/de/company/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{Name.last_name} #{suffix}",
  "#{Name.last_name}-#{Name.last_name}",
  "#{Name.last_name}, #{Name.last_name} und #{Name.last_name}"
];

},{}],"node_modules/faker/lib/locales/de/company/index.js":[function(require,module,exports) {
var company = {};
module['exports'] = company;
company.suffix = require("./suffix");
company.legal_form = require("./legal_form");
company.name = require("./name");

},{"./suffix":"node_modules/faker/lib/locales/de/company/suffix.js","./legal_form":"node_modules/faker/lib/locales/de/company/legal_form.js","./name":"node_modules/faker/lib/locales/de/company/name.js"}],"node_modules/faker/lib/locales/de/internet/free_email.js":[function(require,module,exports) {
module["exports"] = [
  "gmail.com",
  "yahoo.com",
  "hotmail.com"
];

},{}],"node_modules/faker/lib/locales/de/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "com",
  "info",
  "name",
  "net",
  "org",
  "de",
  "ch"
];

},{}],"node_modules/faker/lib/locales/de/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.free_email = require("./free_email");
internet.domain_suffix = require("./domain_suffix");

},{"./free_email":"node_modules/faker/lib/locales/de/internet/free_email.js","./domain_suffix":"node_modules/faker/lib/locales/de/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/de/lorem/words.js":[function(require,module,exports) {
module["exports"] = [
  "alias",
  "consequatur",
  "aut",
  "perferendis",
  "sit",
  "voluptatem",
  "accusantium",
  "doloremque",
  "aperiam",
  "eaque",
  "ipsa",
  "quae",
  "ab",
  "illo",
  "inventore",
  "veritatis",
  "et",
  "quasi",
  "architecto",
  "beatae",
  "vitae",
  "dicta",
  "sunt",
  "explicabo",
  "aspernatur",
  "aut",
  "odit",
  "aut",
  "fugit",
  "sed",
  "quia",
  "consequuntur",
  "magni",
  "dolores",
  "eos",
  "qui",
  "ratione",
  "voluptatem",
  "sequi",
  "nesciunt",
  "neque",
  "dolorem",
  "ipsum",
  "quia",
  "dolor",
  "sit",
  "amet",
  "consectetur",
  "adipisci",
  "velit",
  "sed",
  "quia",
  "non",
  "numquam",
  "eius",
  "modi",
  "tempora",
  "incidunt",
  "ut",
  "labore",
  "et",
  "dolore",
  "magnam",
  "aliquam",
  "quaerat",
  "voluptatem",
  "ut",
  "enim",
  "ad",
  "minima",
  "veniam",
  "quis",
  "nostrum",
  "exercitationem",
  "ullam",
  "corporis",
  "nemo",
  "enim",
  "ipsam",
  "voluptatem",
  "quia",
  "voluptas",
  "sit",
  "suscipit",
  "laboriosam",
  "nisi",
  "ut",
  "aliquid",
  "ex",
  "ea",
  "commodi",
  "consequatur",
  "quis",
  "autem",
  "vel",
  "eum",
  "iure",
  "reprehenderit",
  "qui",
  "in",
  "ea",
  "voluptate",
  "velit",
  "esse",
  "quam",
  "nihil",
  "molestiae",
  "et",
  "iusto",
  "odio",
  "dignissimos",
  "ducimus",
  "qui",
  "blanditiis",
  "praesentium",
  "laudantium",
  "totam",
  "rem",
  "voluptatum",
  "deleniti",
  "atque",
  "corrupti",
  "quos",
  "dolores",
  "et",
  "quas",
  "molestias",
  "excepturi",
  "sint",
  "occaecati",
  "cupiditate",
  "non",
  "provident",
  "sed",
  "ut",
  "perspiciatis",
  "unde",
  "omnis",
  "iste",
  "natus",
  "error",
  "similique",
  "sunt",
  "in",
  "culpa",
  "qui",
  "officia",
  "deserunt",
  "mollitia",
  "animi",
  "id",
  "est",
  "laborum",
  "et",
  "dolorum",
  "fuga",
  "et",
  "harum",
  "quidem",
  "rerum",
  "facilis",
  "est",
  "et",
  "expedita",
  "distinctio",
  "nam",
  "libero",
  "tempore",
  "cum",
  "soluta",
  "nobis",
  "est",
  "eligendi",
  "optio",
  "cumque",
  "nihil",
  "impedit",
  "quo",
  "porro",
  "quisquam",
  "est",
  "qui",
  "minus",
  "id",
  "quod",
  "maxime",
  "placeat",
  "facere",
  "possimus",
  "omnis",
  "voluptas",
  "assumenda",
  "est",
  "omnis",
  "dolor",
  "repellendus",
  "temporibus",
  "autem",
  "quibusdam",
  "et",
  "aut",
  "consequatur",
  "vel",
  "illum",
  "qui",
  "dolorem",
  "eum",
  "fugiat",
  "quo",
  "voluptas",
  "nulla",
  "pariatur",
  "at",
  "vero",
  "eos",
  "et",
  "accusamus",
  "officiis",
  "debitis",
  "aut",
  "rerum",
  "necessitatibus",
  "saepe",
  "eveniet",
  "ut",
  "et",
  "voluptates",
  "repudiandae",
  "sint",
  "et",
  "molestiae",
  "non",
  "recusandae",
  "itaque",
  "earum",
  "rerum",
  "hic",
  "tenetur",
  "a",
  "sapiente",
  "delectus",
  "ut",
  "aut",
  "reiciendis",
  "voluptatibus",
  "maiores",
  "doloribus",
  "asperiores",
  "repellat"
];

},{}],"node_modules/faker/lib/locales/de/lorem/index.js":[function(require,module,exports) {
var lorem = {};
module['exports'] = lorem;
lorem.words = require("./words");

},{"./words":"node_modules/faker/lib/locales/de/lorem/words.js"}],"node_modules/faker/lib/locales/de/name/first_name.js":[function(require,module,exports) {
module["exports"] = [
  "Aaron",
  "Abdul",
  "Abdullah",
  "Adam",
  "Adrian",
  "Adriano",
  "Ahmad",
  "Ahmed",
  "Ahmet",
  "Alan",
  "Albert",
  "Alessandro",
  "Alessio",
  "Alex",
  "Alexander",
  "Alfred",
  "Ali",
  "Amar",
  "Amir",
  "Amon",
  "Andre",
  "Andreas",
  "Andrew",
  "Angelo",
  "Ansgar",
  "Anthony",
  "Anton",
  "Antonio",
  "Arda",
  "Arian",
  "Armin",
  "Arne",
  "Arno",
  "Arthur",
  "Artur",
  "Arved",
  "Arvid",
  "Ayman",
  "Baran",
  "Baris",
  "Bastian",
  "Batuhan",
  "Bela",
  "Ben",
  "Benedikt",
  "Benjamin",
  "Bennet",
  "Bennett",
  "Benno",
  "Bent",
  "Berat",
  "Berkay",
  "Bernd",
  "Bilal",
  "Bjarne",
  "Björn",
  "Bo",
  "Boris",
  "Brandon",
  "Brian",
  "Bruno",
  "Bryan",
  "Burak",
  "Calvin",
  "Can",
  "Carl",
  "Carlo",
  "Carlos",
  "Caspar",
  "Cedric",
  "Cedrik",
  "Cem",
  "Charlie",
  "Chris",
  "Christian",
  "Christiano",
  "Christoph",
  "Christopher",
  "Claas",
  "Clemens",
  "Colin",
  "Collin",
  "Conner",
  "Connor",
  "Constantin",
  "Corvin",
  "Curt",
  "Damian",
  "Damien",
  "Daniel",
  "Danilo",
  "Danny",
  "Darian",
  "Dario",
  "Darius",
  "Darren",
  "David",
  "Davide",
  "Davin",
  "Dean",
  "Deniz",
  "Dennis",
  "Denny",
  "Devin",
  "Diego",
  "Dion",
  "Domenic",
  "Domenik",
  "Dominic",
  "Dominik",
  "Dorian",
  "Dustin",
  "Dylan",
  "Ecrin",
  "Eddi",
  "Eddy",
  "Edgar",
  "Edwin",
  "Efe",
  "Ege",
  "Elia",
  "Eliah",
  "Elias",
  "Elijah",
  "Emanuel",
  "Emil",
  "Emilian",
  "Emilio",
  "Emir",
  "Emirhan",
  "Emre",
  "Enes",
  "Enno",
  "Enrico",
  "Eren",
  "Eric",
  "Erik",
  "Etienne",
  "Fabian",
  "Fabien",
  "Fabio",
  "Fabrice",
  "Falk",
  "Felix",
  "Ferdinand",
  "Fiete",
  "Filip",
  "Finlay",
  "Finley",
  "Finn",
  "Finnley",
  "Florian",
  "Francesco",
  "Franz",
  "Frederic",
  "Frederick",
  "Frederik",
  "Friedrich",
  "Fritz",
  "Furkan",
  "Fynn",
  "Gabriel",
  "Georg",
  "Gerrit",
  "Gian",
  "Gianluca",
  "Gino",
  "Giuliano",
  "Giuseppe",
  "Gregor",
  "Gustav",
  "Hagen",
  "Hamza",
  "Hannes",
  "Hanno",
  "Hans",
  "Hasan",
  "Hassan",
  "Hauke",
  "Hendrik",
  "Hennes",
  "Henning",
  "Henri",
  "Henrick",
  "Henrik",
  "Henry",
  "Hugo",
  "Hussein",
  "Ian",
  "Ibrahim",
  "Ilias",
  "Ilja",
  "Ilyas",
  "Immanuel",
  "Ismael",
  "Ismail",
  "Ivan",
  "Iven",
  "Jack",
  "Jacob",
  "Jaden",
  "Jakob",
  "Jamal",
  "James",
  "Jamie",
  "Jan",
  "Janek",
  "Janis",
  "Janne",
  "Jannek",
  "Jannes",
  "Jannik",
  "Jannis",
  "Jano",
  "Janosch",
  "Jared",
  "Jari",
  "Jarne",
  "Jarno",
  "Jaron",
  "Jason",
  "Jasper",
  "Jay",
  "Jayden",
  "Jayson",
  "Jean",
  "Jens",
  "Jeremias",
  "Jeremie",
  "Jeremy",
  "Jermaine",
  "Jerome",
  "Jesper",
  "Jesse",
  "Jim",
  "Jimmy",
  "Joe",
  "Joel",
  "Joey",
  "Johann",
  "Johannes",
  "John",
  "Johnny",
  "Jon",
  "Jona",
  "Jonah",
  "Jonas",
  "Jonathan",
  "Jonte",
  "Joost",
  "Jordan",
  "Joris",
  "Joscha",
  "Joschua",
  "Josef",
  "Joseph",
  "Josh",
  "Joshua",
  "Josua",
  "Juan",
  "Julian",
  "Julien",
  "Julius",
  "Juri",
  "Justin",
  "Justus",
  "Kaan",
  "Kai",
  "Kalle",
  "Karim",
  "Karl",
  "Karlo",
  "Kay",
  "Keanu",
  "Kenan",
  "Kenny",
  "Keno",
  "Kerem",
  "Kerim",
  "Kevin",
  "Kian",
  "Kilian",
  "Kim",
  "Kimi",
  "Kjell",
  "Klaas",
  "Klemens",
  "Konrad",
  "Konstantin",
  "Koray",
  "Korbinian",
  "Kurt",
  "Lars",
  "Lasse",
  "Laurence",
  "Laurens",
  "Laurenz",
  "Laurin",
  "Lean",
  "Leander",
  "Leandro",
  "Leif",
  "Len",
  "Lenn",
  "Lennard",
  "Lennart",
  "Lennert",
  "Lennie",
  "Lennox",
  "Lenny",
  "Leo",
  "Leon",
  "Leonard",
  "Leonardo",
  "Leonhard",
  "Leonidas",
  "Leopold",
  "Leroy",
  "Levent",
  "Levi",
  "Levin",
  "Lewin",
  "Lewis",
  "Liam",
  "Lian",
  "Lias",
  "Lino",
  "Linus",
  "Lio",
  "Lion",
  "Lionel",
  "Logan",
  "Lorenz",
  "Lorenzo",
  "Loris",
  "Louis",
  "Luan",
  "Luc",
  "Luca",
  "Lucas",
  "Lucian",
  "Lucien",
  "Ludwig",
  "Luis",
  "Luiz",
  "Luk",
  "Luka",
  "Lukas",
  "Luke",
  "Lutz",
  "Maddox",
  "Mads",
  "Magnus",
  "Maik",
  "Maksim",
  "Malik",
  "Malte",
  "Manuel",
  "Marc",
  "Marcel",
  "Marco",
  "Marcus",
  "Marek",
  "Marian",
  "Mario",
  "Marius",
  "Mark",
  "Marko",
  "Markus",
  "Marlo",
  "Marlon",
  "Marten",
  "Martin",
  "Marvin",
  "Marwin",
  "Mateo",
  "Mathis",
  "Matis",
  "Mats",
  "Matteo",
  "Mattes",
  "Matthias",
  "Matthis",
  "Matti",
  "Mattis",
  "Maurice",
  "Max",
  "Maxim",
  "Maximilian",
  "Mehmet",
  "Meik",
  "Melvin",
  "Merlin",
  "Mert",
  "Michael",
  "Michel",
  "Mick",
  "Miguel",
  "Mika",
  "Mikail",
  "Mike",
  "Milan",
  "Milo",
  "Mio",
  "Mirac",
  "Mirco",
  "Mirko",
  "Mohamed",
  "Mohammad",
  "Mohammed",
  "Moritz",
  "Morten",
  "Muhammed",
  "Murat",
  "Mustafa",
  "Nathan",
  "Nathanael",
  "Nelson",
  "Neo",
  "Nevio",
  "Nick",
  "Niclas",
  "Nico",
  "Nicolai",
  "Nicolas",
  "Niels",
  "Nikita",
  "Niklas",
  "Niko",
  "Nikolai",
  "Nikolas",
  "Nils",
  "Nino",
  "Noah",
  "Noel",
  "Norman",
  "Odin",
  "Oke",
  "Ole",
  "Oliver",
  "Omar",
  "Onur",
  "Oscar",
  "Oskar",
  "Pascal",
  "Patrice",
  "Patrick",
  "Paul",
  "Peer",
  "Pepe",
  "Peter",
  "Phil",
  "Philip",
  "Philipp",
  "Pierre",
  "Piet",
  "Pit",
  "Pius",
  "Quentin",
  "Quirin",
  "Rafael",
  "Raik",
  "Ramon",
  "Raphael",
  "Rasmus",
  "Raul",
  "Rayan",
  "René",
  "Ricardo",
  "Riccardo",
  "Richard",
  "Rick",
  "Rico",
  "Robert",
  "Robin",
  "Rocco",
  "Roman",
  "Romeo",
  "Ron",
  "Ruben",
  "Ryan",
  "Said",
  "Salih",
  "Sam",
  "Sami",
  "Sammy",
  "Samuel",
  "Sandro",
  "Santino",
  "Sascha",
  "Sean",
  "Sebastian",
  "Selim",
  "Semih",
  "Shawn",
  "Silas",
  "Simeon",
  "Simon",
  "Sinan",
  "Sky",
  "Stefan",
  "Steffen",
  "Stephan",
  "Steve",
  "Steven",
  "Sven",
  "Sönke",
  "Sören",
  "Taha",
  "Tamino",
  "Tammo",
  "Tarik",
  "Tayler",
  "Taylor",
  "Teo",
  "Theo",
  "Theodor",
  "Thies",
  "Thilo",
  "Thomas",
  "Thorben",
  "Thore",
  "Thorge",
  "Tiago",
  "Til",
  "Till",
  "Tillmann",
  "Tim",
  "Timm",
  "Timo",
  "Timon",
  "Timothy",
  "Tino",
  "Titus",
  "Tizian",
  "Tjark",
  "Tobias",
  "Tom",
  "Tommy",
  "Toni",
  "Tony",
  "Torben",
  "Tore",
  "Tristan",
  "Tyler",
  "Tyron",
  "Umut",
  "Valentin",
  "Valentino",
  "Veit",
  "Victor",
  "Viktor",
  "Vin",
  "Vincent",
  "Vito",
  "Vitus",
  "Wilhelm",
  "Willi",
  "William",
  "Willy",
  "Xaver",
  "Yannic",
  "Yannick",
  "Yannik",
  "Yannis",
  "Yasin",
  "Youssef",
  "Yunus",
  "Yusuf",
  "Yven",
  "Yves",
  "Ömer",
  "Aaliyah",
  "Abby",
  "Abigail",
  "Ada",
  "Adelina",
  "Adriana",
  "Aileen",
  "Aimee",
  "Alana",
  "Alea",
  "Alena",
  "Alessa",
  "Alessia",
  "Alexa",
  "Alexandra",
  "Alexia",
  "Alexis",
  "Aleyna",
  "Alia",
  "Alica",
  "Alice",
  "Alicia",
  "Alina",
  "Alisa",
  "Alisha",
  "Alissa",
  "Aliya",
  "Aliyah",
  "Allegra",
  "Alma",
  "Alyssa",
  "Amalia",
  "Amanda",
  "Amelia",
  "Amelie",
  "Amina",
  "Amira",
  "Amy",
  "Ana",
  "Anabel",
  "Anastasia",
  "Andrea",
  "Angela",
  "Angelina",
  "Angelique",
  "Anja",
  "Ann",
  "Anna",
  "Annabel",
  "Annabell",
  "Annabelle",
  "Annalena",
  "Anne",
  "Anneke",
  "Annelie",
  "Annemarie",
  "Anni",
  "Annie",
  "Annika",
  "Anny",
  "Anouk",
  "Antonia",
  "Arda",
  "Ariana",
  "Ariane",
  "Arwen",
  "Ashley",
  "Asya",
  "Aurelia",
  "Aurora",
  "Ava",
  "Ayleen",
  "Aylin",
  "Ayse",
  "Azra",
  "Betty",
  "Bianca",
  "Bianka",
  "Caitlin",
  "Cara",
  "Carina",
  "Carla",
  "Carlotta",
  "Carmen",
  "Carolin",
  "Carolina",
  "Caroline",
  "Cassandra",
  "Catharina",
  "Catrin",
  "Cecile",
  "Cecilia",
  "Celia",
  "Celina",
  "Celine",
  "Ceyda",
  "Ceylin",
  "Chantal",
  "Charleen",
  "Charlotta",
  "Charlotte",
  "Chayenne",
  "Cheyenne",
  "Chiara",
  "Christin",
  "Christina",
  "Cindy",
  "Claire",
  "Clara",
  "Clarissa",
  "Colleen",
  "Collien",
  "Cora",
  "Corinna",
  "Cosima",
  "Dana",
  "Daniela",
  "Daria",
  "Darleen",
  "Defne",
  "Delia",
  "Denise",
  "Diana",
  "Dilara",
  "Dina",
  "Dorothea",
  "Ecrin",
  "Eda",
  "Eileen",
  "Ela",
  "Elaine",
  "Elanur",
  "Elea",
  "Elena",
  "Eleni",
  "Eleonora",
  "Eliana",
  "Elif",
  "Elina",
  "Elisa",
  "Elisabeth",
  "Ella",
  "Ellen",
  "Elli",
  "Elly",
  "Elsa",
  "Emelie",
  "Emely",
  "Emilia",
  "Emilie",
  "Emily",
  "Emma",
  "Emmely",
  "Emmi",
  "Emmy",
  "Enie",
  "Enna",
  "Enya",
  "Esma",
  "Estelle",
  "Esther",
  "Eva",
  "Evelin",
  "Evelina",
  "Eveline",
  "Evelyn",
  "Fabienne",
  "Fatima",
  "Fatma",
  "Felicia",
  "Felicitas",
  "Felina",
  "Femke",
  "Fenja",
  "Fine",
  "Finia",
  "Finja",
  "Finnja",
  "Fiona",
  "Flora",
  "Florentine",
  "Francesca",
  "Franka",
  "Franziska",
  "Frederike",
  "Freya",
  "Frida",
  "Frieda",
  "Friederike",
  "Giada",
  "Gina",
  "Giulia",
  "Giuliana",
  "Greta",
  "Hailey",
  "Hana",
  "Hanna",
  "Hannah",
  "Heidi",
  "Helen",
  "Helena",
  "Helene",
  "Helin",
  "Henriette",
  "Henrike",
  "Hermine",
  "Ida",
  "Ilayda",
  "Imke",
  "Ina",
  "Ines",
  "Inga",
  "Inka",
  "Irem",
  "Isa",
  "Isabel",
  "Isabell",
  "Isabella",
  "Isabelle",
  "Ivonne",
  "Jacqueline",
  "Jamie",
  "Jamila",
  "Jana",
  "Jane",
  "Janin",
  "Janina",
  "Janine",
  "Janna",
  "Janne",
  "Jara",
  "Jasmin",
  "Jasmina",
  "Jasmine",
  "Jella",
  "Jenna",
  "Jennifer",
  "Jenny",
  "Jessica",
  "Jessy",
  "Jette",
  "Jil",
  "Jill",
  "Joana",
  "Joanna",
  "Joelina",
  "Joeline",
  "Joelle",
  "Johanna",
  "Joleen",
  "Jolie",
  "Jolien",
  "Jolin",
  "Jolina",
  "Joline",
  "Jona",
  "Jonah",
  "Jonna",
  "Josefin",
  "Josefine",
  "Josephin",
  "Josephine",
  "Josie",
  "Josy",
  "Joy",
  "Joyce",
  "Judith",
  "Judy",
  "Jule",
  "Julia",
  "Juliana",
  "Juliane",
  "Julie",
  "Julienne",
  "Julika",
  "Julina",
  "Juna",
  "Justine",
  "Kaja",
  "Karina",
  "Karla",
  "Karlotta",
  "Karolina",
  "Karoline",
  "Kassandra",
  "Katarina",
  "Katharina",
  "Kathrin",
  "Katja",
  "Katrin",
  "Kaya",
  "Kayra",
  "Kiana",
  "Kiara",
  "Kim",
  "Kimberley",
  "Kimberly",
  "Kira",
  "Klara",
  "Korinna",
  "Kristin",
  "Kyra",
  "Laila",
  "Lana",
  "Lara",
  "Larissa",
  "Laura",
  "Laureen",
  "Lavinia",
  "Lea",
  "Leah",
  "Leana",
  "Leandra",
  "Leann",
  "Lee",
  "Leila",
  "Lena",
  "Lene",
  "Leni",
  "Lenia",
  "Lenja",
  "Lenya",
  "Leona",
  "Leoni",
  "Leonie",
  "Leonora",
  "Leticia",
  "Letizia",
  "Levke",
  "Leyla",
  "Lia",
  "Liah",
  "Liana",
  "Lili",
  "Lilia",
  "Lilian",
  "Liliana",
  "Lilith",
  "Lilli",
  "Lillian",
  "Lilly",
  "Lily",
  "Lina",
  "Linda",
  "Lindsay",
  "Line",
  "Linn",
  "Linnea",
  "Lisa",
  "Lisann",
  "Lisanne",
  "Liv",
  "Livia",
  "Liz",
  "Lola",
  "Loreen",
  "Lorena",
  "Lotta",
  "Lotte",
  "Louisa",
  "Louise",
  "Luana",
  "Luca",
  "Lucia",
  "Lucie",
  "Lucienne",
  "Lucy",
  "Luisa",
  "Luise",
  "Luka",
  "Luna",
  "Luzie",
  "Lya",
  "Lydia",
  "Lyn",
  "Lynn",
  "Madeleine",
  "Madita",
  "Madleen",
  "Madlen",
  "Magdalena",
  "Maike",
  "Mailin",
  "Maira",
  "Maja",
  "Malena",
  "Malia",
  "Malin",
  "Malina",
  "Mandy",
  "Mara",
  "Marah",
  "Mareike",
  "Maren",
  "Maria",
  "Mariam",
  "Marie",
  "Marieke",
  "Mariella",
  "Marika",
  "Marina",
  "Marisa",
  "Marissa",
  "Marit",
  "Marla",
  "Marleen",
  "Marlen",
  "Marlena",
  "Marlene",
  "Marta",
  "Martha",
  "Mary",
  "Maryam",
  "Mathilda",
  "Mathilde",
  "Matilda",
  "Maxi",
  "Maxima",
  "Maxine",
  "Maya",
  "Mayra",
  "Medina",
  "Medine",
  "Meike",
  "Melanie",
  "Melek",
  "Melike",
  "Melina",
  "Melinda",
  "Melis",
  "Melisa",
  "Melissa",
  "Merle",
  "Merve",
  "Meryem",
  "Mette",
  "Mia",
  "Michaela",
  "Michelle",
  "Mieke",
  "Mila",
  "Milana",
  "Milena",
  "Milla",
  "Mina",
  "Mira",
  "Miray",
  "Miriam",
  "Mirja",
  "Mona",
  "Monique",
  "Nadine",
  "Nadja",
  "Naemi",
  "Nancy",
  "Naomi",
  "Natalia",
  "Natalie",
  "Nathalie",
  "Neele",
  "Nela",
  "Nele",
  "Nelli",
  "Nelly",
  "Nia",
  "Nicole",
  "Nika",
  "Nike",
  "Nikita",
  "Nila",
  "Nina",
  "Nisa",
  "Noemi",
  "Nora",
  "Olivia",
  "Patricia",
  "Patrizia",
  "Paula",
  "Paulina",
  "Pauline",
  "Penelope",
  "Philine",
  "Phoebe",
  "Pia",
  "Rahel",
  "Rania",
  "Rebecca",
  "Rebekka",
  "Riana",
  "Rieke",
  "Rike",
  "Romina",
  "Romy",
  "Ronja",
  "Rosa",
  "Rosalie",
  "Ruby",
  "Sabrina",
  "Sahra",
  "Sally",
  "Salome",
  "Samantha",
  "Samia",
  "Samira",
  "Sandra",
  "Sandy",
  "Sanja",
  "Saphira",
  "Sara",
  "Sarah",
  "Saskia",
  "Selin",
  "Selina",
  "Selma",
  "Sena",
  "Sidney",
  "Sienna",
  "Silja",
  "Sina",
  "Sinja",
  "Smilla",
  "Sofia",
  "Sofie",
  "Sonja",
  "Sophia",
  "Sophie",
  "Soraya",
  "Stefanie",
  "Stella",
  "Stephanie",
  "Stina",
  "Sude",
  "Summer",
  "Susanne",
  "Svea",
  "Svenja",
  "Sydney",
  "Tabea",
  "Talea",
  "Talia",
  "Tamara",
  "Tamia",
  "Tamina",
  "Tanja",
  "Tara",
  "Tarja",
  "Teresa",
  "Tessa",
  "Thalea",
  "Thalia",
  "Thea",
  "Theresa",
  "Tia",
  "Tina",
  "Tomke",
  "Tuana",
  "Valentina",
  "Valeria",
  "Valerie",
  "Vanessa",
  "Vera",
  "Veronika",
  "Victoria",
  "Viktoria",
  "Viola",
  "Vivian",
  "Vivien",
  "Vivienne",
  "Wibke",
  "Wiebke",
  "Xenia",
  "Yara",
  "Yaren",
  "Yasmin",
  "Ylvi",
  "Ylvie",
  "Yvonne",
  "Zara",
  "Zehra",
  "Zeynep",
  "Zoe",
  "Zoey",
  "Zoé"
];

},{}],"node_modules/faker/lib/locales/de/name/last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Abel",
  "Abicht",
  "Abraham",
  "Abramovic",
  "Abt",
  "Achilles",
  "Achkinadze",
  "Ackermann",
  "Adam",
  "Adams",
  "Ade",
  "Agostini",
  "Ahlke",
  "Ahrenberg",
  "Ahrens",
  "Aigner",
  "Albert",
  "Albrecht",
  "Alexa",
  "Alexander",
  "Alizadeh",
  "Allgeyer",
  "Amann",
  "Amberg",
  "Anding",
  "Anggreny",
  "Apitz",
  "Arendt",
  "Arens",
  "Arndt",
  "Aryee",
  "Aschenbroich",
  "Assmus",
  "Astafei",
  "Auer",
  "Axmann",
  "Baarck",
  "Bachmann",
  "Badane",
  "Bader",
  "Baganz",
  "Bahl",
  "Bak",
  "Balcer",
  "Balck",
  "Balkow",
  "Balnuweit",
  "Balzer",
  "Banse",
  "Barr",
  "Bartels",
  "Barth",
  "Barylla",
  "Baseda",
  "Battke",
  "Bauer",
  "Bauermeister",
  "Baumann",
  "Baumeister",
  "Bauschinger",
  "Bauschke",
  "Bayer",
  "Beavogui",
  "Beck",
  "Beckel",
  "Becker",
  "Beckmann",
  "Bedewitz",
  "Beele",
  "Beer",
  "Beggerow",
  "Beh",
  "Behr",
  "Behrenbruch",
  "Belz",
  "Bender",
  "Benecke",
  "Benner",
  "Benninger",
  "Benzing",
  "Berends",
  "Berger",
  "Berner",
  "Berning",
  "Bertenbreiter",
  "Best",
  "Bethke",
  "Betz",
  "Beushausen",
  "Beutelspacher",
  "Beyer",
  "Biba",
  "Bichler",
  "Bickel",
  "Biedermann",
  "Bieler",
  "Bielert",
  "Bienasch",
  "Bienias",
  "Biesenbach",
  "Bigdeli",
  "Birkemeyer",
  "Bittner",
  "Blank",
  "Blaschek",
  "Blassneck",
  "Bloch",
  "Blochwitz",
  "Blockhaus",
  "Blum",
  "Blume",
  "Bock",
  "Bode",
  "Bogdashin",
  "Bogenrieder",
  "Bohge",
  "Bolm",
  "Borgschulze",
  "Bork",
  "Bormann",
  "Bornscheuer",
  "Borrmann",
  "Borsch",
  "Boruschewski",
  "Bos",
  "Bosler",
  "Bourrouag",
  "Bouschen",
  "Boxhammer",
  "Boyde",
  "Bozsik",
  "Brand",
  "Brandenburg",
  "Brandis",
  "Brandt",
  "Brauer",
  "Braun",
  "Brehmer",
  "Breitenstein",
  "Bremer",
  "Bremser",
  "Brenner",
  "Brettschneider",
  "Breu",
  "Breuer",
  "Briesenick",
  "Bringmann",
  "Brinkmann",
  "Brix",
  "Broening",
  "Brosch",
  "Bruckmann",
  "Bruder",
  "Bruhns",
  "Brunner",
  "Bruns",
  "Bräutigam",
  "Brömme",
  "Brüggmann",
  "Buchholz",
  "Buchrucker",
  "Buder",
  "Bultmann",
  "Bunjes",
  "Burger",
  "Burghagen",
  "Burkhard",
  "Burkhardt",
  "Burmeister",
  "Busch",
  "Buschbaum",
  "Busemann",
  "Buss",
  "Busse",
  "Bussmann",
  "Byrd",
  "Bäcker",
  "Böhm",
  "Bönisch",
  "Börgeling",
  "Börner",
  "Böttner",
  "Büchele",
  "Bühler",
  "Büker",
  "Büngener",
  "Bürger",
  "Bürklein",
  "Büscher",
  "Büttner",
  "Camara",
  "Carlowitz",
  "Carlsohn",
  "Caspari",
  "Caspers",
  "Chapron",
  "Christ",
  "Cierpinski",
  "Clarius",
  "Cleem",
  "Cleve",
  "Co",
  "Conrad",
  "Cordes",
  "Cornelsen",
  "Cors",
  "Cotthardt",
  "Crews",
  "Cronjäger",
  "Crosskofp",
  "Da",
  "Dahm",
  "Dahmen",
  "Daimer",
  "Damaske",
  "Danneberg",
  "Danner",
  "Daub",
  "Daubner",
  "Daudrich",
  "Dauer",
  "Daum",
  "Dauth",
  "Dautzenberg",
  "De",
  "Decker",
  "Deckert",
  "Deerberg",
  "Dehmel",
  "Deja",
  "Delonge",
  "Demut",
  "Dengler",
  "Denner",
  "Denzinger",
  "Derr",
  "Dertmann",
  "Dethloff",
  "Deuschle",
  "Dieckmann",
  "Diedrich",
  "Diekmann",
  "Dienel",
  "Dies",
  "Dietrich",
  "Dietz",
  "Dietzsch",
  "Diezel",
  "Dilla",
  "Dingelstedt",
  "Dippl",
  "Dittmann",
  "Dittmar",
  "Dittmer",
  "Dix",
  "Dobbrunz",
  "Dobler",
  "Dohring",
  "Dolch",
  "Dold",
  "Dombrowski",
  "Donie",
  "Doskoczynski",
  "Dragu",
  "Drechsler",
  "Drees",
  "Dreher",
  "Dreier",
  "Dreissigacker",
  "Dressler",
  "Drews",
  "Duma",
  "Dutkiewicz",
  "Dyett",
  "Dylus",
  "Dächert",
  "Döbel",
  "Döring",
  "Dörner",
  "Dörre",
  "Dück",
  "Eberhard",
  "Eberhardt",
  "Ecker",
  "Eckhardt",
  "Edorh",
  "Effler",
  "Eggenmueller",
  "Ehm",
  "Ehmann",
  "Ehrig",
  "Eich",
  "Eichmann",
  "Eifert",
  "Einert",
  "Eisenlauer",
  "Ekpo",
  "Elbe",
  "Eleyth",
  "Elss",
  "Emert",
  "Emmelmann",
  "Ender",
  "Engel",
  "Engelen",
  "Engelmann",
  "Eplinius",
  "Erdmann",
  "Erhardt",
  "Erlei",
  "Erm",
  "Ernst",
  "Ertl",
  "Erwes",
  "Esenwein",
  "Esser",
  "Evers",
  "Everts",
  "Ewald",
  "Fahner",
  "Faller",
  "Falter",
  "Farber",
  "Fassbender",
  "Faulhaber",
  "Fehrig",
  "Feld",
  "Felke",
  "Feller",
  "Fenner",
  "Fenske",
  "Feuerbach",
  "Fietz",
  "Figl",
  "Figura",
  "Filipowski",
  "Filsinger",
  "Fincke",
  "Fink",
  "Finke",
  "Fischer",
  "Fitschen",
  "Fleischer",
  "Fleischmann",
  "Floder",
  "Florczak",
  "Flore",
  "Flottmann",
  "Forkel",
  "Forst",
  "Frahmeke",
  "Frank",
  "Franke",
  "Franta",
  "Frantz",
  "Franz",
  "Franzis",
  "Franzmann",
  "Frauen",
  "Frauendorf",
  "Freigang",
  "Freimann",
  "Freimuth",
  "Freisen",
  "Frenzel",
  "Frey",
  "Fricke",
  "Fried",
  "Friedek",
  "Friedenberg",
  "Friedmann",
  "Friedrich",
  "Friess",
  "Frisch",
  "Frohn",
  "Frosch",
  "Fuchs",
  "Fuhlbrügge",
  "Fusenig",
  "Fust",
  "Förster",
  "Gaba",
  "Gabius",
  "Gabler",
  "Gadschiew",
  "Gakstädter",
  "Galander",
  "Gamlin",
  "Gamper",
  "Gangnus",
  "Ganzmann",
  "Garatva",
  "Gast",
  "Gastel",
  "Gatzka",
  "Gauder",
  "Gebhardt",
  "Geese",
  "Gehre",
  "Gehrig",
  "Gehring",
  "Gehrke",
  "Geiger",
  "Geisler",
  "Geissler",
  "Gelling",
  "Gens",
  "Gerbennow",
  "Gerdel",
  "Gerhardt",
  "Gerschler",
  "Gerson",
  "Gesell",
  "Geyer",
  "Ghirmai",
  "Ghosh",
  "Giehl",
  "Gierisch",
  "Giesa",
  "Giesche",
  "Gilde",
  "Glatting",
  "Goebel",
  "Goedicke",
  "Goldbeck",
  "Goldfuss",
  "Goldkamp",
  "Goldkühle",
  "Goller",
  "Golling",
  "Gollnow",
  "Golomski",
  "Gombert",
  "Gotthardt",
  "Gottschalk",
  "Gotz",
  "Goy",
  "Gradzki",
  "Graf",
  "Grams",
  "Grasse",
  "Gratzky",
  "Grau",
  "Greb",
  "Green",
  "Greger",
  "Greithanner",
  "Greschner",
  "Griem",
  "Griese",
  "Grimm",
  "Gromisch",
  "Gross",
  "Grosser",
  "Grossheim",
  "Grosskopf",
  "Grothaus",
  "Grothkopp",
  "Grotke",
  "Grube",
  "Gruber",
  "Grundmann",
  "Gruning",
  "Gruszecki",
  "Gröss",
  "Grötzinger",
  "Grün",
  "Grüner",
  "Gummelt",
  "Gunkel",
  "Gunther",
  "Gutjahr",
  "Gutowicz",
  "Gutschank",
  "Göbel",
  "Göckeritz",
  "Göhler",
  "Görlich",
  "Görmer",
  "Götz",
  "Götzelmann",
  "Güldemeister",
  "Günther",
  "Günz",
  "Gürbig",
  "Haack",
  "Haaf",
  "Habel",
  "Hache",
  "Hackbusch",
  "Hackelbusch",
  "Hadfield",
  "Hadwich",
  "Haferkamp",
  "Hahn",
  "Hajek",
  "Hallmann",
  "Hamann",
  "Hanenberger",
  "Hannecker",
  "Hanniske",
  "Hansen",
  "Hardy",
  "Hargasser",
  "Harms",
  "Harnapp",
  "Harter",
  "Harting",
  "Hartlieb",
  "Hartmann",
  "Hartwig",
  "Hartz",
  "Haschke",
  "Hasler",
  "Hasse",
  "Hassfeld",
  "Haug",
  "Hauke",
  "Haupt",
  "Haverney",
  "Heberstreit",
  "Hechler",
  "Hecht",
  "Heck",
  "Hedermann",
  "Hehl",
  "Heidelmann",
  "Heidler",
  "Heinemann",
  "Heinig",
  "Heinke",
  "Heinrich",
  "Heinze",
  "Heiser",
  "Heist",
  "Hellmann",
  "Helm",
  "Helmke",
  "Helpling",
  "Hengmith",
  "Henkel",
  "Hennes",
  "Henry",
  "Hense",
  "Hensel",
  "Hentel",
  "Hentschel",
  "Hentschke",
  "Hepperle",
  "Herberger",
  "Herbrand",
  "Hering",
  "Hermann",
  "Hermecke",
  "Herms",
  "Herold",
  "Herrmann",
  "Herschmann",
  "Hertel",
  "Herweg",
  "Herwig",
  "Herzenberg",
  "Hess",
  "Hesse",
  "Hessek",
  "Hessler",
  "Hetzler",
  "Heuck",
  "Heydemüller",
  "Hiebl",
  "Hildebrand",
  "Hildenbrand",
  "Hilgendorf",
  "Hillard",
  "Hiller",
  "Hingsen",
  "Hingst",
  "Hinrichs",
  "Hirsch",
  "Hirschberg",
  "Hirt",
  "Hodea",
  "Hoffman",
  "Hoffmann",
  "Hofmann",
  "Hohenberger",
  "Hohl",
  "Hohn",
  "Hohnheiser",
  "Hold",
  "Holdt",
  "Holinski",
  "Holl",
  "Holtfreter",
  "Holz",
  "Holzdeppe",
  "Holzner",
  "Hommel",
  "Honz",
  "Hooss",
  "Hoppe",
  "Horak",
  "Horn",
  "Horna",
  "Hornung",
  "Hort",
  "Howard",
  "Huber",
  "Huckestein",
  "Hudak",
  "Huebel",
  "Hugo",
  "Huhn",
  "Hujo",
  "Huke",
  "Huls",
  "Humbert",
  "Huneke",
  "Huth",
  "Häber",
  "Häfner",
  "Höcke",
  "Höft",
  "Höhne",
  "Hönig",
  "Hördt",
  "Hübenbecker",
  "Hübl",
  "Hübner",
  "Hügel",
  "Hüttcher",
  "Hütter",
  "Ibe",
  "Ihly",
  "Illing",
  "Isak",
  "Isekenmeier",
  "Itt",
  "Jacob",
  "Jacobs",
  "Jagusch",
  "Jahn",
  "Jahnke",
  "Jakobs",
  "Jakubczyk",
  "Jambor",
  "Jamrozy",
  "Jander",
  "Janich",
  "Janke",
  "Jansen",
  "Jarets",
  "Jaros",
  "Jasinski",
  "Jasper",
  "Jegorov",
  "Jellinghaus",
  "Jeorga",
  "Jerschabek",
  "Jess",
  "John",
  "Jonas",
  "Jossa",
  "Jucken",
  "Jung",
  "Jungbluth",
  "Jungton",
  "Just",
  "Jürgens",
  "Kaczmarek",
  "Kaesmacher",
  "Kahl",
  "Kahlert",
  "Kahles",
  "Kahlmeyer",
  "Kaiser",
  "Kalinowski",
  "Kallabis",
  "Kallensee",
  "Kampf",
  "Kampschulte",
  "Kappe",
  "Kappler",
  "Karhoff",
  "Karrass",
  "Karst",
  "Karsten",
  "Karus",
  "Kass",
  "Kasten",
  "Kastner",
  "Katzinski",
  "Kaufmann",
  "Kaul",
  "Kausemann",
  "Kawohl",
  "Kazmarek",
  "Kedzierski",
  "Keil",
  "Keiner",
  "Keller",
  "Kelm",
  "Kempe",
  "Kemper",
  "Kempter",
  "Kerl",
  "Kern",
  "Kesselring",
  "Kesselschläger",
  "Kette",
  "Kettenis",
  "Keutel",
  "Kick",
  "Kiessling",
  "Kinadeter",
  "Kinzel",
  "Kinzy",
  "Kirch",
  "Kirst",
  "Kisabaka",
  "Klaas",
  "Klabuhn",
  "Klapper",
  "Klauder",
  "Klaus",
  "Kleeberg",
  "Kleiber",
  "Klein",
  "Kleinert",
  "Kleininger",
  "Kleinmann",
  "Kleinsteuber",
  "Kleiss",
  "Klemme",
  "Klimczak",
  "Klinger",
  "Klink",
  "Klopsch",
  "Klose",
  "Kloss",
  "Kluge",
  "Kluwe",
  "Knabe",
  "Kneifel",
  "Knetsch",
  "Knies",
  "Knippel",
  "Knobel",
  "Knoblich",
  "Knoll",
  "Knorr",
  "Knorscheidt",
  "Knut",
  "Kobs",
  "Koch",
  "Kochan",
  "Kock",
  "Koczulla",
  "Koderisch",
  "Koehl",
  "Koehler",
  "Koenig",
  "Koester",
  "Kofferschlager",
  "Koha",
  "Kohle",
  "Kohlmann",
  "Kohnle",
  "Kohrt",
  "Koj",
  "Kolb",
  "Koleiski",
  "Kolokas",
  "Komoll",
  "Konieczny",
  "Konig",
  "Konow",
  "Konya",
  "Koob",
  "Kopf",
  "Kosenkow",
  "Koster",
  "Koszewski",
  "Koubaa",
  "Kovacs",
  "Kowalick",
  "Kowalinski",
  "Kozakiewicz",
  "Krabbe",
  "Kraft",
  "Kral",
  "Kramer",
  "Krauel",
  "Kraus",
  "Krause",
  "Krauspe",
  "Kreb",
  "Krebs",
  "Kreissig",
  "Kresse",
  "Kreutz",
  "Krieger",
  "Krippner",
  "Krodinger",
  "Krohn",
  "Krol",
  "Kron",
  "Krueger",
  "Krug",
  "Kruger",
  "Krull",
  "Kruschinski",
  "Krämer",
  "Kröckert",
  "Kröger",
  "Krüger",
  "Kubera",
  "Kufahl",
  "Kuhlee",
  "Kuhnen",
  "Kulimann",
  "Kulma",
  "Kumbernuss",
  "Kummle",
  "Kunz",
  "Kupfer",
  "Kupprion",
  "Kuprion",
  "Kurnicki",
  "Kurrat",
  "Kurschilgen",
  "Kuschewitz",
  "Kuschmann",
  "Kuske",
  "Kustermann",
  "Kutscherauer",
  "Kutzner",
  "Kwadwo",
  "Kähler",
  "Käther",
  "Köhler",
  "Köhrbrück",
  "Köhre",
  "Kölotzei",
  "König",
  "Köpernick",
  "Köseoglu",
  "Kúhn",
  "Kúhnert",
  "Kühn",
  "Kühnel",
  "Kühnemund",
  "Kühnert",
  "Kühnke",
  "Küsters",
  "Küter",
  "Laack",
  "Lack",
  "Ladewig",
  "Lakomy",
  "Lammert",
  "Lamos",
  "Landmann",
  "Lang",
  "Lange",
  "Langfeld",
  "Langhirt",
  "Lanig",
  "Lauckner",
  "Lauinger",
  "Laurén",
  "Lausecker",
  "Laux",
  "Laws",
  "Lax",
  "Leberer",
  "Lehmann",
  "Lehner",
  "Leibold",
  "Leide",
  "Leimbach",
  "Leipold",
  "Leist",
  "Leiter",
  "Leiteritz",
  "Leitheim",
  "Leiwesmeier",
  "Lenfers",
  "Lenk",
  "Lenz",
  "Lenzen",
  "Leo",
  "Lepthin",
  "Lesch",
  "Leschnik",
  "Letzelter",
  "Lewin",
  "Lewke",
  "Leyckes",
  "Lg",
  "Lichtenfeld",
  "Lichtenhagen",
  "Lichtl",
  "Liebach",
  "Liebe",
  "Liebich",
  "Liebold",
  "Lieder",
  "Lienshöft",
  "Linden",
  "Lindenberg",
  "Lindenmayer",
  "Lindner",
  "Linke",
  "Linnenbaum",
  "Lippe",
  "Lipske",
  "Lipus",
  "Lischka",
  "Lobinger",
  "Logsch",
  "Lohmann",
  "Lohre",
  "Lohse",
  "Lokar",
  "Loogen",
  "Lorenz",
  "Losch",
  "Loska",
  "Lott",
  "Loy",
  "Lubina",
  "Ludolf",
  "Lufft",
  "Lukoschek",
  "Lutje",
  "Lutz",
  "Löser",
  "Löwa",
  "Lübke",
  "Maak",
  "Maczey",
  "Madetzky",
  "Madubuko",
  "Mai",
  "Maier",
  "Maisch",
  "Malek",
  "Malkus",
  "Mallmann",
  "Malucha",
  "Manns",
  "Manz",
  "Marahrens",
  "Marchewski",
  "Margis",
  "Markowski",
  "Marl",
  "Marner",
  "Marquart",
  "Marschek",
  "Martel",
  "Marten",
  "Martin",
  "Marx",
  "Marxen",
  "Mathes",
  "Mathies",
  "Mathiszik",
  "Matschke",
  "Mattern",
  "Matthes",
  "Matula",
  "Mau",
  "Maurer",
  "Mauroff",
  "May",
  "Maybach",
  "Mayer",
  "Mebold",
  "Mehl",
  "Mehlhorn",
  "Mehlorn",
  "Meier",
  "Meisch",
  "Meissner",
  "Meloni",
  "Melzer",
  "Menga",
  "Menne",
  "Mensah",
  "Mensing",
  "Merkel",
  "Merseburg",
  "Mertens",
  "Mesloh",
  "Metzger",
  "Metzner",
  "Mewes",
  "Meyer",
  "Michallek",
  "Michel",
  "Mielke",
  "Mikitenko",
  "Milde",
  "Minah",
  "Mintzlaff",
  "Mockenhaupt",
  "Moede",
  "Moedl",
  "Moeller",
  "Moguenara",
  "Mohr",
  "Mohrhard",
  "Molitor",
  "Moll",
  "Moller",
  "Molzan",
  "Montag",
  "Moormann",
  "Mordhorst",
  "Morgenstern",
  "Morhelfer",
  "Moritz",
  "Moser",
  "Motchebon",
  "Motzenbbäcker",
  "Mrugalla",
  "Muckenthaler",
  "Mues",
  "Muller",
  "Mulrain",
  "Mächtig",
  "Mäder",
  "Möcks",
  "Mögenburg",
  "Möhsner",
  "Möldner",
  "Möllenbeck",
  "Möller",
  "Möllinger",
  "Mörsch",
  "Mühleis",
  "Müller",
  "Münch",
  "Nabein",
  "Nabow",
  "Nagel",
  "Nannen",
  "Nastvogel",
  "Nau",
  "Naubert",
  "Naumann",
  "Ne",
  "Neimke",
  "Nerius",
  "Neubauer",
  "Neubert",
  "Neuendorf",
  "Neumair",
  "Neumann",
  "Neupert",
  "Neurohr",
  "Neuschwander",
  "Newton",
  "Ney",
  "Nicolay",
  "Niedermeier",
  "Nieklauson",
  "Niklaus",
  "Nitzsche",
  "Noack",
  "Nodler",
  "Nolte",
  "Normann",
  "Norris",
  "Northoff",
  "Nowak",
  "Nussbeck",
  "Nwachukwu",
  "Nytra",
  "Nöh",
  "Oberem",
  "Obergföll",
  "Obermaier",
  "Ochs",
  "Oeser",
  "Olbrich",
  "Onnen",
  "Ophey",
  "Oppong",
  "Orth",
  "Orthmann",
  "Oschkenat",
  "Osei",
  "Osenberg",
  "Ostendarp",
  "Ostwald",
  "Otte",
  "Otto",
  "Paesler",
  "Pajonk",
  "Pallentin",
  "Panzig",
  "Paschke",
  "Patzwahl",
  "Paukner",
  "Peselman",
  "Peter",
  "Peters",
  "Petzold",
  "Pfeiffer",
  "Pfennig",
  "Pfersich",
  "Pfingsten",
  "Pflieger",
  "Pflügner",
  "Philipp",
  "Pichlmaier",
  "Piesker",
  "Pietsch",
  "Pingpank",
  "Pinnock",
  "Pippig",
  "Pitschugin",
  "Plank",
  "Plass",
  "Platzer",
  "Plauk",
  "Plautz",
  "Pletsch",
  "Plotzitzka",
  "Poehn",
  "Poeschl",
  "Pogorzelski",
  "Pohl",
  "Pohland",
  "Pohle",
  "Polifka",
  "Polizzi",
  "Pollmächer",
  "Pomp",
  "Ponitzsch",
  "Porsche",
  "Porth",
  "Poschmann",
  "Poser",
  "Pottel",
  "Prah",
  "Prange",
  "Prediger",
  "Pressler",
  "Preuk",
  "Preuss",
  "Prey",
  "Priemer",
  "Proske",
  "Pusch",
  "Pöche",
  "Pöge",
  "Raabe",
  "Rabenstein",
  "Rach",
  "Radtke",
  "Rahn",
  "Ranftl",
  "Rangen",
  "Ranz",
  "Rapp",
  "Rath",
  "Rau",
  "Raubuch",
  "Raukuc",
  "Rautenkranz",
  "Rehwagen",
  "Reiber",
  "Reichardt",
  "Reichel",
  "Reichling",
  "Reif",
  "Reifenrath",
  "Reimann",
  "Reinberg",
  "Reinelt",
  "Reinhardt",
  "Reinke",
  "Reitze",
  "Renk",
  "Rentz",
  "Renz",
  "Reppin",
  "Restle",
  "Restorff",
  "Retzke",
  "Reuber",
  "Reumann",
  "Reus",
  "Reuss",
  "Reusse",
  "Rheder",
  "Rhoden",
  "Richards",
  "Richter",
  "Riedel",
  "Riediger",
  "Rieger",
  "Riekmann",
  "Riepl",
  "Riermeier",
  "Riester",
  "Riethmüller",
  "Rietmüller",
  "Rietscher",
  "Ringel",
  "Ringer",
  "Rink",
  "Ripken",
  "Ritosek",
  "Ritschel",
  "Ritter",
  "Rittweg",
  "Ritz",
  "Roba",
  "Rockmeier",
  "Rodehau",
  "Rodowski",
  "Roecker",
  "Roggatz",
  "Rohländer",
  "Rohrer",
  "Rokossa",
  "Roleder",
  "Roloff",
  "Roos",
  "Rosbach",
  "Roschinsky",
  "Rose",
  "Rosenauer",
  "Rosenbauer",
  "Rosenthal",
  "Rosksch",
  "Rossberg",
  "Rossler",
  "Roth",
  "Rother",
  "Ruch",
  "Ruckdeschel",
  "Rumpf",
  "Rupprecht",
  "Ruth",
  "Ryjikh",
  "Ryzih",
  "Rädler",
  "Räntsch",
  "Rödiger",
  "Röse",
  "Röttger",
  "Rücker",
  "Rüdiger",
  "Rüter",
  "Sachse",
  "Sack",
  "Saflanis",
  "Sagafe",
  "Sagonas",
  "Sahner",
  "Saile",
  "Sailer",
  "Salow",
  "Salzer",
  "Salzmann",
  "Sammert",
  "Sander",
  "Sarvari",
  "Sattelmaier",
  "Sauer",
  "Sauerland",
  "Saumweber",
  "Savoia",
  "Scc",
  "Schacht",
  "Schaefer",
  "Schaffarzik",
  "Schahbasian",
  "Scharf",
  "Schedler",
  "Scheer",
  "Schelk",
  "Schellenbeck",
  "Schembera",
  "Schenk",
  "Scherbarth",
  "Scherer",
  "Schersing",
  "Scherz",
  "Scheurer",
  "Scheuring",
  "Scheytt",
  "Schielke",
  "Schieskow",
  "Schildhauer",
  "Schilling",
  "Schima",
  "Schimmer",
  "Schindzielorz",
  "Schirmer",
  "Schirrmeister",
  "Schlachter",
  "Schlangen",
  "Schlawitz",
  "Schlechtweg",
  "Schley",
  "Schlicht",
  "Schlitzer",
  "Schmalzle",
  "Schmid",
  "Schmidt",
  "Schmidtchen",
  "Schmitt",
  "Schmitz",
  "Schmuhl",
  "Schneider",
  "Schnelting",
  "Schnieder",
  "Schniedermeier",
  "Schnürer",
  "Schoberg",
  "Scholz",
  "Schonberg",
  "Schondelmaier",
  "Schorr",
  "Schott",
  "Schottmann",
  "Schouren",
  "Schrader",
  "Schramm",
  "Schreck",
  "Schreiber",
  "Schreiner",
  "Schreiter",
  "Schroder",
  "Schröder",
  "Schuermann",
  "Schuff",
  "Schuhaj",
  "Schuldt",
  "Schult",
  "Schulte",
  "Schultz",
  "Schultze",
  "Schulz",
  "Schulze",
  "Schumacher",
  "Schumann",
  "Schupp",
  "Schuri",
  "Schuster",
  "Schwab",
  "Schwalm",
  "Schwanbeck",
  "Schwandke",
  "Schwanitz",
  "Schwarthoff",
  "Schwartz",
  "Schwarz",
  "Schwarzer",
  "Schwarzkopf",
  "Schwarzmeier",
  "Schwatlo",
  "Schweisfurth",
  "Schwennen",
  "Schwerdtner",
  "Schwidde",
  "Schwirkschlies",
  "Schwuchow",
  "Schäfer",
  "Schäffel",
  "Schäffer",
  "Schäning",
  "Schöckel",
  "Schönball",
  "Schönbeck",
  "Schönberg",
  "Schönebeck",
  "Schönenberger",
  "Schönfeld",
  "Schönherr",
  "Schönlebe",
  "Schötz",
  "Schüler",
  "Schüppel",
  "Schütz",
  "Schütze",
  "Seeger",
  "Seelig",
  "Sehls",
  "Seibold",
  "Seidel",
  "Seiders",
  "Seigel",
  "Seiler",
  "Seitz",
  "Semisch",
  "Senkel",
  "Sewald",
  "Siebel",
  "Siebert",
  "Siegling",
  "Sielemann",
  "Siemon",
  "Siener",
  "Sievers",
  "Siewert",
  "Sihler",
  "Sillah",
  "Simon",
  "Sinnhuber",
  "Sischka",
  "Skibicki",
  "Sladek",
  "Slotta",
  "Smieja",
  "Soboll",
  "Sokolowski",
  "Soller",
  "Sollner",
  "Sommer",
  "Somssich",
  "Sonn",
  "Sonnabend",
  "Spahn",
  "Spank",
  "Spelmeyer",
  "Spiegelburg",
  "Spielvogel",
  "Spinner",
  "Spitzmüller",
  "Splinter",
  "Sporrer",
  "Sprenger",
  "Spöttel",
  "Stahl",
  "Stang",
  "Stanger",
  "Stauss",
  "Steding",
  "Steffen",
  "Steffny",
  "Steidl",
  "Steigauf",
  "Stein",
  "Steinecke",
  "Steinert",
  "Steinkamp",
  "Steinmetz",
  "Stelkens",
  "Stengel",
  "Stengl",
  "Stenzel",
  "Stepanov",
  "Stephan",
  "Stern",
  "Steuk",
  "Stief",
  "Stifel",
  "Stoll",
  "Stolle",
  "Stolz",
  "Storl",
  "Storp",
  "Stoutjesdijk",
  "Stratmann",
  "Straub",
  "Strausa",
  "Streck",
  "Streese",
  "Strege",
  "Streit",
  "Streller",
  "Strieder",
  "Striezel",
  "Strogies",
  "Strohschank",
  "Strunz",
  "Strutz",
  "Stube",
  "Stöckert",
  "Stöppler",
  "Stöwer",
  "Stürmer",
  "Suffa",
  "Sujew",
  "Sussmann",
  "Suthe",
  "Sutschet",
  "Swillims",
  "Szendrei",
  "Sören",
  "Sürth",
  "Tafelmeier",
  "Tang",
  "Tasche",
  "Taufratshofer",
  "Tegethof",
  "Teichmann",
  "Tepper",
  "Terheiden",
  "Terlecki",
  "Teufel",
  "Theele",
  "Thieke",
  "Thimm",
  "Thiomas",
  "Thomas",
  "Thriene",
  "Thränhardt",
  "Thust",
  "Thyssen",
  "Thöne",
  "Tidow",
  "Tiedtke",
  "Tietze",
  "Tilgner",
  "Tillack",
  "Timmermann",
  "Tischler",
  "Tischmann",
  "Tittman",
  "Tivontschik",
  "Tonat",
  "Tonn",
  "Trampeli",
  "Trauth",
  "Trautmann",
  "Travan",
  "Treff",
  "Tremmel",
  "Tress",
  "Tsamonikian",
  "Tschiers",
  "Tschirch",
  "Tuch",
  "Tucholke",
  "Tudow",
  "Tuschmo",
  "Tächl",
  "Többen",
  "Töpfer",
  "Uhlemann",
  "Uhlig",
  "Uhrig",
  "Uibel",
  "Uliczka",
  "Ullmann",
  "Ullrich",
  "Umbach",
  "Umlauft",
  "Umminger",
  "Unger",
  "Unterpaintner",
  "Urban",
  "Urbaniak",
  "Urbansky",
  "Urhig",
  "Vahlensieck",
  "Van",
  "Vangermain",
  "Vater",
  "Venghaus",
  "Verniest",
  "Verzi",
  "Vey",
  "Viellehner",
  "Vieweg",
  "Voelkel",
  "Vogel",
  "Vogelgsang",
  "Vogt",
  "Voigt",
  "Vokuhl",
  "Volk",
  "Volker",
  "Volkmann",
  "Von",
  "Vona",
  "Vontein",
  "Wachenbrunner",
  "Wachtel",
  "Wagner",
  "Waibel",
  "Wakan",
  "Waldmann",
  "Wallner",
  "Wallstab",
  "Walter",
  "Walther",
  "Walton",
  "Walz",
  "Wanner",
  "Wartenberg",
  "Waschbüsch",
  "Wassilew",
  "Wassiluk",
  "Weber",
  "Wehrsen",
  "Weidlich",
  "Weidner",
  "Weigel",
  "Weight",
  "Weiler",
  "Weimer",
  "Weis",
  "Weiss",
  "Weller",
  "Welsch",
  "Welz",
  "Welzel",
  "Weniger",
  "Wenk",
  "Werle",
  "Werner",
  "Werrmann",
  "Wessel",
  "Wessinghage",
  "Weyel",
  "Wezel",
  "Wichmann",
  "Wickert",
  "Wiebe",
  "Wiechmann",
  "Wiegelmann",
  "Wierig",
  "Wiese",
  "Wieser",
  "Wilhelm",
  "Wilky",
  "Will",
  "Willwacher",
  "Wilts",
  "Wimmer",
  "Winkelmann",
  "Winkler",
  "Winter",
  "Wischek",
  "Wischer",
  "Wissing",
  "Wittich",
  "Wittl",
  "Wolf",
  "Wolfarth",
  "Wolff",
  "Wollenberg",
  "Wollmann",
  "Woytkowska",
  "Wujak",
  "Wurm",
  "Wyludda",
  "Wölpert",
  "Wöschler",
  "Wühn",
  "Wünsche",
  "Zach",
  "Zaczkiewicz",
  "Zahn",
  "Zaituc",
  "Zandt",
  "Zanner",
  "Zapletal",
  "Zauber",
  "Zeidler",
  "Zekl",
  "Zender",
  "Zeuch",
  "Zeyen",
  "Zeyhle",
  "Ziegler",
  "Zimanyi",
  "Zimmer",
  "Zimmermann",
  "Zinser",
  "Zintl",
  "Zipp",
  "Zipse",
  "Zschunke",
  "Zuber",
  "Zwiener",
  "Zümsande",
  "Östringer",
  "Überacker"
];

},{}],"node_modules/faker/lib/locales/de/name/prefix.js":[function(require,module,exports) {
module["exports"] = [
  "Hr.",
  "Fr.",
  "Dr.",
  "Prof. Dr."
];

},{}],"node_modules/faker/lib/locales/de/name/nobility_title_prefix.js":[function(require,module,exports) {
module["exports"] = [
  "zu",
  "von",
  "vom",
  "von der"
];

},{}],"node_modules/faker/lib/locales/de/name/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{prefix} #{first_name} #{last_name}",
  "#{first_name} #{nobility_title_prefix} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}"
];

},{}],"node_modules/faker/lib/locales/de/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");
name.prefix = require("./prefix");
name.nobility_title_prefix = require("./nobility_title_prefix");
name.name = require("./name");

},{"./first_name":"node_modules/faker/lib/locales/de/name/first_name.js","./last_name":"node_modules/faker/lib/locales/de/name/last_name.js","./prefix":"node_modules/faker/lib/locales/de/name/prefix.js","./nobility_title_prefix":"node_modules/faker/lib/locales/de/name/nobility_title_prefix.js","./name":"node_modules/faker/lib/locales/de/name/name.js"}],"node_modules/faker/lib/locales/de/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "(0###) #########",
  "(0####) #######",
  "+49-###-#######",
  "+49-####-########"
];

},{}],"node_modules/faker/lib/locales/de/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/de/phone_number/formats.js"}],"node_modules/faker/lib/locales/de/cell_phone/formats.js":[function(require,module,exports) {
module["exports"] = [
  "+49-1##-#######",
  "+49-1###-########"
];

},{}],"node_modules/faker/lib/locales/de/cell_phone/index.js":[function(require,module,exports) {
var cell_phone = {};
module['exports'] = cell_phone;
cell_phone.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/de/cell_phone/formats.js"}],"node_modules/faker/lib/locales/de/index.js":[function(require,module,exports) {
var de = {};
module['exports'] = de;
de.title = "German";
de.address = require("./address");
de.company = require("./company");
de.internet = require("./internet");
de.lorem = require("./lorem");
de.name = require("./name");
de.phone_number = require("./phone_number");
de.cell_phone = require("./cell_phone");
},{"./address":"node_modules/faker/lib/locales/de/address/index.js","./company":"node_modules/faker/lib/locales/de/company/index.js","./internet":"node_modules/faker/lib/locales/de/internet/index.js","./lorem":"node_modules/faker/lib/locales/de/lorem/index.js","./name":"node_modules/faker/lib/locales/de/name/index.js","./phone_number":"node_modules/faker/lib/locales/de/phone_number/index.js","./cell_phone":"node_modules/faker/lib/locales/de/cell_phone/index.js"}],"node_modules/faker/lib/locales/de_AT/address/country.js":[function(require,module,exports) {
module["exports"] = [
  "Ägypten",
  "Äquatorialguinea",
  "Äthiopien",
  "Österreich",
  "Afghanistan",
  "Albanien",
  "Algerien",
  "Amerikanisch-Samoa",
  "Amerikanische Jungferninseln",
  "Andorra",
  "Angola",
  "Anguilla",
  "Antarktis",
  "Antigua und Barbuda",
  "Argentinien",
  "Armenien",
  "Aruba",
  "Aserbaidschan",
  "Australien",
  "Bahamas",
  "Bahrain",
  "Bangladesch",
  "Barbados",
  "Belarus",
  "Belgien",
  "Belize",
  "Benin",
  "die Bermudas",
  "Bhutan",
  "Bolivien",
  "Bosnien und Herzegowina",
  "Botsuana",
  "Bouvetinsel",
  "Brasilien",
  "Britische Jungferninseln",
  "Britisches Territorium im Indischen Ozean",
  "Brunei Darussalam",
  "Bulgarien",
  "Burkina Faso",
  "Burundi",
  "Chile",
  "China",
  "Cookinseln",
  "Costa Rica",
  "Dänemark",
  "Demokratische Republik Kongo",
  "Demokratische Volksrepublik Korea",
  "Deutschland",
  "Dominica",
  "Dominikanische Republik",
  "Dschibuti",
  "Ecuador",
  "El Salvador",
  "Eritrea",
  "Estland",
  "Färöer",
  "Falklandinseln",
  "Fidschi",
  "Finnland",
  "Frankreich",
  "Französisch-Guayana",
  "Französisch-Polynesien",
  "Französische Gebiete im südlichen Indischen Ozean",
  "Gabun",
  "Gambia",
  "Georgien",
  "Ghana",
  "Gibraltar",
  "Grönland",
  "Grenada",
  "Griechenland",
  "Guadeloupe",
  "Guam",
  "Guatemala",
  "Guinea",
  "Guinea-Bissau",
  "Guyana",
  "Haiti",
  "Heard und McDonaldinseln",
  "Honduras",
  "Hongkong",
  "Indien",
  "Indonesien",
  "Irak",
  "Iran",
  "Irland",
  "Island",
  "Israel",
  "Italien",
  "Jamaika",
  "Japan",
  "Jemen",
  "Jordanien",
  "Jugoslawien",
  "Kaimaninseln",
  "Kambodscha",
  "Kamerun",
  "Kanada",
  "Kap Verde",
  "Kasachstan",
  "Katar",
  "Kenia",
  "Kirgisistan",
  "Kiribati",
  "Kleinere amerikanische Überseeinseln",
  "Kokosinseln",
  "Kolumbien",
  "Komoren",
  "Kongo",
  "Kroatien",
  "Kuba",
  "Kuwait",
  "Laos",
  "Lesotho",
  "Lettland",
  "Libanon",
  "Liberia",
  "Libyen",
  "Liechtenstein",
  "Litauen",
  "Luxemburg",
  "Macau",
  "Madagaskar",
  "Malawi",
  "Malaysia",
  "Malediven",
  "Mali",
  "Malta",
  "ehemalige jugoslawische Republik Mazedonien",
  "Marokko",
  "Marshallinseln",
  "Martinique",
  "Mauretanien",
  "Mauritius",
  "Mayotte",
  "Mexiko",
  "Mikronesien",
  "Monaco",
  "Mongolei",
  "Montserrat",
  "Mosambik",
  "Myanmar",
  "Nördliche Marianen",
  "Namibia",
  "Nauru",
  "Nepal",
  "Neukaledonien",
  "Neuseeland",
  "Nicaragua",
  "Niederländische Antillen",
  "Niederlande",
  "Niger",
  "Nigeria",
  "Niue",
  "Norfolkinsel",
  "Norwegen",
  "Oman",
  "Osttimor",
  "Pakistan",
  "Palau",
  "Panama",
  "Papua-Neuguinea",
  "Paraguay",
  "Peru",
  "Philippinen",
  "Pitcairninseln",
  "Polen",
  "Portugal",
  "Puerto Rico",
  "Réunion",
  "Republik Korea",
  "Republik Moldau",
  "Ruanda",
  "Rumänien",
  "Russische Föderation",
  "São Tomé und Príncipe",
  "Südafrika",
  "Südgeorgien und Südliche Sandwichinseln",
  "Salomonen",
  "Sambia",
  "Samoa",
  "San Marino",
  "Saudi-Arabien",
  "Schweden",
  "Schweiz",
  "Senegal",
  "Seychellen",
  "Sierra Leone",
  "Simbabwe",
  "Singapur",
  "Slowakei",
  "Slowenien",
  "Somalien",
  "Spanien",
  "Sri Lanka",
  "St. Helena",
  "St. Kitts und Nevis",
  "St. Lucia",
  "St. Pierre und Miquelon",
  "St. Vincent und die Grenadinen",
  "Sudan",
  "Surinam",
  "Svalbard und Jan Mayen",
  "Swasiland",
  "Syrien",
  "Türkei",
  "Tadschikistan",
  "Taiwan",
  "Tansania",
  "Thailand",
  "Togo",
  "Tokelau",
  "Tonga",
  "Trinidad und Tobago",
  "Tschad",
  "Tschechische Republik",
  "Tunesien",
  "Turkmenistan",
  "Turks- und Caicosinseln",
  "Tuvalu",
  "Uganda",
  "Ukraine",
  "Ungarn",
  "Uruguay",
  "Usbekistan",
  "Vanuatu",
  "Vatikanstadt",
  "Venezuela",
  "Vereinigte Arabische Emirate",
  "Vereinigte Staaten",
  "Vereinigtes Königreich",
  "Vietnam",
  "Wallis und Futuna",
  "Weihnachtsinsel",
  "Westsahara",
  "Zentralafrikanische Republik",
  "Zypern"
];

},{}],"node_modules/faker/lib/locales/de_AT/address/street_root.js":[function(require,module,exports) {
module["exports"] = [
  "Ahorn",
  "Ahorngasse (St. Andrä)",
  "Alleestraße (Poysbrunn)",
  "Alpenlandstraße",
  "Alte Poststraße",
  "Alte Ufergasse",
  "Am Kronawett (Hagenbrunn)",
  "Am Mühlwasser",
  "Am Rebenhang",
  "Am Sternweg",
  "Anton Wildgans-Straße",
  "Auer-von-Welsbach-Weg",
  "Auf der Stift",
  "Aufeldgasse",
  "Bahngasse",
  "Bahnhofstraße",
  "Bahnstraße (Gerhaus)",
  "Basteigasse",
  "Berggasse",
  "Bergstraße",
  "Birkenweg",
  "Blasiussteig",
  "Blattur",
  "Bruderhofgasse",
  "Brunnelligasse",
  "Bühelweg",
  "Darnautgasse",
  "Donaugasse",
  "Dorfplatz (Haselbach)",
  "Dr.-Oberreiter-Straße",
  "Dr.Karl Holoubek-Str.",
  "Drautal Bundesstraße",
  "Dürnrohrer Straße",
  "Ebenthalerstraße",
  "Eckgrabenweg",
  "Erlenstraße",
  "Erlenweg",
  "Eschenweg",
  "Etrichgasse",
  "Fassergasse",
  "Feichteggerwiese",
  "Feld-Weg",
  "Feldgasse",
  "Feldstapfe",
  "Fischpointweg",
  "Flachbergstraße",
  "Flurweg",
  "Franz Schubert-Gasse",
  "Franz-Schneeweiß-Weg",
  "Franz-von-Assisi-Straße",
  "Fritz-Pregl-Straße",
  "Fuchsgrubenweg",
  "Födlerweg",
  "Föhrenweg",
  "Fünfhaus (Paasdorf)",
  "Gabelsbergerstraße",
  "Gartenstraße",
  "Geigen",
  "Geigergasse",
  "Gemeindeaugasse",
  "Gemeindeplatz",
  "Georg-Aichinger-Straße",
  "Glanfeldbachweg",
  "Graben (Burgauberg)",
  "Grub",
  "Gröretgasse",
  "Grünbach",
  "Gösting",
  "Hainschwang",
  "Hans-Mauracher-Straße",
  "Hart",
  "Teichstraße",
  "Hauptplatz",
  "Hauptstraße",
  "Heideweg",
  "Heinrich Landauer Gasse",
  "Helenengasse",
  "Hermann von Gilmweg",
  "Hermann-Löns-Gasse",
  "Herminengasse",
  "Hernstorferstraße",
  "Hirsdorf",
  "Hochfeistritz",
  "Hochhaus Neue Donau",
  "Hof",
  "Hussovits Gasse",
  "Höggen",
  "Hütten",
  "Janzgasse",
  "Jochriemgutstraße",
  "Johann-Strauß-Gasse",
  "Julius-Raab-Straße",
  "Kahlenberger Straße",
  "Karl Kraft-Straße",
  "Kegelprielstraße",
  "Keltenberg-Eponaweg",
  "Kennedybrücke",
  "Kerpelystraße",
  "Kindergartenstraße",
  "Kinderheimgasse",
  "Kirchenplatz",
  "Kirchweg",
  "Klagenfurter Straße",
  "Klamm",
  "Kleinbaumgarten",
  "Klingergasse",
  "Koloniestraße",
  "Konrad-Duden-Gasse",
  "Krankenhausstraße",
  "Kubinstraße",
  "Köhldorfergasse",
  "Lackenweg",
  "Lange Mekotte",
  "Leifling",
  "Leopold Frank-Straße (Pellendorf)",
  "Lerchengasse (Pirka)",
  "Lichtensternsiedlung V",
  "Lindenhofstraße",
  "Lindenweg",
  "Luegstraße",
  "Maierhof",
  "Malerweg",
  "Mitterweg",
  "Mittlere Hauptstraße",
  "Moosbachgasse",
  "Morettigasse",
  "Musikpavillon Riezlern",
  "Mühlboden",
  "Mühle",
  "Mühlenweg",
  "Neustiftgasse",
  "Niederegg",
  "Niedergams",
  "Nordwestbahnbrücke",
  "Oberbödenalm",
  "Obere Berggasse",
  "Oedt",
  "Am Färberberg",
  "Ottogasse",
  "Paul Peters-Gasse",
  "Perspektivstraße",
  "Poppichl",
  "Privatweg",
  "Prixgasse",
  "Pyhra",
  "Radetzkystraße",
  "Raiden",
  "Reichensteinstraße",
  "Reitbauernstraße",
  "Reiterweg",
  "Reitschulgasse",
  "Ringweg",
  "Rupertistraße",
  "Römerstraße",
  "Römerweg",
  "Sackgasse",
  "Schaunbergerstraße",
  "Schloßweg",
  "Schulgasse (Langeck)",
  "Schönholdsiedlung",
  "Seeblick",
  "Seestraße",
  "Semriacherstraße",
  "Simling",
  "Sipbachzeller Straße",
  "Sonnenweg",
  "Spargelfeldgasse",
  "Spiesmayrweg",
  "Sportplatzstraße",
  "St.Ulrich",
  "Steilmannstraße",
  "Steingrüneredt",
  "Strassfeld",
  "Straßerau",
  "Stöpflweg",
  "Stüra",
  "Taferngasse",
  "Tennweg",
  "Thomas Koschat-Gasse",
  "Tiroler Straße",
  "Torrogasse",
  "Uferstraße (Schwarzau am Steinfeld)",
  "Unterdörfl",
  "Unterer Sonnrainweg",
  "Verwaltersiedlung",
  "Waldhang",
  "Wasen",
  "Weidenstraße",
  "Weiherweg",
  "Wettsteingasse",
  "Wiener Straße",
  "Windisch",
  "Zebragasse",
  "Zellerstraße",
  "Ziehrerstraße",
  "Zulechnerweg",
  "Zwergjoch",
  "Ötzbruck"
];

},{}],"node_modules/faker/lib/locales/de_AT/address/building_number.js":[function(require,module,exports) {
module["exports"] = [
  "###",
  "##",
  "#",
  "##a",
  "##b",
  "##c"
];

},{}],"node_modules/faker/lib/locales/de_AT/address/secondary_address.js":[function(require,module,exports) {
module["exports"] = [
  "Apt. ###",
  "Zimmer ###",
  "# OG"
];

},{}],"node_modules/faker/lib/locales/de_AT/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "####"
];

},{}],"node_modules/faker/lib/locales/de_AT/address/state.js":[function(require,module,exports) {
module["exports"] = [
  "Burgenland",
  "Kärnten",
  "Niederösterreich",
  "Oberösterreich",
  "Salzburg",
  "Steiermark",
  "Tirol",
  "Vorarlberg",
  "Wien"
];

},{}],"node_modules/faker/lib/locales/de_AT/address/state_abbr.js":[function(require,module,exports) {
module["exports"] = [
  "Bgld.",
  "Ktn.",
  "NÖ",
  "OÖ",
  "Sbg.",
  "Stmk.",
  "T",
  "Vbg.",
  "W"
];

},{}],"node_modules/faker/lib/locales/de_AT/address/city_name.js":[function(require,module,exports) {
module["exports"] = [
  "Aigen im Mühlkreis",
  "Allerheiligen bei Wildon",
  "Altenfelden",
  "Arriach",
  "Axams",
  "Baumgartenberg",
  "Bergern im Dunkelsteinerwald",
  "Berndorf bei Salzburg",
  "Bregenz",
  "Breitenbach am Inn",
  "Deutsch-Wagram",
  "Dienten am Hochkönig",
  "Dietach",
  "Dornbirn",
  "Dürnkrut",
  "Eben im Pongau",
  "Ebenthal in Kärnten",
  "Eichgraben",
  "Eisenstadt",
  "Ellmau",
  "Feistritz am Wechsel",
  "Finkenberg",
  "Fiss",
  "Frantschach-St. Gertraud",
  "Fritzens",
  "Gams bei Hieflau",
  "Geiersberg",
  "Graz",
  "Großhöflein",
  "Gößnitz",
  "Hartl",
  "Hausleiten",
  "Herzogenburg",
  "Hinterhornbach",
  "Hochwolkersdorf",
  "Ilz",
  "Ilztal",
  "Innerbraz",
  "Innsbruck",
  "Itter",
  "Jagerberg",
  "Jeging",
  "Johnsbach",
  "Johnsdorf-Brunn",
  "Jungholz",
  "Kirchdorf am Inn",
  "Klagenfurt",
  "Kottes-Purk",
  "Krumau am Kamp",
  "Krumbach",
  "Lavamünd",
  "Lech",
  "Linz",
  "Ludesch",
  "Lödersdorf",
  "Marbach an der Donau",
  "Mattsee",
  "Mautern an der Donau",
  "Mauterndorf",
  "Mitterbach am Erlaufsee",
  "Neudorf bei Passail",
  "Neudorf bei Staatz",
  "Neukirchen an der Enknach",
  "Neustift an der Lafnitz",
  "Niederleis",
  "Oberndorf in Tirol",
  "Oberstorcha",
  "Oberwaltersdorf",
  "Oed-Oehling",
  "Ort im Innkreis",
  "Pilgersdorf",
  "Pitschgau",
  "Pollham",
  "Preitenegg",
  "Purbach am Neusiedler See",
  "Rabenwald",
  "Raiding",
  "Rastenfeld",
  "Ratten",
  "Rettenegg",
  "Salzburg",
  "Sankt Johann im Saggautal",
  "St. Peter am Kammersberg",
  "St. Pölten",
  "St. Veit an der Glan",
  "Taxenbach",
  "Tragwein",
  "Trebesing",
  "Trieben",
  "Turnau",
  "Ungerdorf",
  "Unterauersbach",
  "Unterstinkenbrunn",
  "Untertilliach",
  "Uttendorf",
  "Vals",
  "Velden am Wörther See",
  "Viehhofen",
  "Villach",
  "Vitis",
  "Waidhofen an der Thaya",
  "Waldkirchen am Wesen",
  "Weißkirchen an der Traun",
  "Wien",
  "Wimpassing im Schwarzatale",
  "Ybbs an der Donau",
  "Ybbsitz",
  "Yspertal",
  "Zeillern",
  "Zell am Pettenfirst",
  "Zell an der Pram",
  "Zerlach",
  "Zwölfaxing",
  "Öblarn",
  "Übelbach",
  "Überackern",
  "Übersaxen",
  "Übersbach"
];

},{}],"node_modules/faker/lib/locales/de_AT/address/city.js":[function(require,module,exports) {
module["exports"] = [
  "#{city_name}"
];

},{}],"node_modules/faker/lib/locales/de_AT/address/street_name.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_root}"
];

},{}],"node_modules/faker/lib/locales/de_AT/address/street_address.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_name} #{building_number}"
];

},{}],"node_modules/faker/lib/locales/de_AT/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "Österreich"
];

},{}],"node_modules/faker/lib/locales/de_AT/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.country = require("./country");
address.street_root = require("./street_root");
address.building_number = require("./building_number");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.city_name = require("./city_name");
address.city = require("./city");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./country":"node_modules/faker/lib/locales/de_AT/address/country.js","./street_root":"node_modules/faker/lib/locales/de_AT/address/street_root.js","./building_number":"node_modules/faker/lib/locales/de_AT/address/building_number.js","./secondary_address":"node_modules/faker/lib/locales/de_AT/address/secondary_address.js","./postcode":"node_modules/faker/lib/locales/de_AT/address/postcode.js","./state":"node_modules/faker/lib/locales/de_AT/address/state.js","./state_abbr":"node_modules/faker/lib/locales/de_AT/address/state_abbr.js","./city_name":"node_modules/faker/lib/locales/de_AT/address/city_name.js","./city":"node_modules/faker/lib/locales/de_AT/address/city.js","./street_name":"node_modules/faker/lib/locales/de_AT/address/street_name.js","./street_address":"node_modules/faker/lib/locales/de_AT/address/street_address.js","./default_country":"node_modules/faker/lib/locales/de_AT/address/default_country.js"}],"node_modules/faker/lib/locales/de_AT/company/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "GmbH",
  "AG",
  "Gruppe",
  "KG",
  "GmbH & Co. KG",
  "UG",
  "OHG"
];

},{}],"node_modules/faker/lib/locales/de_AT/company/legal_form.js":[function(require,module,exports) {
module["exports"] = [
  "GmbH",
  "AG",
  "Gruppe",
  "KG",
  "GmbH & Co. KG",
  "UG",
  "OHG"
];

},{}],"node_modules/faker/lib/locales/de_AT/company/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{Name.last_name} #{suffix}",
  "#{Name.last_name}-#{Name.last_name}",
  "#{Name.last_name}, #{Name.last_name} und #{Name.last_name}"
];

},{}],"node_modules/faker/lib/locales/de_AT/company/index.js":[function(require,module,exports) {
var company = {};
module['exports'] = company;
company.suffix = require("./suffix");
company.legal_form = require("./legal_form");
company.name = require("./name");

},{"./suffix":"node_modules/faker/lib/locales/de_AT/company/suffix.js","./legal_form":"node_modules/faker/lib/locales/de_AT/company/legal_form.js","./name":"node_modules/faker/lib/locales/de_AT/company/name.js"}],"node_modules/faker/lib/locales/de_AT/internet/free_email.js":[function(require,module,exports) {
module["exports"] = [
  "gmail.com",
  "yahoo.com",
  "hotmail.com"
];

},{}],"node_modules/faker/lib/locales/de_AT/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "com",
  "info",
  "name",
  "net",
  "org",
  "de",
  "ch",
  "at"
];

},{}],"node_modules/faker/lib/locales/de_AT/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.free_email = require("./free_email");
internet.domain_suffix = require("./domain_suffix");

},{"./free_email":"node_modules/faker/lib/locales/de_AT/internet/free_email.js","./domain_suffix":"node_modules/faker/lib/locales/de_AT/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/de_AT/name/first_name.js":[function(require,module,exports) {
module["exports"] = [
  "Aaron",
  "Abdul",
  "Abdullah",
  "Adam",
  "Adrian",
  "Adriano",
  "Ahmad",
  "Ahmed",
  "Ahmet",
  "Alan",
  "Albert",
  "Alessandro",
  "Alessio",
  "Alex",
  "Alexander",
  "Alfred",
  "Ali",
  "Amar",
  "Amir",
  "Amon",
  "Andre",
  "Andreas",
  "Andrew",
  "Angelo",
  "Ansgar",
  "Anthony",
  "Anton",
  "Antonio",
  "Arda",
  "Arian",
  "Armin",
  "Arne",
  "Arno",
  "Arthur",
  "Artur",
  "Arved",
  "Arvid",
  "Ayman",
  "Baran",
  "Baris",
  "Bastian",
  "Batuhan",
  "Bela",
  "Ben",
  "Benedikt",
  "Benjamin",
  "Bennet",
  "Bennett",
  "Benno",
  "Bent",
  "Berat",
  "Berkay",
  "Bernd",
  "Bilal",
  "Bjarne",
  "Björn",
  "Bo",
  "Boris",
  "Brandon",
  "Brian",
  "Bruno",
  "Bryan",
  "Burak",
  "Calvin",
  "Can",
  "Carl",
  "Carlo",
  "Carlos",
  "Caspar",
  "Cedric",
  "Cedrik",
  "Cem",
  "Charlie",
  "Chris",
  "Christian",
  "Christiano",
  "Christoph",
  "Christopher",
  "Claas",
  "Clemens",
  "Colin",
  "Collin",
  "Conner",
  "Connor",
  "Constantin",
  "Corvin",
  "Curt",
  "Damian",
  "Damien",
  "Daniel",
  "Danilo",
  "Danny",
  "Darian",
  "Dario",
  "Darius",
  "Darren",
  "David",
  "Davide",
  "Davin",
  "Dean",
  "Deniz",
  "Dennis",
  "Denny",
  "Devin",
  "Diego",
  "Dion",
  "Domenic",
  "Domenik",
  "Dominic",
  "Dominik",
  "Dorian",
  "Dustin",
  "Dylan",
  "Ecrin",
  "Eddi",
  "Eddy",
  "Edgar",
  "Edwin",
  "Efe",
  "Ege",
  "Elia",
  "Eliah",
  "Elias",
  "Elijah",
  "Emanuel",
  "Emil",
  "Emilian",
  "Emilio",
  "Emir",
  "Emirhan",
  "Emre",
  "Enes",
  "Enno",
  "Enrico",
  "Eren",
  "Eric",
  "Erik",
  "Etienne",
  "Fabian",
  "Fabien",
  "Fabio",
  "Fabrice",
  "Falk",
  "Felix",
  "Ferdinand",
  "Fiete",
  "Filip",
  "Finlay",
  "Finley",
  "Finn",
  "Finnley",
  "Florian",
  "Francesco",
  "Franz",
  "Frederic",
  "Frederick",
  "Frederik",
  "Friedrich",
  "Fritz",
  "Furkan",
  "Fynn",
  "Gabriel",
  "Georg",
  "Gerrit",
  "Gian",
  "Gianluca",
  "Gino",
  "Giuliano",
  "Giuseppe",
  "Gregor",
  "Gustav",
  "Hagen",
  "Hamza",
  "Hannes",
  "Hanno",
  "Hans",
  "Hasan",
  "Hassan",
  "Hauke",
  "Hendrik",
  "Hennes",
  "Henning",
  "Henri",
  "Henrick",
  "Henrik",
  "Henry",
  "Hugo",
  "Hussein",
  "Ian",
  "Ibrahim",
  "Ilias",
  "Ilja",
  "Ilyas",
  "Immanuel",
  "Ismael",
  "Ismail",
  "Ivan",
  "Iven",
  "Jack",
  "Jacob",
  "Jaden",
  "Jakob",
  "Jamal",
  "James",
  "Jamie",
  "Jan",
  "Janek",
  "Janis",
  "Janne",
  "Jannek",
  "Jannes",
  "Jannik",
  "Jannis",
  "Jano",
  "Janosch",
  "Jared",
  "Jari",
  "Jarne",
  "Jarno",
  "Jaron",
  "Jason",
  "Jasper",
  "Jay",
  "Jayden",
  "Jayson",
  "Jean",
  "Jens",
  "Jeremias",
  "Jeremie",
  "Jeremy",
  "Jermaine",
  "Jerome",
  "Jesper",
  "Jesse",
  "Jim",
  "Jimmy",
  "Joe",
  "Joel",
  "Joey",
  "Johann",
  "Johannes",
  "John",
  "Johnny",
  "Jon",
  "Jona",
  "Jonah",
  "Jonas",
  "Jonathan",
  "Jonte",
  "Joost",
  "Jordan",
  "Joris",
  "Joscha",
  "Joschua",
  "Josef",
  "Joseph",
  "Josh",
  "Joshua",
  "Josua",
  "Juan",
  "Julian",
  "Julien",
  "Julius",
  "Juri",
  "Justin",
  "Justus",
  "Kaan",
  "Kai",
  "Kalle",
  "Karim",
  "Karl",
  "Karlo",
  "Kay",
  "Keanu",
  "Kenan",
  "Kenny",
  "Keno",
  "Kerem",
  "Kerim",
  "Kevin",
  "Kian",
  "Kilian",
  "Kim",
  "Kimi",
  "Kjell",
  "Klaas",
  "Klemens",
  "Konrad",
  "Konstantin",
  "Koray",
  "Korbinian",
  "Kurt",
  "Lars",
  "Lasse",
  "Laurence",
  "Laurens",
  "Laurenz",
  "Laurin",
  "Lean",
  "Leander",
  "Leandro",
  "Leif",
  "Len",
  "Lenn",
  "Lennard",
  "Lennart",
  "Lennert",
  "Lennie",
  "Lennox",
  "Lenny",
  "Leo",
  "Leon",
  "Leonard",
  "Leonardo",
  "Leonhard",
  "Leonidas",
  "Leopold",
  "Leroy",
  "Levent",
  "Levi",
  "Levin",
  "Lewin",
  "Lewis",
  "Liam",
  "Lian",
  "Lias",
  "Lino",
  "Linus",
  "Lio",
  "Lion",
  "Lionel",
  "Logan",
  "Lorenz",
  "Lorenzo",
  "Loris",
  "Louis",
  "Luan",
  "Luc",
  "Luca",
  "Lucas",
  "Lucian",
  "Lucien",
  "Ludwig",
  "Luis",
  "Luiz",
  "Luk",
  "Luka",
  "Lukas",
  "Luke",
  "Lutz",
  "Maddox",
  "Mads",
  "Magnus",
  "Maik",
  "Maksim",
  "Malik",
  "Malte",
  "Manuel",
  "Marc",
  "Marcel",
  "Marco",
  "Marcus",
  "Marek",
  "Marian",
  "Mario",
  "Marius",
  "Mark",
  "Marko",
  "Markus",
  "Marlo",
  "Marlon",
  "Marten",
  "Martin",
  "Marvin",
  "Marwin",
  "Mateo",
  "Mathis",
  "Matis",
  "Mats",
  "Matteo",
  "Mattes",
  "Matthias",
  "Matthis",
  "Matti",
  "Mattis",
  "Maurice",
  "Max",
  "Maxim",
  "Maximilian",
  "Mehmet",
  "Meik",
  "Melvin",
  "Merlin",
  "Mert",
  "Michael",
  "Michel",
  "Mick",
  "Miguel",
  "Mika",
  "Mikail",
  "Mike",
  "Milan",
  "Milo",
  "Mio",
  "Mirac",
  "Mirco",
  "Mirko",
  "Mohamed",
  "Mohammad",
  "Mohammed",
  "Moritz",
  "Morten",
  "Muhammed",
  "Murat",
  "Mustafa",
  "Nathan",
  "Nathanael",
  "Nelson",
  "Neo",
  "Nevio",
  "Nick",
  "Niclas",
  "Nico",
  "Nicolai",
  "Nicolas",
  "Niels",
  "Nikita",
  "Niklas",
  "Niko",
  "Nikolai",
  "Nikolas",
  "Nils",
  "Nino",
  "Noah",
  "Noel",
  "Norman",
  "Odin",
  "Oke",
  "Ole",
  "Oliver",
  "Omar",
  "Onur",
  "Oscar",
  "Oskar",
  "Pascal",
  "Patrice",
  "Patrick",
  "Paul",
  "Peer",
  "Pepe",
  "Peter",
  "Phil",
  "Philip",
  "Philipp",
  "Pierre",
  "Piet",
  "Pit",
  "Pius",
  "Quentin",
  "Quirin",
  "Rafael",
  "Raik",
  "Ramon",
  "Raphael",
  "Rasmus",
  "Raul",
  "Rayan",
  "René",
  "Ricardo",
  "Riccardo",
  "Richard",
  "Rick",
  "Rico",
  "Robert",
  "Robin",
  "Rocco",
  "Roman",
  "Romeo",
  "Ron",
  "Ruben",
  "Ryan",
  "Said",
  "Salih",
  "Sam",
  "Sami",
  "Sammy",
  "Samuel",
  "Sandro",
  "Santino",
  "Sascha",
  "Sean",
  "Sebastian",
  "Selim",
  "Semih",
  "Shawn",
  "Silas",
  "Simeon",
  "Simon",
  "Sinan",
  "Sky",
  "Stefan",
  "Steffen",
  "Stephan",
  "Steve",
  "Steven",
  "Sven",
  "Sönke",
  "Sören",
  "Taha",
  "Tamino",
  "Tammo",
  "Tarik",
  "Tayler",
  "Taylor",
  "Teo",
  "Theo",
  "Theodor",
  "Thies",
  "Thilo",
  "Thomas",
  "Thorben",
  "Thore",
  "Thorge",
  "Tiago",
  "Til",
  "Till",
  "Tillmann",
  "Tim",
  "Timm",
  "Timo",
  "Timon",
  "Timothy",
  "Tino",
  "Titus",
  "Tizian",
  "Tjark",
  "Tobias",
  "Tom",
  "Tommy",
  "Toni",
  "Tony",
  "Torben",
  "Tore",
  "Tristan",
  "Tyler",
  "Tyron",
  "Umut",
  "Valentin",
  "Valentino",
  "Veit",
  "Victor",
  "Viktor",
  "Vin",
  "Vincent",
  "Vito",
  "Vitus",
  "Wilhelm",
  "Willi",
  "William",
  "Willy",
  "Xaver",
  "Yannic",
  "Yannick",
  "Yannik",
  "Yannis",
  "Yasin",
  "Youssef",
  "Yunus",
  "Yusuf",
  "Yven",
  "Yves",
  "Ömer",
  "Aaliyah",
  "Abby",
  "Abigail",
  "Ada",
  "Adelina",
  "Adriana",
  "Aileen",
  "Aimee",
  "Alana",
  "Alea",
  "Alena",
  "Alessa",
  "Alessia",
  "Alexa",
  "Alexandra",
  "Alexia",
  "Alexis",
  "Aleyna",
  "Alia",
  "Alica",
  "Alice",
  "Alicia",
  "Alina",
  "Alisa",
  "Alisha",
  "Alissa",
  "Aliya",
  "Aliyah",
  "Allegra",
  "Alma",
  "Alyssa",
  "Amalia",
  "Amanda",
  "Amelia",
  "Amelie",
  "Amina",
  "Amira",
  "Amy",
  "Ana",
  "Anabel",
  "Anastasia",
  "Andrea",
  "Angela",
  "Angelina",
  "Angelique",
  "Anja",
  "Ann",
  "Anna",
  "Annabel",
  "Annabell",
  "Annabelle",
  "Annalena",
  "Anne",
  "Anneke",
  "Annelie",
  "Annemarie",
  "Anni",
  "Annie",
  "Annika",
  "Anny",
  "Anouk",
  "Antonia",
  "Arda",
  "Ariana",
  "Ariane",
  "Arwen",
  "Ashley",
  "Asya",
  "Aurelia",
  "Aurora",
  "Ava",
  "Ayleen",
  "Aylin",
  "Ayse",
  "Azra",
  "Betty",
  "Bianca",
  "Bianka",
  "Caitlin",
  "Cara",
  "Carina",
  "Carla",
  "Carlotta",
  "Carmen",
  "Carolin",
  "Carolina",
  "Caroline",
  "Cassandra",
  "Catharina",
  "Catrin",
  "Cecile",
  "Cecilia",
  "Celia",
  "Celina",
  "Celine",
  "Ceyda",
  "Ceylin",
  "Chantal",
  "Charleen",
  "Charlotta",
  "Charlotte",
  "Chayenne",
  "Cheyenne",
  "Chiara",
  "Christin",
  "Christina",
  "Cindy",
  "Claire",
  "Clara",
  "Clarissa",
  "Colleen",
  "Collien",
  "Cora",
  "Corinna",
  "Cosima",
  "Dana",
  "Daniela",
  "Daria",
  "Darleen",
  "Defne",
  "Delia",
  "Denise",
  "Diana",
  "Dilara",
  "Dina",
  "Dorothea",
  "Ecrin",
  "Eda",
  "Eileen",
  "Ela",
  "Elaine",
  "Elanur",
  "Elea",
  "Elena",
  "Eleni",
  "Eleonora",
  "Eliana",
  "Elif",
  "Elina",
  "Elisa",
  "Elisabeth",
  "Ella",
  "Ellen",
  "Elli",
  "Elly",
  "Elsa",
  "Emelie",
  "Emely",
  "Emilia",
  "Emilie",
  "Emily",
  "Emma",
  "Emmely",
  "Emmi",
  "Emmy",
  "Enie",
  "Enna",
  "Enya",
  "Esma",
  "Estelle",
  "Esther",
  "Eva",
  "Evelin",
  "Evelina",
  "Eveline",
  "Evelyn",
  "Fabienne",
  "Fatima",
  "Fatma",
  "Felicia",
  "Felicitas",
  "Felina",
  "Femke",
  "Fenja",
  "Fine",
  "Finia",
  "Finja",
  "Finnja",
  "Fiona",
  "Flora",
  "Florentine",
  "Francesca",
  "Franka",
  "Franziska",
  "Frederike",
  "Freya",
  "Frida",
  "Frieda",
  "Friederike",
  "Giada",
  "Gina",
  "Giulia",
  "Giuliana",
  "Greta",
  "Hailey",
  "Hana",
  "Hanna",
  "Hannah",
  "Heidi",
  "Helen",
  "Helena",
  "Helene",
  "Helin",
  "Henriette",
  "Henrike",
  "Hermine",
  "Ida",
  "Ilayda",
  "Imke",
  "Ina",
  "Ines",
  "Inga",
  "Inka",
  "Irem",
  "Isa",
  "Isabel",
  "Isabell",
  "Isabella",
  "Isabelle",
  "Ivonne",
  "Jacqueline",
  "Jamie",
  "Jamila",
  "Jana",
  "Jane",
  "Janin",
  "Janina",
  "Janine",
  "Janna",
  "Janne",
  "Jara",
  "Jasmin",
  "Jasmina",
  "Jasmine",
  "Jella",
  "Jenna",
  "Jennifer",
  "Jenny",
  "Jessica",
  "Jessy",
  "Jette",
  "Jil",
  "Jill",
  "Joana",
  "Joanna",
  "Joelina",
  "Joeline",
  "Joelle",
  "Johanna",
  "Joleen",
  "Jolie",
  "Jolien",
  "Jolin",
  "Jolina",
  "Joline",
  "Jona",
  "Jonah",
  "Jonna",
  "Josefin",
  "Josefine",
  "Josephin",
  "Josephine",
  "Josie",
  "Josy",
  "Joy",
  "Joyce",
  "Judith",
  "Judy",
  "Jule",
  "Julia",
  "Juliana",
  "Juliane",
  "Julie",
  "Julienne",
  "Julika",
  "Julina",
  "Juna",
  "Justine",
  "Kaja",
  "Karina",
  "Karla",
  "Karlotta",
  "Karolina",
  "Karoline",
  "Kassandra",
  "Katarina",
  "Katharina",
  "Kathrin",
  "Katja",
  "Katrin",
  "Kaya",
  "Kayra",
  "Kiana",
  "Kiara",
  "Kim",
  "Kimberley",
  "Kimberly",
  "Kira",
  "Klara",
  "Korinna",
  "Kristin",
  "Kyra",
  "Laila",
  "Lana",
  "Lara",
  "Larissa",
  "Laura",
  "Laureen",
  "Lavinia",
  "Lea",
  "Leah",
  "Leana",
  "Leandra",
  "Leann",
  "Lee",
  "Leila",
  "Lena",
  "Lene",
  "Leni",
  "Lenia",
  "Lenja",
  "Lenya",
  "Leona",
  "Leoni",
  "Leonie",
  "Leonora",
  "Leticia",
  "Letizia",
  "Levke",
  "Leyla",
  "Lia",
  "Liah",
  "Liana",
  "Lili",
  "Lilia",
  "Lilian",
  "Liliana",
  "Lilith",
  "Lilli",
  "Lillian",
  "Lilly",
  "Lily",
  "Lina",
  "Linda",
  "Lindsay",
  "Line",
  "Linn",
  "Linnea",
  "Lisa",
  "Lisann",
  "Lisanne",
  "Liv",
  "Livia",
  "Liz",
  "Lola",
  "Loreen",
  "Lorena",
  "Lotta",
  "Lotte",
  "Louisa",
  "Louise",
  "Luana",
  "Luca",
  "Lucia",
  "Lucie",
  "Lucienne",
  "Lucy",
  "Luisa",
  "Luise",
  "Luka",
  "Luna",
  "Luzie",
  "Lya",
  "Lydia",
  "Lyn",
  "Lynn",
  "Madeleine",
  "Madita",
  "Madleen",
  "Madlen",
  "Magdalena",
  "Maike",
  "Mailin",
  "Maira",
  "Maja",
  "Malena",
  "Malia",
  "Malin",
  "Malina",
  "Mandy",
  "Mara",
  "Marah",
  "Mareike",
  "Maren",
  "Maria",
  "Mariam",
  "Marie",
  "Marieke",
  "Mariella",
  "Marika",
  "Marina",
  "Marisa",
  "Marissa",
  "Marit",
  "Marla",
  "Marleen",
  "Marlen",
  "Marlena",
  "Marlene",
  "Marta",
  "Martha",
  "Mary",
  "Maryam",
  "Mathilda",
  "Mathilde",
  "Matilda",
  "Maxi",
  "Maxima",
  "Maxine",
  "Maya",
  "Mayra",
  "Medina",
  "Medine",
  "Meike",
  "Melanie",
  "Melek",
  "Melike",
  "Melina",
  "Melinda",
  "Melis",
  "Melisa",
  "Melissa",
  "Merle",
  "Merve",
  "Meryem",
  "Mette",
  "Mia",
  "Michaela",
  "Michelle",
  "Mieke",
  "Mila",
  "Milana",
  "Milena",
  "Milla",
  "Mina",
  "Mira",
  "Miray",
  "Miriam",
  "Mirja",
  "Mona",
  "Monique",
  "Nadine",
  "Nadja",
  "Naemi",
  "Nancy",
  "Naomi",
  "Natalia",
  "Natalie",
  "Nathalie",
  "Neele",
  "Nela",
  "Nele",
  "Nelli",
  "Nelly",
  "Nia",
  "Nicole",
  "Nika",
  "Nike",
  "Nikita",
  "Nila",
  "Nina",
  "Nisa",
  "Noemi",
  "Nora",
  "Olivia",
  "Patricia",
  "Patrizia",
  "Paula",
  "Paulina",
  "Pauline",
  "Penelope",
  "Philine",
  "Phoebe",
  "Pia",
  "Rahel",
  "Rania",
  "Rebecca",
  "Rebekka",
  "Riana",
  "Rieke",
  "Rike",
  "Romina",
  "Romy",
  "Ronja",
  "Rosa",
  "Rosalie",
  "Ruby",
  "Sabrina",
  "Sahra",
  "Sally",
  "Salome",
  "Samantha",
  "Samia",
  "Samira",
  "Sandra",
  "Sandy",
  "Sanja",
  "Saphira",
  "Sara",
  "Sarah",
  "Saskia",
  "Selin",
  "Selina",
  "Selma",
  "Sena",
  "Sidney",
  "Sienna",
  "Silja",
  "Sina",
  "Sinja",
  "Smilla",
  "Sofia",
  "Sofie",
  "Sonja",
  "Sophia",
  "Sophie",
  "Soraya",
  "Stefanie",
  "Stella",
  "Stephanie",
  "Stina",
  "Sude",
  "Summer",
  "Susanne",
  "Svea",
  "Svenja",
  "Sydney",
  "Tabea",
  "Talea",
  "Talia",
  "Tamara",
  "Tamia",
  "Tamina",
  "Tanja",
  "Tara",
  "Tarja",
  "Teresa",
  "Tessa",
  "Thalea",
  "Thalia",
  "Thea",
  "Theresa",
  "Tia",
  "Tina",
  "Tomke",
  "Tuana",
  "Valentina",
  "Valeria",
  "Valerie",
  "Vanessa",
  "Vera",
  "Veronika",
  "Victoria",
  "Viktoria",
  "Viola",
  "Vivian",
  "Vivien",
  "Vivienne",
  "Wibke",
  "Wiebke",
  "Xenia",
  "Yara",
  "Yaren",
  "Yasmin",
  "Ylvi",
  "Ylvie",
  "Yvonne",
  "Zara",
  "Zehra",
  "Zeynep",
  "Zoe",
  "Zoey",
  "Zoé"
];

},{}],"node_modules/faker/lib/locales/de_AT/name/last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Abel",
  "Abicht",
  "Abraham",
  "Abramovic",
  "Abt",
  "Achilles",
  "Achkinadze",
  "Ackermann",
  "Adam",
  "Adams",
  "Ade",
  "Agostini",
  "Ahlke",
  "Ahrenberg",
  "Ahrens",
  "Aigner",
  "Albert",
  "Albrecht",
  "Alexa",
  "Alexander",
  "Alizadeh",
  "Allgeyer",
  "Amann",
  "Amberg",
  "Anding",
  "Anggreny",
  "Apitz",
  "Arendt",
  "Arens",
  "Arndt",
  "Aryee",
  "Aschenbroich",
  "Assmus",
  "Astafei",
  "Auer",
  "Axmann",
  "Baarck",
  "Bachmann",
  "Badane",
  "Bader",
  "Baganz",
  "Bahl",
  "Bak",
  "Balcer",
  "Balck",
  "Balkow",
  "Balnuweit",
  "Balzer",
  "Banse",
  "Barr",
  "Bartels",
  "Barth",
  "Barylla",
  "Baseda",
  "Battke",
  "Bauer",
  "Bauermeister",
  "Baumann",
  "Baumeister",
  "Bauschinger",
  "Bauschke",
  "Bayer",
  "Beavogui",
  "Beck",
  "Beckel",
  "Becker",
  "Beckmann",
  "Bedewitz",
  "Beele",
  "Beer",
  "Beggerow",
  "Beh",
  "Behr",
  "Behrenbruch",
  "Belz",
  "Bender",
  "Benecke",
  "Benner",
  "Benninger",
  "Benzing",
  "Berends",
  "Berger",
  "Berner",
  "Berning",
  "Bertenbreiter",
  "Best",
  "Bethke",
  "Betz",
  "Beushausen",
  "Beutelspacher",
  "Beyer",
  "Biba",
  "Bichler",
  "Bickel",
  "Biedermann",
  "Bieler",
  "Bielert",
  "Bienasch",
  "Bienias",
  "Biesenbach",
  "Bigdeli",
  "Birkemeyer",
  "Bittner",
  "Blank",
  "Blaschek",
  "Blassneck",
  "Bloch",
  "Blochwitz",
  "Blockhaus",
  "Blum",
  "Blume",
  "Bock",
  "Bode",
  "Bogdashin",
  "Bogenrieder",
  "Bohge",
  "Bolm",
  "Borgschulze",
  "Bork",
  "Bormann",
  "Bornscheuer",
  "Borrmann",
  "Borsch",
  "Boruschewski",
  "Bos",
  "Bosler",
  "Bourrouag",
  "Bouschen",
  "Boxhammer",
  "Boyde",
  "Bozsik",
  "Brand",
  "Brandenburg",
  "Brandis",
  "Brandt",
  "Brauer",
  "Braun",
  "Brehmer",
  "Breitenstein",
  "Bremer",
  "Bremser",
  "Brenner",
  "Brettschneider",
  "Breu",
  "Breuer",
  "Briesenick",
  "Bringmann",
  "Brinkmann",
  "Brix",
  "Broening",
  "Brosch",
  "Bruckmann",
  "Bruder",
  "Bruhns",
  "Brunner",
  "Bruns",
  "Bräutigam",
  "Brömme",
  "Brüggmann",
  "Buchholz",
  "Buchrucker",
  "Buder",
  "Bultmann",
  "Bunjes",
  "Burger",
  "Burghagen",
  "Burkhard",
  "Burkhardt",
  "Burmeister",
  "Busch",
  "Buschbaum",
  "Busemann",
  "Buss",
  "Busse",
  "Bussmann",
  "Byrd",
  "Bäcker",
  "Böhm",
  "Bönisch",
  "Börgeling",
  "Börner",
  "Böttner",
  "Büchele",
  "Bühler",
  "Büker",
  "Büngener",
  "Bürger",
  "Bürklein",
  "Büscher",
  "Büttner",
  "Camara",
  "Carlowitz",
  "Carlsohn",
  "Caspari",
  "Caspers",
  "Chapron",
  "Christ",
  "Cierpinski",
  "Clarius",
  "Cleem",
  "Cleve",
  "Co",
  "Conrad",
  "Cordes",
  "Cornelsen",
  "Cors",
  "Cotthardt",
  "Crews",
  "Cronjäger",
  "Crosskofp",
  "Da",
  "Dahm",
  "Dahmen",
  "Daimer",
  "Damaske",
  "Danneberg",
  "Danner",
  "Daub",
  "Daubner",
  "Daudrich",
  "Dauer",
  "Daum",
  "Dauth",
  "Dautzenberg",
  "De",
  "Decker",
  "Deckert",
  "Deerberg",
  "Dehmel",
  "Deja",
  "Delonge",
  "Demut",
  "Dengler",
  "Denner",
  "Denzinger",
  "Derr",
  "Dertmann",
  "Dethloff",
  "Deuschle",
  "Dieckmann",
  "Diedrich",
  "Diekmann",
  "Dienel",
  "Dies",
  "Dietrich",
  "Dietz",
  "Dietzsch",
  "Diezel",
  "Dilla",
  "Dingelstedt",
  "Dippl",
  "Dittmann",
  "Dittmar",
  "Dittmer",
  "Dix",
  "Dobbrunz",
  "Dobler",
  "Dohring",
  "Dolch",
  "Dold",
  "Dombrowski",
  "Donie",
  "Doskoczynski",
  "Dragu",
  "Drechsler",
  "Drees",
  "Dreher",
  "Dreier",
  "Dreissigacker",
  "Dressler",
  "Drews",
  "Duma",
  "Dutkiewicz",
  "Dyett",
  "Dylus",
  "Dächert",
  "Döbel",
  "Döring",
  "Dörner",
  "Dörre",
  "Dück",
  "Eberhard",
  "Eberhardt",
  "Ecker",
  "Eckhardt",
  "Edorh",
  "Effler",
  "Eggenmueller",
  "Ehm",
  "Ehmann",
  "Ehrig",
  "Eich",
  "Eichmann",
  "Eifert",
  "Einert",
  "Eisenlauer",
  "Ekpo",
  "Elbe",
  "Eleyth",
  "Elss",
  "Emert",
  "Emmelmann",
  "Ender",
  "Engel",
  "Engelen",
  "Engelmann",
  "Eplinius",
  "Erdmann",
  "Erhardt",
  "Erlei",
  "Erm",
  "Ernst",
  "Ertl",
  "Erwes",
  "Esenwein",
  "Esser",
  "Evers",
  "Everts",
  "Ewald",
  "Fahner",
  "Faller",
  "Falter",
  "Farber",
  "Fassbender",
  "Faulhaber",
  "Fehrig",
  "Feld",
  "Felke",
  "Feller",
  "Fenner",
  "Fenske",
  "Feuerbach",
  "Fietz",
  "Figl",
  "Figura",
  "Filipowski",
  "Filsinger",
  "Fincke",
  "Fink",
  "Finke",
  "Fischer",
  "Fitschen",
  "Fleischer",
  "Fleischmann",
  "Floder",
  "Florczak",
  "Flore",
  "Flottmann",
  "Forkel",
  "Forst",
  "Frahmeke",
  "Frank",
  "Franke",
  "Franta",
  "Frantz",
  "Franz",
  "Franzis",
  "Franzmann",
  "Frauen",
  "Frauendorf",
  "Freigang",
  "Freimann",
  "Freimuth",
  "Freisen",
  "Frenzel",
  "Frey",
  "Fricke",
  "Fried",
  "Friedek",
  "Friedenberg",
  "Friedmann",
  "Friedrich",
  "Friess",
  "Frisch",
  "Frohn",
  "Frosch",
  "Fuchs",
  "Fuhlbrügge",
  "Fusenig",
  "Fust",
  "Förster",
  "Gaba",
  "Gabius",
  "Gabler",
  "Gadschiew",
  "Gakstädter",
  "Galander",
  "Gamlin",
  "Gamper",
  "Gangnus",
  "Ganzmann",
  "Garatva",
  "Gast",
  "Gastel",
  "Gatzka",
  "Gauder",
  "Gebhardt",
  "Geese",
  "Gehre",
  "Gehrig",
  "Gehring",
  "Gehrke",
  "Geiger",
  "Geisler",
  "Geissler",
  "Gelling",
  "Gens",
  "Gerbennow",
  "Gerdel",
  "Gerhardt",
  "Gerschler",
  "Gerson",
  "Gesell",
  "Geyer",
  "Ghirmai",
  "Ghosh",
  "Giehl",
  "Gierisch",
  "Giesa",
  "Giesche",
  "Gilde",
  "Glatting",
  "Goebel",
  "Goedicke",
  "Goldbeck",
  "Goldfuss",
  "Goldkamp",
  "Goldkühle",
  "Goller",
  "Golling",
  "Gollnow",
  "Golomski",
  "Gombert",
  "Gotthardt",
  "Gottschalk",
  "Gotz",
  "Goy",
  "Gradzki",
  "Graf",
  "Grams",
  "Grasse",
  "Gratzky",
  "Grau",
  "Greb",
  "Green",
  "Greger",
  "Greithanner",
  "Greschner",
  "Griem",
  "Griese",
  "Grimm",
  "Gromisch",
  "Gross",
  "Grosser",
  "Grossheim",
  "Grosskopf",
  "Grothaus",
  "Grothkopp",
  "Grotke",
  "Grube",
  "Gruber",
  "Grundmann",
  "Gruning",
  "Gruszecki",
  "Gröss",
  "Grötzinger",
  "Grün",
  "Grüner",
  "Gummelt",
  "Gunkel",
  "Gunther",
  "Gutjahr",
  "Gutowicz",
  "Gutschank",
  "Göbel",
  "Göckeritz",
  "Göhler",
  "Görlich",
  "Görmer",
  "Götz",
  "Götzelmann",
  "Güldemeister",
  "Günther",
  "Günz",
  "Gürbig",
  "Haack",
  "Haaf",
  "Habel",
  "Hache",
  "Hackbusch",
  "Hackelbusch",
  "Hadfield",
  "Hadwich",
  "Haferkamp",
  "Hahn",
  "Hajek",
  "Hallmann",
  "Hamann",
  "Hanenberger",
  "Hannecker",
  "Hanniske",
  "Hansen",
  "Hardy",
  "Hargasser",
  "Harms",
  "Harnapp",
  "Harter",
  "Harting",
  "Hartlieb",
  "Hartmann",
  "Hartwig",
  "Hartz",
  "Haschke",
  "Hasler",
  "Hasse",
  "Hassfeld",
  "Haug",
  "Hauke",
  "Haupt",
  "Haverney",
  "Heberstreit",
  "Hechler",
  "Hecht",
  "Heck",
  "Hedermann",
  "Hehl",
  "Heidelmann",
  "Heidler",
  "Heinemann",
  "Heinig",
  "Heinke",
  "Heinrich",
  "Heinze",
  "Heiser",
  "Heist",
  "Hellmann",
  "Helm",
  "Helmke",
  "Helpling",
  "Hengmith",
  "Henkel",
  "Hennes",
  "Henry",
  "Hense",
  "Hensel",
  "Hentel",
  "Hentschel",
  "Hentschke",
  "Hepperle",
  "Herberger",
  "Herbrand",
  "Hering",
  "Hermann",
  "Hermecke",
  "Herms",
  "Herold",
  "Herrmann",
  "Herschmann",
  "Hertel",
  "Herweg",
  "Herwig",
  "Herzenberg",
  "Hess",
  "Hesse",
  "Hessek",
  "Hessler",
  "Hetzler",
  "Heuck",
  "Heydemüller",
  "Hiebl",
  "Hildebrand",
  "Hildenbrand",
  "Hilgendorf",
  "Hillard",
  "Hiller",
  "Hingsen",
  "Hingst",
  "Hinrichs",
  "Hirsch",
  "Hirschberg",
  "Hirt",
  "Hodea",
  "Hoffman",
  "Hoffmann",
  "Hofmann",
  "Hohenberger",
  "Hohl",
  "Hohn",
  "Hohnheiser",
  "Hold",
  "Holdt",
  "Holinski",
  "Holl",
  "Holtfreter",
  "Holz",
  "Holzdeppe",
  "Holzner",
  "Hommel",
  "Honz",
  "Hooss",
  "Hoppe",
  "Horak",
  "Horn",
  "Horna",
  "Hornung",
  "Hort",
  "Howard",
  "Huber",
  "Huckestein",
  "Hudak",
  "Huebel",
  "Hugo",
  "Huhn",
  "Hujo",
  "Huke",
  "Huls",
  "Humbert",
  "Huneke",
  "Huth",
  "Häber",
  "Häfner",
  "Höcke",
  "Höft",
  "Höhne",
  "Hönig",
  "Hördt",
  "Hübenbecker",
  "Hübl",
  "Hübner",
  "Hügel",
  "Hüttcher",
  "Hütter",
  "Ibe",
  "Ihly",
  "Illing",
  "Isak",
  "Isekenmeier",
  "Itt",
  "Jacob",
  "Jacobs",
  "Jagusch",
  "Jahn",
  "Jahnke",
  "Jakobs",
  "Jakubczyk",
  "Jambor",
  "Jamrozy",
  "Jander",
  "Janich",
  "Janke",
  "Jansen",
  "Jarets",
  "Jaros",
  "Jasinski",
  "Jasper",
  "Jegorov",
  "Jellinghaus",
  "Jeorga",
  "Jerschabek",
  "Jess",
  "John",
  "Jonas",
  "Jossa",
  "Jucken",
  "Jung",
  "Jungbluth",
  "Jungton",
  "Just",
  "Jürgens",
  "Kaczmarek",
  "Kaesmacher",
  "Kahl",
  "Kahlert",
  "Kahles",
  "Kahlmeyer",
  "Kaiser",
  "Kalinowski",
  "Kallabis",
  "Kallensee",
  "Kampf",
  "Kampschulte",
  "Kappe",
  "Kappler",
  "Karhoff",
  "Karrass",
  "Karst",
  "Karsten",
  "Karus",
  "Kass",
  "Kasten",
  "Kastner",
  "Katzinski",
  "Kaufmann",
  "Kaul",
  "Kausemann",
  "Kawohl",
  "Kazmarek",
  "Kedzierski",
  "Keil",
  "Keiner",
  "Keller",
  "Kelm",
  "Kempe",
  "Kemper",
  "Kempter",
  "Kerl",
  "Kern",
  "Kesselring",
  "Kesselschläger",
  "Kette",
  "Kettenis",
  "Keutel",
  "Kick",
  "Kiessling",
  "Kinadeter",
  "Kinzel",
  "Kinzy",
  "Kirch",
  "Kirst",
  "Kisabaka",
  "Klaas",
  "Klabuhn",
  "Klapper",
  "Klauder",
  "Klaus",
  "Kleeberg",
  "Kleiber",
  "Klein",
  "Kleinert",
  "Kleininger",
  "Kleinmann",
  "Kleinsteuber",
  "Kleiss",
  "Klemme",
  "Klimczak",
  "Klinger",
  "Klink",
  "Klopsch",
  "Klose",
  "Kloss",
  "Kluge",
  "Kluwe",
  "Knabe",
  "Kneifel",
  "Knetsch",
  "Knies",
  "Knippel",
  "Knobel",
  "Knoblich",
  "Knoll",
  "Knorr",
  "Knorscheidt",
  "Knut",
  "Kobs",
  "Koch",
  "Kochan",
  "Kock",
  "Koczulla",
  "Koderisch",
  "Koehl",
  "Koehler",
  "Koenig",
  "Koester",
  "Kofferschlager",
  "Koha",
  "Kohle",
  "Kohlmann",
  "Kohnle",
  "Kohrt",
  "Koj",
  "Kolb",
  "Koleiski",
  "Kolokas",
  "Komoll",
  "Konieczny",
  "Konig",
  "Konow",
  "Konya",
  "Koob",
  "Kopf",
  "Kosenkow",
  "Koster",
  "Koszewski",
  "Koubaa",
  "Kovacs",
  "Kowalick",
  "Kowalinski",
  "Kozakiewicz",
  "Krabbe",
  "Kraft",
  "Kral",
  "Kramer",
  "Krauel",
  "Kraus",
  "Krause",
  "Krauspe",
  "Kreb",
  "Krebs",
  "Kreissig",
  "Kresse",
  "Kreutz",
  "Krieger",
  "Krippner",
  "Krodinger",
  "Krohn",
  "Krol",
  "Kron",
  "Krueger",
  "Krug",
  "Kruger",
  "Krull",
  "Kruschinski",
  "Krämer",
  "Kröckert",
  "Kröger",
  "Krüger",
  "Kubera",
  "Kufahl",
  "Kuhlee",
  "Kuhnen",
  "Kulimann",
  "Kulma",
  "Kumbernuss",
  "Kummle",
  "Kunz",
  "Kupfer",
  "Kupprion",
  "Kuprion",
  "Kurnicki",
  "Kurrat",
  "Kurschilgen",
  "Kuschewitz",
  "Kuschmann",
  "Kuske",
  "Kustermann",
  "Kutscherauer",
  "Kutzner",
  "Kwadwo",
  "Kähler",
  "Käther",
  "Köhler",
  "Köhrbrück",
  "Köhre",
  "Kölotzei",
  "König",
  "Köpernick",
  "Köseoglu",
  "Kúhn",
  "Kúhnert",
  "Kühn",
  "Kühnel",
  "Kühnemund",
  "Kühnert",
  "Kühnke",
  "Küsters",
  "Küter",
  "Laack",
  "Lack",
  "Ladewig",
  "Lakomy",
  "Lammert",
  "Lamos",
  "Landmann",
  "Lang",
  "Lange",
  "Langfeld",
  "Langhirt",
  "Lanig",
  "Lauckner",
  "Lauinger",
  "Laurén",
  "Lausecker",
  "Laux",
  "Laws",
  "Lax",
  "Leberer",
  "Lehmann",
  "Lehner",
  "Leibold",
  "Leide",
  "Leimbach",
  "Leipold",
  "Leist",
  "Leiter",
  "Leiteritz",
  "Leitheim",
  "Leiwesmeier",
  "Lenfers",
  "Lenk",
  "Lenz",
  "Lenzen",
  "Leo",
  "Lepthin",
  "Lesch",
  "Leschnik",
  "Letzelter",
  "Lewin",
  "Lewke",
  "Leyckes",
  "Lg",
  "Lichtenfeld",
  "Lichtenhagen",
  "Lichtl",
  "Liebach",
  "Liebe",
  "Liebich",
  "Liebold",
  "Lieder",
  "Lienshöft",
  "Linden",
  "Lindenberg",
  "Lindenmayer",
  "Lindner",
  "Linke",
  "Linnenbaum",
  "Lippe",
  "Lipske",
  "Lipus",
  "Lischka",
  "Lobinger",
  "Logsch",
  "Lohmann",
  "Lohre",
  "Lohse",
  "Lokar",
  "Loogen",
  "Lorenz",
  "Losch",
  "Loska",
  "Lott",
  "Loy",
  "Lubina",
  "Ludolf",
  "Lufft",
  "Lukoschek",
  "Lutje",
  "Lutz",
  "Löser",
  "Löwa",
  "Lübke",
  "Maak",
  "Maczey",
  "Madetzky",
  "Madubuko",
  "Mai",
  "Maier",
  "Maisch",
  "Malek",
  "Malkus",
  "Mallmann",
  "Malucha",
  "Manns",
  "Manz",
  "Marahrens",
  "Marchewski",
  "Margis",
  "Markowski",
  "Marl",
  "Marner",
  "Marquart",
  "Marschek",
  "Martel",
  "Marten",
  "Martin",
  "Marx",
  "Marxen",
  "Mathes",
  "Mathies",
  "Mathiszik",
  "Matschke",
  "Mattern",
  "Matthes",
  "Matula",
  "Mau",
  "Maurer",
  "Mauroff",
  "May",
  "Maybach",
  "Mayer",
  "Mebold",
  "Mehl",
  "Mehlhorn",
  "Mehlorn",
  "Meier",
  "Meisch",
  "Meissner",
  "Meloni",
  "Melzer",
  "Menga",
  "Menne",
  "Mensah",
  "Mensing",
  "Merkel",
  "Merseburg",
  "Mertens",
  "Mesloh",
  "Metzger",
  "Metzner",
  "Mewes",
  "Meyer",
  "Michallek",
  "Michel",
  "Mielke",
  "Mikitenko",
  "Milde",
  "Minah",
  "Mintzlaff",
  "Mockenhaupt",
  "Moede",
  "Moedl",
  "Moeller",
  "Moguenara",
  "Mohr",
  "Mohrhard",
  "Molitor",
  "Moll",
  "Moller",
  "Molzan",
  "Montag",
  "Moormann",
  "Mordhorst",
  "Morgenstern",
  "Morhelfer",
  "Moritz",
  "Moser",
  "Motchebon",
  "Motzenbbäcker",
  "Mrugalla",
  "Muckenthaler",
  "Mues",
  "Muller",
  "Mulrain",
  "Mächtig",
  "Mäder",
  "Möcks",
  "Mögenburg",
  "Möhsner",
  "Möldner",
  "Möllenbeck",
  "Möller",
  "Möllinger",
  "Mörsch",
  "Mühleis",
  "Müller",
  "Münch",
  "Nabein",
  "Nabow",
  "Nagel",
  "Nannen",
  "Nastvogel",
  "Nau",
  "Naubert",
  "Naumann",
  "Ne",
  "Neimke",
  "Nerius",
  "Neubauer",
  "Neubert",
  "Neuendorf",
  "Neumair",
  "Neumann",
  "Neupert",
  "Neurohr",
  "Neuschwander",
  "Newton",
  "Ney",
  "Nicolay",
  "Niedermeier",
  "Nieklauson",
  "Niklaus",
  "Nitzsche",
  "Noack",
  "Nodler",
  "Nolte",
  "Normann",
  "Norris",
  "Northoff",
  "Nowak",
  "Nussbeck",
  "Nwachukwu",
  "Nytra",
  "Nöh",
  "Oberem",
  "Obergföll",
  "Obermaier",
  "Ochs",
  "Oeser",
  "Olbrich",
  "Onnen",
  "Ophey",
  "Oppong",
  "Orth",
  "Orthmann",
  "Oschkenat",
  "Osei",
  "Osenberg",
  "Ostendarp",
  "Ostwald",
  "Otte",
  "Otto",
  "Paesler",
  "Pajonk",
  "Pallentin",
  "Panzig",
  "Paschke",
  "Patzwahl",
  "Paukner",
  "Peselman",
  "Peter",
  "Peters",
  "Petzold",
  "Pfeiffer",
  "Pfennig",
  "Pfersich",
  "Pfingsten",
  "Pflieger",
  "Pflügner",
  "Philipp",
  "Pichlmaier",
  "Piesker",
  "Pietsch",
  "Pingpank",
  "Pinnock",
  "Pippig",
  "Pitschugin",
  "Plank",
  "Plass",
  "Platzer",
  "Plauk",
  "Plautz",
  "Pletsch",
  "Plotzitzka",
  "Poehn",
  "Poeschl",
  "Pogorzelski",
  "Pohl",
  "Pohland",
  "Pohle",
  "Polifka",
  "Polizzi",
  "Pollmächer",
  "Pomp",
  "Ponitzsch",
  "Porsche",
  "Porth",
  "Poschmann",
  "Poser",
  "Pottel",
  "Prah",
  "Prange",
  "Prediger",
  "Pressler",
  "Preuk",
  "Preuss",
  "Prey",
  "Priemer",
  "Proske",
  "Pusch",
  "Pöche",
  "Pöge",
  "Raabe",
  "Rabenstein",
  "Rach",
  "Radtke",
  "Rahn",
  "Ranftl",
  "Rangen",
  "Ranz",
  "Rapp",
  "Rath",
  "Rau",
  "Raubuch",
  "Raukuc",
  "Rautenkranz",
  "Rehwagen",
  "Reiber",
  "Reichardt",
  "Reichel",
  "Reichling",
  "Reif",
  "Reifenrath",
  "Reimann",
  "Reinberg",
  "Reinelt",
  "Reinhardt",
  "Reinke",
  "Reitze",
  "Renk",
  "Rentz",
  "Renz",
  "Reppin",
  "Restle",
  "Restorff",
  "Retzke",
  "Reuber",
  "Reumann",
  "Reus",
  "Reuss",
  "Reusse",
  "Rheder",
  "Rhoden",
  "Richards",
  "Richter",
  "Riedel",
  "Riediger",
  "Rieger",
  "Riekmann",
  "Riepl",
  "Riermeier",
  "Riester",
  "Riethmüller",
  "Rietmüller",
  "Rietscher",
  "Ringel",
  "Ringer",
  "Rink",
  "Ripken",
  "Ritosek",
  "Ritschel",
  "Ritter",
  "Rittweg",
  "Ritz",
  "Roba",
  "Rockmeier",
  "Rodehau",
  "Rodowski",
  "Roecker",
  "Roggatz",
  "Rohländer",
  "Rohrer",
  "Rokossa",
  "Roleder",
  "Roloff",
  "Roos",
  "Rosbach",
  "Roschinsky",
  "Rose",
  "Rosenauer",
  "Rosenbauer",
  "Rosenthal",
  "Rosksch",
  "Rossberg",
  "Rossler",
  "Roth",
  "Rother",
  "Ruch",
  "Ruckdeschel",
  "Rumpf",
  "Rupprecht",
  "Ruth",
  "Ryjikh",
  "Ryzih",
  "Rädler",
  "Räntsch",
  "Rödiger",
  "Röse",
  "Röttger",
  "Rücker",
  "Rüdiger",
  "Rüter",
  "Sachse",
  "Sack",
  "Saflanis",
  "Sagafe",
  "Sagonas",
  "Sahner",
  "Saile",
  "Sailer",
  "Salow",
  "Salzer",
  "Salzmann",
  "Sammert",
  "Sander",
  "Sarvari",
  "Sattelmaier",
  "Sauer",
  "Sauerland",
  "Saumweber",
  "Savoia",
  "Scc",
  "Schacht",
  "Schaefer",
  "Schaffarzik",
  "Schahbasian",
  "Scharf",
  "Schedler",
  "Scheer",
  "Schelk",
  "Schellenbeck",
  "Schembera",
  "Schenk",
  "Scherbarth",
  "Scherer",
  "Schersing",
  "Scherz",
  "Scheurer",
  "Scheuring",
  "Scheytt",
  "Schielke",
  "Schieskow",
  "Schildhauer",
  "Schilling",
  "Schima",
  "Schimmer",
  "Schindzielorz",
  "Schirmer",
  "Schirrmeister",
  "Schlachter",
  "Schlangen",
  "Schlawitz",
  "Schlechtweg",
  "Schley",
  "Schlicht",
  "Schlitzer",
  "Schmalzle",
  "Schmid",
  "Schmidt",
  "Schmidtchen",
  "Schmitt",
  "Schmitz",
  "Schmuhl",
  "Schneider",
  "Schnelting",
  "Schnieder",
  "Schniedermeier",
  "Schnürer",
  "Schoberg",
  "Scholz",
  "Schonberg",
  "Schondelmaier",
  "Schorr",
  "Schott",
  "Schottmann",
  "Schouren",
  "Schrader",
  "Schramm",
  "Schreck",
  "Schreiber",
  "Schreiner",
  "Schreiter",
  "Schroder",
  "Schröder",
  "Schuermann",
  "Schuff",
  "Schuhaj",
  "Schuldt",
  "Schult",
  "Schulte",
  "Schultz",
  "Schultze",
  "Schulz",
  "Schulze",
  "Schumacher",
  "Schumann",
  "Schupp",
  "Schuri",
  "Schuster",
  "Schwab",
  "Schwalm",
  "Schwanbeck",
  "Schwandke",
  "Schwanitz",
  "Schwarthoff",
  "Schwartz",
  "Schwarz",
  "Schwarzer",
  "Schwarzkopf",
  "Schwarzmeier",
  "Schwatlo",
  "Schweisfurth",
  "Schwennen",
  "Schwerdtner",
  "Schwidde",
  "Schwirkschlies",
  "Schwuchow",
  "Schäfer",
  "Schäffel",
  "Schäffer",
  "Schäning",
  "Schöckel",
  "Schönball",
  "Schönbeck",
  "Schönberg",
  "Schönebeck",
  "Schönenberger",
  "Schönfeld",
  "Schönherr",
  "Schönlebe",
  "Schötz",
  "Schüler",
  "Schüppel",
  "Schütz",
  "Schütze",
  "Seeger",
  "Seelig",
  "Sehls",
  "Seibold",
  "Seidel",
  "Seiders",
  "Seigel",
  "Seiler",
  "Seitz",
  "Semisch",
  "Senkel",
  "Sewald",
  "Siebel",
  "Siebert",
  "Siegling",
  "Sielemann",
  "Siemon",
  "Siener",
  "Sievers",
  "Siewert",
  "Sihler",
  "Sillah",
  "Simon",
  "Sinnhuber",
  "Sischka",
  "Skibicki",
  "Sladek",
  "Slotta",
  "Smieja",
  "Soboll",
  "Sokolowski",
  "Soller",
  "Sollner",
  "Sommer",
  "Somssich",
  "Sonn",
  "Sonnabend",
  "Spahn",
  "Spank",
  "Spelmeyer",
  "Spiegelburg",
  "Spielvogel",
  "Spinner",
  "Spitzmüller",
  "Splinter",
  "Sporrer",
  "Sprenger",
  "Spöttel",
  "Stahl",
  "Stang",
  "Stanger",
  "Stauss",
  "Steding",
  "Steffen",
  "Steffny",
  "Steidl",
  "Steigauf",
  "Stein",
  "Steinecke",
  "Steinert",
  "Steinkamp",
  "Steinmetz",
  "Stelkens",
  "Stengel",
  "Stengl",
  "Stenzel",
  "Stepanov",
  "Stephan",
  "Stern",
  "Steuk",
  "Stief",
  "Stifel",
  "Stoll",
  "Stolle",
  "Stolz",
  "Storl",
  "Storp",
  "Stoutjesdijk",
  "Stratmann",
  "Straub",
  "Strausa",
  "Streck",
  "Streese",
  "Strege",
  "Streit",
  "Streller",
  "Strieder",
  "Striezel",
  "Strogies",
  "Strohschank",
  "Strunz",
  "Strutz",
  "Stube",
  "Stöckert",
  "Stöppler",
  "Stöwer",
  "Stürmer",
  "Suffa",
  "Sujew",
  "Sussmann",
  "Suthe",
  "Sutschet",
  "Swillims",
  "Szendrei",
  "Sören",
  "Sürth",
  "Tafelmeier",
  "Tang",
  "Tasche",
  "Taufratshofer",
  "Tegethof",
  "Teichmann",
  "Tepper",
  "Terheiden",
  "Terlecki",
  "Teufel",
  "Theele",
  "Thieke",
  "Thimm",
  "Thiomas",
  "Thomas",
  "Thriene",
  "Thränhardt",
  "Thust",
  "Thyssen",
  "Thöne",
  "Tidow",
  "Tiedtke",
  "Tietze",
  "Tilgner",
  "Tillack",
  "Timmermann",
  "Tischler",
  "Tischmann",
  "Tittman",
  "Tivontschik",
  "Tonat",
  "Tonn",
  "Trampeli",
  "Trauth",
  "Trautmann",
  "Travan",
  "Treff",
  "Tremmel",
  "Tress",
  "Tsamonikian",
  "Tschiers",
  "Tschirch",
  "Tuch",
  "Tucholke",
  "Tudow",
  "Tuschmo",
  "Tächl",
  "Többen",
  "Töpfer",
  "Uhlemann",
  "Uhlig",
  "Uhrig",
  "Uibel",
  "Uliczka",
  "Ullmann",
  "Ullrich",
  "Umbach",
  "Umlauft",
  "Umminger",
  "Unger",
  "Unterpaintner",
  "Urban",
  "Urbaniak",
  "Urbansky",
  "Urhig",
  "Vahlensieck",
  "Van",
  "Vangermain",
  "Vater",
  "Venghaus",
  "Verniest",
  "Verzi",
  "Vey",
  "Viellehner",
  "Vieweg",
  "Voelkel",
  "Vogel",
  "Vogelgsang",
  "Vogt",
  "Voigt",
  "Vokuhl",
  "Volk",
  "Volker",
  "Volkmann",
  "Von",
  "Vona",
  "Vontein",
  "Wachenbrunner",
  "Wachtel",
  "Wagner",
  "Waibel",
  "Wakan",
  "Waldmann",
  "Wallner",
  "Wallstab",
  "Walter",
  "Walther",
  "Walton",
  "Walz",
  "Wanner",
  "Wartenberg",
  "Waschbüsch",
  "Wassilew",
  "Wassiluk",
  "Weber",
  "Wehrsen",
  "Weidlich",
  "Weidner",
  "Weigel",
  "Weight",
  "Weiler",
  "Weimer",
  "Weis",
  "Weiss",
  "Weller",
  "Welsch",
  "Welz",
  "Welzel",
  "Weniger",
  "Wenk",
  "Werle",
  "Werner",
  "Werrmann",
  "Wessel",
  "Wessinghage",
  "Weyel",
  "Wezel",
  "Wichmann",
  "Wickert",
  "Wiebe",
  "Wiechmann",
  "Wiegelmann",
  "Wierig",
  "Wiese",
  "Wieser",
  "Wilhelm",
  "Wilky",
  "Will",
  "Willwacher",
  "Wilts",
  "Wimmer",
  "Winkelmann",
  "Winkler",
  "Winter",
  "Wischek",
  "Wischer",
  "Wissing",
  "Wittich",
  "Wittl",
  "Wolf",
  "Wolfarth",
  "Wolff",
  "Wollenberg",
  "Wollmann",
  "Woytkowska",
  "Wujak",
  "Wurm",
  "Wyludda",
  "Wölpert",
  "Wöschler",
  "Wühn",
  "Wünsche",
  "Zach",
  "Zaczkiewicz",
  "Zahn",
  "Zaituc",
  "Zandt",
  "Zanner",
  "Zapletal",
  "Zauber",
  "Zeidler",
  "Zekl",
  "Zender",
  "Zeuch",
  "Zeyen",
  "Zeyhle",
  "Ziegler",
  "Zimanyi",
  "Zimmer",
  "Zimmermann",
  "Zinser",
  "Zintl",
  "Zipp",
  "Zipse",
  "Zschunke",
  "Zuber",
  "Zwiener",
  "Zümsande",
  "Östringer",
  "Überacker"
];

},{}],"node_modules/faker/lib/locales/de_AT/name/prefix.js":[function(require,module,exports) {
module["exports"] = [
  "Dr.",
  "Prof. Dr."
];

},{}],"node_modules/faker/lib/locales/de_AT/name/nobility_title_prefix.js":[function(require,module,exports) {
module["exports"] = [
  "zu",
  "von",
  "vom",
  "von der"
];

},{}],"node_modules/faker/lib/locales/de_AT/name/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{prefix} #{first_name} #{last_name}",
  "#{first_name} #{nobility_title_prefix} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}"
];

},{}],"node_modules/faker/lib/locales/de_AT/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");
name.prefix = require("./prefix");
name.nobility_title_prefix = require("./nobility_title_prefix");
name.name = require("./name");

},{"./first_name":"node_modules/faker/lib/locales/de_AT/name/first_name.js","./last_name":"node_modules/faker/lib/locales/de_AT/name/last_name.js","./prefix":"node_modules/faker/lib/locales/de_AT/name/prefix.js","./nobility_title_prefix":"node_modules/faker/lib/locales/de_AT/name/nobility_title_prefix.js","./name":"node_modules/faker/lib/locales/de_AT/name/name.js"}],"node_modules/faker/lib/locales/de_AT/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "01 #######",
  "01#######",
  "+43-1-#######",
  "+431#######",
  "0#### ####",
  "0#########",
  "+43-####-####",
  "+43 ########"
];

},{}],"node_modules/faker/lib/locales/de_AT/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/de_AT/phone_number/formats.js"}],"node_modules/faker/lib/locales/de_AT/cell_phone/formats.js":[function(require,module,exports) {
module["exports"] = [
  "+43-6##-#######",
  "06##-########",
  "+436#########",
  "06##########"
];

},{}],"node_modules/faker/lib/locales/de_AT/cell_phone/index.js":[function(require,module,exports) {
var cell_phone = {};
module['exports'] = cell_phone;
cell_phone.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/de_AT/cell_phone/formats.js"}],"node_modules/faker/lib/locales/de_AT/index.js":[function(require,module,exports) {
var de_AT = {};
module['exports'] = de_AT;
de_AT.title = "German (Austria)";
de_AT.address = require("./address");
de_AT.company = require("./company");
de_AT.internet = require("./internet");
de_AT.name = require("./name");
de_AT.phone_number = require("./phone_number");
de_AT.cell_phone = require("./cell_phone");

},{"./address":"node_modules/faker/lib/locales/de_AT/address/index.js","./company":"node_modules/faker/lib/locales/de_AT/company/index.js","./internet":"node_modules/faker/lib/locales/de_AT/internet/index.js","./name":"node_modules/faker/lib/locales/de_AT/name/index.js","./phone_number":"node_modules/faker/lib/locales/de_AT/phone_number/index.js","./cell_phone":"node_modules/faker/lib/locales/de_AT/cell_phone/index.js"}],"node_modules/faker/lib/locales/de_CH/address/country_code.js":[function(require,module,exports) {
module["exports"] = [
  "CH",
  "CH",
  "CH",
  "DE",
  "AT",
  "US",
  "LI",
  "US",
  "HK",
  "VN"
];

},{}],"node_modules/faker/lib/locales/de_CH/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "1###",
  "2###",
  "3###",
  "4###",
  "5###",
  "6###",
  "7###",
  "8###",
  "9###"
];

},{}],"node_modules/faker/lib/locales/de_CH/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "Schweiz"
];

},{}],"node_modules/faker/lib/locales/de_CH/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.country_code = require("./country_code");
address.postcode = require("./postcode");
address.default_country = require("./default_country");

},{"./country_code":"node_modules/faker/lib/locales/de_CH/address/country_code.js","./postcode":"node_modules/faker/lib/locales/de_CH/address/postcode.js","./default_country":"node_modules/faker/lib/locales/de_CH/address/default_country.js"}],"node_modules/faker/lib/locales/de_CH/company/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "AG",
  "GmbH",
  "und Söhne",
  "und Partner",
  "& Co.",
  "Gruppe",
  "LLC",
  "Inc."
];

},{}],"node_modules/faker/lib/locales/de_CH/company/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{Name.last_name} #{suffix}",
  "#{Name.last_name}-#{Name.last_name}",
  "#{Name.last_name}, #{Name.last_name} und #{Name.last_name}"
];

},{}],"node_modules/faker/lib/locales/de_CH/company/index.js":[function(require,module,exports) {
var company = {};
module['exports'] = company;
company.suffix = require("./suffix");
company.name = require("./name");

},{"./suffix":"node_modules/faker/lib/locales/de_CH/company/suffix.js","./name":"node_modules/faker/lib/locales/de_CH/company/name.js"}],"node_modules/faker/lib/locales/de_CH/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "com",
  "net",
  "biz",
  "ch",
  "de",
  "li",
  "at",
  "ch",
  "ch"
];

},{}],"node_modules/faker/lib/locales/de_CH/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.domain_suffix = require("./domain_suffix");

},{"./domain_suffix":"node_modules/faker/lib/locales/de_CH/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/de_CH/name/first_name.js":[function(require,module,exports) {
module["exports"] = [
    "Adolf",
    "Adrian",
    "Agnes",
    "Alain",
    "Albert",
    "Alberto",
    "Aldo",
    "Alex",
    "Alexander",
    "Alexandre",
    "Alfons",
    "Alfred",
    "Alice",
    "Alois",
    "André",
    "Andrea",
    "Andreas",
    "Angela",
    "Angelo",
    "Anita",
    "Anna",
    "Anne",
    "Anne-Marie",
    "Annemarie",
    "Antoine",
    "Anton",
    "Antonio",
    "Armin",
    "Arnold",
    "Arthur",
    "Astrid",
    "Barbara",
    "Beat",
    "Beatrice",
    "Beatrix",
    "Bernadette",
    "Bernard",
    "Bernhard",
    "Bettina",
    "Brigitta",
    "Brigitte",
    "Bruno",
    "Carlo",
    "Carmen",
    "Caroline",
    "Catherine",
    "Chantal",
    "Charles",
    "Charlotte",
    "Christa",
    "Christian",
    "Christiane",
    "Christina",
    "Christine",
    "Christoph",
    "Christophe",
    "Claire",
    "Claude",
    "Claudia",
    "Claudine",
    "Claudio",
    "Corinne",
    "Cornelia",
    "Daniel",
    "Daniela",
    "Daniele",
    "Danielle",
    "David",
    "Denis",
    "Denise",
    "Didier",
    "Dieter",
    "Dominik",
    "Dominique",
    "Dora",
    "Doris",
    "Edgar",
    "Edith",
    "Eduard",
    "Edwin",
    "Eliane",
    "Elisabeth",
    "Elsa",
    "Elsbeth",
    "Emil",
    "Enrico",
    "Eric",
    "Erica",
    "Erich",
    "Erika",
    "Ernst",
    "Erwin",
    "Esther",
    "Eugen",
    "Eva",
    "Eveline",
    "Evelyne",
    "Fabienne",
    "Felix",
    "Ferdinand",
    "Florence",
    "Francesco",
    "Francis",
    "Franco",
    "François",
    "Françoise",
    "Frank",
    "Franz",
    "Franziska",
    "Frédéric",
    "Fredy",
    "Fridolin",
    "Friedrich",
    "Fritz",
    "Gabriel",
    "Gabriela",
    "Gabrielle",
    "Georg",
    "Georges",
    "Gérald",
    "Gérard",
    "Gerhard",
    "Gertrud",
    "Gianni",
    "Gilbert",
    "Giorgio",
    "Giovanni",
    "Gisela",
    "Giuseppe",
    "Gottfried",
    "Guido",
    "Guy",
    "Hanna",
    "Hans",
    "Hans-Peter",
    "Hans-Rudolf",
    "Hans-Ulrich",
    "Hansjörg",
    "Hanspeter",
    "Hansruedi",
    "Hansueli",
    "Harry",
    "Heidi",
    "Heinrich",
    "Heinz",
    "Helen",
    "Helena",
    "Helene",
    "Helmut",
    "Henri",
    "Herbert",
    "Hermann",
    "Hildegard",
    "Hubert",
    "Hugo",
    "Ingrid",
    "Irene",
    "Iris",
    "Isabelle",
    "Jacqueline",
    "Jacques",
    "Jakob",
    "Jan",
    "Janine",
    "Jean",
    "Jean-Claude",
    "Jean-Daniel",
    "Jean-François",
    "Jean-Jacques",
    "Jean-Louis",
    "Jean-Luc",
    "Jean-Marc",
    "Jean-Marie",
    "Jean-Paul",
    "Jean-Pierre",
    "Johann",
    "Johanna",
    "Johannes",
    "John",
    "Jolanda",
    "Jörg",
    "Josef",
    "Joseph",
    "Josette",
    "Josiane",
    "Judith",
    "Julia",
    "Jürg",
    "Karin",
    "Karl",
    "Katharina",
    "Klaus",
    "Konrad",
    "Kurt",
    "Laura",
    "Laurence",
    "Laurent",
    "Leo",
    "Liliane",
    "Liselotte",
    "Louis",
    "Luca",
    "Luigi",
    "Lukas",
    "Lydia",
    "Madeleine",
    "Maja",
    "Manfred",
    "Manuel",
    "Manuela",
    "Marc",
    "Marcel",
    "Marco",
    "Margrit",
    "Margrith",
    "Maria",
    "Marianne",
    "Mario",
    "Marion",
    "Markus",
    "Marlène",
    "Marlies",
    "Marlis",
    "Martha",
    "Martin",
    "Martina",
    "Martine",
    "Massimo",
    "Matthias",
    "Maurice",
    "Max",
    "Maya",
    "Michael",
    "Michel",
    "Michele",
    "Micheline",
    "Monica",
    "Monika",
    "Monique",
    "Myriam",
    "Nadia",
    "Nadja",
    "Nathalie",
    "Nelly",
    "Nicolas",
    "Nicole",
    "Niklaus",
    "Norbert",
    "Olivier",
    "Oskar",
    "Otto",
    "Paola",
    "Paolo",
    "Pascal",
    "Patricia",
    "Patrick",
    "Paul",
    "Peter",
    "Petra",
    "Philipp",
    "Philippe",
    "Pia",
    "Pierre",
    "Pierre-Alain",
    "Pierre-André",
    "Pius",
    "Priska",
    "Rainer",
    "Raymond",
    "Regina",
    "Regula",
    "Reinhard",
    "Remo",
    "Renata",
    "Renate",
    "Renato",
    "Rene",
    "René",
    "Reto",
    "Richard",
    "Rita",
    "Robert",
    "Roberto",
    "Roger",
    "Roland",
    "Rolf",
    "Roman",
    "Rosa",
    "Rosemarie",
    "Rosmarie",
    "Rudolf",
    "Ruedi",
    "Ruth",
    "Sabine",
    "Samuel",
    "Sandra",
    "Sandro",
    "Serge",
    "Silvia",
    "Silvio",
    "Simon",
    "Simone",
    "Sonia",
    "Sonja",
    "Stefan",
    "Stephan",
    "Stéphane",
    "Stéphanie",
    "Susanna",
    "Susanne",
    "Suzanne",
    "Sylvia",
    "Sylvie",
    "Theo",
    "Theodor",
    "Therese",
    "Thomas",
    "Toni",
    "Ueli",
    "Ulrich",
    "Urs",
    "Ursula",
    "Verena",
    "Véronique",
    "Victor",
    "Viktor",
    "Vreni",
    "Walter",
    "Werner",
    "Willi",
    "Willy",
    "Wolfgang",
    "Yolande",
    "Yves",
    "Yvette",
    "Yvonne",

];

},{}],"node_modules/faker/lib/locales/de_CH/name/last_name.js":[function(require,module,exports) {
module["exports"] = [
    "Ackermann",
    "Aebi",
    "Albrecht",
    "Ammann",
    "Amrein",
    "Arnold",
    "Bachmann",
    "Bader",
    "Bär",
    "Bättig",
    "Bauer",
    "Baumann",
    "Baumgartner",
    "Baur",
    "Beck",
    "Benz",
    "Berger",
    "Bernasconi",
    "Betschart",
    "Bianchi",
    "Bieri",
    "Blaser",
    "Blum",
    "Bolliger",
    "Bosshard",
    "Braun",
    "Brun",
    "Brunner",
    "Bucher",
    "Bühler",
    "Bühlmann",
    "Burri",
    "Christen",
    "Egger",
    "Egli",
    "Eichenberger",
    "Erni",
    "Ernst",
    "Eugster",
    "Fankhauser",
    "Favre",
    "Fehr",
    "Felber",
    "Felder",
    "Ferrari",
    "Fischer",
    "Flückiger",
    "Forster",
    "Frei",
    "Frey",
    "Frick",
    "Friedli",
    "Fuchs",
    "Furrer",
    "Gasser",
    "Geiger",
    "Gerber",
    "Gfeller",
    "Giger",
    "Gloor",
    "Graf",
    "Grob",
    "Gross",
    "Gut",
    "Haas",
    "Häfliger",
    "Hafner",
    "Hartmann",
    "Hasler",
    "Hauser",
    "Hermann",
    "Herzog",
    "Hess",
    "Hirt",
    "Hodel",
    "Hofer",
    "Hoffmann",
    "Hofmann",
    "Hofstetter",
    "Hotz",
    "Huber",
    "Hug",
    "Hunziker",
    "Hürlimann",
    "Imhof",
    "Isler",
    "Iten",
    "Jäggi",
    "Jenni",
    "Jost",
    "Kägi",
    "Kaiser",
    "Kälin",
    "Käser",
    "Kaufmann",
    "Keller",
    "Kern",
    "Kessler",
    "Knecht",
    "Koch",
    "Kohler",
    "Kuhn",
    "Küng",
    "Kunz",
    "Lang",
    "Lanz",
    "Lehmann",
    "Leu",
    "Leunberger",
    "Lüscher",
    "Lustenberger",
    "Lüthi",
    "Lutz",
    "Mäder",
    "Maier",
    "Marti",
    "Martin",
    "Maurer",
    "Mayer",
    "Meier",
    "Meili",
    "Meister",
    "Merz",
    "Mettler",
    "Meyer",
    "Michel",
    "Moser",
    "Müller",
    "Näf",
    "Ott",
    "Peter",
    "Pfister",
    "Portmann",
    "Probst",
    "Rey",
    "Ritter",
    "Roos",
    "Roth",
    "Rüegg",
    "Schäfer",
    "Schaller",
    "Schär",
    "Schärer",
    "Schaub",
    "Scheidegger",
    "Schenk",
    "Scherrer",
    "Schlatter",
    "Schmid",
    "Schmidt",
    "Schneider",
    "Schnyder",
    "Schoch",
    "Schuler",
    "Schumacher",
    "Schürch",
    "Schwab",
    "Schwarz",
    "Schweizer",
    "Seiler",
    "Senn",
    "Sidler",
    "Siegrist",
    "Sigrist",
    "Spörri",
    "Stadelmann",
    "Stalder",
    "Staub",
    "Stauffer",
    "Steffen",
    "Steiger",
    "Steiner",
    "Steinmann",
    "Stettler",
    "Stocker",
    "Stöckli",
    "Stucki",
    "Studer",
    "Stutz",
    "Suter",
    "Sutter",
    "Tanner",
    "Thommen",
    "Tobler",
    "Vogel",
    "Vogt",
    "Wagner",
    "Walder",
    "Walter",
    "Weber",
    "Wegmann",
    "Wehrli",
    "Weibel",
    "Wenger",
    "Wettstein",
    "Widmer",
    "Winkler",
    "Wirth",
    "Wirz",
    "Wolf",
    "Wüthrich",
    "Wyss",
    "Zbinden",
    "Zehnder",
    "Ziegler",
    "Zimmermann",
    "Zingg",
    "Zollinger",
    "Zürcher"
];

},{}],"node_modules/faker/lib/locales/de_CH/name/prefix.js":[function(require,module,exports) {
module["exports"] = [
  "Hr.",
  "Fr.",
  "Dr."
];

},{}],"node_modules/faker/lib/locales/de_CH/name/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}"
];

},{}],"node_modules/faker/lib/locales/de_CH/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");
name.prefix = require("./prefix");
name.name = require("./name");

},{"./first_name":"node_modules/faker/lib/locales/de_CH/name/first_name.js","./last_name":"node_modules/faker/lib/locales/de_CH/name/last_name.js","./prefix":"node_modules/faker/lib/locales/de_CH/name/prefix.js","./name":"node_modules/faker/lib/locales/de_CH/name/name.js"}],"node_modules/faker/lib/locales/de_CH/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "0800 ### ###",
  "0800 ## ## ##",
  "0## ### ## ##",
  "0## ### ## ##",
  "+41 ## ### ## ##",
  "0900 ### ###",
  "076 ### ## ##",
  "+4178 ### ## ##",
  "0041 79 ### ## ##"
];

},{}],"node_modules/faker/lib/locales/de_CH/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/de_CH/phone_number/formats.js"}],"node_modules/faker/lib/locales/de_CH/index.js":[function(require,module,exports) {
var de_CH = {};
module['exports'] = de_CH;
de_CH.title = "German (Switzerland)";
de_CH.address = require("./address");
de_CH.company = require("./company");
de_CH.internet = require("./internet");
de_CH.name = require("./name");
de_CH.phone_number = require("./phone_number");

},{"./address":"node_modules/faker/lib/locales/de_CH/address/index.js","./company":"node_modules/faker/lib/locales/de_CH/company/index.js","./internet":"node_modules/faker/lib/locales/de_CH/internet/index.js","./name":"node_modules/faker/lib/locales/de_CH/name/index.js","./phone_number":"node_modules/faker/lib/locales/de_CH/phone_number/index.js"}],"node_modules/faker/lib/locales/en/address/city_prefix.js":[function(require,module,exports) {
module["exports"] = [
  "North",
  "East",
  "West",
  "South",
  "New",
  "Lake",
  "Port"
];

},{}],"node_modules/faker/lib/locales/en/address/city_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "town",
  "ton",
  "land",
  "ville",
  "berg",
  "burgh",
  "borough",
  "bury",
  "view",
  "port",
  "mouth",
  "stad",
  "furt",
  "chester",
  "mouth",
  "fort",
  "haven",
  "side",
  "shire"
];

},{}],"node_modules/faker/lib/locales/en/address/county.js":[function(require,module,exports) {
module["exports"] = [
  "Avon",
  "Bedfordshire",
  "Berkshire",
  "Borders",
  "Buckinghamshire",
  "Cambridgeshire"
];

},{}],"node_modules/faker/lib/locales/en/address/country.js":[function(require,module,exports) {
module["exports"] = [
  "Afghanistan",
  "Albania",
  "Algeria",
  "American Samoa",
  "Andorra",
  "Angola",
  "Anguilla",
  "Antarctica (the territory South of 60 deg S)",
  "Antigua and Barbuda",
  "Argentina",
  "Armenia",
  "Aruba",
  "Australia",
  "Austria",
  "Azerbaijan",
  "Bahamas",
  "Bahrain",
  "Bangladesh",
  "Barbados",
  "Belarus",
  "Belgium",
  "Belize",
  "Benin",
  "Bermuda",
  "Bhutan",
  "Bolivia",
  "Bosnia and Herzegovina",
  "Botswana",
  "Bouvet Island (Bouvetoya)",
  "Brazil",
  "British Indian Ocean Territory (Chagos Archipelago)",
  "Brunei Darussalam",
  "Bulgaria",
  "Burkina Faso",
  "Burundi",
  "Cambodia",
  "Cameroon",
  "Canada",
  "Cape Verde",
  "Cayman Islands",
  "Central African Republic",
  "Chad",
  "Chile",
  "China",
  "Christmas Island",
  "Cocos (Keeling) Islands",
  "Colombia",
  "Comoros",
  "Congo",
  "Cook Islands",
  "Costa Rica",
  "Cote d'Ivoire",
  "Croatia",
  "Cuba",
  "Cyprus",
  "Czech Republic",
  "Denmark",
  "Djibouti",
  "Dominica",
  "Dominican Republic",
  "Ecuador",
  "Egypt",
  "El Salvador",
  "Equatorial Guinea",
  "Eritrea",
  "Estonia",
  "Ethiopia",
  "Faroe Islands",
  "Falkland Islands (Malvinas)",
  "Fiji",
  "Finland",
  "France",
  "French Guiana",
  "French Polynesia",
  "French Southern Territories",
  "Gabon",
  "Gambia",
  "Georgia",
  "Germany",
  "Ghana",
  "Gibraltar",
  "Greece",
  "Greenland",
  "Grenada",
  "Guadeloupe",
  "Guam",
  "Guatemala",
  "Guernsey",
  "Guinea",
  "Guinea-Bissau",
  "Guyana",
  "Haiti",
  "Heard Island and McDonald Islands",
  "Holy See (Vatican City State)",
  "Honduras",
  "Hong Kong",
  "Hungary",
  "Iceland",
  "India",
  "Indonesia",
  "Iran",
  "Iraq",
  "Ireland",
  "Isle of Man",
  "Israel",
  "Italy",
  "Jamaica",
  "Japan",
  "Jersey",
  "Jordan",
  "Kazakhstan",
  "Kenya",
  "Kiribati",
  "Democratic People's Republic of Korea",
  "Republic of Korea",
  "Kuwait",
  "Kyrgyz Republic",
  "Lao People's Democratic Republic",
  "Latvia",
  "Lebanon",
  "Lesotho",
  "Liberia",
  "Libyan Arab Jamahiriya",
  "Liechtenstein",
  "Lithuania",
  "Luxembourg",
  "Macao",
  "Macedonia",
  "Madagascar",
  "Malawi",
  "Malaysia",
  "Maldives",
  "Mali",
  "Malta",
  "Marshall Islands",
  "Martinique",
  "Mauritania",
  "Mauritius",
  "Mayotte",
  "Mexico",
  "Micronesia",
  "Moldova",
  "Monaco",
  "Mongolia",
  "Montenegro",
  "Montserrat",
  "Morocco",
  "Mozambique",
  "Myanmar",
  "Namibia",
  "Nauru",
  "Nepal",
  "Netherlands Antilles",
  "Netherlands",
  "New Caledonia",
  "New Zealand",
  "Nicaragua",
  "Niger",
  "Nigeria",
  "Niue",
  "Norfolk Island",
  "Northern Mariana Islands",
  "Norway",
  "Oman",
  "Pakistan",
  "Palau",
  "Palestinian Territory",
  "Panama",
  "Papua New Guinea",
  "Paraguay",
  "Peru",
  "Philippines",
  "Pitcairn Islands",
  "Poland",
  "Portugal",
  "Puerto Rico",
  "Qatar",
  "Reunion",
  "Romania",
  "Russian Federation",
  "Rwanda",
  "Saint Barthelemy",
  "Saint Helena",
  "Saint Kitts and Nevis",
  "Saint Lucia",
  "Saint Martin",
  "Saint Pierre and Miquelon",
  "Saint Vincent and the Grenadines",
  "Samoa",
  "San Marino",
  "Sao Tome and Principe",
  "Saudi Arabia",
  "Senegal",
  "Serbia",
  "Seychelles",
  "Sierra Leone",
  "Singapore",
  "Slovakia (Slovak Republic)",
  "Slovenia",
  "Solomon Islands",
  "Somalia",
  "South Africa",
  "South Georgia and the South Sandwich Islands",
  "Spain",
  "Sri Lanka",
  "Sudan",
  "Suriname",
  "Svalbard & Jan Mayen Islands",
  "Swaziland",
  "Sweden",
  "Switzerland",
  "Syrian Arab Republic",
  "Taiwan",
  "Tajikistan",
  "Tanzania",
  "Thailand",
  "Timor-Leste",
  "Togo",
  "Tokelau",
  "Tonga",
  "Trinidad and Tobago",
  "Tunisia",
  "Turkey",
  "Turkmenistan",
  "Turks and Caicos Islands",
  "Tuvalu",
  "Uganda",
  "Ukraine",
  "United Arab Emirates",
  "United Kingdom",
  "United States of America",
  "United States Minor Outlying Islands",
  "Uruguay",
  "Uzbekistan",
  "Vanuatu",
  "Venezuela",
  "Vietnam",
  "Virgin Islands, British",
  "Virgin Islands, U.S.",
  "Wallis and Futuna",
  "Western Sahara",
  "Yemen",
  "Zambia",
  "Zimbabwe"
];

},{}],"node_modules/faker/lib/locales/en/address/country_code.js":[function(require,module,exports) {
module["exports"] = [
  "AD",
  "AE",
  "AF",
  "AG",
  "AI",
  "AL",
  "AM",
  "AO",
  "AQ",
  "AR",
  "AS",
  "AT",
  "AU",
  "AW",
  "AX",
  "AZ",
  "BA",
  "BB",
  "BD",
  "BE",
  "BF",
  "BG",
  "BH",
  "BI",
  "BJ",
  "BL",
  "BM",
  "BN",
  "BO",
  "BQ",
  "BQ",
  "BR",
  "BS",
  "BT",
  "BV",
  "BW",
  "BY",
  "BZ",
  "CA",
  "CC",
  "CD",
  "CF",
  "CG",
  "CH",
  "CI",
  "CK",
  "CL",
  "CM",
  "CN",
  "CO",
  "CR",
  "CU",
  "CV",
  "CW",
  "CX",
  "CY",
  "CZ",
  "DE",
  "DJ",
  "DK",
  "DM",
  "DO",
  "DZ",
  "EC",
  "EE",
  "EG",
  "EH",
  "ER",
  "ES",
  "ET",
  "FI",
  "FJ",
  "FK",
  "FM",
  "FO",
  "FR",
  "GA",
  "GB",
  "GD",
  "GE",
  "GF",
  "GG",
  "GH",
  "GI",
  "GL",
  "GM",
  "GN",
  "GP",
  "GQ",
  "GR",
  "GS",
  "GT",
  "GU",
  "GW",
  "GY",
  "HK",
  "HM",
  "HN",
  "HR",
  "HT",
  "HU",
  "ID",
  "IE",
  "IL",
  "IM",
  "IN",
  "IO",
  "IQ",
  "IR",
  "IS",
  "IT",
  "JE",
  "JM",
  "JO",
  "JP",
  "KE",
  "KG",
  "KH",
  "KI",
  "KM",
  "KN",
  "KP",
  "KR",
  "KW",
  "KY",
  "KZ",
  "LA",
  "LB",
  "LC",
  "LI",
  "LK",
  "LR",
  "LS",
  "LT",
  "LU",
  "LV",
  "LY",
  "MA",
  "MC",
  "MD",
  "ME",
  "MF",
  "MG",
  "MH",
  "MK",
  "ML",
  "MM",
  "MN",
  "MO",
  "MP",
  "MQ",
  "MR",
  "MS",
  "MT",
  "MU",
  "MV",
  "MW",
  "MX",
  "MY",
  "MZ",
  "NA",
  "NC",
  "NE",
  "NF",
  "NG",
  "NI",
  "NL",
  "NO",
  "NP",
  "NR",
  "NU",
  "NZ",
  "OM",
  "PA",
  "PE",
  "PF",
  "PG",
  "PH",
  "PK",
  "PL",
  "PM",
  "PN",
  "PR",
  "PS",
  "PT",
  "PW",
  "PY",
  "QA",
  "RE",
  "RO",
  "RS",
  "RU",
  "RW",
  "SA",
  "SB",
  "SC",
  "SD",
  "SE",
  "SG",
  "SH",
  "SI",
  "SJ",
  "SK",
  "SL",
  "SM",
  "SN",
  "SO",
  "SR",
  "SS",
  "ST",
  "SV",
  "SX",
  "SY",
  "SZ",
  "TC",
  "TD",
  "TF",
  "TG",
  "TH",
  "TJ",
  "TK",
  "TL",
  "TM",
  "TN",
  "TO",
  "TR",
  "TT",
  "TV",
  "TW",
  "TZ",
  "UA",
  "UG",
  "UM",
  "US",
  "UY",
  "UZ",
  "VA",
  "VC",
  "VE",
  "VG",
  "VI",
  "VN",
  "VU",
  "WF",
  "WS",
  "YE",
  "YT",
  "ZA",
  "ZM",
  "ZW"
];

},{}],"node_modules/faker/lib/locales/en/address/building_number.js":[function(require,module,exports) {
module["exports"] = [
  "#####",
  "####",
  "###"
];

},{}],"node_modules/faker/lib/locales/en/address/street_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "Alley",
  "Avenue",
  "Branch",
  "Bridge",
  "Brook",
  "Brooks",
  "Burg",
  "Burgs",
  "Bypass",
  "Camp",
  "Canyon",
  "Cape",
  "Causeway",
  "Center",
  "Centers",
  "Circle",
  "Circles",
  "Cliff",
  "Cliffs",
  "Club",
  "Common",
  "Corner",
  "Corners",
  "Course",
  "Court",
  "Courts",
  "Cove",
  "Coves",
  "Creek",
  "Crescent",
  "Crest",
  "Crossing",
  "Crossroad",
  "Curve",
  "Dale",
  "Dam",
  "Divide",
  "Drive",
  "Drive",
  "Drives",
  "Estate",
  "Estates",
  "Expressway",
  "Extension",
  "Extensions",
  "Fall",
  "Falls",
  "Ferry",
  "Field",
  "Fields",
  "Flat",
  "Flats",
  "Ford",
  "Fords",
  "Forest",
  "Forge",
  "Forges",
  "Fork",
  "Forks",
  "Fort",
  "Freeway",
  "Garden",
  "Gardens",
  "Gateway",
  "Glen",
  "Glens",
  "Green",
  "Greens",
  "Grove",
  "Groves",
  "Harbor",
  "Harbors",
  "Haven",
  "Heights",
  "Highway",
  "Hill",
  "Hills",
  "Hollow",
  "Inlet",
  "Inlet",
  "Island",
  "Island",
  "Islands",
  "Islands",
  "Isle",
  "Isle",
  "Junction",
  "Junctions",
  "Key",
  "Keys",
  "Knoll",
  "Knolls",
  "Lake",
  "Lakes",
  "Land",
  "Landing",
  "Lane",
  "Light",
  "Lights",
  "Loaf",
  "Lock",
  "Locks",
  "Locks",
  "Lodge",
  "Lodge",
  "Loop",
  "Mall",
  "Manor",
  "Manors",
  "Meadow",
  "Meadows",
  "Mews",
  "Mill",
  "Mills",
  "Mission",
  "Mission",
  "Motorway",
  "Mount",
  "Mountain",
  "Mountain",
  "Mountains",
  "Mountains",
  "Neck",
  "Orchard",
  "Oval",
  "Overpass",
  "Park",
  "Parks",
  "Parkway",
  "Parkways",
  "Pass",
  "Passage",
  "Path",
  "Pike",
  "Pine",
  "Pines",
  "Place",
  "Plain",
  "Plains",
  "Plains",
  "Plaza",
  "Plaza",
  "Point",
  "Points",
  "Port",
  "Port",
  "Ports",
  "Ports",
  "Prairie",
  "Prairie",
  "Radial",
  "Ramp",
  "Ranch",
  "Rapid",
  "Rapids",
  "Rest",
  "Ridge",
  "Ridges",
  "River",
  "Road",
  "Road",
  "Roads",
  "Roads",
  "Route",
  "Row",
  "Rue",
  "Run",
  "Shoal",
  "Shoals",
  "Shore",
  "Shores",
  "Skyway",
  "Spring",
  "Springs",
  "Springs",
  "Spur",
  "Spurs",
  "Square",
  "Square",
  "Squares",
  "Squares",
  "Station",
  "Station",
  "Stravenue",
  "Stravenue",
  "Stream",
  "Stream",
  "Street",
  "Street",
  "Streets",
  "Summit",
  "Summit",
  "Terrace",
  "Throughway",
  "Trace",
  "Track",
  "Trafficway",
  "Trail",
  "Trail",
  "Tunnel",
  "Tunnel",
  "Turnpike",
  "Turnpike",
  "Underpass",
  "Union",
  "Unions",
  "Valley",
  "Valleys",
  "Via",
  "Viaduct",
  "View",
  "Views",
  "Village",
  "Village",
  "Villages",
  "Ville",
  "Vista",
  "Vista",
  "Walk",
  "Walks",
  "Wall",
  "Way",
  "Ways",
  "Well",
  "Wells"
];

},{}],"node_modules/faker/lib/locales/en/address/secondary_address.js":[function(require,module,exports) {
module["exports"] = [
  "Apt. ###",
  "Suite ###"
];

},{}],"node_modules/faker/lib/locales/en/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "#####",
  "#####-####"
];

},{}],"node_modules/faker/lib/locales/en/address/postcode_by_state.js":[function(require,module,exports) {
module["exports"] = [
  "#####",
  "#####-####"
];

},{}],"node_modules/faker/lib/locales/en/address/state.js":[function(require,module,exports) {
module["exports"] = [
  "Alabama",
  "Alaska",
  "Arizona",
  "Arkansas",
  "California",
  "Colorado",
  "Connecticut",
  "Delaware",
  "Florida",
  "Georgia",
  "Hawaii",
  "Idaho",
  "Illinois",
  "Indiana",
  "Iowa",
  "Kansas",
  "Kentucky",
  "Louisiana",
  "Maine",
  "Maryland",
  "Massachusetts",
  "Michigan",
  "Minnesota",
  "Mississippi",
  "Missouri",
  "Montana",
  "Nebraska",
  "Nevada",
  "New Hampshire",
  "New Jersey",
  "New Mexico",
  "New York",
  "North Carolina",
  "North Dakota",
  "Ohio",
  "Oklahoma",
  "Oregon",
  "Pennsylvania",
  "Rhode Island",
  "South Carolina",
  "South Dakota",
  "Tennessee",
  "Texas",
  "Utah",
  "Vermont",
  "Virginia",
  "Washington",
  "West Virginia",
  "Wisconsin",
  "Wyoming"
];

},{}],"node_modules/faker/lib/locales/en/address/state_abbr.js":[function(require,module,exports) {
module["exports"] = [
  "AL",
  "AK",
  "AZ",
  "AR",
  "CA",
  "CO",
  "CT",
  "DE",
  "FL",
  "GA",
  "HI",
  "ID",
  "IL",
  "IN",
  "IA",
  "KS",
  "KY",
  "LA",
  "ME",
  "MD",
  "MA",
  "MI",
  "MN",
  "MS",
  "MO",
  "MT",
  "NE",
  "NV",
  "NH",
  "NJ",
  "NM",
  "NY",
  "NC",
  "ND",
  "OH",
  "OK",
  "OR",
  "PA",
  "RI",
  "SC",
  "SD",
  "TN",
  "TX",
  "UT",
  "VT",
  "VA",
  "WA",
  "WV",
  "WI",
  "WY"
];

},{}],"node_modules/faker/lib/locales/en/address/time_zone.js":[function(require,module,exports) {
module["exports"] = [
  "Pacific/Midway",
  "Pacific/Pago_Pago",
  "Pacific/Honolulu",
  "America/Juneau",
  "America/Los_Angeles",
  "America/Tijuana",
  "America/Denver",
  "America/Phoenix",
  "America/Chihuahua",
  "America/Mazatlan",
  "America/Chicago",
  "America/Regina",
  "America/Mexico_City",
  "America/Mexico_City",
  "America/Monterrey",
  "America/Guatemala",
  "America/New_York",
  "America/Indiana/Indianapolis",
  "America/Bogota",
  "America/Lima",
  "America/Lima",
  "America/Halifax",
  "America/Caracas",
  "America/La_Paz",
  "America/Santiago",
  "America/St_Johns",
  "America/Sao_Paulo",
  "America/Argentina/Buenos_Aires",
  "America/Guyana",
  "America/Godthab",
  "Atlantic/South_Georgia",
  "Atlantic/Azores",
  "Atlantic/Cape_Verde",
  "Europe/Dublin",
  "Europe/London",
  "Europe/Lisbon",
  "Europe/London",
  "Africa/Casablanca",
  "Africa/Monrovia",
  "Etc/UTC",
  "Europe/Belgrade",
  "Europe/Bratislava",
  "Europe/Budapest",
  "Europe/Ljubljana",
  "Europe/Prague",
  "Europe/Sarajevo",
  "Europe/Skopje",
  "Europe/Warsaw",
  "Europe/Zagreb",
  "Europe/Brussels",
  "Europe/Copenhagen",
  "Europe/Madrid",
  "Europe/Paris",
  "Europe/Amsterdam",
  "Europe/Berlin",
  "Europe/Berlin",
  "Europe/Rome",
  "Europe/Stockholm",
  "Europe/Vienna",
  "Africa/Algiers",
  "Europe/Bucharest",
  "Africa/Cairo",
  "Europe/Helsinki",
  "Europe/Kiev",
  "Europe/Riga",
  "Europe/Sofia",
  "Europe/Tallinn",
  "Europe/Vilnius",
  "Europe/Athens",
  "Europe/Istanbul",
  "Europe/Minsk",
  "Asia/Jerusalem",
  "Africa/Harare",
  "Africa/Johannesburg",
  "Europe/Moscow",
  "Europe/Moscow",
  "Europe/Moscow",
  "Asia/Kuwait",
  "Asia/Riyadh",
  "Africa/Nairobi",
  "Asia/Baghdad",
  "Asia/Tehran",
  "Asia/Muscat",
  "Asia/Muscat",
  "Asia/Baku",
  "Asia/Tbilisi",
  "Asia/Yerevan",
  "Asia/Kabul",
  "Asia/Yekaterinburg",
  "Asia/Karachi",
  "Asia/Karachi",
  "Asia/Tashkent",
  "Asia/Kolkata",
  "Asia/Kolkata",
  "Asia/Kolkata",
  "Asia/Kolkata",
  "Asia/Kathmandu",
  "Asia/Dhaka",
  "Asia/Dhaka",
  "Asia/Colombo",
  "Asia/Almaty",
  "Asia/Novosibirsk",
  "Asia/Rangoon",
  "Asia/Bangkok",
  "Asia/Bangkok",
  "Asia/Jakarta",
  "Asia/Krasnoyarsk",
  "Asia/Shanghai",
  "Asia/Chongqing",
  "Asia/Hong_Kong",
  "Asia/Urumqi",
  "Asia/Kuala_Lumpur",
  "Asia/Singapore",
  "Asia/Taipei",
  "Australia/Perth",
  "Asia/Irkutsk",
  "Asia/Ulaanbaatar",
  "Asia/Seoul",
  "Asia/Tokyo",
  "Asia/Tokyo",
  "Asia/Tokyo",
  "Asia/Yakutsk",
  "Australia/Darwin",
  "Australia/Adelaide",
  "Australia/Melbourne",
  "Australia/Melbourne",
  "Australia/Sydney",
  "Australia/Brisbane",
  "Australia/Hobart",
  "Asia/Vladivostok",
  "Pacific/Guam",
  "Pacific/Port_Moresby",
  "Asia/Magadan",
  "Asia/Magadan",
  "Pacific/Noumea",
  "Pacific/Fiji",
  "Asia/Kamchatka",
  "Pacific/Majuro",
  "Pacific/Auckland",
  "Pacific/Auckland",
  "Pacific/Tongatapu",
  "Pacific/Fakaofo",
  "Pacific/Apia"
];

},{}],"node_modules/faker/lib/locales/en/address/city.js":[function(require,module,exports) {
module["exports"] = [
  "#{city_prefix} #{Name.first_name}#{city_suffix}",
  "#{city_prefix} #{Name.first_name}",
  "#{Name.first_name}#{city_suffix}",
  "#{Name.last_name}#{city_suffix}"
];

},{}],"node_modules/faker/lib/locales/en/address/street_name.js":[function(require,module,exports) {
module["exports"] = [
  "#{Name.first_name} #{street_suffix}",
  "#{Name.last_name} #{street_suffix}"
];

},{}],"node_modules/faker/lib/locales/en/address/street_address.js":[function(require,module,exports) {
module["exports"] = [
  "#{building_number} #{street_name}"
];

},{}],"node_modules/faker/lib/locales/en/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "United States of America"
];

},{}],"node_modules/faker/lib/locales/en/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.city_prefix = require("./city_prefix");
address.city_suffix = require("./city_suffix");
address.county = require("./county");
address.country = require("./country");
address.country_code = require("./country_code");
address.building_number = require("./building_number");
address.street_suffix = require("./street_suffix");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.postcode_by_state = require("./postcode_by_state");
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.time_zone = require("./time_zone");
address.city = require("./city");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./city_prefix":"node_modules/faker/lib/locales/en/address/city_prefix.js","./city_suffix":"node_modules/faker/lib/locales/en/address/city_suffix.js","./county":"node_modules/faker/lib/locales/en/address/county.js","./country":"node_modules/faker/lib/locales/en/address/country.js","./country_code":"node_modules/faker/lib/locales/en/address/country_code.js","./building_number":"node_modules/faker/lib/locales/en/address/building_number.js","./street_suffix":"node_modules/faker/lib/locales/en/address/street_suffix.js","./secondary_address":"node_modules/faker/lib/locales/en/address/secondary_address.js","./postcode":"node_modules/faker/lib/locales/en/address/postcode.js","./postcode_by_state":"node_modules/faker/lib/locales/en/address/postcode_by_state.js","./state":"node_modules/faker/lib/locales/en/address/state.js","./state_abbr":"node_modules/faker/lib/locales/en/address/state_abbr.js","./time_zone":"node_modules/faker/lib/locales/en/address/time_zone.js","./city":"node_modules/faker/lib/locales/en/address/city.js","./street_name":"node_modules/faker/lib/locales/en/address/street_name.js","./street_address":"node_modules/faker/lib/locales/en/address/street_address.js","./default_country":"node_modules/faker/lib/locales/en/address/default_country.js"}],"node_modules/faker/lib/locales/en/credit_card/visa.js":[function(require,module,exports) {
module["exports"] = [
  "/4###########L/",
  "/4###-####-####-###L/"
];

},{}],"node_modules/faker/lib/locales/en/credit_card/mastercard.js":[function(require,module,exports) {
module["exports"] = [
  "/5[1-5]##-####-####-###L/",
  "/6771-89##-####-###L/"
];

},{}],"node_modules/faker/lib/locales/en/credit_card/discover.js":[function(require,module,exports) {
module["exports"] = [
  "/6011-####-####-###L/",
  "/65##-####-####-###L/",
  "/64[4-9]#-####-####-###L/",
  "/6011-62##-####-####-###L/",
  "/65##-62##-####-####-###L/",
  "/64[4-9]#-62##-####-####-###L/"
];

},{}],"node_modules/faker/lib/locales/en/credit_card/american_express.js":[function(require,module,exports) {
module["exports"] = [
  "/34##-######-####L/",
  "/37##-######-####L/"
];

},{}],"node_modules/faker/lib/locales/en/credit_card/diners_club.js":[function(require,module,exports) {
module["exports"] = [
  "/30[0-5]#-######-###L/",
  "/368#-######-###L/"
];

},{}],"node_modules/faker/lib/locales/en/credit_card/jcb.js":[function(require,module,exports) {
module["exports"] = [
  "/3528-####-####-###L/",
  "/3529-####-####-###L/",
  "/35[3-8]#-####-####-###L/"
];

},{}],"node_modules/faker/lib/locales/en/credit_card/switch.js":[function(require,module,exports) {
module["exports"] = [
  "/6759-####-####-###L/",
  "/6759-####-####-####-#L/",
  "/6759-####-####-####-##L/"
];

},{}],"node_modules/faker/lib/locales/en/credit_card/solo.js":[function(require,module,exports) {
module["exports"] = [
  "/6767-####-####-###L/",
  "/6767-####-####-####-#L/",
  "/6767-####-####-####-##L/"
];

},{}],"node_modules/faker/lib/locales/en/credit_card/maestro.js":[function(require,module,exports) {
module["exports"] = [
  "/50#{9,16}L/",
  "/5[6-8]#{9,16}L/",
  "/56##{9,16}L/"
];

},{}],"node_modules/faker/lib/locales/en/credit_card/laser.js":[function(require,module,exports) {
module["exports"] = [
  "/6304###########L/",
  "/6706###########L/",
  "/6771###########L/",
  "/6709###########L/",
  "/6304#########{5,6}L/",
  "/6706#########{5,6}L/",
  "/6771#########{5,6}L/",
  "/6709#########{5,6}L/"
];

},{}],"node_modules/faker/lib/locales/en/credit_card/index.js":[function(require,module,exports) {
var credit_card = {};
module['exports'] = credit_card;
credit_card.visa = require("./visa");
credit_card.mastercard = require("./mastercard");
credit_card.discover = require("./discover");
credit_card.american_express = require("./american_express");
credit_card.diners_club = require("./diners_club");
credit_card.jcb = require("./jcb");
credit_card.switch = require("./switch");
credit_card.solo = require("./solo");
credit_card.maestro = require("./maestro");
credit_card.laser = require("./laser");

},{"./visa":"node_modules/faker/lib/locales/en/credit_card/visa.js","./mastercard":"node_modules/faker/lib/locales/en/credit_card/mastercard.js","./discover":"node_modules/faker/lib/locales/en/credit_card/discover.js","./american_express":"node_modules/faker/lib/locales/en/credit_card/american_express.js","./diners_club":"node_modules/faker/lib/locales/en/credit_card/diners_club.js","./jcb":"node_modules/faker/lib/locales/en/credit_card/jcb.js","./switch":"node_modules/faker/lib/locales/en/credit_card/switch.js","./solo":"node_modules/faker/lib/locales/en/credit_card/solo.js","./maestro":"node_modules/faker/lib/locales/en/credit_card/maestro.js","./laser":"node_modules/faker/lib/locales/en/credit_card/laser.js"}],"node_modules/faker/lib/locales/en/company/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "Inc",
  "and Sons",
  "LLC",
  "Group"
];

},{}],"node_modules/faker/lib/locales/en/company/adjective.js":[function(require,module,exports) {
module["exports"] = [
  "Adaptive",
  "Advanced",
  "Ameliorated",
  "Assimilated",
  "Automated",
  "Balanced",
  "Business-focused",
  "Centralized",
  "Cloned",
  "Compatible",
  "Configurable",
  "Cross-group",
  "Cross-platform",
  "Customer-focused",
  "Customizable",
  "Decentralized",
  "De-engineered",
  "Devolved",
  "Digitized",
  "Distributed",
  "Diverse",
  "Down-sized",
  "Enhanced",
  "Enterprise-wide",
  "Ergonomic",
  "Exclusive",
  "Expanded",
  "Extended",
  "Face to face",
  "Focused",
  "Front-line",
  "Fully-configurable",
  "Function-based",
  "Fundamental",
  "Future-proofed",
  "Grass-roots",
  "Horizontal",
  "Implemented",
  "Innovative",
  "Integrated",
  "Intuitive",
  "Inverse",
  "Managed",
  "Mandatory",
  "Monitored",
  "Multi-channelled",
  "Multi-lateral",
  "Multi-layered",
  "Multi-tiered",
  "Networked",
  "Object-based",
  "Open-architected",
  "Open-source",
  "Operative",
  "Optimized",
  "Optional",
  "Organic",
  "Organized",
  "Persevering",
  "Persistent",
  "Phased",
  "Polarised",
  "Pre-emptive",
  "Proactive",
  "Profit-focused",
  "Profound",
  "Programmable",
  "Progressive",
  "Public-key",
  "Quality-focused",
  "Reactive",
  "Realigned",
  "Re-contextualized",
  "Re-engineered",
  "Reduced",
  "Reverse-engineered",
  "Right-sized",
  "Robust",
  "Seamless",
  "Secured",
  "Self-enabling",
  "Sharable",
  "Stand-alone",
  "Streamlined",
  "Switchable",
  "Synchronised",
  "Synergistic",
  "Synergized",
  "Team-oriented",
  "Total",
  "Triple-buffered",
  "Universal",
  "Up-sized",
  "Upgradable",
  "User-centric",
  "User-friendly",
  "Versatile",
  "Virtual",
  "Visionary",
  "Vision-oriented"
];

},{}],"node_modules/faker/lib/locales/en/company/descriptor.js":[function(require,module,exports) {
module["exports"] = [
  "24 hour",
  "24/7",
  "3rd generation",
  "4th generation",
  "5th generation",
  "6th generation",
  "actuating",
  "analyzing",
  "asymmetric",
  "asynchronous",
  "attitude-oriented",
  "background",
  "bandwidth-monitored",
  "bi-directional",
  "bifurcated",
  "bottom-line",
  "clear-thinking",
  "client-driven",
  "client-server",
  "coherent",
  "cohesive",
  "composite",
  "context-sensitive",
  "contextually-based",
  "content-based",
  "dedicated",
  "demand-driven",
  "didactic",
  "directional",
  "discrete",
  "disintermediate",
  "dynamic",
  "eco-centric",
  "empowering",
  "encompassing",
  "even-keeled",
  "executive",
  "explicit",
  "exuding",
  "fault-tolerant",
  "foreground",
  "fresh-thinking",
  "full-range",
  "global",
  "grid-enabled",
  "heuristic",
  "high-level",
  "holistic",
  "homogeneous",
  "human-resource",
  "hybrid",
  "impactful",
  "incremental",
  "intangible",
  "interactive",
  "intermediate",
  "leading edge",
  "local",
  "logistical",
  "maximized",
  "methodical",
  "mission-critical",
  "mobile",
  "modular",
  "motivating",
  "multimedia",
  "multi-state",
  "multi-tasking",
  "national",
  "needs-based",
  "neutral",
  "next generation",
  "non-volatile",
  "object-oriented",
  "optimal",
  "optimizing",
  "radical",
  "real-time",
  "reciprocal",
  "regional",
  "responsive",
  "scalable",
  "secondary",
  "solution-oriented",
  "stable",
  "static",
  "systematic",
  "systemic",
  "system-worthy",
  "tangible",
  "tertiary",
  "transitional",
  "uniform",
  "upward-trending",
  "user-facing",
  "value-added",
  "web-enabled",
  "well-modulated",
  "zero administration",
  "zero defect",
  "zero tolerance"
];

},{}],"node_modules/faker/lib/locales/en/company/noun.js":[function(require,module,exports) {
module["exports"] = [
  "ability",
  "access",
  "adapter",
  "algorithm",
  "alliance",
  "analyzer",
  "application",
  "approach",
  "architecture",
  "archive",
  "artificial intelligence",
  "array",
  "attitude",
  "benchmark",
  "budgetary management",
  "capability",
  "capacity",
  "challenge",
  "circuit",
  "collaboration",
  "complexity",
  "concept",
  "conglomeration",
  "contingency",
  "core",
  "customer loyalty",
  "database",
  "data-warehouse",
  "definition",
  "emulation",
  "encoding",
  "encryption",
  "extranet",
  "firmware",
  "flexibility",
  "focus group",
  "forecast",
  "frame",
  "framework",
  "function",
  "functionalities",
  "Graphic Interface",
  "groupware",
  "Graphical User Interface",
  "hardware",
  "help-desk",
  "hierarchy",
  "hub",
  "implementation",
  "info-mediaries",
  "infrastructure",
  "initiative",
  "installation",
  "instruction set",
  "interface",
  "internet solution",
  "intranet",
  "knowledge user",
  "knowledge base",
  "local area network",
  "leverage",
  "matrices",
  "matrix",
  "methodology",
  "middleware",
  "migration",
  "model",
  "moderator",
  "monitoring",
  "moratorium",
  "neural-net",
  "open architecture",
  "open system",
  "orchestration",
  "paradigm",
  "parallelism",
  "policy",
  "portal",
  "pricing structure",
  "process improvement",
  "product",
  "productivity",
  "project",
  "projection",
  "protocol",
  "secured line",
  "service-desk",
  "software",
  "solution",
  "standardization",
  "strategy",
  "structure",
  "success",
  "superstructure",
  "support",
  "synergy",
  "system engine",
  "task-force",
  "throughput",
  "time-frame",
  "toolset",
  "utilisation",
  "website",
  "workforce"
];

},{}],"node_modules/faker/lib/locales/en/company/bs_verb.js":[function(require,module,exports) {
module["exports"] = [
  "implement",
  "utilize",
  "integrate",
  "streamline",
  "optimize",
  "evolve",
  "transform",
  "embrace",
  "enable",
  "orchestrate",
  "leverage",
  "reinvent",
  "aggregate",
  "architect",
  "enhance",
  "incentivize",
  "morph",
  "empower",
  "envisioneer",
  "monetize",
  "harness",
  "facilitate",
  "seize",
  "disintermediate",
  "synergize",
  "strategize",
  "deploy",
  "brand",
  "grow",
  "target",
  "syndicate",
  "synthesize",
  "deliver",
  "mesh",
  "incubate",
  "engage",
  "maximize",
  "benchmark",
  "expedite",
  "reintermediate",
  "whiteboard",
  "visualize",
  "repurpose",
  "innovate",
  "scale",
  "unleash",
  "drive",
  "extend",
  "engineer",
  "revolutionize",
  "generate",
  "exploit",
  "transition",
  "e-enable",
  "iterate",
  "cultivate",
  "matrix",
  "productize",
  "redefine",
  "recontextualize"
];

},{}],"node_modules/faker/lib/locales/en/company/bs_adjective.js":[function(require,module,exports) {
module["exports"] = [
  "clicks-and-mortar",
  "value-added",
  "vertical",
  "proactive",
  "robust",
  "revolutionary",
  "scalable",
  "leading-edge",
  "innovative",
  "intuitive",
  "strategic",
  "e-business",
  "mission-critical",
  "sticky",
  "one-to-one",
  "24/7",
  "end-to-end",
  "global",
  "B2B",
  "B2C",
  "granular",
  "frictionless",
  "virtual",
  "viral",
  "dynamic",
  "24/365",
  "best-of-breed",
  "killer",
  "magnetic",
  "bleeding-edge",
  "web-enabled",
  "interactive",
  "dot-com",
  "sexy",
  "back-end",
  "real-time",
  "efficient",
  "front-end",
  "distributed",
  "seamless",
  "extensible",
  "turn-key",
  "world-class",
  "open-source",
  "cross-platform",
  "cross-media",
  "synergistic",
  "bricks-and-clicks",
  "out-of-the-box",
  "enterprise",
  "integrated",
  "impactful",
  "wireless",
  "transparent",
  "next-generation",
  "cutting-edge",
  "user-centric",
  "visionary",
  "customized",
  "ubiquitous",
  "plug-and-play",
  "collaborative",
  "compelling",
  "holistic",
  "rich"
];

},{}],"node_modules/faker/lib/locales/en/company/bs_noun.js":[function(require,module,exports) {
module["exports"] = [
  "synergies",
  "web-readiness",
  "paradigms",
  "markets",
  "partnerships",
  "infrastructures",
  "platforms",
  "initiatives",
  "channels",
  "eyeballs",
  "communities",
  "ROI",
  "solutions",
  "e-tailers",
  "e-services",
  "action-items",
  "portals",
  "niches",
  "technologies",
  "content",
  "vortals",
  "supply-chains",
  "convergence",
  "relationships",
  "architectures",
  "interfaces",
  "e-markets",
  "e-commerce",
  "systems",
  "bandwidth",
  "infomediaries",
  "models",
  "mindshare",
  "deliverables",
  "users",
  "schemas",
  "networks",
  "applications",
  "metrics",
  "e-business",
  "functionalities",
  "experiences",
  "web services",
  "methodologies"
];

},{}],"node_modules/faker/lib/locales/en/company/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{Name.last_name} #{suffix}",
  "#{Name.last_name}-#{Name.last_name}",
  "#{Name.last_name}, #{Name.last_name} and #{Name.last_name}"
];

},{}],"node_modules/faker/lib/locales/en/company/index.js":[function(require,module,exports) {
var company = {};
module['exports'] = company;
company.suffix = require("./suffix");
company.adjective = require("./adjective");
company.descriptor = require("./descriptor");
company.noun = require("./noun");
company.bs_verb = require("./bs_verb");
company.bs_adjective = require("./bs_adjective");
company.bs_noun = require("./bs_noun");
company.name = require("./name");

},{"./suffix":"node_modules/faker/lib/locales/en/company/suffix.js","./adjective":"node_modules/faker/lib/locales/en/company/adjective.js","./descriptor":"node_modules/faker/lib/locales/en/company/descriptor.js","./noun":"node_modules/faker/lib/locales/en/company/noun.js","./bs_verb":"node_modules/faker/lib/locales/en/company/bs_verb.js","./bs_adjective":"node_modules/faker/lib/locales/en/company/bs_adjective.js","./bs_noun":"node_modules/faker/lib/locales/en/company/bs_noun.js","./name":"node_modules/faker/lib/locales/en/company/name.js"}],"node_modules/faker/lib/locales/en/internet/free_email.js":[function(require,module,exports) {
module["exports"] = [
  "gmail.com",
  "yahoo.com",
  "hotmail.com"
];

},{}],"node_modules/faker/lib/locales/en/internet/example_email.js":[function(require,module,exports) {
module["exports"] = [
  "example.org",
  "example.com",
  "example.net"
];

},{}],"node_modules/faker/lib/locales/en/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "com",
  "biz",
  "info",
  "name",
  "net",
  "org"
];

},{}],"node_modules/faker/lib/locales/en/internet/avatar_uri.js":[function(require,module,exports) {
module["exports"] = [
  "https://s3.amazonaws.com/uifaces/faces/twitter/jarjan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mahdif/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sprayaga/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ruzinav/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/Skyhartman/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/moscoz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kurafire/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/91bilal/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/igorgarybaldi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/malykhinv/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joelhelin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kushsolitary/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/coreyweb/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/snowshade/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/areus/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/holdenweb/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/heyimjuani/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/envex/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/unterdreht/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/collegeman/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/peejfancher/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/andyisonline/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ultragex/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/fuck_you_two/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/adellecharles/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ateneupopular/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ahmetalpbalkan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/Stievius/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kerem/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/osvaldas/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/angelceballos/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thierrykoblentz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/peterlandt/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/catarino/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/weglov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/brandclay/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ahmetsulek/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nicolasfolliot/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jayrobinson/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/victorerixon/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kolage/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/michzen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/markjenkins/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nicolai_larsen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gt/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/noxdzine/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/alagoon/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/idiot/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mizko/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/chadengle/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mutlu82/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/simobenso/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vocino/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/guiiipontes/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/soyjavi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joshaustin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tomaslau/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/VinThomas/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ManikRathee/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/langate/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cemshid/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/leemunroe/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/_shahedk/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/enda/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/BillSKenney/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/divya/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joshhemsley/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sindresorhus/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/soffes/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/9lessons/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/linux29/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/Chakintosh/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/anaami/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joreira/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/shadeed9/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/scottkclark/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jedbridges/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/salleedesign/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/marakasina/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ariil/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/BrianPurkiss/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/michaelmartinho/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bublienko/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/devankoshal/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ZacharyZorbas/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/timmillwood/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joshuasortino/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/damenleeturks/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tomas_janousek/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/herrhaase/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/RussellBishop/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/brajeshwar/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cbracco/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bermonpainter/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/abdullindenis/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/isacosta/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/suprb/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/yalozhkin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/chandlervdw/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/iamgarth/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/_victa/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/commadelimited/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/roybarberuk/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/axel/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vladarbatov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ffbel/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/syropian/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ankitind/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/traneblow/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/flashmurphy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ChrisFarina78/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/baliomega/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/saschamt/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jm_denis/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/anoff/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kennyadr/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/chatyrko/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dingyi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mds/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/terryxlife/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aaroni/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kinday/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/prrstn/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/eduardostuart/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dhilipsiva/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/GavicoInd/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/baires/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rohixx/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bigmancho/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/blakesimkins/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/leeiio/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tjrus/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/uberschizo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kylefoundry/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/claudioguglieri/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ripplemdk/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/exentrich/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jakemoore/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joaoedumedeiros/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/poormini/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tereshenkov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/keryilmaz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/haydn_woods/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rude/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/llun/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sgaurav_baghel/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jamiebrittain/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/badlittleduck/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/pifagor/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/agromov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/benefritz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/erwanhesry/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/diesellaws/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jeremiaha/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/koridhandy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/chaensel/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/andrewcohen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/smaczny/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gonzalorobaina/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nandini_m/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sydlawrence/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cdharrison/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tgerken/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lewisainslie/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/charliecwaite/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/robbschiller/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/flexrs/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mattdetails/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/raquelwilson/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/karsh/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mrmartineau/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/opnsrce/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hgharrygo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/maximseshuk/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/uxalex/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/samihah/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/chanpory/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sharvin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/josemarques/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jefffis/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/krystalfister/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lokesh_coder/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thedamianhdez/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dpmachado/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/funwatercat/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/timothycd/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ivanfilipovbg/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/picard102/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/marcobarbosa/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/krasnoukhov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/g3d/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ademilter/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rickdt/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/operatino/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bungiwan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hugomano/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/logorado/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dc_user/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/horaciobella/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/SlaapMe/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/teeragit/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/iqonicd/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ilya_pestov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/andrewarrow/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ssiskind/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/stan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/HenryHoffman/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rdsaunders/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/adamsxu/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/curiousoffice/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/themadray/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/michigangraham/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kohette/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nickfratter/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/runningskull/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/madysondesigns/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/brenton_clarke/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jennyshen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bradenhamm/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kurtinc/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/amanruzaini/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/coreyhaggard/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/Karimmove/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aaronalfred/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/wtrsld/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jitachi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/therealmarvin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/pmeissner/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ooomz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/chacky14/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jesseddy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/shanehudson/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/akmur/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/IsaryAmairani/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/arthurholcombe1/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/boxmodel/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ehsandiary/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/LucasPerdidao/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/shalt0ni/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/swaplord/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kaelifa/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/plbabin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/guillemboti/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/arindam_/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/renbyrd/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thiagovernetti/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jmillspaysbills/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mikemai2awesome/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jervo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mekal/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sta1ex/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/robergd/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/felipecsl/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/andrea211087/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/garand/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dhooyenga/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/abovefunction/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/pcridesagain/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/randomlies/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/BryanHorsey/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/heykenneth/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dahparra/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/allthingssmitty/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/danvernon/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/beweinreich/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/increase/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/falvarad/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/alxndrustinov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/souuf/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/orkuncaylar/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/AM_Kn2/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gearpixels/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bassamology/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vimarethomas/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kosmar/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/SULiik/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mrjamesnoble/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/silvanmuhlemann/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/shaneIxD/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nacho/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/yigitpinarbasi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/buzzusborne/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aaronkwhite/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rmlewisuk/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/giancarlon/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nbirckel/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/d_nny_m_cher/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sdidonato/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/atariboy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/abotap/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/karalek/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/psdesignuk/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ludwiczakpawel/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nemanjaivanovic/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/baluli/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ahmadajmi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vovkasolovev/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/samgrover/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/derienzo777/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jonathansimmons/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nelsonjoyce/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/S0ufi4n3/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/xtopherpaul/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/oaktreemedia/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nateschulte/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/findingjenny/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/namankreative/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/antonyzotov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/we_social/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/leehambley/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/solid_color/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/abelcabans/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mbilderbach/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kkusaa/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jordyvdboom/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/carlosgavina/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/pechkinator/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vc27/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rdbannon/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/croakx/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kerihenare/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/catadeleon/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gcmorley/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/duivvv/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/saschadroste/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/victorDubugras/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/wintopia/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mattbilotti/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/taylorling/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/megdraws/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/meln1ks/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mahmoudmetwally/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/Silveredge9/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/derekebradley/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/happypeter1983/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/travis_arnold/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/artem_kostenko/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/adobi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/daykiine/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/alek_djuric/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/scips/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/miguelmendes/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/justinrhee/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/alsobrooks/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/fronx/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mcflydesign/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/santi_urso/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/allfordesign/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/stayuber/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bertboerland/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/marosholly/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/adamnac/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cynthiasavard/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/muringa/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/danro/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hiemil/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jackiesaik/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/iduuck/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/antjanus/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aroon_sharma/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dshster/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thehacker/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/michaelbrooksjr/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ryanmclaughlin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/clubb3rry/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/taybenlor/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/xripunov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/myastro/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/adityasutomo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/digitalmaverick/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hjartstrorn/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/itolmach/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vaughanmoffitt/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/abdots/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/isnifer/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sergeysafonov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/maz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/scrapdnb/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/chrismj83/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vitorleal/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sokaniwaal/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/zaki3d/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/illyzoren/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mocabyte/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/osmanince/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/djsherman/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/davidhemphill/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/waghner/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/necodymiconer/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/praveen_vijaya/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/fabbrucci/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/travishines/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kuldarkalvik/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/Elt_n/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/phillapier/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/okseanjay/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/id835559/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kudretkeskin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/anjhero/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/duck4fuck/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/scott_riley/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/noufalibrahim/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/h1brd/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/borges_marcos/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/devinhalladay/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ciaranr/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/stefooo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mikebeecham/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tonymillion/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joshuaraichur/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/irae/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/petrangr/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dmitriychuta/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/charliegann/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/arashmanteghi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ainsleywagon/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/svenlen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/faisalabid/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/beshur/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/carlyson/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dutchnadia/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/teddyzetterlund/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/samuelkraft/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aoimedia/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/toddrew/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/codepoet_ru/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/artvavs/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/benoitboucart/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jomarmen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kolmarlopez/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/creartinc/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/homka/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gaborenton/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/robinclediere/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/maximsorokin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/plasticine/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/j2deme/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/peachananr/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kapaluccio/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/de_ascanio/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rikas/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dawidwu/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/marcoramires/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/angelcreative/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rpatey/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/popey/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rehatkathuria/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/the_purplebunny/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/1markiz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ajaxy_ru/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/brenmurrell/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dudestein/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/oskarlevinson/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/victorstuber/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nehfy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vicivadeline/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/leandrovaranda/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/scottgallant/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/victor_haydin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sawrb/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ryhanhassan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/amayvs/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/a_brixen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/karolkrakowiak_/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/herkulano/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/geran7/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cggaurav/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/chris_witko/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lososina/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/polarity/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mattlat/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/brandonburke/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/constantx/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/teylorfeliz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/craigelimeliah/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rachelreveley/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/reabo101/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rahmeen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ky/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rickyyean/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/j04ntoh/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/spbroma/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sebashton/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jpenico/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/francis_vega/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/oktayelipek/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kikillo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/fabbianz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/larrygerard/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/BroumiYoussef/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/0therplanet/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mbilalsiddique1/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ionuss/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/grrr_nl/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/liminha/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rawdiggie/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ryandownie/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sethlouey/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/pixage/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/arpitnj/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/switmer777/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/josevnclch/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kanickairaj/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/puzik/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tbakdesigns/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/besbujupi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/supjoey/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lowie/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/linkibol/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/balintorosz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/imcoding/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/agustincruiz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gusoto/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thomasschrijer/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/superoutman/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kalmerrautam/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gabrielizalo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gojeanyn/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/davidbaldie/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/_vojto/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/laurengray/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jydesign/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mymyboy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nellleo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/marciotoledo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ninjad3m0/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/to_soham/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hasslunsford/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/muridrahhal/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/levisan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/grahamkennery/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lepetitogre/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/antongenkin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nessoila/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/amandabuzard/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/safrankov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cocolero/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dss49/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/matt3224/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bluesix/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/quailandquasar/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/AlbertoCococi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lepinski/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sementiy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mhudobivnik/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thibaut_re/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/olgary/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/shojberg/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mtolokonnikov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bereto/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/naupintos/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/wegotvices/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/xadhix/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/macxim/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rodnylobos/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/madcampos/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/madebyvadim/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bartoszdawydzik/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/supervova/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/markretzloff/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vonachoo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/darylws/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/stevedesigner/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mylesb/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/herbigt/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/depaulawagner/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/geshan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gizmeedevil1991/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/_scottburgess/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lisovsky/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/davidsasda/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/artd_sign/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/YoungCutlass/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mgonto/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/itstotallyamy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/victorquinn/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/osmond/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/oksanafrewer/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/zauerkraut/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/iamkeithmason/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nitinhayaran/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lmjabreu/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mandalareopens/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thinkleft/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ponchomendivil/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/juamperro/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/brunodesign1206/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/caseycavanagh/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/luxe/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dotgridline/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/spedwig/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/madewulf/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mattsapii/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/helderleal/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/chrisstumph/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jayphen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nsamoylov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/chrisvanderkooi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/justme_timothyg/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/otozk/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/prinzadi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gu5taf/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cyril_gaillard/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/d_kobelyatsky/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/daniloc/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nwdsha/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/romanbulah/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/skkirilov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dvdwinden/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dannol/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thekevinjones/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jwalter14/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/timgthomas/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/buddhasource/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/uxpiper/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thatonetommy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/diansigitp/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/adrienths/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/klimmka/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gkaam/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/derekcramer/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jennyyo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nerrsoft/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/xalionmalik/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/edhenderson/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/keyuri85/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/roxanejammet/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kimcool/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/edkf/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/matkins/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/alessandroribe/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jacksonlatka/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lebronjennan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kostaspt/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/karlkanall/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/moynihan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/danpliego/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/saulihirvi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/wesleytrankin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/fjaguero/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bowbrick/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mashaaaaal/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/yassiryahya/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dparrelli/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/fotomagin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aka_james/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/denisepires/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/iqbalperkasa/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/martinansty/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jarsen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/r_oy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/justinrob/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gabrielrosser/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/malgordon/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/carlfairclough/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/michaelabehsera/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/pierrestoffe/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/enjoythetau/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/loganjlambert/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rpeezy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/coreyginnivan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/michalhron/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/msveet/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lingeswaran/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kolsvein/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/peter576/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/reideiredale/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joeymurdah/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/raphaelnikson/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mvdheuvel/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/maxlinderman/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jimmuirhead/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/begreative/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/frankiefreesbie/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/robturlinckx/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/Talbi_ConSept/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/longlivemyword/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vanchesz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/maiklam/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hermanobrother/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rez___a/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gregsqueeb/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/greenbes/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/_ragzor/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/anthonysukow/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/fluidbrush/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dactrtr/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jehnglynn/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bergmartin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hugocornejo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/_kkga/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dzantievm/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sawalazar/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sovesove/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jonsgotwood/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/byryan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vytautas_a/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mizhgan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cicerobr/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nilshelmersson/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/d33pthought/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/davecraige/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nckjrvs/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/alexandermayes/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jcubic/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/craigrcoles/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bagawarman/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rob_thomas10/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cofla/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/maikelk/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rtgibbons/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/russell_baylis/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mhesslow/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/codysanfilippo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/webtanya/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/madebybrenton/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dcalonaci/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/perfectflow/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jjsiii/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/saarabpreet/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kumarrajan12123/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/iamsteffen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/themikenagle/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ceekaytweet/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/larrybolt/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/conspirator/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dallasbpeters/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/n3dmax/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/terpimost/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/byrnecore/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/j_drake_/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/calebjoyce/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/russoedu/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hoangloi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tobysaxon/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gofrasdesign/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dimaposnyy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tjisousa/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/okandungel/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/billyroshan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/oskamaya/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/motionthinks/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/knilob/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ashocka18/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/marrimo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bartjo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/omnizya/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ernestsemerda/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/andreas_pr/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/edgarchris99/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thomasgeisen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gseguin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joannefournier/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/demersdesigns/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/adammarsbar/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nasirwd/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/n_tassone/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/javorszky/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/themrdave/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/yecidsm/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nicollerich/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/canapud/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nicoleglynn/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/judzhin_miles/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/designervzm/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kianoshp/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/evandrix/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/alterchuca/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dhrubo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ma_tiax/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ssbb_me/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dorphern/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mauriolg/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bruno_mart/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mactopus/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/the_winslet/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joemdesign/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/Shriiiiimp/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jacobbennett/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nfedoroff/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/iamglimy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/allagringaus/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aiiaiiaii/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/olaolusoga/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/buryaknick/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/wim1k/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nicklacke/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/a1chapone/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/steynviljoen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/strikewan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ryankirkman/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/andrewabogado/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/doooon/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jagan123/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ariffsetiawan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/elenadissi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mwarkentin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thierrymeier_/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/r_garcia/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dmackerman/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/borantula/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/konus/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/spacewood_/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ryuchi311/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/evanshajed/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tristanlegros/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/shoaib253/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aislinnkelly/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/okcoker/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/timpetricola/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sunshinedgirl/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/chadami/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aleclarsoniv/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nomidesigns/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/petebernardo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/scottiedude/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/millinet/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/imsoper/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/imammuht/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/benjamin_knight/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nepdud/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joki4/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lanceguyatt/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bboy1895/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/amywebbb/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rweve/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/haruintesettden/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ricburton/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nelshd/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/batsirai/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/primozcigler/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jffgrdnr/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/8d3k/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/geneseleznev/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/al_li/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/souperphly/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mslarkina/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/2fockus/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cdavis565/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/xiel/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/turkutuuli/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/uxward/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lebinoclard/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gauravjassal/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/davidmerrique/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mdsisto/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/andrewofficer/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kojourin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dnirmal/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kevka/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mr_shiznit/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aluisio_azevedo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cloudstudio/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/danvierich/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/alexivanichkin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/fran_mchamy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/perretmagali/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/betraydan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cadikkara/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/matbeedotcom/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jeremyworboys/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bpartridge/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/michaelkoper/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/silv3rgvn/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/alevizio/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/johnsmithagency/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lawlbwoy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vitor376/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/desastrozo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thimo_cz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jasonmarkjones/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lhausermann/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/xravil/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/guischmitt/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vigobronx/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/panghal0/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/miguelkooreman/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/surgeonist/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/christianoliff/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/caspergrl/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/iamkarna/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ipavelek/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/pierre_nel/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/y2graphic/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sterlingrules/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/elbuscainfo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bennyjien/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/stushona/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/estebanuribe/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/embrcecreations/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/danillos/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/elliotlewis/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/charlesrpratt/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vladyn/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/emmeffess/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/carlosblanco_eu/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/leonfedotov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rangafangs/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/chris_frees/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tgormtx/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bryan_topham/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jpscribbles/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mighty55/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/carbontwelve/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/isaacfifth/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/iamjdeleon/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/snowwrite/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/barputro/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/drewbyreese/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sachacorazzi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bistrianiosip/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/magoo04/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/pehamondello/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/yayteejay/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/a_harris88/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/algunsanabria/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/zforrester/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ovall/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/carlosjgsousa/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/geobikas/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ah_lice/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/looneydoodle/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nerdgr8/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ddggccaa/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/zackeeler/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/normanbox/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/el_fuertisimo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ismail_biltagi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/juangomezw/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jnmnrd/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/patrickcoombe/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ryanjohnson_me/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/markolschesky/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jeffgolenski/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kvasnic/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gauchomatt/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/afusinatto/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kevinoh/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/okansurreel/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/adamawesomeface/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/emileboudeling/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/arishi_/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/juanmamartinez/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/wikiziner/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/danthms/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mkginfo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/terrorpixel/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/curiousonaut/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/prheemo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/michaelcolenso/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/foczzi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/martip07/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thaodang17/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/johncafazza/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/robinlayfield/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/franciscoamk/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/abdulhyeuk/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/marklamb/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/edobene/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/andresenfredrik/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mikaeljorhult/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/chrisslowik/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vinciarts/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/meelford/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/elliotnolten/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/yehudab/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vijaykarthik/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bfrohs/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/josep_martins/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/attacks/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sur4dye/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tumski/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/instalox/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mangosango/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/paulfarino/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kazaky999/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kiwiupover/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nvkznemo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tom_even/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ratbus/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/woodsman001/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joshmedeski/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thewillbeard/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/psaikali/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joe_black/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aleinadsays/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/marcusgorillius/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hota_v/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jghyllebert/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/shinze/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/janpalounek/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jeremiespoken/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/her_ruu/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dansowter/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/felipeapiress/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/magugzbrand2d/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/posterjob/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nathalie_fs/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bobbytwoshoes/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dreizle/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jeremymouton/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/elisabethkjaer/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/notbadart/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mohanrohith/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jlsolerdeltoro/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/itskawsar/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/slowspock/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/zvchkelly/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/wiljanslofstra/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/craighenneberry/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/trubeatto/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/juaumlol/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/samscouto/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/BenouarradeM/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gipsy_raf/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/netonet_il/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/arkokoley/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/itsajimithing/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/smalonso/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/victordeanda/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/_dwite_/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/richardgarretts/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gregrwilkinson/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/anatolinicolae/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lu4sh1i/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/stefanotirloni/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ostirbu/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/darcystonge/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/naitanamoreno/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/michaelcomiskey/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/adhiardana/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/marcomano_/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/davidcazalis/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/falconerie/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gregkilian/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bcrad/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bolzanmarco/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/low_res/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vlajki/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/petar_prog/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jonkspr/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/akmalfikri/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mfacchinello/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/atanism/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/harry_sistalam/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/murrayswift/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bobwassermann/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gavr1l0/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/madshensel/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mr_subtle/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/deviljho_/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/salimianoff/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joetruesdell/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/twittypork/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/airskylar/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dnezkumar/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dgajjar/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cherif_b/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/salvafc/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/louis_currie/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/deeenright/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cybind/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/eyronn/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vickyshits/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sweetdelisa/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/cboller1/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/andresdjasso/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/melvindidit/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/andysolomon/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thaisselenator_/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lvovenok/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/giuliusa/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/belyaev_rs/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/overcloacked/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kamal_chaneman/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/incubo82/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hellofeverrrr/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mhaligowski/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sunlandictwin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bu7921/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/andytlaw/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jeremery/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/finchjke/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/manigm/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/umurgdk/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/scottfeltham/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ganserene/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mutu_krish/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jodytaggart/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ntfblog/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tanveerrao/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hfalucas/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/alxleroydeval/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kucingbelang4/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bargaorobalo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/colgruv/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/stalewine/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kylefrost/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/baumannzone/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/angelcolberg/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sachingawas/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jjshaw14/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ramanathan_pdy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/johndezember/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nilshoenson/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/brandonmorreale/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nutzumi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/brandonflatsoda/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sergeyalmone/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/klefue/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kirangopal/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/baumann_alex/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/matthewkay_/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jay_wilburn/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/shesgared/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/apriendeau/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/johnriordan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/wake_gs/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aleksitappura/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/emsgulam/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/xilantra/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/imomenui/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sircalebgrove/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/newbrushes/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hsinyo23/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/m4rio/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/katiemdaly/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/s4f1/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ecommerceil/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/marlinjayakody/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/swooshycueb/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sangdth/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/coderdiaz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bluefx_/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vivekprvr/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sasha_shestakov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/eugeneeweb/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dgclegg/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/n1ght_coder/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dixchen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/blakehawksworth/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/trueblood_33/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hai_ninh_nguyen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/marclgonzales/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/yesmeck/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/stephcoue/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/doronmalki/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ruehldesign/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/anasnakawa/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kijanmaharjan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/wearesavas/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/stefvdham/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tweetubhai/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/alecarpentier/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/fiterik/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/antonyryndya/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/d00maz/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/theonlyzeke/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/missaaamy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/carlosm/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/manekenthe/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/reetajayendra/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jeremyshimko/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/justinrgraham/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/stefanozoffoli/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/overra/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mrebay007/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/shvelo96/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/pyronite/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/thedjpetersen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/rtyukmaev/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/_williamguerra/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/albertaugustin/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vikashpathak18/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kevinjohndayy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vj_demien/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/colirpixoil/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/goddardlewis/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/laasli/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jqiuss/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/heycamtaylor/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nastya_mane/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mastermindesign/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ccinojasso1/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/nyancecom/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sandywoodruff/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/bighanddesign/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sbtransparent/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aviddayentonbay/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/richwild/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kaysix_dizzy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/tur8le/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/seyedhossein1/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/privetwagner/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/emmandenn/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dev_essentials/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jmfsocial/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/_yardenoon/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mateaodviteza/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/weavermedia/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mufaddal_mw/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hafeeskhan/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ashernatali/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sulaqo/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/eddiechen/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/josecarlospsh/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vm_f/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/enricocicconi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/danmartin70/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/gmourier/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/donjain/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mrxloka/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/_pedropinho/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/eitarafa/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/oscarowusu/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ralph_lam/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/panchajanyag/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/woodydotmx/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/jerrybai1907/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/marshallchen_/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/xamorep/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aio___/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/chaabane_wail/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/txcx/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/akashsharma39/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/falling_soul/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sainraja/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mugukamil/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/johannesneu/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/markwienands/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/karthipanraj/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/balakayuriy/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/alan_zhang_/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/layerssss/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/kaspernordkvist/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/mirfanqureshi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/hanna_smi/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/VMilescu/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/aeon56/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/m_kalibry/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/sreejithexp/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dicesales/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/dhoot_amit/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/smenov/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/lonesomelemon/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vladimirdevic/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/joelcipriano/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/haligaliharun/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/buleswapnil/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/serefka/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/ifarafonow/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/vikasvinfotech/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/urrutimeoli/128.jpg",
  "https://s3.amazonaws.com/uifaces/faces/twitter/areandacom/128.jpg"
];

},{}],"node_modules/faker/lib/locales/en/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.free_email = require("./free_email");
internet.example_email = require("./example_email");
internet.domain_suffix = require("./domain_suffix");
internet.avatar_uri = require("./avatar_uri");

},{"./free_email":"node_modules/faker/lib/locales/en/internet/free_email.js","./example_email":"node_modules/faker/lib/locales/en/internet/example_email.js","./domain_suffix":"node_modules/faker/lib/locales/en/internet/domain_suffix.js","./avatar_uri":"node_modules/faker/lib/locales/en/internet/avatar_uri.js"}],"node_modules/faker/lib/locales/en/database/collation.js":[function(require,module,exports) {
module["exports"] = [
  "utf8_unicode_ci",
  "utf8_general_ci",
  "utf8_bin",
  "ascii_bin",
  "ascii_general_ci",
  "cp1250_bin",
  "cp1250_general_ci"
];

},{}],"node_modules/faker/lib/locales/en/database/column.js":[function(require,module,exports) {
module["exports"] = [
  "id",
  "title",
  "name",
  "email",
  "phone",
  "token",
  "group",
  "category",
  "password",
  "comment",
  "avatar",
  "status",
  "createdAt",
  "updatedAt"
];

},{}],"node_modules/faker/lib/locales/en/database/engine.js":[function(require,module,exports) {
module["exports"] = [
  "InnoDB",
  "MyISAM",
  "MEMORY",
  "CSV",
  "BLACKHOLE",
  "ARCHIVE"
];

},{}],"node_modules/faker/lib/locales/en/database/type.js":[function(require,module,exports) {
module["exports"] = [
  "int",
  "varchar",
  "text",
  "date",
  "datetime",
  "tinyint",
  "time",
  "timestamp",
  "smallint",
  "mediumint",
  "bigint",
  "decimal",
  "float",
  "double",
  "real",
  "bit",
  "boolean",
  "serial",
  "blob",
  "binary",
  "enum",
  "set",
  "geometry",
  "point"
];

},{}],"node_modules/faker/lib/locales/en/database/index.js":[function(require,module,exports) {
var database = {};
module['exports'] = database;
database.collation = require("./collation");
database.column = require("./column");
database.engine = require("./engine");
database.type = require("./type");
},{"./collation":"node_modules/faker/lib/locales/en/database/collation.js","./column":"node_modules/faker/lib/locales/en/database/column.js","./engine":"node_modules/faker/lib/locales/en/database/engine.js","./type":"node_modules/faker/lib/locales/en/database/type.js"}],"node_modules/faker/lib/locales/en/lorem/words.js":[function(require,module,exports) {
module["exports"] = [
  "alias",
  "consequatur",
  "aut",
  "perferendis",
  "sit",
  "voluptatem",
  "accusantium",
  "doloremque",
  "aperiam",
  "eaque",
  "ipsa",
  "quae",
  "ab",
  "illo",
  "inventore",
  "veritatis",
  "et",
  "quasi",
  "architecto",
  "beatae",
  "vitae",
  "dicta",
  "sunt",
  "explicabo",
  "aspernatur",
  "aut",
  "odit",
  "aut",
  "fugit",
  "sed",
  "quia",
  "consequuntur",
  "magni",
  "dolores",
  "eos",
  "qui",
  "ratione",
  "voluptatem",
  "sequi",
  "nesciunt",
  "neque",
  "dolorem",
  "ipsum",
  "quia",
  "dolor",
  "sit",
  "amet",
  "consectetur",
  "adipisci",
  "velit",
  "sed",
  "quia",
  "non",
  "numquam",
  "eius",
  "modi",
  "tempora",
  "incidunt",
  "ut",
  "labore",
  "et",
  "dolore",
  "magnam",
  "aliquam",
  "quaerat",
  "voluptatem",
  "ut",
  "enim",
  "ad",
  "minima",
  "veniam",
  "quis",
  "nostrum",
  "exercitationem",
  "ullam",
  "corporis",
  "nemo",
  "enim",
  "ipsam",
  "voluptatem",
  "quia",
  "voluptas",
  "sit",
  "suscipit",
  "laboriosam",
  "nisi",
  "ut",
  "aliquid",
  "ex",
  "ea",
  "commodi",
  "consequatur",
  "quis",
  "autem",
  "vel",
  "eum",
  "iure",
  "reprehenderit",
  "qui",
  "in",
  "ea",
  "voluptate",
  "velit",
  "esse",
  "quam",
  "nihil",
  "molestiae",
  "et",
  "iusto",
  "odio",
  "dignissimos",
  "ducimus",
  "qui",
  "blanditiis",
  "praesentium",
  "laudantium",
  "totam",
  "rem",
  "voluptatum",
  "deleniti",
  "atque",
  "corrupti",
  "quos",
  "dolores",
  "et",
  "quas",
  "molestias",
  "excepturi",
  "sint",
  "occaecati",
  "cupiditate",
  "non",
  "provident",
  "sed",
  "ut",
  "perspiciatis",
  "unde",
  "omnis",
  "iste",
  "natus",
  "error",
  "similique",
  "sunt",
  "in",
  "culpa",
  "qui",
  "officia",
  "deserunt",
  "mollitia",
  "animi",
  "id",
  "est",
  "laborum",
  "et",
  "dolorum",
  "fuga",
  "et",
  "harum",
  "quidem",
  "rerum",
  "facilis",
  "est",
  "et",
  "expedita",
  "distinctio",
  "nam",
  "libero",
  "tempore",
  "cum",
  "soluta",
  "nobis",
  "est",
  "eligendi",
  "optio",
  "cumque",
  "nihil",
  "impedit",
  "quo",
  "porro",
  "quisquam",
  "est",
  "qui",
  "minus",
  "id",
  "quod",
  "maxime",
  "placeat",
  "facere",
  "possimus",
  "omnis",
  "voluptas",
  "assumenda",
  "est",
  "omnis",
  "dolor",
  "repellendus",
  "temporibus",
  "autem",
  "quibusdam",
  "et",
  "aut",
  "consequatur",
  "vel",
  "illum",
  "qui",
  "dolorem",
  "eum",
  "fugiat",
  "quo",
  "voluptas",
  "nulla",
  "pariatur",
  "at",
  "vero",
  "eos",
  "et",
  "accusamus",
  "officiis",
  "debitis",
  "aut",
  "rerum",
  "necessitatibus",
  "saepe",
  "eveniet",
  "ut",
  "et",
  "voluptates",
  "repudiandae",
  "sint",
  "et",
  "molestiae",
  "non",
  "recusandae",
  "itaque",
  "earum",
  "rerum",
  "hic",
  "tenetur",
  "a",
  "sapiente",
  "delectus",
  "ut",
  "aut",
  "reiciendis",
  "voluptatibus",
  "maiores",
  "doloribus",
  "asperiores",
  "repellat"
];

},{}],"node_modules/faker/lib/locales/en/lorem/supplemental.js":[function(require,module,exports) {
module["exports"] = [
  "abbas",
  "abduco",
  "abeo",
  "abscido",
  "absconditus",
  "absens",
  "absorbeo",
  "absque",
  "abstergo",
  "absum",
  "abundans",
  "abutor",
  "accedo",
  "accendo",
  "acceptus",
  "accipio",
  "accommodo",
  "accusator",
  "acer",
  "acerbitas",
  "acervus",
  "acidus",
  "acies",
  "acquiro",
  "acsi",
  "adamo",
  "adaugeo",
  "addo",
  "adduco",
  "ademptio",
  "adeo",
  "adeptio",
  "adfectus",
  "adfero",
  "adficio",
  "adflicto",
  "adhaero",
  "adhuc",
  "adicio",
  "adimpleo",
  "adinventitias",
  "adipiscor",
  "adiuvo",
  "administratio",
  "admiratio",
  "admitto",
  "admoneo",
  "admoveo",
  "adnuo",
  "adopto",
  "adsidue",
  "adstringo",
  "adsuesco",
  "adsum",
  "adulatio",
  "adulescens",
  "adultus",
  "aduro",
  "advenio",
  "adversus",
  "advoco",
  "aedificium",
  "aeger",
  "aegre",
  "aegrotatio",
  "aegrus",
  "aeneus",
  "aequitas",
  "aequus",
  "aer",
  "aestas",
  "aestivus",
  "aestus",
  "aetas",
  "aeternus",
  "ager",
  "aggero",
  "aggredior",
  "agnitio",
  "agnosco",
  "ago",
  "ait",
  "aiunt",
  "alienus",
  "alii",
  "alioqui",
  "aliqua",
  "alius",
  "allatus",
  "alo",
  "alter",
  "altus",
  "alveus",
  "amaritudo",
  "ambitus",
  "ambulo",
  "amicitia",
  "amiculum",
  "amissio",
  "amita",
  "amitto",
  "amo",
  "amor",
  "amoveo",
  "amplexus",
  "amplitudo",
  "amplus",
  "ancilla",
  "angelus",
  "angulus",
  "angustus",
  "animadverto",
  "animi",
  "animus",
  "annus",
  "anser",
  "ante",
  "antea",
  "antepono",
  "antiquus",
  "aperio",
  "aperte",
  "apostolus",
  "apparatus",
  "appello",
  "appono",
  "appositus",
  "approbo",
  "apto",
  "aptus",
  "apud",
  "aqua",
  "ara",
  "aranea",
  "arbitro",
  "arbor",
  "arbustum",
  "arca",
  "arceo",
  "arcesso",
  "arcus",
  "argentum",
  "argumentum",
  "arguo",
  "arma",
  "armarium",
  "armo",
  "aro",
  "ars",
  "articulus",
  "artificiose",
  "arto",
  "arx",
  "ascisco",
  "ascit",
  "asper",
  "aspicio",
  "asporto",
  "assentator",
  "astrum",
  "atavus",
  "ater",
  "atqui",
  "atrocitas",
  "atrox",
  "attero",
  "attollo",
  "attonbitus",
  "auctor",
  "auctus",
  "audacia",
  "audax",
  "audentia",
  "audeo",
  "audio",
  "auditor",
  "aufero",
  "aureus",
  "auris",
  "aurum",
  "aut",
  "autem",
  "autus",
  "auxilium",
  "avaritia",
  "avarus",
  "aveho",
  "averto",
  "avoco",
  "baiulus",
  "balbus",
  "barba",
  "bardus",
  "basium",
  "beatus",
  "bellicus",
  "bellum",
  "bene",
  "beneficium",
  "benevolentia",
  "benigne",
  "bestia",
  "bibo",
  "bis",
  "blandior",
  "bonus",
  "bos",
  "brevis",
  "cado",
  "caecus",
  "caelestis",
  "caelum",
  "calamitas",
  "calcar",
  "calco",
  "calculus",
  "callide",
  "campana",
  "candidus",
  "canis",
  "canonicus",
  "canto",
  "capillus",
  "capio",
  "capitulus",
  "capto",
  "caput",
  "carbo",
  "carcer",
  "careo",
  "caries",
  "cariosus",
  "caritas",
  "carmen",
  "carpo",
  "carus",
  "casso",
  "caste",
  "casus",
  "catena",
  "caterva",
  "cattus",
  "cauda",
  "causa",
  "caute",
  "caveo",
  "cavus",
  "cedo",
  "celebrer",
  "celer",
  "celo",
  "cena",
  "cenaculum",
  "ceno",
  "censura",
  "centum",
  "cerno",
  "cernuus",
  "certe",
  "certo",
  "certus",
  "cervus",
  "cetera",
  "charisma",
  "chirographum",
  "cibo",
  "cibus",
  "cicuta",
  "cilicium",
  "cimentarius",
  "ciminatio",
  "cinis",
  "circumvenio",
  "cito",
  "civis",
  "civitas",
  "clam",
  "clamo",
  "claro",
  "clarus",
  "claudeo",
  "claustrum",
  "clementia",
  "clibanus",
  "coadunatio",
  "coaegresco",
  "coepi",
  "coerceo",
  "cogito",
  "cognatus",
  "cognomen",
  "cogo",
  "cohaero",
  "cohibeo",
  "cohors",
  "colligo",
  "colloco",
  "collum",
  "colo",
  "color",
  "coma",
  "combibo",
  "comburo",
  "comedo",
  "comes",
  "cometes",
  "comis",
  "comitatus",
  "commemoro",
  "comminor",
  "commodo",
  "communis",
  "comparo",
  "compello",
  "complectus",
  "compono",
  "comprehendo",
  "comptus",
  "conatus",
  "concedo",
  "concido",
  "conculco",
  "condico",
  "conduco",
  "confero",
  "confido",
  "conforto",
  "confugo",
  "congregatio",
  "conicio",
  "coniecto",
  "conitor",
  "coniuratio",
  "conor",
  "conqueror",
  "conscendo",
  "conservo",
  "considero",
  "conspergo",
  "constans",
  "consuasor",
  "contabesco",
  "contego",
  "contigo",
  "contra",
  "conturbo",
  "conventus",
  "convoco",
  "copia",
  "copiose",
  "cornu",
  "corona",
  "corpus",
  "correptius",
  "corrigo",
  "corroboro",
  "corrumpo",
  "coruscus",
  "cotidie",
  "crapula",
  "cras",
  "crastinus",
  "creator",
  "creber",
  "crebro",
  "credo",
  "creo",
  "creptio",
  "crepusculum",
  "cresco",
  "creta",
  "cribro",
  "crinis",
  "cruciamentum",
  "crudelis",
  "cruentus",
  "crur",
  "crustulum",
  "crux",
  "cubicularis",
  "cubitum",
  "cubo",
  "cui",
  "cuius",
  "culpa",
  "culpo",
  "cultellus",
  "cultura",
  "cum",
  "cunabula",
  "cunae",
  "cunctatio",
  "cupiditas",
  "cupio",
  "cuppedia",
  "cupressus",
  "cur",
  "cura",
  "curatio",
  "curia",
  "curiositas",
  "curis",
  "curo",
  "curriculum",
  "currus",
  "cursim",
  "curso",
  "cursus",
  "curto",
  "curtus",
  "curvo",
  "curvus",
  "custodia",
  "damnatio",
  "damno",
  "dapifer",
  "debeo",
  "debilito",
  "decens",
  "decerno",
  "decet",
  "decimus",
  "decipio",
  "decor",
  "decretum",
  "decumbo",
  "dedecor",
  "dedico",
  "deduco",
  "defaeco",
  "defendo",
  "defero",
  "defessus",
  "defetiscor",
  "deficio",
  "defigo",
  "defleo",
  "defluo",
  "defungo",
  "degenero",
  "degero",
  "degusto",
  "deinde",
  "delectatio",
  "delego",
  "deleo",
  "delibero",
  "delicate",
  "delinquo",
  "deludo",
  "demens",
  "demergo",
  "demitto",
  "demo",
  "demonstro",
  "demoror",
  "demulceo",
  "demum",
  "denego",
  "denique",
  "dens",
  "denuncio",
  "denuo",
  "deorsum",
  "depereo",
  "depono",
  "depopulo",
  "deporto",
  "depraedor",
  "deprecator",
  "deprimo",
  "depromo",
  "depulso",
  "deputo",
  "derelinquo",
  "derideo",
  "deripio",
  "desidero",
  "desino",
  "desipio",
  "desolo",
  "desparatus",
  "despecto",
  "despirmatio",
  "infit",
  "inflammatio",
  "paens",
  "patior",
  "patria",
  "patrocinor",
  "patruus",
  "pauci",
  "paulatim",
  "pauper",
  "pax",
  "peccatus",
  "pecco",
  "pecto",
  "pectus",
  "pecunia",
  "pecus",
  "peior",
  "pel",
  "ocer",
  "socius",
  "sodalitas",
  "sol",
  "soleo",
  "solio",
  "solitudo",
  "solium",
  "sollers",
  "sollicito",
  "solum",
  "solus",
  "solutio",
  "solvo",
  "somniculosus",
  "somnus",
  "sonitus",
  "sono",
  "sophismata",
  "sopor",
  "sordeo",
  "sortitus",
  "spargo",
  "speciosus",
  "spectaculum",
  "speculum",
  "sperno",
  "spero",
  "spes",
  "spiculum",
  "spiritus",
  "spoliatio",
  "sponte",
  "stabilis",
  "statim",
  "statua",
  "stella",
  "stillicidium",
  "stipes",
  "stips",
  "sto",
  "strenuus",
  "strues",
  "studio",
  "stultus",
  "suadeo",
  "suasoria",
  "sub",
  "subito",
  "subiungo",
  "sublime",
  "subnecto",
  "subseco",
  "substantia",
  "subvenio",
  "succedo",
  "succurro",
  "sufficio",
  "suffoco",
  "suffragium",
  "suggero",
  "sui",
  "sulum",
  "sum",
  "summa",
  "summisse",
  "summopere",
  "sumo",
  "sumptus",
  "supellex",
  "super",
  "suppellex",
  "supplanto",
  "suppono",
  "supra",
  "surculus",
  "surgo",
  "sursum",
  "suscipio",
  "suspendo",
  "sustineo",
  "suus",
  "synagoga",
  "tabella",
  "tabernus",
  "tabesco",
  "tabgo",
  "tabula",
  "taceo",
  "tactus",
  "taedium",
  "talio",
  "talis",
  "talus",
  "tam",
  "tamdiu",
  "tamen",
  "tametsi",
  "tamisium",
  "tamquam",
  "tandem",
  "tantillus",
  "tantum",
  "tardus",
  "tego",
  "temeritas",
  "temperantia",
  "templum",
  "temptatio",
  "tempus",
  "tenax",
  "tendo",
  "teneo",
  "tener",
  "tenuis",
  "tenus",
  "tepesco",
  "tepidus",
  "ter",
  "terebro",
  "teres",
  "terga",
  "tergeo",
  "tergiversatio",
  "tergo",
  "tergum",
  "termes",
  "terminatio",
  "tero",
  "terra",
  "terreo",
  "territo",
  "terror",
  "tersus",
  "tertius",
  "testimonium",
  "texo",
  "textilis",
  "textor",
  "textus",
  "thalassinus",
  "theatrum",
  "theca",
  "thema",
  "theologus",
  "thermae",
  "thesaurus",
  "thesis",
  "thorax",
  "thymbra",
  "thymum",
  "tibi",
  "timidus",
  "timor",
  "titulus",
  "tolero",
  "tollo",
  "tondeo",
  "tonsor",
  "torqueo",
  "torrens",
  "tot",
  "totidem",
  "toties",
  "totus",
  "tracto",
  "trado",
  "traho",
  "trans",
  "tredecim",
  "tremo",
  "trepide",
  "tres",
  "tribuo",
  "tricesimus",
  "triduana",
  "triginta",
  "tripudio",
  "tristis",
  "triumphus",
  "trucido",
  "truculenter",
  "tubineus",
  "tui",
  "tum",
  "tumultus",
  "tunc",
  "turba",
  "turbo",
  "turpe",
  "turpis",
  "tutamen",
  "tutis",
  "tyrannus",
  "uberrime",
  "ubi",
  "ulciscor",
  "ullus",
  "ulterius",
  "ultio",
  "ultra",
  "umbra",
  "umerus",
  "umquam",
  "una",
  "unde",
  "undique",
  "universe",
  "unus",
  "urbanus",
  "urbs",
  "uredo",
  "usitas",
  "usque",
  "ustilo",
  "ustulo",
  "usus",
  "uter",
  "uterque",
  "utilis",
  "utique",
  "utor",
  "utpote",
  "utrimque",
  "utroque",
  "utrum",
  "uxor",
  "vaco",
  "vacuus",
  "vado",
  "vae",
  "valde",
  "valens",
  "valeo",
  "valetudo",
  "validus",
  "vallum",
  "vapulus",
  "varietas",
  "varius",
  "vehemens",
  "vel",
  "velociter",
  "velum",
  "velut",
  "venia",
  "venio",
  "ventito",
  "ventosus",
  "ventus",
  "venustas",
  "ver",
  "verbera",
  "verbum",
  "vere",
  "verecundia",
  "vereor",
  "vergo",
  "veritas",
  "vero",
  "versus",
  "verto",
  "verumtamen",
  "verus",
  "vesco",
  "vesica",
  "vesper",
  "vespillo",
  "vester",
  "vestigium",
  "vestrum",
  "vetus",
  "via",
  "vicinus",
  "vicissitudo",
  "victoria",
  "victus",
  "videlicet",
  "video",
  "viduata",
  "viduo",
  "vigilo",
  "vigor",
  "vilicus",
  "vilis",
  "vilitas",
  "villa",
  "vinco",
  "vinculum",
  "vindico",
  "vinitor",
  "vinum",
  "vir",
  "virga",
  "virgo",
  "viridis",
  "viriliter",
  "virtus",
  "vis",
  "viscus",
  "vita",
  "vitiosus",
  "vitium",
  "vito",
  "vivo",
  "vix",
  "vobis",
  "vociferor",
  "voco",
  "volaticus",
  "volo",
  "volubilis",
  "voluntarius",
  "volup",
  "volutabrum",
  "volva",
  "vomer",
  "vomica",
  "vomito",
  "vorago",
  "vorax",
  "voro",
  "vos",
  "votum",
  "voveo",
  "vox",
  "vulariter",
  "vulgaris",
  "vulgivagus",
  "vulgo",
  "vulgus",
  "vulnero",
  "vulnus",
  "vulpes",
  "vulticulus",
  "vultuosus",
  "xiphias"
];

},{}],"node_modules/faker/lib/locales/en/lorem/index.js":[function(require,module,exports) {
var lorem = {};
module['exports'] = lorem;
lorem.words = require("./words");
lorem.supplemental = require("./supplemental");

},{"./words":"node_modules/faker/lib/locales/en/lorem/words.js","./supplemental":"node_modules/faker/lib/locales/en/lorem/supplemental.js"}],"node_modules/faker/lib/locales/en/name/first_name.js":[function(require,module,exports) {
module["exports"] = [
  "Aaliyah",
  "Aaron",
  "Abagail",
  "Abbey",
  "Abbie",
  "Abbigail",
  "Abby",
  "Abdiel",
  "Abdul",
  "Abdullah",
  "Abe",
  "Abel",
  "Abelardo",
  "Abigail",
  "Abigale",
  "Abigayle",
  "Abner",
  "Abraham",
  "Ada",
  "Adah",
  "Adalberto",
  "Adaline",
  "Adam",
  "Adan",
  "Addie",
  "Addison",
  "Adela",
  "Adelbert",
  "Adele",
  "Adelia",
  "Adeline",
  "Adell",
  "Adella",
  "Adelle",
  "Aditya",
  "Adolf",
  "Adolfo",
  "Adolph",
  "Adolphus",
  "Adonis",
  "Adrain",
  "Adrian",
  "Adriana",
  "Adrianna",
  "Adriel",
  "Adrien",
  "Adrienne",
  "Afton",
  "Aglae",
  "Agnes",
  "Agustin",
  "Agustina",
  "Ahmad",
  "Ahmed",
  "Aida",
  "Aidan",
  "Aiden",
  "Aileen",
  "Aimee",
  "Aisha",
  "Aiyana",
  "Akeem",
  "Al",
  "Alaina",
  "Alan",
  "Alana",
  "Alanis",
  "Alanna",
  "Alayna",
  "Alba",
  "Albert",
  "Alberta",
  "Albertha",
  "Alberto",
  "Albin",
  "Albina",
  "Alda",
  "Alden",
  "Alec",
  "Aleen",
  "Alejandra",
  "Alejandrin",
  "Alek",
  "Alena",
  "Alene",
  "Alessandra",
  "Alessandro",
  "Alessia",
  "Aletha",
  "Alex",
  "Alexa",
  "Alexander",
  "Alexandra",
  "Alexandre",
  "Alexandrea",
  "Alexandria",
  "Alexandrine",
  "Alexandro",
  "Alexane",
  "Alexanne",
  "Alexie",
  "Alexis",
  "Alexys",
  "Alexzander",
  "Alf",
  "Alfonso",
  "Alfonzo",
  "Alford",
  "Alfred",
  "Alfreda",
  "Alfredo",
  "Ali",
  "Alia",
  "Alice",
  "Alicia",
  "Alisa",
  "Alisha",
  "Alison",
  "Alivia",
  "Aliya",
  "Aliyah",
  "Aliza",
  "Alize",
  "Allan",
  "Allen",
  "Allene",
  "Allie",
  "Allison",
  "Ally",
  "Alphonso",
  "Alta",
  "Althea",
  "Alva",
  "Alvah",
  "Alvena",
  "Alvera",
  "Alverta",
  "Alvina",
  "Alvis",
  "Alyce",
  "Alycia",
  "Alysa",
  "Alysha",
  "Alyson",
  "Alysson",
  "Amalia",
  "Amanda",
  "Amani",
  "Amara",
  "Amari",
  "Amaya",
  "Amber",
  "Ambrose",
  "Amelia",
  "Amelie",
  "Amely",
  "America",
  "Americo",
  "Amie",
  "Amina",
  "Amir",
  "Amira",
  "Amiya",
  "Amos",
  "Amparo",
  "Amy",
  "Amya",
  "Ana",
  "Anabel",
  "Anabelle",
  "Anahi",
  "Anais",
  "Anastacio",
  "Anastasia",
  "Anderson",
  "Andre",
  "Andreane",
  "Andreanne",
  "Andres",
  "Andrew",
  "Andy",
  "Angel",
  "Angela",
  "Angelica",
  "Angelina",
  "Angeline",
  "Angelita",
  "Angelo",
  "Angie",
  "Angus",
  "Anibal",
  "Anika",
  "Anissa",
  "Anita",
  "Aniya",
  "Aniyah",
  "Anjali",
  "Anna",
  "Annabel",
  "Annabell",
  "Annabelle",
  "Annalise",
  "Annamae",
  "Annamarie",
  "Anne",
  "Annetta",
  "Annette",
  "Annie",
  "Ansel",
  "Ansley",
  "Anthony",
  "Antoinette",
  "Antone",
  "Antonetta",
  "Antonette",
  "Antonia",
  "Antonietta",
  "Antonina",
  "Antonio",
  "Antwan",
  "Antwon",
  "Anya",
  "April",
  "Ara",
  "Araceli",
  "Aracely",
  "Arch",
  "Archibald",
  "Ardella",
  "Arden",
  "Ardith",
  "Arely",
  "Ari",
  "Ariane",
  "Arianna",
  "Aric",
  "Ariel",
  "Arielle",
  "Arjun",
  "Arlene",
  "Arlie",
  "Arlo",
  "Armand",
  "Armando",
  "Armani",
  "Arnaldo",
  "Arne",
  "Arno",
  "Arnold",
  "Arnoldo",
  "Arnulfo",
  "Aron",
  "Art",
  "Arthur",
  "Arturo",
  "Arvel",
  "Arvid",
  "Arvilla",
  "Aryanna",
  "Asa",
  "Asha",
  "Ashlee",
  "Ashleigh",
  "Ashley",
  "Ashly",
  "Ashlynn",
  "Ashton",
  "Ashtyn",
  "Asia",
  "Assunta",
  "Astrid",
  "Athena",
  "Aubree",
  "Aubrey",
  "Audie",
  "Audra",
  "Audreanne",
  "Audrey",
  "August",
  "Augusta",
  "Augustine",
  "Augustus",
  "Aurelia",
  "Aurelie",
  "Aurelio",
  "Aurore",
  "Austen",
  "Austin",
  "Austyn",
  "Autumn",
  "Ava",
  "Avery",
  "Avis",
  "Axel",
  "Ayana",
  "Ayden",
  "Ayla",
  "Aylin",
  "Baby",
  "Bailee",
  "Bailey",
  "Barbara",
  "Barney",
  "Baron",
  "Barrett",
  "Barry",
  "Bart",
  "Bartholome",
  "Barton",
  "Baylee",
  "Beatrice",
  "Beau",
  "Beaulah",
  "Bell",
  "Bella",
  "Belle",
  "Ben",
  "Benedict",
  "Benjamin",
  "Bennett",
  "Bennie",
  "Benny",
  "Benton",
  "Berenice",
  "Bernadette",
  "Bernadine",
  "Bernard",
  "Bernardo",
  "Berneice",
  "Bernhard",
  "Bernice",
  "Bernie",
  "Berniece",
  "Bernita",
  "Berry",
  "Bert",
  "Berta",
  "Bertha",
  "Bertram",
  "Bertrand",
  "Beryl",
  "Bessie",
  "Beth",
  "Bethany",
  "Bethel",
  "Betsy",
  "Bette",
  "Bettie",
  "Betty",
  "Bettye",
  "Beulah",
  "Beverly",
  "Bianka",
  "Bill",
  "Billie",
  "Billy",
  "Birdie",
  "Blair",
  "Blaise",
  "Blake",
  "Blanca",
  "Blanche",
  "Blaze",
  "Bo",
  "Bobbie",
  "Bobby",
  "Bonita",
  "Bonnie",
  "Boris",
  "Boyd",
  "Brad",
  "Braden",
  "Bradford",
  "Bradley",
  "Bradly",
  "Brady",
  "Braeden",
  "Brain",
  "Brandi",
  "Brando",
  "Brandon",
  "Brandt",
  "Brandy",
  "Brandyn",
  "Brannon",
  "Branson",
  "Brant",
  "Braulio",
  "Braxton",
  "Brayan",
  "Breana",
  "Breanna",
  "Breanne",
  "Brenda",
  "Brendan",
  "Brenden",
  "Brendon",
  "Brenna",
  "Brennan",
  "Brennon",
  "Brent",
  "Bret",
  "Brett",
  "Bria",
  "Brian",
  "Briana",
  "Brianne",
  "Brice",
  "Bridget",
  "Bridgette",
  "Bridie",
  "Brielle",
  "Brigitte",
  "Brionna",
  "Brisa",
  "Britney",
  "Brittany",
  "Brock",
  "Broderick",
  "Brody",
  "Brook",
  "Brooke",
  "Brooklyn",
  "Brooks",
  "Brown",
  "Bruce",
  "Bryana",
  "Bryce",
  "Brycen",
  "Bryon",
  "Buck",
  "Bud",
  "Buddy",
  "Buford",
  "Bulah",
  "Burdette",
  "Burley",
  "Burnice",
  "Buster",
  "Cade",
  "Caden",
  "Caesar",
  "Caitlyn",
  "Cale",
  "Caleb",
  "Caleigh",
  "Cali",
  "Calista",
  "Callie",
  "Camden",
  "Cameron",
  "Camila",
  "Camilla",
  "Camille",
  "Camren",
  "Camron",
  "Camryn",
  "Camylle",
  "Candace",
  "Candelario",
  "Candice",
  "Candida",
  "Candido",
  "Cara",
  "Carey",
  "Carissa",
  "Carlee",
  "Carleton",
  "Carley",
  "Carli",
  "Carlie",
  "Carlo",
  "Carlos",
  "Carlotta",
  "Carmel",
  "Carmela",
  "Carmella",
  "Carmelo",
  "Carmen",
  "Carmine",
  "Carol",
  "Carolanne",
  "Carole",
  "Carolina",
  "Caroline",
  "Carolyn",
  "Carolyne",
  "Carrie",
  "Carroll",
  "Carson",
  "Carter",
  "Cary",
  "Casandra",
  "Casey",
  "Casimer",
  "Casimir",
  "Casper",
  "Cassandra",
  "Cassandre",
  "Cassidy",
  "Cassie",
  "Catalina",
  "Caterina",
  "Catharine",
  "Catherine",
  "Cathrine",
  "Cathryn",
  "Cathy",
  "Cayla",
  "Ceasar",
  "Cecelia",
  "Cecil",
  "Cecile",
  "Cecilia",
  "Cedrick",
  "Celestine",
  "Celestino",
  "Celia",
  "Celine",
  "Cesar",
  "Chad",
  "Chadd",
  "Chadrick",
  "Chaim",
  "Chance",
  "Chandler",
  "Chanel",
  "Chanelle",
  "Charity",
  "Charlene",
  "Charles",
  "Charley",
  "Charlie",
  "Charlotte",
  "Chase",
  "Chasity",
  "Chauncey",
  "Chaya",
  "Chaz",
  "Chelsea",
  "Chelsey",
  "Chelsie",
  "Chesley",
  "Chester",
  "Chet",
  "Cheyanne",
  "Cheyenne",
  "Chloe",
  "Chris",
  "Christ",
  "Christa",
  "Christelle",
  "Christian",
  "Christiana",
  "Christina",
  "Christine",
  "Christop",
  "Christophe",
  "Christopher",
  "Christy",
  "Chyna",
  "Ciara",
  "Cicero",
  "Cielo",
  "Cierra",
  "Cindy",
  "Citlalli",
  "Clair",
  "Claire",
  "Clara",
  "Clarabelle",
  "Clare",
  "Clarissa",
  "Clark",
  "Claud",
  "Claude",
  "Claudia",
  "Claudie",
  "Claudine",
  "Clay",
  "Clemens",
  "Clement",
  "Clementina",
  "Clementine",
  "Clemmie",
  "Cleo",
  "Cleora",
  "Cleta",
  "Cletus",
  "Cleve",
  "Cleveland",
  "Clifford",
  "Clifton",
  "Clint",
  "Clinton",
  "Clotilde",
  "Clovis",
  "Cloyd",
  "Clyde",
  "Coby",
  "Cody",
  "Colby",
  "Cole",
  "Coleman",
  "Colin",
  "Colleen",
  "Collin",
  "Colt",
  "Colten",
  "Colton",
  "Columbus",
  "Concepcion",
  "Conner",
  "Connie",
  "Connor",
  "Conor",
  "Conrad",
  "Constance",
  "Constantin",
  "Consuelo",
  "Cooper",
  "Cora",
  "Coralie",
  "Corbin",
  "Cordelia",
  "Cordell",
  "Cordia",
  "Cordie",
  "Corene",
  "Corine",
  "Cornelius",
  "Cornell",
  "Corrine",
  "Cortez",
  "Cortney",
  "Cory",
  "Coty",
  "Courtney",
  "Coy",
  "Craig",
  "Crawford",
  "Creola",
  "Cristal",
  "Cristian",
  "Cristina",
  "Cristobal",
  "Cristopher",
  "Cruz",
  "Crystal",
  "Crystel",
  "Cullen",
  "Curt",
  "Curtis",
  "Cydney",
  "Cynthia",
  "Cyril",
  "Cyrus",
  "Dagmar",
  "Dahlia",
  "Daija",
  "Daisha",
  "Daisy",
  "Dakota",
  "Dale",
  "Dallas",
  "Dallin",
  "Dalton",
  "Damaris",
  "Dameon",
  "Damian",
  "Damien",
  "Damion",
  "Damon",
  "Dan",
  "Dana",
  "Dandre",
  "Dane",
  "D'angelo",
  "Dangelo",
  "Danial",
  "Daniela",
  "Daniella",
  "Danielle",
  "Danika",
  "Dannie",
  "Danny",
  "Dante",
  "Danyka",
  "Daphne",
  "Daphnee",
  "Daphney",
  "Darby",
  "Daren",
  "Darian",
  "Dariana",
  "Darien",
  "Dario",
  "Darion",
  "Darius",
  "Darlene",
  "Daron",
  "Darrel",
  "Darrell",
  "Darren",
  "Darrick",
  "Darrin",
  "Darrion",
  "Darron",
  "Darryl",
  "Darwin",
  "Daryl",
  "Dashawn",
  "Dasia",
  "Dave",
  "David",
  "Davin",
  "Davion",
  "Davon",
  "Davonte",
  "Dawn",
  "Dawson",
  "Dax",
  "Dayana",
  "Dayna",
  "Dayne",
  "Dayton",
  "Dean",
  "Deangelo",
  "Deanna",
  "Deborah",
  "Declan",
  "Dedric",
  "Dedrick",
  "Dee",
  "Deion",
  "Deja",
  "Dejah",
  "Dejon",
  "Dejuan",
  "Delaney",
  "Delbert",
  "Delfina",
  "Delia",
  "Delilah",
  "Dell",
  "Della",
  "Delmer",
  "Delores",
  "Delpha",
  "Delphia",
  "Delphine",
  "Delta",
  "Demarco",
  "Demarcus",
  "Demario",
  "Demetris",
  "Demetrius",
  "Demond",
  "Dena",
  "Denis",
  "Dennis",
  "Deon",
  "Deondre",
  "Deontae",
  "Deonte",
  "Dereck",
  "Derek",
  "Derick",
  "Deron",
  "Derrick",
  "Deshaun",
  "Deshawn",
  "Desiree",
  "Desmond",
  "Dessie",
  "Destany",
  "Destin",
  "Destinee",
  "Destiney",
  "Destini",
  "Destiny",
  "Devan",
  "Devante",
  "Deven",
  "Devin",
  "Devon",
  "Devonte",
  "Devyn",
  "Dewayne",
  "Dewitt",
  "Dexter",
  "Diamond",
  "Diana",
  "Dianna",
  "Diego",
  "Dillan",
  "Dillon",
  "Dimitri",
  "Dina",
  "Dino",
  "Dion",
  "Dixie",
  "Dock",
  "Dolly",
  "Dolores",
  "Domenic",
  "Domenica",
  "Domenick",
  "Domenico",
  "Domingo",
  "Dominic",
  "Dominique",
  "Don",
  "Donald",
  "Donato",
  "Donavon",
  "Donna",
  "Donnell",
  "Donnie",
  "Donny",
  "Dora",
  "Dorcas",
  "Dorian",
  "Doris",
  "Dorothea",
  "Dorothy",
  "Dorris",
  "Dortha",
  "Dorthy",
  "Doug",
  "Douglas",
  "Dovie",
  "Doyle",
  "Drake",
  "Drew",
  "Duane",
  "Dudley",
  "Dulce",
  "Duncan",
  "Durward",
  "Dustin",
  "Dusty",
  "Dwight",
  "Dylan",
  "Earl",
  "Earlene",
  "Earline",
  "Earnest",
  "Earnestine",
  "Easter",
  "Easton",
  "Ebba",
  "Ebony",
  "Ed",
  "Eda",
  "Edd",
  "Eddie",
  "Eden",
  "Edgar",
  "Edgardo",
  "Edison",
  "Edmond",
  "Edmund",
  "Edna",
  "Eduardo",
  "Edward",
  "Edwardo",
  "Edwin",
  "Edwina",
  "Edyth",
  "Edythe",
  "Effie",
  "Efrain",
  "Efren",
  "Eileen",
  "Einar",
  "Eino",
  "Eladio",
  "Elaina",
  "Elbert",
  "Elda",
  "Eldon",
  "Eldora",
  "Eldred",
  "Eldridge",
  "Eleanora",
  "Eleanore",
  "Eleazar",
  "Electa",
  "Elena",
  "Elenor",
  "Elenora",
  "Eleonore",
  "Elfrieda",
  "Eli",
  "Elian",
  "Eliane",
  "Elias",
  "Eliezer",
  "Elijah",
  "Elinor",
  "Elinore",
  "Elisa",
  "Elisabeth",
  "Elise",
  "Eliseo",
  "Elisha",
  "Elissa",
  "Eliza",
  "Elizabeth",
  "Ella",
  "Ellen",
  "Ellie",
  "Elliot",
  "Elliott",
  "Ellis",
  "Ellsworth",
  "Elmer",
  "Elmira",
  "Elmo",
  "Elmore",
  "Elna",
  "Elnora",
  "Elody",
  "Eloisa",
  "Eloise",
  "Elouise",
  "Eloy",
  "Elroy",
  "Elsa",
  "Else",
  "Elsie",
  "Elta",
  "Elton",
  "Elva",
  "Elvera",
  "Elvie",
  "Elvis",
  "Elwin",
  "Elwyn",
  "Elyse",
  "Elyssa",
  "Elza",
  "Emanuel",
  "Emelia",
  "Emelie",
  "Emely",
  "Emerald",
  "Emerson",
  "Emery",
  "Emie",
  "Emil",
  "Emile",
  "Emilia",
  "Emiliano",
  "Emilie",
  "Emilio",
  "Emily",
  "Emma",
  "Emmalee",
  "Emmanuel",
  "Emmanuelle",
  "Emmet",
  "Emmett",
  "Emmie",
  "Emmitt",
  "Emmy",
  "Emory",
  "Ena",
  "Enid",
  "Enoch",
  "Enola",
  "Enos",
  "Enrico",
  "Enrique",
  "Ephraim",
  "Era",
  "Eriberto",
  "Eric",
  "Erica",
  "Erich",
  "Erick",
  "Ericka",
  "Erik",
  "Erika",
  "Erin",
  "Erling",
  "Erna",
  "Ernest",
  "Ernestina",
  "Ernestine",
  "Ernesto",
  "Ernie",
  "Ervin",
  "Erwin",
  "Eryn",
  "Esmeralda",
  "Esperanza",
  "Esta",
  "Esteban",
  "Estefania",
  "Estel",
  "Estell",
  "Estella",
  "Estelle",
  "Estevan",
  "Esther",
  "Estrella",
  "Etha",
  "Ethan",
  "Ethel",
  "Ethelyn",
  "Ethyl",
  "Ettie",
  "Eudora",
  "Eugene",
  "Eugenia",
  "Eula",
  "Eulah",
  "Eulalia",
  "Euna",
  "Eunice",
  "Eusebio",
  "Eva",
  "Evalyn",
  "Evan",
  "Evangeline",
  "Evans",
  "Eve",
  "Eveline",
  "Evelyn",
  "Everardo",
  "Everett",
  "Everette",
  "Evert",
  "Evie",
  "Ewald",
  "Ewell",
  "Ezekiel",
  "Ezequiel",
  "Ezra",
  "Fabian",
  "Fabiola",
  "Fae",
  "Fannie",
  "Fanny",
  "Fatima",
  "Faustino",
  "Fausto",
  "Favian",
  "Fay",
  "Faye",
  "Federico",
  "Felicia",
  "Felicita",
  "Felicity",
  "Felipa",
  "Felipe",
  "Felix",
  "Felton",
  "Fermin",
  "Fern",
  "Fernando",
  "Ferne",
  "Fidel",
  "Filiberto",
  "Filomena",
  "Finn",
  "Fiona",
  "Flavie",
  "Flavio",
  "Fleta",
  "Fletcher",
  "Flo",
  "Florence",
  "Florencio",
  "Florian",
  "Florida",
  "Florine",
  "Flossie",
  "Floy",
  "Floyd",
  "Ford",
  "Forest",
  "Forrest",
  "Foster",
  "Frances",
  "Francesca",
  "Francesco",
  "Francis",
  "Francisca",
  "Francisco",
  "Franco",
  "Frank",
  "Frankie",
  "Franz",
  "Fred",
  "Freda",
  "Freddie",
  "Freddy",
  "Frederic",
  "Frederick",
  "Frederik",
  "Frederique",
  "Fredrick",
  "Fredy",
  "Freeda",
  "Freeman",
  "Freida",
  "Frida",
  "Frieda",
  "Friedrich",
  "Fritz",
  "Furman",
  "Gabe",
  "Gabriel",
  "Gabriella",
  "Gabrielle",
  "Gaetano",
  "Gage",
  "Gail",
  "Gardner",
  "Garett",
  "Garfield",
  "Garland",
  "Garnet",
  "Garnett",
  "Garret",
  "Garrett",
  "Garrick",
  "Garrison",
  "Garry",
  "Garth",
  "Gaston",
  "Gavin",
  "Gay",
  "Gayle",
  "Gaylord",
  "Gene",
  "General",
  "Genesis",
  "Genevieve",
  "Gennaro",
  "Genoveva",
  "Geo",
  "Geoffrey",
  "George",
  "Georgette",
  "Georgiana",
  "Georgianna",
  "Geovanni",
  "Geovanny",
  "Geovany",
  "Gerald",
  "Geraldine",
  "Gerard",
  "Gerardo",
  "Gerda",
  "Gerhard",
  "Germaine",
  "German",
  "Gerry",
  "Gerson",
  "Gertrude",
  "Gia",
  "Gianni",
  "Gideon",
  "Gilbert",
  "Gilberto",
  "Gilda",
  "Giles",
  "Gillian",
  "Gina",
  "Gino",
  "Giovani",
  "Giovanna",
  "Giovanni",
  "Giovanny",
  "Gisselle",
  "Giuseppe",
  "Gladyce",
  "Gladys",
  "Glen",
  "Glenda",
  "Glenna",
  "Glennie",
  "Gloria",
  "Godfrey",
  "Golda",
  "Golden",
  "Gonzalo",
  "Gordon",
  "Grace",
  "Gracie",
  "Graciela",
  "Grady",
  "Graham",
  "Grant",
  "Granville",
  "Grayce",
  "Grayson",
  "Green",
  "Greg",
  "Gregg",
  "Gregoria",
  "Gregorio",
  "Gregory",
  "Greta",
  "Gretchen",
  "Greyson",
  "Griffin",
  "Grover",
  "Guadalupe",
  "Gudrun",
  "Guido",
  "Guillermo",
  "Guiseppe",
  "Gunnar",
  "Gunner",
  "Gus",
  "Gussie",
  "Gust",
  "Gustave",
  "Guy",
  "Gwen",
  "Gwendolyn",
  "Hadley",
  "Hailee",
  "Hailey",
  "Hailie",
  "Hal",
  "Haleigh",
  "Haley",
  "Halie",
  "Halle",
  "Hallie",
  "Hank",
  "Hanna",
  "Hannah",
  "Hans",
  "Hardy",
  "Harley",
  "Harmon",
  "Harmony",
  "Harold",
  "Harrison",
  "Harry",
  "Harvey",
  "Haskell",
  "Hassan",
  "Hassie",
  "Hattie",
  "Haven",
  "Hayden",
  "Haylee",
  "Hayley",
  "Haylie",
  "Hazel",
  "Hazle",
  "Heath",
  "Heather",
  "Heaven",
  "Heber",
  "Hector",
  "Heidi",
  "Helen",
  "Helena",
  "Helene",
  "Helga",
  "Hellen",
  "Helmer",
  "Heloise",
  "Henderson",
  "Henri",
  "Henriette",
  "Henry",
  "Herbert",
  "Herman",
  "Hermann",
  "Hermina",
  "Herminia",
  "Herminio",
  "Hershel",
  "Herta",
  "Hertha",
  "Hester",
  "Hettie",
  "Hilario",
  "Hilbert",
  "Hilda",
  "Hildegard",
  "Hillard",
  "Hillary",
  "Hilma",
  "Hilton",
  "Hipolito",
  "Hiram",
  "Hobart",
  "Holden",
  "Hollie",
  "Hollis",
  "Holly",
  "Hope",
  "Horace",
  "Horacio",
  "Hortense",
  "Hosea",
  "Houston",
  "Howard",
  "Howell",
  "Hoyt",
  "Hubert",
  "Hudson",
  "Hugh",
  "Hulda",
  "Humberto",
  "Hunter",
  "Hyman",
  "Ian",
  "Ibrahim",
  "Icie",
  "Ida",
  "Idell",
  "Idella",
  "Ignacio",
  "Ignatius",
  "Ike",
  "Ila",
  "Ilene",
  "Iliana",
  "Ima",
  "Imani",
  "Imelda",
  "Immanuel",
  "Imogene",
  "Ines",
  "Irma",
  "Irving",
  "Irwin",
  "Isaac",
  "Isabel",
  "Isabell",
  "Isabella",
  "Isabelle",
  "Isac",
  "Isadore",
  "Isai",
  "Isaiah",
  "Isaias",
  "Isidro",
  "Ismael",
  "Isobel",
  "Isom",
  "Israel",
  "Issac",
  "Itzel",
  "Iva",
  "Ivah",
  "Ivory",
  "Ivy",
  "Izabella",
  "Izaiah",
  "Jabari",
  "Jace",
  "Jacey",
  "Jacinthe",
  "Jacinto",
  "Jack",
  "Jackeline",
  "Jackie",
  "Jacklyn",
  "Jackson",
  "Jacky",
  "Jaclyn",
  "Jacquelyn",
  "Jacques",
  "Jacynthe",
  "Jada",
  "Jade",
  "Jaden",
  "Jadon",
  "Jadyn",
  "Jaeden",
  "Jaida",
  "Jaiden",
  "Jailyn",
  "Jaime",
  "Jairo",
  "Jakayla",
  "Jake",
  "Jakob",
  "Jaleel",
  "Jalen",
  "Jalon",
  "Jalyn",
  "Jamaal",
  "Jamal",
  "Jamar",
  "Jamarcus",
  "Jamel",
  "Jameson",
  "Jamey",
  "Jamie",
  "Jamil",
  "Jamir",
  "Jamison",
  "Jammie",
  "Jan",
  "Jana",
  "Janae",
  "Jane",
  "Janelle",
  "Janessa",
  "Janet",
  "Janice",
  "Janick",
  "Janie",
  "Janis",
  "Janiya",
  "Jannie",
  "Jany",
  "Jaquan",
  "Jaquelin",
  "Jaqueline",
  "Jared",
  "Jaren",
  "Jarod",
  "Jaron",
  "Jarred",
  "Jarrell",
  "Jarret",
  "Jarrett",
  "Jarrod",
  "Jarvis",
  "Jasen",
  "Jasmin",
  "Jason",
  "Jasper",
  "Jaunita",
  "Javier",
  "Javon",
  "Javonte",
  "Jay",
  "Jayce",
  "Jaycee",
  "Jayda",
  "Jayde",
  "Jayden",
  "Jaydon",
  "Jaylan",
  "Jaylen",
  "Jaylin",
  "Jaylon",
  "Jayme",
  "Jayne",
  "Jayson",
  "Jazlyn",
  "Jazmin",
  "Jazmyn",
  "Jazmyne",
  "Jean",
  "Jeanette",
  "Jeanie",
  "Jeanne",
  "Jed",
  "Jedediah",
  "Jedidiah",
  "Jeff",
  "Jefferey",
  "Jeffery",
  "Jeffrey",
  "Jeffry",
  "Jena",
  "Jenifer",
  "Jennie",
  "Jennifer",
  "Jennings",
  "Jennyfer",
  "Jensen",
  "Jerad",
  "Jerald",
  "Jeramie",
  "Jeramy",
  "Jerel",
  "Jeremie",
  "Jeremy",
  "Jermain",
  "Jermaine",
  "Jermey",
  "Jerod",
  "Jerome",
  "Jeromy",
  "Jerrell",
  "Jerrod",
  "Jerrold",
  "Jerry",
  "Jess",
  "Jesse",
  "Jessica",
  "Jessie",
  "Jessika",
  "Jessy",
  "Jessyca",
  "Jesus",
  "Jett",
  "Jettie",
  "Jevon",
  "Jewel",
  "Jewell",
  "Jillian",
  "Jimmie",
  "Jimmy",
  "Jo",
  "Joan",
  "Joana",
  "Joanie",
  "Joanne",
  "Joannie",
  "Joanny",
  "Joany",
  "Joaquin",
  "Jocelyn",
  "Jodie",
  "Jody",
  "Joe",
  "Joel",
  "Joelle",
  "Joesph",
  "Joey",
  "Johan",
  "Johann",
  "Johanna",
  "Johathan",
  "John",
  "Johnathan",
  "Johnathon",
  "Johnnie",
  "Johnny",
  "Johnpaul",
  "Johnson",
  "Jolie",
  "Jon",
  "Jonas",
  "Jonatan",
  "Jonathan",
  "Jonathon",
  "Jordan",
  "Jordane",
  "Jordi",
  "Jordon",
  "Jordy",
  "Jordyn",
  "Jorge",
  "Jose",
  "Josefa",
  "Josefina",
  "Joseph",
  "Josephine",
  "Josh",
  "Joshua",
  "Joshuah",
  "Josiah",
  "Josiane",
  "Josianne",
  "Josie",
  "Josue",
  "Jovan",
  "Jovani",
  "Jovanny",
  "Jovany",
  "Joy",
  "Joyce",
  "Juana",
  "Juanita",
  "Judah",
  "Judd",
  "Jude",
  "Judge",
  "Judson",
  "Judy",
  "Jules",
  "Julia",
  "Julian",
  "Juliana",
  "Julianne",
  "Julie",
  "Julien",
  "Juliet",
  "Julio",
  "Julius",
  "June",
  "Junior",
  "Junius",
  "Justen",
  "Justice",
  "Justina",
  "Justine",
  "Juston",
  "Justus",
  "Justyn",
  "Juvenal",
  "Juwan",
  "Kacey",
  "Kaci",
  "Kacie",
  "Kade",
  "Kaden",
  "Kadin",
  "Kaela",
  "Kaelyn",
  "Kaia",
  "Kailee",
  "Kailey",
  "Kailyn",
  "Kaitlin",
  "Kaitlyn",
  "Kale",
  "Kaleb",
  "Kaleigh",
  "Kaley",
  "Kali",
  "Kallie",
  "Kameron",
  "Kamille",
  "Kamren",
  "Kamron",
  "Kamryn",
  "Kane",
  "Kara",
  "Kareem",
  "Karelle",
  "Karen",
  "Kari",
  "Kariane",
  "Karianne",
  "Karina",
  "Karine",
  "Karl",
  "Karlee",
  "Karley",
  "Karli",
  "Karlie",
  "Karolann",
  "Karson",
  "Kasandra",
  "Kasey",
  "Kassandra",
  "Katarina",
  "Katelin",
  "Katelyn",
  "Katelynn",
  "Katharina",
  "Katherine",
  "Katheryn",
  "Kathleen",
  "Kathlyn",
  "Kathryn",
  "Kathryne",
  "Katlyn",
  "Katlynn",
  "Katrina",
  "Katrine",
  "Kattie",
  "Kavon",
  "Kay",
  "Kaya",
  "Kaycee",
  "Kayden",
  "Kayla",
  "Kaylah",
  "Kaylee",
  "Kayleigh",
  "Kayley",
  "Kayli",
  "Kaylie",
  "Kaylin",
  "Keagan",
  "Keanu",
  "Keara",
  "Keaton",
  "Keegan",
  "Keeley",
  "Keely",
  "Keenan",
  "Keira",
  "Keith",
  "Kellen",
  "Kelley",
  "Kelli",
  "Kellie",
  "Kelly",
  "Kelsi",
  "Kelsie",
  "Kelton",
  "Kelvin",
  "Ken",
  "Kendall",
  "Kendra",
  "Kendrick",
  "Kenna",
  "Kennedi",
  "Kennedy",
  "Kenneth",
  "Kennith",
  "Kenny",
  "Kenton",
  "Kenya",
  "Kenyatta",
  "Kenyon",
  "Keon",
  "Keshaun",
  "Keshawn",
  "Keven",
  "Kevin",
  "Kevon",
  "Keyon",
  "Keyshawn",
  "Khalid",
  "Khalil",
  "Kian",
  "Kiana",
  "Kianna",
  "Kiara",
  "Kiarra",
  "Kiel",
  "Kiera",
  "Kieran",
  "Kiley",
  "Kim",
  "Kimberly",
  "King",
  "Kip",
  "Kira",
  "Kirk",
  "Kirsten",
  "Kirstin",
  "Kitty",
  "Kobe",
  "Koby",
  "Kody",
  "Kolby",
  "Kole",
  "Korbin",
  "Korey",
  "Kory",
  "Kraig",
  "Kris",
  "Krista",
  "Kristian",
  "Kristin",
  "Kristina",
  "Kristofer",
  "Kristoffer",
  "Kristopher",
  "Kristy",
  "Krystal",
  "Krystel",
  "Krystina",
  "Kurt",
  "Kurtis",
  "Kyla",
  "Kyle",
  "Kylee",
  "Kyleigh",
  "Kyler",
  "Kylie",
  "Kyra",
  "Lacey",
  "Lacy",
  "Ladarius",
  "Lafayette",
  "Laila",
  "Laisha",
  "Lamar",
  "Lambert",
  "Lamont",
  "Lance",
  "Landen",
  "Lane",
  "Laney",
  "Larissa",
  "Laron",
  "Larry",
  "Larue",
  "Laura",
  "Laurel",
  "Lauren",
  "Laurence",
  "Lauretta",
  "Lauriane",
  "Laurianne",
  "Laurie",
  "Laurine",
  "Laury",
  "Lauryn",
  "Lavada",
  "Lavern",
  "Laverna",
  "Laverne",
  "Lavina",
  "Lavinia",
  "Lavon",
  "Lavonne",
  "Lawrence",
  "Lawson",
  "Layla",
  "Layne",
  "Lazaro",
  "Lea",
  "Leann",
  "Leanna",
  "Leanne",
  "Leatha",
  "Leda",
  "Lee",
  "Leif",
  "Leila",
  "Leilani",
  "Lela",
  "Lelah",
  "Leland",
  "Lelia",
  "Lempi",
  "Lemuel",
  "Lenna",
  "Lennie",
  "Lenny",
  "Lenora",
  "Lenore",
  "Leo",
  "Leola",
  "Leon",
  "Leonard",
  "Leonardo",
  "Leone",
  "Leonel",
  "Leonie",
  "Leonor",
  "Leonora",
  "Leopold",
  "Leopoldo",
  "Leora",
  "Lera",
  "Lesley",
  "Leslie",
  "Lesly",
  "Lessie",
  "Lester",
  "Leta",
  "Letha",
  "Letitia",
  "Levi",
  "Lew",
  "Lewis",
  "Lexi",
  "Lexie",
  "Lexus",
  "Lia",
  "Liam",
  "Liana",
  "Libbie",
  "Libby",
  "Lila",
  "Lilian",
  "Liliana",
  "Liliane",
  "Lilla",
  "Lillian",
  "Lilliana",
  "Lillie",
  "Lilly",
  "Lily",
  "Lilyan",
  "Lina",
  "Lincoln",
  "Linda",
  "Lindsay",
  "Lindsey",
  "Linnea",
  "Linnie",
  "Linwood",
  "Lionel",
  "Lisa",
  "Lisandro",
  "Lisette",
  "Litzy",
  "Liza",
  "Lizeth",
  "Lizzie",
  "Llewellyn",
  "Lloyd",
  "Logan",
  "Lois",
  "Lola",
  "Lolita",
  "Loma",
  "Lon",
  "London",
  "Lonie",
  "Lonnie",
  "Lonny",
  "Lonzo",
  "Lora",
  "Loraine",
  "Loren",
  "Lorena",
  "Lorenz",
  "Lorenza",
  "Lorenzo",
  "Lori",
  "Lorine",
  "Lorna",
  "Lottie",
  "Lou",
  "Louie",
  "Louisa",
  "Lourdes",
  "Louvenia",
  "Lowell",
  "Loy",
  "Loyal",
  "Loyce",
  "Lucas",
  "Luciano",
  "Lucie",
  "Lucienne",
  "Lucile",
  "Lucinda",
  "Lucio",
  "Lucious",
  "Lucius",
  "Lucy",
  "Ludie",
  "Ludwig",
  "Lue",
  "Luella",
  "Luigi",
  "Luis",
  "Luisa",
  "Lukas",
  "Lula",
  "Lulu",
  "Luna",
  "Lupe",
  "Lura",
  "Lurline",
  "Luther",
  "Luz",
  "Lyda",
  "Lydia",
  "Lyla",
  "Lynn",
  "Lyric",
  "Lysanne",
  "Mabel",
  "Mabelle",
  "Mable",
  "Mac",
  "Macey",
  "Maci",
  "Macie",
  "Mack",
  "Mackenzie",
  "Macy",
  "Madaline",
  "Madalyn",
  "Maddison",
  "Madeline",
  "Madelyn",
  "Madelynn",
  "Madge",
  "Madie",
  "Madilyn",
  "Madisen",
  "Madison",
  "Madisyn",
  "Madonna",
  "Madyson",
  "Mae",
  "Maegan",
  "Maeve",
  "Mafalda",
  "Magali",
  "Magdalen",
  "Magdalena",
  "Maggie",
  "Magnolia",
  "Magnus",
  "Maia",
  "Maida",
  "Maiya",
  "Major",
  "Makayla",
  "Makenna",
  "Makenzie",
  "Malachi",
  "Malcolm",
  "Malika",
  "Malinda",
  "Mallie",
  "Mallory",
  "Malvina",
  "Mandy",
  "Manley",
  "Manuel",
  "Manuela",
  "Mara",
  "Marc",
  "Marcel",
  "Marcelina",
  "Marcelino",
  "Marcella",
  "Marcelle",
  "Marcellus",
  "Marcelo",
  "Marcia",
  "Marco",
  "Marcos",
  "Marcus",
  "Margaret",
  "Margarete",
  "Margarett",
  "Margaretta",
  "Margarette",
  "Margarita",
  "Marge",
  "Margie",
  "Margot",
  "Margret",
  "Marguerite",
  "Maria",
  "Mariah",
  "Mariam",
  "Marian",
  "Mariana",
  "Mariane",
  "Marianna",
  "Marianne",
  "Mariano",
  "Maribel",
  "Marie",
  "Mariela",
  "Marielle",
  "Marietta",
  "Marilie",
  "Marilou",
  "Marilyne",
  "Marina",
  "Mario",
  "Marion",
  "Marisa",
  "Marisol",
  "Maritza",
  "Marjolaine",
  "Marjorie",
  "Marjory",
  "Mark",
  "Markus",
  "Marlee",
  "Marlen",
  "Marlene",
  "Marley",
  "Marlin",
  "Marlon",
  "Marques",
  "Marquis",
  "Marquise",
  "Marshall",
  "Marta",
  "Martin",
  "Martina",
  "Martine",
  "Marty",
  "Marvin",
  "Mary",
  "Maryam",
  "Maryjane",
  "Maryse",
  "Mason",
  "Mateo",
  "Mathew",
  "Mathias",
  "Mathilde",
  "Matilda",
  "Matilde",
  "Matt",
  "Matteo",
  "Mattie",
  "Maud",
  "Maude",
  "Maudie",
  "Maureen",
  "Maurice",
  "Mauricio",
  "Maurine",
  "Maverick",
  "Mavis",
  "Max",
  "Maxie",
  "Maxime",
  "Maximilian",
  "Maximillia",
  "Maximillian",
  "Maximo",
  "Maximus",
  "Maxine",
  "Maxwell",
  "May",
  "Maya",
  "Maybell",
  "Maybelle",
  "Maye",
  "Maymie",
  "Maynard",
  "Mayra",
  "Mazie",
  "Mckayla",
  "Mckenna",
  "Mckenzie",
  "Meagan",
  "Meaghan",
  "Meda",
  "Megane",
  "Meggie",
  "Meghan",
  "Mekhi",
  "Melany",
  "Melba",
  "Melisa",
  "Melissa",
  "Mellie",
  "Melody",
  "Melvin",
  "Melvina",
  "Melyna",
  "Melyssa",
  "Mercedes",
  "Meredith",
  "Merl",
  "Merle",
  "Merlin",
  "Merritt",
  "Mertie",
  "Mervin",
  "Meta",
  "Mia",
  "Micaela",
  "Micah",
  "Michael",
  "Michaela",
  "Michale",
  "Micheal",
  "Michel",
  "Michele",
  "Michelle",
  "Miguel",
  "Mikayla",
  "Mike",
  "Mikel",
  "Milan",
  "Miles",
  "Milford",
  "Miller",
  "Millie",
  "Milo",
  "Milton",
  "Mina",
  "Minerva",
  "Minnie",
  "Miracle",
  "Mireille",
  "Mireya",
  "Misael",
  "Missouri",
  "Misty",
  "Mitchel",
  "Mitchell",
  "Mittie",
  "Modesta",
  "Modesto",
  "Mohamed",
  "Mohammad",
  "Mohammed",
  "Moises",
  "Mollie",
  "Molly",
  "Mona",
  "Monica",
  "Monique",
  "Monroe",
  "Monserrat",
  "Monserrate",
  "Montana",
  "Monte",
  "Monty",
  "Morgan",
  "Moriah",
  "Morris",
  "Mortimer",
  "Morton",
  "Mose",
  "Moses",
  "Moshe",
  "Mossie",
  "Mozell",
  "Mozelle",
  "Muhammad",
  "Muriel",
  "Murl",
  "Murphy",
  "Murray",
  "Mustafa",
  "Mya",
  "Myah",
  "Mylene",
  "Myles",
  "Myra",
  "Myriam",
  "Myrl",
  "Myrna",
  "Myron",
  "Myrtice",
  "Myrtie",
  "Myrtis",
  "Myrtle",
  "Nadia",
  "Nakia",
  "Name",
  "Nannie",
  "Naomi",
  "Naomie",
  "Napoleon",
  "Narciso",
  "Nash",
  "Nasir",
  "Nat",
  "Natalia",
  "Natalie",
  "Natasha",
  "Nathan",
  "Nathanael",
  "Nathanial",
  "Nathaniel",
  "Nathen",
  "Nayeli",
  "Neal",
  "Ned",
  "Nedra",
  "Neha",
  "Neil",
  "Nelda",
  "Nella",
  "Nelle",
  "Nellie",
  "Nels",
  "Nelson",
  "Neoma",
  "Nestor",
  "Nettie",
  "Neva",
  "Newell",
  "Newton",
  "Nia",
  "Nicholas",
  "Nicholaus",
  "Nichole",
  "Nick",
  "Nicklaus",
  "Nickolas",
  "Nico",
  "Nicola",
  "Nicolas",
  "Nicole",
  "Nicolette",
  "Nigel",
  "Nikita",
  "Nikki",
  "Nikko",
  "Niko",
  "Nikolas",
  "Nils",
  "Nina",
  "Noah",
  "Noble",
  "Noe",
  "Noel",
  "Noelia",
  "Noemi",
  "Noemie",
  "Noemy",
  "Nola",
  "Nolan",
  "Nona",
  "Nora",
  "Norbert",
  "Norberto",
  "Norene",
  "Norma",
  "Norris",
  "Norval",
  "Norwood",
  "Nova",
  "Novella",
  "Nya",
  "Nyah",
  "Nyasia",
  "Obie",
  "Oceane",
  "Ocie",
  "Octavia",
  "Oda",
  "Odell",
  "Odessa",
  "Odie",
  "Ofelia",
  "Okey",
  "Ola",
  "Olaf",
  "Ole",
  "Olen",
  "Oleta",
  "Olga",
  "Olin",
  "Oliver",
  "Ollie",
  "Oma",
  "Omari",
  "Omer",
  "Ona",
  "Onie",
  "Opal",
  "Ophelia",
  "Ora",
  "Oral",
  "Oran",
  "Oren",
  "Orie",
  "Orin",
  "Orion",
  "Orland",
  "Orlando",
  "Orlo",
  "Orpha",
  "Orrin",
  "Orval",
  "Orville",
  "Osbaldo",
  "Osborne",
  "Oscar",
  "Osvaldo",
  "Oswald",
  "Oswaldo",
  "Otha",
  "Otho",
  "Otilia",
  "Otis",
  "Ottilie",
  "Ottis",
  "Otto",
  "Ova",
  "Owen",
  "Ozella",
  "Pablo",
  "Paige",
  "Palma",
  "Pamela",
  "Pansy",
  "Paolo",
  "Paris",
  "Parker",
  "Pascale",
  "Pasquale",
  "Pat",
  "Patience",
  "Patricia",
  "Patrick",
  "Patsy",
  "Pattie",
  "Paul",
  "Paula",
  "Pauline",
  "Paxton",
  "Payton",
  "Pearl",
  "Pearlie",
  "Pearline",
  "Pedro",
  "Peggie",
  "Penelope",
  "Percival",
  "Percy",
  "Perry",
  "Pete",
  "Peter",
  "Petra",
  "Peyton",
  "Philip",
  "Phoebe",
  "Phyllis",
  "Pierce",
  "Pierre",
  "Pietro",
  "Pink",
  "Pinkie",
  "Piper",
  "Polly",
  "Porter",
  "Precious",
  "Presley",
  "Preston",
  "Price",
  "Prince",
  "Princess",
  "Priscilla",
  "Providenci",
  "Prudence",
  "Queen",
  "Queenie",
  "Quentin",
  "Quincy",
  "Quinn",
  "Quinten",
  "Quinton",
  "Rachael",
  "Rachel",
  "Rachelle",
  "Rae",
  "Raegan",
  "Rafael",
  "Rafaela",
  "Raheem",
  "Rahsaan",
  "Rahul",
  "Raina",
  "Raleigh",
  "Ralph",
  "Ramiro",
  "Ramon",
  "Ramona",
  "Randal",
  "Randall",
  "Randi",
  "Randy",
  "Ransom",
  "Raoul",
  "Raphael",
  "Raphaelle",
  "Raquel",
  "Rashad",
  "Rashawn",
  "Rasheed",
  "Raul",
  "Raven",
  "Ray",
  "Raymond",
  "Raymundo",
  "Reagan",
  "Reanna",
  "Reba",
  "Rebeca",
  "Rebecca",
  "Rebeka",
  "Rebekah",
  "Reece",
  "Reed",
  "Reese",
  "Regan",
  "Reggie",
  "Reginald",
  "Reid",
  "Reilly",
  "Reina",
  "Reinhold",
  "Remington",
  "Rene",
  "Renee",
  "Ressie",
  "Reta",
  "Retha",
  "Retta",
  "Reuben",
  "Reva",
  "Rex",
  "Rey",
  "Reyes",
  "Reymundo",
  "Reyna",
  "Reynold",
  "Rhea",
  "Rhett",
  "Rhianna",
  "Rhiannon",
  "Rhoda",
  "Ricardo",
  "Richard",
  "Richie",
  "Richmond",
  "Rick",
  "Rickey",
  "Rickie",
  "Ricky",
  "Rico",
  "Rigoberto",
  "Riley",
  "Rita",
  "River",
  "Robb",
  "Robbie",
  "Robert",
  "Roberta",
  "Roberto",
  "Robin",
  "Robyn",
  "Rocio",
  "Rocky",
  "Rod",
  "Roderick",
  "Rodger",
  "Rodolfo",
  "Rodrick",
  "Rodrigo",
  "Roel",
  "Rogelio",
  "Roger",
  "Rogers",
  "Rolando",
  "Rollin",
  "Roma",
  "Romaine",
  "Roman",
  "Ron",
  "Ronaldo",
  "Ronny",
  "Roosevelt",
  "Rory",
  "Rosa",
  "Rosalee",
  "Rosalia",
  "Rosalind",
  "Rosalinda",
  "Rosalyn",
  "Rosamond",
  "Rosanna",
  "Rosario",
  "Roscoe",
  "Rose",
  "Rosella",
  "Roselyn",
  "Rosemarie",
  "Rosemary",
  "Rosendo",
  "Rosetta",
  "Rosie",
  "Rosina",
  "Roslyn",
  "Ross",
  "Rossie",
  "Rowan",
  "Rowena",
  "Rowland",
  "Roxane",
  "Roxanne",
  "Roy",
  "Royal",
  "Royce",
  "Rozella",
  "Ruben",
  "Rubie",
  "Ruby",
  "Rubye",
  "Rudolph",
  "Rudy",
  "Rupert",
  "Russ",
  "Russel",
  "Russell",
  "Rusty",
  "Ruth",
  "Ruthe",
  "Ruthie",
  "Ryan",
  "Ryann",
  "Ryder",
  "Rylan",
  "Rylee",
  "Ryleigh",
  "Ryley",
  "Sabina",
  "Sabrina",
  "Sabryna",
  "Sadie",
  "Sadye",
  "Sage",
  "Saige",
  "Sallie",
  "Sally",
  "Salma",
  "Salvador",
  "Salvatore",
  "Sam",
  "Samanta",
  "Samantha",
  "Samara",
  "Samir",
  "Sammie",
  "Sammy",
  "Samson",
  "Sandra",
  "Sandrine",
  "Sandy",
  "Sanford",
  "Santa",
  "Santiago",
  "Santina",
  "Santino",
  "Santos",
  "Sarah",
  "Sarai",
  "Sarina",
  "Sasha",
  "Saul",
  "Savanah",
  "Savanna",
  "Savannah",
  "Savion",
  "Scarlett",
  "Schuyler",
  "Scot",
  "Scottie",
  "Scotty",
  "Seamus",
  "Sean",
  "Sebastian",
  "Sedrick",
  "Selena",
  "Selina",
  "Selmer",
  "Serena",
  "Serenity",
  "Seth",
  "Shad",
  "Shaina",
  "Shakira",
  "Shana",
  "Shane",
  "Shanel",
  "Shanelle",
  "Shania",
  "Shanie",
  "Shaniya",
  "Shanna",
  "Shannon",
  "Shanny",
  "Shanon",
  "Shany",
  "Sharon",
  "Shaun",
  "Shawn",
  "Shawna",
  "Shaylee",
  "Shayna",
  "Shayne",
  "Shea",
  "Sheila",
  "Sheldon",
  "Shemar",
  "Sheridan",
  "Sherman",
  "Sherwood",
  "Shirley",
  "Shyann",
  "Shyanne",
  "Sibyl",
  "Sid",
  "Sidney",
  "Sienna",
  "Sierra",
  "Sigmund",
  "Sigrid",
  "Sigurd",
  "Silas",
  "Sim",
  "Simeon",
  "Simone",
  "Sincere",
  "Sister",
  "Skye",
  "Skyla",
  "Skylar",
  "Sofia",
  "Soledad",
  "Solon",
  "Sonia",
  "Sonny",
  "Sonya",
  "Sophia",
  "Sophie",
  "Spencer",
  "Stacey",
  "Stacy",
  "Stan",
  "Stanford",
  "Stanley",
  "Stanton",
  "Stefan",
  "Stefanie",
  "Stella",
  "Stephan",
  "Stephania",
  "Stephanie",
  "Stephany",
  "Stephen",
  "Stephon",
  "Sterling",
  "Steve",
  "Stevie",
  "Stewart",
  "Stone",
  "Stuart",
  "Summer",
  "Sunny",
  "Susan",
  "Susana",
  "Susanna",
  "Susie",
  "Suzanne",
  "Sven",
  "Syble",
  "Sydnee",
  "Sydney",
  "Sydni",
  "Sydnie",
  "Sylvan",
  "Sylvester",
  "Sylvia",
  "Tabitha",
  "Tad",
  "Talia",
  "Talon",
  "Tamara",
  "Tamia",
  "Tania",
  "Tanner",
  "Tanya",
  "Tara",
  "Taryn",
  "Tate",
  "Tatum",
  "Tatyana",
  "Taurean",
  "Tavares",
  "Taya",
  "Taylor",
  "Teagan",
  "Ted",
  "Telly",
  "Terence",
  "Teresa",
  "Terrance",
  "Terrell",
  "Terrence",
  "Terrill",
  "Terry",
  "Tess",
  "Tessie",
  "Tevin",
  "Thad",
  "Thaddeus",
  "Thalia",
  "Thea",
  "Thelma",
  "Theo",
  "Theodora",
  "Theodore",
  "Theresa",
  "Therese",
  "Theresia",
  "Theron",
  "Thomas",
  "Thora",
  "Thurman",
  "Tia",
  "Tiana",
  "Tianna",
  "Tiara",
  "Tierra",
  "Tiffany",
  "Tillman",
  "Timmothy",
  "Timmy",
  "Timothy",
  "Tina",
  "Tito",
  "Titus",
  "Tobin",
  "Toby",
  "Tod",
  "Tom",
  "Tomas",
  "Tomasa",
  "Tommie",
  "Toney",
  "Toni",
  "Tony",
  "Torey",
  "Torrance",
  "Torrey",
  "Toy",
  "Trace",
  "Tracey",
  "Tracy",
  "Travis",
  "Travon",
  "Tre",
  "Tremaine",
  "Tremayne",
  "Trent",
  "Trenton",
  "Tressa",
  "Tressie",
  "Treva",
  "Trever",
  "Trevion",
  "Trevor",
  "Trey",
  "Trinity",
  "Trisha",
  "Tristian",
  "Tristin",
  "Triston",
  "Troy",
  "Trudie",
  "Trycia",
  "Trystan",
  "Turner",
  "Twila",
  "Tyler",
  "Tyra",
  "Tyree",
  "Tyreek",
  "Tyrel",
  "Tyrell",
  "Tyrese",
  "Tyrique",
  "Tyshawn",
  "Tyson",
  "Ubaldo",
  "Ulices",
  "Ulises",
  "Una",
  "Unique",
  "Urban",
  "Uriah",
  "Uriel",
  "Ursula",
  "Vada",
  "Valentin",
  "Valentina",
  "Valentine",
  "Valerie",
  "Vallie",
  "Van",
  "Vance",
  "Vanessa",
  "Vaughn",
  "Veda",
  "Velda",
  "Vella",
  "Velma",
  "Velva",
  "Vena",
  "Verda",
  "Verdie",
  "Vergie",
  "Verla",
  "Verlie",
  "Vern",
  "Verna",
  "Verner",
  "Vernice",
  "Vernie",
  "Vernon",
  "Verona",
  "Veronica",
  "Vesta",
  "Vicenta",
  "Vicente",
  "Vickie",
  "Vicky",
  "Victor",
  "Victoria",
  "Vida",
  "Vidal",
  "Vilma",
  "Vince",
  "Vincent",
  "Vincenza",
  "Vincenzo",
  "Vinnie",
  "Viola",
  "Violet",
  "Violette",
  "Virgie",
  "Virgil",
  "Virginia",
  "Virginie",
  "Vita",
  "Vito",
  "Viva",
  "Vivian",
  "Viviane",
  "Vivianne",
  "Vivien",
  "Vivienne",
  "Vladimir",
  "Wade",
  "Waino",
  "Waldo",
  "Walker",
  "Wallace",
  "Walter",
  "Walton",
  "Wanda",
  "Ward",
  "Warren",
  "Watson",
  "Wava",
  "Waylon",
  "Wayne",
  "Webster",
  "Weldon",
  "Wellington",
  "Wendell",
  "Wendy",
  "Werner",
  "Westley",
  "Weston",
  "Whitney",
  "Wilber",
  "Wilbert",
  "Wilburn",
  "Wiley",
  "Wilford",
  "Wilfred",
  "Wilfredo",
  "Wilfrid",
  "Wilhelm",
  "Wilhelmine",
  "Will",
  "Willa",
  "Willard",
  "William",
  "Willie",
  "Willis",
  "Willow",
  "Willy",
  "Wilma",
  "Wilmer",
  "Wilson",
  "Wilton",
  "Winfield",
  "Winifred",
  "Winnifred",
  "Winona",
  "Winston",
  "Woodrow",
  "Wyatt",
  "Wyman",
  "Xander",
  "Xavier",
  "Xzavier",
  "Yadira",
  "Yasmeen",
  "Yasmin",
  "Yasmine",
  "Yazmin",
  "Yesenia",
  "Yessenia",
  "Yolanda",
  "Yoshiko",
  "Yvette",
  "Yvonne",
  "Zachariah",
  "Zachary",
  "Zachery",
  "Zack",
  "Zackary",
  "Zackery",
  "Zakary",
  "Zander",
  "Zane",
  "Zaria",
  "Zechariah",
  "Zelda",
  "Zella",
  "Zelma",
  "Zena",
  "Zetta",
  "Zion",
  "Zita",
  "Zoe",
  "Zoey",
  "Zoie",
  "Zoila",
  "Zola",
  "Zora",
  "Zula"
];

},{}],"node_modules/faker/lib/locales/en/name/last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Abbott",
  "Abernathy",
  "Abshire",
  "Adams",
  "Altenwerth",
  "Anderson",
  "Ankunding",
  "Armstrong",
  "Auer",
  "Aufderhar",
  "Bahringer",
  "Bailey",
  "Balistreri",
  "Barrows",
  "Bartell",
  "Bartoletti",
  "Barton",
  "Bashirian",
  "Batz",
  "Bauch",
  "Baumbach",
  "Bayer",
  "Beahan",
  "Beatty",
  "Bechtelar",
  "Becker",
  "Bednar",
  "Beer",
  "Beier",
  "Berge",
  "Bergnaum",
  "Bergstrom",
  "Bernhard",
  "Bernier",
  "Bins",
  "Blanda",
  "Blick",
  "Block",
  "Bode",
  "Boehm",
  "Bogan",
  "Bogisich",
  "Borer",
  "Bosco",
  "Botsford",
  "Boyer",
  "Boyle",
  "Bradtke",
  "Brakus",
  "Braun",
  "Breitenberg",
  "Brekke",
  "Brown",
  "Bruen",
  "Buckridge",
  "Carroll",
  "Carter",
  "Cartwright",
  "Casper",
  "Cassin",
  "Champlin",
  "Christiansen",
  "Cole",
  "Collier",
  "Collins",
  "Conn",
  "Connelly",
  "Conroy",
  "Considine",
  "Corkery",
  "Cormier",
  "Corwin",
  "Cremin",
  "Crist",
  "Crona",
  "Cronin",
  "Crooks",
  "Cruickshank",
  "Cummerata",
  "Cummings",
  "Dach",
  "D'Amore",
  "Daniel",
  "Dare",
  "Daugherty",
  "Davis",
  "Deckow",
  "Denesik",
  "Dibbert",
  "Dickens",
  "Dicki",
  "Dickinson",
  "Dietrich",
  "Donnelly",
  "Dooley",
  "Douglas",
  "Doyle",
  "DuBuque",
  "Durgan",
  "Ebert",
  "Effertz",
  "Eichmann",
  "Emard",
  "Emmerich",
  "Erdman",
  "Ernser",
  "Fadel",
  "Fahey",
  "Farrell",
  "Fay",
  "Feeney",
  "Feest",
  "Feil",
  "Ferry",
  "Fisher",
  "Flatley",
  "Frami",
  "Franecki",
  "Friesen",
  "Fritsch",
  "Funk",
  "Gaylord",
  "Gerhold",
  "Gerlach",
  "Gibson",
  "Gislason",
  "Gleason",
  "Gleichner",
  "Glover",
  "Goldner",
  "Goodwin",
  "Gorczany",
  "Gottlieb",
  "Goyette",
  "Grady",
  "Graham",
  "Grant",
  "Green",
  "Greenfelder",
  "Greenholt",
  "Grimes",
  "Gulgowski",
  "Gusikowski",
  "Gutkowski",
  "Gutmann",
  "Haag",
  "Hackett",
  "Hagenes",
  "Hahn",
  "Haley",
  "Halvorson",
  "Hamill",
  "Hammes",
  "Hand",
  "Hane",
  "Hansen",
  "Harber",
  "Harris",
  "Hartmann",
  "Harvey",
  "Hauck",
  "Hayes",
  "Heaney",
  "Heathcote",
  "Hegmann",
  "Heidenreich",
  "Heller",
  "Herman",
  "Hermann",
  "Hermiston",
  "Herzog",
  "Hessel",
  "Hettinger",
  "Hickle",
  "Hilll",
  "Hills",
  "Hilpert",
  "Hintz",
  "Hirthe",
  "Hodkiewicz",
  "Hoeger",
  "Homenick",
  "Hoppe",
  "Howe",
  "Howell",
  "Hudson",
  "Huel",
  "Huels",
  "Hyatt",
  "Jacobi",
  "Jacobs",
  "Jacobson",
  "Jakubowski",
  "Jaskolski",
  "Jast",
  "Jenkins",
  "Jerde",
  "Johns",
  "Johnson",
  "Johnston",
  "Jones",
  "Kassulke",
  "Kautzer",
  "Keebler",
  "Keeling",
  "Kemmer",
  "Kerluke",
  "Kertzmann",
  "Kessler",
  "Kiehn",
  "Kihn",
  "Kilback",
  "King",
  "Kirlin",
  "Klein",
  "Kling",
  "Klocko",
  "Koch",
  "Koelpin",
  "Koepp",
  "Kohler",
  "Konopelski",
  "Koss",
  "Kovacek",
  "Kozey",
  "Krajcik",
  "Kreiger",
  "Kris",
  "Kshlerin",
  "Kub",
  "Kuhic",
  "Kuhlman",
  "Kuhn",
  "Kulas",
  "Kunde",
  "Kunze",
  "Kuphal",
  "Kutch",
  "Kuvalis",
  "Labadie",
  "Lakin",
  "Lang",
  "Langosh",
  "Langworth",
  "Larkin",
  "Larson",
  "Leannon",
  "Lebsack",
  "Ledner",
  "Leffler",
  "Legros",
  "Lehner",
  "Lemke",
  "Lesch",
  "Leuschke",
  "Lind",
  "Lindgren",
  "Littel",
  "Little",
  "Lockman",
  "Lowe",
  "Lubowitz",
  "Lueilwitz",
  "Luettgen",
  "Lynch",
  "Macejkovic",
  "MacGyver",
  "Maggio",
  "Mann",
  "Mante",
  "Marks",
  "Marquardt",
  "Marvin",
  "Mayer",
  "Mayert",
  "McClure",
  "McCullough",
  "McDermott",
  "McGlynn",
  "McKenzie",
  "McLaughlin",
  "Medhurst",
  "Mertz",
  "Metz",
  "Miller",
  "Mills",
  "Mitchell",
  "Moen",
  "Mohr",
  "Monahan",
  "Moore",
  "Morar",
  "Morissette",
  "Mosciski",
  "Mraz",
  "Mueller",
  "Muller",
  "Murazik",
  "Murphy",
  "Murray",
  "Nader",
  "Nicolas",
  "Nienow",
  "Nikolaus",
  "Nitzsche",
  "Nolan",
  "Oberbrunner",
  "O'Connell",
  "O'Conner",
  "O'Hara",
  "O'Keefe",
  "O'Kon",
  "Okuneva",
  "Olson",
  "Ondricka",
  "O'Reilly",
  "Orn",
  "Ortiz",
  "Osinski",
  "Pacocha",
  "Padberg",
  "Pagac",
  "Parisian",
  "Parker",
  "Paucek",
  "Pfannerstill",
  "Pfeffer",
  "Pollich",
  "Pouros",
  "Powlowski",
  "Predovic",
  "Price",
  "Prohaska",
  "Prosacco",
  "Purdy",
  "Quigley",
  "Quitzon",
  "Rath",
  "Ratke",
  "Rau",
  "Raynor",
  "Reichel",
  "Reichert",
  "Reilly",
  "Reinger",
  "Rempel",
  "Renner",
  "Reynolds",
  "Rice",
  "Rippin",
  "Ritchie",
  "Robel",
  "Roberts",
  "Rodriguez",
  "Rogahn",
  "Rohan",
  "Rolfson",
  "Romaguera",
  "Roob",
  "Rosenbaum",
  "Rowe",
  "Ruecker",
  "Runolfsdottir",
  "Runolfsson",
  "Runte",
  "Russel",
  "Rutherford",
  "Ryan",
  "Sanford",
  "Satterfield",
  "Sauer",
  "Sawayn",
  "Schaden",
  "Schaefer",
  "Schamberger",
  "Schiller",
  "Schimmel",
  "Schinner",
  "Schmeler",
  "Schmidt",
  "Schmitt",
  "Schneider",
  "Schoen",
  "Schowalter",
  "Schroeder",
  "Schulist",
  "Schultz",
  "Schumm",
  "Schuppe",
  "Schuster",
  "Senger",
  "Shanahan",
  "Shields",
  "Simonis",
  "Sipes",
  "Skiles",
  "Smith",
  "Smitham",
  "Spencer",
  "Spinka",
  "Sporer",
  "Stamm",
  "Stanton",
  "Stark",
  "Stehr",
  "Steuber",
  "Stiedemann",
  "Stokes",
  "Stoltenberg",
  "Stracke",
  "Streich",
  "Stroman",
  "Strosin",
  "Swaniawski",
  "Swift",
  "Terry",
  "Thiel",
  "Thompson",
  "Tillman",
  "Torp",
  "Torphy",
  "Towne",
  "Toy",
  "Trantow",
  "Tremblay",
  "Treutel",
  "Tromp",
  "Turcotte",
  "Turner",
  "Ullrich",
  "Upton",
  "Vandervort",
  "Veum",
  "Volkman",
  "Von",
  "VonRueden",
  "Waelchi",
  "Walker",
  "Walsh",
  "Walter",
  "Ward",
  "Waters",
  "Watsica",
  "Weber",
  "Wehner",
  "Weimann",
  "Weissnat",
  "Welch",
  "West",
  "White",
  "Wiegand",
  "Wilderman",
  "Wilkinson",
  "Will",
  "Williamson",
  "Willms",
  "Windler",
  "Wintheiser",
  "Wisoky",
  "Wisozk",
  "Witting",
  "Wiza",
  "Wolf",
  "Wolff",
  "Wuckert",
  "Wunsch",
  "Wyman",
  "Yost",
  "Yundt",
  "Zboncak",
  "Zemlak",
  "Ziemann",
  "Zieme",
  "Zulauf"
];

},{}],"node_modules/faker/lib/locales/en/name/prefix.js":[function(require,module,exports) {
module["exports"] = [
  "Mr.",
  "Mrs.",
  "Ms.",
  "Miss",
  "Dr."
];

},{}],"node_modules/faker/lib/locales/en/name/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "Jr.",
  "Sr.",
  "I",
  "II",
  "III",
  "IV",
  "V",
  "MD",
  "DDS",
  "PhD",
  "DVM"
];

},{}],"node_modules/faker/lib/locales/en/name/title.js":[function(require,module,exports) {
module["exports"] = {
  "descriptor": [
    "Lead",
    "Senior",
    "Direct",
    "Corporate",
    "Dynamic",
    "Future",
    "Product",
    "National",
    "Regional",
    "District",
    "Central",
    "Global",
    "Customer",
    "Investor",
    "Dynamic",
    "International",
    "Legacy",
    "Forward",
    "Internal",
    "Human",
    "Chief",
    "Principal"
  ],
  "level": [
    "Solutions",
    "Program",
    "Brand",
    "Security",
    "Research",
    "Marketing",
    "Directives",
    "Implementation",
    "Integration",
    "Functionality",
    "Response",
    "Paradigm",
    "Tactics",
    "Identity",
    "Markets",
    "Group",
    "Division",
    "Applications",
    "Optimization",
    "Operations",
    "Infrastructure",
    "Intranet",
    "Communications",
    "Web",
    "Branding",
    "Quality",
    "Assurance",
    "Mobility",
    "Accounts",
    "Data",
    "Creative",
    "Configuration",
    "Accountability",
    "Interactions",
    "Factors",
    "Usability",
    "Metrics"
  ],
  "job": [
    "Supervisor",
    "Associate",
    "Executive",
    "Liaison",
    "Officer",
    "Manager",
    "Engineer",
    "Specialist",
    "Director",
    "Coordinator",
    "Administrator",
    "Architect",
    "Analyst",
    "Designer",
    "Planner",
    "Orchestrator",
    "Technician",
    "Developer",
    "Producer",
    "Consultant",
    "Assistant",
    "Facilitator",
    "Agent",
    "Representative",
    "Strategist"
  ]
};

},{}],"node_modules/faker/lib/locales/en/name/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{prefix} #{first_name} #{last_name}",
  "#{first_name} #{last_name} #{suffix}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}"
];

},{}],"node_modules/faker/lib/locales/en/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");
name.prefix = require("./prefix");
name.suffix = require("./suffix");
name.title = require("./title");
name.name = require("./name");

},{"./first_name":"node_modules/faker/lib/locales/en/name/first_name.js","./last_name":"node_modules/faker/lib/locales/en/name/last_name.js","./prefix":"node_modules/faker/lib/locales/en/name/prefix.js","./suffix":"node_modules/faker/lib/locales/en/name/suffix.js","./title":"node_modules/faker/lib/locales/en/name/title.js","./name":"node_modules/faker/lib/locales/en/name/name.js"}],"node_modules/faker/lib/locales/en/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "###-###-####",
  "(###) ###-####",
  "1-###-###-####",
  "###.###.####",
  "###-###-####",
  "(###) ###-####",
  "1-###-###-####",
  "###.###.####",
  "###-###-#### x###",
  "(###) ###-#### x###",
  "1-###-###-#### x###",
  "###.###.#### x###",
  "###-###-#### x####",
  "(###) ###-#### x####",
  "1-###-###-#### x####",
  "###.###.#### x####",
  "###-###-#### x#####",
  "(###) ###-#### x#####",
  "1-###-###-#### x#####",
  "###.###.#### x#####"
];

},{}],"node_modules/faker/lib/locales/en/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/en/phone_number/formats.js"}],"node_modules/faker/lib/locales/en/cell_phone/formats.js":[function(require,module,exports) {
module["exports"] = [
  "###-###-####",
  "(###) ###-####",
  "1-###-###-####",
  "###.###.####"
];

},{}],"node_modules/faker/lib/locales/en/cell_phone/index.js":[function(require,module,exports) {
var cell_phone = {};
module['exports'] = cell_phone;
cell_phone.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/en/cell_phone/formats.js"}],"node_modules/faker/lib/locales/en/business/credit_card_numbers.js":[function(require,module,exports) {
module["exports"] = [
  "1234-2121-1221-1211",
  "1212-1221-1121-1234",
  "1211-1221-1234-2201",
  "1228-1221-1221-1431"
];

},{}],"node_modules/faker/lib/locales/en/business/credit_card_expiry_dates.js":[function(require,module,exports) {
module["exports"] = [
  "2011-10-12",
  "2012-11-12",
  "2015-11-11",
  "2013-9-12"
];

},{}],"node_modules/faker/lib/locales/en/business/credit_card_types.js":[function(require,module,exports) {
module["exports"] = [
  "visa",
  "mastercard",
  "americanexpress",
  "discover"
];

},{}],"node_modules/faker/lib/locales/en/business/index.js":[function(require,module,exports) {
var business = {};
module['exports'] = business;
business.credit_card_numbers = require("./credit_card_numbers");
business.credit_card_expiry_dates = require("./credit_card_expiry_dates");
business.credit_card_types = require("./credit_card_types");

},{"./credit_card_numbers":"node_modules/faker/lib/locales/en/business/credit_card_numbers.js","./credit_card_expiry_dates":"node_modules/faker/lib/locales/en/business/credit_card_expiry_dates.js","./credit_card_types":"node_modules/faker/lib/locales/en/business/credit_card_types.js"}],"node_modules/faker/lib/locales/en/commerce/color.js":[function(require,module,exports) {
module["exports"] = [
  "red",
  "green",
  "blue",
  "yellow",
  "purple",
  "mint green",
  "teal",
  "white",
  "black",
  "orange",
  "pink",
  "grey",
  "maroon",
  "violet",
  "turquoise",
  "tan",
  "sky blue",
  "salmon",
  "plum",
  "orchid",
  "olive",
  "magenta",
  "lime",
  "ivory",
  "indigo",
  "gold",
  "fuchsia",
  "cyan",
  "azure",
  "lavender",
  "silver"
];

},{}],"node_modules/faker/lib/locales/en/commerce/department.js":[function(require,module,exports) {
module["exports"] = [
  "Books",
  "Movies",
  "Music",
  "Games",
  "Electronics",
  "Computers",
  "Home",
  "Garden",
  "Tools",
  "Grocery",
  "Health",
  "Beauty",
  "Toys",
  "Kids",
  "Baby",
  "Clothing",
  "Shoes",
  "Jewelery",
  "Sports",
  "Outdoors",
  "Automotive",
  "Industrial"
];

},{}],"node_modules/faker/lib/locales/en/commerce/product_name.js":[function(require,module,exports) {
module["exports"] = {
  "adjective": [
    "Small",
    "Ergonomic",
    "Rustic",
    "Intelligent",
    "Gorgeous",
    "Incredible",
    "Fantastic",
    "Practical",
    "Sleek",
    "Awesome",
    "Generic",
    "Handcrafted",
    "Handmade",
    "Licensed",
    "Refined",
    "Unbranded",
    "Tasty"
  ],
  "material": [
    "Steel",
    "Wooden",
    "Concrete",
    "Plastic",
    "Cotton",
    "Granite",
    "Rubber",
    "Metal",
    "Soft",
    "Fresh",
    "Frozen"
  ],
  "product": [
    "Chair",
    "Car",
    "Computer",
    "Keyboard",
    "Mouse",
    "Bike",
    "Ball",
    "Gloves",
    "Pants",
    "Shirt",
    "Table",
    "Shoes",
    "Hat",
    "Towels",
    "Soap",
    "Tuna",
    "Chicken",
    "Fish",
    "Cheese",
    "Bacon",
    "Pizza",
    "Salad",
    "Sausages",
    "Chips"
  ]
};

},{}],"node_modules/faker/lib/locales/en/commerce/index.js":[function(require,module,exports) {
var commerce = {};
module['exports'] = commerce;
commerce.color = require("./color");
commerce.department = require("./department");
commerce.product_name = require("./product_name");

},{"./color":"node_modules/faker/lib/locales/en/commerce/color.js","./department":"node_modules/faker/lib/locales/en/commerce/department.js","./product_name":"node_modules/faker/lib/locales/en/commerce/product_name.js"}],"node_modules/faker/lib/locales/en/team/creature.js":[function(require,module,exports) {
module["exports"] = [
  "ants",
  "bats",
  "bears",
  "bees",
  "birds",
  "buffalo",
  "cats",
  "chickens",
  "cattle",
  "dogs",
  "dolphins",
  "ducks",
  "elephants",
  "fishes",
  "foxes",
  "frogs",
  "geese",
  "goats",
  "horses",
  "kangaroos",
  "lions",
  "monkeys",
  "owls",
  "oxen",
  "penguins",
  "people",
  "pigs",
  "rabbits",
  "sheep",
  "tigers",
  "whales",
  "wolves",
  "zebras",
  "banshees",
  "crows",
  "black cats",
  "chimeras",
  "ghosts",
  "conspirators",
  "dragons",
  "dwarves",
  "elves",
  "enchanters",
  "exorcists",
  "sons",
  "foes",
  "giants",
  "gnomes",
  "goblins",
  "gooses",
  "griffins",
  "lycanthropes",
  "nemesis",
  "ogres",
  "oracles",
  "prophets",
  "sorcerors",
  "spiders",
  "spirits",
  "vampires",
  "warlocks",
  "vixens",
  "werewolves",
  "witches",
  "worshipers",
  "zombies",
  "druids"
];

},{}],"node_modules/faker/lib/locales/en/team/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{Address.state} #{creature}"
];

},{}],"node_modules/faker/lib/locales/en/team/index.js":[function(require,module,exports) {
var team = {};
module['exports'] = team;
team.creature = require("./creature");
team.name = require("./name");

},{"./creature":"node_modules/faker/lib/locales/en/team/creature.js","./name":"node_modules/faker/lib/locales/en/team/name.js"}],"node_modules/faker/lib/locales/en/hacker/abbreviation.js":[function(require,module,exports) {
module["exports"] = [
  "TCP",
  "HTTP",
  "SDD",
  "RAM",
  "GB",
  "CSS",
  "SSL",
  "AGP",
  "SQL",
  "FTP",
  "PCI",
  "AI",
  "ADP",
  "RSS",
  "XML",
  "EXE",
  "COM",
  "HDD",
  "THX",
  "SMTP",
  "SMS",
  "USB",
  "PNG",
  "SAS",
  "IB",
  "SCSI",
  "JSON",
  "XSS",
  "JBOD"
];

},{}],"node_modules/faker/lib/locales/en/hacker/adjective.js":[function(require,module,exports) {
module["exports"] = [
  "auxiliary",
  "primary",
  "back-end",
  "digital",
  "open-source",
  "virtual",
  "cross-platform",
  "redundant",
  "online",
  "haptic",
  "multi-byte",
  "bluetooth",
  "wireless",
  "1080p",
  "neural",
  "optical",
  "solid state",
  "mobile"
];

},{}],"node_modules/faker/lib/locales/en/hacker/noun.js":[function(require,module,exports) {
module["exports"] = [
  "driver",
  "protocol",
  "bandwidth",
  "panel",
  "microchip",
  "program",
  "port",
  "card",
  "array",
  "interface",
  "system",
  "sensor",
  "firewall",
  "hard drive",
  "pixel",
  "alarm",
  "feed",
  "monitor",
  "application",
  "transmitter",
  "bus",
  "circuit",
  "capacitor",
  "matrix"
];

},{}],"node_modules/faker/lib/locales/en/hacker/verb.js":[function(require,module,exports) {
module["exports"] = [
  "back up",
  "bypass",
  "hack",
  "override",
  "compress",
  "copy",
  "navigate",
  "index",
  "connect",
  "generate",
  "quantify",
  "calculate",
  "synthesize",
  "input",
  "transmit",
  "program",
  "reboot",
  "parse"
];

},{}],"node_modules/faker/lib/locales/en/hacker/ingverb.js":[function(require,module,exports) {
module["exports"] = [
  "backing up",
  "bypassing",
  "hacking",
  "overriding",
  "compressing",
  "copying",
  "navigating",
  "indexing",
  "connecting",
  "generating",
  "quantifying",
  "calculating",
  "synthesizing",
  "transmitting",
  "programming",
  "parsing"
];

},{}],"node_modules/faker/lib/locales/en/hacker/index.js":[function(require,module,exports) {
var hacker = {};
module['exports'] = hacker;
hacker.abbreviation = require("./abbreviation");
hacker.adjective = require("./adjective");
hacker.noun = require("./noun");
hacker.verb = require("./verb");
hacker.ingverb = require("./ingverb");

},{"./abbreviation":"node_modules/faker/lib/locales/en/hacker/abbreviation.js","./adjective":"node_modules/faker/lib/locales/en/hacker/adjective.js","./noun":"node_modules/faker/lib/locales/en/hacker/noun.js","./verb":"node_modules/faker/lib/locales/en/hacker/verb.js","./ingverb":"node_modules/faker/lib/locales/en/hacker/ingverb.js"}],"node_modules/faker/lib/locales/en/app/name.js":[function(require,module,exports) {
module["exports"] = [
  "Redhold",
  "Treeflex",
  "Trippledex",
  "Kanlam",
  "Bigtax",
  "Daltfresh",
  "Toughjoyfax",
  "Mat Lam Tam",
  "Otcom",
  "Tres-Zap",
  "Y-Solowarm",
  "Tresom",
  "Voltsillam",
  "Biodex",
  "Greenlam",
  "Viva",
  "Matsoft",
  "Temp",
  "Zoolab",
  "Subin",
  "Rank",
  "Job",
  "Stringtough",
  "Tin",
  "It",
  "Home Ing",
  "Zamit",
  "Sonsing",
  "Konklab",
  "Alpha",
  "Latlux",
  "Voyatouch",
  "Alphazap",
  "Holdlamis",
  "Zaam-Dox",
  "Sub-Ex",
  "Quo Lux",
  "Bamity",
  "Ventosanzap",
  "Lotstring",
  "Hatity",
  "Tempsoft",
  "Overhold",
  "Fixflex",
  "Konklux",
  "Zontrax",
  "Tampflex",
  "Span",
  "Namfix",
  "Transcof",
  "Stim",
  "Fix San",
  "Sonair",
  "Stronghold",
  "Fintone",
  "Y-find",
  "Opela",
  "Lotlux",
  "Ronstring",
  "Zathin",
  "Duobam",
  "Keylex"
];

},{}],"node_modules/faker/lib/locales/en/app/version.js":[function(require,module,exports) {
module["exports"] = [
  "0.#.#",
  "0.##",
  "#.##",
  "#.#",
  "#.#.#"
];

},{}],"node_modules/faker/lib/locales/en/app/author.js":[function(require,module,exports) {
module["exports"] = [
  "#{Name.name}",
  "#{Company.name}"
];

},{}],"node_modules/faker/lib/locales/en/app/index.js":[function(require,module,exports) {
var app = {};
module['exports'] = app;
app.name = require("./name");
app.version = require("./version");
app.author = require("./author");

},{"./name":"node_modules/faker/lib/locales/en/app/name.js","./version":"node_modules/faker/lib/locales/en/app/version.js","./author":"node_modules/faker/lib/locales/en/app/author.js"}],"node_modules/faker/lib/locales/en/finance/account_type.js":[function(require,module,exports) {
module["exports"] = [
  "Checking",
  "Savings",
  "Money Market",
  "Investment",
  "Home Loan",
  "Credit Card",
  "Auto Loan",
  "Personal Loan"
];

},{}],"node_modules/faker/lib/locales/en/finance/transaction_type.js":[function(require,module,exports) {
module["exports"] = [
  "deposit",
  "withdrawal",
  "payment",
  "invoice"
];

},{}],"node_modules/faker/lib/locales/en/finance/currency.js":[function(require,module,exports) {
module["exports"] = {
  "UAE Dirham": {
    "code": "AED",
    "symbol": ""
  },
  "Afghani": {
    "code": "AFN",
    "symbol": "؋"
  },
  "Lek": {
    "code": "ALL",
    "symbol": "Lek"
  },
  "Armenian Dram": {
    "code": "AMD",
    "symbol": ""
  },
  "Netherlands Antillian Guilder": {
    "code": "ANG",
    "symbol": "ƒ"
  },
  "Kwanza": {
    "code": "AOA",
    "symbol": ""
  },
  "Argentine Peso": {
    "code": "ARS",
    "symbol": "$"
  },
  "Australian Dollar": {
    "code": "AUD",
    "symbol": "$"
  },
  "Aruban Guilder": {
    "code": "AWG",
    "symbol": "ƒ"
  },
  "Azerbaijanian Manat": {
    "code": "AZN",
    "symbol": "ман"
  },
  "Convertible Marks": {
    "code": "BAM",
    "symbol": "KM"
  },
  "Barbados Dollar": {
    "code": "BBD",
    "symbol": "$"
  },
  "Taka": {
    "code": "BDT",
    "symbol": ""
  },
  "Bulgarian Lev": {
    "code": "BGN",
    "symbol": "лв"
  },
  "Bahraini Dinar": {
    "code": "BHD",
    "symbol": ""
  },
  "Burundi Franc": {
    "code": "BIF",
    "symbol": ""
  },
  "Bermudian Dollar (customarily known as Bermuda Dollar)": {
    "code": "BMD",
    "symbol": "$"
  },
  "Brunei Dollar": {
    "code": "BND",
    "symbol": "$"
  },
  "Boliviano Mvdol": {
    "code": "BOB BOV",
    "symbol": "$b"
  },
  "Brazilian Real": {
    "code": "BRL",
    "symbol": "R$"
  },
  "Bahamian Dollar": {
    "code": "BSD",
    "symbol": "$"
  },
  "Pula": {
    "code": "BWP",
    "symbol": "P"
  },
  "Belarussian Ruble": {
    "code": "BYR",
    "symbol": "p."
  },
  "Belize Dollar": {
    "code": "BZD",
    "symbol": "BZ$"
  },
  "Canadian Dollar": {
    "code": "CAD",
    "symbol": "$"
  },
  "Congolese Franc": {
    "code": "CDF",
    "symbol": ""
  },
  "Swiss Franc": {
    "code": "CHF",
    "symbol": "CHF"
  },
  "Chilean Peso Unidades de fomento": {
    "code": "CLP CLF",
    "symbol": "$"
  },
  "Yuan Renminbi": {
    "code": "CNY",
    "symbol": "¥"
  },
  "Colombian Peso Unidad de Valor Real": {
    "code": "COP COU",
    "symbol": "$"
  },
  "Costa Rican Colon": {
    "code": "CRC",
    "symbol": "₡"
  },
  "Cuban Peso Peso Convertible": {
    "code": "CUP CUC",
    "symbol": "₱"
  },
  "Cape Verde Escudo": {
    "code": "CVE",
    "symbol": ""
  },
  "Czech Koruna": {
    "code": "CZK",
    "symbol": "Kč"
  },
  "Djibouti Franc": {
    "code": "DJF",
    "symbol": ""
  },
  "Danish Krone": {
    "code": "DKK",
    "symbol": "kr"
  },
  "Dominican Peso": {
    "code": "DOP",
    "symbol": "RD$"
  },
  "Algerian Dinar": {
    "code": "DZD",
    "symbol": ""
  },
  "Kroon": {
    "code": "EEK",
    "symbol": ""
  },
  "Egyptian Pound": {
    "code": "EGP",
    "symbol": "£"
  },
  "Nakfa": {
    "code": "ERN",
    "symbol": ""
  },
  "Ethiopian Birr": {
    "code": "ETB",
    "symbol": ""
  },
  "Euro": {
    "code": "EUR",
    "symbol": "€"
  },
  "Fiji Dollar": {
    "code": "FJD",
    "symbol": "$"
  },
  "Falkland Islands Pound": {
    "code": "FKP",
    "symbol": "£"
  },
  "Pound Sterling": {
    "code": "GBP",
    "symbol": "£"
  },
  "Lari": {
    "code": "GEL",
    "symbol": ""
  },
  "Cedi": {
    "code": "GHS",
    "symbol": ""
  },
  "Gibraltar Pound": {
    "code": "GIP",
    "symbol": "£"
  },
  "Dalasi": {
    "code": "GMD",
    "symbol": ""
  },
  "Guinea Franc": {
    "code": "GNF",
    "symbol": ""
  },
  "Quetzal": {
    "code": "GTQ",
    "symbol": "Q"
  },
  "Guyana Dollar": {
    "code": "GYD",
    "symbol": "$"
  },
  "Hong Kong Dollar": {
    "code": "HKD",
    "symbol": "$"
  },
  "Lempira": {
    "code": "HNL",
    "symbol": "L"
  },
  "Croatian Kuna": {
    "code": "HRK",
    "symbol": "kn"
  },
  "Gourde US Dollar": {
    "code": "HTG USD",
    "symbol": ""
  },
  "Forint": {
    "code": "HUF",
    "symbol": "Ft"
  },
  "Rupiah": {
    "code": "IDR",
    "symbol": "Rp"
  },
  "New Israeli Sheqel": {
    "code": "ILS",
    "symbol": "₪"
  },
  "Indian Rupee": {
    "code": "INR",
    "symbol": ""
  },
  "Indian Rupee Ngultrum": {
    "code": "INR BTN",
    "symbol": ""
  },
  "Iraqi Dinar": {
    "code": "IQD",
    "symbol": ""
  },
  "Iranian Rial": {
    "code": "IRR",
    "symbol": "﷼"
  },
  "Iceland Krona": {
    "code": "ISK",
    "symbol": "kr"
  },
  "Jamaican Dollar": {
    "code": "JMD",
    "symbol": "J$"
  },
  "Jordanian Dinar": {
    "code": "JOD",
    "symbol": ""
  },
  "Yen": {
    "code": "JPY",
    "symbol": "¥"
  },
  "Kenyan Shilling": {
    "code": "KES",
    "symbol": ""
  },
  "Som": {
    "code": "KGS",
    "symbol": "лв"
  },
  "Riel": {
    "code": "KHR",
    "symbol": "៛"
  },
  "Comoro Franc": {
    "code": "KMF",
    "symbol": ""
  },
  "North Korean Won": {
    "code": "KPW",
    "symbol": "₩"
  },
  "Won": {
    "code": "KRW",
    "symbol": "₩"
  },
  "Kuwaiti Dinar": {
    "code": "KWD",
    "symbol": ""
  },
  "Cayman Islands Dollar": {
    "code": "KYD",
    "symbol": "$"
  },
  "Tenge": {
    "code": "KZT",
    "symbol": "лв"
  },
  "Kip": {
    "code": "LAK",
    "symbol": "₭"
  },
  "Lebanese Pound": {
    "code": "LBP",
    "symbol": "£"
  },
  "Sri Lanka Rupee": {
    "code": "LKR",
    "symbol": "₨"
  },
  "Liberian Dollar": {
    "code": "LRD",
    "symbol": "$"
  },
  "Lithuanian Litas": {
    "code": "LTL",
    "symbol": "Lt"
  },
  "Latvian Lats": {
    "code": "LVL",
    "symbol": "Ls"
  },
  "Libyan Dinar": {
    "code": "LYD",
    "symbol": ""
  },
  "Moroccan Dirham": {
    "code": "MAD",
    "symbol": ""
  },
  "Moldovan Leu": {
    "code": "MDL",
    "symbol": ""
  },
  "Malagasy Ariary": {
    "code": "MGA",
    "symbol": ""
  },
  "Denar": {
    "code": "MKD",
    "symbol": "ден"
  },
  "Kyat": {
    "code": "MMK",
    "symbol": ""
  },
  "Tugrik": {
    "code": "MNT",
    "symbol": "₮"
  },
  "Pataca": {
    "code": "MOP",
    "symbol": ""
  },
  "Ouguiya": {
    "code": "MRO",
    "symbol": ""
  },
  "Mauritius Rupee": {
    "code": "MUR",
    "symbol": "₨"
  },
  "Rufiyaa": {
    "code": "MVR",
    "symbol": ""
  },
  "Kwacha": {
    "code": "MWK",
    "symbol": ""
  },
  "Mexican Peso Mexican Unidad de Inversion (UDI)": {
    "code": "MXN MXV",
    "symbol": "$"
  },
  "Malaysian Ringgit": {
    "code": "MYR",
    "symbol": "RM"
  },
  "Metical": {
    "code": "MZN",
    "symbol": "MT"
  },
  "Naira": {
    "code": "NGN",
    "symbol": "₦"
  },
  "Cordoba Oro": {
    "code": "NIO",
    "symbol": "C$"
  },
  "Norwegian Krone": {
    "code": "NOK",
    "symbol": "kr"
  },
  "Nepalese Rupee": {
    "code": "NPR",
    "symbol": "₨"
  },
  "New Zealand Dollar": {
    "code": "NZD",
    "symbol": "$"
  },
  "Rial Omani": {
    "code": "OMR",
    "symbol": "﷼"
  },
  "Balboa US Dollar": {
    "code": "PAB USD",
    "symbol": "B/."
  },
  "Nuevo Sol": {
    "code": "PEN",
    "symbol": "S/."
  },
  "Kina": {
    "code": "PGK",
    "symbol": ""
  },
  "Philippine Peso": {
    "code": "PHP",
    "symbol": "Php"
  },
  "Pakistan Rupee": {
    "code": "PKR",
    "symbol": "₨"
  },
  "Zloty": {
    "code": "PLN",
    "symbol": "zł"
  },
  "Guarani": {
    "code": "PYG",
    "symbol": "Gs"
  },
  "Qatari Rial": {
    "code": "QAR",
    "symbol": "﷼"
  },
  "New Leu": {
    "code": "RON",
    "symbol": "lei"
  },
  "Serbian Dinar": {
    "code": "RSD",
    "symbol": "Дин."
  },
  "Russian Ruble": {
    "code": "RUB",
    "symbol": "руб"
  },
  "Rwanda Franc": {
    "code": "RWF",
    "symbol": ""
  },
  "Saudi Riyal": {
    "code": "SAR",
    "symbol": "﷼"
  },
  "Solomon Islands Dollar": {
    "code": "SBD",
    "symbol": "$"
  },
  "Seychelles Rupee": {
    "code": "SCR",
    "symbol": "₨"
  },
  "Sudanese Pound": {
    "code": "SDG",
    "symbol": ""
  },
  "Swedish Krona": {
    "code": "SEK",
    "symbol": "kr"
  },
  "Singapore Dollar": {
    "code": "SGD",
    "symbol": "$"
  },
  "Saint Helena Pound": {
    "code": "SHP",
    "symbol": "£"
  },
  "Leone": {
    "code": "SLL",
    "symbol": ""
  },
  "Somali Shilling": {
    "code": "SOS",
    "symbol": "S"
  },
  "Surinam Dollar": {
    "code": "SRD",
    "symbol": "$"
  },
  "Dobra": {
    "code": "STD",
    "symbol": ""
  },
  "El Salvador Colon US Dollar": {
    "code": "SVC USD",
    "symbol": "$"
  },
  "Syrian Pound": {
    "code": "SYP",
    "symbol": "£"
  },
  "Lilangeni": {
    "code": "SZL",
    "symbol": ""
  },
  "Baht": {
    "code": "THB",
    "symbol": "฿"
  },
  "Somoni": {
    "code": "TJS",
    "symbol": ""
  },
  "Manat": {
    "code": "TMT",
    "symbol": ""
  },
  "Tunisian Dinar": {
    "code": "TND",
    "symbol": ""
  },
  "Pa'anga": {
    "code": "TOP",
    "symbol": ""
  },
  "Turkish Lira": {
    "code": "TRY",
    "symbol": "TL"
  },
  "Trinidad and Tobago Dollar": {
    "code": "TTD",
    "symbol": "TT$"
  },
  "New Taiwan Dollar": {
    "code": "TWD",
    "symbol": "NT$"
  },
  "Tanzanian Shilling": {
    "code": "TZS",
    "symbol": ""
  },
  "Hryvnia": {
    "code": "UAH",
    "symbol": "₴"
  },
  "Uganda Shilling": {
    "code": "UGX",
    "symbol": ""
  },
  "US Dollar": {
    "code": "USD",
    "symbol": "$"
  },
  "Peso Uruguayo Uruguay Peso en Unidades Indexadas": {
    "code": "UYU UYI",
    "symbol": "$U"
  },
  "Uzbekistan Sum": {
    "code": "UZS",
    "symbol": "лв"
  },
  "Bolivar Fuerte": {
    "code": "VEF",
    "symbol": "Bs"
  },
  "Dong": {
    "code": "VND",
    "symbol": "₫"
  },
  "Vatu": {
    "code": "VUV",
    "symbol": ""
  },
  "Tala": {
    "code": "WST",
    "symbol": ""
  },
  "CFA Franc BEAC": {
    "code": "XAF",
    "symbol": ""
  },
  "Silver": {
    "code": "XAG",
    "symbol": ""
  },
  "Gold": {
    "code": "XAU",
    "symbol": ""
  },
  "Bond Markets Units European Composite Unit (EURCO)": {
    "code": "XBA",
    "symbol": ""
  },
  "European Monetary Unit (E.M.U.-6)": {
    "code": "XBB",
    "symbol": ""
  },
  "European Unit of Account 9(E.U.A.-9)": {
    "code": "XBC",
    "symbol": ""
  },
  "European Unit of Account 17(E.U.A.-17)": {
    "code": "XBD",
    "symbol": ""
  },
  "East Caribbean Dollar": {
    "code": "XCD",
    "symbol": "$"
  },
  "SDR": {
    "code": "XDR",
    "symbol": ""
  },
  "UIC-Franc": {
    "code": "XFU",
    "symbol": ""
  },
  "CFA Franc BCEAO": {
    "code": "XOF",
    "symbol": ""
  },
  "Palladium": {
    "code": "XPD",
    "symbol": ""
  },
  "CFP Franc": {
    "code": "XPF",
    "symbol": ""
  },
  "Platinum": {
    "code": "XPT",
    "symbol": ""
  },
  "Codes specifically reserved for testing purposes": {
    "code": "XTS",
    "symbol": ""
  },
  "Yemeni Rial": {
    "code": "YER",
    "symbol": "﷼"
  },
  "Rand": {
    "code": "ZAR",
    "symbol": "R"
  },
  "Rand Loti": {
    "code": "ZAR LSL",
    "symbol": ""
  },
  "Rand Namibia Dollar": {
    "code": "ZAR NAD",
    "symbol": ""
  },
  "Zambian Kwacha": {
    "code": "ZMK",
    "symbol": ""
  },
  "Zimbabwe Dollar": {
    "code": "ZWL",
    "symbol": ""
  }
};

},{}],"node_modules/faker/lib/locales/en/finance/index.js":[function(require,module,exports) {
var finance = {};
module['exports'] = finance;
finance.account_type = require("./account_type");
finance.transaction_type = require("./transaction_type");
finance.currency = require("./currency");

},{"./account_type":"node_modules/faker/lib/locales/en/finance/account_type.js","./transaction_type":"node_modules/faker/lib/locales/en/finance/transaction_type.js","./currency":"node_modules/faker/lib/locales/en/finance/currency.js"}],"node_modules/faker/lib/locales/en/date/month.js":[function(require,module,exports) {
// Source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/en.xml#L1799
module["exports"] = {
  wide: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ],
  // Property "wide_context" is optional, if not set then "wide" will be used instead
  // It is used to specify a word in context, which may differ from a stand-alone word
  wide_context: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ],
  abbr: [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
  ],
  // Property "abbr_context" is optional, if not set then "abbr" will be used instead
  // It is used to specify a word in context, which may differ from a stand-alone word
  abbr_context: [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
  ]
};

},{}],"node_modules/faker/lib/locales/en/date/weekday.js":[function(require,module,exports) {
// Source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/en.xml#L1847
module["exports"] = {
  wide: [
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday"
  ],
  // Property "wide_context" is optional, if not set then "wide" will be used instead
  // It is used to specify a word in context, which may differ from a stand-alone word
  wide_context: [
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday"
  ],
  abbr: [
    "Sun",
    "Mon",
    "Tue",
    "Wed",
    "Thu",
    "Fri",
    "Sat"
  ],
  // Property "abbr_context" is optional, if not set then "abbr" will be used instead
  // It is used to specify a word in context, which may differ from a stand-alone word
  abbr_context: [
    "Sun",
    "Mon",
    "Tue",
    "Wed",
    "Thu",
    "Fri",
    "Sat"
  ]
};

},{}],"node_modules/faker/lib/locales/en/date/index.js":[function(require,module,exports) {
var date = {};
module["exports"] = date;
date.month = require("./month");
date.weekday = require("./weekday");

},{"./month":"node_modules/faker/lib/locales/en/date/month.js","./weekday":"node_modules/faker/lib/locales/en/date/weekday.js"}],"node_modules/faker/lib/locales/en/system/mimeTypes.js":[function(require,module,exports) {
/*

The MIT License (MIT)

Copyright (c) 2014 Jonathan Ong me@jongleberry.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

Definitions from mime-db v1.21.0
For updates check: https://github.com/jshttp/mime-db/blob/master/db.json

*/

module['exports'] = {
  "application/1d-interleaved-parityfec": {
    "source": "iana"
  },
  "application/3gpdash-qoe-report+xml": {
    "source": "iana"
  },
  "application/3gpp-ims+xml": {
    "source": "iana"
  },
  "application/a2l": {
    "source": "iana"
  },
  "application/activemessage": {
    "source": "iana"
  },
  "application/alto-costmap+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-costmapfilter+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-directory+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointcost+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointcostparams+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointprop+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointpropparams+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-error+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-networkmap+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-networkmapfilter+json": {
    "source": "iana",
    "compressible": true
  },
  "application/aml": {
    "source": "iana"
  },
  "application/andrew-inset": {
    "source": "iana",
    "extensions": ["ez"]
  },
  "application/applefile": {
    "source": "iana"
  },
  "application/applixware": {
    "source": "apache",
    "extensions": ["aw"]
  },
  "application/atf": {
    "source": "iana"
  },
  "application/atfx": {
    "source": "iana"
  },
  "application/atom+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["atom"]
  },
  "application/atomcat+xml": {
    "source": "iana",
    "extensions": ["atomcat"]
  },
  "application/atomdeleted+xml": {
    "source": "iana"
  },
  "application/atomicmail": {
    "source": "iana"
  },
  "application/atomsvc+xml": {
    "source": "iana",
    "extensions": ["atomsvc"]
  },
  "application/atxml": {
    "source": "iana"
  },
  "application/auth-policy+xml": {
    "source": "iana"
  },
  "application/bacnet-xdd+zip": {
    "source": "iana"
  },
  "application/batch-smtp": {
    "source": "iana"
  },
  "application/bdoc": {
    "compressible": false,
    "extensions": ["bdoc"]
  },
  "application/beep+xml": {
    "source": "iana"
  },
  "application/calendar+json": {
    "source": "iana",
    "compressible": true
  },
  "application/calendar+xml": {
    "source": "iana"
  },
  "application/call-completion": {
    "source": "iana"
  },
  "application/cals-1840": {
    "source": "iana"
  },
  "application/cbor": {
    "source": "iana"
  },
  "application/ccmp+xml": {
    "source": "iana"
  },
  "application/ccxml+xml": {
    "source": "iana",
    "extensions": ["ccxml"]
  },
  "application/cdfx+xml": {
    "source": "iana"
  },
  "application/cdmi-capability": {
    "source": "iana",
    "extensions": ["cdmia"]
  },
  "application/cdmi-container": {
    "source": "iana",
    "extensions": ["cdmic"]
  },
  "application/cdmi-domain": {
    "source": "iana",
    "extensions": ["cdmid"]
  },
  "application/cdmi-object": {
    "source": "iana",
    "extensions": ["cdmio"]
  },
  "application/cdmi-queue": {
    "source": "iana",
    "extensions": ["cdmiq"]
  },
  "application/cdni": {
    "source": "iana"
  },
  "application/cea": {
    "source": "iana"
  },
  "application/cea-2018+xml": {
    "source": "iana"
  },
  "application/cellml+xml": {
    "source": "iana"
  },
  "application/cfw": {
    "source": "iana"
  },
  "application/cms": {
    "source": "iana"
  },
  "application/cnrp+xml": {
    "source": "iana"
  },
  "application/coap-group+json": {
    "source": "iana",
    "compressible": true
  },
  "application/commonground": {
    "source": "iana"
  },
  "application/conference-info+xml": {
    "source": "iana"
  },
  "application/cpl+xml": {
    "source": "iana"
  },
  "application/csrattrs": {
    "source": "iana"
  },
  "application/csta+xml": {
    "source": "iana"
  },
  "application/cstadata+xml": {
    "source": "iana"
  },
  "application/csvm+json": {
    "source": "iana",
    "compressible": true
  },
  "application/cu-seeme": {
    "source": "apache",
    "extensions": ["cu"]
  },
  "application/cybercash": {
    "source": "iana"
  },
  "application/dart": {
    "compressible": true
  },
  "application/dash+xml": {
    "source": "iana",
    "extensions": ["mdp"]
  },
  "application/dashdelta": {
    "source": "iana"
  },
  "application/davmount+xml": {
    "source": "iana",
    "extensions": ["davmount"]
  },
  "application/dca-rft": {
    "source": "iana"
  },
  "application/dcd": {
    "source": "iana"
  },
  "application/dec-dx": {
    "source": "iana"
  },
  "application/dialog-info+xml": {
    "source": "iana"
  },
  "application/dicom": {
    "source": "iana"
  },
  "application/dii": {
    "source": "iana"
  },
  "application/dit": {
    "source": "iana"
  },
  "application/dns": {
    "source": "iana"
  },
  "application/docbook+xml": {
    "source": "apache",
    "extensions": ["dbk"]
  },
  "application/dskpp+xml": {
    "source": "iana"
  },
  "application/dssc+der": {
    "source": "iana",
    "extensions": ["dssc"]
  },
  "application/dssc+xml": {
    "source": "iana",
    "extensions": ["xdssc"]
  },
  "application/dvcs": {
    "source": "iana"
  },
  "application/ecmascript": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ecma"]
  },
  "application/edi-consent": {
    "source": "iana"
  },
  "application/edi-x12": {
    "source": "iana",
    "compressible": false
  },
  "application/edifact": {
    "source": "iana",
    "compressible": false
  },
  "application/emergencycalldata.comment+xml": {
    "source": "iana"
  },
  "application/emergencycalldata.deviceinfo+xml": {
    "source": "iana"
  },
  "application/emergencycalldata.providerinfo+xml": {
    "source": "iana"
  },
  "application/emergencycalldata.serviceinfo+xml": {
    "source": "iana"
  },
  "application/emergencycalldata.subscriberinfo+xml": {
    "source": "iana"
  },
  "application/emma+xml": {
    "source": "iana",
    "extensions": ["emma"]
  },
  "application/emotionml+xml": {
    "source": "iana"
  },
  "application/encaprtp": {
    "source": "iana"
  },
  "application/epp+xml": {
    "source": "iana"
  },
  "application/epub+zip": {
    "source": "iana",
    "extensions": ["epub"]
  },
  "application/eshop": {
    "source": "iana"
  },
  "application/exi": {
    "source": "iana",
    "extensions": ["exi"]
  },
  "application/fastinfoset": {
    "source": "iana"
  },
  "application/fastsoap": {
    "source": "iana"
  },
  "application/fdt+xml": {
    "source": "iana"
  },
  "application/fits": {
    "source": "iana"
  },
  "application/font-sfnt": {
    "source": "iana"
  },
  "application/font-tdpfr": {
    "source": "iana",
    "extensions": ["pfr"]
  },
  "application/font-woff": {
    "source": "iana",
    "compressible": false,
    "extensions": ["woff"]
  },
  "application/font-woff2": {
    "compressible": false,
    "extensions": ["woff2"]
  },
  "application/framework-attributes+xml": {
    "source": "iana"
  },
  "application/gml+xml": {
    "source": "apache",
    "extensions": ["gml"]
  },
  "application/gpx+xml": {
    "source": "apache",
    "extensions": ["gpx"]
  },
  "application/gxf": {
    "source": "apache",
    "extensions": ["gxf"]
  },
  "application/gzip": {
    "source": "iana",
    "compressible": false
  },
  "application/h224": {
    "source": "iana"
  },
  "application/held+xml": {
    "source": "iana"
  },
  "application/http": {
    "source": "iana"
  },
  "application/hyperstudio": {
    "source": "iana",
    "extensions": ["stk"]
  },
  "application/ibe-key-request+xml": {
    "source": "iana"
  },
  "application/ibe-pkg-reply+xml": {
    "source": "iana"
  },
  "application/ibe-pp-data": {
    "source": "iana"
  },
  "application/iges": {
    "source": "iana"
  },
  "application/im-iscomposing+xml": {
    "source": "iana"
  },
  "application/index": {
    "source": "iana"
  },
  "application/index.cmd": {
    "source": "iana"
  },
  "application/index.obj": {
    "source": "iana"
  },
  "application/index.response": {
    "source": "iana"
  },
  "application/index.vnd": {
    "source": "iana"
  },
  "application/inkml+xml": {
    "source": "iana",
    "extensions": ["ink","inkml"]
  },
  "application/iotp": {
    "source": "iana"
  },
  "application/ipfix": {
    "source": "iana",
    "extensions": ["ipfix"]
  },
  "application/ipp": {
    "source": "iana"
  },
  "application/isup": {
    "source": "iana"
  },
  "application/its+xml": {
    "source": "iana"
  },
  "application/java-archive": {
    "source": "apache",
    "compressible": false,
    "extensions": ["jar","war","ear"]
  },
  "application/java-serialized-object": {
    "source": "apache",
    "compressible": false,
    "extensions": ["ser"]
  },
  "application/java-vm": {
    "source": "apache",
    "compressible": false,
    "extensions": ["class"]
  },
  "application/javascript": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["js"]
  },
  "application/jose": {
    "source": "iana"
  },
  "application/jose+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jrd+json": {
    "source": "iana",
    "compressible": true
  },
  "application/json": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["json","map"]
  },
  "application/json-patch+json": {
    "source": "iana",
    "compressible": true
  },
  "application/json-seq": {
    "source": "iana"
  },
  "application/json5": {
    "extensions": ["json5"]
  },
  "application/jsonml+json": {
    "source": "apache",
    "compressible": true,
    "extensions": ["jsonml"]
  },
  "application/jwk+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jwk-set+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jwt": {
    "source": "iana"
  },
  "application/kpml-request+xml": {
    "source": "iana"
  },
  "application/kpml-response+xml": {
    "source": "iana"
  },
  "application/ld+json": {
    "source": "iana",
    "compressible": true,
    "extensions": ["jsonld"]
  },
  "application/link-format": {
    "source": "iana"
  },
  "application/load-control+xml": {
    "source": "iana"
  },
  "application/lost+xml": {
    "source": "iana",
    "extensions": ["lostxml"]
  },
  "application/lostsync+xml": {
    "source": "iana"
  },
  "application/lxf": {
    "source": "iana"
  },
  "application/mac-binhex40": {
    "source": "iana",
    "extensions": ["hqx"]
  },
  "application/mac-compactpro": {
    "source": "apache",
    "extensions": ["cpt"]
  },
  "application/macwriteii": {
    "source": "iana"
  },
  "application/mads+xml": {
    "source": "iana",
    "extensions": ["mads"]
  },
  "application/manifest+json": {
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["webmanifest"]
  },
  "application/marc": {
    "source": "iana",
    "extensions": ["mrc"]
  },
  "application/marcxml+xml": {
    "source": "iana",
    "extensions": ["mrcx"]
  },
  "application/mathematica": {
    "source": "iana",
    "extensions": ["ma","nb","mb"]
  },
  "application/mathml+xml": {
    "source": "iana",
    "extensions": ["mathml"]
  },
  "application/mathml-content+xml": {
    "source": "iana"
  },
  "application/mathml-presentation+xml": {
    "source": "iana"
  },
  "application/mbms-associated-procedure-description+xml": {
    "source": "iana"
  },
  "application/mbms-deregister+xml": {
    "source": "iana"
  },
  "application/mbms-envelope+xml": {
    "source": "iana"
  },
  "application/mbms-msk+xml": {
    "source": "iana"
  },
  "application/mbms-msk-response+xml": {
    "source": "iana"
  },
  "application/mbms-protection-description+xml": {
    "source": "iana"
  },
  "application/mbms-reception-report+xml": {
    "source": "iana"
  },
  "application/mbms-register+xml": {
    "source": "iana"
  },
  "application/mbms-register-response+xml": {
    "source": "iana"
  },
  "application/mbms-schedule+xml": {
    "source": "iana"
  },
  "application/mbms-user-service-description+xml": {
    "source": "iana"
  },
  "application/mbox": {
    "source": "iana",
    "extensions": ["mbox"]
  },
  "application/media-policy-dataset+xml": {
    "source": "iana"
  },
  "application/media_control+xml": {
    "source": "iana"
  },
  "application/mediaservercontrol+xml": {
    "source": "iana",
    "extensions": ["mscml"]
  },
  "application/merge-patch+json": {
    "source": "iana",
    "compressible": true
  },
  "application/metalink+xml": {
    "source": "apache",
    "extensions": ["metalink"]
  },
  "application/metalink4+xml": {
    "source": "iana",
    "extensions": ["meta4"]
  },
  "application/mets+xml": {
    "source": "iana",
    "extensions": ["mets"]
  },
  "application/mf4": {
    "source": "iana"
  },
  "application/mikey": {
    "source": "iana"
  },
  "application/mods+xml": {
    "source": "iana",
    "extensions": ["mods"]
  },
  "application/moss-keys": {
    "source": "iana"
  },
  "application/moss-signature": {
    "source": "iana"
  },
  "application/mosskey-data": {
    "source": "iana"
  },
  "application/mosskey-request": {
    "source": "iana"
  },
  "application/mp21": {
    "source": "iana",
    "extensions": ["m21","mp21"]
  },
  "application/mp4": {
    "source": "iana",
    "extensions": ["mp4s","m4p"]
  },
  "application/mpeg4-generic": {
    "source": "iana"
  },
  "application/mpeg4-iod": {
    "source": "iana"
  },
  "application/mpeg4-iod-xmt": {
    "source": "iana"
  },
  "application/mrb-consumer+xml": {
    "source": "iana"
  },
  "application/mrb-publish+xml": {
    "source": "iana"
  },
  "application/msc-ivr+xml": {
    "source": "iana"
  },
  "application/msc-mixer+xml": {
    "source": "iana"
  },
  "application/msword": {
    "source": "iana",
    "compressible": false,
    "extensions": ["doc","dot"]
  },
  "application/mxf": {
    "source": "iana",
    "extensions": ["mxf"]
  },
  "application/nasdata": {
    "source": "iana"
  },
  "application/news-checkgroups": {
    "source": "iana"
  },
  "application/news-groupinfo": {
    "source": "iana"
  },
  "application/news-transmission": {
    "source": "iana"
  },
  "application/nlsml+xml": {
    "source": "iana"
  },
  "application/nss": {
    "source": "iana"
  },
  "application/ocsp-request": {
    "source": "iana"
  },
  "application/ocsp-response": {
    "source": "iana"
  },
  "application/octet-stream": {
    "source": "iana",
    "compressible": false,
    "extensions": ["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]
  },
  "application/oda": {
    "source": "iana",
    "extensions": ["oda"]
  },
  "application/odx": {
    "source": "iana"
  },
  "application/oebps-package+xml": {
    "source": "iana",
    "extensions": ["opf"]
  },
  "application/ogg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["ogx"]
  },
  "application/omdoc+xml": {
    "source": "apache",
    "extensions": ["omdoc"]
  },
  "application/onenote": {
    "source": "apache",
    "extensions": ["onetoc","onetoc2","onetmp","onepkg"]
  },
  "application/oxps": {
    "source": "iana",
    "extensions": ["oxps"]
  },
  "application/p2p-overlay+xml": {
    "source": "iana"
  },
  "application/parityfec": {
    "source": "iana"
  },
  "application/patch-ops-error+xml": {
    "source": "iana",
    "extensions": ["xer"]
  },
  "application/pdf": {
    "source": "iana",
    "compressible": false,
    "extensions": ["pdf"]
  },
  "application/pdx": {
    "source": "iana"
  },
  "application/pgp-encrypted": {
    "source": "iana",
    "compressible": false,
    "extensions": ["pgp"]
  },
  "application/pgp-keys": {
    "source": "iana"
  },
  "application/pgp-signature": {
    "source": "iana",
    "extensions": ["asc","sig"]
  },
  "application/pics-rules": {
    "source": "apache",
    "extensions": ["prf"]
  },
  "application/pidf+xml": {
    "source": "iana"
  },
  "application/pidf-diff+xml": {
    "source": "iana"
  },
  "application/pkcs10": {
    "source": "iana",
    "extensions": ["p10"]
  },
  "application/pkcs12": {
    "source": "iana"
  },
  "application/pkcs7-mime": {
    "source": "iana",
    "extensions": ["p7m","p7c"]
  },
  "application/pkcs7-signature": {
    "source": "iana",
    "extensions": ["p7s"]
  },
  "application/pkcs8": {
    "source": "iana",
    "extensions": ["p8"]
  },
  "application/pkix-attr-cert": {
    "source": "iana",
    "extensions": ["ac"]
  },
  "application/pkix-cert": {
    "source": "iana",
    "extensions": ["cer"]
  },
  "application/pkix-crl": {
    "source": "iana",
    "extensions": ["crl"]
  },
  "application/pkix-pkipath": {
    "source": "iana",
    "extensions": ["pkipath"]
  },
  "application/pkixcmp": {
    "source": "iana",
    "extensions": ["pki"]
  },
  "application/pls+xml": {
    "source": "iana",
    "extensions": ["pls"]
  },
  "application/poc-settings+xml": {
    "source": "iana"
  },
  "application/postscript": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ai","eps","ps"]
  },
  "application/provenance+xml": {
    "source": "iana"
  },
  "application/prs.alvestrand.titrax-sheet": {
    "source": "iana"
  },
  "application/prs.cww": {
    "source": "iana",
    "extensions": ["cww"]
  },
  "application/prs.hpub+zip": {
    "source": "iana"
  },
  "application/prs.nprend": {
    "source": "iana"
  },
  "application/prs.plucker": {
    "source": "iana"
  },
  "application/prs.rdf-xml-crypt": {
    "source": "iana"
  },
  "application/prs.xsf+xml": {
    "source": "iana"
  },
  "application/pskc+xml": {
    "source": "iana",
    "extensions": ["pskcxml"]
  },
  "application/qsig": {
    "source": "iana"
  },
  "application/raptorfec": {
    "source": "iana"
  },
  "application/rdap+json": {
    "source": "iana",
    "compressible": true
  },
  "application/rdf+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rdf"]
  },
  "application/reginfo+xml": {
    "source": "iana",
    "extensions": ["rif"]
  },
  "application/relax-ng-compact-syntax": {
    "source": "iana",
    "extensions": ["rnc"]
  },
  "application/remote-printing": {
    "source": "iana"
  },
  "application/reputon+json": {
    "source": "iana",
    "compressible": true
  },
  "application/resource-lists+xml": {
    "source": "iana",
    "extensions": ["rl"]
  },
  "application/resource-lists-diff+xml": {
    "source": "iana",
    "extensions": ["rld"]
  },
  "application/rfc+xml": {
    "source": "iana"
  },
  "application/riscos": {
    "source": "iana"
  },
  "application/rlmi+xml": {
    "source": "iana"
  },
  "application/rls-services+xml": {
    "source": "iana",
    "extensions": ["rs"]
  },
  "application/rpki-ghostbusters": {
    "source": "iana",
    "extensions": ["gbr"]
  },
  "application/rpki-manifest": {
    "source": "iana",
    "extensions": ["mft"]
  },
  "application/rpki-roa": {
    "source": "iana",
    "extensions": ["roa"]
  },
  "application/rpki-updown": {
    "source": "iana"
  },
  "application/rsd+xml": {
    "source": "apache",
    "extensions": ["rsd"]
  },
  "application/rss+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["rss"]
  },
  "application/rtf": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rtf"]
  },
  "application/rtploopback": {
    "source": "iana"
  },
  "application/rtx": {
    "source": "iana"
  },
  "application/samlassertion+xml": {
    "source": "iana"
  },
  "application/samlmetadata+xml": {
    "source": "iana"
  },
  "application/sbml+xml": {
    "source": "iana",
    "extensions": ["sbml"]
  },
  "application/scaip+xml": {
    "source": "iana"
  },
  "application/scim+json": {
    "source": "iana",
    "compressible": true
  },
  "application/scvp-cv-request": {
    "source": "iana",
    "extensions": ["scq"]
  },
  "application/scvp-cv-response": {
    "source": "iana",
    "extensions": ["scs"]
  },
  "application/scvp-vp-request": {
    "source": "iana",
    "extensions": ["spq"]
  },
  "application/scvp-vp-response": {
    "source": "iana",
    "extensions": ["spp"]
  },
  "application/sdp": {
    "source": "iana",
    "extensions": ["sdp"]
  },
  "application/sep+xml": {
    "source": "iana"
  },
  "application/sep-exi": {
    "source": "iana"
  },
  "application/session-info": {
    "source": "iana"
  },
  "application/set-payment": {
    "source": "iana"
  },
  "application/set-payment-initiation": {
    "source": "iana",
    "extensions": ["setpay"]
  },
  "application/set-registration": {
    "source": "iana"
  },
  "application/set-registration-initiation": {
    "source": "iana",
    "extensions": ["setreg"]
  },
  "application/sgml": {
    "source": "iana"
  },
  "application/sgml-open-catalog": {
    "source": "iana"
  },
  "application/shf+xml": {
    "source": "iana",
    "extensions": ["shf"]
  },
  "application/sieve": {
    "source": "iana"
  },
  "application/simple-filter+xml": {
    "source": "iana"
  },
  "application/simple-message-summary": {
    "source": "iana"
  },
  "application/simplesymbolcontainer": {
    "source": "iana"
  },
  "application/slate": {
    "source": "iana"
  },
  "application/smil": {
    "source": "iana"
  },
  "application/smil+xml": {
    "source": "iana",
    "extensions": ["smi","smil"]
  },
  "application/smpte336m": {
    "source": "iana"
  },
  "application/soap+fastinfoset": {
    "source": "iana"
  },
  "application/soap+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/sparql-query": {
    "source": "iana",
    "extensions": ["rq"]
  },
  "application/sparql-results+xml": {
    "source": "iana",
    "extensions": ["srx"]
  },
  "application/spirits-event+xml": {
    "source": "iana"
  },
  "application/sql": {
    "source": "iana"
  },
  "application/srgs": {
    "source": "iana",
    "extensions": ["gram"]
  },
  "application/srgs+xml": {
    "source": "iana",
    "extensions": ["grxml"]
  },
  "application/sru+xml": {
    "source": "iana",
    "extensions": ["sru"]
  },
  "application/ssdl+xml": {
    "source": "apache",
    "extensions": ["ssdl"]
  },
  "application/ssml+xml": {
    "source": "iana",
    "extensions": ["ssml"]
  },
  "application/tamp-apex-update": {
    "source": "iana"
  },
  "application/tamp-apex-update-confirm": {
    "source": "iana"
  },
  "application/tamp-community-update": {
    "source": "iana"
  },
  "application/tamp-community-update-confirm": {
    "source": "iana"
  },
  "application/tamp-error": {
    "source": "iana"
  },
  "application/tamp-sequence-adjust": {
    "source": "iana"
  },
  "application/tamp-sequence-adjust-confirm": {
    "source": "iana"
  },
  "application/tamp-status-query": {
    "source": "iana"
  },
  "application/tamp-status-response": {
    "source": "iana"
  },
  "application/tamp-update": {
    "source": "iana"
  },
  "application/tamp-update-confirm": {
    "source": "iana"
  },
  "application/tar": {
    "compressible": true
  },
  "application/tei+xml": {
    "source": "iana",
    "extensions": ["tei","teicorpus"]
  },
  "application/thraud+xml": {
    "source": "iana",
    "extensions": ["tfi"]
  },
  "application/timestamp-query": {
    "source": "iana"
  },
  "application/timestamp-reply": {
    "source": "iana"
  },
  "application/timestamped-data": {
    "source": "iana",
    "extensions": ["tsd"]
  },
  "application/ttml+xml": {
    "source": "iana"
  },
  "application/tve-trigger": {
    "source": "iana"
  },
  "application/ulpfec": {
    "source": "iana"
  },
  "application/urc-grpsheet+xml": {
    "source": "iana"
  },
  "application/urc-ressheet+xml": {
    "source": "iana"
  },
  "application/urc-targetdesc+xml": {
    "source": "iana"
  },
  "application/urc-uisocketdesc+xml": {
    "source": "iana"
  },
  "application/vcard+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vcard+xml": {
    "source": "iana"
  },
  "application/vemmi": {
    "source": "iana"
  },
  "application/vividence.scriptfile": {
    "source": "apache"
  },
  "application/vnd.3gpp-prose+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp-prose-pc3ch+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp.access-transfer-events+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp.bsf+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp.mid-call+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp.pic-bw-large": {
    "source": "iana",
    "extensions": ["plb"]
  },
  "application/vnd.3gpp.pic-bw-small": {
    "source": "iana",
    "extensions": ["psb"]
  },
  "application/vnd.3gpp.pic-bw-var": {
    "source": "iana",
    "extensions": ["pvb"]
  },
  "application/vnd.3gpp.sms": {
    "source": "iana"
  },
  "application/vnd.3gpp.srvcc-ext+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp.srvcc-info+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp.state-and-event-info+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp.ussd+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp2.bcmcsinfo+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp2.sms": {
    "source": "iana"
  },
  "application/vnd.3gpp2.tcap": {
    "source": "iana",
    "extensions": ["tcap"]
  },
  "application/vnd.3m.post-it-notes": {
    "source": "iana",
    "extensions": ["pwn"]
  },
  "application/vnd.accpac.simply.aso": {
    "source": "iana",
    "extensions": ["aso"]
  },
  "application/vnd.accpac.simply.imp": {
    "source": "iana",
    "extensions": ["imp"]
  },
  "application/vnd.acucobol": {
    "source": "iana",
    "extensions": ["acu"]
  },
  "application/vnd.acucorp": {
    "source": "iana",
    "extensions": ["atc","acutc"]
  },
  "application/vnd.adobe.air-application-installer-package+zip": {
    "source": "apache",
    "extensions": ["air"]
  },
  "application/vnd.adobe.flash.movie": {
    "source": "iana"
  },
  "application/vnd.adobe.formscentral.fcdt": {
    "source": "iana",
    "extensions": ["fcdt"]
  },
  "application/vnd.adobe.fxp": {
    "source": "iana",
    "extensions": ["fxp","fxpl"]
  },
  "application/vnd.adobe.partial-upload": {
    "source": "iana"
  },
  "application/vnd.adobe.xdp+xml": {
    "source": "iana",
    "extensions": ["xdp"]
  },
  "application/vnd.adobe.xfdf": {
    "source": "iana",
    "extensions": ["xfdf"]
  },
  "application/vnd.aether.imp": {
    "source": "iana"
  },
  "application/vnd.ah-barcode": {
    "source": "iana"
  },
  "application/vnd.ahead.space": {
    "source": "iana",
    "extensions": ["ahead"]
  },
  "application/vnd.airzip.filesecure.azf": {
    "source": "iana",
    "extensions": ["azf"]
  },
  "application/vnd.airzip.filesecure.azs": {
    "source": "iana",
    "extensions": ["azs"]
  },
  "application/vnd.amazon.ebook": {
    "source": "apache",
    "extensions": ["azw"]
  },
  "application/vnd.americandynamics.acc": {
    "source": "iana",
    "extensions": ["acc"]
  },
  "application/vnd.amiga.ami": {
    "source": "iana",
    "extensions": ["ami"]
  },
  "application/vnd.amundsen.maze+xml": {
    "source": "iana"
  },
  "application/vnd.android.package-archive": {
    "source": "apache",
    "compressible": false,
    "extensions": ["apk"]
  },
  "application/vnd.anki": {
    "source": "iana"
  },
  "application/vnd.anser-web-certificate-issue-initiation": {
    "source": "iana",
    "extensions": ["cii"]
  },
  "application/vnd.anser-web-funds-transfer-initiation": {
    "source": "apache",
    "extensions": ["fti"]
  },
  "application/vnd.antix.game-component": {
    "source": "iana",
    "extensions": ["atx"]
  },
  "application/vnd.apache.thrift.binary": {
    "source": "iana"
  },
  "application/vnd.apache.thrift.compact": {
    "source": "iana"
  },
  "application/vnd.apache.thrift.json": {
    "source": "iana"
  },
  "application/vnd.api+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.apple.installer+xml": {
    "source": "iana",
    "extensions": ["mpkg"]
  },
  "application/vnd.apple.mpegurl": {
    "source": "iana",
    "extensions": ["m3u8"]
  },
  "application/vnd.apple.pkpass": {
    "compressible": false,
    "extensions": ["pkpass"]
  },
  "application/vnd.arastra.swi": {
    "source": "iana"
  },
  "application/vnd.aristanetworks.swi": {
    "source": "iana",
    "extensions": ["swi"]
  },
  "application/vnd.artsquare": {
    "source": "iana"
  },
  "application/vnd.astraea-software.iota": {
    "source": "iana",
    "extensions": ["iota"]
  },
  "application/vnd.audiograph": {
    "source": "iana",
    "extensions": ["aep"]
  },
  "application/vnd.autopackage": {
    "source": "iana"
  },
  "application/vnd.avistar+xml": {
    "source": "iana"
  },
  "application/vnd.balsamiq.bmml+xml": {
    "source": "iana"
  },
  "application/vnd.balsamiq.bmpr": {
    "source": "iana"
  },
  "application/vnd.bekitzur-stech+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.biopax.rdf+xml": {
    "source": "iana"
  },
  "application/vnd.blueice.multipass": {
    "source": "iana",
    "extensions": ["mpm"]
  },
  "application/vnd.bluetooth.ep.oob": {
    "source": "iana"
  },
  "application/vnd.bluetooth.le.oob": {
    "source": "iana"
  },
  "application/vnd.bmi": {
    "source": "iana",
    "extensions": ["bmi"]
  },
  "application/vnd.businessobjects": {
    "source": "iana",
    "extensions": ["rep"]
  },
  "application/vnd.cab-jscript": {
    "source": "iana"
  },
  "application/vnd.canon-cpdl": {
    "source": "iana"
  },
  "application/vnd.canon-lips": {
    "source": "iana"
  },
  "application/vnd.cendio.thinlinc.clientconf": {
    "source": "iana"
  },
  "application/vnd.century-systems.tcp_stream": {
    "source": "iana"
  },
  "application/vnd.chemdraw+xml": {
    "source": "iana",
    "extensions": ["cdxml"]
  },
  "application/vnd.chipnuts.karaoke-mmd": {
    "source": "iana",
    "extensions": ["mmd"]
  },
  "application/vnd.cinderella": {
    "source": "iana",
    "extensions": ["cdy"]
  },
  "application/vnd.cirpack.isdn-ext": {
    "source": "iana"
  },
  "application/vnd.citationstyles.style+xml": {
    "source": "iana"
  },
  "application/vnd.claymore": {
    "source": "iana",
    "extensions": ["cla"]
  },
  "application/vnd.cloanto.rp9": {
    "source": "iana",
    "extensions": ["rp9"]
  },
  "application/vnd.clonk.c4group": {
    "source": "iana",
    "extensions": ["c4g","c4d","c4f","c4p","c4u"]
  },
  "application/vnd.cluetrust.cartomobile-config": {
    "source": "iana",
    "extensions": ["c11amc"]
  },
  "application/vnd.cluetrust.cartomobile-config-pkg": {
    "source": "iana",
    "extensions": ["c11amz"]
  },
  "application/vnd.coffeescript": {
    "source": "iana"
  },
  "application/vnd.collection+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.collection.doc+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.collection.next+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.commerce-battelle": {
    "source": "iana"
  },
  "application/vnd.commonspace": {
    "source": "iana",
    "extensions": ["csp"]
  },
  "application/vnd.contact.cmsg": {
    "source": "iana",
    "extensions": ["cdbcmsg"]
  },
  "application/vnd.cosmocaller": {
    "source": "iana",
    "extensions": ["cmc"]
  },
  "application/vnd.crick.clicker": {
    "source": "iana",
    "extensions": ["clkx"]
  },
  "application/vnd.crick.clicker.keyboard": {
    "source": "iana",
    "extensions": ["clkk"]
  },
  "application/vnd.crick.clicker.palette": {
    "source": "iana",
    "extensions": ["clkp"]
  },
  "application/vnd.crick.clicker.template": {
    "source": "iana",
    "extensions": ["clkt"]
  },
  "application/vnd.crick.clicker.wordbank": {
    "source": "iana",
    "extensions": ["clkw"]
  },
  "application/vnd.criticaltools.wbs+xml": {
    "source": "iana",
    "extensions": ["wbs"]
  },
  "application/vnd.ctc-posml": {
    "source": "iana",
    "extensions": ["pml"]
  },
  "application/vnd.ctct.ws+xml": {
    "source": "iana"
  },
  "application/vnd.cups-pdf": {
    "source": "iana"
  },
  "application/vnd.cups-postscript": {
    "source": "iana"
  },
  "application/vnd.cups-ppd": {
    "source": "iana",
    "extensions": ["ppd"]
  },
  "application/vnd.cups-raster": {
    "source": "iana"
  },
  "application/vnd.cups-raw": {
    "source": "iana"
  },
  "application/vnd.curl": {
    "source": "iana"
  },
  "application/vnd.curl.car": {
    "source": "apache",
    "extensions": ["car"]
  },
  "application/vnd.curl.pcurl": {
    "source": "apache",
    "extensions": ["pcurl"]
  },
  "application/vnd.cyan.dean.root+xml": {
    "source": "iana"
  },
  "application/vnd.cybank": {
    "source": "iana"
  },
  "application/vnd.dart": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dart"]
  },
  "application/vnd.data-vision.rdz": {
    "source": "iana",
    "extensions": ["rdz"]
  },
  "application/vnd.debian.binary-package": {
    "source": "iana"
  },
  "application/vnd.dece.data": {
    "source": "iana",
    "extensions": ["uvf","uvvf","uvd","uvvd"]
  },
  "application/vnd.dece.ttml+xml": {
    "source": "iana",
    "extensions": ["uvt","uvvt"]
  },
  "application/vnd.dece.unspecified": {
    "source": "iana",
    "extensions": ["uvx","uvvx"]
  },
  "application/vnd.dece.zip": {
    "source": "iana",
    "extensions": ["uvz","uvvz"]
  },
  "application/vnd.denovo.fcselayout-link": {
    "source": "iana",
    "extensions": ["fe_launch"]
  },
  "application/vnd.desmume-movie": {
    "source": "iana"
  },
  "application/vnd.dir-bi.plate-dl-nosuffix": {
    "source": "iana"
  },
  "application/vnd.dm.delegation+xml": {
    "source": "iana"
  },
  "application/vnd.dna": {
    "source": "iana",
    "extensions": ["dna"]
  },
  "application/vnd.document+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dolby.mlp": {
    "source": "apache",
    "extensions": ["mlp"]
  },
  "application/vnd.dolby.mobile.1": {
    "source": "iana"
  },
  "application/vnd.dolby.mobile.2": {
    "source": "iana"
  },
  "application/vnd.doremir.scorecloud-binary-document": {
    "source": "iana"
  },
  "application/vnd.dpgraph": {
    "source": "iana",
    "extensions": ["dpg"]
  },
  "application/vnd.dreamfactory": {
    "source": "iana",
    "extensions": ["dfac"]
  },
  "application/vnd.drive+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ds-keypoint": {
    "source": "apache",
    "extensions": ["kpxx"]
  },
  "application/vnd.dtg.local": {
    "source": "iana"
  },
  "application/vnd.dtg.local.flash": {
    "source": "iana"
  },
  "application/vnd.dtg.local.html": {
    "source": "iana"
  },
  "application/vnd.dvb.ait": {
    "source": "iana",
    "extensions": ["ait"]
  },
  "application/vnd.dvb.dvbj": {
    "source": "iana"
  },
  "application/vnd.dvb.esgcontainer": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcdftnotifaccess": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcesgaccess": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcesgaccess2": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcesgpdd": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcroaming": {
    "source": "iana"
  },
  "application/vnd.dvb.iptv.alfec-base": {
    "source": "iana"
  },
  "application/vnd.dvb.iptv.alfec-enhancement": {
    "source": "iana"
  },
  "application/vnd.dvb.notif-aggregate-root+xml": {
    "source": "iana"
  },
  "application/vnd.dvb.notif-container+xml": {
    "source": "iana"
  },
  "application/vnd.dvb.notif-generic+xml": {
    "source": "iana"
  },
  "application/vnd.dvb.notif-ia-msglist+xml": {
    "source": "iana"
  },
  "application/vnd.dvb.notif-ia-registration-request+xml": {
    "source": "iana"
  },
  "application/vnd.dvb.notif-ia-registration-response+xml": {
    "source": "iana"
  },
  "application/vnd.dvb.notif-init+xml": {
    "source": "iana"
  },
  "application/vnd.dvb.pfr": {
    "source": "iana"
  },
  "application/vnd.dvb.service": {
    "source": "iana",
    "extensions": ["svc"]
  },
  "application/vnd.dxr": {
    "source": "iana"
  },
  "application/vnd.dynageo": {
    "source": "iana",
    "extensions": ["geo"]
  },
  "application/vnd.dzr": {
    "source": "iana"
  },
  "application/vnd.easykaraoke.cdgdownload": {
    "source": "iana"
  },
  "application/vnd.ecdis-update": {
    "source": "iana"
  },
  "application/vnd.ecowin.chart": {
    "source": "iana",
    "extensions": ["mag"]
  },
  "application/vnd.ecowin.filerequest": {
    "source": "iana"
  },
  "application/vnd.ecowin.fileupdate": {
    "source": "iana"
  },
  "application/vnd.ecowin.series": {
    "source": "iana"
  },
  "application/vnd.ecowin.seriesrequest": {
    "source": "iana"
  },
  "application/vnd.ecowin.seriesupdate": {
    "source": "iana"
  },
  "application/vnd.emclient.accessrequest+xml": {
    "source": "iana"
  },
  "application/vnd.enliven": {
    "source": "iana",
    "extensions": ["nml"]
  },
  "application/vnd.enphase.envoy": {
    "source": "iana"
  },
  "application/vnd.eprints.data+xml": {
    "source": "iana"
  },
  "application/vnd.epson.esf": {
    "source": "iana",
    "extensions": ["esf"]
  },
  "application/vnd.epson.msf": {
    "source": "iana",
    "extensions": ["msf"]
  },
  "application/vnd.epson.quickanime": {
    "source": "iana",
    "extensions": ["qam"]
  },
  "application/vnd.epson.salt": {
    "source": "iana",
    "extensions": ["slt"]
  },
  "application/vnd.epson.ssf": {
    "source": "iana",
    "extensions": ["ssf"]
  },
  "application/vnd.ericsson.quickcall": {
    "source": "iana"
  },
  "application/vnd.eszigno3+xml": {
    "source": "iana",
    "extensions": ["es3","et3"]
  },
  "application/vnd.etsi.aoc+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.asic-e+zip": {
    "source": "iana"
  },
  "application/vnd.etsi.asic-s+zip": {
    "source": "iana"
  },
  "application/vnd.etsi.cug+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.iptvcommand+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.iptvdiscovery+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.iptvprofile+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.iptvsad-bc+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.iptvsad-cod+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.iptvsad-npvr+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.iptvservice+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.iptvsync+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.iptvueprofile+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.mcid+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.mheg5": {
    "source": "iana"
  },
  "application/vnd.etsi.overload-control-policy-dataset+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.pstn+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.sci+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.simservs+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.timestamp-token": {
    "source": "iana"
  },
  "application/vnd.etsi.tsl+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.tsl.der": {
    "source": "iana"
  },
  "application/vnd.eudora.data": {
    "source": "iana"
  },
  "application/vnd.ezpix-album": {
    "source": "iana",
    "extensions": ["ez2"]
  },
  "application/vnd.ezpix-package": {
    "source": "iana",
    "extensions": ["ez3"]
  },
  "application/vnd.f-secure.mobile": {
    "source": "iana"
  },
  "application/vnd.fastcopy-disk-image": {
    "source": "iana"
  },
  "application/vnd.fdf": {
    "source": "iana",
    "extensions": ["fdf"]
  },
  "application/vnd.fdsn.mseed": {
    "source": "iana",
    "extensions": ["mseed"]
  },
  "application/vnd.fdsn.seed": {
    "source": "iana",
    "extensions": ["seed","dataless"]
  },
  "application/vnd.ffsns": {
    "source": "iana"
  },
  "application/vnd.filmit.zfc": {
    "source": "iana"
  },
  "application/vnd.fints": {
    "source": "iana"
  },
  "application/vnd.firemonkeys.cloudcell": {
    "source": "iana"
  },
  "application/vnd.flographit": {
    "source": "iana",
    "extensions": ["gph"]
  },
  "application/vnd.fluxtime.clip": {
    "source": "iana",
    "extensions": ["ftc"]
  },
  "application/vnd.font-fontforge-sfd": {
    "source": "iana"
  },
  "application/vnd.framemaker": {
    "source": "iana",
    "extensions": ["fm","frame","maker","book"]
  },
  "application/vnd.frogans.fnc": {
    "source": "iana",
    "extensions": ["fnc"]
  },
  "application/vnd.frogans.ltf": {
    "source": "iana",
    "extensions": ["ltf"]
  },
  "application/vnd.fsc.weblaunch": {
    "source": "iana",
    "extensions": ["fsc"]
  },
  "application/vnd.fujitsu.oasys": {
    "source": "iana",
    "extensions": ["oas"]
  },
  "application/vnd.fujitsu.oasys2": {
    "source": "iana",
    "extensions": ["oa2"]
  },
  "application/vnd.fujitsu.oasys3": {
    "source": "iana",
    "extensions": ["oa3"]
  },
  "application/vnd.fujitsu.oasysgp": {
    "source": "iana",
    "extensions": ["fg5"]
  },
  "application/vnd.fujitsu.oasysprs": {
    "source": "iana",
    "extensions": ["bh2"]
  },
  "application/vnd.fujixerox.art-ex": {
    "source": "iana"
  },
  "application/vnd.fujixerox.art4": {
    "source": "iana"
  },
  "application/vnd.fujixerox.ddd": {
    "source": "iana",
    "extensions": ["ddd"]
  },
  "application/vnd.fujixerox.docuworks": {
    "source": "iana",
    "extensions": ["xdw"]
  },
  "application/vnd.fujixerox.docuworks.binder": {
    "source": "iana",
    "extensions": ["xbd"]
  },
  "application/vnd.fujixerox.docuworks.container": {
    "source": "iana"
  },
  "application/vnd.fujixerox.hbpl": {
    "source": "iana"
  },
  "application/vnd.fut-misnet": {
    "source": "iana"
  },
  "application/vnd.fuzzysheet": {
    "source": "iana",
    "extensions": ["fzs"]
  },
  "application/vnd.genomatix.tuxedo": {
    "source": "iana",
    "extensions": ["txd"]
  },
  "application/vnd.geo+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.geocube+xml": {
    "source": "iana"
  },
  "application/vnd.geogebra.file": {
    "source": "iana",
    "extensions": ["ggb"]
  },
  "application/vnd.geogebra.tool": {
    "source": "iana",
    "extensions": ["ggt"]
  },
  "application/vnd.geometry-explorer": {
    "source": "iana",
    "extensions": ["gex","gre"]
  },
  "application/vnd.geonext": {
    "source": "iana",
    "extensions": ["gxt"]
  },
  "application/vnd.geoplan": {
    "source": "iana",
    "extensions": ["g2w"]
  },
  "application/vnd.geospace": {
    "source": "iana",
    "extensions": ["g3w"]
  },
  "application/vnd.gerber": {
    "source": "iana"
  },
  "application/vnd.globalplatform.card-content-mgt": {
    "source": "iana"
  },
  "application/vnd.globalplatform.card-content-mgt-response": {
    "source": "iana"
  },
  "application/vnd.gmx": {
    "source": "iana",
    "extensions": ["gmx"]
  },
  "application/vnd.google-apps.document": {
    "compressible": false,
    "extensions": ["gdoc"]
  },
  "application/vnd.google-apps.presentation": {
    "compressible": false,
    "extensions": ["gslides"]
  },
  "application/vnd.google-apps.spreadsheet": {
    "compressible": false,
    "extensions": ["gsheet"]
  },
  "application/vnd.google-earth.kml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["kml"]
  },
  "application/vnd.google-earth.kmz": {
    "source": "iana",
    "compressible": false,
    "extensions": ["kmz"]
  },
  "application/vnd.gov.sk.e-form+xml": {
    "source": "iana"
  },
  "application/vnd.gov.sk.e-form+zip": {
    "source": "iana"
  },
  "application/vnd.gov.sk.xmldatacontainer+xml": {
    "source": "iana"
  },
  "application/vnd.grafeq": {
    "source": "iana",
    "extensions": ["gqf","gqs"]
  },
  "application/vnd.gridmp": {
    "source": "iana"
  },
  "application/vnd.groove-account": {
    "source": "iana",
    "extensions": ["gac"]
  },
  "application/vnd.groove-help": {
    "source": "iana",
    "extensions": ["ghf"]
  },
  "application/vnd.groove-identity-message": {
    "source": "iana",
    "extensions": ["gim"]
  },
  "application/vnd.groove-injector": {
    "source": "iana",
    "extensions": ["grv"]
  },
  "application/vnd.groove-tool-message": {
    "source": "iana",
    "extensions": ["gtm"]
  },
  "application/vnd.groove-tool-template": {
    "source": "iana",
    "extensions": ["tpl"]
  },
  "application/vnd.groove-vcard": {
    "source": "iana",
    "extensions": ["vcg"]
  },
  "application/vnd.hal+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hal+xml": {
    "source": "iana",
    "extensions": ["hal"]
  },
  "application/vnd.handheld-entertainment+xml": {
    "source": "iana",
    "extensions": ["zmm"]
  },
  "application/vnd.hbci": {
    "source": "iana",
    "extensions": ["hbci"]
  },
  "application/vnd.hcl-bireports": {
    "source": "iana"
  },
  "application/vnd.heroku+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hhe.lesson-player": {
    "source": "iana",
    "extensions": ["les"]
  },
  "application/vnd.hp-hpgl": {
    "source": "iana",
    "extensions": ["hpgl"]
  },
  "application/vnd.hp-hpid": {
    "source": "iana",
    "extensions": ["hpid"]
  },
  "application/vnd.hp-hps": {
    "source": "iana",
    "extensions": ["hps"]
  },
  "application/vnd.hp-jlyt": {
    "source": "iana",
    "extensions": ["jlt"]
  },
  "application/vnd.hp-pcl": {
    "source": "iana",
    "extensions": ["pcl"]
  },
  "application/vnd.hp-pclxl": {
    "source": "iana",
    "extensions": ["pclxl"]
  },
  "application/vnd.httphone": {
    "source": "iana"
  },
  "application/vnd.hydrostatix.sof-data": {
    "source": "iana",
    "extensions": ["sfd-hdstx"]
  },
  "application/vnd.hyperdrive+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hzn-3d-crossword": {
    "source": "iana"
  },
  "application/vnd.ibm.afplinedata": {
    "source": "iana"
  },
  "application/vnd.ibm.electronic-media": {
    "source": "iana"
  },
  "application/vnd.ibm.minipay": {
    "source": "iana",
    "extensions": ["mpy"]
  },
  "application/vnd.ibm.modcap": {
    "source": "iana",
    "extensions": ["afp","listafp","list3820"]
  },
  "application/vnd.ibm.rights-management": {
    "source": "iana",
    "extensions": ["irm"]
  },
  "application/vnd.ibm.secure-container": {
    "source": "iana",
    "extensions": ["sc"]
  },
  "application/vnd.iccprofile": {
    "source": "iana",
    "extensions": ["icc","icm"]
  },
  "application/vnd.ieee.1905": {
    "source": "iana"
  },
  "application/vnd.igloader": {
    "source": "iana",
    "extensions": ["igl"]
  },
  "application/vnd.immervision-ivp": {
    "source": "iana",
    "extensions": ["ivp"]
  },
  "application/vnd.immervision-ivu": {
    "source": "iana",
    "extensions": ["ivu"]
  },
  "application/vnd.ims.imsccv1p1": {
    "source": "iana"
  },
  "application/vnd.ims.imsccv1p2": {
    "source": "iana"
  },
  "application/vnd.ims.imsccv1p3": {
    "source": "iana"
  },
  "application/vnd.ims.lis.v2.result+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolproxy+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolproxy.id+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolsettings+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolsettings.simple+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.informedcontrol.rms+xml": {
    "source": "iana"
  },
  "application/vnd.informix-visionary": {
    "source": "iana"
  },
  "application/vnd.infotech.project": {
    "source": "iana"
  },
  "application/vnd.infotech.project+xml": {
    "source": "iana"
  },
  "application/vnd.innopath.wamp.notification": {
    "source": "iana"
  },
  "application/vnd.insors.igm": {
    "source": "iana",
    "extensions": ["igm"]
  },
  "application/vnd.intercon.formnet": {
    "source": "iana",
    "extensions": ["xpw","xpx"]
  },
  "application/vnd.intergeo": {
    "source": "iana",
    "extensions": ["i2g"]
  },
  "application/vnd.intertrust.digibox": {
    "source": "iana"
  },
  "application/vnd.intertrust.nncp": {
    "source": "iana"
  },
  "application/vnd.intu.qbo": {
    "source": "iana",
    "extensions": ["qbo"]
  },
  "application/vnd.intu.qfx": {
    "source": "iana",
    "extensions": ["qfx"]
  },
  "application/vnd.iptc.g2.catalogitem+xml": {
    "source": "iana"
  },
  "application/vnd.iptc.g2.conceptitem+xml": {
    "source": "iana"
  },
  "application/vnd.iptc.g2.knowledgeitem+xml": {
    "source": "iana"
  },
  "application/vnd.iptc.g2.newsitem+xml": {
    "source": "iana"
  },
  "application/vnd.iptc.g2.newsmessage+xml": {
    "source": "iana"
  },
  "application/vnd.iptc.g2.packageitem+xml": {
    "source": "iana"
  },
  "application/vnd.iptc.g2.planningitem+xml": {
    "source": "iana"
  },
  "application/vnd.ipunplugged.rcprofile": {
    "source": "iana",
    "extensions": ["rcprofile"]
  },
  "application/vnd.irepository.package+xml": {
    "source": "iana",
    "extensions": ["irp"]
  },
  "application/vnd.is-xpr": {
    "source": "iana",
    "extensions": ["xpr"]
  },
  "application/vnd.isac.fcs": {
    "source": "iana",
    "extensions": ["fcs"]
  },
  "application/vnd.jam": {
    "source": "iana",
    "extensions": ["jam"]
  },
  "application/vnd.japannet-directory-service": {
    "source": "iana"
  },
  "application/vnd.japannet-jpnstore-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-payment-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-registration": {
    "source": "iana"
  },
  "application/vnd.japannet-registration-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-setstore-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-verification": {
    "source": "iana"
  },
  "application/vnd.japannet-verification-wakeup": {
    "source": "iana"
  },
  "application/vnd.jcp.javame.midlet-rms": {
    "source": "iana",
    "extensions": ["rms"]
  },
  "application/vnd.jisp": {
    "source": "iana",
    "extensions": ["jisp"]
  },
  "application/vnd.joost.joda-archive": {
    "source": "iana",
    "extensions": ["joda"]
  },
  "application/vnd.jsk.isdn-ngn": {
    "source": "iana"
  },
  "application/vnd.kahootz": {
    "source": "iana",
    "extensions": ["ktz","ktr"]
  },
  "application/vnd.kde.karbon": {
    "source": "iana",
    "extensions": ["karbon"]
  },
  "application/vnd.kde.kchart": {
    "source": "iana",
    "extensions": ["chrt"]
  },
  "application/vnd.kde.kformula": {
    "source": "iana",
    "extensions": ["kfo"]
  },
  "application/vnd.kde.kivio": {
    "source": "iana",
    "extensions": ["flw"]
  },
  "application/vnd.kde.kontour": {
    "source": "iana",
    "extensions": ["kon"]
  },
  "application/vnd.kde.kpresenter": {
    "source": "iana",
    "extensions": ["kpr","kpt"]
  },
  "application/vnd.kde.kspread": {
    "source": "iana",
    "extensions": ["ksp"]
  },
  "application/vnd.kde.kword": {
    "source": "iana",
    "extensions": ["kwd","kwt"]
  },
  "application/vnd.kenameaapp": {
    "source": "iana",
    "extensions": ["htke"]
  },
  "application/vnd.kidspiration": {
    "source": "iana",
    "extensions": ["kia"]
  },
  "application/vnd.kinar": {
    "source": "iana",
    "extensions": ["kne","knp"]
  },
  "application/vnd.koan": {
    "source": "iana",
    "extensions": ["skp","skd","skt","skm"]
  },
  "application/vnd.kodak-descriptor": {
    "source": "iana",
    "extensions": ["sse"]
  },
  "application/vnd.las.las+xml": {
    "source": "iana",
    "extensions": ["lasxml"]
  },
  "application/vnd.liberty-request+xml": {
    "source": "iana"
  },
  "application/vnd.llamagraphics.life-balance.desktop": {
    "source": "iana",
    "extensions": ["lbd"]
  },
  "application/vnd.llamagraphics.life-balance.exchange+xml": {
    "source": "iana",
    "extensions": ["lbe"]
  },
  "application/vnd.lotus-1-2-3": {
    "source": "iana",
    "extensions": ["123"]
  },
  "application/vnd.lotus-approach": {
    "source": "iana",
    "extensions": ["apr"]
  },
  "application/vnd.lotus-freelance": {
    "source": "iana",
    "extensions": ["pre"]
  },
  "application/vnd.lotus-notes": {
    "source": "iana",
    "extensions": ["nsf"]
  },
  "application/vnd.lotus-organizer": {
    "source": "iana",
    "extensions": ["org"]
  },
  "application/vnd.lotus-screencam": {
    "source": "iana",
    "extensions": ["scm"]
  },
  "application/vnd.lotus-wordpro": {
    "source": "iana",
    "extensions": ["lwp"]
  },
  "application/vnd.macports.portpkg": {
    "source": "iana",
    "extensions": ["portpkg"]
  },
  "application/vnd.mapbox-vector-tile": {
    "source": "iana"
  },
  "application/vnd.marlin.drm.actiontoken+xml": {
    "source": "iana"
  },
  "application/vnd.marlin.drm.conftoken+xml": {
    "source": "iana"
  },
  "application/vnd.marlin.drm.license+xml": {
    "source": "iana"
  },
  "application/vnd.marlin.drm.mdcf": {
    "source": "iana"
  },
  "application/vnd.mason+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.maxmind.maxmind-db": {
    "source": "iana"
  },
  "application/vnd.mcd": {
    "source": "iana",
    "extensions": ["mcd"]
  },
  "application/vnd.medcalcdata": {
    "source": "iana",
    "extensions": ["mc1"]
  },
  "application/vnd.mediastation.cdkey": {
    "source": "iana",
    "extensions": ["cdkey"]
  },
  "application/vnd.meridian-slingshot": {
    "source": "iana"
  },
  "application/vnd.mfer": {
    "source": "iana",
    "extensions": ["mwf"]
  },
  "application/vnd.mfmp": {
    "source": "iana",
    "extensions": ["mfm"]
  },
  "application/vnd.micro+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.micrografx.flo": {
    "source": "iana",
    "extensions": ["flo"]
  },
  "application/vnd.micrografx.igx": {
    "source": "iana",
    "extensions": ["igx"]
  },
  "application/vnd.microsoft.portable-executable": {
    "source": "iana"
  },
  "application/vnd.miele+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.mif": {
    "source": "iana",
    "extensions": ["mif"]
  },
  "application/vnd.minisoft-hp3000-save": {
    "source": "iana"
  },
  "application/vnd.mitsubishi.misty-guard.trustweb": {
    "source": "iana"
  },
  "application/vnd.mobius.daf": {
    "source": "iana",
    "extensions": ["daf"]
  },
  "application/vnd.mobius.dis": {
    "source": "iana",
    "extensions": ["dis"]
  },
  "application/vnd.mobius.mbk": {
    "source": "iana",
    "extensions": ["mbk"]
  },
  "application/vnd.mobius.mqy": {
    "source": "iana",
    "extensions": ["mqy"]
  },
  "application/vnd.mobius.msl": {
    "source": "iana",
    "extensions": ["msl"]
  },
  "application/vnd.mobius.plc": {
    "source": "iana",
    "extensions": ["plc"]
  },
  "application/vnd.mobius.txf": {
    "source": "iana",
    "extensions": ["txf"]
  },
  "application/vnd.mophun.application": {
    "source": "iana",
    "extensions": ["mpn"]
  },
  "application/vnd.mophun.certificate": {
    "source": "iana",
    "extensions": ["mpc"]
  },
  "application/vnd.motorola.flexsuite": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.adsi": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.fis": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.gotap": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.kmr": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.ttc": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.wem": {
    "source": "iana"
  },
  "application/vnd.motorola.iprm": {
    "source": "iana"
  },
  "application/vnd.mozilla.xul+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xul"]
  },
  "application/vnd.ms-3mfdocument": {
    "source": "iana"
  },
  "application/vnd.ms-artgalry": {
    "source": "iana",
    "extensions": ["cil"]
  },
  "application/vnd.ms-asf": {
    "source": "iana"
  },
  "application/vnd.ms-cab-compressed": {
    "source": "iana",
    "extensions": ["cab"]
  },
  "application/vnd.ms-color.iccprofile": {
    "source": "apache"
  },
  "application/vnd.ms-excel": {
    "source": "iana",
    "compressible": false,
    "extensions": ["xls","xlm","xla","xlc","xlt","xlw"]
  },
  "application/vnd.ms-excel.addin.macroenabled.12": {
    "source": "iana",
    "extensions": ["xlam"]
  },
  "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
    "source": "iana",
    "extensions": ["xlsb"]
  },
  "application/vnd.ms-excel.sheet.macroenabled.12": {
    "source": "iana",
    "extensions": ["xlsm"]
  },
  "application/vnd.ms-excel.template.macroenabled.12": {
    "source": "iana",
    "extensions": ["xltm"]
  },
  "application/vnd.ms-fontobject": {
    "source": "iana",
    "compressible": true,
    "extensions": ["eot"]
  },
  "application/vnd.ms-htmlhelp": {
    "source": "iana",
    "extensions": ["chm"]
  },
  "application/vnd.ms-ims": {
    "source": "iana",
    "extensions": ["ims"]
  },
  "application/vnd.ms-lrm": {
    "source": "iana",
    "extensions": ["lrm"]
  },
  "application/vnd.ms-office.activex+xml": {
    "source": "iana"
  },
  "application/vnd.ms-officetheme": {
    "source": "iana",
    "extensions": ["thmx"]
  },
  "application/vnd.ms-opentype": {
    "source": "apache",
    "compressible": true
  },
  "application/vnd.ms-package.obfuscated-opentype": {
    "source": "apache"
  },
  "application/vnd.ms-pki.seccat": {
    "source": "apache",
    "extensions": ["cat"]
  },
  "application/vnd.ms-pki.stl": {
    "source": "apache",
    "extensions": ["stl"]
  },
  "application/vnd.ms-playready.initiator+xml": {
    "source": "iana"
  },
  "application/vnd.ms-powerpoint": {
    "source": "iana",
    "compressible": false,
    "extensions": ["ppt","pps","pot"]
  },
  "application/vnd.ms-powerpoint.addin.macroenabled.12": {
    "source": "iana",
    "extensions": ["ppam"]
  },
  "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
    "source": "iana",
    "extensions": ["pptm"]
  },
  "application/vnd.ms-powerpoint.slide.macroenabled.12": {
    "source": "iana",
    "extensions": ["sldm"]
  },
  "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
    "source": "iana",
    "extensions": ["ppsm"]
  },
  "application/vnd.ms-powerpoint.template.macroenabled.12": {
    "source": "iana",
    "extensions": ["potm"]
  },
  "application/vnd.ms-printdevicecapabilities+xml": {
    "source": "iana"
  },
  "application/vnd.ms-printing.printticket+xml": {
    "source": "apache"
  },
  "application/vnd.ms-project": {
    "source": "iana",
    "extensions": ["mpp","mpt"]
  },
  "application/vnd.ms-tnef": {
    "source": "iana"
  },
  "application/vnd.ms-windows.devicepairing": {
    "source": "iana"
  },
  "application/vnd.ms-windows.nwprinting.oob": {
    "source": "iana"
  },
  "application/vnd.ms-windows.printerpairing": {
    "source": "iana"
  },
  "application/vnd.ms-windows.wsd.oob": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.lic-chlg-req": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.lic-resp": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.meter-chlg-req": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.meter-resp": {
    "source": "iana"
  },
  "application/vnd.ms-word.document.macroenabled.12": {
    "source": "iana",
    "extensions": ["docm"]
  },
  "application/vnd.ms-word.template.macroenabled.12": {
    "source": "iana",
    "extensions": ["dotm"]
  },
  "application/vnd.ms-works": {
    "source": "iana",
    "extensions": ["wps","wks","wcm","wdb"]
  },
  "application/vnd.ms-wpl": {
    "source": "iana",
    "extensions": ["wpl"]
  },
  "application/vnd.ms-xpsdocument": {
    "source": "iana",
    "compressible": false,
    "extensions": ["xps"]
  },
  "application/vnd.msa-disk-image": {
    "source": "iana"
  },
  "application/vnd.mseq": {
    "source": "iana",
    "extensions": ["mseq"]
  },
  "application/vnd.msign": {
    "source": "iana"
  },
  "application/vnd.multiad.creator": {
    "source": "iana"
  },
  "application/vnd.multiad.creator.cif": {
    "source": "iana"
  },
  "application/vnd.music-niff": {
    "source": "iana"
  },
  "application/vnd.musician": {
    "source": "iana",
    "extensions": ["mus"]
  },
  "application/vnd.muvee.style": {
    "source": "iana",
    "extensions": ["msty"]
  },
  "application/vnd.mynfc": {
    "source": "iana",
    "extensions": ["taglet"]
  },
  "application/vnd.ncd.control": {
    "source": "iana"
  },
  "application/vnd.ncd.reference": {
    "source": "iana"
  },
  "application/vnd.nervana": {
    "source": "iana"
  },
  "application/vnd.netfpx": {
    "source": "iana"
  },
  "application/vnd.neurolanguage.nlu": {
    "source": "iana",
    "extensions": ["nlu"]
  },
  "application/vnd.nintendo.nitro.rom": {
    "source": "iana"
  },
  "application/vnd.nintendo.snes.rom": {
    "source": "iana"
  },
  "application/vnd.nitf": {
    "source": "iana",
    "extensions": ["ntf","nitf"]
  },
  "application/vnd.noblenet-directory": {
    "source": "iana",
    "extensions": ["nnd"]
  },
  "application/vnd.noblenet-sealer": {
    "source": "iana",
    "extensions": ["nns"]
  },
  "application/vnd.noblenet-web": {
    "source": "iana",
    "extensions": ["nnw"]
  },
  "application/vnd.nokia.catalogs": {
    "source": "iana"
  },
  "application/vnd.nokia.conml+wbxml": {
    "source": "iana"
  },
  "application/vnd.nokia.conml+xml": {
    "source": "iana"
  },
  "application/vnd.nokia.iptv.config+xml": {
    "source": "iana"
  },
  "application/vnd.nokia.isds-radio-presets": {
    "source": "iana"
  },
  "application/vnd.nokia.landmark+wbxml": {
    "source": "iana"
  },
  "application/vnd.nokia.landmark+xml": {
    "source": "iana"
  },
  "application/vnd.nokia.landmarkcollection+xml": {
    "source": "iana"
  },
  "application/vnd.nokia.n-gage.ac+xml": {
    "source": "iana"
  },
  "application/vnd.nokia.n-gage.data": {
    "source": "iana",
    "extensions": ["ngdat"]
  },
  "application/vnd.nokia.n-gage.symbian.install": {
    "source": "iana",
    "extensions": ["n-gage"]
  },
  "application/vnd.nokia.ncd": {
    "source": "iana"
  },
  "application/vnd.nokia.pcd+wbxml": {
    "source": "iana"
  },
  "application/vnd.nokia.pcd+xml": {
    "source": "iana"
  },
  "application/vnd.nokia.radio-preset": {
    "source": "iana",
    "extensions": ["rpst"]
  },
  "application/vnd.nokia.radio-presets": {
    "source": "iana",
    "extensions": ["rpss"]
  },
  "application/vnd.novadigm.edm": {
    "source": "iana",
    "extensions": ["edm"]
  },
  "application/vnd.novadigm.edx": {
    "source": "iana",
    "extensions": ["edx"]
  },
  "application/vnd.novadigm.ext": {
    "source": "iana",
    "extensions": ["ext"]
  },
  "application/vnd.ntt-local.content-share": {
    "source": "iana"
  },
  "application/vnd.ntt-local.file-transfer": {
    "source": "iana"
  },
  "application/vnd.ntt-local.ogw_remote-access": {
    "source": "iana"
  },
  "application/vnd.ntt-local.sip-ta_remote": {
    "source": "iana"
  },
  "application/vnd.ntt-local.sip-ta_tcp_stream": {
    "source": "iana"
  },
  "application/vnd.oasis.opendocument.chart": {
    "source": "iana",
    "extensions": ["odc"]
  },
  "application/vnd.oasis.opendocument.chart-template": {
    "source": "iana",
    "extensions": ["otc"]
  },
  "application/vnd.oasis.opendocument.database": {
    "source": "iana",
    "extensions": ["odb"]
  },
  "application/vnd.oasis.opendocument.formula": {
    "source": "iana",
    "extensions": ["odf"]
  },
  "application/vnd.oasis.opendocument.formula-template": {
    "source": "iana",
    "extensions": ["odft"]
  },
  "application/vnd.oasis.opendocument.graphics": {
    "source": "iana",
    "compressible": false,
    "extensions": ["odg"]
  },
  "application/vnd.oasis.opendocument.graphics-template": {
    "source": "iana",
    "extensions": ["otg"]
  },
  "application/vnd.oasis.opendocument.image": {
    "source": "iana",
    "extensions": ["odi"]
  },
  "application/vnd.oasis.opendocument.image-template": {
    "source": "iana",
    "extensions": ["oti"]
  },
  "application/vnd.oasis.opendocument.presentation": {
    "source": "iana",
    "compressible": false,
    "extensions": ["odp"]
  },
  "application/vnd.oasis.opendocument.presentation-template": {
    "source": "iana",
    "extensions": ["otp"]
  },
  "application/vnd.oasis.opendocument.spreadsheet": {
    "source": "iana",
    "compressible": false,
    "extensions": ["ods"]
  },
  "application/vnd.oasis.opendocument.spreadsheet-template": {
    "source": "iana",
    "extensions": ["ots"]
  },
  "application/vnd.oasis.opendocument.text": {
    "source": "iana",
    "compressible": false,
    "extensions": ["odt"]
  },
  "application/vnd.oasis.opendocument.text-master": {
    "source": "iana",
    "extensions": ["odm"]
  },
  "application/vnd.oasis.opendocument.text-template": {
    "source": "iana",
    "extensions": ["ott"]
  },
  "application/vnd.oasis.opendocument.text-web": {
    "source": "iana",
    "extensions": ["oth"]
  },
  "application/vnd.obn": {
    "source": "iana"
  },
  "application/vnd.oftn.l10n+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.contentaccessdownload+xml": {
    "source": "iana"
  },
  "application/vnd.oipf.contentaccessstreaming+xml": {
    "source": "iana"
  },
  "application/vnd.oipf.cspg-hexbinary": {
    "source": "iana"
  },
  "application/vnd.oipf.dae.svg+xml": {
    "source": "iana"
  },
  "application/vnd.oipf.dae.xhtml+xml": {
    "source": "iana"
  },
  "application/vnd.oipf.mippvcontrolmessage+xml": {
    "source": "iana"
  },
  "application/vnd.oipf.pae.gem": {
    "source": "iana"
  },
  "application/vnd.oipf.spdiscovery+xml": {
    "source": "iana"
  },
  "application/vnd.oipf.spdlist+xml": {
    "source": "iana"
  },
  "application/vnd.oipf.ueprofile+xml": {
    "source": "iana"
  },
  "application/vnd.oipf.userprofile+xml": {
    "source": "iana"
  },
  "application/vnd.olpc-sugar": {
    "source": "iana",
    "extensions": ["xo"]
  },
  "application/vnd.oma-scws-config": {
    "source": "iana"
  },
  "application/vnd.oma-scws-http-request": {
    "source": "iana"
  },
  "application/vnd.oma-scws-http-response": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.drm-trigger+xml": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.imd+xml": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.ltkm": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.notification+xml": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.provisioningtrigger": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.sgboot": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.sgdd+xml": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.sgdu": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.simple-symbol-container": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.smartcard-trigger+xml": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.sprov+xml": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.stkm": {
    "source": "iana"
  },
  "application/vnd.oma.cab-address-book+xml": {
    "source": "iana"
  },
  "application/vnd.oma.cab-feature-handler+xml": {
    "source": "iana"
  },
  "application/vnd.oma.cab-pcc+xml": {
    "source": "iana"
  },
  "application/vnd.oma.cab-subs-invite+xml": {
    "source": "iana"
  },
  "application/vnd.oma.cab-user-prefs+xml": {
    "source": "iana"
  },
  "application/vnd.oma.dcd": {
    "source": "iana"
  },
  "application/vnd.oma.dcdc": {
    "source": "iana"
  },
  "application/vnd.oma.dd2+xml": {
    "source": "iana",
    "extensions": ["dd2"]
  },
  "application/vnd.oma.drm.risd+xml": {
    "source": "iana"
  },
  "application/vnd.oma.group-usage-list+xml": {
    "source": "iana"
  },
  "application/vnd.oma.pal+xml": {
    "source": "iana"
  },
  "application/vnd.oma.poc.detailed-progress-report+xml": {
    "source": "iana"
  },
  "application/vnd.oma.poc.final-report+xml": {
    "source": "iana"
  },
  "application/vnd.oma.poc.groups+xml": {
    "source": "iana"
  },
  "application/vnd.oma.poc.invocation-descriptor+xml": {
    "source": "iana"
  },
  "application/vnd.oma.poc.optimized-progress-report+xml": {
    "source": "iana"
  },
  "application/vnd.oma.push": {
    "source": "iana"
  },
  "application/vnd.oma.scidm.messages+xml": {
    "source": "iana"
  },
  "application/vnd.oma.xcap-directory+xml": {
    "source": "iana"
  },
  "application/vnd.omads-email+xml": {
    "source": "iana"
  },
  "application/vnd.omads-file+xml": {
    "source": "iana"
  },
  "application/vnd.omads-folder+xml": {
    "source": "iana"
  },
  "application/vnd.omaloc-supl-init": {
    "source": "iana"
  },
  "application/vnd.openblox.game+xml": {
    "source": "iana"
  },
  "application/vnd.openblox.game-binary": {
    "source": "iana"
  },
  "application/vnd.openeye.oeb": {
    "source": "iana"
  },
  "application/vnd.openofficeorg.extension": {
    "source": "apache",
    "extensions": ["oxt"]
  },
  "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.drawing+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml-template": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
    "source": "iana",
    "compressible": false,
    "extensions": ["pptx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slide": {
    "source": "iana",
    "extensions": ["sldx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
    "source": "iana",
    "extensions": ["ppsx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.template": {
    "source": "apache",
    "extensions": ["potx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml-template": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
    "source": "iana",
    "compressible": false,
    "extensions": ["xlsx"]
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
    "source": "apache",
    "extensions": ["xltx"]
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.theme+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.vmldrawing": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml-template": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
    "source": "iana",
    "compressible": false,
    "extensions": ["docx"]
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
    "source": "apache",
    "extensions": ["dotx"]
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-package.core-properties+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-package.relationships+xml": {
    "source": "iana"
  },
  "application/vnd.oracle.resource+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.orange.indata": {
    "source": "iana"
  },
  "application/vnd.osa.netdeploy": {
    "source": "iana"
  },
  "application/vnd.osgeo.mapguide.package": {
    "source": "iana",
    "extensions": ["mgp"]
  },
  "application/vnd.osgi.bundle": {
    "source": "iana"
  },
  "application/vnd.osgi.dp": {
    "source": "iana",
    "extensions": ["dp"]
  },
  "application/vnd.osgi.subsystem": {
    "source": "iana",
    "extensions": ["esa"]
  },
  "application/vnd.otps.ct-kip+xml": {
    "source": "iana"
  },
  "application/vnd.oxli.countgraph": {
    "source": "iana"
  },
  "application/vnd.pagerduty+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.palm": {
    "source": "iana",
    "extensions": ["pdb","pqa","oprc"]
  },
  "application/vnd.panoply": {
    "source": "iana"
  },
  "application/vnd.paos+xml": {
    "source": "iana"
  },
  "application/vnd.paos.xml": {
    "source": "apache"
  },
  "application/vnd.pawaafile": {
    "source": "iana",
    "extensions": ["paw"]
  },
  "application/vnd.pcos": {
    "source": "iana"
  },
  "application/vnd.pg.format": {
    "source": "iana",
    "extensions": ["str"]
  },
  "application/vnd.pg.osasli": {
    "source": "iana",
    "extensions": ["ei6"]
  },
  "application/vnd.piaccess.application-licence": {
    "source": "iana"
  },
  "application/vnd.picsel": {
    "source": "iana",
    "extensions": ["efif"]
  },
  "application/vnd.pmi.widget": {
    "source": "iana",
    "extensions": ["wg"]
  },
  "application/vnd.poc.group-advertisement+xml": {
    "source": "iana"
  },
  "application/vnd.pocketlearn": {
    "source": "iana",
    "extensions": ["plf"]
  },
  "application/vnd.powerbuilder6": {
    "source": "iana",
    "extensions": ["pbd"]
  },
  "application/vnd.powerbuilder6-s": {
    "source": "iana"
  },
  "application/vnd.powerbuilder7": {
    "source": "iana"
  },
  "application/vnd.powerbuilder7-s": {
    "source": "iana"
  },
  "application/vnd.powerbuilder75": {
    "source": "iana"
  },
  "application/vnd.powerbuilder75-s": {
    "source": "iana"
  },
  "application/vnd.preminet": {
    "source": "iana"
  },
  "application/vnd.previewsystems.box": {
    "source": "iana",
    "extensions": ["box"]
  },
  "application/vnd.proteus.magazine": {
    "source": "iana",
    "extensions": ["mgz"]
  },
  "application/vnd.publishare-delta-tree": {
    "source": "iana",
    "extensions": ["qps"]
  },
  "application/vnd.pvi.ptid1": {
    "source": "iana",
    "extensions": ["ptid"]
  },
  "application/vnd.pwg-multiplexed": {
    "source": "iana"
  },
  "application/vnd.pwg-xhtml-print+xml": {
    "source": "iana"
  },
  "application/vnd.qualcomm.brew-app-res": {
    "source": "iana"
  },
  "application/vnd.quark.quarkxpress": {
    "source": "iana",
    "extensions": ["qxd","qxt","qwd","qwt","qxl","qxb"]
  },
  "application/vnd.quobject-quoxdocument": {
    "source": "iana"
  },
  "application/vnd.radisys.moml+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-audit+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-audit-conf+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-audit-conn+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-audit-dialog+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-audit-stream+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-conf+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-dialog+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-dialog-base+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-dialog-fax-detect+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-dialog-group+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-dialog-speech+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-dialog-transform+xml": {
    "source": "iana"
  },
  "application/vnd.rainstor.data": {
    "source": "iana"
  },
  "application/vnd.rapid": {
    "source": "iana"
  },
  "application/vnd.realvnc.bed": {
    "source": "iana",
    "extensions": ["bed"]
  },
  "application/vnd.recordare.musicxml": {
    "source": "iana",
    "extensions": ["mxl"]
  },
  "application/vnd.recordare.musicxml+xml": {
    "source": "iana",
    "extensions": ["musicxml"]
  },
  "application/vnd.renlearn.rlprint": {
    "source": "iana"
  },
  "application/vnd.rig.cryptonote": {
    "source": "iana",
    "extensions": ["cryptonote"]
  },
  "application/vnd.rim.cod": {
    "source": "apache",
    "extensions": ["cod"]
  },
  "application/vnd.rn-realmedia": {
    "source": "apache",
    "extensions": ["rm"]
  },
  "application/vnd.rn-realmedia-vbr": {
    "source": "apache",
    "extensions": ["rmvb"]
  },
  "application/vnd.route66.link66+xml": {
    "source": "iana",
    "extensions": ["link66"]
  },
  "application/vnd.rs-274x": {
    "source": "iana"
  },
  "application/vnd.ruckus.download": {
    "source": "iana"
  },
  "application/vnd.s3sms": {
    "source": "iana"
  },
  "application/vnd.sailingtracker.track": {
    "source": "iana",
    "extensions": ["st"]
  },
  "application/vnd.sbm.cid": {
    "source": "iana"
  },
  "application/vnd.sbm.mid2": {
    "source": "iana"
  },
  "application/vnd.scribus": {
    "source": "iana"
  },
  "application/vnd.sealed.3df": {
    "source": "iana"
  },
  "application/vnd.sealed.csf": {
    "source": "iana"
  },
  "application/vnd.sealed.doc": {
    "source": "iana"
  },
  "application/vnd.sealed.eml": {
    "source": "iana"
  },
  "application/vnd.sealed.mht": {
    "source": "iana"
  },
  "application/vnd.sealed.net": {
    "source": "iana"
  },
  "application/vnd.sealed.ppt": {
    "source": "iana"
  },
  "application/vnd.sealed.tiff": {
    "source": "iana"
  },
  "application/vnd.sealed.xls": {
    "source": "iana"
  },
  "application/vnd.sealedmedia.softseal.html": {
    "source": "iana"
  },
  "application/vnd.sealedmedia.softseal.pdf": {
    "source": "iana"
  },
  "application/vnd.seemail": {
    "source": "iana",
    "extensions": ["see"]
  },
  "application/vnd.sema": {
    "source": "iana",
    "extensions": ["sema"]
  },
  "application/vnd.semd": {
    "source": "iana",
    "extensions": ["semd"]
  },
  "application/vnd.semf": {
    "source": "iana",
    "extensions": ["semf"]
  },
  "application/vnd.shana.informed.formdata": {
    "source": "iana",
    "extensions": ["ifm"]
  },
  "application/vnd.shana.informed.formtemplate": {
    "source": "iana",
    "extensions": ["itp"]
  },
  "application/vnd.shana.informed.interchange": {
    "source": "iana",
    "extensions": ["iif"]
  },
  "application/vnd.shana.informed.package": {
    "source": "iana",
    "extensions": ["ipk"]
  },
  "application/vnd.simtech-mindmapper": {
    "source": "iana",
    "extensions": ["twd","twds"]
  },
  "application/vnd.siren+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.smaf": {
    "source": "iana",
    "extensions": ["mmf"]
  },
  "application/vnd.smart.notebook": {
    "source": "iana"
  },
  "application/vnd.smart.teacher": {
    "source": "iana",
    "extensions": ["teacher"]
  },
  "application/vnd.software602.filler.form+xml": {
    "source": "iana"
  },
  "application/vnd.software602.filler.form-xml-zip": {
    "source": "iana"
  },
  "application/vnd.solent.sdkm+xml": {
    "source": "iana",
    "extensions": ["sdkm","sdkd"]
  },
  "application/vnd.spotfire.dxp": {
    "source": "iana",
    "extensions": ["dxp"]
  },
  "application/vnd.spotfire.sfs": {
    "source": "iana",
    "extensions": ["sfs"]
  },
  "application/vnd.sss-cod": {
    "source": "iana"
  },
  "application/vnd.sss-dtf": {
    "source": "iana"
  },
  "application/vnd.sss-ntf": {
    "source": "iana"
  },
  "application/vnd.stardivision.calc": {
    "source": "apache",
    "extensions": ["sdc"]
  },
  "application/vnd.stardivision.draw": {
    "source": "apache",
    "extensions": ["sda"]
  },
  "application/vnd.stardivision.impress": {
    "source": "apache",
    "extensions": ["sdd"]
  },
  "application/vnd.stardivision.math": {
    "source": "apache",
    "extensions": ["smf"]
  },
  "application/vnd.stardivision.writer": {
    "source": "apache",
    "extensions": ["sdw","vor"]
  },
  "application/vnd.stardivision.writer-global": {
    "source": "apache",
    "extensions": ["sgl"]
  },
  "application/vnd.stepmania.package": {
    "source": "iana",
    "extensions": ["smzip"]
  },
  "application/vnd.stepmania.stepchart": {
    "source": "iana",
    "extensions": ["sm"]
  },
  "application/vnd.street-stream": {
    "source": "iana"
  },
  "application/vnd.sun.wadl+xml": {
    "source": "iana"
  },
  "application/vnd.sun.xml.calc": {
    "source": "apache",
    "extensions": ["sxc"]
  },
  "application/vnd.sun.xml.calc.template": {
    "source": "apache",
    "extensions": ["stc"]
  },
  "application/vnd.sun.xml.draw": {
    "source": "apache",
    "extensions": ["sxd"]
  },
  "application/vnd.sun.xml.draw.template": {
    "source": "apache",
    "extensions": ["std"]
  },
  "application/vnd.sun.xml.impress": {
    "source": "apache",
    "extensions": ["sxi"]
  },
  "application/vnd.sun.xml.impress.template": {
    "source": "apache",
    "extensions": ["sti"]
  },
  "application/vnd.sun.xml.math": {
    "source": "apache",
    "extensions": ["sxm"]
  },
  "application/vnd.sun.xml.writer": {
    "source": "apache",
    "extensions": ["sxw"]
  },
  "application/vnd.sun.xml.writer.global": {
    "source": "apache",
    "extensions": ["sxg"]
  },
  "application/vnd.sun.xml.writer.template": {
    "source": "apache",
    "extensions": ["stw"]
  },
  "application/vnd.sus-calendar": {
    "source": "iana",
    "extensions": ["sus","susp"]
  },
  "application/vnd.svd": {
    "source": "iana",
    "extensions": ["svd"]
  },
  "application/vnd.swiftview-ics": {
    "source": "iana"
  },
  "application/vnd.symbian.install": {
    "source": "apache",
    "extensions": ["sis","sisx"]
  },
  "application/vnd.syncml+xml": {
    "source": "iana",
    "extensions": ["xsm"]
  },
  "application/vnd.syncml.dm+wbxml": {
    "source": "iana",
    "extensions": ["bdm"]
  },
  "application/vnd.syncml.dm+xml": {
    "source": "iana",
    "extensions": ["xdm"]
  },
  "application/vnd.syncml.dm.notification": {
    "source": "iana"
  },
  "application/vnd.syncml.dmddf+wbxml": {
    "source": "iana"
  },
  "application/vnd.syncml.dmddf+xml": {
    "source": "iana"
  },
  "application/vnd.syncml.dmtnds+wbxml": {
    "source": "iana"
  },
  "application/vnd.syncml.dmtnds+xml": {
    "source": "iana"
  },
  "application/vnd.syncml.ds.notification": {
    "source": "iana"
  },
  "application/vnd.tao.intent-module-archive": {
    "source": "iana",
    "extensions": ["tao"]
  },
  "application/vnd.tcpdump.pcap": {
    "source": "iana",
    "extensions": ["pcap","cap","dmp"]
  },
  "application/vnd.tmd.mediaflex.api+xml": {
    "source": "iana"
  },
  "application/vnd.tml": {
    "source": "iana"
  },
  "application/vnd.tmobile-livetv": {
    "source": "iana",
    "extensions": ["tmo"]
  },
  "application/vnd.trid.tpt": {
    "source": "iana",
    "extensions": ["tpt"]
  },
  "application/vnd.triscape.mxs": {
    "source": "iana",
    "extensions": ["mxs"]
  },
  "application/vnd.trueapp": {
    "source": "iana",
    "extensions": ["tra"]
  },
  "application/vnd.truedoc": {
    "source": "iana"
  },
  "application/vnd.ubisoft.webplayer": {
    "source": "iana"
  },
  "application/vnd.ufdl": {
    "source": "iana",
    "extensions": ["ufd","ufdl"]
  },
  "application/vnd.uiq.theme": {
    "source": "iana",
    "extensions": ["utz"]
  },
  "application/vnd.umajin": {
    "source": "iana",
    "extensions": ["umj"]
  },
  "application/vnd.unity": {
    "source": "iana",
    "extensions": ["unityweb"]
  },
  "application/vnd.uoml+xml": {
    "source": "iana",
    "extensions": ["uoml"]
  },
  "application/vnd.uplanet.alert": {
    "source": "iana"
  },
  "application/vnd.uplanet.alert-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.bearer-choice": {
    "source": "iana"
  },
  "application/vnd.uplanet.bearer-choice-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.cacheop": {
    "source": "iana"
  },
  "application/vnd.uplanet.cacheop-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.channel": {
    "source": "iana"
  },
  "application/vnd.uplanet.channel-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.list": {
    "source": "iana"
  },
  "application/vnd.uplanet.list-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.listcmd": {
    "source": "iana"
  },
  "application/vnd.uplanet.listcmd-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.signal": {
    "source": "iana"
  },
  "application/vnd.uri-map": {
    "source": "iana"
  },
  "application/vnd.valve.source.material": {
    "source": "iana"
  },
  "application/vnd.vcx": {
    "source": "iana",
    "extensions": ["vcx"]
  },
  "application/vnd.vd-study": {
    "source": "iana"
  },
  "application/vnd.vectorworks": {
    "source": "iana"
  },
  "application/vnd.verimatrix.vcas": {
    "source": "iana"
  },
  "application/vnd.vidsoft.vidconference": {
    "source": "iana"
  },
  "application/vnd.visio": {
    "source": "iana",
    "extensions": ["vsd","vst","vss","vsw"]
  },
  "application/vnd.visionary": {
    "source": "iana",
    "extensions": ["vis"]
  },
  "application/vnd.vividence.scriptfile": {
    "source": "iana"
  },
  "application/vnd.vsf": {
    "source": "iana",
    "extensions": ["vsf"]
  },
  "application/vnd.wap.sic": {
    "source": "iana"
  },
  "application/vnd.wap.slc": {
    "source": "iana"
  },
  "application/vnd.wap.wbxml": {
    "source": "iana",
    "extensions": ["wbxml"]
  },
  "application/vnd.wap.wmlc": {
    "source": "iana",
    "extensions": ["wmlc"]
  },
  "application/vnd.wap.wmlscriptc": {
    "source": "iana",
    "extensions": ["wmlsc"]
  },
  "application/vnd.webturbo": {
    "source": "iana",
    "extensions": ["wtb"]
  },
  "application/vnd.wfa.p2p": {
    "source": "iana"
  },
  "application/vnd.wfa.wsc": {
    "source": "iana"
  },
  "application/vnd.windows.devicepairing": {
    "source": "iana"
  },
  "application/vnd.wmc": {
    "source": "iana"
  },
  "application/vnd.wmf.bootstrap": {
    "source": "iana"
  },
  "application/vnd.wolfram.mathematica": {
    "source": "iana"
  },
  "application/vnd.wolfram.mathematica.package": {
    "source": "iana"
  },
  "application/vnd.wolfram.player": {
    "source": "iana",
    "extensions": ["nbp"]
  },
  "application/vnd.wordperfect": {
    "source": "iana",
    "extensions": ["wpd"]
  },
  "application/vnd.wqd": {
    "source": "iana",
    "extensions": ["wqd"]
  },
  "application/vnd.wrq-hp3000-labelled": {
    "source": "iana"
  },
  "application/vnd.wt.stf": {
    "source": "iana",
    "extensions": ["stf"]
  },
  "application/vnd.wv.csp+wbxml": {
    "source": "iana"
  },
  "application/vnd.wv.csp+xml": {
    "source": "iana"
  },
  "application/vnd.wv.ssp+xml": {
    "source": "iana"
  },
  "application/vnd.xacml+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.xara": {
    "source": "iana",
    "extensions": ["xar"]
  },
  "application/vnd.xfdl": {
    "source": "iana",
    "extensions": ["xfdl"]
  },
  "application/vnd.xfdl.webform": {
    "source": "iana"
  },
  "application/vnd.xmi+xml": {
    "source": "iana"
  },
  "application/vnd.xmpie.cpkg": {
    "source": "iana"
  },
  "application/vnd.xmpie.dpkg": {
    "source": "iana"
  },
  "application/vnd.xmpie.plan": {
    "source": "iana"
  },
  "application/vnd.xmpie.ppkg": {
    "source": "iana"
  },
  "application/vnd.xmpie.xlim": {
    "source": "iana"
  },
  "application/vnd.yamaha.hv-dic": {
    "source": "iana",
    "extensions": ["hvd"]
  },
  "application/vnd.yamaha.hv-script": {
    "source": "iana",
    "extensions": ["hvs"]
  },
  "application/vnd.yamaha.hv-voice": {
    "source": "iana",
    "extensions": ["hvp"]
  },
  "application/vnd.yamaha.openscoreformat": {
    "source": "iana",
    "extensions": ["osf"]
  },
  "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
    "source": "iana",
    "extensions": ["osfpvg"]
  },
  "application/vnd.yamaha.remote-setup": {
    "source": "iana"
  },
  "application/vnd.yamaha.smaf-audio": {
    "source": "iana",
    "extensions": ["saf"]
  },
  "application/vnd.yamaha.smaf-phrase": {
    "source": "iana",
    "extensions": ["spf"]
  },
  "application/vnd.yamaha.through-ngn": {
    "source": "iana"
  },
  "application/vnd.yamaha.tunnel-udpencap": {
    "source": "iana"
  },
  "application/vnd.yaoweme": {
    "source": "iana"
  },
  "application/vnd.yellowriver-custom-menu": {
    "source": "iana",
    "extensions": ["cmp"]
  },
  "application/vnd.zul": {
    "source": "iana",
    "extensions": ["zir","zirz"]
  },
  "application/vnd.zzazz.deck+xml": {
    "source": "iana",
    "extensions": ["zaz"]
  },
  "application/voicexml+xml": {
    "source": "iana",
    "extensions": ["vxml"]
  },
  "application/vq-rtcpxr": {
    "source": "iana"
  },
  "application/watcherinfo+xml": {
    "source": "iana"
  },
  "application/whoispp-query": {
    "source": "iana"
  },
  "application/whoispp-response": {
    "source": "iana"
  },
  "application/widget": {
    "source": "iana",
    "extensions": ["wgt"]
  },
  "application/winhlp": {
    "source": "apache",
    "extensions": ["hlp"]
  },
  "application/wita": {
    "source": "iana"
  },
  "application/wordperfect5.1": {
    "source": "iana"
  },
  "application/wsdl+xml": {
    "source": "iana",
    "extensions": ["wsdl"]
  },
  "application/wspolicy+xml": {
    "source": "iana",
    "extensions": ["wspolicy"]
  },
  "application/x-7z-compressed": {
    "source": "apache",
    "compressible": false,
    "extensions": ["7z"]
  },
  "application/x-abiword": {
    "source": "apache",
    "extensions": ["abw"]
  },
  "application/x-ace-compressed": {
    "source": "apache",
    "extensions": ["ace"]
  },
  "application/x-amf": {
    "source": "apache"
  },
  "application/x-apple-diskimage": {
    "source": "apache",
    "extensions": ["dmg"]
  },
  "application/x-authorware-bin": {
    "source": "apache",
    "extensions": ["aab","x32","u32","vox"]
  },
  "application/x-authorware-map": {
    "source": "apache",
    "extensions": ["aam"]
  },
  "application/x-authorware-seg": {
    "source": "apache",
    "extensions": ["aas"]
  },
  "application/x-bcpio": {
    "source": "apache",
    "extensions": ["bcpio"]
  },
  "application/x-bdoc": {
    "compressible": false,
    "extensions": ["bdoc"]
  },
  "application/x-bittorrent": {
    "source": "apache",
    "extensions": ["torrent"]
  },
  "application/x-blorb": {
    "source": "apache",
    "extensions": ["blb","blorb"]
  },
  "application/x-bzip": {
    "source": "apache",
    "compressible": false,
    "extensions": ["bz"]
  },
  "application/x-bzip2": {
    "source": "apache",
    "compressible": false,
    "extensions": ["bz2","boz"]
  },
  "application/x-cbr": {
    "source": "apache",
    "extensions": ["cbr","cba","cbt","cbz","cb7"]
  },
  "application/x-cdlink": {
    "source": "apache",
    "extensions": ["vcd"]
  },
  "application/x-cfs-compressed": {
    "source": "apache",
    "extensions": ["cfs"]
  },
  "application/x-chat": {
    "source": "apache",
    "extensions": ["chat"]
  },
  "application/x-chess-pgn": {
    "source": "apache",
    "extensions": ["pgn"]
  },
  "application/x-chrome-extension": {
    "extensions": ["crx"]
  },
  "application/x-cocoa": {
    "source": "nginx",
    "extensions": ["cco"]
  },
  "application/x-compress": {
    "source": "apache"
  },
  "application/x-conference": {
    "source": "apache",
    "extensions": ["nsc"]
  },
  "application/x-cpio": {
    "source": "apache",
    "extensions": ["cpio"]
  },
  "application/x-csh": {
    "source": "apache",
    "extensions": ["csh"]
  },
  "application/x-deb": {
    "compressible": false
  },
  "application/x-debian-package": {
    "source": "apache",
    "extensions": ["deb","udeb"]
  },
  "application/x-dgc-compressed": {
    "source": "apache",
    "extensions": ["dgc"]
  },
  "application/x-director": {
    "source": "apache",
    "extensions": ["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]
  },
  "application/x-doom": {
    "source": "apache",
    "extensions": ["wad"]
  },
  "application/x-dtbncx+xml": {
    "source": "apache",
    "extensions": ["ncx"]
  },
  "application/x-dtbook+xml": {
    "source": "apache",
    "extensions": ["dtb"]
  },
  "application/x-dtbresource+xml": {
    "source": "apache",
    "extensions": ["res"]
  },
  "application/x-dvi": {
    "source": "apache",
    "compressible": false,
    "extensions": ["dvi"]
  },
  "application/x-envoy": {
    "source": "apache",
    "extensions": ["evy"]
  },
  "application/x-eva": {
    "source": "apache",
    "extensions": ["eva"]
  },
  "application/x-font-bdf": {
    "source": "apache",
    "extensions": ["bdf"]
  },
  "application/x-font-dos": {
    "source": "apache"
  },
  "application/x-font-framemaker": {
    "source": "apache"
  },
  "application/x-font-ghostscript": {
    "source": "apache",
    "extensions": ["gsf"]
  },
  "application/x-font-libgrx": {
    "source": "apache"
  },
  "application/x-font-linux-psf": {
    "source": "apache",
    "extensions": ["psf"]
  },
  "application/x-font-otf": {
    "source": "apache",
    "compressible": true,
    "extensions": ["otf"]
  },
  "application/x-font-pcf": {
    "source": "apache",
    "extensions": ["pcf"]
  },
  "application/x-font-snf": {
    "source": "apache",
    "extensions": ["snf"]
  },
  "application/x-font-speedo": {
    "source": "apache"
  },
  "application/x-font-sunos-news": {
    "source": "apache"
  },
  "application/x-font-ttf": {
    "source": "apache",
    "compressible": true,
    "extensions": ["ttf","ttc"]
  },
  "application/x-font-type1": {
    "source": "apache",
    "extensions": ["pfa","pfb","pfm","afm"]
  },
  "application/x-font-vfont": {
    "source": "apache"
  },
  "application/x-freearc": {
    "source": "apache",
    "extensions": ["arc"]
  },
  "application/x-futuresplash": {
    "source": "apache",
    "extensions": ["spl"]
  },
  "application/x-gca-compressed": {
    "source": "apache",
    "extensions": ["gca"]
  },
  "application/x-glulx": {
    "source": "apache",
    "extensions": ["ulx"]
  },
  "application/x-gnumeric": {
    "source": "apache",
    "extensions": ["gnumeric"]
  },
  "application/x-gramps-xml": {
    "source": "apache",
    "extensions": ["gramps"]
  },
  "application/x-gtar": {
    "source": "apache",
    "extensions": ["gtar"]
  },
  "application/x-gzip": {
    "source": "apache"
  },
  "application/x-hdf": {
    "source": "apache",
    "extensions": ["hdf"]
  },
  "application/x-httpd-php": {
    "compressible": true,
    "extensions": ["php"]
  },
  "application/x-install-instructions": {
    "source": "apache",
    "extensions": ["install"]
  },
  "application/x-iso9660-image": {
    "source": "apache",
    "extensions": ["iso"]
  },
  "application/x-java-archive-diff": {
    "source": "nginx",
    "extensions": ["jardiff"]
  },
  "application/x-java-jnlp-file": {
    "source": "apache",
    "compressible": false,
    "extensions": ["jnlp"]
  },
  "application/x-javascript": {
    "compressible": true
  },
  "application/x-latex": {
    "source": "apache",
    "compressible": false,
    "extensions": ["latex"]
  },
  "application/x-lua-bytecode": {
    "extensions": ["luac"]
  },
  "application/x-lzh-compressed": {
    "source": "apache",
    "extensions": ["lzh","lha"]
  },
  "application/x-makeself": {
    "source": "nginx",
    "extensions": ["run"]
  },
  "application/x-mie": {
    "source": "apache",
    "extensions": ["mie"]
  },
  "application/x-mobipocket-ebook": {
    "source": "apache",
    "extensions": ["prc","mobi"]
  },
  "application/x-mpegurl": {
    "compressible": false
  },
  "application/x-ms-application": {
    "source": "apache",
    "extensions": ["application"]
  },
  "application/x-ms-shortcut": {
    "source": "apache",
    "extensions": ["lnk"]
  },
  "application/x-ms-wmd": {
    "source": "apache",
    "extensions": ["wmd"]
  },
  "application/x-ms-wmz": {
    "source": "apache",
    "extensions": ["wmz"]
  },
  "application/x-ms-xbap": {
    "source": "apache",
    "extensions": ["xbap"]
  },
  "application/x-msaccess": {
    "source": "apache",
    "extensions": ["mdb"]
  },
  "application/x-msbinder": {
    "source": "apache",
    "extensions": ["obd"]
  },
  "application/x-mscardfile": {
    "source": "apache",
    "extensions": ["crd"]
  },
  "application/x-msclip": {
    "source": "apache",
    "extensions": ["clp"]
  },
  "application/x-msdos-program": {
    "extensions": ["exe"]
  },
  "application/x-msdownload": {
    "source": "apache",
    "extensions": ["exe","dll","com","bat","msi"]
  },
  "application/x-msmediaview": {
    "source": "apache",
    "extensions": ["mvb","m13","m14"]
  },
  "application/x-msmetafile": {
    "source": "apache",
    "extensions": ["wmf","wmz","emf","emz"]
  },
  "application/x-msmoney": {
    "source": "apache",
    "extensions": ["mny"]
  },
  "application/x-mspublisher": {
    "source": "apache",
    "extensions": ["pub"]
  },
  "application/x-msschedule": {
    "source": "apache",
    "extensions": ["scd"]
  },
  "application/x-msterminal": {
    "source": "apache",
    "extensions": ["trm"]
  },
  "application/x-mswrite": {
    "source": "apache",
    "extensions": ["wri"]
  },
  "application/x-netcdf": {
    "source": "apache",
    "extensions": ["nc","cdf"]
  },
  "application/x-ns-proxy-autoconfig": {
    "compressible": true,
    "extensions": ["pac"]
  },
  "application/x-nzb": {
    "source": "apache",
    "extensions": ["nzb"]
  },
  "application/x-perl": {
    "source": "nginx",
    "extensions": ["pl","pm"]
  },
  "application/x-pilot": {
    "source": "nginx",
    "extensions": ["prc","pdb"]
  },
  "application/x-pkcs12": {
    "source": "apache",
    "compressible": false,
    "extensions": ["p12","pfx"]
  },
  "application/x-pkcs7-certificates": {
    "source": "apache",
    "extensions": ["p7b","spc"]
  },
  "application/x-pkcs7-certreqresp": {
    "source": "apache",
    "extensions": ["p7r"]
  },
  "application/x-rar-compressed": {
    "source": "apache",
    "compressible": false,
    "extensions": ["rar"]
  },
  "application/x-redhat-package-manager": {
    "source": "nginx",
    "extensions": ["rpm"]
  },
  "application/x-research-info-systems": {
    "source": "apache",
    "extensions": ["ris"]
  },
  "application/x-sea": {
    "source": "nginx",
    "extensions": ["sea"]
  },
  "application/x-sh": {
    "source": "apache",
    "compressible": true,
    "extensions": ["sh"]
  },
  "application/x-shar": {
    "source": "apache",
    "extensions": ["shar"]
  },
  "application/x-shockwave-flash": {
    "source": "apache",
    "compressible": false,
    "extensions": ["swf"]
  },
  "application/x-silverlight-app": {
    "source": "apache",
    "extensions": ["xap"]
  },
  "application/x-sql": {
    "source": "apache",
    "extensions": ["sql"]
  },
  "application/x-stuffit": {
    "source": "apache",
    "compressible": false,
    "extensions": ["sit"]
  },
  "application/x-stuffitx": {
    "source": "apache",
    "extensions": ["sitx"]
  },
  "application/x-subrip": {
    "source": "apache",
    "extensions": ["srt"]
  },
  "application/x-sv4cpio": {
    "source": "apache",
    "extensions": ["sv4cpio"]
  },
  "application/x-sv4crc": {
    "source": "apache",
    "extensions": ["sv4crc"]
  },
  "application/x-t3vm-image": {
    "source": "apache",
    "extensions": ["t3"]
  },
  "application/x-tads": {
    "source": "apache",
    "extensions": ["gam"]
  },
  "application/x-tar": {
    "source": "apache",
    "compressible": true,
    "extensions": ["tar"]
  },
  "application/x-tcl": {
    "source": "apache",
    "extensions": ["tcl","tk"]
  },
  "application/x-tex": {
    "source": "apache",
    "extensions": ["tex"]
  },
  "application/x-tex-tfm": {
    "source": "apache",
    "extensions": ["tfm"]
  },
  "application/x-texinfo": {
    "source": "apache",
    "extensions": ["texinfo","texi"]
  },
  "application/x-tgif": {
    "source": "apache",
    "extensions": ["obj"]
  },
  "application/x-ustar": {
    "source": "apache",
    "extensions": ["ustar"]
  },
  "application/x-wais-source": {
    "source": "apache",
    "extensions": ["src"]
  },
  "application/x-web-app-manifest+json": {
    "compressible": true,
    "extensions": ["webapp"]
  },
  "application/x-www-form-urlencoded": {
    "source": "iana",
    "compressible": true
  },
  "application/x-x509-ca-cert": {
    "source": "apache",
    "extensions": ["der","crt","pem"]
  },
  "application/x-xfig": {
    "source": "apache",
    "extensions": ["fig"]
  },
  "application/x-xliff+xml": {
    "source": "apache",
    "extensions": ["xlf"]
  },
  "application/x-xpinstall": {
    "source": "apache",
    "compressible": false,
    "extensions": ["xpi"]
  },
  "application/x-xz": {
    "source": "apache",
    "extensions": ["xz"]
  },
  "application/x-zmachine": {
    "source": "apache",
    "extensions": ["z1","z2","z3","z4","z5","z6","z7","z8"]
  },
  "application/x400-bp": {
    "source": "iana"
  },
  "application/xacml+xml": {
    "source": "iana"
  },
  "application/xaml+xml": {
    "source": "apache",
    "extensions": ["xaml"]
  },
  "application/xcap-att+xml": {
    "source": "iana"
  },
  "application/xcap-caps+xml": {
    "source": "iana"
  },
  "application/xcap-diff+xml": {
    "source": "iana",
    "extensions": ["xdf"]
  },
  "application/xcap-el+xml": {
    "source": "iana"
  },
  "application/xcap-error+xml": {
    "source": "iana"
  },
  "application/xcap-ns+xml": {
    "source": "iana"
  },
  "application/xcon-conference-info+xml": {
    "source": "iana"
  },
  "application/xcon-conference-info-diff+xml": {
    "source": "iana"
  },
  "application/xenc+xml": {
    "source": "iana",
    "extensions": ["xenc"]
  },
  "application/xhtml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xhtml","xht"]
  },
  "application/xhtml-voice+xml": {
    "source": "apache"
  },
  "application/xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xml","xsl","xsd"]
  },
  "application/xml-dtd": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dtd"]
  },
  "application/xml-external-parsed-entity": {
    "source": "iana"
  },
  "application/xml-patch+xml": {
    "source": "iana"
  },
  "application/xmpp+xml": {
    "source": "iana"
  },
  "application/xop+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xop"]
  },
  "application/xproc+xml": {
    "source": "apache",
    "extensions": ["xpl"]
  },
  "application/xslt+xml": {
    "source": "iana",
    "extensions": ["xslt"]
  },
  "application/xspf+xml": {
    "source": "apache",
    "extensions": ["xspf"]
  },
  "application/xv+xml": {
    "source": "iana",
    "extensions": ["mxml","xhvml","xvml","xvm"]
  },
  "application/yang": {
    "source": "iana",
    "extensions": ["yang"]
  },
  "application/yin+xml": {
    "source": "iana",
    "extensions": ["yin"]
  },
  "application/zip": {
    "source": "iana",
    "compressible": false,
    "extensions": ["zip"]
  },
  "application/zlib": {
    "source": "iana"
  },
  "audio/1d-interleaved-parityfec": {
    "source": "iana"
  },
  "audio/32kadpcm": {
    "source": "iana"
  },
  "audio/3gpp": {
    "source": "iana"
  },
  "audio/3gpp2": {
    "source": "iana"
  },
  "audio/ac3": {
    "source": "iana"
  },
  "audio/adpcm": {
    "source": "apache",
    "extensions": ["adp"]
  },
  "audio/amr": {
    "source": "iana"
  },
  "audio/amr-wb": {
    "source": "iana"
  },
  "audio/amr-wb+": {
    "source": "iana"
  },
  "audio/aptx": {
    "source": "iana"
  },
  "audio/asc": {
    "source": "iana"
  },
  "audio/atrac-advanced-lossless": {
    "source": "iana"
  },
  "audio/atrac-x": {
    "source": "iana"
  },
  "audio/atrac3": {
    "source": "iana"
  },
  "audio/basic": {
    "source": "iana",
    "compressible": false,
    "extensions": ["au","snd"]
  },
  "audio/bv16": {
    "source": "iana"
  },
  "audio/bv32": {
    "source": "iana"
  },
  "audio/clearmode": {
    "source": "iana"
  },
  "audio/cn": {
    "source": "iana"
  },
  "audio/dat12": {
    "source": "iana"
  },
  "audio/dls": {
    "source": "iana"
  },
  "audio/dsr-es201108": {
    "source": "iana"
  },
  "audio/dsr-es202050": {
    "source": "iana"
  },
  "audio/dsr-es202211": {
    "source": "iana"
  },
  "audio/dsr-es202212": {
    "source": "iana"
  },
  "audio/dv": {
    "source": "iana"
  },
  "audio/dvi4": {
    "source": "iana"
  },
  "audio/eac3": {
    "source": "iana"
  },
  "audio/encaprtp": {
    "source": "iana"
  },
  "audio/evrc": {
    "source": "iana"
  },
  "audio/evrc-qcp": {
    "source": "iana"
  },
  "audio/evrc0": {
    "source": "iana"
  },
  "audio/evrc1": {
    "source": "iana"
  },
  "audio/evrcb": {
    "source": "iana"
  },
  "audio/evrcb0": {
    "source": "iana"
  },
  "audio/evrcb1": {
    "source": "iana"
  },
  "audio/evrcnw": {
    "source": "iana"
  },
  "audio/evrcnw0": {
    "source": "iana"
  },
  "audio/evrcnw1": {
    "source": "iana"
  },
  "audio/evrcwb": {
    "source": "iana"
  },
  "audio/evrcwb0": {
    "source": "iana"
  },
  "audio/evrcwb1": {
    "source": "iana"
  },
  "audio/evs": {
    "source": "iana"
  },
  "audio/fwdred": {
    "source": "iana"
  },
  "audio/g711-0": {
    "source": "iana"
  },
  "audio/g719": {
    "source": "iana"
  },
  "audio/g722": {
    "source": "iana"
  },
  "audio/g7221": {
    "source": "iana"
  },
  "audio/g723": {
    "source": "iana"
  },
  "audio/g726-16": {
    "source": "iana"
  },
  "audio/g726-24": {
    "source": "iana"
  },
  "audio/g726-32": {
    "source": "iana"
  },
  "audio/g726-40": {
    "source": "iana"
  },
  "audio/g728": {
    "source": "iana"
  },
  "audio/g729": {
    "source": "iana"
  },
  "audio/g7291": {
    "source": "iana"
  },
  "audio/g729d": {
    "source": "iana"
  },
  "audio/g729e": {
    "source": "iana"
  },
  "audio/gsm": {
    "source": "iana"
  },
  "audio/gsm-efr": {
    "source": "iana"
  },
  "audio/gsm-hr-08": {
    "source": "iana"
  },
  "audio/ilbc": {
    "source": "iana"
  },
  "audio/ip-mr_v2.5": {
    "source": "iana"
  },
  "audio/isac": {
    "source": "apache"
  },
  "audio/l16": {
    "source": "iana"
  },
  "audio/l20": {
    "source": "iana"
  },
  "audio/l24": {
    "source": "iana",
    "compressible": false
  },
  "audio/l8": {
    "source": "iana"
  },
  "audio/lpc": {
    "source": "iana"
  },
  "audio/midi": {
    "source": "apache",
    "extensions": ["mid","midi","kar","rmi"]
  },
  "audio/mobile-xmf": {
    "source": "iana"
  },
  "audio/mp4": {
    "source": "iana",
    "compressible": false,
    "extensions": ["mp4a","m4a"]
  },
  "audio/mp4a-latm": {
    "source": "iana"
  },
  "audio/mpa": {
    "source": "iana"
  },
  "audio/mpa-robust": {
    "source": "iana"
  },
  "audio/mpeg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["mpga","mp2","mp2a","mp3","m2a","m3a"]
  },
  "audio/mpeg4-generic": {
    "source": "iana"
  },
  "audio/musepack": {
    "source": "apache"
  },
  "audio/ogg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["oga","ogg","spx"]
  },
  "audio/opus": {
    "source": "iana"
  },
  "audio/parityfec": {
    "source": "iana"
  },
  "audio/pcma": {
    "source": "iana"
  },
  "audio/pcma-wb": {
    "source": "iana"
  },
  "audio/pcmu": {
    "source": "iana"
  },
  "audio/pcmu-wb": {
    "source": "iana"
  },
  "audio/prs.sid": {
    "source": "iana"
  },
  "audio/qcelp": {
    "source": "iana"
  },
  "audio/raptorfec": {
    "source": "iana"
  },
  "audio/red": {
    "source": "iana"
  },
  "audio/rtp-enc-aescm128": {
    "source": "iana"
  },
  "audio/rtp-midi": {
    "source": "iana"
  },
  "audio/rtploopback": {
    "source": "iana"
  },
  "audio/rtx": {
    "source": "iana"
  },
  "audio/s3m": {
    "source": "apache",
    "extensions": ["s3m"]
  },
  "audio/silk": {
    "source": "apache",
    "extensions": ["sil"]
  },
  "audio/smv": {
    "source": "iana"
  },
  "audio/smv-qcp": {
    "source": "iana"
  },
  "audio/smv0": {
    "source": "iana"
  },
  "audio/sp-midi": {
    "source": "iana"
  },
  "audio/speex": {
    "source": "iana"
  },
  "audio/t140c": {
    "source": "iana"
  },
  "audio/t38": {
    "source": "iana"
  },
  "audio/telephone-event": {
    "source": "iana"
  },
  "audio/tone": {
    "source": "iana"
  },
  "audio/uemclip": {
    "source": "iana"
  },
  "audio/ulpfec": {
    "source": "iana"
  },
  "audio/vdvi": {
    "source": "iana"
  },
  "audio/vmr-wb": {
    "source": "iana"
  },
  "audio/vnd.3gpp.iufp": {
    "source": "iana"
  },
  "audio/vnd.4sb": {
    "source": "iana"
  },
  "audio/vnd.audiokoz": {
    "source": "iana"
  },
  "audio/vnd.celp": {
    "source": "iana"
  },
  "audio/vnd.cisco.nse": {
    "source": "iana"
  },
  "audio/vnd.cmles.radio-events": {
    "source": "iana"
  },
  "audio/vnd.cns.anp1": {
    "source": "iana"
  },
  "audio/vnd.cns.inf1": {
    "source": "iana"
  },
  "audio/vnd.dece.audio": {
    "source": "iana",
    "extensions": ["uva","uvva"]
  },
  "audio/vnd.digital-winds": {
    "source": "iana",
    "extensions": ["eol"]
  },
  "audio/vnd.dlna.adts": {
    "source": "iana"
  },
  "audio/vnd.dolby.heaac.1": {
    "source": "iana"
  },
  "audio/vnd.dolby.heaac.2": {
    "source": "iana"
  },
  "audio/vnd.dolby.mlp": {
    "source": "iana"
  },
  "audio/vnd.dolby.mps": {
    "source": "iana"
  },
  "audio/vnd.dolby.pl2": {
    "source": "iana"
  },
  "audio/vnd.dolby.pl2x": {
    "source": "iana"
  },
  "audio/vnd.dolby.pl2z": {
    "source": "iana"
  },
  "audio/vnd.dolby.pulse.1": {
    "source": "iana"
  },
  "audio/vnd.dra": {
    "source": "iana",
    "extensions": ["dra"]
  },
  "audio/vnd.dts": {
    "source": "iana",
    "extensions": ["dts"]
  },
  "audio/vnd.dts.hd": {
    "source": "iana",
    "extensions": ["dtshd"]
  },
  "audio/vnd.dvb.file": {
    "source": "iana"
  },
  "audio/vnd.everad.plj": {
    "source": "iana"
  },
  "audio/vnd.hns.audio": {
    "source": "iana"
  },
  "audio/vnd.lucent.voice": {
    "source": "iana",
    "extensions": ["lvp"]
  },
  "audio/vnd.ms-playready.media.pya": {
    "source": "iana",
    "extensions": ["pya"]
  },
  "audio/vnd.nokia.mobile-xmf": {
    "source": "iana"
  },
  "audio/vnd.nortel.vbk": {
    "source": "iana"
  },
  "audio/vnd.nuera.ecelp4800": {
    "source": "iana",
    "extensions": ["ecelp4800"]
  },
  "audio/vnd.nuera.ecelp7470": {
    "source": "iana",
    "extensions": ["ecelp7470"]
  },
  "audio/vnd.nuera.ecelp9600": {
    "source": "iana",
    "extensions": ["ecelp9600"]
  },
  "audio/vnd.octel.sbc": {
    "source": "iana"
  },
  "audio/vnd.qcelp": {
    "source": "iana"
  },
  "audio/vnd.rhetorex.32kadpcm": {
    "source": "iana"
  },
  "audio/vnd.rip": {
    "source": "iana",
    "extensions": ["rip"]
  },
  "audio/vnd.rn-realaudio": {
    "compressible": false
  },
  "audio/vnd.sealedmedia.softseal.mpeg": {
    "source": "iana"
  },
  "audio/vnd.vmx.cvsd": {
    "source": "iana"
  },
  "audio/vnd.wave": {
    "compressible": false
  },
  "audio/vorbis": {
    "source": "iana",
    "compressible": false
  },
  "audio/vorbis-config": {
    "source": "iana"
  },
  "audio/wav": {
    "compressible": false,
    "extensions": ["wav"]
  },
  "audio/wave": {
    "compressible": false,
    "extensions": ["wav"]
  },
  "audio/webm": {
    "source": "apache",
    "compressible": false,
    "extensions": ["weba"]
  },
  "audio/x-aac": {
    "source": "apache",
    "compressible": false,
    "extensions": ["aac"]
  },
  "audio/x-aiff": {
    "source": "apache",
    "extensions": ["aif","aiff","aifc"]
  },
  "audio/x-caf": {
    "source": "apache",
    "compressible": false,
    "extensions": ["caf"]
  },
  "audio/x-flac": {
    "source": "apache",
    "extensions": ["flac"]
  },
  "audio/x-m4a": {
    "source": "nginx",
    "extensions": ["m4a"]
  },
  "audio/x-matroska": {
    "source": "apache",
    "extensions": ["mka"]
  },
  "audio/x-mpegurl": {
    "source": "apache",
    "extensions": ["m3u"]
  },
  "audio/x-ms-wax": {
    "source": "apache",
    "extensions": ["wax"]
  },
  "audio/x-ms-wma": {
    "source": "apache",
    "extensions": ["wma"]
  },
  "audio/x-pn-realaudio": {
    "source": "apache",
    "extensions": ["ram","ra"]
  },
  "audio/x-pn-realaudio-plugin": {
    "source": "apache",
    "extensions": ["rmp"]
  },
  "audio/x-realaudio": {
    "source": "nginx",
    "extensions": ["ra"]
  },
  "audio/x-tta": {
    "source": "apache"
  },
  "audio/x-wav": {
    "source": "apache",
    "extensions": ["wav"]
  },
  "audio/xm": {
    "source": "apache",
    "extensions": ["xm"]
  },
  "chemical/x-cdx": {
    "source": "apache",
    "extensions": ["cdx"]
  },
  "chemical/x-cif": {
    "source": "apache",
    "extensions": ["cif"]
  },
  "chemical/x-cmdf": {
    "source": "apache",
    "extensions": ["cmdf"]
  },
  "chemical/x-cml": {
    "source": "apache",
    "extensions": ["cml"]
  },
  "chemical/x-csml": {
    "source": "apache",
    "extensions": ["csml"]
  },
  "chemical/x-pdb": {
    "source": "apache"
  },
  "chemical/x-xyz": {
    "source": "apache",
    "extensions": ["xyz"]
  },
  "font/opentype": {
    "compressible": true,
    "extensions": ["otf"]
  },
  "image/bmp": {
    "source": "apache",
    "compressible": true,
    "extensions": ["bmp"]
  },
  "image/cgm": {
    "source": "iana",
    "extensions": ["cgm"]
  },
  "image/fits": {
    "source": "iana"
  },
  "image/g3fax": {
    "source": "iana",
    "extensions": ["g3"]
  },
  "image/gif": {
    "source": "iana",
    "compressible": false,
    "extensions": ["gif"]
  },
  "image/ief": {
    "source": "iana",
    "extensions": ["ief"]
  },
  "image/jp2": {
    "source": "iana"
  },
  "image/jpeg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["jpeg","jpg","jpe"]
  },
  "image/jpm": {
    "source": "iana"
  },
  "image/jpx": {
    "source": "iana"
  },
  "image/ktx": {
    "source": "iana",
    "extensions": ["ktx"]
  },
  "image/naplps": {
    "source": "iana"
  },
  "image/pjpeg": {
    "compressible": false
  },
  "image/png": {
    "source": "iana",
    "compressible": false,
    "extensions": ["png"]
  },
  "image/prs.btif": {
    "source": "iana",
    "extensions": ["btif"]
  },
  "image/prs.pti": {
    "source": "iana"
  },
  "image/pwg-raster": {
    "source": "iana"
  },
  "image/sgi": {
    "source": "apache",
    "extensions": ["sgi"]
  },
  "image/svg+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["svg","svgz"]
  },
  "image/t38": {
    "source": "iana"
  },
  "image/tiff": {
    "source": "iana",
    "compressible": false,
    "extensions": ["tiff","tif"]
  },
  "image/tiff-fx": {
    "source": "iana"
  },
  "image/vnd.adobe.photoshop": {
    "source": "iana",
    "compressible": true,
    "extensions": ["psd"]
  },
  "image/vnd.airzip.accelerator.azv": {
    "source": "iana"
  },
  "image/vnd.cns.inf2": {
    "source": "iana"
  },
  "image/vnd.dece.graphic": {
    "source": "iana",
    "extensions": ["uvi","uvvi","uvg","uvvg"]
  },
  "image/vnd.djvu": {
    "source": "iana",
    "extensions": ["djvu","djv"]
  },
  "image/vnd.dvb.subtitle": {
    "source": "iana",
    "extensions": ["sub"]
  },
  "image/vnd.dwg": {
    "source": "iana",
    "extensions": ["dwg"]
  },
  "image/vnd.dxf": {
    "source": "iana",
    "extensions": ["dxf"]
  },
  "image/vnd.fastbidsheet": {
    "source": "iana",
    "extensions": ["fbs"]
  },
  "image/vnd.fpx": {
    "source": "iana",
    "extensions": ["fpx"]
  },
  "image/vnd.fst": {
    "source": "iana",
    "extensions": ["fst"]
  },
  "image/vnd.fujixerox.edmics-mmr": {
    "source": "iana",
    "extensions": ["mmr"]
  },
  "image/vnd.fujixerox.edmics-rlc": {
    "source": "iana",
    "extensions": ["rlc"]
  },
  "image/vnd.globalgraphics.pgb": {
    "source": "iana"
  },
  "image/vnd.microsoft.icon": {
    "source": "iana"
  },
  "image/vnd.mix": {
    "source": "iana"
  },
  "image/vnd.mozilla.apng": {
    "source": "iana"
  },
  "image/vnd.ms-modi": {
    "source": "iana",
    "extensions": ["mdi"]
  },
  "image/vnd.ms-photo": {
    "source": "apache",
    "extensions": ["wdp"]
  },
  "image/vnd.net-fpx": {
    "source": "iana",
    "extensions": ["npx"]
  },
  "image/vnd.radiance": {
    "source": "iana"
  },
  "image/vnd.sealed.png": {
    "source": "iana"
  },
  "image/vnd.sealedmedia.softseal.gif": {
    "source": "iana"
  },
  "image/vnd.sealedmedia.softseal.jpg": {
    "source": "iana"
  },
  "image/vnd.svf": {
    "source": "iana"
  },
  "image/vnd.tencent.tap": {
    "source": "iana"
  },
  "image/vnd.valve.source.texture": {
    "source": "iana"
  },
  "image/vnd.wap.wbmp": {
    "source": "iana",
    "extensions": ["wbmp"]
  },
  "image/vnd.xiff": {
    "source": "iana",
    "extensions": ["xif"]
  },
  "image/vnd.zbrush.pcx": {
    "source": "iana"
  },
  "image/webp": {
    "source": "apache",
    "extensions": ["webp"]
  },
  "image/x-3ds": {
    "source": "apache",
    "extensions": ["3ds"]
  },
  "image/x-cmu-raster": {
    "source": "apache",
    "extensions": ["ras"]
  },
  "image/x-cmx": {
    "source": "apache",
    "extensions": ["cmx"]
  },
  "image/x-freehand": {
    "source": "apache",
    "extensions": ["fh","fhc","fh4","fh5","fh7"]
  },
  "image/x-icon": {
    "source": "apache",
    "compressible": true,
    "extensions": ["ico"]
  },
  "image/x-jng": {
    "source": "nginx",
    "extensions": ["jng"]
  },
  "image/x-mrsid-image": {
    "source": "apache",
    "extensions": ["sid"]
  },
  "image/x-ms-bmp": {
    "source": "nginx",
    "compressible": true,
    "extensions": ["bmp"]
  },
  "image/x-pcx": {
    "source": "apache",
    "extensions": ["pcx"]
  },
  "image/x-pict": {
    "source": "apache",
    "extensions": ["pic","pct"]
  },
  "image/x-portable-anymap": {
    "source": "apache",
    "extensions": ["pnm"]
  },
  "image/x-portable-bitmap": {
    "source": "apache",
    "extensions": ["pbm"]
  },
  "image/x-portable-graymap": {
    "source": "apache",
    "extensions": ["pgm"]
  },
  "image/x-portable-pixmap": {
    "source": "apache",
    "extensions": ["ppm"]
  },
  "image/x-rgb": {
    "source": "apache",
    "extensions": ["rgb"]
  },
  "image/x-tga": {
    "source": "apache",
    "extensions": ["tga"]
  },
  "image/x-xbitmap": {
    "source": "apache",
    "extensions": ["xbm"]
  },
  "image/x-xcf": {
    "compressible": false
  },
  "image/x-xpixmap": {
    "source": "apache",
    "extensions": ["xpm"]
  },
  "image/x-xwindowdump": {
    "source": "apache",
    "extensions": ["xwd"]
  },
  "message/cpim": {
    "source": "iana"
  },
  "message/delivery-status": {
    "source": "iana"
  },
  "message/disposition-notification": {
    "source": "iana"
  },
  "message/external-body": {
    "source": "iana"
  },
  "message/feedback-report": {
    "source": "iana"
  },
  "message/global": {
    "source": "iana"
  },
  "message/global-delivery-status": {
    "source": "iana"
  },
  "message/global-disposition-notification": {
    "source": "iana"
  },
  "message/global-headers": {
    "source": "iana"
  },
  "message/http": {
    "source": "iana",
    "compressible": false
  },
  "message/imdn+xml": {
    "source": "iana",
    "compressible": true
  },
  "message/news": {
    "source": "iana"
  },
  "message/partial": {
    "source": "iana",
    "compressible": false
  },
  "message/rfc822": {
    "source": "iana",
    "compressible": true,
    "extensions": ["eml","mime"]
  },
  "message/s-http": {
    "source": "iana"
  },
  "message/sip": {
    "source": "iana"
  },
  "message/sipfrag": {
    "source": "iana"
  },
  "message/tracking-status": {
    "source": "iana"
  },
  "message/vnd.si.simp": {
    "source": "iana"
  },
  "message/vnd.wfa.wsc": {
    "source": "iana"
  },
  "model/iges": {
    "source": "iana",
    "compressible": false,
    "extensions": ["igs","iges"]
  },
  "model/mesh": {
    "source": "iana",
    "compressible": false,
    "extensions": ["msh","mesh","silo"]
  },
  "model/vnd.collada+xml": {
    "source": "iana",
    "extensions": ["dae"]
  },
  "model/vnd.dwf": {
    "source": "iana",
    "extensions": ["dwf"]
  },
  "model/vnd.flatland.3dml": {
    "source": "iana"
  },
  "model/vnd.gdl": {
    "source": "iana",
    "extensions": ["gdl"]
  },
  "model/vnd.gs-gdl": {
    "source": "apache"
  },
  "model/vnd.gs.gdl": {
    "source": "iana"
  },
  "model/vnd.gtw": {
    "source": "iana",
    "extensions": ["gtw"]
  },
  "model/vnd.moml+xml": {
    "source": "iana"
  },
  "model/vnd.mts": {
    "source": "iana",
    "extensions": ["mts"]
  },
  "model/vnd.opengex": {
    "source": "iana"
  },
  "model/vnd.parasolid.transmit.binary": {
    "source": "iana"
  },
  "model/vnd.parasolid.transmit.text": {
    "source": "iana"
  },
  "model/vnd.valve.source.compiled-map": {
    "source": "iana"
  },
  "model/vnd.vtu": {
    "source": "iana",
    "extensions": ["vtu"]
  },
  "model/vrml": {
    "source": "iana",
    "compressible": false,
    "extensions": ["wrl","vrml"]
  },
  "model/x3d+binary": {
    "source": "apache",
    "compressible": false,
    "extensions": ["x3db","x3dbz"]
  },
  "model/x3d+fastinfoset": {
    "source": "iana"
  },
  "model/x3d+vrml": {
    "source": "apache",
    "compressible": false,
    "extensions": ["x3dv","x3dvz"]
  },
  "model/x3d+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["x3d","x3dz"]
  },
  "model/x3d-vrml": {
    "source": "iana"
  },
  "multipart/alternative": {
    "source": "iana",
    "compressible": false
  },
  "multipart/appledouble": {
    "source": "iana"
  },
  "multipart/byteranges": {
    "source": "iana"
  },
  "multipart/digest": {
    "source": "iana"
  },
  "multipart/encrypted": {
    "source": "iana",
    "compressible": false
  },
  "multipart/form-data": {
    "source": "iana",
    "compressible": false
  },
  "multipart/header-set": {
    "source": "iana"
  },
  "multipart/mixed": {
    "source": "iana",
    "compressible": false
  },
  "multipart/parallel": {
    "source": "iana"
  },
  "multipart/related": {
    "source": "iana",
    "compressible": false
  },
  "multipart/report": {
    "source": "iana"
  },
  "multipart/signed": {
    "source": "iana",
    "compressible": false
  },
  "multipart/voice-message": {
    "source": "iana"
  },
  "multipart/x-mixed-replace": {
    "source": "iana"
  },
  "text/1d-interleaved-parityfec": {
    "source": "iana"
  },
  "text/cache-manifest": {
    "source": "iana",
    "compressible": true,
    "extensions": ["appcache","manifest"]
  },
  "text/calendar": {
    "source": "iana",
    "extensions": ["ics","ifb"]
  },
  "text/calender": {
    "compressible": true
  },
  "text/cmd": {
    "compressible": true
  },
  "text/coffeescript": {
    "extensions": ["coffee","litcoffee"]
  },
  "text/css": {
    "source": "iana",
    "compressible": true,
    "extensions": ["css"]
  },
  "text/csv": {
    "source": "iana",
    "compressible": true,
    "extensions": ["csv"]
  },
  "text/csv-schema": {
    "source": "iana"
  },
  "text/directory": {
    "source": "iana"
  },
  "text/dns": {
    "source": "iana"
  },
  "text/ecmascript": {
    "source": "iana"
  },
  "text/encaprtp": {
    "source": "iana"
  },
  "text/enriched": {
    "source": "iana"
  },
  "text/fwdred": {
    "source": "iana"
  },
  "text/grammar-ref-list": {
    "source": "iana"
  },
  "text/hjson": {
    "extensions": ["hjson"]
  },
  "text/html": {
    "source": "iana",
    "compressible": true,
    "extensions": ["html","htm","shtml"]
  },
  "text/jade": {
    "extensions": ["jade"]
  },
  "text/javascript": {
    "source": "iana",
    "compressible": true
  },
  "text/jcr-cnd": {
    "source": "iana"
  },
  "text/jsx": {
    "compressible": true,
    "extensions": ["jsx"]
  },
  "text/less": {
    "extensions": ["less"]
  },
  "text/markdown": {
    "source": "iana"
  },
  "text/mathml": {
    "source": "nginx",
    "extensions": ["mml"]
  },
  "text/mizar": {
    "source": "iana"
  },
  "text/n3": {
    "source": "iana",
    "compressible": true,
    "extensions": ["n3"]
  },
  "text/parameters": {
    "source": "iana"
  },
  "text/parityfec": {
    "source": "iana"
  },
  "text/plain": {
    "source": "iana",
    "compressible": true,
    "extensions": ["txt","text","conf","def","list","log","in","ini"]
  },
  "text/provenance-notation": {
    "source": "iana"
  },
  "text/prs.fallenstein.rst": {
    "source": "iana"
  },
  "text/prs.lines.tag": {
    "source": "iana",
    "extensions": ["dsc"]
  },
  "text/raptorfec": {
    "source": "iana"
  },
  "text/red": {
    "source": "iana"
  },
  "text/rfc822-headers": {
    "source": "iana"
  },
  "text/richtext": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rtx"]
  },
  "text/rtf": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rtf"]
  },
  "text/rtp-enc-aescm128": {
    "source": "iana"
  },
  "text/rtploopback": {
    "source": "iana"
  },
  "text/rtx": {
    "source": "iana"
  },
  "text/sgml": {
    "source": "iana",
    "extensions": ["sgml","sgm"]
  },
  "text/stylus": {
    "extensions": ["stylus","styl"]
  },
  "text/t140": {
    "source": "iana"
  },
  "text/tab-separated-values": {
    "source": "iana",
    "compressible": true,
    "extensions": ["tsv"]
  },
  "text/troff": {
    "source": "iana",
    "extensions": ["t","tr","roff","man","me","ms"]
  },
  "text/turtle": {
    "source": "iana",
    "extensions": ["ttl"]
  },
  "text/ulpfec": {
    "source": "iana"
  },
  "text/uri-list": {
    "source": "iana",
    "compressible": true,
    "extensions": ["uri","uris","urls"]
  },
  "text/vcard": {
    "source": "iana",
    "compressible": true,
    "extensions": ["vcard"]
  },
  "text/vnd.a": {
    "source": "iana"
  },
  "text/vnd.abc": {
    "source": "iana"
  },
  "text/vnd.curl": {
    "source": "iana",
    "extensions": ["curl"]
  },
  "text/vnd.curl.dcurl": {
    "source": "apache",
    "extensions": ["dcurl"]
  },
  "text/vnd.curl.mcurl": {
    "source": "apache",
    "extensions": ["mcurl"]
  },
  "text/vnd.curl.scurl": {
    "source": "apache",
    "extensions": ["scurl"]
  },
  "text/vnd.debian.copyright": {
    "source": "iana"
  },
  "text/vnd.dmclientscript": {
    "source": "iana"
  },
  "text/vnd.dvb.subtitle": {
    "source": "iana",
    "extensions": ["sub"]
  },
  "text/vnd.esmertec.theme-descriptor": {
    "source": "iana"
  },
  "text/vnd.fly": {
    "source": "iana",
    "extensions": ["fly"]
  },
  "text/vnd.fmi.flexstor": {
    "source": "iana",
    "extensions": ["flx"]
  },
  "text/vnd.graphviz": {
    "source": "iana",
    "extensions": ["gv"]
  },
  "text/vnd.in3d.3dml": {
    "source": "iana",
    "extensions": ["3dml"]
  },
  "text/vnd.in3d.spot": {
    "source": "iana",
    "extensions": ["spot"]
  },
  "text/vnd.iptc.newsml": {
    "source": "iana"
  },
  "text/vnd.iptc.nitf": {
    "source": "iana"
  },
  "text/vnd.latex-z": {
    "source": "iana"
  },
  "text/vnd.motorola.reflex": {
    "source": "iana"
  },
  "text/vnd.ms-mediapackage": {
    "source": "iana"
  },
  "text/vnd.net2phone.commcenter.command": {
    "source": "iana"
  },
  "text/vnd.radisys.msml-basic-layout": {
    "source": "iana"
  },
  "text/vnd.si.uricatalogue": {
    "source": "iana"
  },
  "text/vnd.sun.j2me.app-descriptor": {
    "source": "iana",
    "extensions": ["jad"]
  },
  "text/vnd.trolltech.linguist": {
    "source": "iana"
  },
  "text/vnd.wap.si": {
    "source": "iana"
  },
  "text/vnd.wap.sl": {
    "source": "iana"
  },
  "text/vnd.wap.wml": {
    "source": "iana",
    "extensions": ["wml"]
  },
  "text/vnd.wap.wmlscript": {
    "source": "iana",
    "extensions": ["wmls"]
  },
  "text/vtt": {
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["vtt"]
  },
  "text/x-asm": {
    "source": "apache",
    "extensions": ["s","asm"]
  },
  "text/x-c": {
    "source": "apache",
    "extensions": ["c","cc","cxx","cpp","h","hh","dic"]
  },
  "text/x-component": {
    "source": "nginx",
    "extensions": ["htc"]
  },
  "text/x-fortran": {
    "source": "apache",
    "extensions": ["f","for","f77","f90"]
  },
  "text/x-gwt-rpc": {
    "compressible": true
  },
  "text/x-handlebars-template": {
    "extensions": ["hbs"]
  },
  "text/x-java-source": {
    "source": "apache",
    "extensions": ["java"]
  },
  "text/x-jquery-tmpl": {
    "compressible": true
  },
  "text/x-lua": {
    "extensions": ["lua"]
  },
  "text/x-markdown": {
    "compressible": true,
    "extensions": ["markdown","md","mkd"]
  },
  "text/x-nfo": {
    "source": "apache",
    "extensions": ["nfo"]
  },
  "text/x-opml": {
    "source": "apache",
    "extensions": ["opml"]
  },
  "text/x-pascal": {
    "source": "apache",
    "extensions": ["p","pas"]
  },
  "text/x-processing": {
    "compressible": true,
    "extensions": ["pde"]
  },
  "text/x-sass": {
    "extensions": ["sass"]
  },
  "text/x-scss": {
    "extensions": ["scss"]
  },
  "text/x-setext": {
    "source": "apache",
    "extensions": ["etx"]
  },
  "text/x-sfv": {
    "source": "apache",
    "extensions": ["sfv"]
  },
  "text/x-suse-ymp": {
    "compressible": true,
    "extensions": ["ymp"]
  },
  "text/x-uuencode": {
    "source": "apache",
    "extensions": ["uu"]
  },
  "text/x-vcalendar": {
    "source": "apache",
    "extensions": ["vcs"]
  },
  "text/x-vcard": {
    "source": "apache",
    "extensions": ["vcf"]
  },
  "text/xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xml"]
  },
  "text/xml-external-parsed-entity": {
    "source": "iana"
  },
  "text/yaml": {
    "extensions": ["yaml","yml"]
  },
  "video/1d-interleaved-parityfec": {
    "source": "apache"
  },
  "video/3gpp": {
    "source": "apache",
    "extensions": ["3gp","3gpp"]
  },
  "video/3gpp-tt": {
    "source": "apache"
  },
  "video/3gpp2": {
    "source": "apache",
    "extensions": ["3g2"]
  },
  "video/bmpeg": {
    "source": "apache"
  },
  "video/bt656": {
    "source": "apache"
  },
  "video/celb": {
    "source": "apache"
  },
  "video/dv": {
    "source": "apache"
  },
  "video/h261": {
    "source": "apache",
    "extensions": ["h261"]
  },
  "video/h263": {
    "source": "apache",
    "extensions": ["h263"]
  },
  "video/h263-1998": {
    "source": "apache"
  },
  "video/h263-2000": {
    "source": "apache"
  },
  "video/h264": {
    "source": "apache",
    "extensions": ["h264"]
  },
  "video/h264-rcdo": {
    "source": "apache"
  },
  "video/h264-svc": {
    "source": "apache"
  },
  "video/jpeg": {
    "source": "apache",
    "extensions": ["jpgv"]
  },
  "video/jpeg2000": {
    "source": "apache"
  },
  "video/jpm": {
    "source": "apache",
    "extensions": ["jpm","jpgm"]
  },
  "video/mj2": {
    "source": "apache",
    "extensions": ["mj2","mjp2"]
  },
  "video/mp1s": {
    "source": "apache"
  },
  "video/mp2p": {
    "source": "apache"
  },
  "video/mp2t": {
    "source": "apache",
    "extensions": ["ts"]
  },
  "video/mp4": {
    "source": "apache",
    "compressible": false,
    "extensions": ["mp4","mp4v","mpg4"]
  },
  "video/mp4v-es": {
    "source": "apache"
  },
  "video/mpeg": {
    "source": "apache",
    "compressible": false,
    "extensions": ["mpeg","mpg","mpe","m1v","m2v"]
  },
  "video/mpeg4-generic": {
    "source": "apache"
  },
  "video/mpv": {
    "source": "apache"
  },
  "video/nv": {
    "source": "apache"
  },
  "video/ogg": {
    "source": "apache",
    "compressible": false,
    "extensions": ["ogv"]
  },
  "video/parityfec": {
    "source": "apache"
  },
  "video/pointer": {
    "source": "apache"
  },
  "video/quicktime": {
    "source": "apache",
    "compressible": false,
    "extensions": ["qt","mov"]
  },
  "video/raw": {
    "source": "apache"
  },
  "video/rtp-enc-aescm128": {
    "source": "apache"
  },
  "video/rtx": {
    "source": "apache"
  },
  "video/smpte292m": {
    "source": "apache"
  },
  "video/ulpfec": {
    "source": "apache"
  },
  "video/vc1": {
    "source": "apache"
  },
  "video/vnd.cctv": {
    "source": "apache"
  },
  "video/vnd.dece.hd": {
    "source": "apache",
    "extensions": ["uvh","uvvh"]
  },
  "video/vnd.dece.mobile": {
    "source": "apache",
    "extensions": ["uvm","uvvm"]
  },
  "video/vnd.dece.mp4": {
    "source": "apache"
  },
  "video/vnd.dece.pd": {
    "source": "apache",
    "extensions": ["uvp","uvvp"]
  },
  "video/vnd.dece.sd": {
    "source": "apache",
    "extensions": ["uvs","uvvs"]
  },
  "video/vnd.dece.video": {
    "source": "apache",
    "extensions": ["uvv","uvvv"]
  },
  "video/vnd.directv.mpeg": {
    "source": "apache"
  },
  "video/vnd.directv.mpeg-tts": {
    "source": "apache"
  },
  "video/vnd.dlna.mpeg-tts": {
    "source": "apache"
  },
  "video/vnd.dvb.file": {
    "source": "apache",
    "extensions": ["dvb"]
  },
  "video/vnd.fvt": {
    "source": "apache",
    "extensions": ["fvt"]
  },
  "video/vnd.hns.video": {
    "source": "apache"
  },
  "video/vnd.iptvforum.1dparityfec-1010": {
    "source": "apache"
  },
  "video/vnd.iptvforum.1dparityfec-2005": {
    "source": "apache"
  },
  "video/vnd.iptvforum.2dparityfec-1010": {
    "source": "apache"
  },
  "video/vnd.iptvforum.2dparityfec-2005": {
    "source": "apache"
  },
  "video/vnd.iptvforum.ttsavc": {
    "source": "apache"
  },
  "video/vnd.iptvforum.ttsmpeg2": {
    "source": "apache"
  },
  "video/vnd.motorola.video": {
    "source": "apache"
  },
  "video/vnd.motorola.videop": {
    "source": "apache"
  },
  "video/vnd.mpegurl": {
    "source": "apache",
    "extensions": ["mxu","m4u"]
  },
  "video/vnd.ms-playready.media.pyv": {
    "source": "apache",
    "extensions": ["pyv"]
  },
  "video/vnd.nokia.interleaved-multimedia": {
    "source": "apache"
  },
  "video/vnd.nokia.videovoip": {
    "source": "apache"
  },
  "video/vnd.objectvideo": {
    "source": "apache"
  },
  "video/vnd.sealed.mpeg1": {
    "source": "apache"
  },
  "video/vnd.sealed.mpeg4": {
    "source": "apache"
  },
  "video/vnd.sealed.swf": {
    "source": "apache"
  },
  "video/vnd.sealedmedia.softseal.mov": {
    "source": "apache"
  },
  "video/vnd.uvvu.mp4": {
    "source": "apache",
    "extensions": ["uvu","uvvu"]
  },
  "video/vnd.vivo": {
    "source": "apache",
    "extensions": ["viv"]
  },
  "video/webm": {
    "source": "apache",
    "compressible": false,
    "extensions": ["webm"]
  },
  "video/x-f4v": {
    "source": "apache",
    "extensions": ["f4v"]
  },
  "video/x-fli": {
    "source": "apache",
    "extensions": ["fli"]
  },
  "video/x-flv": {
    "source": "apache",
    "compressible": false,
    "extensions": ["flv"]
  },
  "video/x-m4v": {
    "source": "apache",
    "extensions": ["m4v"]
  },
  "video/x-matroska": {
    "source": "apache",
    "compressible": false,
    "extensions": ["mkv","mk3d","mks"]
  },
  "video/x-mng": {
    "source": "apache",
    "extensions": ["mng"]
  },
  "video/x-ms-asf": {
    "source": "apache",
    "extensions": ["asf","asx"]
  },
  "video/x-ms-vob": {
    "source": "apache",
    "extensions": ["vob"]
  },
  "video/x-ms-wm": {
    "source": "apache",
    "extensions": ["wm"]
  },
  "video/x-ms-wmv": {
    "source": "apache",
    "compressible": false,
    "extensions": ["wmv"]
  },
  "video/x-ms-wmx": {
    "source": "apache",
    "extensions": ["wmx"]
  },
  "video/x-ms-wvx": {
    "source": "apache",
    "extensions": ["wvx"]
  },
  "video/x-msvideo": {
    "source": "apache",
    "extensions": ["avi"]
  },
  "video/x-sgi-movie": {
    "source": "apache",
    "extensions": ["movie"]
  },
  "video/x-smv": {
    "source": "apache",
    "extensions": ["smv"]
  },
  "x-conference/x-cooltalk": {
    "source": "apache",
    "extensions": ["ice"]
  },
  "x-shader/x-fragment": {
    "compressible": true
  },
  "x-shader/x-vertex": {
    "compressible": true
  }
}
},{}],"node_modules/faker/lib/locales/en/system/index.js":[function(require,module,exports) {
var system = {};
module['exports'] = system;
system.mimeTypes = require("./mimeTypes");
},{"./mimeTypes":"node_modules/faker/lib/locales/en/system/mimeTypes.js"}],"node_modules/faker/lib/locales/en/index.js":[function(require,module,exports) {
var en = {};
module['exports'] = en;
en.title = "English";
en.separator = " & ";
en.address = require("./address");
en.credit_card = require("./credit_card");
en.company = require("./company");
en.internet = require("./internet");
en.database = require("./database");
en.lorem = require("./lorem");
en.name = require("./name");
en.phone_number = require("./phone_number");
en.cell_phone = require("./cell_phone");
en.business = require("./business");
en.commerce = require("./commerce");
en.team = require("./team");
en.hacker = require("./hacker");
en.app = require("./app");
en.finance = require("./finance");
en.date = require("./date");
en.system = require("./system");

},{"./address":"node_modules/faker/lib/locales/en/address/index.js","./credit_card":"node_modules/faker/lib/locales/en/credit_card/index.js","./company":"node_modules/faker/lib/locales/en/company/index.js","./internet":"node_modules/faker/lib/locales/en/internet/index.js","./database":"node_modules/faker/lib/locales/en/database/index.js","./lorem":"node_modules/faker/lib/locales/en/lorem/index.js","./name":"node_modules/faker/lib/locales/en/name/index.js","./phone_number":"node_modules/faker/lib/locales/en/phone_number/index.js","./cell_phone":"node_modules/faker/lib/locales/en/cell_phone/index.js","./business":"node_modules/faker/lib/locales/en/business/index.js","./commerce":"node_modules/faker/lib/locales/en/commerce/index.js","./team":"node_modules/faker/lib/locales/en/team/index.js","./hacker":"node_modules/faker/lib/locales/en/hacker/index.js","./app":"node_modules/faker/lib/locales/en/app/index.js","./finance":"node_modules/faker/lib/locales/en/finance/index.js","./date":"node_modules/faker/lib/locales/en/date/index.js","./system":"node_modules/faker/lib/locales/en/system/index.js"}],"node_modules/faker/lib/locales/en_AU/name/first_name.js":[function(require,module,exports) {
module["exports"] = [
  "William",
  "Jack",
  "Oliver",
  "Joshua",
  "Thomas",
  "Lachlan",
  "Cooper",
  "Noah",
  "Ethan",
  "Lucas",
  "James",
  "Samuel",
  "Jacob",
  "Liam",
  "Alexander",
  "Benjamin",
  "Max",
  "Isaac",
  "Daniel",
  "Riley",
  "Ryan",
  "Charlie",
  "Tyler",
  "Jake",
  "Matthew",
  "Xavier",
  "Harry",
  "Jayden",
  "Nicholas",
  "Harrison",
  "Levi",
  "Luke",
  "Adam",
  "Henry",
  "Aiden",
  "Dylan",
  "Oscar",
  "Michael",
  "Jackson",
  "Logan",
  "Joseph",
  "Blake",
  "Nathan",
  "Connor",
  "Elijah",
  "Nate",
  "Archie",
  "Bailey",
  "Marcus",
  "Cameron",
  "Jordan",
  "Zachary",
  "Caleb",
  "Hunter",
  "Ashton",
  "Toby",
  "Aidan",
  "Hayden",
  "Mason",
  "Hamish",
  "Edward",
  "Angus",
  "Eli",
  "Sebastian",
  "Christian",
  "Patrick",
  "Andrew",
  "Anthony",
  "Luca",
  "Kai",
  "Beau",
  "Alex",
  "George",
  "Callum",
  "Finn",
  "Zac",
  "Mitchell",
  "Jett",
  "Jesse",
  "Gabriel",
  "Leo",
  "Declan",
  "Charles",
  "Jasper",
  "Jonathan",
  "Aaron",
  "Hugo",
  "David",
  "Christopher",
  "Chase",
  "Owen",
  "Justin",
  "Ali",
  "Darcy",
  "Lincoln",
  "Cody",
  "Phoenix",
  "Sam",
  "John",
  "Joel",
  "Isabella",
  "Ruby",
  "Chloe",
  "Olivia",
  "Charlotte",
  "Mia",
  "Lily",
  "Emily",
  "Ella",
  "Sienna",
  "Sophie",
  "Amelia",
  "Grace",
  "Ava",
  "Zoe",
  "Emma",
  "Sophia",
  "Matilda",
  "Hannah",
  "Jessica",
  "Lucy",
  "Georgia",
  "Sarah",
  "Abigail",
  "Zara",
  "Eva",
  "Scarlett",
  "Jasmine",
  "Chelsea",
  "Lilly",
  "Ivy",
  "Isla",
  "Evie",
  "Isabelle",
  "Maddison",
  "Layla",
  "Summer",
  "Annabelle",
  "Alexis",
  "Elizabeth",
  "Bella",
  "Holly",
  "Lara",
  "Madison",
  "Alyssa",
  "Maya",
  "Tahlia",
  "Claire",
  "Hayley",
  "Imogen",
  "Jade",
  "Ellie",
  "Sofia",
  "Addison",
  "Molly",
  "Phoebe",
  "Alice",
  "Savannah",
  "Gabriella",
  "Kayla",
  "Mikayla",
  "Abbey",
  "Eliza",
  "Willow",
  "Alexandra",
  "Poppy",
  "Samantha",
  "Stella",
  "Amy",
  "Amelie",
  "Anna",
  "Piper",
  "Gemma",
  "Isabel",
  "Victoria",
  "Stephanie",
  "Caitlin",
  "Heidi",
  "Paige",
  "Rose",
  "Amber",
  "Audrey",
  "Claudia",
  "Taylor",
  "Madeline",
  "Angelina",
  "Natalie",
  "Charli",
  "Lauren",
  "Ashley",
  "Violet",
  "Mackenzie",
  "Abby",
  "Skye",
  "Lillian",
  "Alana",
  "Lola",
  "Leah",
  "Eve",
  "Kiara"
];

},{}],"node_modules/faker/lib/locales/en_AU/name/last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Smith",
  "Jones",
  "Williams",
  "Brown",
  "Wilson",
  "Taylor",
  "Johnson",
  "White",
  "Martin",
  "Anderson",
  "Thompson",
  "Nguyen",
  "Thomas",
  "Walker",
  "Harris",
  "Lee",
  "Ryan",
  "Robinson",
  "Kelly",
  "King",
  "Davis",
  "Wright",
  "Evans",
  "Roberts",
  "Green",
  "Hall",
  "Wood",
  "Jackson",
  "Clarke",
  "Patel",
  "Khan",
  "Lewis",
  "James",
  "Phillips",
  "Mason",
  "Mitchell",
  "Rose",
  "Davies",
  "Rodriguez",
  "Cox",
  "Alexander",
  "Garden",
  "Campbell",
  "Johnston",
  "Moore",
  "Smyth",
  "O'neill",
  "Doherty",
  "Stewart",
  "Quinn",
  "Murphy",
  "Graham",
  "Mclaughlin",
  "Hamilton",
  "Murray",
  "Hughes",
  "Robertson",
  "Thomson",
  "Scott",
  "Macdonald",
  "Reid",
  "Clark",
  "Ross",
  "Young",
  "Watson",
  "Paterson",
  "Morrison",
  "Morgan",
  "Griffiths",
  "Edwards",
  "Rees",
  "Jenkins",
  "Owen",
  "Price",
  "Moss",
  "Richards",
  "Abbott",
  "Adams",
  "Armstrong",
  "Bahringer",
  "Bailey",
  "Barrows",
  "Bartell",
  "Bartoletti",
  "Barton",
  "Bauch",
  "Baumbach",
  "Bayer",
  "Beahan",
  "Beatty",
  "Becker",
  "Beier",
  "Berge",
  "Bergstrom",
  "Bode",
  "Bogan",
  "Borer",
  "Bosco",
  "Botsford",
  "Boyer",
  "Boyle",
  "Braun",
  "Bruen",
  "Carroll",
  "Carter",
  "Cartwright",
  "Casper",
  "Cassin",
  "Champlin",
  "Christiansen",
  "Cole",
  "Collier",
  "Collins",
  "Connelly",
  "Conroy",
  "Corkery",
  "Cormier",
  "Corwin",
  "Cronin",
  "Crooks",
  "Cruickshank",
  "Cummings",
  "D'amore",
  "Daniel",
  "Dare",
  "Daugherty",
  "Dickens",
  "Dickinson",
  "Dietrich",
  "Donnelly",
  "Dooley",
  "Douglas",
  "Doyle",
  "Durgan",
  "Ebert",
  "Emard",
  "Emmerich",
  "Erdman",
  "Ernser",
  "Fadel",
  "Fahey",
  "Farrell",
  "Fay",
  "Feeney",
  "Feil",
  "Ferry",
  "Fisher",
  "Flatley",
  "Gibson",
  "Gleason",
  "Glover",
  "Goldner",
  "Goodwin",
  "Grady",
  "Grant",
  "Greenfelder",
  "Greenholt",
  "Grimes",
  "Gutmann",
  "Hackett",
  "Hahn",
  "Haley",
  "Hammes",
  "Hand",
  "Hane",
  "Hansen",
  "Harber",
  "Hartmann",
  "Harvey",
  "Hayes",
  "Heaney",
  "Heathcote",
  "Heller",
  "Hermann",
  "Hermiston",
  "Hessel",
  "Hettinger",
  "Hickle",
  "Hill",
  "Hills",
  "Hoppe",
  "Howe",
  "Howell",
  "Hudson",
  "Huel",
  "Hyatt",
  "Jacobi",
  "Jacobs",
  "Jacobson",
  "Jerde",
  "Johns",
  "Keeling",
  "Kemmer",
  "Kessler",
  "Kiehn",
  "Kirlin",
  "Klein",
  "Koch",
  "Koelpin",
  "Kohler",
  "Koss",
  "Kovacek",
  "Kreiger",
  "Kris",
  "Kuhlman",
  "Kuhn",
  "Kulas",
  "Kunde",
  "Kutch",
  "Lakin",
  "Lang",
  "Langworth",
  "Larkin",
  "Larson",
  "Leannon",
  "Leffler",
  "Little",
  "Lockman",
  "Lowe",
  "Lynch",
  "Mann",
  "Marks",
  "Marvin",
  "Mayer",
  "Mccullough",
  "Mcdermott",
  "Mckenzie",
  "Miller",
  "Mills",
  "Monahan",
  "Morissette",
  "Mueller",
  "Muller",
  "Nader",
  "Nicolas",
  "Nolan",
  "O'connell",
  "O'conner",
  "O'hara",
  "O'keefe",
  "Olson",
  "O'reilly",
  "Parisian",
  "Parker",
  "Quigley",
  "Reilly",
  "Reynolds",
  "Rice",
  "Ritchie",
  "Rohan",
  "Rolfson",
  "Rowe",
  "Russel",
  "Rutherford",
  "Sanford",
  "Sauer",
  "Schmidt",
  "Schmitt",
  "Schneider",
  "Schroeder",
  "Schultz",
  "Shields",
  "Smitham",
  "Spencer",
  "Stanton",
  "Stark",
  "Stokes",
  "Swift",
  "Tillman",
  "Towne",
  "Tremblay",
  "Tromp",
  "Turcotte",
  "Turner",
  "Walsh",
  "Walter",
  "Ward",
  "Waters",
  "Weber",
  "Welch",
  "West",
  "Wilderman",
  "Wilkinson",
  "Williamson",
  "Windler",
  "Wolf"
];

},{}],"node_modules/faker/lib/locales/en_AU/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");

},{"./first_name":"node_modules/faker/lib/locales/en_AU/name/first_name.js","./last_name":"node_modules/faker/lib/locales/en_AU/name/last_name.js"}],"node_modules/faker/lib/locales/en_AU/company/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "Pty Ltd",
  "and Sons",
  "Corp",
  "Group",
  "Brothers",
  "Partners"
];

},{}],"node_modules/faker/lib/locales/en_AU/company/index.js":[function(require,module,exports) {
var company = {};
module['exports'] = company;
company.suffix = require("./suffix");

},{"./suffix":"node_modules/faker/lib/locales/en_AU/company/suffix.js"}],"node_modules/faker/lib/locales/en_AU/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "com.au",
  "com",
  "net.au",
  "net",
  "org.au",
  "org"
];

},{}],"node_modules/faker/lib/locales/en_AU/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.domain_suffix = require("./domain_suffix");

},{"./domain_suffix":"node_modules/faker/lib/locales/en_AU/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/en_AU/address/state_abbr.js":[function(require,module,exports) {
module["exports"] = [
  "NSW",
  "QLD",
  "NT",
  "SA",
  "WA",
  "TAS",
  "ACT",
  "VIC"
];

},{}],"node_modules/faker/lib/locales/en_AU/address/state.js":[function(require,module,exports) {
module["exports"] = [
  "New South Wales",
  "Queensland",
  "Northern Territory",
  "South Australia",
  "Western Australia",
  "Tasmania",
  "Australian Capital Territory",
  "Victoria"
];

},{}],"node_modules/faker/lib/locales/en_AU/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "0###",
  "2###",
  "3###",
  "4###",
  "5###",
  "6###",
  "7###"
];

},{}],"node_modules/faker/lib/locales/en_AU/address/building_number.js":[function(require,module,exports) {
module["exports"] = [
  "####",
  "###",
  "##"
];

},{}],"node_modules/faker/lib/locales/en_AU/address/street_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "Avenue",
  "Boulevard",
  "Circle",
  "Circuit",
  "Court",
  "Crescent",
  "Crest",
  "Drive",
  "Estate Dr",
  "Grove",
  "Hill",
  "Island",
  "Junction",
  "Knoll",
  "Lane",
  "Loop",
  "Mall",
  "Manor",
  "Meadow",
  "Mews",
  "Parade",
  "Parkway",
  "Pass",
  "Place",
  "Plaza",
  "Ridge",
  "Road",
  "Run",
  "Square",
  "Station St",
  "Street",
  "Summit",
  "Terrace",
  "Track",
  "Trail",
  "View Rd",
  "Way"
];

},{}],"node_modules/faker/lib/locales/en_AU/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "Australia"
];

},{}],"node_modules/faker/lib/locales/en_AU/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.state_abbr = require("./state_abbr");
address.state = require("./state");
address.postcode = require("./postcode");
address.building_number = require("./building_number");
address.street_suffix = require("./street_suffix");
address.default_country = require("./default_country");

},{"./state_abbr":"node_modules/faker/lib/locales/en_AU/address/state_abbr.js","./state":"node_modules/faker/lib/locales/en_AU/address/state.js","./postcode":"node_modules/faker/lib/locales/en_AU/address/postcode.js","./building_number":"node_modules/faker/lib/locales/en_AU/address/building_number.js","./street_suffix":"node_modules/faker/lib/locales/en_AU/address/street_suffix.js","./default_country":"node_modules/faker/lib/locales/en_AU/address/default_country.js"}],"node_modules/faker/lib/locales/en_AU/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "0# #### ####",
  "+61 # #### ####",
  "04## ### ###",
  "+61 4## ### ###"
];

},{}],"node_modules/faker/lib/locales/en_AU/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/en_AU/phone_number/formats.js"}],"node_modules/faker/lib/locales/en_AU/index.js":[function(require,module,exports) {
var en_AU = {};
module['exports'] = en_AU;
en_AU.title = "Australia (English)";
en_AU.name = require("./name");
en_AU.company = require("./company");
en_AU.internet = require("./internet");
en_AU.address = require("./address");
en_AU.phone_number = require("./phone_number");

},{"./name":"node_modules/faker/lib/locales/en_AU/name/index.js","./company":"node_modules/faker/lib/locales/en_AU/company/index.js","./internet":"node_modules/faker/lib/locales/en_AU/internet/index.js","./address":"node_modules/faker/lib/locales/en_AU/address/index.js","./phone_number":"node_modules/faker/lib/locales/en_AU/phone_number/index.js"}],"node_modules/faker/lib/locales/en_BORK/lorem/words.js":[function(require,module,exports) {
module["exports"] = [
  "Boot",
  "I",
  "Nu",
  "Nur",
  "Tu",
  "Um",
  "a",
  "becoose-a",
  "boot",
  "bork",
  "burn",
  "chuuses",
  "cumplete-a",
  "cun",
  "cunseqooences",
  "curcoomstunces",
  "dee",
  "deeslikes",
  "denuoonceeng",
  "desures",
  "du",
  "eccuoont",
  "ectooel",
  "edfuntege-a",
  "efueeds",
  "egeeen",
  "ell",
  "ere-a",
  "feend",
  "foolt",
  "frum",
  "geefe-a",
  "gesh",
  "greet",
  "heem",
  "heppeeness",
  "hes",
  "hoo",
  "hoomun",
  "idea",
  "ifer",
  "in",
  "incuoonter",
  "injuy",
  "itselff",
  "ixcept",
  "ixemple-a",
  "ixerceese-a",
  "ixpleeen",
  "ixplurer",
  "ixpuoond",
  "ixtremely",
  "knoo",
  "lebureeuoos",
  "lufes",
  "meestekee",
  "mester-booeelder",
  "moost",
  "mun",
  "nu",
  "nut",
  "oobteeen",
  "oocceseeunelly",
  "ooccoor",
  "ooff",
  "oone-a",
  "oor",
  "peeen",
  "peeenffool",
  "physeecel",
  "pleesoore-a",
  "poorsooe-a",
  "poorsooes",
  "preeesing",
  "prucoore-a",
  "prudooces",
  "reeght",
  "reshunelly",
  "resooltunt",
  "sume-a",
  "teecheengs",
  "teke-a",
  "thees",
  "thet",
  "thuse-a",
  "treefiel",
  "troot",
  "tu",
  "tueel",
  "und",
  "undertekes",
  "unnuyeeng",
  "uny",
  "unyune-a",
  "us",
  "veell",
  "veet",
  "ves",
  "vheech",
  "vhu",
  "yuoo",
  "zee",
  "zeere-a"
];

},{}],"node_modules/faker/lib/locales/en_BORK/lorem/index.js":[function(require,module,exports) {
var lorem = {};
module['exports'] = lorem;
lorem.words = require("./words");

},{"./words":"node_modules/faker/lib/locales/en_BORK/lorem/words.js"}],"node_modules/faker/lib/locales/en_BORK/index.js":[function(require,module,exports) {
var en_BORK = {};
module['exports'] = en_BORK;
en_BORK.title = "Bork (English)";
en_BORK.lorem = require("./lorem");

},{"./lorem":"node_modules/faker/lib/locales/en_BORK/lorem/index.js"}],"node_modules/faker/lib/locales/en_CA/address/state.js":[function(require,module,exports) {
module["exports"] = [
  "Alberta",
  "British Columbia",
  "Manitoba",
  "New Brunswick",
  "Newfoundland and Labrador",
  "Nova Scotia",
  "Northwest Territories",
  "Nunavut",
  "Ontario",
  "Prince Edward Island",
  "Quebec",
  "Saskatchewan",
  "Yukon"
];

},{}],"node_modules/faker/lib/locales/en_CA/address/state_abbr.js":[function(require,module,exports) {
module["exports"] = [
  "AB",
  "BC",
  "MB",
  "NB",
  "NL",
  "NS",
  "NU",
  "NT",
  "ON",
  "PE",
  "QC",
  "SK",
  "YT"
];

},{}],"node_modules/faker/lib/locales/en_CA/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "Canada"
];

},{}],"node_modules/faker/lib/locales/en_CA/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "?#? #?#"
];

},{}],"node_modules/faker/lib/locales/en_CA/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.default_country = require("./default_country");
address.postcode = require('./postcode.js');

},{"./state":"node_modules/faker/lib/locales/en_CA/address/state.js","./state_abbr":"node_modules/faker/lib/locales/en_CA/address/state_abbr.js","./default_country":"node_modules/faker/lib/locales/en_CA/address/default_country.js","./postcode.js":"node_modules/faker/lib/locales/en_CA/address/postcode.js"}],"node_modules/faker/lib/locales/en_CA/internet/free_email.js":[function(require,module,exports) {
module["exports"] = [
  "gmail.com",
  "yahoo.ca",
  "hotmail.com"
];

},{}],"node_modules/faker/lib/locales/en_CA/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "ca",
  "com",
  "biz",
  "info",
  "name",
  "net",
  "org"
];

},{}],"node_modules/faker/lib/locales/en_CA/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.free_email = require("./free_email");
internet.domain_suffix = require("./domain_suffix");

},{"./free_email":"node_modules/faker/lib/locales/en_CA/internet/free_email.js","./domain_suffix":"node_modules/faker/lib/locales/en_CA/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/en_CA/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "###-###-####",
  "(###)###-####",
  "###.###.####",
  "1-###-###-####",
  "###-###-#### x###",
  "(###)###-#### x###",
  "1-###-###-#### x###",
  "###.###.#### x###",
  "###-###-#### x####",
  "(###)###-#### x####",
  "1-###-###-#### x####",
  "###.###.#### x####",
  "###-###-#### x#####",
  "(###)###-#### x#####",
  "1-###-###-#### x#####",
  "###.###.#### x#####"
];

},{}],"node_modules/faker/lib/locales/en_CA/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/en_CA/phone_number/formats.js"}],"node_modules/faker/lib/locales/en_CA/index.js":[function(require,module,exports) {
var en_CA = {};
module['exports'] = en_CA;
en_CA.title = "Canada (English)";
en_CA.address = require("./address");
en_CA.internet = require("./internet");
en_CA.phone_number = require("./phone_number");

},{"./address":"node_modules/faker/lib/locales/en_CA/address/index.js","./internet":"node_modules/faker/lib/locales/en_CA/internet/index.js","./phone_number":"node_modules/faker/lib/locales/en_CA/phone_number/index.js"}],"node_modules/faker/lib/locales/en_GB/address/county.js":[function(require,module,exports) {
module["exports"] = [
  "Avon",
  "Bedfordshire",
  "Berkshire",
  "Borders",
  "Buckinghamshire",
  "Cambridgeshire",
  "Central",
  "Cheshire",
  "Cleveland",
  "Clwyd",
  "Cornwall",
  "County Antrim",
  "County Armagh",
  "County Down",
  "County Fermanagh",
  "County Londonderry",
  "County Tyrone",
  "Cumbria",
  "Derbyshire",
  "Devon",
  "Dorset",
  "Dumfries and Galloway",
  "Durham",
  "Dyfed",
  "East Sussex",
  "Essex",
  "Fife",
  "Gloucestershire",
  "Grampian",
  "Greater Manchester",
  "Gwent",
  "Gwynedd County",
  "Hampshire",
  "Herefordshire",
  "Hertfordshire",
  "Highlands and Islands",
  "Humberside",
  "Isle of Wight",
  "Kent",
  "Lancashire",
  "Leicestershire",
  "Lincolnshire",
  "Lothian",
  "Merseyside",
  "Mid Glamorgan",
  "Norfolk",
  "North Yorkshire",
  "Northamptonshire",
  "Northumberland",
  "Nottinghamshire",
  "Oxfordshire",
  "Powys",
  "Rutland",
  "Shropshire",
  "Somerset",
  "South Glamorgan",
  "South Yorkshire",
  "Staffordshire",
  "Strathclyde",
  "Suffolk",
  "Surrey",
  "Tayside",
  "Tyne and Wear",
  "Warwickshire",
  "West Glamorgan",
  "West Midlands",
  "West Sussex",
  "West Yorkshire",
  "Wiltshire",
  "Worcestershire"
];

},{}],"node_modules/faker/lib/locales/en_GB/address/uk_country.js":[function(require,module,exports) {
module["exports"] = [
  "England",
  "Scotland",
  "Wales",
  "Northern Ireland"
];

},{}],"node_modules/faker/lib/locales/en_GB/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "England",
  "Scotland",
  "Wales",
  "Northern Ireland"
];

},{}],"node_modules/faker/lib/locales/en_GB/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "??# #??",
  "??## #??",
];

},{}],"node_modules/faker/lib/locales/en_GB/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.county = require("./county");
address.uk_country = require("./uk_country");
address.default_country = require("./default_country");
address.postcode = require("./postcode");

},{"./county":"node_modules/faker/lib/locales/en_GB/address/county.js","./uk_country":"node_modules/faker/lib/locales/en_GB/address/uk_country.js","./default_country":"node_modules/faker/lib/locales/en_GB/address/default_country.js","./postcode":"node_modules/faker/lib/locales/en_GB/address/postcode.js"}],"node_modules/faker/lib/locales/en_GB/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "co.uk",
  "com",
  "biz",
  "info",
  "name"
];

},{}],"node_modules/faker/lib/locales/en_GB/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.domain_suffix = require("./domain_suffix");

},{"./domain_suffix":"node_modules/faker/lib/locales/en_GB/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/en_GB/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "01#### #####",
  "01### ######",
  "01#1 ### ####",
  "011# ### ####",
  "02# #### ####",
  "03## ### ####",
  "055 #### ####",
  "056 #### ####",
  "0800 ### ####",
  "08## ### ####",
  "09## ### ####",
  "016977 ####",
  "01### #####",
  "0500 ######",
  "0800 ######"
];

},{}],"node_modules/faker/lib/locales/en_GB/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/en_GB/phone_number/formats.js"}],"node_modules/faker/lib/locales/en_GB/cell_phone/formats.js":[function(require,module,exports) {
module["exports"] = [
  "074## ######",
  "075## ######",
  "076## ######",
  "077## ######",
  "078## ######",
  "079## ######"
];

},{}],"node_modules/faker/lib/locales/en_GB/cell_phone/index.js":[function(require,module,exports) {
var cell_phone = {};
module['exports'] = cell_phone;
cell_phone.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/en_GB/cell_phone/formats.js"}],"node_modules/faker/lib/locales/en_GB/index.js":[function(require,module,exports) {
var en_GB = {};
module['exports'] = en_GB;
en_GB.title = "Great Britain (English)";
en_GB.address = require("./address");
en_GB.internet = require("./internet");
en_GB.phone_number = require("./phone_number");
en_GB.cell_phone = require("./cell_phone");

},{"./address":"node_modules/faker/lib/locales/en_GB/address/index.js","./internet":"node_modules/faker/lib/locales/en_GB/internet/index.js","./phone_number":"node_modules/faker/lib/locales/en_GB/phone_number/index.js","./cell_phone":"node_modules/faker/lib/locales/en_GB/cell_phone/index.js"}],"node_modules/faker/lib/locales/en_IE/address/county.js":[function(require,module,exports) {
module["exports"] = [
  "Carlow",
  "Cavan",
  "Clare",
  "Cork",
  "Donegal",
  "Dublin",
  "Galway",
  "Kerry",
  "Kildare",
  "Kilkenny",
  "Laois",
  "Leitrim",
  "Limerick",
  "Longford",
  "Louth",
  "Mayo",
  "Meath",
  "Monaghan",
  "Offaly",
  "Roscommon",
  "Sligo",
  "Tipperary",
  "Waterford",
  "Westmeath",
  "Wexford",
  "Wicklow"
];

},{}],"node_modules/faker/lib/locales/en_IE/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "Ireland"
];

},{}],"node_modules/faker/lib/locales/en_IE/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.county = require("./county");
address.default_country = require("./default_country");

},{"./county":"node_modules/faker/lib/locales/en_IE/address/county.js","./default_country":"node_modules/faker/lib/locales/en_IE/address/default_country.js"}],"node_modules/faker/lib/locales/en_IE/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "ie",
  "com",
  "net",
  "info",
  "eu"
];

},{}],"node_modules/faker/lib/locales/en_IE/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.domain_suffix = require("./domain_suffix");

},{"./domain_suffix":"node_modules/faker/lib/locales/en_IE/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/en_IE/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "01 #######",
  "021 #######",
  "022 #######",
  "023 #######",
  "024 #######",
  "025 #######",
  "026 #######",
  "027 #######",
  "028 #######",
  "029 #######",
  "0402 #######",
  "0404 #######",
  "041 #######",
  "042 #######",
  "043 #######",
  "044 #######",
  "045 #######",
  "046 #######",
  "047 #######",
  "049 #######",
  "0504 #######",
  "0505 #######",
  "051 #######",
  "052 #######",
  "053 #######",
  "056 #######",
  "057 #######",
  "058 #######",
  "059 #######",
  "061 #######",
  "062 #######",
  "063 #######",
  "064 #######",
  "065 #######",
  "066 #######",
  "067 #######",
  "068 #######",
  "069 #######",
  "071 #######",
  "074 #######",
  "090 #######",
  "091 #######",
  "093 #######",
  "094 #######",
  "095 #######",
  "096 #######",
  "097 #######",
  "098 #######",
  "099 #######"
];

},{}],"node_modules/faker/lib/locales/en_IE/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/en_IE/phone_number/formats.js"}],"node_modules/faker/lib/locales/en_IE/cell_phone/formats.js":[function(require,module,exports) {
module["exports"] = [
  "082 ### ####",
  "083 ### ####",
  "085 ### ####",
  "086 ### ####",
  "087 ### ####",
  "089 ### ####"
];

},{}],"node_modules/faker/lib/locales/en_IE/cell_phone/index.js":[function(require,module,exports) {
var cell_phone = {};
module['exports'] = cell_phone;
cell_phone.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/en_IE/cell_phone/formats.js"}],"node_modules/faker/lib/locales/en_IE/index.js":[function(require,module,exports) {
var en_IE = {};
module['exports'] = en_IE;
en_IE.title = "Ireland (English)";
en_IE.address = require("./address");
en_IE.internet = require("./internet");
en_IE.phone_number = require("./phone_number");
en_IE.cell_phone = require("./cell_phone");

},{"./address":"node_modules/faker/lib/locales/en_IE/address/index.js","./internet":"node_modules/faker/lib/locales/en_IE/internet/index.js","./phone_number":"node_modules/faker/lib/locales/en_IE/phone_number/index.js","./cell_phone":"node_modules/faker/lib/locales/en_IE/cell_phone/index.js"}],"node_modules/faker/lib/locales/en_IND/name/first_name.js":[function(require,module,exports) {
module["exports"] = [
  "Aadrika",
  "Aanandinii",
  "Aaratrika",
  "Aarya",
  "Arya",
  "Aashritha",
  "Aatmaja",
  "Atmaja",
  "Abhaya",
  "Adwitiya",
  "Agrata",
  "Ahilya",
  "Ahalya",
  "Aishani",
  "Akshainie",
  "Akshata",
  "Akshita",
  "Akula",
  "Ambar",
  "Amodini",
  "Amrita",
  "Amritambu",
  "Anala",
  "Anamika",
  "Ananda",
  "Anandamayi",
  "Ananta",
  "Anila",
  "Anjali",
  "Anjushri",
  "Anjushree",
  "Annapurna",
  "Anshula",
  "Anuja",
  "Anusuya",
  "Anasuya",
  "Anasooya",
  "Anwesha",
  "Apsara",
  "Aruna",
  "Asha",
  "Aasa",
  "Aasha",
  "Aslesha",
  "Atreyi",
  "Atreyee",
  "Avani",
  "Abani",
  "Avantika",
  "Ayushmati",
  "Baidehi",
  "Vaidehi",
  "Bala",
  "Baala",
  "Balamani",
  "Basanti",
  "Vasanti",
  "Bela",
  "Bhadra",
  "Bhagirathi",
  "Bhagwanti",
  "Bhagwati",
  "Bhamini",
  "Bhanumati",
  "Bhaanumati",
  "Bhargavi",
  "Bhavani",
  "Bhilangana",
  "Bilwa",
  "Bilva",
  "Buddhana",
  "Chakrika",
  "Chanda",
  "Chandi",
  "Chandni",
  "Chandini",
  "Chandani",
  "Chandra",
  "Chandira",
  "Chandrabhaga",
  "Chandrakala",
  "Chandrakin",
  "Chandramani",
  "Chandrani",
  "Chandraprabha",
  "Chandraswaroopa",
  "Chandravati",
  "Chapala",
  "Charumati",
  "Charvi",
  "Chatura",
  "Chitrali",
  "Chitramala",
  "Chitrangada",
  "Daksha",
  "Dakshayani",
  "Damayanti",
  "Darshwana",
  "Deepali",
  "Dipali",
  "Deeptimoyee",
  "Deeptimayee",
  "Devangana",
  "Devani",
  "Devasree",
  "Devi",
  "Daevi",
  "Devika",
  "Daevika",
  "Dhaanyalakshmi",
  "Dhanalakshmi",
  "Dhana",
  "Dhanadeepa",
  "Dhara",
  "Dharani",
  "Dharitri",
  "Dhatri",
  "Diksha",
  "Deeksha",
  "Divya",
  "Draupadi",
  "Dulari",
  "Durga",
  "Durgeshwari",
  "Ekaparnika",
  "Elakshi",
  "Enakshi",
  "Esha",
  "Eshana",
  "Eshita",
  "Gautami",
  "Gayatri",
  "Geeta",
  "Geetanjali",
  "Gitanjali",
  "Gemine",
  "Gemini",
  "Girja",
  "Girija",
  "Gita",
  "Hamsini",
  "Harinakshi",
  "Harita",
  "Heema",
  "Himadri",
  "Himani",
  "Hiranya",
  "Indira",
  "Jaimini",
  "Jaya",
  "Jyoti",
  "Jyotsana",
  "Kali",
  "Kalinda",
  "Kalpana",
  "Kalyani",
  "Kama",
  "Kamala",
  "Kamla",
  "Kanchan",
  "Kanishka",
  "Kanti",
  "Kashyapi",
  "Kumari",
  "Kumuda",
  "Lakshmi",
  "Laxmi",
  "Lalita",
  "Lavanya",
  "Leela",
  "Lila",
  "Leela",
  "Madhuri",
  "Malti",
  "Malati",
  "Mandakini",
  "Mandaakin",
  "Mangala",
  "Mangalya",
  "Mani",
  "Manisha",
  "Manjusha",
  "Meena",
  "Mina",
  "Meenakshi",
  "Minakshi",
  "Menka",
  "Menaka",
  "Mohana",
  "Mohini",
  "Nalini",
  "Nikita",
  "Ojaswini",
  "Omana",
  "Oormila",
  "Urmila",
  "Opalina",
  "Opaline",
  "Padma",
  "Parvati",
  "Poornima",
  "Purnima",
  "Pramila",
  "Prasanna",
  "Preity",
  "Prema",
  "Priya",
  "Priyala",
  "Pushti",
  "Radha",
  "Rageswari",
  "Rageshwari",
  "Rajinder",
  "Ramaa",
  "Rati",
  "Rita",
  "Rohana",
  "Rukhmani",
  "Rukmin",
  "Rupinder",
  "Sanya",
  "Sarada",
  "Sharda",
  "Sarala",
  "Sarla",
  "Saraswati",
  "Sarisha",
  "Saroja",
  "Shakti",
  "Shakuntala",
  "Shanti",
  "Sharmila",
  "Shashi",
  "Shashikala",
  "Sheela",
  "Shivakari",
  "Shobhana",
  "Shresth",
  "Shresthi",
  "Shreya",
  "Shreyashi",
  "Shridevi",
  "Shrishti",
  "Shubha",
  "Shubhaprada",
  "Siddhi",
  "Sitara",
  "Sloka",
  "Smita",
  "Smriti",
  "Soma",
  "Subhashini",
  "Subhasini",
  "Sucheta",
  "Sudeva",
  "Sujata",
  "Sukanya",
  "Suma",
  "Suma",
  "Sumitra",
  "Sunita",
  "Suryakantam",
  "Sushma",
  "Swara",
  "Swarnalata",
  "Sweta",
  "Shwet",
  "Tanirika",
  "Tanushree",
  "Tanushri",
  "Tanushri",
  "Tanya",
  "Tara",
  "Trisha",
  "Uma",
  "Usha",
  "Vaijayanti",
  "Vaijayanthi",
  "Baijayanti",
  "Vaishvi",
  "Vaishnavi",
  "Vaishno",
  "Varalakshmi",
  "Vasudha",
  "Vasundhara",
  "Veda",
  "Vedanshi",
  "Vidya",
  "Vimala",
  "Vrinda",
  "Vrund",
  "Aadi",
  "Aadidev",
  "Aadinath",
  "Aaditya",
  "Aagam",
  "Aagney",
  "Aamod",
  "Aanandaswarup",
  "Anand Swarup",
  "Aanjaneya",
  "Anjaneya",
  "Aaryan",
  "Aryan",
  "Aatmaj",
  "Aatreya",
  "Aayushmaan",
  "Aayushman",
  "Abhaidev",
  "Abhaya",
  "Abhirath",
  "Abhisyanta",
  "Acaryatanaya",
  "Achalesvara",
  "Acharyanandana",
  "Acharyasuta",
  "Achintya",
  "Achyut",
  "Adheesh",
  "Adhiraj",
  "Adhrit",
  "Adikavi",
  "Adinath",
  "Aditeya",
  "Aditya",
  "Adityanandan",
  "Adityanandana",
  "Adripathi",
  "Advaya",
  "Agasti",
  "Agastya",
  "Agneya",
  "Aagneya",
  "Agnimitra",
  "Agniprava",
  "Agnivesh",
  "Agrata",
  "Ajit",
  "Ajeet",
  "Akroor",
  "Akshaj",
  "Akshat",
  "Akshayakeerti",
  "Alok",
  "Aalok",
  "Amaranaath",
  "Amarnath",
  "Amaresh",
  "Ambar",
  "Ameyatma",
  "Amish",
  "Amogh",
  "Amrit",
  "Anaadi",
  "Anagh",
  "Anal",
  "Anand",
  "Aanand",
  "Anang",
  "Anil",
  "Anilaabh",
  "Anilabh",
  "Anish",
  "Ankal",
  "Anunay",
  "Anurag",
  "Anuraag",
  "Archan",
  "Arindam",
  "Arjun",
  "Arnesh",
  "Arun",
  "Ashlesh",
  "Ashok",
  "Atmanand",
  "Atmananda",
  "Avadhesh",
  "Baalaaditya",
  "Baladitya",
  "Baalagopaal",
  "Balgopal",
  "Balagopal",
  "Bahula",
  "Bakula",
  "Bala",
  "Balaaditya",
  "Balachandra",
  "Balagovind",
  "Bandhu",
  "Bandhul",
  "Bankim",
  "Bankimchandra",
  "Bhadrak",
  "Bhadraksh",
  "Bhadran",
  "Bhagavaan",
  "Bhagvan",
  "Bharadwaj",
  "Bhardwaj",
  "Bharat",
  "Bhargava",
  "Bhasvan",
  "Bhaasvan",
  "Bhaswar",
  "Bhaaswar",
  "Bhaumik",
  "Bhaves",
  "Bheeshma",
  "Bhisham",
  "Bhishma",
  "Bhima",
  "Bhoj",
  "Bhramar",
  "Bhudev",
  "Bhudeva",
  "Bhupati",
  "Bhoopati",
  "Bhoopat",
  "Bhupen",
  "Bhushan",
  "Bhooshan",
  "Bhushit",
  "Bhooshit",
  "Bhuvanesh",
  "Bhuvaneshwar",
  "Bilva",
  "Bodhan",
  "Brahma",
  "Brahmabrata",
  "Brahmanandam",
  "Brahmaanand",
  "Brahmdev",
  "Brajendra",
  "Brajesh",
  "Brijesh",
  "Birjesh",
  "Budhil",
  "Chakor",
  "Chakradhar",
  "Chakravartee",
  "Chakravarti",
  "Chanakya",
  "Chaanakya",
  "Chandak",
  "Chandan",
  "Chandra",
  "Chandraayan",
  "Chandrabhan",
  "Chandradev",
  "Chandraketu",
  "Chandramauli",
  "Chandramohan",
  "Chandran",
  "Chandranath",
  "Chapal",
  "Charak",
  "Charuchandra",
  "Chaaruchandra",
  "Charuvrat",
  "Chatur",
  "Chaturaanan",
  "Chaturbhuj",
  "Chetan",
  "Chaten",
  "Chaitan",
  "Chetanaanand",
  "Chidaakaash",
  "Chidaatma",
  "Chidambar",
  "Chidambaram",
  "Chidananda",
  "Chinmayanand",
  "Chinmayananda",
  "Chiranjeev",
  "Chiranjeeve",
  "Chitraksh",
  "Daiwik",
  "Daksha",
  "Damodara",
  "Dandak",
  "Dandapaani",
  "Darshan",
  "Datta",
  "Dayaamay",
  "Dayamayee",
  "Dayaananda",
  "Dayaanidhi",
  "Kin",
  "Deenabandhu",
  "Deepan",
  "Deepankar",
  "Dipankar",
  "Deependra",
  "Dipendra",
  "Deepesh",
  "Dipesh",
  "Deeptanshu",
  "Deeptendu",
  "Diptendu",
  "Deeptiman",
  "Deeptimoy",
  "Deeptimay",
  "Dev",
  "Deb",
  "Devadatt",
  "Devagya",
  "Devajyoti",
  "Devak",
  "Devdan",
  "Deven",
  "Devesh",
  "Deveshwar",
  "Devi",
  "Devvrat",
  "Dhananjay",
  "Dhanapati",
  "Dhanpati",
  "Dhanesh",
  "Dhanu",
  "Dhanvin",
  "Dharmaketu",
  "Dhruv",
  "Dhyanesh",
  "Dhyaneshwar",
  "Digambar",
  "Digambara",
  "Dinakar",
  "Dinkar",
  "Dinesh",
  "Divaakar",
  "Divakar",
  "Deevakar",
  "Divjot",
  "Dron",
  "Drona",
  "Dwaipayan",
  "Dwaipayana",
  "Eekalabya",
  "Ekalavya",
  "Ekaksh",
  "Ekaaksh",
  "Ekaling",
  "Ekdant",
  "Ekadant",
  "Gajaadhar",
  "Gajadhar",
  "Gajbaahu",
  "Gajabahu",
  "Ganak",
  "Ganaka",
  "Ganapati",
  "Gandharv",
  "Gandharva",
  "Ganesh",
  "Gangesh",
  "Garud",
  "Garuda",
  "Gati",
  "Gatik",
  "Gaurang",
  "Gauraang",
  "Gauranga",
  "Gouranga",
  "Gautam",
  "Gautama",
  "Goutam",
  "Ghanaanand",
  "Ghanshyam",
  "Ghanashyam",
  "Giri",
  "Girik",
  "Girika",
  "Girindra",
  "Giriraaj",
  "Giriraj",
  "Girish",
  "Gopal",
  "Gopaal",
  "Gopi",
  "Gopee",
  "Gorakhnath",
  "Gorakhanatha",
  "Goswamee",
  "Goswami",
  "Gotum",
  "Gautam",
  "Govinda",
  "Gobinda",
  "Gudakesha",
  "Gudakesa",
  "Gurdev",
  "Guru",
  "Hari",
  "Harinarayan",
  "Harit",
  "Himadri",
  "Hiranmay",
  "Hiranmaya",
  "Hiranya",
  "Inder",
  "Indra",
  "Indra",
  "Jagadish",
  "Jagadisha",
  "Jagathi",
  "Jagdeep",
  "Jagdish",
  "Jagmeet",
  "Jahnu",
  "Jai",
  "Javas",
  "Jay",
  "Jitendra",
  "Jitender",
  "Jyotis",
  "Kailash",
  "Kama",
  "Kamalesh",
  "Kamlesh",
  "Kanak",
  "Kanaka",
  "Kannan",
  "Kannen",
  "Karan",
  "Karthik",
  "Kartik",
  "Karunanidhi",
  "Kashyap",
  "Kiran",
  "Kirti",
  "Keerti",
  "Krishna",
  "Krishnadas",
  "Krishnadasa",
  "Kumar",
  "Lai",
  "Lakshman",
  "Laxman",
  "Lakshmidhar",
  "Lakshminath",
  "Lal",
  "Laal",
  "Mahendra",
  "Mohinder",
  "Mahesh",
  "Maheswar",
  "Mani",
  "Manik",
  "Manikya",
  "Manoj",
  "Marut",
  "Mayoor",
  "Meghnad",
  "Meghnath",
  "Mohan",
  "Mukesh",
  "Mukul",
  "Nagabhushanam",
  "Nanda",
  "Narayan",
  "Narendra",
  "Narinder",
  "Naveen",
  "Navin",
  "Nawal",
  "Naval",
  "Nimit",
  "Niranjan",
  "Nirbhay",
  "Niro",
  "Param",
  "Paramartha",
  "Pran",
  "Pranay",
  "Prasad",
  "Prathamesh",
  "Prayag",
  "Prem",
  "Puneet",
  "Purushottam",
  "Rahul",
  "Raj",
  "Rajan",
  "Rajendra",
  "Rajinder",
  "Rajiv",
  "Rakesh",
  "Ramesh",
  "Rameshwar",
  "Ranjit",
  "Ranjeet",
  "Ravi",
  "Ritesh",
  "Rohan",
  "Rohit",
  "Rudra",
  "Sachin",
  "Sameer",
  "Samir",
  "Sanjay",
  "Sanka",
  "Sarvin",
  "Satish",
  "Satyen",
  "Shankar",
  "Shantanu",
  "Shashi",
  "Sher",
  "Shiv",
  "Siddarth",
  "Siddhran",
  "Som",
  "Somu",
  "Somnath",
  "Subhash",
  "Subodh",
  "Suman",
  "Suresh",
  "Surya",
  "Suryakant",
  "Suryakanta",
  "Sushil",
  "Susheel",
  "Swami",
  "Swapnil",
  "Tapan",
  "Tara",
  "Tarun",
  "Tej",
  "Tejas",
  "Trilochan",
  "Trilochana",
  "Trilok",
  "Trilokesh",
  "Triloki",
  "Triloki Nath",
  "Trilokanath",
  "Tushar",
  "Udai",
  "Udit",
  "Ujjawal",
  "Ujjwal",
  "Umang",
  "Upendra",
  "Uttam",
  "Vasudev",
  "Vasudeva",
  "Vedang",
  "Vedanga",
  "Vidhya",
  "Vidur",
  "Vidhur",
  "Vijay",
  "Vimal",
  "Vinay",
  "Vishnu",
  "Bishnu",
  "Vishwamitra",
  "Vyas",
  "Yogendra",
  "Yoginder",
  "Yogesh"
];

},{}],"node_modules/faker/lib/locales/en_IND/name/last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Abbott",
  "Achari",
  "Acharya",
  "Adiga",
  "Agarwal",
  "Ahluwalia",
  "Ahuja",
  "Arora",
  "Asan",
  "Bandopadhyay",
  "Banerjee",
  "Bharadwaj",
  "Bhat",
  "Butt",
  "Bhattacharya",
  "Bhattathiri",
  "Chaturvedi",
  "Chattopadhyay",
  "Chopra",
  "Desai",
  "Deshpande",
  "Devar",
  "Dhawan",
  "Dubashi",
  "Dutta",
  "Dwivedi",
  "Embranthiri",
  "Ganaka",
  "Gandhi",
  "Gill",
  "Gowda",
  "Guha",
  "Guneta",
  "Gupta",
  "Iyer",
  "Iyengar",
  "Jain",
  "Jha",
  "Johar",
  "Joshi",
  "Kakkar",
  "Kaniyar",
  "Kapoor",
  "Kaul",
  "Kaur",
  "Khan",
  "Khanna",
  "Khatri",
  "Kocchar",
  "Mahajan",
  "Malik",
  "Marar",
  "Menon",
  "Mehra",
  "Mehrotra",
  "Mishra",
  "Mukhopadhyay",
  "Nayar",
  "Naik",
  "Nair",
  "Nambeesan",
  "Namboothiri",
  "Nehru",
  "Pandey",
  "Panicker",
  "Patel",
  "Patil",
  "Pilla",
  "Pillai",
  "Pothuvaal",
  "Prajapat",
  "Rana",
  "Reddy",
  "Saini",
  "Sethi",
  "Shah",
  "Sharma",
  "Shukla",
  "Singh",
  "Sinha",
  "Somayaji",
  "Tagore",
  "Talwar",
  "Tandon",
  "Trivedi",
  "Varrier",
  "Varma",
  "Varman",
  "Verma"
];

},{}],"node_modules/faker/lib/locales/en_IND/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");

},{"./first_name":"node_modules/faker/lib/locales/en_IND/name/first_name.js","./last_name":"node_modules/faker/lib/locales/en_IND/name/last_name.js"}],"node_modules/faker/lib/locales/en_IND/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "?#? #?#"
];

},{}],"node_modules/faker/lib/locales/en_IND/address/state.js":[function(require,module,exports) {
module["exports"] = [
  "Andra Pradesh",
  "Arunachal Pradesh",
  "Assam",
  "Bihar",
  "Chhattisgarh",
  "Goa",
  "Gujarat",
  "Haryana",
  "Himachal Pradesh",
  "Jammu and Kashmir",
  "Jharkhand",
  "Karnataka",
  "Kerala",
  "Madya Pradesh",
  "Maharashtra",
  "Manipur",
  "Meghalaya",
  "Mizoram",
  "Nagaland",
  "Orissa",
  "Punjab",
  "Rajasthan",
  "Sikkim",
  "Tamil Nadu",
  "Tripura",
  "Uttaranchal",
  "Uttar Pradesh",
  "West Bengal",
  "Andaman and Nicobar Islands",
  "Chandigarh",
  "Dadar and Nagar Haveli",
  "Daman and Diu",
  "Delhi",
  "Lakshadweep",
  "Pondicherry"
];

},{}],"node_modules/faker/lib/locales/en_IND/address/state_abbr.js":[function(require,module,exports) {
module["exports"] = [
  "AP",
  "AR",
  "AS",
  "BR",
  "CG",
  "DL",
  "GA",
  "GJ",
  "HR",
  "HP",
  "JK",
  "JS",
  "KA",
  "KL",
  "MP",
  "MH",
  "MN",
  "ML",
  "MZ",
  "NL",
  "OR",
  "PB",
  "RJ",
  "SK",
  "TN",
  "TR",
  "UK",
  "UP",
  "WB",
  "AN",
  "CH",
  "DN",
  "DD",
  "LD",
  "PY"
];

},{}],"node_modules/faker/lib/locales/en_IND/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "India",
  "Indian Republic",
  "Bharat",
  "Hindustan"
];

},{}],"node_modules/faker/lib/locales/en_IND/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.postcode = require("./postcode");
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.default_country = require("./default_country");

},{"./postcode":"node_modules/faker/lib/locales/en_IND/address/postcode.js","./state":"node_modules/faker/lib/locales/en_IND/address/state.js","./state_abbr":"node_modules/faker/lib/locales/en_IND/address/state_abbr.js","./default_country":"node_modules/faker/lib/locales/en_IND/address/default_country.js"}],"node_modules/faker/lib/locales/en_IND/internet/free_email.js":[function(require,module,exports) {
module["exports"] = [
  "gmail.com",
  "yahoo.co.in",
  "hotmail.com"
];

},{}],"node_modules/faker/lib/locales/en_IND/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "in",
  "com",
  "biz",
  "info",
  "name",
  "net",
  "org",
  "co.in"
];

},{}],"node_modules/faker/lib/locales/en_IND/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.free_email = require("./free_email");
internet.domain_suffix = require("./domain_suffix");

},{"./free_email":"node_modules/faker/lib/locales/en_IND/internet/free_email.js","./domain_suffix":"node_modules/faker/lib/locales/en_IND/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/en_IND/company/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "Pvt Ltd",
  "Limited",
  "Ltd",
  "and Sons",
  "Corp",
  "Group",
  "Brothers"
];

},{}],"node_modules/faker/lib/locales/en_IND/company/index.js":[function(require,module,exports) {
var company = {};
module['exports'] = company;
company.suffix = require("./suffix");

},{"./suffix":"node_modules/faker/lib/locales/en_IND/company/suffix.js"}],"node_modules/faker/lib/locales/en_IND/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "+91###-###-####",
  "+91##########",
  "+91-###-#######"
];

},{}],"node_modules/faker/lib/locales/en_IND/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/en_IND/phone_number/formats.js"}],"node_modules/faker/lib/locales/en_IND/index.js":[function(require,module,exports) {
var en_IND = {};
module['exports'] = en_IND;
en_IND.title = "India (English)";
en_IND.name = require("./name");
en_IND.address = require("./address");
en_IND.internet = require("./internet");
en_IND.company = require("./company");
en_IND.phone_number = require("./phone_number");

},{"./name":"node_modules/faker/lib/locales/en_IND/name/index.js","./address":"node_modules/faker/lib/locales/en_IND/address/index.js","./internet":"node_modules/faker/lib/locales/en_IND/internet/index.js","./company":"node_modules/faker/lib/locales/en_IND/company/index.js","./phone_number":"node_modules/faker/lib/locales/en_IND/phone_number/index.js"}],"node_modules/faker/lib/locales/en_US/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "com",
  "us",
  "biz",
  "info",
  "name",
  "net",
  "org"
];

},{}],"node_modules/faker/lib/locales/en_US/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.domain_suffix = require("./domain_suffix");

},{"./domain_suffix":"node_modules/faker/lib/locales/en_US/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/en_US/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "United States",
  "United States of America",
  "USA"
];

},{}],"node_modules/faker/lib/locales/en_US/address/postcode_by_state.js":[function(require,module,exports) {
module["exports"] = {
  "AL": "350##",
  "AK": "995##",
  "AS": "967##",
  "AZ": "850##",
  "AR": "717##",
  "CA": "900##",
  "CO": "800##",
  "CT": "061##",
  "DC": "204##",
  "DE": "198##",
  "FL": "322##",
  "GA": "301##",
  "HI": "967##",
  "ID": "832##",
  "IL": "600##",
  "IN": "463##",
  "IA": "510##",
  "KS": "666##",
  "KY": "404##",
  "LA": "701##",
  "ME": "042##",
  "MD": "210##",
  "MA": "026##",
  "MI": "480##",
  "MN": "555##",
  "MS": "387##",
  "MO": "650##",
  "MT": "590##",
  "NE": "688##",
  "NV": "898##",
  "NH": "036##",
  "NJ": "076##",
  "NM": "880##",
  "NY": "122##",
  "NC": "288##",
  "ND": "586##",
  "OH": "444##",
  "OK": "730##",
  "OR": "979##",
  "PA": "186##",
  "RI": "029##",
  "SC": "299##",
  "SD": "577##",
  "TN": "383##",
  "TX": "798##",
  "UT": "847##",
  "VT": "050##",
  "VA": "222##",
  "WA": "990##",
  "WV": "247##",
  "WI": "549##",
  "WY": "831##"
};

},{}],"node_modules/faker/lib/locales/en_US/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.default_country = require("./default_country");
address.postcode_by_state = require("./postcode_by_state");

},{"./default_country":"node_modules/faker/lib/locales/en_US/address/default_country.js","./postcode_by_state":"node_modules/faker/lib/locales/en_US/address/postcode_by_state.js"}],"node_modules/faker/lib/locales/en_US/phone_number/area_code.js":[function(require,module,exports) {
module["exports"] = [
  "201",
  "202",
  "203",
  "205",
  "206",
  "207",
  "208",
  "209",
  "210",
  "212",
  "213",
  "214",
  "215",
  "216",
  "217",
  "218",
  "219",
  "224",
  "225",
  "227",
  "228",
  "229",
  "231",
  "234",
  "239",
  "240",
  "248",
  "251",
  "252",
  "253",
  "254",
  "256",
  "260",
  "262",
  "267",
  "269",
  "270",
  "276",
  "281",
  "283",
  "301",
  "302",
  "303",
  "304",
  "305",
  "307",
  "308",
  "309",
  "310",
  "312",
  "313",
  "314",
  "315",
  "316",
  "317",
  "318",
  "319",
  "320",
  "321",
  "323",
  "330",
  "331",
  "334",
  "336",
  "337",
  "339",
  "347",
  "351",
  "352",
  "360",
  "361",
  "386",
  "401",
  "402",
  "404",
  "405",
  "406",
  "407",
  "408",
  "409",
  "410",
  "412",
  "413",
  "414",
  "415",
  "417",
  "419",
  "423",
  "424",
  "425",
  "434",
  "435",
  "440",
  "443",
  "445",
  "464",
  "469",
  "470",
  "475",
  "478",
  "479",
  "480",
  "484",
  "501",
  "502",
  "503",
  "504",
  "505",
  "507",
  "508",
  "509",
  "510",
  "512",
  "513",
  "515",
  "516",
  "517",
  "518",
  "520",
  "530",
  "540",
  "541",
  "551",
  "557",
  "559",
  "561",
  "562",
  "563",
  "564",
  "567",
  "570",
  "571",
  "573",
  "574",
  "580",
  "585",
  "586",
  "601",
  "602",
  "603",
  "605",
  "606",
  "607",
  "608",
  "609",
  "610",
  "612",
  "614",
  "615",
  "616",
  "617",
  "618",
  "619",
  "620",
  "623",
  "626",
  "630",
  "631",
  "636",
  "641",
  "646",
  "650",
  "651",
  "660",
  "661",
  "662",
  "667",
  "678",
  "682",
  "701",
  "702",
  "703",
  "704",
  "706",
  "707",
  "708",
  "712",
  "713",
  "714",
  "715",
  "716",
  "717",
  "718",
  "719",
  "720",
  "724",
  "727",
  "731",
  "732",
  "734",
  "737",
  "740",
  "754",
  "757",
  "760",
  "763",
  "765",
  "770",
  "772",
  "773",
  "774",
  "775",
  "781",
  "785",
  "786",
  "801",
  "802",
  "803",
  "804",
  "805",
  "806",
  "808",
  "810",
  "812",
  "813",
  "814",
  "815",
  "816",
  "817",
  "818",
  "828",
  "830",
  "831",
  "832",
  "835",
  "843",
  "845",
  "847",
  "848",
  "850",
  "856",
  "857",
  "858",
  "859",
  "860",
  "862",
  "863",
  "864",
  "865",
  "870",
  "872",
  "878",
  "901",
  "903",
  "904",
  "906",
  "907",
  "908",
  "909",
  "910",
  "912",
  "913",
  "914",
  "915",
  "916",
  "917",
  "918",
  "919",
  "920",
  "925",
  "928",
  "931",
  "936",
  "937",
  "940",
  "941",
  "947",
  "949",
  "952",
  "954",
  "956",
  "959",
  "970",
  "971",
  "972",
  "973",
  "975",
  "978",
  "979",
  "980",
  "984",
  "985",
  "989"
];

},{}],"node_modules/faker/lib/locales/en_US/phone_number/exchange_code.js":[function(require,module,exports) {
module["exports"] = [
  "201",
  "202",
  "203",
  "205",
  "206",
  "207",
  "208",
  "209",
  "210",
  "212",
  "213",
  "214",
  "215",
  "216",
  "217",
  "218",
  "219",
  "224",
  "225",
  "227",
  "228",
  "229",
  "231",
  "234",
  "239",
  "240",
  "248",
  "251",
  "252",
  "253",
  "254",
  "256",
  "260",
  "262",
  "267",
  "269",
  "270",
  "276",
  "281",
  "283",
  "301",
  "302",
  "303",
  "304",
  "305",
  "307",
  "308",
  "309",
  "310",
  "312",
  "313",
  "314",
  "315",
  "316",
  "317",
  "318",
  "319",
  "320",
  "321",
  "323",
  "330",
  "331",
  "334",
  "336",
  "337",
  "339",
  "347",
  "351",
  "352",
  "360",
  "361",
  "386",
  "401",
  "402",
  "404",
  "405",
  "406",
  "407",
  "408",
  "409",
  "410",
  "412",
  "413",
  "414",
  "415",
  "417",
  "419",
  "423",
  "424",
  "425",
  "434",
  "435",
  "440",
  "443",
  "445",
  "464",
  "469",
  "470",
  "475",
  "478",
  "479",
  "480",
  "484",
  "501",
  "502",
  "503",
  "504",
  "505",
  "507",
  "508",
  "509",
  "510",
  "512",
  "513",
  "515",
  "516",
  "517",
  "518",
  "520",
  "530",
  "540",
  "541",
  "551",
  "557",
  "559",
  "561",
  "562",
  "563",
  "564",
  "567",
  "570",
  "571",
  "573",
  "574",
  "580",
  "585",
  "586",
  "601",
  "602",
  "603",
  "605",
  "606",
  "607",
  "608",
  "609",
  "610",
  "612",
  "614",
  "615",
  "616",
  "617",
  "618",
  "619",
  "620",
  "623",
  "626",
  "630",
  "631",
  "636",
  "641",
  "646",
  "650",
  "651",
  "660",
  "661",
  "662",
  "667",
  "678",
  "682",
  "701",
  "702",
  "703",
  "704",
  "706",
  "707",
  "708",
  "712",
  "713",
  "714",
  "715",
  "716",
  "717",
  "718",
  "719",
  "720",
  "724",
  "727",
  "731",
  "732",
  "734",
  "737",
  "740",
  "754",
  "757",
  "760",
  "763",
  "765",
  "770",
  "772",
  "773",
  "774",
  "775",
  "781",
  "785",
  "786",
  "801",
  "802",
  "803",
  "804",
  "805",
  "806",
  "808",
  "810",
  "812",
  "813",
  "814",
  "815",
  "816",
  "817",
  "818",
  "828",
  "830",
  "831",
  "832",
  "835",
  "843",
  "845",
  "847",
  "848",
  "850",
  "856",
  "857",
  "858",
  "859",
  "860",
  "862",
  "863",
  "864",
  "865",
  "870",
  "872",
  "878",
  "901",
  "903",
  "904",
  "906",
  "907",
  "908",
  "909",
  "910",
  "912",
  "913",
  "914",
  "915",
  "916",
  "917",
  "918",
  "919",
  "920",
  "925",
  "928",
  "931",
  "936",
  "937",
  "940",
  "941",
  "947",
  "949",
  "952",
  "954",
  "956",
  "959",
  "970",
  "971",
  "972",
  "973",
  "975",
  "978",
  "979",
  "980",
  "984",
  "985",
  "989"
];

},{}],"node_modules/faker/lib/locales/en_US/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.area_code = require("./area_code");
phone_number.exchange_code = require("./exchange_code");

},{"./area_code":"node_modules/faker/lib/locales/en_US/phone_number/area_code.js","./exchange_code":"node_modules/faker/lib/locales/en_US/phone_number/exchange_code.js"}],"node_modules/faker/lib/locales/en_US/index.js":[function(require,module,exports) {
var en_US = {};
module['exports'] = en_US;
en_US.title = "United States (English)";
en_US.internet = require("./internet");
en_US.address = require("./address");
en_US.phone_number = require("./phone_number");

},{"./internet":"node_modules/faker/lib/locales/en_US/internet/index.js","./address":"node_modules/faker/lib/locales/en_US/address/index.js","./phone_number":"node_modules/faker/lib/locales/en_US/phone_number/index.js"}],"node_modules/faker/lib/locales/en_au_ocker/name/first_name.js":[function(require,module,exports) {
module["exports"] = [
  "Charlotte",
  "Ava",
  "Chloe",
  "Emily",
  "Olivia",
  "Zoe",
  "Lily",
  "Sophie",
  "Amelia",
  "Sofia",
  "Ella",
  "Isabella",
  "Ruby",
  "Sienna",
  "Mia+3",
  "Grace",
  "Emma",
  "Ivy",
  "Layla",
  "Abigail",
  "Isla",
  "Hannah",
  "Zara",
  "Lucy",
  "Evie",
  "Annabelle",
  "Madison",
  "Alice",
  "Georgia",
  "Maya",
  "Madeline",
  "Audrey",
  "Scarlett",
  "Isabelle",
  "Chelsea",
  "Mila",
  "Holly",
  "Indiana",
  "Poppy",
  "Harper",
  "Sarah",
  "Alyssa",
  "Jasmine",
  "Imogen",
  "Hayley",
  "Pheobe",
  "Eva",
  "Evelyn",
  "Mackenzie",
  "Ayla",
  "Oliver",
  "Jack",
  "Jackson",
  "William",
  "Ethan",
  "Charlie",
  "Lucas",
  "Cooper",
  "Lachlan",
  "Noah",
  "Liam",
  "Alexander",
  "Max",
  "Isaac",
  "Thomas",
  "Xavier",
  "Oscar",
  "Benjamin",
  "Aiden",
  "Mason",
  "Samuel",
  "James",
  "Levi",
  "Riley",
  "Harrison",
  "Ryan",
  "Henry",
  "Jacob",
  "Joshua",
  "Leo",
  "Zach",
  "Harry",
  "Hunter",
  "Flynn",
  "Archie",
  "Tyler",
  "Elijah",
  "Hayden",
  "Jayden",
  "Blake",
  "Archer",
  "Ashton",
  "Sebastian",
  "Zachery",
  "Lincoln",
  "Mitchell",
  "Luca",
  "Nathan",
  "Kai",
  "Connor",
  "Tom",
  "Nigel",
  "Matt",
  "Sean"
];

},{}],"node_modules/faker/lib/locales/en_au_ocker/name/last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Smith",
  "Jones",
  "Williams",
  "Brown",
  "Wilson",
  "Taylor",
  "Morton",
  "White",
  "Martin",
  "Anderson",
  "Thompson",
  "Nguyen",
  "Thomas",
  "Walker",
  "Harris",
  "Lee",
  "Ryan",
  "Robinson",
  "Kelly",
  "King",
  "Rausch",
  "Ridge",
  "Connolly",
  "LeQuesne"
];

},{}],"node_modules/faker/lib/locales/en_au_ocker/name/ocker_first_name.js":[function(require,module,exports) {
module["exports"] = [
  "Bazza",
  "Bluey",
  "Davo",
  "Johno",
  "Shano",
  "Shazza"
];

},{}],"node_modules/faker/lib/locales/en_au_ocker/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");
name.ocker_first_name = require("./ocker_first_name");

},{"./first_name":"node_modules/faker/lib/locales/en_au_ocker/name/first_name.js","./last_name":"node_modules/faker/lib/locales/en_au_ocker/name/last_name.js","./ocker_first_name":"node_modules/faker/lib/locales/en_au_ocker/name/ocker_first_name.js"}],"node_modules/faker/lib/locales/en_au_ocker/company/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "Pty Ltd",
  "and Sons",
  "Corp",
  "Group",
  "Brothers",
  "Partners"
];

},{}],"node_modules/faker/lib/locales/en_au_ocker/company/index.js":[function(require,module,exports) {
var company = {};
module['exports'] = company;
company.suffix = require("./suffix");

},{"./suffix":"node_modules/faker/lib/locales/en_au_ocker/company/suffix.js"}],"node_modules/faker/lib/locales/en_au_ocker/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "com.au",
  "com",
  "net.au",
  "net",
  "org.au",
  "org"
];

},{}],"node_modules/faker/lib/locales/en_au_ocker/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.domain_suffix = require("./domain_suffix");

},{"./domain_suffix":"node_modules/faker/lib/locales/en_au_ocker/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/en_au_ocker/address/street_root.js":[function(require,module,exports) {
module["exports"] = [
  "Ramsay Street",
  "Bonnie Doon",
  "Cavill Avenue",
  "Queen Street"
];

},{}],"node_modules/faker/lib/locales/en_au_ocker/address/street_name.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_root}"
];

},{}],"node_modules/faker/lib/locales/en_au_ocker/address/city_prefix.js":[function(require,module,exports) {
module["exports"] = [
  "Bondi",
  "Burleigh Heads",
  "Carlton",
  "Fitzroy",
  "Fremantle",
  "Glenelg",
  "Manly",
  "Noosa",
  "Stones Corner",
  "St Kilda",
  "Surry Hills",
  "Yarra Valley"
];

},{}],"node_modules/faker/lib/locales/en_au_ocker/address/city.js":[function(require,module,exports) {
module["exports"] = [
  "#{city_prefix}"
];

},{}],"node_modules/faker/lib/locales/en_au_ocker/address/state_abbr.js":[function(require,module,exports) {
module["exports"] = [
  "NSW",
  "QLD",
  "NT",
  "SA",
  "WA",
  "TAS",
  "ACT",
  "VIC"
];

},{}],"node_modules/faker/lib/locales/en_au_ocker/address/region.js":[function(require,module,exports) {
module["exports"] = [
  "South East Queensland",
  "Wide Bay Burnett",
  "Margaret River",
  "Port Pirie",
  "Gippsland",
  "Elizabeth",
  "Barossa"
];

},{}],"node_modules/faker/lib/locales/en_au_ocker/address/state.js":[function(require,module,exports) {
module["exports"] = [
  "New South Wales",
  "Queensland",
  "Northern Territory",
  "South Australia",
  "Western Australia",
  "Tasmania",
  "Australian Capital Territory",
  "Victoria"
];

},{}],"node_modules/faker/lib/locales/en_au_ocker/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "0###",
  "2###",
  "3###",
  "4###",
  "5###",
  "6###",
  "7###"
];

},{}],"node_modules/faker/lib/locales/en_au_ocker/address/building_number.js":[function(require,module,exports) {
module["exports"] = [
  "####",
  "###",
  "##"
];

},{}],"node_modules/faker/lib/locales/en_au_ocker/address/street_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "Avenue",
  "Boulevard",
  "Circle",
  "Circuit",
  "Court",
  "Crescent",
  "Crest",
  "Drive",
  "Estate Dr",
  "Grove",
  "Hill",
  "Island",
  "Junction",
  "Knoll",
  "Lane",
  "Loop",
  "Mall",
  "Manor",
  "Meadow",
  "Mews",
  "Parade",
  "Parkway",
  "Pass",
  "Place",
  "Plaza",
  "Ridge",
  "Road",
  "Run",
  "Square",
  "Station St",
  "Street",
  "Summit",
  "Terrace",
  "Track",
  "Trail",
  "View Rd",
  "Way"
];

},{}],"node_modules/faker/lib/locales/en_au_ocker/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "Australia"
];

},{}],"node_modules/faker/lib/locales/en_au_ocker/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.street_root = require("./street_root");
address.street_name = require("./street_name");
address.city_prefix = require("./city_prefix");
address.city = require("./city");
address.state_abbr = require("./state_abbr");
address.region = require("./region");
address.state = require("./state");
address.postcode = require("./postcode");
address.building_number = require("./building_number");
address.street_suffix = require("./street_suffix");
address.default_country = require("./default_country");

},{"./street_root":"node_modules/faker/lib/locales/en_au_ocker/address/street_root.js","./street_name":"node_modules/faker/lib/locales/en_au_ocker/address/street_name.js","./city_prefix":"node_modules/faker/lib/locales/en_au_ocker/address/city_prefix.js","./city":"node_modules/faker/lib/locales/en_au_ocker/address/city.js","./state_abbr":"node_modules/faker/lib/locales/en_au_ocker/address/state_abbr.js","./region":"node_modules/faker/lib/locales/en_au_ocker/address/region.js","./state":"node_modules/faker/lib/locales/en_au_ocker/address/state.js","./postcode":"node_modules/faker/lib/locales/en_au_ocker/address/postcode.js","./building_number":"node_modules/faker/lib/locales/en_au_ocker/address/building_number.js","./street_suffix":"node_modules/faker/lib/locales/en_au_ocker/address/street_suffix.js","./default_country":"node_modules/faker/lib/locales/en_au_ocker/address/default_country.js"}],"node_modules/faker/lib/locales/en_au_ocker/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "0# #### ####",
  "+61 # #### ####",
  "04## ### ###",
  "+61 4## ### ###"
];

},{}],"node_modules/faker/lib/locales/en_au_ocker/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/en_au_ocker/phone_number/formats.js"}],"node_modules/faker/lib/locales/en_au_ocker/index.js":[function(require,module,exports) {
var en_au_ocker = {};
module['exports'] = en_au_ocker;
en_au_ocker.title = "Australia Ocker (English)";
en_au_ocker.name = require("./name");
en_au_ocker.company = require("./company");
en_au_ocker.internet = require("./internet");
en_au_ocker.address = require("./address");
en_au_ocker.phone_number = require("./phone_number");

},{"./name":"node_modules/faker/lib/locales/en_au_ocker/name/index.js","./company":"node_modules/faker/lib/locales/en_au_ocker/company/index.js","./internet":"node_modules/faker/lib/locales/en_au_ocker/internet/index.js","./address":"node_modules/faker/lib/locales/en_au_ocker/address/index.js","./phone_number":"node_modules/faker/lib/locales/en_au_ocker/phone_number/index.js"}],"node_modules/faker/lib/locales/es/address/city_prefix.js":[function(require,module,exports) {
module["exports"] = [
  "Parla",
  "Telde",
  "Baracaldo",
  "San Fernando",
  "Torrevieja",
  "Lugo",
  "Santiago de Compostela",
  "Gerona",
  "Cáceres",
  "Lorca",
  "Coslada",
  "Talavera de la Reina",
  "El Puerto de Santa María",
  "Cornellá de Llobregat",
  "Avilés",
  "Palencia",
  "Gecho",
  "Orihuela",
  "Pontevedra",
  "Pozuelo de Alarcón",
  "Toledo",
  "El Ejido",
  "Guadalajara",
  "Gandía",
  "Ceuta",
  "Ferrol",
  "Chiclana de la Frontera",
  "Manresa",
  "Roquetas de Mar",
  "Ciudad Real",
  "Rubí",
  "Benidorm",
  "San Sebastían de los Reyes",
  "Ponferrada",
  "Zamora",
  "Alcalá de Guadaira",
  "Fuengirola",
  "Mijas",
  "Sanlúcar de Barrameda",
  "La Línea de la Concepción",
  "Majadahonda",
  "Sagunto",
  "El Prat de LLobregat",
  "Viladecans",
  "Linares",
  "Alcoy",
  "Irún",
  "Estepona",
  "Torremolinos",
  "Rivas-Vaciamadrid",
  "Molina de Segura",
  "Paterna",
  "Granollers",
  "Santa Lucía de Tirajana",
  "Motril",
  "Cerdañola del Vallés",
  "Arrecife",
  "Segovia",
  "Torrelavega",
  "Elda",
  "Mérida",
  "Ávila",
  "Valdemoro",
  "Cuenta",
  "Collado Villalba",
  "Benalmádena",
  "Mollet del Vallés",
  "Puertollano",
  "Madrid",
  "Barcelona",
  "Valencia",
  "Sevilla",
  "Zaragoza",
  "Málaga",
  "Murcia",
  "Palma de Mallorca",
  "Las Palmas de Gran Canaria",
  "Bilbao",
  "Córdoba",
  "Alicante",
  "Valladolid",
  "Vigo",
  "Gijón",
  "Hospitalet de LLobregat",
  "La Coruña",
  "Granada",
  "Vitoria",
  "Elche",
  "Santa Cruz de Tenerife",
  "Oviedo",
  "Badalona",
  "Cartagena",
  "Móstoles",
  "Jerez de la Frontera",
  "Tarrasa",
  "Sabadell",
  "Alcalá de Henares",
  "Pamplona",
  "Fuenlabrada",
  "Almería",
  "San Sebastián",
  "Leganés",
  "Santander",
  "Burgos",
  "Castellón de la Plana",
  "Alcorcón",
  "Albacete",
  "Getafe",
  "Salamanca",
  "Huelva",
  "Logroño",
  "Badajoz",
  "San Cristróbal de la Laguna",
  "León",
  "Tarragona",
  "Cádiz",
  "Lérida",
  "Marbella",
  "Mataró",
  "Dos Hermanas",
  "Santa Coloma de Gramanet",
  "Jaén",
  "Algeciras",
  "Torrejón de Ardoz",
  "Orense",
  "Alcobendas",
  "Reus",
  "Calahorra",
  "Inca"
];

},{}],"node_modules/faker/lib/locales/es/address/country.js":[function(require,module,exports) {
module["exports"] = [
  "Afganistán",
  "Albania",
  "Argelia",
  "Andorra",
  "Angola",
  "Argentina",
  "Armenia",
  "Aruba",
  "Australia",
  "Austria",
  "Azerbayán",
  "Bahamas",
  "Barein",
  "Bangladesh",
  "Barbados",
  "Bielorusia",
  "Bélgica",
  "Belice",
  "Bermuda",
  "Bután",
  "Bolivia",
  "Bosnia Herzegovina",
  "Botswana",
  "Brasil",
  "Bulgaria",
  "Burkina Faso",
  "Burundi",
  "Camboya",
  "Camerún",
  "Canada",
  "Cabo Verde",
  "Islas Caimán",
  "Chad",
  "Chile",
  "China",
  "Isla de Navidad",
  "Colombia",
  "Comodos",
  "Congo",
  "Costa Rica",
  "Costa de Marfil",
  "Croacia",
  "Cuba",
  "Chipre",
  "República Checa",
  "Dinamarca",
  "Dominica",
  "República Dominicana",
  "Ecuador",
  "Egipto",
  "El Salvador",
  "Guinea Ecuatorial",
  "Eritrea",
  "Estonia",
  "Etiopía",
  "Islas Faro",
  "Fiji",
  "Finlandia",
  "Francia",
  "Gabón",
  "Gambia",
  "Georgia",
  "Alemania",
  "Ghana",
  "Grecia",
  "Groenlandia",
  "Granada",
  "Guadalupe",
  "Guam",
  "Guatemala",
  "Guinea",
  "Guinea-Bisau",
  "Guayana",
  "Haiti",
  "Honduras",
  "Hong Kong",
  "Hungria",
  "Islandia",
  "India",
  "Indonesia",
  "Iran",
  "Irak",
  "Irlanda",
  "Italia",
  "Jamaica",
  "Japón",
  "Jordania",
  "Kazajistan",
  "Kenia",
  "Kiribati",
  "Corea",
  "Kuwait",
  "Letonia",
  "Líbano",
  "Liberia",
  "Liechtenstein",
  "Lituania",
  "Luxemburgo",
  "Macao",
  "Macedonia",
  "Madagascar",
  "Malawi",
  "Malasia",
  "Maldivas",
  "Mali",
  "Malta",
  "Martinica",
  "Mauritania",
  "Méjico",
  "Micronesia",
  "Moldavia",
  "Mónaco",
  "Mongolia",
  "Montenegro",
  "Montserrat",
  "Marruecos",
  "Mozambique",
  "Namibia",
  "Nauru",
  "Nepal",
  "Holanda",
  "Nueva Zelanda",
  "Nicaragua",
  "Niger",
  "Nigeria",
  "Noruega",
  "Omán",
  "Pakistan",
  "Panamá",
  "Papúa Nueva Guinea",
  "Paraguay",
  "Perú",
  "Filipinas",
  "Poland",
  "Portugal",
  "Puerto Rico",
  "Rusia",
  "Ruanda",
  "Samoa",
  "San Marino",
  "Santo Tomé y Principe",
  "Arabia Saudí",
  "Senegal",
  "Serbia",
  "Seychelles",
  "Sierra Leona",
  "Singapur",
  "Eslovaquia",
  "Eslovenia",
  "Somalia",
  "España",
  "Sri Lanka",
  "Sudán",
  "Suriname",
  "Suecia",
  "Suiza",
  "Siria",
  "Taiwan",
  "Tajikistan",
  "Tanzania",
  "Tailandia",
  "Timor-Leste",
  "Togo",
  "Tonga",
  "Trinidad y Tobago",
  "Tunez",
  "Turquia",
  "Uganda",
  "Ucrania",
  "Emiratos Árabes Unidos",
  "Reino Unido",
  "Estados Unidos de América",
  "Uruguay",
  "Uzbekistan",
  "Vanuatu",
  "Venezuela",
  "Vietnam",
  "Yemen",
  "Zambia",
  "Zimbabwe"
];

},{}],"node_modules/faker/lib/locales/es/address/building_number.js":[function(require,module,exports) {
module["exports"] = [
  " s/n.",
  ", #",
  ", ##",
  " #",
  " ##"
];

},{}],"node_modules/faker/lib/locales/es/address/street_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "Aldea",
  "Apartamento",
  "Arrabal",
  "Arroyo",
  "Avenida",
  "Bajada",
  "Barranco",
  "Barrio",
  "Bloque",
  "Calle",
  "Calleja",
  "Camino",
  "Carretera",
  "Caserio",
  "Colegio",
  "Colonia",
  "Conjunto",
  "Cuesta",
  "Chalet",
  "Edificio",
  "Entrada",
  "Escalinata",
  "Explanada",
  "Extramuros",
  "Extrarradio",
  "Ferrocarril",
  "Glorieta",
  "Gran Subida",
  "Grupo",
  "Huerta",
  "Jardines",
  "Lado",
  "Lugar",
  "Manzana",
  "Masía",
  "Mercado",
  "Monte",
  "Muelle",
  "Municipio",
  "Parcela",
  "Parque",
  "Partida",
  "Pasaje",
  "Paseo",
  "Plaza",
  "Poblado",
  "Polígono",
  "Prolongación",
  "Puente",
  "Puerta",
  "Quinta",
  "Ramal",
  "Rambla",
  "Rampa",
  "Riera",
  "Rincón",
  "Ronda",
  "Rua",
  "Salida",
  "Sector",
  "Sección",
  "Senda",
  "Solar",
  "Subida",
  "Terrenos",
  "Torrente",
  "Travesía",
  "Urbanización",
  "Vía",
  "Vía Pública"
];

},{}],"node_modules/faker/lib/locales/es/address/secondary_address.js":[function(require,module,exports) {
module["exports"] = [
  "Esc. ###",
  "Puerta ###"
];

},{}],"node_modules/faker/lib/locales/es/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "#####"
];

},{}],"node_modules/faker/lib/locales/es/address/province.js":[function(require,module,exports) {
module["exports"] = [
  "Álava",
  "Albacete",
  "Alicante",
  "Almería",
  "Asturias",
  "Ávila",
  "Badajoz",
  "Barcelona",
  "Burgos",
  "Cantabria",
  "Castellón",
  "Ciudad Real",
  "Cuenca",
  "Cáceres",
  "Cádiz",
  "Córdoba",
  "Gerona",
  "Granada",
  "Guadalajara",
  "Guipúzcoa",
  "Huelva",
  "Huesca",
  "Islas Baleares",
  "Jaén",
  "La Coruña",
  "La Rioja",
  "Las Palmas",
  "León",
  "Lugo",
  "lérida",
  "Madrid",
  "Murcia",
  "Málaga",
  "Navarra",
  "Orense",
  "Palencia",
  "Pontevedra",
  "Salamanca",
  "Santa Cruz de Tenerife",
  "Segovia",
  "Sevilla",
  "Soria",
  "Tarragona",
  "Teruel",
  "Toledo",
  "Valencia",
  "Valladolid",
  "Vizcaya",
  "Zamora",
  "Zaragoza"
];

},{}],"node_modules/faker/lib/locales/es/address/state.js":[function(require,module,exports) {
module["exports"] = [
  "Andalucía",
  "Aragón",
  "Principado de Asturias",
  "Baleares",
  "Canarias",
  "Cantabria",
  "Castilla-La Mancha",
  "Castilla y León",
  "Cataluña",
  "Comunidad Valenciana",
  "Extremadura",
  "Galicia",
  "La Rioja",
  "Comunidad de Madrid",
  "Navarra",
  "País Vasco",
  "Región de Murcia"
];

},{}],"node_modules/faker/lib/locales/es/address/state_abbr.js":[function(require,module,exports) {
module["exports"] = [
  "And",
  "Ara",
  "Ast",
  "Bal",
  "Can",
  "Cbr",
  "Man",
  "Leo",
  "Cat",
  "Com",
  "Ext",
  "Gal",
  "Rio",
  "Mad",
  "Nav",
  "Vas",
  "Mur"
];

},{}],"node_modules/faker/lib/locales/es/address/time_zone.js":[function(require,module,exports) {
module["exports"] = [
  "Pacífico/Midway",
  "Pacífico/Pago_Pago",
  "Pacífico/Honolulu",
  "America/Juneau",
  "America/Los_Angeles",
  "America/Tijuana",
  "America/Denver",
  "America/Phoenix",
  "America/Chihuahua",
  "America/Mazatlan",
  "America/Chicago",
  "America/Regina",
  "America/Mexico_City",
  "America/Mexico_City",
  "America/Monterrey",
  "America/Guatemala",
  "America/New_York",
  "America/Indiana/Indianapolis",
  "America/Bogota",
  "America/Lima",
  "America/Lima",
  "America/Halifax",
  "America/Caracas",
  "America/La_Paz",
  "America/Santiago",
  "America/St_Johns",
  "America/Sao_Paulo",
  "America/Argentina/Buenos_Aires",
  "America/Guyana",
  "America/Godthab",
  "Atlantic/South_Georgia",
  "Atlantic/Azores",
  "Atlantic/Cape_Verde",
  "Europa/Dublin",
  "Europa/London",
  "Europa/Lisbon",
  "Europa/London",
  "Africa/Casablanca",
  "Africa/Monrovia",
  "Etc/UTC",
  "Europa/Belgrade",
  "Europa/Bratislava",
  "Europa/Budapest",
  "Europa/Ljubljana",
  "Europa/Prague",
  "Europa/Sarajevo",
  "Europa/Skopje",
  "Europa/Warsaw",
  "Europa/Zagreb",
  "Europa/Brussels",
  "Europa/Copenhagen",
  "Europa/Madrid",
  "Europa/Paris",
  "Europa/Amsterdam",
  "Europa/Berlin",
  "Europa/Berlin",
  "Europa/Rome",
  "Europa/Stockholm",
  "Europa/Vienna",
  "Africa/Algiers",
  "Europa/Bucharest",
  "Africa/Cairo",
  "Europa/Helsinki",
  "Europa/Kiev",
  "Europa/Riga",
  "Europa/Sofia",
  "Europa/Tallinn",
  "Europa/Vilnius",
  "Europa/Athens",
  "Europa/Istanbul",
  "Europa/Minsk",
  "Asia/Jerusalen",
  "Africa/Harare",
  "Africa/Johannesburg",
  "Europa/Moscú",
  "Europa/Moscú",
  "Europa/Moscú",
  "Asia/Kuwait",
  "Asia/Riyadh",
  "Africa/Nairobi",
  "Asia/Baghdad",
  "Asia/Tehran",
  "Asia/Muscat",
  "Asia/Muscat",
  "Asia/Baku",
  "Asia/Tbilisi",
  "Asia/Yerevan",
  "Asia/Kabul",
  "Asia/Yekaterinburg",
  "Asia/Karachi",
  "Asia/Karachi",
  "Asia/Tashkent",
  "Asia/Kolkata",
  "Asia/Kolkata",
  "Asia/Kolkata",
  "Asia/Kolkata",
  "Asia/Kathmandu",
  "Asia/Dhaka",
  "Asia/Dhaka",
  "Asia/Colombo",
  "Asia/Almaty",
  "Asia/Novosibirsk",
  "Asia/Rangoon",
  "Asia/Bangkok",
  "Asia/Bangkok",
  "Asia/Jakarta",
  "Asia/Krasnoyarsk",
  "Asia/Shanghai",
  "Asia/Chongqing",
  "Asia/Hong_Kong",
  "Asia/Urumqi",
  "Asia/Kuala_Lumpur",
  "Asia/Singapore",
  "Asia/Taipei",
  "Australia/Perth",
  "Asia/Irkutsk",
  "Asia/Ulaanbaatar",
  "Asia/Seoul",
  "Asia/Tokyo",
  "Asia/Tokyo",
  "Asia/Tokyo",
  "Asia/Yakutsk",
  "Australia/Darwin",
  "Australia/Adelaide",
  "Australia/Melbourne",
  "Australia/Melbourne",
  "Australia/Sydney",
  "Australia/Brisbane",
  "Australia/Hobart",
  "Asia/Vladivostok",
  "Pacífico/Guam",
  "Pacífico/Port_Moresby",
  "Asia/Magadan",
  "Asia/Magadan",
  "Pacífico/Noumea",
  "Pacífico/Fiji",
  "Asia/Kamchatka",
  "Pacífico/Majuro",
  "Pacífico/Auckland",
  "Pacífico/Auckland",
  "Pacífico/Tongatapu",
  "Pacífico/Fakaofo",
  "Pacífico/Apia"
];

},{}],"node_modules/faker/lib/locales/es/address/city.js":[function(require,module,exports) {
module["exports"] = [
  "#{city_prefix}"
];

},{}],"node_modules/faker/lib/locales/es/address/street_name.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_suffix} #{Name.first_name}",
  "#{street_suffix} #{Name.first_name} #{Name.last_name}"
];

},{}],"node_modules/faker/lib/locales/es/address/street_address.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_name}#{building_number}",
  "#{street_name}#{building_number} #{secondary_address}"
];

},{}],"node_modules/faker/lib/locales/es/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "España"
];

},{}],"node_modules/faker/lib/locales/es/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.city_prefix = require("./city_prefix");
address.country = require("./country");
address.building_number = require("./building_number");
address.street_suffix = require("./street_suffix");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.province = require("./province");
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.time_zone = require("./time_zone");
address.city = require("./city");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./city_prefix":"node_modules/faker/lib/locales/es/address/city_prefix.js","./country":"node_modules/faker/lib/locales/es/address/country.js","./building_number":"node_modules/faker/lib/locales/es/address/building_number.js","./street_suffix":"node_modules/faker/lib/locales/es/address/street_suffix.js","./secondary_address":"node_modules/faker/lib/locales/es/address/secondary_address.js","./postcode":"node_modules/faker/lib/locales/es/address/postcode.js","./province":"node_modules/faker/lib/locales/es/address/province.js","./state":"node_modules/faker/lib/locales/es/address/state.js","./state_abbr":"node_modules/faker/lib/locales/es/address/state_abbr.js","./time_zone":"node_modules/faker/lib/locales/es/address/time_zone.js","./city":"node_modules/faker/lib/locales/es/address/city.js","./street_name":"node_modules/faker/lib/locales/es/address/street_name.js","./street_address":"node_modules/faker/lib/locales/es/address/street_address.js","./default_country":"node_modules/faker/lib/locales/es/address/default_country.js"}],"node_modules/faker/lib/locales/es/company/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "S.L.",
  "e Hijos",
  "S.A.",
  "Hermanos"
];

},{}],"node_modules/faker/lib/locales/es/company/noun.js":[function(require,module,exports) {
module["exports"] = [
  "habilidad",
  "acceso",
  "adaptador",
  "algoritmo",
  "alianza",
  "analista",
  "aplicación",
  "enfoque",
  "arquitectura",
  "archivo",
  "inteligencia artificial",
  "array",
  "actitud",
  "medición",
  "gestión presupuestaria",
  "capacidad",
  "desafío",
  "circuito",
  "colaboración",
  "complejidad",
  "concepto",
  "conglomeración",
  "contingencia",
  "núcleo",
  "fidelidad",
  "base de datos",
  "data-warehouse",
  "definición",
  "emulación",
  "codificar",
  "encriptar",
  "extranet",
  "firmware",
  "flexibilidad",
  "focus group",
  "previsión",
  "base de trabajo",
  "función",
  "funcionalidad",
  "Interfaz Gráfica",
  "groupware",
  "Interfaz gráfico de usuario",
  "hardware",
  "Soporte",
  "jerarquía",
  "conjunto",
  "implementación",
  "infraestructura",
  "iniciativa",
  "instalación",
  "conjunto de instrucciones",
  "interfaz",
  "intranet",
  "base del conocimiento",
  "red de area local",
  "aprovechar",
  "matrices",
  "metodologías",
  "middleware",
  "migración",
  "modelo",
  "moderador",
  "monitorizar",
  "arquitectura abierta",
  "sistema abierto",
  "orquestar",
  "paradigma",
  "paralelismo",
  "política",
  "portal",
  "estructura de precios",
  "proceso de mejora",
  "producto",
  "productividad",
  "proyecto",
  "proyección",
  "protocolo",
  "línea segura",
  "software",
  "solución",
  "estandardización",
  "estrategia",
  "estructura",
  "éxito",
  "superestructura",
  "soporte",
  "sinergia",
  "mediante",
  "marco de tiempo",
  "caja de herramientas",
  "utilización",
  "website",
  "fuerza de trabajo"
];

},{}],"node_modules/faker/lib/locales/es/company/descriptor.js":[function(require,module,exports) {
module["exports"] = [
  "24 horas",
  "24/7",
  "3rd generación",
  "4th generación",
  "5th generación",
  "6th generación",
  "analizada",
  "asimétrica",
  "asíncrona",
  "monitorizada por red",
  "bidireccional",
  "bifurcada",
  "generada por el cliente",
  "cliente servidor",
  "coherente",
  "cohesiva",
  "compuesto",
  "sensible al contexto",
  "basado en el contexto",
  "basado en contenido",
  "dedicada",
  "generado por la demanda",
  "didactica",
  "direccional",
  "discreta",
  "dinámica",
  "potenciada",
  "acompasada",
  "ejecutiva",
  "explícita",
  "tolerante a fallos",
  "innovadora",
  "amplio ábanico",
  "global",
  "heurística",
  "alto nivel",
  "holística",
  "homogénea",
  "hibrida",
  "incremental",
  "intangible",
  "interactiva",
  "intermedia",
  "local",
  "logística",
  "maximizada",
  "metódica",
  "misión crítica",
  "móbil",
  "modular",
  "motivadora",
  "multimedia",
  "multiestado",
  "multitarea",
  "nacional",
  "basado en necesidades",
  "neutral",
  "nueva generación",
  "no-volátil",
  "orientado a objetos",
  "óptima",
  "optimizada",
  "radical",
  "tiempo real",
  "recíproca",
  "regional",
  "escalable",
  "secundaria",
  "orientada a soluciones",
  "estable",
  "estatica",
  "sistemática",
  "sistémica",
  "tangible",
  "terciaria",
  "transicional",
  "uniforme",
  "valor añadido",
  "vía web",
  "defectos cero",
  "tolerancia cero"
];

},{}],"node_modules/faker/lib/locales/es/company/adjective.js":[function(require,module,exports) {
module["exports"] = [
  "Adaptativo",
  "Avanzado",
  "Asimilado",
  "Automatizado",
  "Equilibrado",
  "Centrado en el negocio",
  "Centralizado",
  "Clonado",
  "Compatible",
  "Configurable",
  "Multi grupo",
  "Multi plataforma",
  "Centrado en el usuario",
  "Configurable",
  "Descentralizado",
  "Digitalizado",
  "Distribuido",
  "Diverso",
  "Reducido",
  "Mejorado",
  "Para toda la empresa",
  "Ergonomico",
  "Exclusivo",
  "Expandido",
  "Extendido",
  "Cara a cara",
  "Enfocado",
  "Totalmente configurable",
  "Fundamental",
  "Orígenes",
  "Horizontal",
  "Implementado",
  "Innovador",
  "Integrado",
  "Intuitivo",
  "Inverso",
  "Gestionado",
  "Obligatorio",
  "Monitorizado",
  "Multi canal",
  "Multi lateral",
  "Multi capa",
  "En red",
  "Orientado a objetos",
  "Open-source",
  "Operativo",
  "Optimizado",
  "Opcional",
  "Organico",
  "Organizado",
  "Perseverando",
  "Persistente",
  "en fases",
  "Polarizado",
  "Pre-emptivo",
  "Proactivo",
  "Enfocado a benficios",
  "Profundo",
  "Programable",
  "Progresivo",
  "Public-key",
  "Enfocado en la calidad",
  "Reactivo",
  "Realineado",
  "Re-contextualizado",
  "Re-implementado",
  "Reducido",
  "Ingenieria inversa",
  "Robusto",
  "Fácil",
  "Seguro",
  "Auto proporciona",
  "Compartible",
  "Intercambiable",
  "Sincronizado",
  "Orientado a equipos",
  "Total",
  "Universal",
  "Mejorado",
  "Actualizable",
  "Centrado en el usuario",
  "Amigable",
  "Versatil",
  "Virtual",
  "Visionario"
];

},{}],"node_modules/faker/lib/locales/es/company/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{Name.last_name} #{suffix}",
  "#{Name.last_name} y #{Name.last_name}",
  "#{Name.last_name} #{Name.last_name} #{suffix}",
  "#{Name.last_name}, #{Name.last_name} y #{Name.last_name} Asociados"
];

},{}],"node_modules/faker/lib/locales/es/company/index.js":[function(require,module,exports) {
var company = {};
module['exports'] = company;
company.suffix = require("./suffix");
company.noun = require("./noun");
company.descriptor = require("./descriptor");
company.adjective = require("./adjective");
company.name = require("./name");

},{"./suffix":"node_modules/faker/lib/locales/es/company/suffix.js","./noun":"node_modules/faker/lib/locales/es/company/noun.js","./descriptor":"node_modules/faker/lib/locales/es/company/descriptor.js","./adjective":"node_modules/faker/lib/locales/es/company/adjective.js","./name":"node_modules/faker/lib/locales/es/company/name.js"}],"node_modules/faker/lib/locales/es/internet/free_email.js":[function(require,module,exports) {
module["exports"] = [
  "gmail.com",
  "yahoo.com",
  "hotmail.com"
];

},{}],"node_modules/faker/lib/locales/es/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "com",
  "es",
  "info",
  "com.es",
  "org"
];

},{}],"node_modules/faker/lib/locales/es/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.free_email = require("./free_email");
internet.domain_suffix = require("./domain_suffix");

},{"./free_email":"node_modules/faker/lib/locales/es/internet/free_email.js","./domain_suffix":"node_modules/faker/lib/locales/es/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/es/name/first_name.js":[function(require,module,exports) {
module["exports"] = [
  "Adán",
  "Agustín",
  "Alberto",
  "Alejandro",
  "Alfonso",
  "Alfredo",
  "Andrés",
  "Antonio",
  "Armando",
  "Arturo",
  "Benito",
  "Benjamín",
  "Bernardo",
  "Carlos",
  "César",
  "Claudio",
  "Clemente",
  "Cristian",
  "Cristobal",
  "Daniel",
  "David",
  "Diego",
  "Eduardo",
  "Emilio",
  "Enrique",
  "Ernesto",
  "Esteban",
  "Federico",
  "Felipe",
  "Fernando",
  "Francisco",
  "Gabriel",
  "Gerardo",
  "Germán",
  "Gilberto",
  "Gonzalo",
  "Gregorio",
  "Guillermo",
  "Gustavo",
  "Hernán",
  "Homero",
  "Horacio",
  "Hugo",
  "Ignacio",
  "Jacobo",
  "Jaime",
  "Javier",
  "Jerónimo",
  "Jesús",
  "Joaquín",
  "Jorge",
  "Jorge Luis",
  "José",
  "José Eduardo",
  "José Emilio",
  "José Luis",
  "José María",
  "Juan",
  "Juan Carlos",
  "Julio",
  "Julio César",
  "Lorenzo",
  "Lucas",
  "Luis",
  "Luis Miguel",
  "Manuel",
  "Marco Antonio",
  "Marcos",
  "Mariano",
  "Mario",
  "Martín",
  "Mateo",
  "Miguel",
  "Miguel Ángel",
  "Nicolás",
  "Octavio",
  "Óscar",
  "Pablo",
  "Patricio",
  "Pedro",
  "Rafael",
  "Ramiro",
  "Ramón",
  "Raúl",
  "Ricardo",
  "Roberto",
  "Rodrigo",
  "Rubén",
  "Salvador",
  "Samuel",
  "Sancho",
  "Santiago",
  "Sergio",
  "Teodoro",
  "Timoteo",
  "Tomás",
  "Vicente",
  "Víctor",
  "Adela",
  "Adriana",
  "Alejandra",
  "Alicia",
  "Amalia",
  "Ana",
  "Ana Luisa",
  "Ana María",
  "Andrea",
  "Anita",
  "Ángela",
  "Antonia",
  "Ariadna",
  "Barbara",
  "Beatriz",
  "Berta",
  "Blanca",
  "Caridad",
  "Carla",
  "Carlota",
  "Carmen",
  "Carolina",
  "Catalina",
  "Cecilia",
  "Clara",
  "Claudia",
  "Concepción",
  "Conchita",
  "Cristina",
  "Daniela",
  "Débora",
  "Diana",
  "Dolores",
  "Lola",
  "Dorotea",
  "Elena",
  "Elisa",
  "Eloisa",
  "Elsa",
  "Elvira",
  "Emilia",
  "Esperanza",
  "Estela",
  "Ester",
  "Eva",
  "Florencia",
  "Francisca",
  "Gabriela",
  "Gloria",
  "Graciela",
  "Guadalupe",
  "Guillermina",
  "Inés",
  "Irene",
  "Isabel",
  "Isabela",
  "Josefina",
  "Juana",
  "Julia",
  "Laura",
  "Leonor",
  "Leticia",
  "Lilia",
  "Lorena",
  "Lourdes",
  "Lucia",
  "Luisa",
  "Luz",
  "Magdalena",
  "Manuela",
  "Marcela",
  "Margarita",
  "María",
  "María del Carmen",
  "María Cristina",
  "María Elena",
  "María Eugenia",
  "María José",
  "María Luisa",
  "María Soledad",
  "María Teresa",
  "Mariana",
  "Maricarmen",
  "Marilu",
  "Marisol",
  "Marta",
  "Mayte",
  "Mercedes",
  "Micaela",
  "Mónica",
  "Natalia",
  "Norma",
  "Olivia",
  "Patricia",
  "Pilar",
  "Ramona",
  "Raquel",
  "Rebeca",
  "Reina",
  "Rocio",
  "Rosa",
  "Rosalia",
  "Rosario",
  "Sara",
  "Silvia",
  "Sofia",
  "Soledad",
  "Sonia",
  "Susana",
  "Teresa",
  "Verónica",
  "Victoria",
  "Virginia",
  "Yolanda"
];

},{}],"node_modules/faker/lib/locales/es/name/last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Abeyta",
  "Abrego",
  "Abreu",
  "Acevedo",
  "Acosta",
  "Acuña",
  "Adame",
  "Adorno",
  "Agosto",
  "Aguayo",
  "Águilar",
  "Aguilera",
  "Aguirre",
  "Alanis",
  "Alaniz",
  "Alarcón",
  "Alba",
  "Alcala",
  "Alcántar",
  "Alcaraz",
  "Alejandro",
  "Alemán",
  "Alfaro",
  "Alicea",
  "Almanza",
  "Almaraz",
  "Almonte",
  "Alonso",
  "Alonzo",
  "Altamirano",
  "Alva",
  "Alvarado",
  "Alvarez",
  "Amador",
  "Amaya",
  "Anaya",
  "Anguiano",
  "Angulo",
  "Aparicio",
  "Apodaca",
  "Aponte",
  "Aragón",
  "Araña",
  "Aranda",
  "Arce",
  "Archuleta",
  "Arellano",
  "Arenas",
  "Arevalo",
  "Arguello",
  "Arias",
  "Armas",
  "Armendáriz",
  "Armenta",
  "Armijo",
  "Arredondo",
  "Arreola",
  "Arriaga",
  "Arroyo",
  "Arteaga",
  "Atencio",
  "Ávalos",
  "Ávila",
  "Avilés",
  "Ayala",
  "Baca",
  "Badillo",
  "Báez",
  "Baeza",
  "Bahena",
  "Balderas",
  "Ballesteros",
  "Banda",
  "Bañuelos",
  "Barajas",
  "Barela",
  "Barragán",
  "Barraza",
  "Barrera",
  "Barreto",
  "Barrientos",
  "Barrios",
  "Batista",
  "Becerra",
  "Beltrán",
  "Benavides",
  "Benavídez",
  "Benítez",
  "Bermúdez",
  "Bernal",
  "Berríos",
  "Bétancourt",
  "Blanco",
  "Bonilla",
  "Borrego",
  "Botello",
  "Bravo",
  "Briones",
  "Briseño",
  "Brito",
  "Bueno",
  "Burgos",
  "Bustamante",
  "Bustos",
  "Caballero",
  "Cabán",
  "Cabrera",
  "Cadena",
  "Caldera",
  "Calderón",
  "Calvillo",
  "Camacho",
  "Camarillo",
  "Campos",
  "Canales",
  "Candelaria",
  "Cano",
  "Cantú",
  "Caraballo",
  "Carbajal",
  "Cardenas",
  "Cardona",
  "Carmona",
  "Carranza",
  "Carrasco",
  "Carrasquillo",
  "Carreón",
  "Carrera",
  "Carrero",
  "Carrillo",
  "Carrion",
  "Carvajal",
  "Casanova",
  "Casares",
  "Casárez",
  "Casas",
  "Casillas",
  "Castañeda",
  "Castellanos",
  "Castillo",
  "Castro",
  "Cavazos",
  "Cazares",
  "Ceballos",
  "Cedillo",
  "Ceja",
  "Centeno",
  "Cepeda",
  "Cerda",
  "Cervantes",
  "Cervántez",
  "Chacón",
  "Chapa",
  "Chavarría",
  "Chávez",
  "Cintrón",
  "Cisneros",
  "Collado",
  "Collazo",
  "Colón",
  "Colunga",
  "Concepción",
  "Contreras",
  "Cordero",
  "Córdova",
  "Cornejo",
  "Corona",
  "Coronado",
  "Corral",
  "Corrales",
  "Correa",
  "Cortés",
  "Cortez",
  "Cotto",
  "Covarrubias",
  "Crespo",
  "Cruz",
  "Cuellar",
  "Curiel",
  "Dávila",
  "de Anda",
  "de Jesús",
  "Delacrúz",
  "Delafuente",
  "Delagarza",
  "Delao",
  "Delapaz",
  "Delarosa",
  "Delatorre",
  "Deleón",
  "Delgadillo",
  "Delgado",
  "Delrío",
  "Delvalle",
  "Díaz",
  "Domínguez",
  "Domínquez",
  "Duarte",
  "Dueñas",
  "Duran",
  "Echevarría",
  "Elizondo",
  "Enríquez",
  "Escalante",
  "Escamilla",
  "Escobar",
  "Escobedo",
  "Esparza",
  "Espinal",
  "Espino",
  "Espinosa",
  "Espinoza",
  "Esquibel",
  "Esquivel",
  "Estévez",
  "Estrada",
  "Fajardo",
  "Farías",
  "Feliciano",
  "Fernández",
  "Ferrer",
  "Fierro",
  "Figueroa",
  "Flores",
  "Flórez",
  "Fonseca",
  "Franco",
  "Frías",
  "Fuentes",
  "Gaitán",
  "Galarza",
  "Galindo",
  "Gallardo",
  "Gallegos",
  "Galván",
  "Gálvez",
  "Gamboa",
  "Gamez",
  "Gaona",
  "Garay",
  "García",
  "Garibay",
  "Garica",
  "Garrido",
  "Garza",
  "Gastélum",
  "Gaytán",
  "Gil",
  "Girón",
  "Godínez",
  "Godoy",
  "Gómez",
  "Gonzales",
  "González",
  "Gollum",
  "Gracia",
  "Granado",
  "Granados",
  "Griego",
  "Grijalva",
  "Guajardo",
  "Guardado",
  "Guerra",
  "Guerrero",
  "Guevara",
  "Guillen",
  "Gurule",
  "Gutiérrez",
  "Guzmán",
  "Haro",
  "Henríquez",
  "Heredia",
  "Hernádez",
  "Hernandes",
  "Hernández",
  "Herrera",
  "Hidalgo",
  "Hinojosa",
  "Holguín",
  "Huerta",
  "Hurtado",
  "Ibarra",
  "Iglesias",
  "Irizarry",
  "Jaime",
  "Jaimes",
  "Jáquez",
  "Jaramillo",
  "Jasso",
  "Jiménez",
  "Jimínez",
  "Juárez",
  "Jurado",
  "Laboy",
  "Lara",
  "Laureano",
  "Leal",
  "Lebrón",
  "Ledesma",
  "Leiva",
  "Lemus",
  "León",
  "Lerma",
  "Leyva",
  "Limón",
  "Linares",
  "Lira",
  "Llamas",
  "Loera",
  "Lomeli",
  "Longoria",
  "López",
  "Lovato",
  "Loya",
  "Lozada",
  "Lozano",
  "Lucero",
  "Lucio",
  "Luevano",
  "Lugo",
  "Luna",
  "Macías",
  "Madera",
  "Madrid",
  "Madrigal",
  "Maestas",
  "Magaña",
  "Malave",
  "Maldonado",
  "Manzanares",
  "Mares",
  "Marín",
  "Márquez",
  "Marrero",
  "Marroquín",
  "Martínez",
  "Mascareñas",
  "Mata",
  "Mateo",
  "Matías",
  "Matos",
  "Maya",
  "Mayorga",
  "Medina",
  "Medrano",
  "Mejía",
  "Meléndez",
  "Melgar",
  "Mena",
  "Menchaca",
  "Méndez",
  "Mendoza",
  "Menéndez",
  "Meraz",
  "Mercado",
  "Merino",
  "Mesa",
  "Meza",
  "Miramontes",
  "Miranda",
  "Mireles",
  "Mojica",
  "Molina",
  "Mondragón",
  "Monroy",
  "Montalvo",
  "Montañez",
  "Montaño",
  "Montemayor",
  "Montenegro",
  "Montero",
  "Montes",
  "Montez",
  "Montoya",
  "Mora",
  "Morales",
  "Moreno",
  "Mota",
  "Moya",
  "Munguía",
  "Muñiz",
  "Muñoz",
  "Murillo",
  "Muro",
  "Nájera",
  "Naranjo",
  "Narváez",
  "Nava",
  "Navarrete",
  "Navarro",
  "Nazario",
  "Negrete",
  "Negrón",
  "Nevárez",
  "Nieto",
  "Nieves",
  "Niño",
  "Noriega",
  "Núñez",
  "Ocampo",
  "Ocasio",
  "Ochoa",
  "Ojeda",
  "Olivares",
  "Olivárez",
  "Olivas",
  "Olivera",
  "Olivo",
  "Olmos",
  "Olvera",
  "Ontiveros",
  "Oquendo",
  "Ordóñez",
  "Orellana",
  "Ornelas",
  "Orosco",
  "Orozco",
  "Orta",
  "Ortega",
  "Ortiz",
  "Osorio",
  "Otero",
  "Ozuna",
  "Pabón",
  "Pacheco",
  "Padilla",
  "Padrón",
  "Páez",
  "Pagan",
  "Palacios",
  "Palomino",
  "Palomo",
  "Pantoja",
  "Paredes",
  "Parra",
  "Partida",
  "Patiño",
  "Paz",
  "Pedraza",
  "Pedroza",
  "Pelayo",
  "Peña",
  "Perales",
  "Peralta",
  "Perea",
  "Peres",
  "Pérez",
  "Pichardo",
  "Piña",
  "Pineda",
  "Pizarro",
  "Polanco",
  "Ponce",
  "Porras",
  "Portillo",
  "Posada",
  "Prado",
  "Preciado",
  "Prieto",
  "Puente",
  "Puga",
  "Pulido",
  "Quesada",
  "Quezada",
  "Quiñones",
  "Quiñónez",
  "Quintana",
  "Quintanilla",
  "Quintero",
  "Quiroz",
  "Rael",
  "Ramírez",
  "Ramón",
  "Ramos",
  "Rangel",
  "Rascón",
  "Raya",
  "Razo",
  "Regalado",
  "Rendón",
  "Rentería",
  "Reséndez",
  "Reyes",
  "Reyna",
  "Reynoso",
  "Rico",
  "Rincón",
  "Riojas",
  "Ríos",
  "Rivas",
  "Rivera",
  "Rivero",
  "Robledo",
  "Robles",
  "Rocha",
  "Rodarte",
  "Rodrígez",
  "Rodríguez",
  "Rodríquez",
  "Rojas",
  "Rojo",
  "Roldán",
  "Rolón",
  "Romero",
  "Romo",
  "Roque",
  "Rosado",
  "Rosales",
  "Rosario",
  "Rosas",
  "Roybal",
  "Rubio",
  "Ruelas",
  "Ruiz",
  "Saavedra",
  "Sáenz",
  "Saiz",
  "Salas",
  "Salazar",
  "Salcedo",
  "Salcido",
  "Saldaña",
  "Saldivar",
  "Salgado",
  "Salinas",
  "Samaniego",
  "Sanabria",
  "Sanches",
  "Sánchez",
  "Sandoval",
  "Santacruz",
  "Santana",
  "Santiago",
  "Santillán",
  "Sarabia",
  "Sauceda",
  "Saucedo",
  "Sedillo",
  "Segovia",
  "Segura",
  "Sepúlveda",
  "Serna",
  "Serrano",
  "Serrato",
  "Sevilla",
  "Sierra",
  "Sisneros",
  "Solano",
  "Solís",
  "Soliz",
  "Solorio",
  "Solorzano",
  "Soria",
  "Sosa",
  "Sotelo",
  "Soto",
  "Suárez",
  "Tafoya",
  "Tamayo",
  "Tamez",
  "Tapia",
  "Tejada",
  "Tejeda",
  "Téllez",
  "Tello",
  "Terán",
  "Terrazas",
  "Tijerina",
  "Tirado",
  "Toledo",
  "Toro",
  "Torres",
  "Tórrez",
  "Tovar",
  "Trejo",
  "Treviño",
  "Trujillo",
  "Ulibarri",
  "Ulloa",
  "Urbina",
  "Ureña",
  "Urías",
  "Uribe",
  "Urrutia",
  "Vaca",
  "Valadez",
  "Valdés",
  "Valdez",
  "Valdivia",
  "Valencia",
  "Valentín",
  "Valenzuela",
  "Valladares",
  "Valle",
  "Vallejo",
  "Valles",
  "Valverde",
  "Vanegas",
  "Varela",
  "Vargas",
  "Vásquez",
  "Vázquez",
  "Vega",
  "Vela",
  "Velasco",
  "Velásquez",
  "Velázquez",
  "Vélez",
  "Véliz",
  "Venegas",
  "Vera",
  "Verdugo",
  "Verduzco",
  "Vergara",
  "Viera",
  "Vigil",
  "Villa",
  "Villagómez",
  "Villalobos",
  "Villalpando",
  "Villanueva",
  "Villareal",
  "Villarreal",
  "Villaseñor",
  "Villegas",
  "Yáñez",
  "Ybarra",
  "Zambrano",
  "Zamora",
  "Zamudio",
  "Zapata",
  "Zaragoza",
  "Zarate",
  "Zavala",
  "Zayas",
  "Zelaya",
  "Zepeda",
  "Zúñiga"
];

},{}],"node_modules/faker/lib/locales/es/name/prefix.js":[function(require,module,exports) {
module["exports"] = [
  "Sr.",
  "Sra.",
  "Sta."
];

},{}],"node_modules/faker/lib/locales/es/name/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "Jr.",
  "Sr.",
  "I",
  "II",
  "III",
  "IV",
  "V",
  "MD",
  "DDS",
  "PhD",
  "DVM"
];

},{}],"node_modules/faker/lib/locales/es/name/title.js":[function(require,module,exports) {
module["exports"] = {
  "descriptor": [
    "Jefe",
    "Senior",
    "Directo",
    "Corporativo",
    "Dinánmico",
    "Futuro",
    "Producto",
    "Nacional",
    "Regional",
    "Distrito",
    "Central",
    "Global",
    "Cliente",
    "Inversor",
    "International",
    "Heredado",
    "Adelante",
    "Interno",
    "Humano",
    "Gerente",
    "Director"
  ],
  "level": [
    "Soluciones",
    "Programa",
    "Marca",
    "Seguridada",
    "Investigación",
    "Marketing",
    "Normas",
    "Implementación",
    "Integración",
    "Funcionalidad",
    "Respuesta",
    "Paradigma",
    "Tácticas",
    "Identidad",
    "Mercados",
    "Grupo",
    "División",
    "Aplicaciones",
    "Optimización",
    "Operaciones",
    "Infraestructura",
    "Intranet",
    "Comunicaciones",
    "Web",
    "Calidad",
    "Seguro",
    "Mobilidad",
    "Cuentas",
    "Datos",
    "Creativo",
    "Configuración",
    "Contabilidad",
    "Interacciones",
    "Factores",
    "Usabilidad",
    "Métricas"
  ],
  "job": [
    "Supervisor",
    "Asociado",
    "Ejecutivo",
    "Relacciones",
    "Oficial",
    "Gerente",
    "Ingeniero",
    "Especialista",
    "Director",
    "Coordinador",
    "Administrador",
    "Arquitecto",
    "Analista",
    "Diseñador",
    "Planificador",
    "Técnico",
    "Funcionario",
    "Desarrollador",
    "Productor",
    "Consultor",
    "Asistente",
    "Facilitador",
    "Agente",
    "Representante",
    "Estratega"
  ]
};

},{}],"node_modules/faker/lib/locales/es/name/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{prefix} #{first_name} #{last_name} #{last_name}",
  "#{first_name} #{last_name} #{last_name}",
  "#{first_name} #{last_name} #{last_name}",
  "#{first_name} #{last_name} #{last_name}",
  "#{first_name} #{last_name} #{last_name}"
];

},{}],"node_modules/faker/lib/locales/es/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");
name.prefix = require("./prefix");
name.suffix = require("./suffix");
name.title = require("./title");
name.name = require("./name");

},{"./first_name":"node_modules/faker/lib/locales/es/name/first_name.js","./last_name":"node_modules/faker/lib/locales/es/name/last_name.js","./prefix":"node_modules/faker/lib/locales/es/name/prefix.js","./suffix":"node_modules/faker/lib/locales/es/name/suffix.js","./title":"node_modules/faker/lib/locales/es/name/title.js","./name":"node_modules/faker/lib/locales/es/name/name.js"}],"node_modules/faker/lib/locales/es/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "9##-###-###",
  "9##.###.###",
  "9## ### ###",
  "9########"
];

},{}],"node_modules/faker/lib/locales/es/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/es/phone_number/formats.js"}],"node_modules/faker/lib/locales/es/cell_phone/formats.js":[function(require,module,exports) {
module["exports"] = [
  "6##-###-###",
  "6##.###.###",
  "6## ### ###",
  "6########"
];

},{}],"node_modules/faker/lib/locales/es/cell_phone/index.js":[function(require,module,exports) {
var cell_phone = {};
module['exports'] = cell_phone;
cell_phone.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/es/cell_phone/formats.js"}],"node_modules/faker/lib/locales/es/index.js":[function(require,module,exports) {
var es = {};
module['exports'] = es;
es.title = "Spanish";
es.address = require("./address");
es.company = require("./company");
es.internet = require("./internet");
es.name = require("./name");
es.phone_number = require("./phone_number");
es.cell_phone = require("./cell_phone");

},{"./address":"node_modules/faker/lib/locales/es/address/index.js","./company":"node_modules/faker/lib/locales/es/company/index.js","./internet":"node_modules/faker/lib/locales/es/internet/index.js","./name":"node_modules/faker/lib/locales/es/name/index.js","./phone_number":"node_modules/faker/lib/locales/es/phone_number/index.js","./cell_phone":"node_modules/faker/lib/locales/es/cell_phone/index.js"}],"node_modules/faker/lib/locales/es_MX/name/first_name.js":[function(require,module,exports) {
module["exports"] = [
"Aarón",
"Abraham",
"Adán",
"Agustín",
"Alan",
"Alberto",
"Alejandro",
"Alexander",
"Alexis",
"Alfonso",
"Alfredo",
"Andrés",
"Ángel Daniel",
"Ángel Gabriel",
"Antonio",
"Armando",
"Arturo",
"Axel",
"Benito",
"Benjamín",
"Bernardo",
"Brandon",
"Brayan",
"Carlos",
"César",
"Claudio",
"Clemente",
"Cristian",
"Cristobal",
"Damián",
"Daniel",
"David",
"Diego",
"Eduardo",
"Elías",
"Emiliano",
"Emilio",
"Emilio",
"Emmanuel",
"Enrique",
"Erick",
"Ernesto",
"Esteban",
"Federico",
"Felipe",
"Fernando",
"Fernando Javier",
"Francisco",
"Francisco Javier",
"Gabriel",
"Gael",
"Gerardo",
"Germán",
"Gilberto",
"Gonzalo",
"Gregorio",
"Guillermo",
"Gustavo",
"Hernán",
"Homero",
"Horacio",
"Hugo",
"Ignacio",
"Iker",
"Isaac",
"Isaias",
"Israel",
"Ivan",
"Jacobo",
"Jaime",
"Javier",
"Jerónimo",
"Jesús",
"Joaquín",
"Jorge",
"Jorge Luis",
"José",
"José Antonio",
"Jose Daniel",
"José Eduardo",
"José Emilio",
"José Luis",
"José María",
"José Miguel",
"Juan",
"Juan Carlos",
"Juan Manuel",
"Juan Pablo",
"Julio",
"Julio César",
"Kevin",
"Leonardo",
"Lorenzo",
"Lucas",
"Luis",
"Luis Ángel",
"Luis Fernando",
"Luis Gabino",
"Luis Miguel",
"Manuel",
"Marco Antonio",
"Marcos",
"Mariano",
"Mario",
"Martín",
"Mateo",
"Matías",
"Mauricio",
"Maximiliano",
"Miguel",
"Miguel Ángel",
"Nicolás",
"Octavio",
"Óscar",
"Pablo",
"Patricio",
"Pedro",
"Rafael",
"Ramiro",
"Ramón",
"Raúl",
"Ricardo",
"Roberto",
"Rodrigo",
"Rubén",
"Salvador",
"Samuel",
"Sancho",
"Santiago",
"Saúl",
"Sebastian",
"Sergio",
"Tadeo",
"Teodoro",
"Timoteo",
"Tomás",
"Uriel",
"Vicente",
"Víctor",
"Victor Manuel",
"Adriana",
"Alejandra",
"Alicia",
"Amalia",
"Ana",
"Ana Luisa",
"Ana María",
"Andrea",
"Ángela",
"Anita",
"Antonia",
"Araceli",
"Ariadna",
"Barbara",
"Beatriz",
"Berta",
"Blanca",
"Caridad",
"Carla",
"Carlota",
"Carmen",
"Carolina",
"Catalina",
"Cecilia",
"Clara",
"Claudia",
"Concepción",
"Conchita",
"Cristina",
"Daniela",
"Débora",
"Diana",
"Dolores",
"Dorotea",
"Elena",
"Elisa",
"Elizabeth",
"Eloisa",
"Elsa",
"Elvira",
"Emilia",
"Esperanza",
"Estela",
"Ester",
"Eva",
"Florencia",
"Francisca",
"Gabriela",
"Gloria",
"Graciela",
"Guadalupe",
"Guillermina",
"Inés",
"Irene",
"Isabel",
"Isabela",
"Josefina",
"Juana",
"Julia",
"Laura",
"Leonor",
"Leticia",
"Lilia",
"Lola",
"Lorena",
"Lourdes",
"Lucia",
"Luisa",
"Luz",
"Magdalena",
"Manuela",
"Marcela",
"Margarita",
"María",
"María Cristina",
"María de Jesús",
"María de los Ángeles",
"María del Carmen",
"María Elena",
"María Eugenia",
"María Guadalupe",
"María José",
"María Luisa",
"María Soledad",
"María Teresa",
"Mariana",
"Maricarmen",
"Marilu",
"Marisol",
"Marta",
"Mayte",
"Mercedes",
"Micaela",
"Mónica",
"Natalia",
"Norma",
"Olivia",
"Patricia",
"Pilar",
"Ramona",
"Raquel",
"Rebeca",
"Reina",
"Rocio",
"Rosa",
"Rosa María",
"Rosalia",
"Rosario",
"Sara",
"Silvia",
"Sofia",
"Soledad",
"Sonia",
"Susana",
"Teresa",
"Verónica",
"Victoria",
"Virginia",
"Xochitl",
"Yolanda",
"Abigail",
"Abril",
"Adela",
"Alexa",
"Alondra Romina",
"Ana Sofía",
"Ana Victoria",
"Camila",
"Carolina",
"Daniela",
"Dulce María",
"Emily",
"Esmeralda",
"Estefanía",
"Evelyn",
"Fatima",
"Ivanna",
"Jazmin",
"Jennifer",
"Jimena",
"Julieta",
"Kimberly",
"Liliana",
"Lizbeth",
"María Fernanda",
"Melany",
"Melissa",
"Miranda",
"Monserrat",
"Naomi",
"Natalia",
"Nicole",
"Paola",
"Paulina",
"Regina",
"Renata",
"Valentina",
"Valeria",
"Vanessa",
"Ximena",
"Ximena Guadalupe",
"Yamileth",
"Yaretzi",
"Zoe"
]
},{}],"node_modules/faker/lib/locales/es_MX/name/last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Abeyta",
"Abrego",
"Abreu",
"Acevedo",
"Acosta",
"Acuña",
"Adame",
"Adorno",
"Agosto",
"Aguayo",
"Águilar",
"Aguilera",
"Aguirre",
"Alanis",
"Alaniz",
"Alarcón",
"Alba",
"Alcala",
"Alcántar",
"Alcaraz",
"Alejandro",
"Alemán",
"Alfaro",
"Alicea",
"Almanza",
"Almaraz",
"Almonte",
"Alonso",
"Alonzo",
"Altamirano",
"Alva",
"Alvarado",
"Alvarez",
"Amador",
"Amaya",
"Anaya",
"Anguiano",
"Angulo",
"Aparicio",
"Apodaca",
"Aponte",
"Aragón",
"Aranda",
"Araña",
"Arce",
"Archuleta",
"Arellano",
"Arenas",
"Arevalo",
"Arguello",
"Arias",
"Armas",
"Armendáriz",
"Armenta",
"Armijo",
"Arredondo",
"Arreola",
"Arriaga",
"Arroyo",
"Arteaga",
"Atencio",
"Ávalos",
"Ávila",
"Avilés",
"Ayala",
"Baca",
"Badillo",
"Báez",
"Baeza",
"Bahena",
"Balderas",
"Ballesteros",
"Banda",
"Bañuelos",
"Barajas",
"Barela",
"Barragán",
"Barraza",
"Barrera",
"Barreto",
"Barrientos",
"Barrios",
"Batista",
"Becerra",
"Beltrán",
"Benavides",
"Benavídez",
"Benítez",
"Bermúdez",
"Bernal",
"Berríos",
"Bétancourt",
"Blanco",
"Bonilla",
"Borrego",
"Botello",
"Bravo",
"Briones",
"Briseño",
"Brito",
"Bueno",
"Burgos",
"Bustamante",
"Bustos",
"Caballero",
"Cabán",
"Cabrera",
"Cadena",
"Caldera",
"Calderón",
"Calvillo",
"Camacho",
"Camarillo",
"Campos",
"Canales",
"Candelaria",
"Cano",
"Cantú",
"Caraballo",
"Carbajal",
"Cardenas",
"Cardona",
"Carmona",
"Carranza",
"Carrasco",
"Carrasquillo",
"Carreón",
"Carrera",
"Carrero",
"Carrillo",
"Carrion",
"Carvajal",
"Casanova",
"Casares",
"Casárez",
"Casas",
"Casillas",
"Castañeda",
"Castellanos",
"Castillo",
"Castro",
"Cavazos",
"Cazares",
"Ceballos",
"Cedillo",
"Ceja",
"Centeno",
"Cepeda",
"Cerda",
"Cervantes",
"Cervántez",
"Chacón",
"Chapa",
"Chavarría",
"Chávez",
"Cintrón",
"Cisneros",
"Collado",
"Collazo",
"Colón",
"Colunga",
"Concepción",
"Contreras",
"Cordero",
"Córdova",
"Cornejo",
"Corona",
"Coronado",
"Corral",
"Corrales",
"Correa",
"Cortés",
"Cortez",
"Cotto",
"Covarrubias",
"Crespo",
"Cruz",
"Cuellar",
"Curiel",
"Dávila",
"de Anda",
"de Jesús",
"Delacrúz",
"Delafuente",
"Delagarza",
"Delao",
"Delapaz",
"Delarosa",
"Delatorre",
"Deleón",
"Delgadillo",
"Delgado",
"Delrío",
"Delvalle",
"Díaz",
"Domínguez",
"Domínquez",
"Duarte",
"Dueñas",
"Duran",
"Echevarría",
"Elizondo",
"Enríquez",
"Escalante",
"Escamilla",
"Escobar",
"Escobedo",
"Esparza",
"Espinal",
"Espino",
"Espinosa",
"Espinoza",
"Esquibel",
"Esquivel",
"Estévez",
"Estrada",
"Fajardo",
"Farías",
"Feliciano",
"Fernández",
"Ferrer",
"Fierro",
"Figueroa",
"Flores",
"Flórez",
"Fonseca",
"Franco",
"Frías",
"Fuentes",
"Gaitán",
"Galarza",
"Galindo",
"Gallardo",
"Gallegos",
"Galván",
"Gálvez",
"Gamboa",
"Gamez",
"Gaona",
"Garay",
"García",
"Garibay",
"Garica",
"Garrido",
"Garza",
"Gastélum",
"Gaytán",
"Gil",
"Girón",
"Godínez",
"Godoy",
"Gollum",
"Gómez",
"Gonzales",
"González",
"Gracia",
"Granado",
"Granados",
"Griego",
"Grijalva",
"Guajardo",
"Guardado",
"Guerra",
"Guerrero",
"Guevara",
"Guillen",
"Gurule",
"Gutiérrez",
"Guzmán",
"Haro",
"Henríquez",
"Heredia",
"Hernádez",
"Hernandes",
"Hernández",
"Herrera",
"Hidalgo",
"Hinojosa",
"Holguín",
"Huerta",
"Huixtlacatl",
"Hurtado",
"Ibarra",
"Iglesias",
"Irizarry",
"Jaime",
"Jaimes",
"Jáquez",
"Jaramillo",
"Jasso",
"Jiménez",
"Jimínez",
"Juárez",
"Jurado",
"Kadar rodriguez",
"Kamal",
"Kamat",
"Kanaria",
"Kanea",
"Kanimal",
"Kano",
"Kanzaki",
"Kaplan",
"Kara",
"Karam",
"Karan",
"Kardache soto",
"Karem",
"Karen",
"Khalid",
"Kindelan",
"Koenig",
"Korta",
"Korta hernandez",
"Kortajarena",
"Kranz sans",
"Krasnova",
"Krauel natera",
"Kuzmina",
"Kyra",
"Laboy",
"Lara",
"Laureano",
"Leal",
"Lebrón",
"Ledesma",
"Leiva",
"Lemus",
"León",
"Lerma",
"Leyva",
"Limón",
"Linares",
"Lira",
"Llamas",
"Loera",
"Lomeli",
"Longoria",
"López",
"Lovato",
"Loya",
"Lozada",
"Lozano",
"Lucero",
"Lucio",
"Luevano",
"Lugo",
"Luna",
"Macías",
"Madera",
"Madrid",
"Madrigal",
"Maestas",
"Magaña",
"Malave",
"Maldonado",
"Manzanares",
"Mares",
"Marín",
"Márquez",
"Marrero",
"Marroquín",
"Martínez",
"Mascareñas",
"Mata",
"Mateo",
"Matías",
"Matos",
"Maya",
"Mayorga",
"Medina",
"Medrano",
"Mejía",
"Meléndez",
"Melgar",
"Mena",
"Menchaca",
"Méndez",
"Mendoza",
"Menéndez",
"Meraz",
"Mercado",
"Merino",
"Mesa",
"Meza",
"Miramontes",
"Miranda",
"Mireles",
"Mojica",
"Molina",
"Mondragón",
"Monroy",
"Montalvo",
"Montañez",
"Montaño",
"Montemayor",
"Montenegro",
"Montero",
"Montes",
"Montez",
"Montoya",
"Mora",
"Morales",
"Moreno",
"Mota",
"Moya",
"Munguía",
"Muñiz",
"Muñoz",
"Murillo",
"Muro",
"Nájera",
"Naranjo",
"Narváez",
"Nava",
"Navarrete",
"Navarro",
"Nazario",
"Negrete",
"Negrón",
"Nevárez",
"Nieto",
"Nieves",
"Niño",
"Noriega",
"Núñez",
"Ñañez",
"Ocampo",
"Ocasio",
"Ochoa",
"Ojeda",
"Olivares",
"Olivárez",
"Olivas",
"Olivera",
"Olivo",
"Olmos",
"Olvera",
"Ontiveros",
"Oquendo",
"Ordóñez",
"Orellana",
"Ornelas",
"Orosco",
"Orozco",
"Orta",
"Ortega",
"Ortiz",
"Osorio",
"Otero",
"Ozuna",
"Pabón",
"Pacheco",
"Padilla",
"Padrón",
"Páez",
"Pagan",
"Palacios",
"Palomino",
"Palomo",
"Pantoja",
"Paredes",
"Parra",
"Partida",
"Patiño",
"Paz",
"Pedraza",
"Pedroza",
"Pelayo",
"Peña",
"Perales",
"Peralta",
"Perea",
"Peres",
"Pérez",
"Pichardo",
"Pineda",
"Piña",
"Pizarro",
"Polanco",
"Ponce",
"Porras",
"Portillo",
"Posada",
"Prado",
"Preciado",
"Prieto",
"Puente",
"Puga",
"Pulido",
"Quesada",
"Quevedo",
"Quezada",
"Quinta",
"Quintairos",
"Quintana",
"Quintanilla",
"Quintero",
"Quintero cruz",
"Quintero de la cruz",
"Quiñones",
"Quiñónez",
"Quiros",
"Quiroz",
"Rael",
"Ramírez",
"Ramón",
"Ramos",
"Rangel",
"Rascón",
"Raya",
"Razo",
"Regalado",
"Rendón",
"Rentería",
"Reséndez",
"Reyes",
"Reyna",
"Reynoso",
"Rico",
"Rincón",
"Riojas",
"Ríos",
"Rivas",
"Rivera",
"Rivero",
"Robledo",
"Robles",
"Rocha",
"Rodarte",
"Rodrígez",
"Rodríguez",
"Rodríquez",
"Rojas",
"Rojo",
"Roldán",
"Rolón",
"Romero",
"Romo",
"Roque",
"Rosado",
"Rosales",
"Rosario",
"Rosas",
"Roybal",
"Rubio",
"Ruelas",
"Ruiz",
"Saavedra",
"Sáenz",
"Saiz",
"Salas",
"Salazar",
"Salcedo",
"Salcido",
"Saldaña",
"Saldivar",
"Salgado",
"Salinas",
"Samaniego",
"Sanabria",
"Sanches",
"Sánchez",
"Sandoval",
"Santacruz",
"Santana",
"Santiago",
"Santillán",
"Sarabia",
"Sauceda",
"Saucedo",
"Sedillo",
"Segovia",
"Segura",
"Sepúlveda",
"Serna",
"Serrano",
"Serrato",
"Sevilla",
"Sierra",
"Sisneros",
"Solano",
"Solís",
"Soliz",
"Solorio",
"Solorzano",
"Soria",
"Sosa",
"Sotelo",
"Soto",
"Suárez",
"Tafoya",
"Tamayo",
"Tamez",
"Tapia",
"Tejada",
"Tejeda",
"Téllez",
"Tello",
"Terán",
"Terrazas",
"Tijerina",
"Tirado",
"Toledo",
"Toro",
"Torres",
"Tórrez",
"Tovar",
"Trejo",
"Treviño",
"Trujillo",
"Ulibarri",
"Ulloa",
"Urbina",
"Ureña",
"Urías",
"Uribe",
"Urrutia",
"Vaca",
"Valadez",
"Valdés",
"Valdez",
"Valdivia",
"Valencia",
"Valentín",
"Valenzuela",
"Valladares",
"Valle",
"Vallejo",
"Valles",
"Valverde",
"Vanegas",
"Varela",
"Vargas",
"Vásquez",
"Vázquez",
"Vega",
"Vela",
"Velasco",
"Velásquez",
"Velázquez",
"Vélez",
"Véliz",
"Venegas",
"Vera",
"Verdugo",
"Verduzco",
"Vergara",
"Viera",
"Vigil",
"Villa",
"Villagómez",
"Villalobos",
"Villalpando",
"Villanueva",
"Villareal",
"Villarreal",
"Villaseñor",
"Villegas",
"Xacon",
"Xairo Belmonte",
"Xana",
"Xenia",
"Xiana",
"Xicoy",
"Yago",
"Yami",
"Yanes",
"Yáñez",
"Ybarra",
"Yebra",
"Yunta",
"Zabaleta",
"Zamarreno",
"Zamarripa",
"Zambrana",
"Zambrano",
"Zamora",
"Zamudio",
"Zapata",
"Zaragoza",
"Zarate",
"Zavala",
"Zayas",
"Zelaya",
"Zepeda",
"Zúñiga"
];

},{}],"node_modules/faker/lib/locales/es_MX/name/prefix.js":[function(require,module,exports) {
module["exports"] = [
  "Sr.",
  "Sra.",
  "Sta."
];

},{}],"node_modules/faker/lib/locales/es_MX/name/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "Jr.",
  "Sr.",
  "I",
  "II",
  "III",
  "IV",
  "V",
  "MD",
  "DDS",
  "PhD",
  "DVM",
  "Ing.",
  "Lic.",
  "Dr.",
  "Mtro."
];

},{}],"node_modules/faker/lib/locales/es_MX/name/title.js":[function(require,module,exports) {
 module["exports"] = {
  "descriptor": [
    "Jefe",
    "Senior",
    "Directo",
    "Corporativo",
    "Dinánmico",
    "Futuro",
    "Producto",
    "Nacional",
    "Regional",
    "Distrito",
    "Central",
    "Global",
    "Cliente",
    "Inversor",
    "International",
    "Heredado",
    "Adelante",
    "Interno",
    "Humano",
    "Gerente",
    "SubGerente",
    "Director"
  ],
  "level": [
    "Soluciones",
    "Programa",
    "Marca",
    "Seguridad",
    "Investigación",
    "Marketing",
    "Normas",
    "Implementación",
    "Integración",
    "Funcionalidad",
    "Respuesta",
    "Paradigma",
    "Tácticas",
    "Identidad",
    "Mercados",
    "Grupo",
    "División",
    "Aplicaciones",
    "Optimización",
    "Operaciones",
    "Infraestructura",
    "Intranet",
    "Comunicaciones",
    "Web",
    "Calidad",
    "Seguro",
    "Mobilidad",
    "Cuentas",
    "Datos",
    "Creativo",
    "Configuración",
    "Contabilidad",
    "Interacciones",
    "Factores",
    "Usabilidad",
    "Métricas",
  ],
  "job": [
    "Supervisor",
    "Asociado",
    "Ejecutivo",
    "Relacciones",
    "Oficial",
    "Gerente",
    "Ingeniero",
    "Especialista",
    "Director",
    "Coordinador",
    "Administrador",
    "Arquitecto",
    "Analista",
    "Diseñador",
    "Planificador",
    "Técnico",
    "Funcionario",
    "Desarrollador",
    "Productor",
    "Consultor",
    "Asistente",
    "Facilitador",
    "Agente",
    "Representante",
    "Estratega",
    "Scrum Master",
    "Scrum Owner",
    "Product Owner",
    "Scrum Developer"
  ]
};

},{}],"node_modules/faker/lib/locales/es_MX/name/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{prefix} #{first_name} #{last_name} #{last_name}",
  "#{first_name} #{last_name} de #{last_name}",
  "#{suffix} #{first_name} #{last_name} #{last_name}",
  "#{first_name} #{last_name} #{last_name}",
  "#{first_name} #{last_name} #{last_name}"
];

},{}],"node_modules/faker/lib/locales/es_MX/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");
name.prefix = require("./prefix");
name.suffix = require("./suffix");
name.title = require("./title");
name.name = require("./name");

},{"./first_name":"node_modules/faker/lib/locales/es_MX/name/first_name.js","./last_name":"node_modules/faker/lib/locales/es_MX/name/last_name.js","./prefix":"node_modules/faker/lib/locales/es_MX/name/prefix.js","./suffix":"node_modules/faker/lib/locales/es_MX/name/suffix.js","./title":"node_modules/faker/lib/locales/es_MX/name/title.js","./name":"node_modules/faker/lib/locales/es_MX/name/name.js"}],"node_modules/faker/lib/locales/es_MX/address/city_prefix.js":[function(require,module,exports) {
module["exports"] = [
  "Aguascalientes",
  "Apodaca",
  "Buenavista",
  "Campeche",
  "Cancún",
  "Cárdenas",
  "Celaya",
  "Chalco",
  "Chetumal",
  "Chicoloapan",
  "Chignahuapan",
  "Chihuahua",
  "Chilpancingo",
  "Chimalhuacán",
  "Ciudad Acuña",
  "Ciudad de México",
  "Ciudad del Carmen",
  "Ciudad López Mateos",
  "Ciudad Madero",
  "Ciudad Obregón",
  "Ciudad Valles",
  "Ciudad Victoria",
  "Coatzacoalcos",
  "Colima-Villa de Álvarez",
  "Comitán de Dominguez",
  "Córdoba",
  "Cuautitlán Izcalli",
  "Cuautla",
  "Cuernavaca",
  "Culiacán",
  "Delicias",
  "Durango",
  "Ensenada",
  "Fresnillo",
  "General Escobedo",
  "Gómez Palacio",
  "Guadalajara",
  "Guadalupe",
  "Guanajuato",
  "Guaymas",
  "Hermosillo",
  "Hidalgo del Parral",
  "Iguala",
  "Irapuato",
  "Ixtapaluca",
  "Jiutepec",
  "Juárez",
  "La Laguna",
  "La Paz",
  "La Piedad-Pénjamo",
  "León",
  "Los Cabos",
  "Los Mochis",
  "Manzanillo",
  "Matamoros",
  "Mazatlán",
  "Mérida",
  "Mexicali",
  "Minatitlán",
  "Miramar",
  "Monclova",
  "Monclova-Frontera",
  "Monterrey",
  "Morelia",
  "Naucalpan de Juárez",
  "Navojoa",
  "Nezahualcóyotl",
  "Nogales",
  "Nuevo Laredo",
  "Oaxaca",
  "Ocotlán",
  "Ojo de agua",
  "Orizaba",
  "Pachuca",
  "Piedras Negras",
  "Poza Rica",
  "Puebla",
  "Puerto Vallarta",
  "Querétaro",
  "Reynosa-Río Bravo",
  "Rioverde-Ciudad Fernández",
  "Salamanca",
  "Saltillo",
  "San Cristobal de las Casas",
  "San Francisco Coacalco",
  "San Francisco del Rincón",
  "San Juan Bautista Tuxtepec",
  "San Juan del Río",
  "San Luis Potosí-Soledad",
  "San Luis Río Colorado",
  "San Nicolás de los Garza",
  "San Pablo de las Salinas",
  "San Pedro Garza García",
  "Santa Catarina",
  "Soledad de Graciano Sánchez",
  "Tampico-Pánuco",
  "Tapachula",
  "Tecomán",
  "Tehuacán",
  "Tehuacán",
  "Tehuantepec-Salina Cruz",
  "Tepexpan",
  "Tepic",
  "Tetela de Ocampo",
  "Texcoco de Mora",
  "Tijuana",
  "Tlalnepantla",
  "Tlaquepaque",
  "Tlaxcala-Apizaco",
  "Toluca",
  "Tonalá",
  "Torreón",
  "Tula",
  "Tulancingo",
  "Tulancingo de Bravo",
  "Tuxtla Gutiérrez",
  "Uruapan",
  "Uruapan del Progreso",
  "Valle de México",
  "Veracruz",
  "Villa de Álvarez",
  "Villa Nicolás Romero",
  "Villahermosa",
  "Xalapa",
  "Zacatecas-Guadalupe",
  "Zacatlan",
  "Zacatzingo",
  "Zamora-Jacona",
  "Zapopan",
  "Zitacuaro"
];

},{}],"node_modules/faker/lib/locales/es_MX/address/city_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "town",
  "ton",
  "land",
  "ville",
  "berg",
  "burgh",
  "borough",
  "bury",
  "view",
  "port",
  "mouth",
  "stad",
  "furt",
  "chester",
  "mouth",
  "fort",
  "haven",
  "side",
  "shire"
];

},{}],"node_modules/faker/lib/locales/es_MX/address/country.js":[function(require,module,exports) {
module["exports"] = [
  "Afganistán",
  "Albania",
  "Argelia",
  "Andorra",
  "Angola",
  "Argentina",
  "Armenia",
  "Aruba",
  "Australia",
  "Austria",
  "Azerbayán",
  "Bahamas",
  "Barein",
  "Bangladesh",
  "Barbados",
  "Bielorusia",
  "Bélgica",
  "Belice",
  "Bermuda",
  "Bután",
  "Bolivia",
  "Bosnia Herzegovina",
  "Botswana",
  "Brasil",
  "Bulgaria",
  "Burkina Faso",
  "Burundi",
  "Camboya",
  "Camerún",
  "Canada",
  "Cabo Verde",
  "Islas Caimán",
  "Chad",
  "Chile",
  "China",
  "Isla de Navidad",
  "Colombia",
  "Comodos",
  "Congo",
  "Costa Rica",
  "Costa de Marfil",
  "Croacia",
  "Cuba",
  "Chipre",
  "República Checa",
  "Dinamarca",
  "Dominica",
  "República Dominicana",
  "Ecuador",
  "Egipto",
  "El Salvador",
  "Guinea Ecuatorial",
  "Eritrea",
  "Estonia",
  "Etiopía",
  "Islas Faro",
  "Fiji",
  "Finlandia",
  "Francia",
  "Gabón",
  "Gambia",
  "Georgia",
  "Alemania",
  "Ghana",
  "Grecia",
  "Groenlandia",
  "Granada",
  "Guadalupe",
  "Guam",
  "Guatemala",
  "Guinea",
  "Guinea-Bisau",
  "Guayana",
  "Haiti",
  "Honduras",
  "Hong Kong",
  "Hungria",
  "Islandia",
  "India",
  "Indonesia",
  "Iran",
  "Irak",
  "Irlanda",
  "Italia",
  "Jamaica",
  "Japón",
  "Jordania",
  "Kazajistan",
  "Kenia",
  "Kiribati",
  "Corea",
  "Kuwait",
  "Letonia",
  "Líbano",
  "Liberia",
  "Liechtenstein",
  "Lituania",
  "Luxemburgo",
  "Macao",
  "Macedonia",
  "Madagascar",
  "Malawi",
  "Malasia",
  "Maldivas",
  "Mali",
  "Malta",
  "Martinica",
  "Mauritania",
  "México",
  "Micronesia",
  "Moldavia",
  "Mónaco",
  "Mongolia",
  "Montenegro",
  "Montserrat",
  "Marruecos",
  "Mozambique",
  "Namibia",
  "Nauru",
  "Nepal",
  "Holanda",
  "Nueva Zelanda",
  "Nicaragua",
  "Niger",
  "Nigeria",
  "Noruega",
  "Omán",
  "Pakistan",
  "Panamá",
  "Papúa Nueva Guinea",
  "Paraguay",
  "Perú",
  "Filipinas",
  "Poland",
  "Portugal",
  "Puerto Rico",
  "Rusia",
  "Ruanda",
  "Samoa",
  "San Marino",
  "Santo Tomé y Principe",
  "Arabia Saudí",
  "Senegal",
  "Serbia",
  "Seychelles",
  "Sierra Leona",
  "Singapur",
  "Eslovaquia",
  "Eslovenia",
  "Somalia",
  "España",
  "Sri Lanka",
  "Sudán",
  "Suriname",
  "Suecia",
  "Suiza",
  "Siria",
  "Taiwan",
  "Tajikistan",
  "Tanzania",
  "Tailandia",
  "Timor-Leste",
  "Togo",
  "Tonga",
  "Trinidad y Tobago",
  "Tunez",
  "Turquia",
  "Uganda",
  "Ucrania",
  "Emiratos Árabes Unidos",
  "Reino Unido",
  "Estados Unidos de América",
  "Uruguay",
  "Uzbekistan",
  "Vanuatu",
  "Venezuela",
  "Vietnam",
  "Yemen",
  "Zambia",
  "Zimbabwe"
];

},{}],"node_modules/faker/lib/locales/es_MX/address/building_number.js":[function(require,module,exports) {
module["exports"] = [
  " s/n.",
  ", #",
  ", ##",
  " #",
  " ##",
  " ###",
  " ####"
];

},{}],"node_modules/faker/lib/locales/es_MX/address/street_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "Aldea",
  "Apartamento",
  "Arrabal",
  "Arroyo",
  "Avenida",
  "Bajada",
  "Barranco",
  "Barrio",
  "Bloque",
  "Calle",
  "Calleja",
  "Camino",
  "Carretera",
  "Caserio",
  "Colegio",
  "Colonia",
  "Conjunto",
  "Cuesta",
  "Chalet",
  "Edificio",
  "Entrada",
  "Escalinata",
  "Explanada",
  "Extramuros",
  "Extrarradio",
  "Ferrocarril",
  "Glorieta",
  "Gran Subida",
  "Grupo",
  "Huerta",
  "Jardines",
  "Lado",
  "Lugar",
  "Manzana",
  "Masía",
  "Mercado",
  "Monte",
  "Muelle",
  "Municipio",
  "Parcela",
  "Parque",
  "Partida",
  "Pasaje",
  "Paseo",
  "Plaza",
  "Poblado",
  "Polígono",
  "Prolongación",
  "Puente",
  "Puerta",
  "Quinta",
  "Ramal",
  "Rambla",
  "Rampa",
  "Riera",
  "Rincón",
  "Ronda",
  "Rua",
  "Salida",
  "Sector",
  "Sección",
  "Senda",
  "Solar",
  "Subida",
  "Terrenos",
  "Torrente",
  "Travesía",
  "Urbanización",
  "Vía",
  "Vía Pública"
];

},{}],"node_modules/faker/lib/locales/es_MX/address/secondary_address.js":[function(require,module,exports) {
module["exports"] = [
  "Esc. ###",
  "Puerta ###",
  "Edificio #"
];

},{}],"node_modules/faker/lib/locales/es_MX/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "#####"
];

},{}],"node_modules/faker/lib/locales/es_MX/address/state.js":[function(require,module,exports) {
module["exports"] = [
  "Aguascalientes",
  "Baja California Norte",
  "Baja California Sur",
  'Estado de México',
  "Campeche",
  "Chiapas",
  "Chihuahua",
  "Coahuila",
  "Colima",
  "Durango",
  "Guanajuato",
  "Guerrero",
  "Hidalgo",
  "Jalisco",
  "Michoacan",
  "Morelos",
  "Nayarit",
  'Nuevo León',
  "Oaxaca",
  "Puebla",
  "Querétaro",
  "Quintana Roo",
  "San Luis Potosí",
  "Sinaloa",
  "Sonora",
  "Tabasco",
  "Tamaulipas",
  "Tlaxcala",
  "Veracruz",
  "Yucatán",
  "Zacatecas"
];

},{}],"node_modules/faker/lib/locales/es_MX/address/state_abbr.js":[function(require,module,exports) {
module["exports"] = [
  "AS",
  "BC",
  "BS",
  "CC",
  "CS",
  "CH",
  "CL",
  "CM",
  "DF",
  "DG",
  "GT",
  "GR",
  "HG",
  "JC",
  "MC",
  "MN",
  "MS",
  "NT",
  "NL",
  "OC",
  "PL",
  "QT",
  "QR",
  "SP",
  "SL",
  "SR",
  "TC",
  "TS",
  "TL",
  "VZ",
  "YN",
  "ZS"
];

},{}],"node_modules/faker/lib/locales/es_MX/address/time_zone.js":[function(require,module,exports) {
module["exports"] = [
  "Pacífico/Midway",
  "Pacífico/Pago_Pago",
  "Pacífico/Honolulu",
  "America/Juneau",
  "America/Los_Angeles",
  "America/Tijuana",
  "America/Denver",
  "America/Phoenix",
  "America/Chihuahua",
  "America/Mazatlan",
  "America/Chicago",
  "America/Regina",
  "America/Mexico_City",
  "America/Monterrey",
  "America/Guatemala",
  "America/New_York",
  "America/Indiana/Indianapolis",
  "America/Bogota",
  "America/Lima",
  "America/Lima",
  "America/Halifax",
  "America/Caracas",
  "America/La_Paz",
  "America/Santiago",
  "America/St_Johns",
  "America/Sao_Paulo",
  "America/Argentina/Buenos_Aires",
  "America/Guyana",
  "America/Godthab",
  "Atlantic/South_Georgia",
  "Atlantic/Azores",
  "Atlantic/Cape_Verde",
  "Europa/Dublin",
  "Europa/London",
  "Europa/Lisbon",
  "Europa/London",
  "Africa/Casablanca",
  "Africa/Monrovia",
  "Etc/UTC",
  "Europa/Belgrade",
  "Europa/Bratislava",
  "Europa/Budapest",
  "Europa/Ljubljana",
  "Europa/Prague",
  "Europa/Sarajevo",
  "Europa/Skopje",
  "Europa/Warsaw",
  "Europa/Zagreb",
  "Europa/Brussels",
  "Europa/Copenhagen",
  "Europa/Madrid",
  "Europa/Paris",
  "Europa/Amsterdam",
  "Europa/Berlin",
  "Europa/Berlin",
  "Europa/Rome",
  "Europa/Stockholm",
  "Europa/Vienna",
  "Africa/Algiers",
  "Europa/Bucharest",
  "Africa/Cairo",
  "Europa/Helsinki",
  "Europa/Kiev",
  "Europa/Riga",
  "Europa/Sofia",
  "Europa/Tallinn",
  "Europa/Vilnius",
  "Europa/Athens",
  "Europa/Istanbul",
  "Europa/Minsk",
  "Asia/Jerusalen",
  "Africa/Harare",
  "Africa/Johannesburg",
  "Europa/Moscú",
  "Europa/Moscú",
  "Europa/Moscú",
  "Asia/Kuwait",
  "Asia/Riyadh",
  "Africa/Nairobi",
  "Asia/Baghdad",
  "Asia/Tehran",
  "Asia/Muscat",
  "Asia/Muscat",
  "Asia/Baku",
  "Asia/Tbilisi",
  "Asia/Yerevan",
  "Asia/Kabul",
  "Asia/Yekaterinburg",
  "Asia/Karachi",
  "Asia/Karachi",
  "Asia/Tashkent",
  "Asia/Kolkata",
  "Asia/Kolkata",
  "Asia/Kolkata",
  "Asia/Kolkata",
  "Asia/Kathmandu",
  "Asia/Dhaka",
  "Asia/Dhaka",
  "Asia/Colombo",
  "Asia/Almaty",
  "Asia/Novosibirsk",
  "Asia/Rangoon",
  "Asia/Bangkok",
  "Asia/Bangkok",
  "Asia/Jakarta",
  "Asia/Krasnoyarsk",
  "Asia/Shanghai",
  "Asia/Chongqing",
  "Asia/Hong_Kong",
  "Asia/Urumqi",
  "Asia/Kuala_Lumpur",
  "Asia/Singapore",
  "Asia/Taipei",
  "Australia/Perth",
  "Asia/Irkutsk",
  "Asia/Ulaanbaatar",
  "Asia/Seoul",
  "Asia/Tokyo",
  "Asia/Tokyo",
  "Asia/Tokyo",
  "Asia/Yakutsk",
  "Australia/Darwin",
  "Australia/Adelaide",
  "Australia/Melbourne",
  "Australia/Melbourne",
  "Australia/Sydney",
  "Australia/Brisbane",
  "Australia/Hobart",
  "Asia/Vladivostok",
  "Pacífico/Guam",
  "Pacífico/Port_Moresby",
  "Asia/Magadan",
  "Asia/Magadan",
  "Pacífico/Noumea",
  "Pacífico/Fiji",
  "Asia/Kamchatka",
  "Pacífico/Majuro",
  "Pacífico/Auckland",
  "Pacífico/Auckland",
  "Pacífico/Tongatapu",
  "Pacífico/Fakaofo",
  "Pacífico/Apia"
];

},{}],"node_modules/faker/lib/locales/es_MX/address/city.js":[function(require,module,exports) {
module["exports"] = [
  "#{city_prefix}"
];

},{}],"node_modules/faker/lib/locales/es_MX/address/street.js":[function(require,module,exports) {
module["exports"] = [
	"20 de Noviembre",
	"Cinco de Mayo",
	"Cuahutemoc",
	"Manzanares",
	"Donceles",
	"Francisco I. Madero",
	"Juárez",
	"Repúplica de Cuba",
	"Repúplica de Chile",
	"Repúplica de Argentina",
	"Repúplica de Uruguay",
	"Isabel la Católica",
	"Izazaga",
	"Eje Central",
	"Eje 6",
	"Eje 5",
	"La viga",
	"Aniceto Ortega",
	"Miguel Ángel de Quevedo",
	"Amores",
	"Coyoacán",
	"Coruña",
	"Batalla de Naco",
	"La otra banda",
	"Piedra del Comal",
	"Balcón de los edecanes",
	"Barrio la Lonja",
	"Jicolapa",
	"Zacatlán",
	"Zapata",
	"Polotitlan",
	"Calimaya",
	"Flor Marina",
	"Flor Solvestre",
	"San Miguel",
	"Naranjo",
	"Cedro",
	"Jalisco",
	"Avena"
];
},{}],"node_modules/faker/lib/locales/es_MX/address/street_name.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_suffix} #{Name.first_name}",
  "#{street_suffix} #{Name.first_name} #{Name.last_name}",
  "#{street_suffix} #{street}",
  "#{street_suffix} #{street}",
  "#{street_suffix} #{street}",
  "#{street_suffix} #{street}"

];

},{}],"node_modules/faker/lib/locales/es_MX/address/street_address.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_name}#{building_number}",
  "#{street_name}#{building_number} #{secondary_address}"
];

},{}],"node_modules/faker/lib/locales/es_MX/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "México"
];

},{}],"node_modules/faker/lib/locales/es_MX/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.city_prefix = require("./city_prefix");
address.city_suffix = require("./city_suffix");
address.country = require("./country");
address.building_number = require("./building_number");
address.street_suffix = require("./street_suffix");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.time_zone = require("./time_zone");
address.city = require("./city");
address.street = require("./street");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");
},{"./city_prefix":"node_modules/faker/lib/locales/es_MX/address/city_prefix.js","./city_suffix":"node_modules/faker/lib/locales/es_MX/address/city_suffix.js","./country":"node_modules/faker/lib/locales/es_MX/address/country.js","./building_number":"node_modules/faker/lib/locales/es_MX/address/building_number.js","./street_suffix":"node_modules/faker/lib/locales/es_MX/address/street_suffix.js","./secondary_address":"node_modules/faker/lib/locales/es_MX/address/secondary_address.js","./postcode":"node_modules/faker/lib/locales/es_MX/address/postcode.js","./state":"node_modules/faker/lib/locales/es_MX/address/state.js","./state_abbr":"node_modules/faker/lib/locales/es_MX/address/state_abbr.js","./time_zone":"node_modules/faker/lib/locales/es_MX/address/time_zone.js","./city":"node_modules/faker/lib/locales/es_MX/address/city.js","./street":"node_modules/faker/lib/locales/es_MX/address/street.js","./street_name":"node_modules/faker/lib/locales/es_MX/address/street_name.js","./street_address":"node_modules/faker/lib/locales/es_MX/address/street_address.js","./default_country":"node_modules/faker/lib/locales/es_MX/address/default_country.js"}],"node_modules/faker/lib/locales/es_MX/company/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "S.L.",
  "e Hijos",
  "S.A.",
  "Hermanos"
];

},{}],"node_modules/faker/lib/locales/es_MX/company/adjective.js":[function(require,module,exports) {
module["exports"] = [
  "Adaptativo",
  "Avanzado",
  "Asimilado",
  "Automatizado",
  "Equilibrado",
  "Centrado en el negocio",
  "Centralizado",
  "Clonado",
  "Compatible",
  "Configurable",
  "Multi grupo",
  "Multi plataforma",
  "Centrado en el usuario",
  "Configurable",
  "Descentralizado",
  "Digitalizado",
  "Distribuido",
  "Diverso",
  "Reducido",
  "Mejorado",
  "Para toda la empresa",
  "Ergonomico",
  "Exclusivo",
  "Expandido",
  "Extendido",
  "Cara a cara",
  "Enfocado",
  "Totalmente configurable",
  "Fundamental",
  "Orígenes",
  "Horizontal",
  "Implementado",
  "Innovador",
  "Integrado",
  "Intuitivo",
  "Inverso",
  "Gestionado",
  "Obligatorio",
  "Monitorizado",
  "Multi canal",
  "Multi lateral",
  "Multi capa",
  "En red",
  "Orientado a objetos",
  "Open-source",
  "Operativo",
  "Optimizado",
  "Opcional",
  "Organico",
  "Organizado",
  "Perseverando",
  "Persistente",
  "en fases",
  "Polarizado",
  "Pre-emptivo",
  "Proactivo",
  "Enfocado a benficios",
  "Profundo",
  "Programable",
  "Progresivo",
  "Public-key",
  "Enfocado en la calidad",
  "Reactivo",
  "Realineado",
  "Re-contextualizado",
  "Re-implementado",
  "Reducido",
  "Ingenieria inversa",
  "Robusto",
  "Fácil",
  "Seguro",
  "Auto proporciona",
  "Compartible",
  "Intercambiable",
  "Sincronizado",
  "Orientado a equipos",
  "Total",
  "Universal",
  "Mejorado",
  "Actualizable",
  "Centrado en el usuario",
  "Amigable",
  "Versatil",
  "Virtual",
  "Visionario"
];

},{}],"node_modules/faker/lib/locales/es_MX/company/descriptor.js":[function(require,module,exports) {
module["exports"] = [
  "24 horas",
  "24/7",
  "3rd generación",
  "4th generación",
  "5th generación",
  "6th generación",
  "analizada",
  "asimétrica",
  "asíncrona",
  "monitorizada por red",
  "bidireccional",
  "bifurcada",
  "generada por el cliente",
  "cliente servidor",
  "coherente",
  "cohesiva",
  "compuesto",
  "sensible al contexto",
  "basado en el contexto",
  "basado en contenido",
  "dedicada",
  "generado por la demanda",
  "didactica",
  "direccional",
  "discreta",
  "dinámica",
  "potenciada",
  "acompasada",
  "ejecutiva",
  "explícita",
  "tolerante a fallos",
  "innovadora",
  "amplio ábanico",
  "global",
  "heurística",
  "alto nivel",
  "holística",
  "homogénea",
  "hibrida",
  "incremental",
  "intangible",
  "interactiva",
  "intermedia",
  "local",
  "logística",
  "maximizada",
  "metódica",
  "misión crítica",
  "móbil",
  "modular",
  "motivadora",
  "multimedia",
  "multiestado",
  "multitarea",
  "nacional",
  "basado en necesidades",
  "neutral",
  "nueva generación",
  "no-volátil",
  "orientado a objetos",
  "óptima",
  "optimizada",
  "radical",
  "tiempo real",
  "recíproca",
  "regional",
  "escalable",
  "secundaria",
  "orientada a soluciones",
  "estable",
  "estatica",
  "sistemática",
  "sistémica",
  "tangible",
  "terciaria",
  "transicional",
  "uniforme",
  "valor añadido",
  "vía web",
  "defectos cero",
  "tolerancia cero"
];

},{}],"node_modules/faker/lib/locales/es_MX/company/noun.js":[function(require,module,exports) {
module["exports"] = [
  "habilidad",
  "acceso",
  "adaptador",
  "algoritmo",
  "alianza",
  "analista",
  "aplicación",
  "enfoque",
  "arquitectura",
  "archivo",
  "inteligencia artificial",
  "array",
  "actitud",
  "medición",
  "gestión presupuestaria",
  "capacidad",
  "desafío",
  "circuito",
  "colaboración",
  "complejidad",
  "concepto",
  "conglomeración",
  "contingencia",
  "núcleo",
  "fidelidad",
  "base de datos",
  "data-warehouse",
  "definición",
  "emulación",
  "codificar",
  "encriptar",
  "extranet",
  "firmware",
  "flexibilidad",
  "focus group",
  "previsión",
  "base de trabajo",
  "función",
  "funcionalidad",
  "Interfaz Gráfica",
  "groupware",
  "Interfaz gráfico de usuario",
  "hardware",
  "Soporte",
  "jerarquía",
  "conjunto",
  "implementación",
  "infraestructura",
  "iniciativa",
  "instalación",
  "conjunto de instrucciones",
  "interfaz",
  "intranet",
  "base del conocimiento",
  "red de area local",
  "aprovechar",
  "matrices",
  "metodologías",
  "middleware",
  "migración",
  "modelo",
  "moderador",
  "monitorizar",
  "arquitectura abierta",
  "sistema abierto",
  "orquestar",
  "paradigma",
  "paralelismo",
  "política",
  "portal",
  "estructura de precios",
  "proceso de mejora",
  "producto",
  "productividad",
  "proyecto",
  "proyección",
  "protocolo",
  "línea segura",
  "software",
  "solución",
  "estandardización",
  "estrategia",
  "estructura",
  "éxito",
  "superestructura",
  "soporte",
  "sinergia",
  "mediante",
  "marco de tiempo",
  "caja de herramientas",
  "utilización",
  "website",
  "fuerza de trabajo"
];

},{}],"node_modules/faker/lib/locales/es_MX/company/bs_verb.js":[function(require,module,exports) {
module["exports"] = [
   "poner en práctica",
   "utilizar",
   "integrar",
   "racionalizar",
   "optimizar",
   "evolucionar",
   "transformar",
   "abrazar",
   "habilitar",
   "orquestar",
   "apalancamiento",
   "reinventar",
   "agregado",
   "arquitecto",
   "mejorar",
   "incentivar",
   "transformarse",
   "empoderar",
   "Envisioneer",
   "monetizar",
   "arnés",
   "facilitar",
   "aprovechar",
   "desintermediar",
   "sinergia",
   "estrategias",
   "desplegar",
   "marca",
   "crecer",
   "objetivo",
   "sindicato",
   "sintetizar",
   "entregue",
   "malla",
   "incubar",
   "enganchar",
   "maximizar",
   "punto de referencia",
   "acelerar",
   "reintermediate",
   "pizarra",
   "visualizar",
   "reutilizar",
   "innovar",
   "escala",
   "desatar",
   "conducir",
   "extender",
   "ingeniero",
   "revolucionar",
   "generar",
   "explotar",
   "transición",
   "e-enable",
   "repetir",
   "cultivar",
   "matriz",
   "productize",
   "redefinir",
   "recontextualizar"
]

},{}],"node_modules/faker/lib/locales/es_MX/company/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{Name.last_name} #{suffix}",
  "#{Name.last_name} y #{Name.last_name}",
  "#{Name.last_name} #{Name.last_name} #{suffix}",
  "#{Name.last_name}, #{Name.last_name} y #{Name.last_name} Asociados"
];

},{}],"node_modules/faker/lib/locales/es_MX/company/bs_adjective.js":[function(require,module,exports) {
module["exports"] = [
  "Clics y mortero",
  "Valor añadido",
  "Vertical",
  "Proactivo",
  "Robusto",
  "Revolucionario",
  "Escalable",
  "De vanguardia",
  "Innovador",
  "Intuitivo",
  "Estratégico",
  "E-business",
  "Misión crítica",
  "Pegajosa",
  "Doce y cincuenta y nueve de la noche",
  "24/7",
  "De extremo a extremo",
  "Global",
  "B2B",
  "B2C",
  "Granular",
  "Fricción",
  "Virtual",
  "Viral",
  "Dinámico",
  "24/365",
  "Mejor de su clase",
  "Asesino",
  "Magnética",
  "Filo sangriento",
  "Habilitado web",
  "Interactiva",
  "Punto com",
  "Sexy",
  "Back-end",
  "Tiempo real",
  "Eficiente",
  "Frontal",
  "Distribuida",
  "Sin costura",
  "Extensible",
  "Llave en mano",
  "Clase mundial",
  "Código abierto",
  "Multiplataforma",
  "Cross-media",
  "Sinérgico",
  "ladrillos y clics",
  "Fuera de la caja",
  "Empresa",
  "Integrado",
  "Impactante",
  "Inalámbrico",
  "Transparente",
  "Próxima generación",
  "Innovador",
  "User-centric",
  "Visionario",
  "A medida",
  "Ubicua",
  "Enchufa y juega",
  "Colaboración",
  "Convincente",
  "Holístico",
  "Ricos"
];

},{}],"node_modules/faker/lib/locales/es_MX/company/bs_noun.js":[function(require,module,exports) {
module["exports"] = [
   "sinergias",
   "web-readiness",
   "paradigmas",
   "mercados",
   "asociaciones",
   "infraestructuras",
   "plataformas",
   "iniciativas",
   "canales",
   "ojos",
   "comunidades",
   "ROI",
   "soluciones",
   "minoristas electrónicos",
   "e-servicios",
   "elementos de acción",
   "portales",
   "nichos",
   "tecnologías",
   "contenido",
   "vortales",
   "cadenas de suministro",
   "convergencia",
   "relaciones",
   "arquitecturas",
   "interfaces",
   "mercados electrónicos",
   "e-commerce",
   "sistemas",
   "ancho de banda",
   "infomediarios",
   "modelos",
   "Mindshare",
   "entregables",
   "usuarios",
   "esquemas",
   "redes",
   "aplicaciones",
   "métricas",
   "e-business",
   "funcionalidades",
   "experiencias",
   "servicios web",
   "metodologías"
];

},{}],"node_modules/faker/lib/locales/es_MX/company/index.js":[function(require,module,exports) {
var company = {};
module['exports'] = company;
company.suffix = require("./suffix");
company.adjective = require("./adjective");
company.descriptor = require("./descriptor");
company.noun = require("./noun");
company.bs_verb = require("./bs_verb");
company.name = require("./name");
company.bs_adjective = require("./bs_adjective");
company.bs_noun = require("./bs_noun");

},{"./suffix":"node_modules/faker/lib/locales/es_MX/company/suffix.js","./adjective":"node_modules/faker/lib/locales/es_MX/company/adjective.js","./descriptor":"node_modules/faker/lib/locales/es_MX/company/descriptor.js","./noun":"node_modules/faker/lib/locales/es_MX/company/noun.js","./bs_verb":"node_modules/faker/lib/locales/es_MX/company/bs_verb.js","./name":"node_modules/faker/lib/locales/es_MX/company/name.js","./bs_adjective":"node_modules/faker/lib/locales/es_MX/company/bs_adjective.js","./bs_noun":"node_modules/faker/lib/locales/es_MX/company/bs_noun.js"}],"node_modules/faker/lib/locales/es_MX/internet/free_email.js":[function(require,module,exports) {
module["exports"] = [
  "gmail.com",
  "yahoo.com",
  "hotmail.com",
  "nearbpo.com",
  "corpfolder.com"
];

},{}],"node_modules/faker/lib/locales/es_MX/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "com",
  "mx",
  "info",
  "com.mx",
  "org",
  "gob.mx"
];

},{}],"node_modules/faker/lib/locales/es_MX/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.free_email = require("./free_email");
internet.domain_suffix = require("./domain_suffix");

},{"./free_email":"node_modules/faker/lib/locales/es_MX/internet/free_email.js","./domain_suffix":"node_modules/faker/lib/locales/es_MX/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/es_MX/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "5###-###-###",
  "5##.###.###",
  "5## ### ###",
  "5########"
];

},{}],"node_modules/faker/lib/locales/es_MX/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/es_MX/phone_number/formats.js"}],"node_modules/faker/lib/locales/es_MX/cell_phone/formats.js":[function(require,module,exports) {
module["exports"] = [
  "5##-###-###",
  "5##.###.###",
  "5## ### ###",
  "5########"
];

},{}],"node_modules/faker/lib/locales/es_MX/cell_phone/index.js":[function(require,module,exports) {
var cell_phone = {};
module['exports'] = cell_phone;
cell_phone.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/es_MX/cell_phone/formats.js"}],"node_modules/faker/lib/locales/es_MX/lorem/words.js":[function(require,module,exports) {
module["exports"] = [
"Abacalero",
"Abacería",
"Abacero",
"Abacial",
"Abaco",
"Abacora",
"Abacorar",
"Abad",
"Abada",
"Abadejo",
"Abadengo",
"Abadernar",
"Abadesa",
"Abadí",
"Abadía",
"Abadiado",
"Abadiato",
"Abajadero",
"Abajamiento",
"Abajar",
"Abajeño",
"Abajera",
"Abajo",
"Abalada",
"Abalanzar",
"Abalar",
"Abalaustrado",
"Abaldonadamente",
"Abaldonamiento",
"Bastonada",
"Bastonazo",
"Bastoncillo",
"Bastonear",
"Bastonero",
"Bástulo",
"Basura",
"Basural",
"Basurear",
"Basurero",
"Bata",
"Batacazo",
"Batahola",
"Batalán",
"Batalla",
"Batallador",
"Batallar",
"Batallaroso",
"Batallola",
"Batallón",
"Batallona",
"Batalloso",
"Batán",
"Batanar",
"Batanear",
"Batanero",
"Batanga",
"Bataola",
"Batata",
"Batatazo",
"Batato",
"Batavia",
"Bátavo",
"Batayola",
"Batazo",
"Bate",
"Batea",
"Bateador",
"Bateaguas",
"Cenagar",
"Cenagoso",
"Cenal",
"Cenaoscuras",
"Ceñar",
"Cenata",
"Cenca",
"Cencapa",
"Cencellada",
"Cenceñada",
"Cenceño",
"Cencero",
"Cencerra",
"Cencerrada",
"Cencerrado",
"Cencerrear",
"Cencerreo",
"Cencerril",
"Cencerrillas",
"Cencerro",
"Cencerrón",
"Cencha",
"Cencido",
"Cencío",
"Cencivera",
"Cenco",
"Cencuate",
"Cendal",
"Cendalí",
"Céndea",
"Cendolilla",
"Cendra",
"Cendrada",
"Cendradilla",
"Cendrado",
"Cendrar",
"Cendrazo",
"Cenefa",
"Cenegar",
"Ceneque",
"Cenero",
"Cenestesia",
"Desceñir",
"Descensión",
"Descenso",
"Descentrado",
"Descentralización",
"Descentralizador",
"Descentralizar",
"Descentrar",
"Descepar",
"Descerar",
"Descercado",
"Descercador",
"Descercar",
"Descerco",
"Descerebración",
"Descerebrado",
"Descerebrar",
"Descerezar",
"Descerrajado",
"Descerrajadura",
"Descerrajar",
"Descerrar",
"Descerrumarse",
"Descervigamiento",
"Descervigar",
"Deschapar",
"Descharchar",
"Deschavetado",
"Deschavetarse",
"Deschuponar",
"Descifrable",
"Descifrador",
"Desciframiento",
"Descifrar",
"Descifre",
"Descimbramiento",
"Descimbrar",
"Engarbarse",
"Engarberar",
"Engarbullar",
"Engarce",
"Engarfiar",
"Engargantadura",
"Engargantar",
"Engargante",
"Engargolado",
"Engargolar",
"Engaritar",
"Engarmarse",
"Engarnio",
"Engarrafador",
"Engarrafar",
"Engarrar",
"Engarro",
"Engarronar",
"Engarrotar",
"Engarzador",
"Engarzadura",
"Engarzar",
"Engasgarse",
"Engastador",
"Engastadura",
"Engastar",
"Engaste",
"Ficción",
"Fice",
"Ficha",
"Fichaje",
"Fichar",
"Fichero",
"Ficoideo",
"Ficticio",
"Fidalgo",
"Fidecomiso",
"Fidedigno",
"Fideero",
"Fideicomisario",
"Fideicomiso",
"Fideicomitente",
"Fideísmo",
"Fidelidad",
"Fidelísimo",
"Fideo",
"Fido",
"Fiducia",
"Geminación",
"Geminado",
"Geminar",
"Géminis",
"Gémino",
"Gemíparo",
"Gemiquear",
"Gemiqueo",
"Gemir",
"Gemología",
"Gemológico",
"Gemólogo",
"Gemonias",
"Gemoso",
"Gemoterapia",
"Gen",
"Genciana",
"Gencianáceo",
"Gencianeo",
"Gendarme",
"Gendarmería",
"Genealogía",
"Genealógico",
"Genealogista",
"Genearca",
"Geneático",
"Generable",
"Generación",
"Generacional",
"Generador",
"General",
"Generala",
"Generalato",
"Generalidad",
"Generalísimo",
"Incordio",
"Incorporación",
"Incorporal",
"Incorporalmente",
"Incorporar",
"Incorporeidad",
"Incorpóreo",
"Incorporo",
"Incorrección",
"Incorrectamente",
"Incorrecto",
"Incorregibilidad",
"Incorregible",
"Incorregiblemente",
"Incorrupción",
"Incorruptamente",
"Incorruptibilidad",
"Incorruptible",
"Incorrupto",
"Incrasar",
"Increado",
"Incredibilidad",
"Incrédulamente",
"Incredulidad",
"Incrédulo",
"Increíble",
"Increíblemente",
"Incrementar",
"Incremento",
"Increpación",
"Increpador",
"Increpar",
"Incriminación",
"Incriminar",
"Incristalizable",
"Incruentamente",
"Incruento",
"Incrustación"
];

},{}],"node_modules/faker/lib/locales/es_MX/lorem/supplemental.js":[function(require,module,exports) {
module["exports"] = [
  "abbas",
  "abduco",
  "abeo",
  "abscido",
  "absconditus",
  "absens",
  "absorbeo",
  "absque",
  "abstergo",
  "absum",
  "abundans",
  "abutor",
  "accedo",
  "accendo",
  "acceptus",
  "accipio",
  "accommodo",
  "accusator",
  "acer",
  "acerbitas",
  "acervus",
  "acidus",
  "acies",
  "acquiro",
  "acsi",
  "adamo",
  "adaugeo",
  "addo",
  "adduco",
  "ademptio",
  "adeo",
  "adeptio",
  "adfectus",
  "adfero",
  "adficio",
  "adflicto",
  "adhaero",
  "adhuc",
  "adicio",
  "adimpleo",
  "adinventitias",
  "adipiscor",
  "adiuvo",
  "administratio",
  "admiratio",
  "admitto",
  "admoneo",
  "admoveo",
  "adnuo",
  "adopto",
  "adsidue",
  "adstringo",
  "adsuesco",
  "adsum",
  "adulatio",
  "adulescens",
  "adultus",
  "aduro",
  "advenio",
  "adversus",
  "advoco",
  "aedificium",
  "aeger",
  "aegre",
  "aegrotatio",
  "aegrus",
  "aeneus",
  "aequitas",
  "aequus",
  "aer",
  "aestas",
  "aestivus",
  "aestus",
  "aetas",
  "aeternus",
  "ager",
  "aggero",
  "aggredior",
  "agnitio",
  "agnosco",
  "ago",
  "ait",
  "aiunt",
  "alienus",
  "alii",
  "alioqui",
  "aliqua",
  "alius",
  "allatus",
  "alo",
  "alter",
  "altus",
  "alveus",
  "amaritudo",
  "ambitus",
  "ambulo",
  "amicitia",
  "amiculum",
  "amissio",
  "amita",
  "amitto",
  "amo",
  "amor",
  "amoveo",
  "amplexus",
  "amplitudo",
  "amplus",
  "ancilla",
  "angelus",
  "angulus",
  "angustus",
  "animadverto",
  "animi",
  "animus",
  "annus",
  "anser",
  "ante",
  "antea",
  "antepono",
  "antiquus",
  "aperio",
  "aperte",
  "apostolus",
  "apparatus",
  "appello",
  "appono",
  "appositus",
  "approbo",
  "apto",
  "aptus",
  "apud",
  "aqua",
  "ara",
  "aranea",
  "arbitro",
  "arbor",
  "arbustum",
  "arca",
  "arceo",
  "arcesso",
  "arcus",
  "argentum",
  "argumentum",
  "arguo",
  "arma",
  "armarium",
  "armo",
  "aro",
  "ars",
  "articulus",
  "artificiose",
  "arto",
  "arx",
  "ascisco",
  "ascit",
  "asper",
  "aspicio",
  "asporto",
  "assentator",
  "astrum",
  "atavus",
  "ater",
  "atqui",
  "atrocitas",
  "atrox",
  "attero",
  "attollo",
  "attonbitus",
  "auctor",
  "auctus",
  "audacia",
  "audax",
  "audentia",
  "audeo",
  "audio",
  "auditor",
  "aufero",
  "aureus",
  "auris",
  "aurum",
  "aut",
  "autem",
  "autus",
  "auxilium",
  "avaritia",
  "avarus",
  "aveho",
  "averto",
  "avoco",
  "baiulus",
  "balbus",
  "barba",
  "bardus",
  "basium",
  "beatus",
  "bellicus",
  "bellum",
  "bene",
  "beneficium",
  "benevolentia",
  "benigne",
  "bestia",
  "bibo",
  "bis",
  "blandior",
  "bonus",
  "bos",
  "brevis",
  "cado",
  "caecus",
  "caelestis",
  "caelum",
  "calamitas",
  "calcar",
  "calco",
  "calculus",
  "callide",
  "campana",
  "candidus",
  "canis",
  "canonicus",
  "canto",
  "capillus",
  "capio",
  "capitulus",
  "capto",
  "caput",
  "carbo",
  "carcer",
  "careo",
  "caries",
  "cariosus",
  "caritas",
  "carmen",
  "carpo",
  "carus",
  "casso",
  "caste",
  "casus",
  "catena",
  "caterva",
  "cattus",
  "cauda",
  "causa",
  "caute",
  "caveo",
  "cavus",
  "cedo",
  "celebrer",
  "celer",
  "celo",
  "cena",
  "cenaculum",
  "ceno",
  "censura",
  "centum",
  "cerno",
  "cernuus",
  "certe",
  "certo",
  "certus",
  "cervus",
  "cetera",
  "charisma",
  "chirographum",
  "cibo",
  "cibus",
  "cicuta",
  "cilicium",
  "cimentarius",
  "ciminatio",
  "cinis",
  "circumvenio",
  "cito",
  "civis",
  "civitas",
  "clam",
  "clamo",
  "claro",
  "clarus",
  "claudeo",
  "claustrum",
  "clementia",
  "clibanus",
  "coadunatio",
  "coaegresco",
  "coepi",
  "coerceo",
  "cogito",
  "cognatus",
  "cognomen",
  "cogo",
  "cohaero",
  "cohibeo",
  "cohors",
  "colligo",
  "colloco",
  "collum",
  "colo",
  "color",
  "coma",
  "combibo",
  "comburo",
  "comedo",
  "comes",
  "cometes",
  "comis",
  "comitatus",
  "commemoro",
  "comminor",
  "commodo",
  "communis",
  "comparo",
  "compello",
  "complectus",
  "compono",
  "comprehendo",
  "comptus",
  "conatus",
  "concedo",
  "concido",
  "conculco",
  "condico",
  "conduco",
  "confero",
  "confido",
  "conforto",
  "confugo",
  "congregatio",
  "conicio",
  "coniecto",
  "conitor",
  "coniuratio",
  "conor",
  "conqueror",
  "conscendo",
  "conservo",
  "considero",
  "conspergo",
  "constans",
  "consuasor",
  "contabesco",
  "contego",
  "contigo",
  "contra",
  "conturbo",
  "conventus",
  "convoco",
  "copia",
  "copiose",
  "cornu",
  "corona",
  "corpus",
  "correptius",
  "corrigo",
  "corroboro",
  "corrumpo",
  "coruscus",
  "cotidie",
  "crapula",
  "cras",
  "crastinus",
  "creator",
  "creber",
  "crebro",
  "credo",
  "creo",
  "creptio",
  "crepusculum",
  "cresco",
  "creta",
  "cribro",
  "crinis",
  "cruciamentum",
  "crudelis",
  "cruentus",
  "crur",
  "crustulum",
  "crux",
  "cubicularis",
  "cubitum",
  "cubo",
  "cui",
  "cuius",
  "culpa",
  "culpo",
  "cultellus",
  "cultura",
  "cum",
  "cunabula",
  "cunae",
  "cunctatio",
  "cupiditas",
  "cupio",
  "cuppedia",
  "cupressus",
  "cur",
  "cura",
  "curatio",
  "curia",
  "curiositas",
  "curis",
  "curo",
  "curriculum",
  "currus",
  "cursim",
  "curso",
  "cursus",
  "curto",
  "curtus",
  "curvo",
  "curvus",
  "custodia",
  "damnatio",
  "damno",
  "dapifer",
  "debeo",
  "debilito",
  "decens",
  "decerno",
  "decet",
  "decimus",
  "decipio",
  "decor",
  "decretum",
  "decumbo",
  "dedecor",
  "dedico",
  "deduco",
  "defaeco",
  "defendo",
  "defero",
  "defessus",
  "defetiscor",
  "deficio",
  "defigo",
  "defleo",
  "defluo",
  "defungo",
  "degenero",
  "degero",
  "degusto",
  "deinde",
  "delectatio",
  "delego",
  "deleo",
  "delibero",
  "delicate",
  "delinquo",
  "deludo",
  "demens",
  "demergo",
  "demitto",
  "demo",
  "demonstro",
  "demoror",
  "demulceo",
  "demum",
  "denego",
  "denique",
  "dens",
  "denuncio",
  "denuo",
  "deorsum",
  "depereo",
  "depono",
  "depopulo",
  "deporto",
  "depraedor",
  "deprecator",
  "deprimo",
  "depromo",
  "depulso",
  "deputo",
  "derelinquo",
  "derideo",
  "deripio",
  "desidero",
  "desino",
  "desipio",
  "desolo",
  "desparatus",
  "despecto",
  "despirmatio",
  "infit",
  "inflammatio",
  "paens",
  "patior",
  "patria",
  "patrocinor",
  "patruus",
  "pauci",
  "paulatim",
  "pauper",
  "pax",
  "peccatus",
  "pecco",
  "pecto",
  "pectus",
  "pecunia",
  "pecus",
  "peior",
  "pel",
  "ocer",
  "socius",
  "sodalitas",
  "sol",
  "soleo",
  "solio",
  "solitudo",
  "solium",
  "sollers",
  "sollicito",
  "solum",
  "solus",
  "solutio",
  "solvo",
  "somniculosus",
  "somnus",
  "sonitus",
  "sono",
  "sophismata",
  "sopor",
  "sordeo",
  "sortitus",
  "spargo",
  "speciosus",
  "spectaculum",
  "speculum",
  "sperno",
  "spero",
  "spes",
  "spiculum",
  "spiritus",
  "spoliatio",
  "sponte",
  "stabilis",
  "statim",
  "statua",
  "stella",
  "stillicidium",
  "stipes",
  "stips",
  "sto",
  "strenuus",
  "strues",
  "studio",
  "stultus",
  "suadeo",
  "suasoria",
  "sub",
  "subito",
  "subiungo",
  "sublime",
  "subnecto",
  "subseco",
  "substantia",
  "subvenio",
  "succedo",
  "succurro",
  "sufficio",
  "suffoco",
  "suffragium",
  "suggero",
  "sui",
  "sulum",
  "sum",
  "summa",
  "summisse",
  "summopere",
  "sumo",
  "sumptus",
  "supellex",
  "super",
  "suppellex",
  "supplanto",
  "suppono",
  "supra",
  "surculus",
  "surgo",
  "sursum",
  "suscipio",
  "suspendo",
  "sustineo",
  "suus",
  "synagoga",
  "tabella",
  "tabernus",
  "tabesco",
  "tabgo",
  "tabula",
  "taceo",
  "tactus",
  "taedium",
  "talio",
  "talis",
  "talus",
  "tam",
  "tamdiu",
  "tamen",
  "tametsi",
  "tamisium",
  "tamquam",
  "tandem",
  "tantillus",
  "tantum",
  "tardus",
  "tego",
  "temeritas",
  "temperantia",
  "templum",
  "temptatio",
  "tempus",
  "tenax",
  "tendo",
  "teneo",
  "tener",
  "tenuis",
  "tenus",
  "tepesco",
  "tepidus",
  "ter",
  "terebro",
  "teres",
  "terga",
  "tergeo",
  "tergiversatio",
  "tergo",
  "tergum",
  "termes",
  "terminatio",
  "tero",
  "terra",
  "terreo",
  "territo",
  "terror",
  "tersus",
  "tertius",
  "testimonium",
  "texo",
  "textilis",
  "textor",
  "textus",
  "thalassinus",
  "theatrum",
  "theca",
  "thema",
  "theologus",
  "thermae",
  "thesaurus",
  "thesis",
  "thorax",
  "thymbra",
  "thymum",
  "tibi",
  "timidus",
  "timor",
  "titulus",
  "tolero",
  "tollo",
  "tondeo",
  "tonsor",
  "torqueo",
  "torrens",
  "tot",
  "totidem",
  "toties",
  "totus",
  "tracto",
  "trado",
  "traho",
  "trans",
  "tredecim",
  "tremo",
  "trepide",
  "tres",
  "tribuo",
  "tricesimus",
  "triduana",
  "triginta",
  "tripudio",
  "tristis",
  "triumphus",
  "trucido",
  "truculenter",
  "tubineus",
  "tui",
  "tum",
  "tumultus",
  "tunc",
  "turba",
  "turbo",
  "turpe",
  "turpis",
  "tutamen",
  "tutis",
  "tyrannus",
  "uberrime",
  "ubi",
  "ulciscor",
  "ullus",
  "ulterius",
  "ultio",
  "ultra",
  "umbra",
  "umerus",
  "umquam",
  "una",
  "unde",
  "undique",
  "universe",
  "unus",
  "urbanus",
  "urbs",
  "uredo",
  "usitas",
  "usque",
  "ustilo",
  "ustulo",
  "usus",
  "uter",
  "uterque",
  "utilis",
  "utique",
  "utor",
  "utpote",
  "utrimque",
  "utroque",
  "utrum",
  "uxor",
  "vaco",
  "vacuus",
  "vado",
  "vae",
  "valde",
  "valens",
  "valeo",
  "valetudo",
  "validus",
  "vallum",
  "vapulus",
  "varietas",
  "varius",
  "vehemens",
  "vel",
  "velociter",
  "velum",
  "velut",
  "venia",
  "venio",
  "ventito",
  "ventosus",
  "ventus",
  "venustas",
  "ver",
  "verbera",
  "verbum",
  "vere",
  "verecundia",
  "vereor",
  "vergo",
  "veritas",
  "vero",
  "versus",
  "verto",
  "verumtamen",
  "verus",
  "vesco",
  "vesica",
  "vesper",
  "vespillo",
  "vester",
  "vestigium",
  "vestrum",
  "vetus",
  "via",
  "vicinus",
  "vicissitudo",
  "victoria",
  "victus",
  "videlicet",
  "video",
  "viduata",
  "viduo",
  "vigilo",
  "vigor",
  "vilicus",
  "vilis",
  "vilitas",
  "villa",
  "vinco",
  "vinculum",
  "vindico",
  "vinitor",
  "vinum",
  "vir",
  "virga",
  "virgo",
  "viridis",
  "viriliter",
  "virtus",
  "vis",
  "viscus",
  "vita",
  "vitiosus",
  "vitium",
  "vito",
  "vivo",
  "vix",
  "vobis",
  "vociferor",
  "voco",
  "volaticus",
  "volo",
  "volubilis",
  "voluntarius",
  "volup",
  "volutabrum",
  "volva",
  "vomer",
  "vomica",
  "vomito",
  "vorago",
  "vorax",
  "voro",
  "vos",
  "votum",
  "voveo",
  "vox",
  "vulariter",
  "vulgaris",
  "vulgivagus",
  "vulgo",
  "vulgus",
  "vulnero",
  "vulnus",
  "vulpes",
  "vulticulus",
  "vultuosus",
  "xiphias"
];

},{}],"node_modules/faker/lib/locales/es_MX/lorem/index.js":[function(require,module,exports) {
var lorem = {};
module['exports'] = lorem;
lorem.words = require("./words");
lorem.supplemental = require("./supplemental");

},{"./words":"node_modules/faker/lib/locales/es_MX/lorem/words.js","./supplemental":"node_modules/faker/lib/locales/es_MX/lorem/supplemental.js"}],"node_modules/faker/lib/locales/es_MX/commerce/color.js":[function(require,module,exports) {
module["exports"] = [
   "rojo",
   "verde",
   "azul",
   "amarillo",
   "morado",
   "Menta verde",
   "teal",
   "blanco",
   "negro",
   "Naranja",
   "Rosa",
   "gris",
   "marrón",
   "violeta",
   "turquesa",
   "tan",
   "cielo azul",
   "salmón",
   "ciruela",
   "orquídea",
   "aceituna",
   "magenta",
   "Lima",
   "marfil",
   "índigo",
   "oro",
   "fucsia",
   "cian",
   "azul",
   "lavanda",
   "plata"
];

},{}],"node_modules/faker/lib/locales/es_MX/commerce/department.js":[function(require,module,exports) {
module["exports"] = [
   "Libros",
   "Películas",
   "Música",
   "Juegos",
   "Electrónica",
   "Ordenadores",
   "Hogar",
   "Jardín",
   "Herramientas",
   "Ultramarinos",
   "Salud",
   "Belleza",
   "Juguetes",
   "Kids",
   "Baby",
   "Ropa",
   "Zapatos",
   "Joyería",
   "Deportes",
   "Aire libre",
   "Automoción",
   "Industrial"
];

},{}],"node_modules/faker/lib/locales/es_MX/commerce/product_name.js":[function(require,module,exports) {
module["exports"] = {
"adjective": [
     "Pequeño",
     "Ergonómico",
     "Rústico",
     "Inteligente",
     "Gorgeous",
     "Increíble",
     "Fantástico",
     "Práctica",
     "Elegante",
     "Increíble",
     "Genérica",
     "Artesanal",
     "Hecho a mano",
     "Licencia",
     "Refinado",
     "Sin marca",
     "Sabrosa"
   ],
"material": [
     "Acero",
     "Madera",
     "Hormigón",
     "Plástico",
     "Cotton",
     "Granito",
     "Caucho",
     "Metal",
     "Soft",
     "Fresco",
     "Frozen"
   ],
"product": [
     "Presidente",
     "Auto",
     "Computadora",
     "Teclado",
     "Ratón",
     "Bike",
     "Pelota",
     "Guantes",
     "Pantalones",
     "Camisa",
     "Mesa",
     "Zapatos",
     "Sombrero",
     "Toallas",
     "Jabón",
     "Tuna",
     "Pollo",
     "Pescado",
     "Queso",
     "Tocino",
     "Pizza",
     "Ensalada",
     "Embutidos"
  ]
};

},{}],"node_modules/faker/lib/locales/es_MX/commerce/index.js":[function(require,module,exports) {
var commerce = {};
module['exports'] = commerce;
commerce.color = require("./color");
commerce.department = require("./department");
commerce.product_name = require("./product_name");

},{"./color":"node_modules/faker/lib/locales/es_MX/commerce/color.js","./department":"node_modules/faker/lib/locales/es_MX/commerce/department.js","./product_name":"node_modules/faker/lib/locales/es_MX/commerce/product_name.js"}],"node_modules/faker/lib/locales/es_MX/team/creature.js":[function(require,module,exports) {
module["exports"] = [
  "hormigas",
   "murciélagos",
   "osos",
   "abejas",
   "pájaros",
   "búfalo",
   "gatos",
   "pollos",
   "ganado",
   "perros",
   "delfines",
   "patos",
   "elefantes",
   "peces",
   "zorros",
   "ranas",
   "gansos",
   "cabras",
   "caballos",
   "canguros",
   "leones",
   "monos",
   "búhos",
   "bueyes",
   "pingüinos",
   "pueblo",
   "cerdos",
   "conejos",
   "ovejas",
   "tigres",
   "ballenas",
   "lobos",
   "cebras",
   "almas en pena",
   "cuervos",
   "gatos negros",
   "quimeras",
   "fantasmas",
   "conspiradores",
   "dragones",
   "enanos",
   "duendes",
   "encantadores",
   "exorcistas",
   "hijos",
   "enemigos",
   "gigantes",
   "gnomos",
   "duendes",
   "gansos",
   "grifos",
   "licántropos",
   "némesis",
   "ogros",
   "oráculos",
   "profetas",
   "hechiceros",
   "arañas",
   "espíritus",
   "vampiros",
   "brujos",
   "zorras",
   "hombres lobo",
   "brujas",
   "adoradores",
   "zombies",
   "druidas"
];

},{}],"node_modules/faker/lib/locales/es_MX/team/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{Address.state} #{creature}"
];

},{}],"node_modules/faker/lib/locales/es_MX/team/index.js":[function(require,module,exports) {
var team = {};
module['exports'] = team;
team.creature = require("./creature");
team.name = require("./name");

},{"./creature":"node_modules/faker/lib/locales/es_MX/team/creature.js","./name":"node_modules/faker/lib/locales/es_MX/team/name.js"}],"node_modules/faker/lib/locales/es_MX/index.js":[function(require,module,exports) {
var es_MX = {};
module['exports'] = es_MX;
es_MX.title = "Spanish Mexico";
es_MX.separator = " & ";
es_MX.name = require("./name");
es_MX.address = require("./address");
es_MX.company = require("./company");
es_MX.internet = require("./internet");
es_MX.phone_number = require("./phone_number");
es_MX.cell_phone = require("./cell_phone");
es_MX.lorem = require("./lorem");
es_MX.commerce = require("./commerce");
es_MX.team = require("./team");
},{"./name":"node_modules/faker/lib/locales/es_MX/name/index.js","./address":"node_modules/faker/lib/locales/es_MX/address/index.js","./company":"node_modules/faker/lib/locales/es_MX/company/index.js","./internet":"node_modules/faker/lib/locales/es_MX/internet/index.js","./phone_number":"node_modules/faker/lib/locales/es_MX/phone_number/index.js","./cell_phone":"node_modules/faker/lib/locales/es_MX/cell_phone/index.js","./lorem":"node_modules/faker/lib/locales/es_MX/lorem/index.js","./commerce":"node_modules/faker/lib/locales/es_MX/commerce/index.js","./team":"node_modules/faker/lib/locales/es_MX/team/index.js"}],"node_modules/faker/lib/locales/fa/name/first_name.js":[function(require,module,exports) {
module["exports"] = [
  "آبان دخت",
  "آبتین",
  "آتوسا",
  "آفر",
  "آفره دخت",
  "آذرنوش‌",
  "آذین",
  "آراه",
  "آرزو",
  "آرش",
  "آرتین",
  "آرتام",
  "آرتمن",
  "آرشام",
  "آرمان",
  "آرمین",
  "آرمیتا",
  "آریا فر",
  "آریا",
  "آریا مهر",
  "آرین",
  "آزاده",
  "آزرم",
  "آزرمدخت",
  "آزیتا",
  "آناهیتا",
  "آونگ",
  "آهو",
  "آیدا",
  "اتسز",
  "اختر",
  "ارد",
  "ارد شیر",
  "اردوان",
  "ارژن",
  "ارژنگ",
  "ارسلان",
  "ارغوان",
  "ارمغان",
  "ارنواز",
  "اروانه",
  "استر",
  "اسفندیار",
  "اشکان",
  "اشکبوس",
  "افسانه",
  "افسون",
  "افشین",
  "امید",
  "انوش (‌ آنوشا )",
  "انوشروان",
  "اورنگ",
  "اوژن",
  "اوستا",
  "اهورا",
  "ایاز",
  "ایران",
  "ایراندخت",
  "ایرج",
  "ایزدیار",
  "بابک",
  "باپوک",
  "باربد",
  "بارمان",
  "بامداد",
  "بامشاد",
  "بانو",
  "بختیار",
  "برانوش",
  "بردیا",
  "برزو",
  "برزویه",
  "برزین",
  "برمک",
  "بزرگمهر",
  "بنفشه",
  "بوژان",
  "بویان",
  "بهار",
  "بهارک",
  "بهاره",
  "بهتاش",
  "بهداد",
  "بهرام",
  "بهدیس",
  "بهرخ",
  "بهرنگ",
  "بهروز",
  "بهزاد",
  "بهشاد",
  "بهمن",
  "بهناز",
  "بهنام",
  "بهنود",
  "بهنوش",
  "بیتا",
  "بیژن",
  "پارسا",
  "پاکان",
  "پاکتن",
  "پاکدخت",
  "پانته آ",
  "پدرام",
  "پرتو",
  "پرشنگ",
  "پرتو",
  "پرستو",
  "پرویز",
  "پردیس",
  "پرهام",
  "پژمان",
  "پژوا",
  "پرنیا",
  "پشنگ",
  "پروانه",
  "پروین",
  "پری",
  "پریچهر",
  "پریدخت",
  "پریسا",
  "پرناز",
  "پریوش",
  "پریا",
  "پوپک",
  "پوران",
  "پوراندخت",
  "پوریا",
  "پولاد",
  "پویا",
  "پونه",
  "پیام",
  "پیروز",
  "پیمان",
  "تابان",
  "تاباندخت",
  "تاجی",
  "تارا",
  "تاویار",
  "ترانه",
  "تناز",
  "توران",
  "توراندخت",
  "تورج",
  "تورتک",
  "توفان",
  "توژال",
  "تیر داد",
  "تینا",
  "تینو",
  "جابان",
  "جامین",
  "جاوید",
  "جریره",
  "جمشید",
  "جوان",
  "جویا",
  "جهان",
  "جهانبخت",
  "جهانبخش",
  "جهاندار",
  "جهانگیر",
  "جهان بانو",
  "جهاندخت",
  "جهان ناز",
  "جیران",
  "چابک",
  "چالاک",
  "چاوش",
  "چترا",
  "چوبین",
  "چهرزاد",
  "خاوردخت",
  "خداداد",
  "خدایار",
  "خرم",
  "خرمدخت",
  "خسرو",
  "خشایار",
  "خورشید",
  "دادمهر",
  "دارا",
  "داراب",
  "داریا",
  "داریوش",
  "دانوش",
  "داور‌",
  "دایان",
  "دریا",
  "دل آرا",
  "دل آویز",
  "دلارام",
  "دل انگیز",
  "دلبر",
  "دلبند",
  "دلربا",
  "دلشاد",
  "دلکش",
  "دلناز",
  "دلنواز",
  "دورشاسب",
  "دنیا",
  "دیااکو",
  "دیانوش",
  "دیبا",
  "دیبا دخت",
  "رابو",
  "رابین",
  "رادبانو",
  "رادمان",
  "رازبان",
  "راژانه",
  "راسا",
  "رامتین",
  "رامش",
  "رامشگر",
  "رامونا",
  "رامیار",
  "رامیلا",
  "رامین",
  "راویار",
  "رژینا",
  "رخپاک",
  "رخسار",
  "رخشانه",
  "رخشنده",
  "رزمیار",
  "رستم",
  "رکسانا",
  "روبینا",
  "رودابه",
  "روزبه",
  "روشنک",
  "روناک",
  "رهام",
  "رهی",
  "ریبار",
  "راسپینا",
  "زادبخت",
  "زاد به",
  "زاد چهر",
  "زاد فر",
  "زال",
  "زادماسب",
  "زاوا",
  "زردشت",
  "زرنگار",
  "زری",
  "زرین",
  "زرینه",
  "زمانه",
  "زونا",
  "زیبا",
  "زیبار",
  "زیما",
  "زینو",
  "ژاله",
  "ژالان",
  "ژیار",
  "ژینا",
  "ژیوار",
  "سارا",
  "سارک",
  "سارنگ",
  "ساره",
  "ساسان",
  "ساغر",
  "سام",
  "سامان",
  "سانا",
  "ساناز",
  "سانیار",
  "ساویز",
  "ساهی",
  "ساینا",
  "سایه",
  "سپنتا",
  "سپند",
  "سپهر",
  "سپهرداد",
  "سپیدار",
  "سپید بانو",
  "سپیده",
  "ستاره",
  "ستی",
  "سرافراز",
  "سرور",
  "سروش",
  "سرور",
  "سوبا",
  "سوبار",
  "سنبله",
  "سودابه",
  "سوری",
  "سورن",
  "سورنا",
  "سوزان",
  "سوزه",
  "سوسن",
  "سومار",
  "سولان",
  "سولماز",
  "سوگند",
  "سهراب",
  "سهره",
  "سهند",
  "سیامک",
  "سیاوش",
  "سیبوبه ‌",
  "سیما",
  "سیمدخت",
  "سینا",
  "سیمین",
  "سیمین دخت",
  "شاپرک",
  "شادی",
  "شادمهر",
  "شاران",
  "شاهپور",
  "شاهدخت",
  "شاهرخ",
  "شاهین",
  "شاهیندخت",
  "شایسته",
  "شباهنگ",
  "شب بو",
  "شبدیز",
  "شبنم",
  "شراره",
  "شرمین",
  "شروین",
  "شکوفه",
  "شکفته",
  "شمشاد",
  "شمین",
  "شوان",
  "شمیلا",
  "شورانگیز",
  "شوری",
  "شهاب",
  "شهبار",
  "شهباز",
  "شهبال",
  "شهپر",
  "شهداد",
  "شهرآرا",
  "شهرام",
  "شهربانو",
  "شهرزاد",
  "شهرناز",
  "شهرنوش",
  "شهره",
  "شهریار",
  "شهرزاد",
  "شهلا",
  "شهنواز",
  "شهین",
  "شیبا",
  "شیدا",
  "شیده",
  "شیردل",
  "شیرزاد",
  "شیرنگ",
  "شیرو",
  "شیرین دخت",
  "شیما",
  "شینا",
  "شیرین",
  "شیوا",
  "طوس",
  "طوطی",
  "طهماسب",
  "طهمورث",
  "غوغا",
  "غنچه",
  "فتانه",
  "فدا",
  "فراز",
  "فرامرز",
  "فرانک",
  "فراهان",
  "فربد",
  "فربغ",
  "فرجاد",
  "فرخ",
  "فرخ پی",
  "فرخ داد",
  "فرخ رو",
  "فرخ زاد",
  "فرخ لقا",
  "فرخ مهر",
  "فرداد",
  "فردیس",
  "فرین",
  "فرزاد",
  "فرزام",
  "فرزان",
  "فرزانه",
  "فرزین",
  "فرشاد",
  "فرشته",
  "فرشید",
  "فرمان",
  "فرناز",
  "فرنگیس",
  "فرنود",
  "فرنوش",
  "فرنیا",
  "فروتن",
  "فرود",
  "فروز",
  "فروزان",
  "فروزش",
  "فروزنده",
  "فروغ",
  "فرهاد",
  "فرهنگ",
  "فرهود",
  "فربار",
  "فریبا",
  "فرید",
  "فریدخت",
  "فریدون",
  "فریمان",
  "فریناز",
  "فرینوش",
  "فریوش",
  "فیروز",
  "فیروزه",
  "قابوس",
  "قباد",
  "قدسی",
  "کابان",
  "کابوک",
  "کارا",
  "کارو",
  "کاراکو",
  "کامبخت",
  "کامبخش",
  "کامبیز",
  "کامجو",
  "کامدین",
  "کامران",
  "کامراوا",
  "کامک",
  "کامنوش",
  "کامیار",
  "کانیار",
  "کاووس",
  "کاوه",
  "کتایون",
  "کرشمه",
  "کسری",
  "کلاله",
  "کمبوجیه",
  "کوشا",
  "کهبد",
  "کهرام",
  "کهزاد",
  "کیارش",
  "کیان",
  "کیانا",
  "کیانچهر",
  "کیاندخت",
  "کیانوش",
  "کیاوش",
  "کیخسرو",
  "کیقباد",
  "کیکاووس",
  "کیوان",
  "کیوان دخت",
  "کیومرث",
  "کیهان",
  "کیاندخت",
  "کیهانه",
  "گرد آفرید",
  "گردان",
  "گرشا",
  "گرشاسب",
  "گرشین",
  "گرگین",
  "گزل",
  "گشتاسب",
  "گشسب",
  "گشسب بانو",
  "گل",
  "گل آذین",
  "گل آرا‌",
  "گلاره",
  "گل افروز",
  "گلاله",
  "گل اندام",
  "گلاویز",
  "گلباد",
  "گلبار",
  "گلبام",
  "گلبان",
  "گلبانو",
  "گلبرگ",
  "گلبو",
  "گلبهار",
  "گلبیز",
  "گلپاره",
  "گلپر",
  "گلپری",
  "گلپوش",
  "گل پونه",
  "گلچین",
  "گلدخت",
  "گلدیس",
  "گلربا",
  "گلرخ",
  "گلرنگ",
  "گلرو",
  "گلشن",
  "گلریز",
  "گلزاد",
  "گلزار",
  "گلسا",
  "گلشید",
  "گلنار",
  "گلناز",
  "گلنسا",
  "گلنواز",
  "گلنوش",
  "گلی",
  "گودرز",
  "گوماتو",
  "گهر چهر",
  "گوهر ناز",
  "گیتی",
  "گیسو",
  "گیلدا",
  "گیو",
  "لادن",
  "لاله",
  "لاله رخ",
  "لاله دخت",
  "لبخند",
  "لقاء",
  "لومانا",
  "لهراسب",
  "مارال",
  "ماری",
  "مازیار",
  "ماکان",
  "مامک",
  "مانا",
  "ماندانا",
  "مانوش",
  "مانی",
  "مانیا",
  "ماهان",
  "ماهاندخت",
  "ماه برزین",
  "ماه جهان",
  "ماهچهر",
  "ماهدخت",
  "ماهور",
  "ماهرخ",
  "ماهزاد",
  "مردآویز",
  "مرداس",
  "مرزبان",
  "مرمر",
  "مزدک",
  "مژده",
  "مژگان",
  "مستان",
  "مستانه",
  "مشکاندخت",
  "مشکناز",
  "مشکین دخت",
  "منیژه",
  "منوچهر",
  "مهبانو",
  "مهبد",
  "مه داد",
  "مهتاب",
  "مهدیس",
  "مه جبین",
  "مه دخت",
  "مهر آذر",
  "مهر آرا",
  "مهر آسا",
  "مهر آفاق",
  "مهر افرین",
  "مهرآب",
  "مهرداد",
  "مهر افزون",
  "مهرام",
  "مهران",
  "مهراندخت",
  "مهراندیش",
  "مهرانفر",
  "مهرانگیز",
  "مهرداد",
  "مهر دخت",
  "مهرزاده ‌",
  "مهرناز",
  "مهرنوش",
  "مهرنکار",
  "مهرنیا",
  "مهروز",
  "مهری",
  "مهریار",
  "مهسا",
  "مهستی",
  "مه سیما",
  "مهشاد",
  "مهشید",
  "مهنام",
  "مهناز",
  "مهنوش",
  "مهوش",
  "مهیار",
  "مهین",
  "مهین دخت",
  "میترا",
  "میخک",
  "مینا",
  "مینا دخت",
  "مینو",
  "مینودخت",
  "مینو فر",
  "نادر",
  "ناز آفرین",
  "نازبانو",
  "نازپرور",
  "نازچهر",
  "نازفر",
  "نازلی",
  "نازی",
  "نازیدخت",
  "نامور",
  "ناهید",
  "ندا",
  "نرسی",
  "نرگس",
  "نرمک",
  "نرمین",
  "نریمان",
  "نسترن",
  "نسرین",
  "نسرین دخت",
  "نسرین نوش",
  "نکیسا",
  "نگار",
  "نگاره",
  "نگارین",
  "نگین",
  "نوا",
  "نوش",
  "نوش آذر",
  "نوش آور",
  "نوشا",
  "نوش آفرین",
  "نوشدخت",
  "نوشروان",
  "نوشفر",
  "نوشناز",
  "نوشین",
  "نوید",
  "نوین",
  "نوین دخت",
  "نیش ا",
  "نیک بین",
  "نیک پی",
  "نیک چهر",
  "نیک خواه",
  "نیکداد",
  "نیکدخت",
  "نیکدل",
  "نیکزاد",
  "نیلوفر",
  "نیما",
  "وامق",
  "ورجاوند",
  "وریا",
  "وشمگیر",
  "وهرز",
  "وهسودان",
  "ویدا",
  "ویس",
  "ویشتاسب",
  "ویگن",
  "هژیر",
  "هخامنش",
  "هربد( هیربد )",
  "هرمز",
  "همایون",
  "هما",
  "همادخت",
  "همدم",
  "همراز",
  "همراه",
  "هنگامه",
  "هوتن",
  "هور",
  "هورتاش",
  "هورچهر",
  "هورداد",
  "هوردخت",
  "هورزاد",
  "هورمند",
  "هوروش",
  "هوشنگ",
  "هوشیار",
  "هومان",
  "هومن",
  "هونام",
  "هویدا",
  "هیتاسب",
  "هیرمند",
  "هیما",
  "هیوا",
  "یادگار",
  "یاسمن ( یاسمین )",
  "یاشار",
  "یاور",
  "یزدان",
  "یگانه",
  "یوشیتا"
];

},{}],"node_modules/faker/lib/locales/fa/name/last_name.js":[function(require,module,exports) {
module["exports"] = [
  "عارف",
  "عاشوری",
  "عالی",
  "عبادی",
  "عبدالکریمی",
  "عبدالملکی",
  "عراقی",
  "عزیزی",
  "عصار",
  "عقیلی",
  "علم",
  "علم‌الهدی",
  "علی عسگری",
  "علی‌آبادی",
  "علیا",
  "علی‌پور",
  "علی‌زمانی",
  "عنایت",
  "غضنفری",
  "غنی",
  "فارسی",
  "فاطمی",
  "فانی",
  "فتاحی",
  "فرامرزی",
  "فرج",
  "فرشیدورد",
  "فرمانفرمائیان",
  "فروتن",
  "فرهنگ",
  "فریاد",
  "فنایی",
  "فنی‌زاده",
  "فولادوند",
  "فهمیده",
  "قاضی",
  "قانعی",
  "قانونی",
  "قمیشی",
  "قنبری",
  "قهرمان",
  "قهرمانی",
  "قهرمانیان",
  "قهستانی",
  "کاشی",
  "کاکاوند",
  "کامکار",
  "کاملی",
  "کاویانی",
  "کدیور",
  "کردبچه",
  "کرمانی",
  "کریمی",
  "کلباسی",
  "کمالی",
  "کوشکی",
  "کهنمویی",
  "کیان",
  "کیانی (نام خانوادگی)",
  "کیمیایی",
  "گل محمدی",
  "گلپایگانی",
  "گنجی",
  "لاجوردی",
  "لاچینی",
  "لاهوتی",
  "لنکرانی",
  "لوکس",
  "مجاهد",
  "مجتبایی",
  "مجتبوی",
  "مجتهد شبستری",
  "مجتهدی",
  "مجرد",
  "محجوب",
  "محجوبی",
  "محدثی",
  "محمدرضایی",
  "محمدی",
  "مددی",
  "مرادخانی",
  "مرتضوی",
  "مستوفی",
  "مشا",
  "مصاحب",
  "مصباح",
  "مصباح‌زاده",
  "مطهری",
  "مظفر",
  "معارف",
  "معروف",
  "معین",
  "مفتاح",
  "مفتح",
  "مقدم",
  "ملایری",
  "ملک",
  "ملکیان",
  "منوچهری",
  "موحد",
  "موسوی",
  "موسویان",
  "مهاجرانی",
  "مهدی‌پور",
  "میرباقری",
  "میردامادی",
  "میرزاده",
  "میرسپاسی",
  "میزبانی",
  "ناظری",
  "نامور",
  "نجفی",
  "ندوشن",
  "نراقی",
  "نعمت‌زاده",
  "نقدی",
  "نقیب‌زاده",
  "نواب",
  "نوبخت",
  "نوبختی",
  "نهاوندی",
  "نیشابوری",
  "نیلوفری",
  "واثقی",
  "واعظ",
  "واعظ‌زاده",
  "واعظی",
  "وکیلی",
  "هاشمی",
  "هاشمی رفسنجانی",
  "هاشمیان",
  "هامون",
  "هدایت",
  "هراتی",
  "هروی",
  "همایون",
  "همت",
  "همدانی",
  "هوشیار",
  "هومن",
  "یاحقی",
  "یادگار",
  "یثربی",
  "یلدا"
];

},{}],"node_modules/faker/lib/locales/fa/name/prefix.js":[function(require,module,exports) {
module["exports"] = [
  "آقای",
  "خانم",
  "دکتر"
];

},{}],"node_modules/faker/lib/locales/fa/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");
name.prefix = require("./prefix");

},{"./first_name":"node_modules/faker/lib/locales/fa/name/first_name.js","./last_name":"node_modules/faker/lib/locales/fa/name/last_name.js","./prefix":"node_modules/faker/lib/locales/fa/name/prefix.js"}],"node_modules/faker/lib/locales/fa/index.js":[function(require,module,exports) {
var fa = {};
module['exports'] = fa;
fa.title = "Farsi";
fa.name = require("./name");

},{"./name":"node_modules/faker/lib/locales/fa/name/index.js"}],"node_modules/faker/lib/locales/fr/address/building_number.js":[function(require,module,exports) {
module["exports"] = [
  "####",
  "###",
  "##",
  "#"
];

},{}],"node_modules/faker/lib/locales/fr/address/street_prefix.js":[function(require,module,exports) {
module["exports"] = [
  "Allée, Voie",
  "Rue",
  "Avenue",
  "Boulevard",
  "Quai",
  "Passage",
  "Impasse",
  "Place"
];

},{}],"node_modules/faker/lib/locales/fr/address/secondary_address.js":[function(require,module,exports) {
module["exports"] = [
  "Apt. ###",
  "# étage"
];

},{}],"node_modules/faker/lib/locales/fr/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "#####"
];

},{}],"node_modules/faker/lib/locales/fr/address/state.js":[function(require,module,exports) {
module["exports"] = [
  "Alsace",
  "Aquitaine",
  "Auvergne",
  "Basse-Normandie",
  "Bourgogne",
  "Bretagne",
  "Centre",
  "Champagne-Ardenne",
  "Corse",
  "Franche-Comté",
  "Haute-Normandie",
  "Île-de-France",
  "Languedoc-Roussillon",
  "Limousin",
  "Lorraine",
  "Midi-Pyrénées",
  "Nord-Pas-de-Calais",
  "Pays de la Loire",
  "Picardie",
  "Poitou-Charentes",
  "Provence-Alpes-Côte d'Azur",
  "Rhône-Alpes"
];

},{}],"node_modules/faker/lib/locales/fr/address/city_name.js":[function(require,module,exports) {
module["exports"] = [
  "Paris",
  "Marseille",
  "Lyon",
  "Toulouse",
  "Nice",
  "Nantes",
  "Strasbourg",
  "Montpellier",
  "Bordeaux",
  "Lille13",
  "Rennes",
  "Reims",
  "Le Havre",
  "Saint-Étienne",
  "Toulon",
  "Grenoble",
  "Dijon",
  "Angers",
  "Saint-Denis",
  "Villeurbanne",
  "Le Mans",
  "Aix-en-Provence",
  "Brest",
  "Nîmes",
  "Limoges",
  "Clermont-Ferrand",
  "Tours",
  "Amiens",
  "Metz",
  "Perpignan",
  "Besançon",
  "Orléans",
  "Boulogne-Billancourt",
  "Mulhouse",
  "Rouen",
  "Caen",
  "Nancy",
  "Saint-Denis",
  "Saint-Paul",
  "Montreuil",
  "Argenteuil",
  "Roubaix",
  "Dunkerque14",
  "Tourcoing",
  "Nanterre",
  "Avignon",
  "Créteil",
  "Poitiers",
  "Fort-de-France",
  "Courbevoie",
  "Versailles",
  "Vitry-sur-Seine",
  "Colombes",
  "Pau",
  "Aulnay-sous-Bois",
  "Asnières-sur-Seine",
  "Rueil-Malmaison",
  "Saint-Pierre",
  "Antibes",
  "Saint-Maur-des-Fossés",
  "Champigny-sur-Marne",
  "La Rochelle",
  "Aubervilliers",
  "Calais",
  "Cannes",
  "Le Tampon",
  "Béziers",
  "Colmar",
  "Bourges",
  "Drancy",
  "Mérignac",
  "Saint-Nazaire",
  "Valence",
  "Ajaccio",
  "Issy-les-Moulineaux",
  "Villeneuve-d'Ascq",
  "Levallois-Perret",
  "Noisy-le-Grand",
  "Quimper",
  "La Seyne-sur-Mer",
  "Antony",
  "Troyes",
  "Neuilly-sur-Seine",
  "Sarcelles",
  "Les Abymes",
  "Vénissieux",
  "Clichy",
  "Lorient",
  "Pessac",
  "Ivry-sur-Seine",
  "Cergy",
  "Cayenne",
  "Niort",
  "Chambéry",
  "Montauban",
  "Saint-Quentin",
  "Villejuif",
  "Hyères",
  "Beauvais",
  "Cholet"
];

},{}],"node_modules/faker/lib/locales/fr/address/city.js":[function(require,module,exports) {
module["exports"] = [
  "#{city_name}"
];

},{}],"node_modules/faker/lib/locales/fr/address/street_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "de l'Abbaye",
  "Adolphe Mille",
  "d'Alésia",
  "d'Argenteuil",
  "d'Assas",
  "du Bac",
  "de Paris",
  "La Boétie",
  "Bonaparte",
  "de la Bûcherie",
  "de Caumartin",
  "Charlemagne",
  "du Chat-qui-Pêche",
  "de la Chaussée-d'Antin",
  "du Dahomey",
  "Dauphine",
  "Delesseux",
  "du Faubourg Saint-Honoré",
  "du Faubourg-Saint-Denis",
  "de la Ferronnerie",
  "des Francs-Bourgeois",
  "des Grands Augustins",
  "de la Harpe",
  "du Havre",
  "de la Huchette",
  "Joubert",
  "Laffitte",
  "Lepic",
  "des Lombards",
  "Marcadet",
  "Molière",
  "Monsieur-le-Prince",
  "de Montmorency",
  "Montorgueil",
  "Mouffetard",
  "de Nesle",
  "Oberkampf",
  "de l'Odéon",
  "d'Orsel",
  "de la Paix",
  "des Panoramas",
  "Pastourelle",
  "Pierre Charron",
  "de la Pompe",
  "de Presbourg",
  "de Provence",
  "de Richelieu",
  "de Rivoli",
  "des Rosiers",
  "Royale",
  "d'Abbeville",
  "Saint-Honoré",
  "Saint-Bernard",
  "Saint-Denis",
  "Saint-Dominique",
  "Saint-Jacques",
  "Saint-Séverin",
  "des Saussaies",
  "de Seine",
  "de Solférino",
  "Du Sommerard",
  "de Tilsitt",
  "Vaneau",
  "de Vaugirard",
  "de la Victoire",
  "Zadkine"
];

},{}],"node_modules/faker/lib/locales/fr/address/street_name.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_prefix} #{street_suffix}"
];

},{}],"node_modules/faker/lib/locales/fr/address/street_address.js":[function(require,module,exports) {
module["exports"] = [
  "#{building_number} #{street_name}"
];

},{}],"node_modules/faker/lib/locales/fr/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "France"
];

},{}],"node_modules/faker/lib/locales/fr/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.building_number = require("./building_number");
address.street_prefix = require("./street_prefix");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.state = require("./state");
address.city_name = require("./city_name");
address.city = require("./city");
address.street_suffix = require("./street_suffix");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./building_number":"node_modules/faker/lib/locales/fr/address/building_number.js","./street_prefix":"node_modules/faker/lib/locales/fr/address/street_prefix.js","./secondary_address":"node_modules/faker/lib/locales/fr/address/secondary_address.js","./postcode":"node_modules/faker/lib/locales/fr/address/postcode.js","./state":"node_modules/faker/lib/locales/fr/address/state.js","./city_name":"node_modules/faker/lib/locales/fr/address/city_name.js","./city":"node_modules/faker/lib/locales/fr/address/city.js","./street_suffix":"node_modules/faker/lib/locales/fr/address/street_suffix.js","./street_name":"node_modules/faker/lib/locales/fr/address/street_name.js","./street_address":"node_modules/faker/lib/locales/fr/address/street_address.js","./default_country":"node_modules/faker/lib/locales/fr/address/default_country.js"}],"node_modules/faker/lib/locales/fr/company/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "SARL",
  "SA",
  "EURL",
  "SAS",
  "SEM",
  "SCOP",
  "GIE",
  "EI"
];

},{}],"node_modules/faker/lib/locales/fr/company/adjective.js":[function(require,module,exports) {
module["exports"] = [
  "Adaptive",
  "Advanced",
  "Ameliorated",
  "Assimilated",
  "Automated",
  "Balanced",
  "Business-focused",
  "Centralized",
  "Cloned",
  "Compatible",
  "Configurable",
  "Cross-group",
  "Cross-platform",
  "Customer-focused",
  "Customizable",
  "Decentralized",
  "De-engineered",
  "Devolved",
  "Digitized",
  "Distributed",
  "Diverse",
  "Down-sized",
  "Enhanced",
  "Enterprise-wide",
  "Ergonomic",
  "Exclusive",
  "Expanded",
  "Extended",
  "Face to face",
  "Focused",
  "Front-line",
  "Fully-configurable",
  "Function-based",
  "Fundamental",
  "Future-proofed",
  "Grass-roots",
  "Horizontal",
  "Implemented",
  "Innovative",
  "Integrated",
  "Intuitive",
  "Inverse",
  "Managed",
  "Mandatory",
  "Monitored",
  "Multi-channelled",
  "Multi-lateral",
  "Multi-layered",
  "Multi-tiered",
  "Networked",
  "Object-based",
  "Open-architected",
  "Open-source",
  "Operative",
  "Optimized",
  "Optional",
  "Organic",
  "Organized",
  "Persevering",
  "Persistent",
  "Phased",
  "Polarised",
  "Pre-emptive",
  "Proactive",
  "Profit-focused",
  "Profound",
  "Programmable",
  "Progressive",
  "Public-key",
  "Quality-focused",
  "Reactive",
  "Realigned",
  "Re-contextualized",
  "Re-engineered",
  "Reduced",
  "Reverse-engineered",
  "Right-sized",
  "Robust",
  "Seamless",
  "Secured",
  "Self-enabling",
  "Sharable",
  "Stand-alone",
  "Streamlined",
  "Switchable",
  "Synchronised",
  "Synergistic",
  "Synergized",
  "Team-oriented",
  "Total",
  "Triple-buffered",
  "Universal",
  "Up-sized",
  "Upgradable",
  "User-centric",
  "User-friendly",
  "Versatile",
  "Virtual",
  "Visionary",
  "Vision-oriented"
];

},{}],"node_modules/faker/lib/locales/fr/company/descriptor.js":[function(require,module,exports) {
module["exports"] = [
  "24 hour",
  "24/7",
  "3rd generation",
  "4th generation",
  "5th generation",
  "6th generation",
  "actuating",
  "analyzing",
  "asymmetric",
  "asynchronous",
  "attitude-oriented",
  "background",
  "bandwidth-monitored",
  "bi-directional",
  "bifurcated",
  "bottom-line",
  "clear-thinking",
  "client-driven",
  "client-server",
  "coherent",
  "cohesive",
  "composite",
  "context-sensitive",
  "contextually-based",
  "content-based",
  "dedicated",
  "demand-driven",
  "didactic",
  "directional",
  "discrete",
  "disintermediate",
  "dynamic",
  "eco-centric",
  "empowering",
  "encompassing",
  "even-keeled",
  "executive",
  "explicit",
  "exuding",
  "fault-tolerant",
  "foreground",
  "fresh-thinking",
  "full-range",
  "global",
  "grid-enabled",
  "heuristic",
  "high-level",
  "holistic",
  "homogeneous",
  "human-resource",
  "hybrid",
  "impactful",
  "incremental",
  "intangible",
  "interactive",
  "intermediate",
  "leading edge",
  "local",
  "logistical",
  "maximized",
  "methodical",
  "mission-critical",
  "mobile",
  "modular",
  "motivating",
  "multimedia",
  "multi-state",
  "multi-tasking",
  "national",
  "needs-based",
  "neutral",
  "next generation",
  "non-volatile",
  "object-oriented",
  "optimal",
  "optimizing",
  "radical",
  "real-time",
  "reciprocal",
  "regional",
  "responsive",
  "scalable",
  "secondary",
  "solution-oriented",
  "stable",
  "static",
  "systematic",
  "systemic",
  "system-worthy",
  "tangible",
  "tertiary",
  "transitional",
  "uniform",
  "upward-trending",
  "user-facing",
  "value-added",
  "web-enabled",
  "well-modulated",
  "zero administration",
  "zero defect",
  "zero tolerance"
];

},{}],"node_modules/faker/lib/locales/fr/company/noun.js":[function(require,module,exports) {
module["exports"] = [
  "ability",
  "access",
  "adapter",
  "algorithm",
  "alliance",
  "analyzer",
  "application",
  "approach",
  "architecture",
  "archive",
  "artificial intelligence",
  "array",
  "attitude",
  "benchmark",
  "budgetary management",
  "capability",
  "capacity",
  "challenge",
  "circuit",
  "collaboration",
  "complexity",
  "concept",
  "conglomeration",
  "contingency",
  "core",
  "customer loyalty",
  "database",
  "data-warehouse",
  "definition",
  "emulation",
  "encoding",
  "encryption",
  "extranet",
  "firmware",
  "flexibility",
  "focus group",
  "forecast",
  "frame",
  "framework",
  "function",
  "functionalities",
  "Graphic Interface",
  "groupware",
  "Graphical User Interface",
  "hardware",
  "help-desk",
  "hierarchy",
  "hub",
  "implementation",
  "info-mediaries",
  "infrastructure",
  "initiative",
  "installation",
  "instruction set",
  "interface",
  "internet solution",
  "intranet",
  "knowledge user",
  "knowledge base",
  "local area network",
  "leverage",
  "matrices",
  "matrix",
  "methodology",
  "middleware",
  "migration",
  "model",
  "moderator",
  "monitoring",
  "moratorium",
  "neural-net",
  "open architecture",
  "open system",
  "orchestration",
  "paradigm",
  "parallelism",
  "policy",
  "portal",
  "pricing structure",
  "process improvement",
  "product",
  "productivity",
  "project",
  "projection",
  "protocol",
  "secured line",
  "service-desk",
  "software",
  "solution",
  "standardization",
  "strategy",
  "structure",
  "success",
  "superstructure",
  "support",
  "synergy",
  "system engine",
  "task-force",
  "throughput",
  "time-frame",
  "toolset",
  "utilisation",
  "website",
  "workforce"
];

},{}],"node_modules/faker/lib/locales/fr/company/bs_verb.js":[function(require,module,exports) {
module["exports"] = [
  "implement",
  "utilize",
  "integrate",
  "streamline",
  "optimize",
  "evolve",
  "transform",
  "embrace",
  "enable",
  "orchestrate",
  "leverage",
  "reinvent",
  "aggregate",
  "architect",
  "enhance",
  "incentivize",
  "morph",
  "empower",
  "envisioneer",
  "monetize",
  "harness",
  "facilitate",
  "seize",
  "disintermediate",
  "synergize",
  "strategize",
  "deploy",
  "brand",
  "grow",
  "target",
  "syndicate",
  "synthesize",
  "deliver",
  "mesh",
  "incubate",
  "engage",
  "maximize",
  "benchmark",
  "expedite",
  "reintermediate",
  "whiteboard",
  "visualize",
  "repurpose",
  "innovate",
  "scale",
  "unleash",
  "drive",
  "extend",
  "engineer",
  "revolutionize",
  "generate",
  "exploit",
  "transition",
  "e-enable",
  "iterate",
  "cultivate",
  "matrix",
  "productize",
  "redefine",
  "recontextualize"
];

},{}],"node_modules/faker/lib/locales/fr/company/bs_adjective.js":[function(require,module,exports) {
module["exports"] = [
  "clicks-and-mortar",
  "value-added",
  "vertical",
  "proactive",
  "robust",
  "revolutionary",
  "scalable",
  "leading-edge",
  "innovative",
  "intuitive",
  "strategic",
  "e-business",
  "mission-critical",
  "sticky",
  "one-to-one",
  "24/7",
  "end-to-end",
  "global",
  "B2B",
  "B2C",
  "granular",
  "frictionless",
  "virtual",
  "viral",
  "dynamic",
  "24/365",
  "best-of-breed",
  "killer",
  "magnetic",
  "bleeding-edge",
  "web-enabled",
  "interactive",
  "dot-com",
  "sexy",
  "back-end",
  "real-time",
  "efficient",
  "front-end",
  "distributed",
  "seamless",
  "extensible",
  "turn-key",
  "world-class",
  "open-source",
  "cross-platform",
  "cross-media",
  "synergistic",
  "bricks-and-clicks",
  "out-of-the-box",
  "enterprise",
  "integrated",
  "impactful",
  "wireless",
  "transparent",
  "next-generation",
  "cutting-edge",
  "user-centric",
  "visionary",
  "customized",
  "ubiquitous",
  "plug-and-play",
  "collaborative",
  "compelling",
  "holistic",
  "rich"
];

},{}],"node_modules/faker/lib/locales/fr/company/bs_noun.js":[function(require,module,exports) {
module["exports"] = [
  "synergies",
  "web-readiness",
  "paradigms",
  "markets",
  "partnerships",
  "infrastructures",
  "platforms",
  "initiatives",
  "channels",
  "eyeballs",
  "communities",
  "ROI",
  "solutions",
  "e-tailers",
  "e-services",
  "action-items",
  "portals",
  "niches",
  "technologies",
  "content",
  "vortals",
  "supply-chains",
  "convergence",
  "relationships",
  "architectures",
  "interfaces",
  "e-markets",
  "e-commerce",
  "systems",
  "bandwidth",
  "infomediaries",
  "models",
  "mindshare",
  "deliverables",
  "users",
  "schemas",
  "networks",
  "applications",
  "metrics",
  "e-business",
  "functionalities",
  "experiences",
  "web services",
  "methodologies"
];

},{}],"node_modules/faker/lib/locales/fr/company/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{Name.last_name} #{suffix}",
  "#{Name.last_name} et #{Name.last_name}"
];

},{}],"node_modules/faker/lib/locales/fr/company/index.js":[function(require,module,exports) {
var company = {};
module['exports'] = company;
company.suffix = require("./suffix");
company.adjective = require("./adjective");
company.descriptor = require("./descriptor");
company.noun = require("./noun");
company.bs_verb = require("./bs_verb");
company.bs_adjective = require("./bs_adjective");
company.bs_noun = require("./bs_noun");
company.name = require("./name");

},{"./suffix":"node_modules/faker/lib/locales/fr/company/suffix.js","./adjective":"node_modules/faker/lib/locales/fr/company/adjective.js","./descriptor":"node_modules/faker/lib/locales/fr/company/descriptor.js","./noun":"node_modules/faker/lib/locales/fr/company/noun.js","./bs_verb":"node_modules/faker/lib/locales/fr/company/bs_verb.js","./bs_adjective":"node_modules/faker/lib/locales/fr/company/bs_adjective.js","./bs_noun":"node_modules/faker/lib/locales/fr/company/bs_noun.js","./name":"node_modules/faker/lib/locales/fr/company/name.js"}],"node_modules/faker/lib/locales/fr/internet/free_email.js":[function(require,module,exports) {
module["exports"] = [
  "gmail.com",
  "yahoo.fr",
  "hotmail.fr"
];

},{}],"node_modules/faker/lib/locales/fr/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "com",
  "fr",
  "eu",
  "info",
  "name",
  "net",
  "org"
];

},{}],"node_modules/faker/lib/locales/fr/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.free_email = require("./free_email");
internet.domain_suffix = require("./domain_suffix");

},{"./free_email":"node_modules/faker/lib/locales/fr/internet/free_email.js","./domain_suffix":"node_modules/faker/lib/locales/fr/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/fr/lorem/words.js":[function(require,module,exports) {
module["exports"] = [
  "alias",
  "consequatur",
  "aut",
  "perferendis",
  "sit",
  "voluptatem",
  "accusantium",
  "doloremque",
  "aperiam",
  "eaque",
  "ipsa",
  "quae",
  "ab",
  "illo",
  "inventore",
  "veritatis",
  "et",
  "quasi",
  "architecto",
  "beatae",
  "vitae",
  "dicta",
  "sunt",
  "explicabo",
  "aspernatur",
  "aut",
  "odit",
  "aut",
  "fugit",
  "sed",
  "quia",
  "consequuntur",
  "magni",
  "dolores",
  "eos",
  "qui",
  "ratione",
  "voluptatem",
  "sequi",
  "nesciunt",
  "neque",
  "dolorem",
  "ipsum",
  "quia",
  "dolor",
  "sit",
  "amet",
  "consectetur",
  "adipisci",
  "velit",
  "sed",
  "quia",
  "non",
  "numquam",
  "eius",
  "modi",
  "tempora",
  "incidunt",
  "ut",
  "labore",
  "et",
  "dolore",
  "magnam",
  "aliquam",
  "quaerat",
  "voluptatem",
  "ut",
  "enim",
  "ad",
  "minima",
  "veniam",
  "quis",
  "nostrum",
  "exercitationem",
  "ullam",
  "corporis",
  "nemo",
  "enim",
  "ipsam",
  "voluptatem",
  "quia",
  "voluptas",
  "sit",
  "suscipit",
  "laboriosam",
  "nisi",
  "ut",
  "aliquid",
  "ex",
  "ea",
  "commodi",
  "consequatur",
  "quis",
  "autem",
  "vel",
  "eum",
  "iure",
  "reprehenderit",
  "qui",
  "in",
  "ea",
  "voluptate",
  "velit",
  "esse",
  "quam",
  "nihil",
  "molestiae",
  "et",
  "iusto",
  "odio",
  "dignissimos",
  "ducimus",
  "qui",
  "blanditiis",
  "praesentium",
  "laudantium",
  "totam",
  "rem",
  "voluptatum",
  "deleniti",
  "atque",
  "corrupti",
  "quos",
  "dolores",
  "et",
  "quas",
  "molestias",
  "excepturi",
  "sint",
  "occaecati",
  "cupiditate",
  "non",
  "provident",
  "sed",
  "ut",
  "perspiciatis",
  "unde",
  "omnis",
  "iste",
  "natus",
  "error",
  "similique",
  "sunt",
  "in",
  "culpa",
  "qui",
  "officia",
  "deserunt",
  "mollitia",
  "animi",
  "id",
  "est",
  "laborum",
  "et",
  "dolorum",
  "fuga",
  "et",
  "harum",
  "quidem",
  "rerum",
  "facilis",
  "est",
  "et",
  "expedita",
  "distinctio",
  "nam",
  "libero",
  "tempore",
  "cum",
  "soluta",
  "nobis",
  "est",
  "eligendi",
  "optio",
  "cumque",
  "nihil",
  "impedit",
  "quo",
  "porro",
  "quisquam",
  "est",
  "qui",
  "minus",
  "id",
  "quod",
  "maxime",
  "placeat",
  "facere",
  "possimus",
  "omnis",
  "voluptas",
  "assumenda",
  "est",
  "omnis",
  "dolor",
  "repellendus",
  "temporibus",
  "autem",
  "quibusdam",
  "et",
  "aut",
  "consequatur",
  "vel",
  "illum",
  "qui",
  "dolorem",
  "eum",
  "fugiat",
  "quo",
  "voluptas",
  "nulla",
  "pariatur",
  "at",
  "vero",
  "eos",
  "et",
  "accusamus",
  "officiis",
  "debitis",
  "aut",
  "rerum",
  "necessitatibus",
  "saepe",
  "eveniet",
  "ut",
  "et",
  "voluptates",
  "repudiandae",
  "sint",
  "et",
  "molestiae",
  "non",
  "recusandae",
  "itaque",
  "earum",
  "rerum",
  "hic",
  "tenetur",
  "a",
  "sapiente",
  "delectus",
  "ut",
  "aut",
  "reiciendis",
  "voluptatibus",
  "maiores",
  "doloribus",
  "asperiores",
  "repellat"
];

},{}],"node_modules/faker/lib/locales/fr/lorem/supplemental.js":[function(require,module,exports) {
module["exports"] = [
  "abbas",
  "abduco",
  "abeo",
  "abscido",
  "absconditus",
  "absens",
  "absorbeo",
  "absque",
  "abstergo",
  "absum",
  "abundans",
  "abutor",
  "accedo",
  "accendo",
  "acceptus",
  "accipio",
  "accommodo",
  "accusator",
  "acer",
  "acerbitas",
  "acervus",
  "acidus",
  "acies",
  "acquiro",
  "acsi",
  "adamo",
  "adaugeo",
  "addo",
  "adduco",
  "ademptio",
  "adeo",
  "adeptio",
  "adfectus",
  "adfero",
  "adficio",
  "adflicto",
  "adhaero",
  "adhuc",
  "adicio",
  "adimpleo",
  "adinventitias",
  "adipiscor",
  "adiuvo",
  "administratio",
  "admiratio",
  "admitto",
  "admoneo",
  "admoveo",
  "adnuo",
  "adopto",
  "adsidue",
  "adstringo",
  "adsuesco",
  "adsum",
  "adulatio",
  "adulescens",
  "adultus",
  "aduro",
  "advenio",
  "adversus",
  "advoco",
  "aedificium",
  "aeger",
  "aegre",
  "aegrotatio",
  "aegrus",
  "aeneus",
  "aequitas",
  "aequus",
  "aer",
  "aestas",
  "aestivus",
  "aestus",
  "aetas",
  "aeternus",
  "ager",
  "aggero",
  "aggredior",
  "agnitio",
  "agnosco",
  "ago",
  "ait",
  "aiunt",
  "alienus",
  "alii",
  "alioqui",
  "aliqua",
  "alius",
  "allatus",
  "alo",
  "alter",
  "altus",
  "alveus",
  "amaritudo",
  "ambitus",
  "ambulo",
  "amicitia",
  "amiculum",
  "amissio",
  "amita",
  "amitto",
  "amo",
  "amor",
  "amoveo",
  "amplexus",
  "amplitudo",
  "amplus",
  "ancilla",
  "angelus",
  "angulus",
  "angustus",
  "animadverto",
  "animi",
  "animus",
  "annus",
  "anser",
  "ante",
  "antea",
  "antepono",
  "antiquus",
  "aperio",
  "aperte",
  "apostolus",
  "apparatus",
  "appello",
  "appono",
  "appositus",
  "approbo",
  "apto",
  "aptus",
  "apud",
  "aqua",
  "ara",
  "aranea",
  "arbitro",
  "arbor",
  "arbustum",
  "arca",
  "arceo",
  "arcesso",
  "arcus",
  "argentum",
  "argumentum",
  "arguo",
  "arma",
  "armarium",
  "armo",
  "aro",
  "ars",
  "articulus",
  "artificiose",
  "arto",
  "arx",
  "ascisco",
  "ascit",
  "asper",
  "aspicio",
  "asporto",
  "assentator",
  "astrum",
  "atavus",
  "ater",
  "atqui",
  "atrocitas",
  "atrox",
  "attero",
  "attollo",
  "attonbitus",
  "auctor",
  "auctus",
  "audacia",
  "audax",
  "audentia",
  "audeo",
  "audio",
  "auditor",
  "aufero",
  "aureus",
  "auris",
  "aurum",
  "aut",
  "autem",
  "autus",
  "auxilium",
  "avaritia",
  "avarus",
  "aveho",
  "averto",
  "avoco",
  "baiulus",
  "balbus",
  "barba",
  "bardus",
  "basium",
  "beatus",
  "bellicus",
  "bellum",
  "bene",
  "beneficium",
  "benevolentia",
  "benigne",
  "bestia",
  "bibo",
  "bis",
  "blandior",
  "bonus",
  "bos",
  "brevis",
  "cado",
  "caecus",
  "caelestis",
  "caelum",
  "calamitas",
  "calcar",
  "calco",
  "calculus",
  "callide",
  "campana",
  "candidus",
  "canis",
  "canonicus",
  "canto",
  "capillus",
  "capio",
  "capitulus",
  "capto",
  "caput",
  "carbo",
  "carcer",
  "careo",
  "caries",
  "cariosus",
  "caritas",
  "carmen",
  "carpo",
  "carus",
  "casso",
  "caste",
  "casus",
  "catena",
  "caterva",
  "cattus",
  "cauda",
  "causa",
  "caute",
  "caveo",
  "cavus",
  "cedo",
  "celebrer",
  "celer",
  "celo",
  "cena",
  "cenaculum",
  "ceno",
  "censura",
  "centum",
  "cerno",
  "cernuus",
  "certe",
  "certo",
  "certus",
  "cervus",
  "cetera",
  "charisma",
  "chirographum",
  "cibo",
  "cibus",
  "cicuta",
  "cilicium",
  "cimentarius",
  "ciminatio",
  "cinis",
  "circumvenio",
  "cito",
  "civis",
  "civitas",
  "clam",
  "clamo",
  "claro",
  "clarus",
  "claudeo",
  "claustrum",
  "clementia",
  "clibanus",
  "coadunatio",
  "coaegresco",
  "coepi",
  "coerceo",
  "cogito",
  "cognatus",
  "cognomen",
  "cogo",
  "cohaero",
  "cohibeo",
  "cohors",
  "colligo",
  "colloco",
  "collum",
  "colo",
  "color",
  "coma",
  "combibo",
  "comburo",
  "comedo",
  "comes",
  "cometes",
  "comis",
  "comitatus",
  "commemoro",
  "comminor",
  "commodo",
  "communis",
  "comparo",
  "compello",
  "complectus",
  "compono",
  "comprehendo",
  "comptus",
  "conatus",
  "concedo",
  "concido",
  "conculco",
  "condico",
  "conduco",
  "confero",
  "confido",
  "conforto",
  "confugo",
  "congregatio",
  "conicio",
  "coniecto",
  "conitor",
  "coniuratio",
  "conor",
  "conqueror",
  "conscendo",
  "conservo",
  "considero",
  "conspergo",
  "constans",
  "consuasor",
  "contabesco",
  "contego",
  "contigo",
  "contra",
  "conturbo",
  "conventus",
  "convoco",
  "copia",
  "copiose",
  "cornu",
  "corona",
  "corpus",
  "correptius",
  "corrigo",
  "corroboro",
  "corrumpo",
  "coruscus",
  "cotidie",
  "crapula",
  "cras",
  "crastinus",
  "creator",
  "creber",
  "crebro",
  "credo",
  "creo",
  "creptio",
  "crepusculum",
  "cresco",
  "creta",
  "cribro",
  "crinis",
  "cruciamentum",
  "crudelis",
  "cruentus",
  "crur",
  "crustulum",
  "crux",
  "cubicularis",
  "cubitum",
  "cubo",
  "cui",
  "cuius",
  "culpa",
  "culpo",
  "cultellus",
  "cultura",
  "cum",
  "cunabula",
  "cunae",
  "cunctatio",
  "cupiditas",
  "cupio",
  "cuppedia",
  "cupressus",
  "cur",
  "cura",
  "curatio",
  "curia",
  "curiositas",
  "curis",
  "curo",
  "curriculum",
  "currus",
  "cursim",
  "curso",
  "cursus",
  "curto",
  "curtus",
  "curvo",
  "curvus",
  "custodia",
  "damnatio",
  "damno",
  "dapifer",
  "debeo",
  "debilito",
  "decens",
  "decerno",
  "decet",
  "decimus",
  "decipio",
  "decor",
  "decretum",
  "decumbo",
  "dedecor",
  "dedico",
  "deduco",
  "defaeco",
  "defendo",
  "defero",
  "defessus",
  "defetiscor",
  "deficio",
  "defigo",
  "defleo",
  "defluo",
  "defungo",
  "degenero",
  "degero",
  "degusto",
  "deinde",
  "delectatio",
  "delego",
  "deleo",
  "delibero",
  "delicate",
  "delinquo",
  "deludo",
  "demens",
  "demergo",
  "demitto",
  "demo",
  "demonstro",
  "demoror",
  "demulceo",
  "demum",
  "denego",
  "denique",
  "dens",
  "denuncio",
  "denuo",
  "deorsum",
  "depereo",
  "depono",
  "depopulo",
  "deporto",
  "depraedor",
  "deprecator",
  "deprimo",
  "depromo",
  "depulso",
  "deputo",
  "derelinquo",
  "derideo",
  "deripio",
  "desidero",
  "desino",
  "desipio",
  "desolo",
  "desparatus",
  "despecto",
  "despirmatio",
  "infit",
  "inflammatio",
  "paens",
  "patior",
  "patria",
  "patrocinor",
  "patruus",
  "pauci",
  "paulatim",
  "pauper",
  "pax",
  "peccatus",
  "pecco",
  "pecto",
  "pectus",
  "pecunia",
  "pecus",
  "peior",
  "pel",
  "ocer",
  "socius",
  "sodalitas",
  "sol",
  "soleo",
  "solio",
  "solitudo",
  "solium",
  "sollers",
  "sollicito",
  "solum",
  "solus",
  "solutio",
  "solvo",
  "somniculosus",
  "somnus",
  "sonitus",
  "sono",
  "sophismata",
  "sopor",
  "sordeo",
  "sortitus",
  "spargo",
  "speciosus",
  "spectaculum",
  "speculum",
  "sperno",
  "spero",
  "spes",
  "spiculum",
  "spiritus",
  "spoliatio",
  "sponte",
  "stabilis",
  "statim",
  "statua",
  "stella",
  "stillicidium",
  "stipes",
  "stips",
  "sto",
  "strenuus",
  "strues",
  "studio",
  "stultus",
  "suadeo",
  "suasoria",
  "sub",
  "subito",
  "subiungo",
  "sublime",
  "subnecto",
  "subseco",
  "substantia",
  "subvenio",
  "succedo",
  "succurro",
  "sufficio",
  "suffoco",
  "suffragium",
  "suggero",
  "sui",
  "sulum",
  "sum",
  "summa",
  "summisse",
  "summopere",
  "sumo",
  "sumptus",
  "supellex",
  "super",
  "suppellex",
  "supplanto",
  "suppono",
  "supra",
  "surculus",
  "surgo",
  "sursum",
  "suscipio",
  "suspendo",
  "sustineo",
  "suus",
  "synagoga",
  "tabella",
  "tabernus",
  "tabesco",
  "tabgo",
  "tabula",
  "taceo",
  "tactus",
  "taedium",
  "talio",
  "talis",
  "talus",
  "tam",
  "tamdiu",
  "tamen",
  "tametsi",
  "tamisium",
  "tamquam",
  "tandem",
  "tantillus",
  "tantum",
  "tardus",
  "tego",
  "temeritas",
  "temperantia",
  "templum",
  "temptatio",
  "tempus",
  "tenax",
  "tendo",
  "teneo",
  "tener",
  "tenuis",
  "tenus",
  "tepesco",
  "tepidus",
  "ter",
  "terebro",
  "teres",
  "terga",
  "tergeo",
  "tergiversatio",
  "tergo",
  "tergum",
  "termes",
  "terminatio",
  "tero",
  "terra",
  "terreo",
  "territo",
  "terror",
  "tersus",
  "tertius",
  "testimonium",
  "texo",
  "textilis",
  "textor",
  "textus",
  "thalassinus",
  "theatrum",
  "theca",
  "thema",
  "theologus",
  "thermae",
  "thesaurus",
  "thesis",
  "thorax",
  "thymbra",
  "thymum",
  "tibi",
  "timidus",
  "timor",
  "titulus",
  "tolero",
  "tollo",
  "tondeo",
  "tonsor",
  "torqueo",
  "torrens",
  "tot",
  "totidem",
  "toties",
  "totus",
  "tracto",
  "trado",
  "traho",
  "trans",
  "tredecim",
  "tremo",
  "trepide",
  "tres",
  "tribuo",
  "tricesimus",
  "triduana",
  "triginta",
  "tripudio",
  "tristis",
  "triumphus",
  "trucido",
  "truculenter",
  "tubineus",
  "tui",
  "tum",
  "tumultus",
  "tunc",
  "turba",
  "turbo",
  "turpe",
  "turpis",
  "tutamen",
  "tutis",
  "tyrannus",
  "uberrime",
  "ubi",
  "ulciscor",
  "ullus",
  "ulterius",
  "ultio",
  "ultra",
  "umbra",
  "umerus",
  "umquam",
  "una",
  "unde",
  "undique",
  "universe",
  "unus",
  "urbanus",
  "urbs",
  "uredo",
  "usitas",
  "usque",
  "ustilo",
  "ustulo",
  "usus",
  "uter",
  "uterque",
  "utilis",
  "utique",
  "utor",
  "utpote",
  "utrimque",
  "utroque",
  "utrum",
  "uxor",
  "vaco",
  "vacuus",
  "vado",
  "vae",
  "valde",
  "valens",
  "valeo",
  "valetudo",
  "validus",
  "vallum",
  "vapulus",
  "varietas",
  "varius",
  "vehemens",
  "vel",
  "velociter",
  "velum",
  "velut",
  "venia",
  "venio",
  "ventito",
  "ventosus",
  "ventus",
  "venustas",
  "ver",
  "verbera",
  "verbum",
  "vere",
  "verecundia",
  "vereor",
  "vergo",
  "veritas",
  "vero",
  "versus",
  "verto",
  "verumtamen",
  "verus",
  "vesco",
  "vesica",
  "vesper",
  "vespillo",
  "vester",
  "vestigium",
  "vestrum",
  "vetus",
  "via",
  "vicinus",
  "vicissitudo",
  "victoria",
  "victus",
  "videlicet",
  "video",
  "viduata",
  "viduo",
  "vigilo",
  "vigor",
  "vilicus",
  "vilis",
  "vilitas",
  "villa",
  "vinco",
  "vinculum",
  "vindico",
  "vinitor",
  "vinum",
  "vir",
  "virga",
  "virgo",
  "viridis",
  "viriliter",
  "virtus",
  "vis",
  "viscus",
  "vita",
  "vitiosus",
  "vitium",
  "vito",
  "vivo",
  "vix",
  "vobis",
  "vociferor",
  "voco",
  "volaticus",
  "volo",
  "volubilis",
  "voluntarius",
  "volup",
  "volutabrum",
  "volva",
  "vomer",
  "vomica",
  "vomito",
  "vorago",
  "vorax",
  "voro",
  "vos",
  "votum",
  "voveo",
  "vox",
  "vulariter",
  "vulgaris",
  "vulgivagus",
  "vulgo",
  "vulgus",
  "vulnero",
  "vulnus",
  "vulpes",
  "vulticulus",
  "vultuosus",
  "xiphias"
];

},{}],"node_modules/faker/lib/locales/fr/lorem/index.js":[function(require,module,exports) {
var lorem = {};
module['exports'] = lorem;
lorem.words = require("./words");
lorem.supplemental = require("./supplemental");

},{"./words":"node_modules/faker/lib/locales/fr/lorem/words.js","./supplemental":"node_modules/faker/lib/locales/fr/lorem/supplemental.js"}],"node_modules/faker/lib/locales/fr/name/first_name.js":[function(require,module,exports) {
module["exports"] = [
  "Enzo",
  "Lucas",
  "Mathis",
  "Nathan",
  "Thomas",
  "Hugo",
  "Théo",
  "Tom",
  "Louis",
  "Raphaël",
  "Clément",
  "Léo",
  "Mathéo",
  "Maxime",
  "Alexandre",
  "Antoine",
  "Yanis",
  "Paul",
  "Baptiste",
  "Alexis",
  "Gabriel",
  "Arthur",
  "Jules",
  "Ethan",
  "Noah",
  "Quentin",
  "Axel",
  "Evan",
  "Mattéo",
  "Romain",
  "Valentin",
  "Maxence",
  "Noa",
  "Adam",
  "Nicolas",
  "Julien",
  "Mael",
  "Pierre",
  "Rayan",
  "Victor",
  "Mohamed",
  "Adrien",
  "Kylian",
  "Sacha",
  "Benjamin",
  "Léa",
  "Clara",
  "Manon",
  "Chloé",
  "Camille",
  "Ines",
  "Sarah",
  "Jade",
  "Lola",
  "Anaïs",
  "Lucie",
  "Océane",
  "Lilou",
  "Marie",
  "Eva",
  "Romane",
  "Lisa",
  "Zoe",
  "Julie",
  "Mathilde",
  "Louise",
  "Juliette",
  "Clémence",
  "Célia",
  "Laura",
  "Lena",
  "Maëlys",
  "Charlotte",
  "Ambre",
  "Maeva",
  "Pauline",
  "Lina",
  "Jeanne",
  "Lou",
  "Noémie",
  "Justine",
  "Louna",
  "Elisa",
  "Alice",
  "Emilie",
  "Carla",
  "Maëlle",
  "Alicia",
  "Mélissa"
];

},{}],"node_modules/faker/lib/locales/fr/name/last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Martin",
  "Bernard",
  "Dubois",
  "Thomas",
  "Robert",
  "Richard",
  "Petit",
  "Durand",
  "Leroy",
  "Moreau",
  "Simon",
  "Laurent",
  "Lefebvre",
  "Michel",
  "Garcia",
  "David",
  "Bertrand",
  "Roux",
  "Vincent",
  "Fournier",
  "Morel",
  "Girard",
  "Andre",
  "Lefevre",
  "Mercier",
  "Dupont",
  "Lambert",
  "Bonnet",
  "Francois",
  "Martinez",
  "Legrand",
  "Garnier",
  "Faure",
  "Rousseau",
  "Blanc",
  "Guerin",
  "Muller",
  "Henry",
  "Roussel",
  "Nicolas",
  "Perrin",
  "Morin",
  "Mathieu",
  "Clement",
  "Gauthier",
  "Dumont",
  "Lopez",
  "Fontaine",
  "Chevalier",
  "Robin",
  "Masson",
  "Sanchez",
  "Gerard",
  "Nguyen",
  "Boyer",
  "Denis",
  "Lemaire",
  "Duval",
  "Joly",
  "Gautier",
  "Roger",
  "Roche",
  "Roy",
  "Noel",
  "Meyer",
  "Lucas",
  "Meunier",
  "Jean",
  "Perez",
  "Marchand",
  "Dufour",
  "Blanchard",
  "Marie",
  "Barbier",
  "Brun",
  "Dumas",
  "Brunet",
  "Schmitt",
  "Leroux",
  "Colin",
  "Fernandez",
  "Pierre",
  "Renard",
  "Arnaud",
  "Rolland",
  "Caron",
  "Aubert",
  "Giraud",
  "Leclerc",
  "Vidal",
  "Bourgeois",
  "Renaud",
  "Lemoine",
  "Picard",
  "Gaillard",
  "Philippe",
  "Leclercq",
  "Lacroix",
  "Fabre",
  "Dupuis",
  "Olivier",
  "Rodriguez",
  "Da silva",
  "Hubert",
  "Louis",
  "Charles",
  "Guillot",
  "Riviere",
  "Le gall",
  "Guillaume",
  "Adam",
  "Rey",
  "Moulin",
  "Gonzalez",
  "Berger",
  "Lecomte",
  "Menard",
  "Fleury",
  "Deschamps",
  "Carpentier",
  "Julien",
  "Benoit",
  "Paris",
  "Maillard",
  "Marchal",
  "Aubry",
  "Vasseur",
  "Le roux",
  "Renault",
  "Jacquet",
  "Collet",
  "Prevost",
  "Poirier",
  "Charpentier",
  "Royer",
  "Huet",
  "Baron",
  "Dupuy",
  "Pons",
  "Paul",
  "Laine",
  "Carre",
  "Breton",
  "Remy",
  "Schneider",
  "Perrot",
  "Guyot",
  "Barre",
  "Marty",
  "Cousin"
];

},{}],"node_modules/faker/lib/locales/fr/name/prefix.js":[function(require,module,exports) {
module["exports"] = [
  "M",
  "Mme",
  "Mlle",
  "Dr",
  "Prof"
];

},{}],"node_modules/faker/lib/locales/fr/name/title.js":[function(require,module,exports) {
module["exports"] = {
  "job": [
    "Superviseur",
    "Executif",
    "Manager",
    "Ingenieur",
    "Specialiste",
    "Directeur",
    "Coordinateur",
    "Administrateur",
    "Architecte",
    "Analyste",
    "Designer",
    "Technicien",
    "Developpeur",
    "Producteur",
    "Consultant",
    "Assistant",
    "Agent",
    "Stagiaire"
  ]
};

},{}],"node_modules/faker/lib/locales/fr/name/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{prefix} #{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{last_name} #{first_name}"
];

},{}],"node_modules/faker/lib/locales/fr/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");
name.prefix = require("./prefix");
name.title = require("./title");
name.name = require("./name");

},{"./first_name":"node_modules/faker/lib/locales/fr/name/first_name.js","./last_name":"node_modules/faker/lib/locales/fr/name/last_name.js","./prefix":"node_modules/faker/lib/locales/fr/name/prefix.js","./title":"node_modules/faker/lib/locales/fr/name/title.js","./name":"node_modules/faker/lib/locales/fr/name/name.js"}],"node_modules/faker/lib/locales/fr/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "01########",
  "02########",
  "03########",
  "04########",
  "05########",
  "06########",
  "07########",
  "+33 1########",
  "+33 2########",
  "+33 3########",
  "+33 4########",
  "+33 5########",
  "+33 6########",
  "+33 7########"
];

},{}],"node_modules/faker/lib/locales/fr/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/fr/phone_number/formats.js"}],"node_modules/faker/lib/locales/fr/index.js":[function(require,module,exports) {
var fr = {};
module['exports'] = fr;
fr.title = "French";
fr.address = require("./address");
fr.company = require("./company");
fr.internet = require("./internet");
fr.lorem = require("./lorem");
fr.name = require("./name");
fr.phone_number = require("./phone_number");

},{"./address":"node_modules/faker/lib/locales/fr/address/index.js","./company":"node_modules/faker/lib/locales/fr/company/index.js","./internet":"node_modules/faker/lib/locales/fr/internet/index.js","./lorem":"node_modules/faker/lib/locales/fr/lorem/index.js","./name":"node_modules/faker/lib/locales/fr/name/index.js","./phone_number":"node_modules/faker/lib/locales/fr/phone_number/index.js"}],"node_modules/faker/lib/locales/fr_CA/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "?#? #?#"
];

},{}],"node_modules/faker/lib/locales/fr_CA/address/state.js":[function(require,module,exports) {
module["exports"] = [
  "Alberta",
  "Colombie-Britannique",
  "Manitoba",
  "Nouveau-Brunswick",
  "Terre-Neuve-et-Labrador",
  "Nouvelle-Écosse",
  "Territoires du Nord-Ouest",
  "Nunavut",
  "Ontario",
  "Île-du-Prince-Édouard",
  "Québec",
  "Saskatchewan",
  "Yukon"
];

},{}],"node_modules/faker/lib/locales/fr_CA/address/state_abbr.js":[function(require,module,exports) {
module["exports"] = [
  "AB",
  "BC",
  "MB",
  "NB",
  "NL",
  "NS",
  "NU",
  "NT",
  "ON",
  "PE",
  "QC",
  "SK",
  "YK"
];

},{}],"node_modules/faker/lib/locales/fr_CA/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "Canada"
];

},{}],"node_modules/faker/lib/locales/fr_CA/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.postcode = require("./postcode");
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.default_country = require("./default_country");

},{"./postcode":"node_modules/faker/lib/locales/fr_CA/address/postcode.js","./state":"node_modules/faker/lib/locales/fr_CA/address/state.js","./state_abbr":"node_modules/faker/lib/locales/fr_CA/address/state_abbr.js","./default_country":"node_modules/faker/lib/locales/fr_CA/address/default_country.js"}],"node_modules/faker/lib/locales/fr_CA/internet/free_email.js":[function(require,module,exports) {
module["exports"] = [
  "gmail.com",
  "yahoo.ca",
  "hotmail.com"
];

},{}],"node_modules/faker/lib/locales/fr_CA/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "qc.ca",
  "ca",
  "com",
  "biz",
  "info",
  "name",
  "net",
  "org"
];

},{}],"node_modules/faker/lib/locales/fr_CA/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.free_email = require("./free_email");
internet.domain_suffix = require("./domain_suffix");

},{"./free_email":"node_modules/faker/lib/locales/fr_CA/internet/free_email.js","./domain_suffix":"node_modules/faker/lib/locales/fr_CA/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/fr_CA/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "### ###-####",
  "1 ### ###-####",
  "### ###-####, poste ###"
];

},{}],"node_modules/faker/lib/locales/fr_CA/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/fr_CA/phone_number/formats.js"}],"node_modules/faker/lib/locales/fr_CA/index.js":[function(require,module,exports) {
var fr_CA = {};
module['exports'] = fr_CA;
fr_CA.title = "Canada (French)";
fr_CA.address = require("./address");
fr_CA.internet = require("./internet");
fr_CA.phone_number = require("./phone_number");

},{"./address":"node_modules/faker/lib/locales/fr_CA/address/index.js","./internet":"node_modules/faker/lib/locales/fr_CA/internet/index.js","./phone_number":"node_modules/faker/lib/locales/fr_CA/phone_number/index.js"}],"node_modules/faker/lib/locales/ge/name/first_name.js":[function(require,module,exports) {
module["exports"] = [
  "აგული",
  "აგუნა",
  "ადოლა",
  "ავთანდილ",
  "ავთო",
  "აკაკი",
  "აკო",
  "ალეკო",
  "ალექსანდრე",
  "ალექსი",
  "ალიო",
  "ამირან",
  "ანა",
  "ანანო",
  "ანზორ",
  "ანნა",
  "ანუკა",
  "ანუკი",
  "არჩილ",
  "ასკილა",
  "ასლანაზ",
  "აჩიკო",
  "ბადრი",
  "ბაია",
  "ბარბარე",
  "ბაქარ",
  "ბაჩა",
  "ბაჩანა",
  "ბაჭუა",
  "ბაჭუკი",
  "ბახვა",
  "ბელა",
  "ბერა",
  "ბერდია",
  "ბესიკ",
  "ბესიკ",
  "ბესო",
  "ბექა",
  "ბიძინა",
  "ბიჭიკო",
  "ბოჩია",
  "ბოცო",
  "ბროლა",
  "ბუბუ",
  "ბუდუ",
  "ბუხუტი",
  "გაგა",
  "გაგი",
  "გახა",
  "გეგა",
  "გეგი",
  "გედია",
  "გელა",
  "გენადი",
  "გვადი",
  "გვანცა",
  "გვანჯი",
  "გვიტია",
  "გვრიტა",
  "გია",
  "გიგა",
  "გიგი",
  "გიგილო",
  "გიგლა",
  "გიგოლი",
  "გივი",
  "გივიკო",
  "გიორგი",
  "გოგი",
  "გოგიტა",
  "გოგიჩა",
  "გოგოთურ",
  "გოგოლა",
  "გოდერძი",
  "გოლა",
  "გოჩა",
  "გრიგოლ",
  "გუგა",
  "გუგუ",
  "გუგულა",
  "გუგული",
  "გუგუნა",
  "გუკა",
  "გულარისა",
  "გულვარდი",
  "გულვარდისა",
  "გულთამზე",
  "გულია",
  "გულიკო",
  "გულისა",
  "გულნარა",
  "გურამ",
  "დავით",
  "დალი",
  "დარეჯან",
  "დიანა",
  "დიმიტრი",
  "დოდო",
  "დუტუ",
  "ეთერ",
  "ეთო",
  "ეკა",
  "ეკატერინე",
  "ელგუჯა",
  "ელენა",
  "ელენე",
  "ელზა",
  "ელიკო",
  "ელისო",
  "ემზარ",
  "ეშხა",
  "ვალენტინა",
  "ვალერი",
  "ვანო",
  "ვაჟა",
  "ვაჟა",
  "ვარდო",
  "ვარსკვლავისა",
  "ვასიკო",
  "ვასილ",
  "ვატო",
  "ვახო",
  "ვახტანგ",
  "ვენერა",
  "ვერა",
  "ვერიკო",
  "ზაზა",
  "ზაირა",
  "ზაურ",
  "ზეზვა",
  "ზვიად",
  "ზინა",
  "ზოია",
  "ზუკა",
  "ზურა",
  "ზურაბ",
  "ზურია",
  "ზურიკო",
  "თაზო",
  "თათა",
  "თათია",
  "თათული",
  "თაია",
  "თაკო",
  "თალიკო",
  "თამაზ",
  "თამარ",
  "თამარა",
  "თამთა",
  "თამთიკე",
  "თამი",
  "თამილა",
  "თამრიკო",
  "თამრო",
  "თამუნა",
  "თამჩო",
  "თანანა",
  "თანდილა",
  "თაყა",
  "თეა",
  "თებრონე",
  "თეიმურაზ",
  "თემურ",
  "თენგიზ",
  "თენგო",
  "თეონა",
  "თიკა",
  "თიკო",
  "თიკუნა",
  "თინა",
  "თინათინ",
  "თინიკო",
  "თმაგიშერა",
  "თორნიკე",
  "თუთა",
  "თუთია",
  "ია",
  "იათამზე",
  "იამზე",
  "ივანე",
  "ივერი",
  "ივქირიონ",
  "იზოლდა",
  "ილია",
  "ილიკო",
  "იმედა",
  "ინგა",
  "იოსებ",
  "ირაკლი",
  "ირინა",
  "ირინე",
  "ირინკა",
  "ირმა",
  "იური",
  "კაკო",
  "კალე",
  "კატო",
  "კახა",
  "კახაბერ",
  "კეკელა",
  "კესანე",
  "კესო",
  "კვირია",
  "კიტა",
  "კობა",
  "კოკა",
  "კონსტანტინე",
  "კოსტა",
  "კოტე",
  "კუკური",
  "ლადო",
  "ლალი",
  "ლამაზა",
  "ლამარა",
  "ლამზირა",
  "ლაშა",
  "ლევან",
  "ლეილა",
  "ლელა",
  "ლენა",
  "ლერწამისა",
  "ლექსო",
  "ლია",
  "ლიანა",
  "ლიზა",
  "ლიზიკო",
  "ლილე",
  "ლილი",
  "ლილიკო",
  "ლომია",
  "ლუიზა",
  "მაგული",
  "მადონა",
  "მათიკო",
  "მაია",
  "მაიკო",
  "მაისა",
  "მაკა",
  "მაკო",
  "მაკუნა",
  "მალხაზ",
  "მამამზე",
  "მამია",
  "მამისა",
  "მამისთვალი",
  "მამისიმედი",
  "მამუკა",
  "მამულა",
  "მანანა",
  "მანჩო",
  "მარადი",
  "მარი",
  "მარია",
  "მარიამი",
  "მარიკა",
  "მარინა",
  "მარინე",
  "მარიტა",
  "მაყვალა",
  "მაყვალა",
  "მაშიკო",
  "მაშო",
  "მაცაცო",
  "მგელია",
  "მგელიკა",
  "მედეა",
  "მეკაშო",
  "მელანო",
  "მერაბ",
  "მერი",
  "მეტია",
  "მზაღო",
  "მზევინარ",
  "მზეთამზე",
  "მზეთვალა",
  "მზეონა",
  "მზექალა",
  "მზეხა",
  "მზეხათუნი",
  "მზია",
  "მზირა",
  "მზისადარ",
  "მზისთანადარი",
  "მზიულა",
  "მთვარისა",
  "მინდია",
  "მიშა",
  "მიშიკო",
  "მიხეილ",
  "მნათობი",
  "მნათობისა",
  "მოგელი",
  "მონავარდისა",
  "მურმან",
  "მუხრან",
  "ნაზი",
  "ნაზიკო",
  "ნათელა",
  "ნათია",
  "ნაირა",
  "ნანა",
  "ნანი",
  "ნანიკო",
  "ნანუკა",
  "ნანული",
  "ნარგიზი",
  "ნასყიდა",
  "ნატალია",
  "ნატო",
  "ნელი",
  "ნენე",
  "ნესტან",
  "ნია",
  "ნიაკო",
  "ნიკა",
  "ნიკოლოზ",
  "ნინა",
  "ნინაკა",
  "ნინი",
  "ნინიკო",
  "ნინო",
  "ნინუკა",
  "ნინუცა",
  "ნოდარ",
  "ნოდო",
  "ნონა",
  "ნორა",
  "ნუგზარ",
  "ნუგო",
  "ნუკა",
  "ნუკი",
  "ნუკრი",
  "ნუნუ",
  "ნუნუ",
  "ნუნუკა",
  "ნუცა",
  "ნუცი",
  "ოთარ",
  "ოთია",
  "ოთო",
  "ომარ",
  "ორბელ",
  "ოტია",
  "ოქროპირ",
  "პაატა",
  "პაპუნა",
  "პატარკაცი",
  "პატარქალი",
  "პეპელა",
  "პირვარდისა",
  "პირიმზე",
  "ჟამიერა",
  "ჟამიტა",
  "ჟამუტა",
  "ჟუჟუნა",
  "რამაზ",
  "რევაზ",
  "რეზი",
  "რეზო",
  "როზა",
  "რომან",
  "რუსკა",
  "რუსუდან",
  "საბა",
  "სალი",
  "სალომე",
  "სანათა",
  "სანდრო",
  "სერგო",
  "სესია",
  "სეხნია",
  "სვეტლანა",
  "სიხარულა",
  "სოსო",
  "სოფიკო",
  "სოფიო",
  "სოფო",
  "სულა",
  "სულიკო",
  "ტარიელ",
  "ტასიკო",
  "ტასო",
  "ტატიანა",
  "ტატო",
  "ტეტია",
  "ტურია",
  "უმანკო",
  "უტა",
  "უჩა",
  "ფაქიზო",
  "ფაცია",
  "ფეფელა",
  "ფეფენა",
  "ფეფიკო",
  "ფეფო",
  "ფოსო",
  "ფოფო",
  "ქაბატო",
  "ქავთარი",
  "ქალია",
  "ქართლოს",
  "ქეთათო",
  "ქეთევან",
  "ქეთი",
  "ქეთინო",
  "ქეთო",
  "ქველი",
  "ქიტესა",
  "ქიშვარდი",
  "ქობული",
  "ქრისტესია",
  "ქტისტეფორე",
  "ქურციკა",
  "ღარიბა",
  "ღვთისავარი",
  "ღვთისია",
  "ღვთისო",
  "ღვინია",
  "ღუღუნა",
  "ყაითამზა",
  "ყაყიტა",
  "ყვარყვარე",
  "ყიასა",
  "შაბური",
  "შაკო",
  "შალვა",
  "შალიკო",
  "შანშე",
  "შარია",
  "შაქარა",
  "შაქრო",
  "შოთა",
  "შორენა",
  "შოშია",
  "შუქია",
  "ჩიორა",
  "ჩიტო",
  "ჩიტო",
  "ჩოყოლა",
  "ცაგო",
  "ცაგული",
  "ცანგალა",
  "ცარო",
  "ცაცა",
  "ცაცო",
  "ციალა",
  "ციკო",
  "ცინარა",
  "ცირა",
  "ცისანა",
  "ცისია",
  "ცისკარა",
  "ცისკარი",
  "ცისმარა",
  "ცისმარი",
  "ციური",
  "ციცი",
  "ციცია",
  "ციცინო",
  "ცოტნე",
  "ცოქალა",
  "ცუცა",
  "ცხვარი",
  "ძაბული",
  "ძამისა",
  "ძაღინა",
  "ძიძია",
  "წათე",
  "წყალობა",
  "ჭაბუკა",
  "ჭიაბერ",
  "ჭიკჭიკა",
  "ჭიჭია",
  "ჭიჭიკო",
  "ჭოლა",
  "ხათუნა",
  "ხარება",
  "ხატია",
  "ხახულა",
  "ხახუტა",
  "ხეჩუა",
  "ხვიჩა",
  "ხიზანა",
  "ხირხელა",
  "ხობელასი",
  "ხოხია",
  "ხოხიტა",
  "ხუტა",
  "ხუცია",
  "ჯაბა",
  "ჯავახი",
  "ჯარჯი",
  "ჯემალ",
  "ჯონდო",
  "ჯოტო",
  "ჯუბი",
  "ჯულიეტა",
  "ჯუმბერ",
  "ჰამლეტ"
];

},{}],"node_modules/faker/lib/locales/ge/name/last_name.js":[function(require,module,exports) {
module["exports"] = [
  "აბაზაძე",
  "აბაშიძე",
  "აბრამაშვილი",
  "აბუსერიძე",
  "აბშილავა",
  "ავაზნელი",
  "ავალიშვილი",
  "ამილახვარი",
  "ანთაძე",
  "ასლამაზიშვილი",
  "ასპანიძე",
  "აშკარელი",
  "ახალბედაშვილი",
  "ახალკაცი",
  "ახვლედიანი",
  "ბარათაშვილი",
  "ბარდაველიძე",
  "ბახტაძე",
  "ბედიანიძე",
  "ბერიძე",
  "ბერუაშვილი",
  "ბეჟანიშვილი",
  "ბოგველიშვილი",
  "ბოტკოველი",
  "გაბრიჩიძე",
  "გაგნიძე",
  "გამრეკელი",
  "გელაშვილი",
  "გზირიშვილი",
  "გიგაური",
  "გურამიშვილი",
  "გურგენიძე",
  "დადიანი",
  "დავითიშვილი",
  "დათუაშვილი",
  "დარბაისელი",
  "დეკანოიძე",
  "დვალი",
  "დოლაბერიძე",
  "ედიშერაშვილი",
  "ელიზბარაშვილი",
  "ელიოზაშვილი",
  "ერისთავი",
  "ვარამაშვილი",
  "ვარდიაშვილი",
  "ვაჩნაძე",
  "ვარდანიძე",
  "ველიაშვილი",
  "ველიჯანაშვილი",
  "ზარანდია",
  "ზარიძე",
  "ზედგინიძე",
  "ზუბიაშვილი",
  "თაბაგარი",
  "თავდგირიძე",
  "თათარაშვილი",
  "თამაზაშვილი",
  "თამარაშვილი",
  "თაქთაქიშვილი",
  "თაყაიშვილი",
  "თბილელი",
  "თუხარელი",
  "იაშვილი",
  "იგითხანიშვილი",
  "ინასარიძე",
  "იშხნელი",
  "კანდელაკი",
  "კაცია",
  "კერესელიძე",
  "კვირიკაშვილი",
  "კიკნაძე",
  "კლდიაშვილი",
  "კოვზაძე",
  "კოპაძე",
  "კოპტონაშვილი",
  "კოშკელაშვილი",
  "ლაბაძე",
  "ლეკიშვილი",
  "ლიქოკელი",
  "ლოლაძე",
  "ლურსმანაშვილი",
  "მაისურაძე",
  "მარტოლეკი",
  "მაღალაძე",
  "მახარაშვილი",
  "მგალობლიშვილი",
  "მეგრელიშვილი",
  "მელაშვილი",
  "მელიქიძე",
  "მერაბიშვილი",
  "მეფარიშვილი",
  "მუჯირი",
  "მჭედლიძე",
  "მხეიძე",
  "ნათაძე",
  "ნაჭყებია",
  "ნოზაძე",
  "ოდიშვილი",
  "ონოფრიშვილი",
  "პარეხელაშვილი",
  "პეტრიაშვილი",
  "სააკაძე",
  "სააკაშვილი",
  "საგინაშვილი",
  "სადუნიშვილი",
  "საძაგლიშვილი",
  "სებისკვერიძე",
  "სეთური",
  "სუთიაშვილი",
  "სულაშვილი",
  "ტაბაღუა",
  "ტყეშელაშვილი",
  "ულუმბელაშვილი",
  "უნდილაძე",
  "ქავთარაძე",
  "ქართველიშვილი",
  "ყაზბეგი",
  "ყაუხჩიშვილი",
  "შავლაშვილი",
  "შალიკაშვილი",
  "შონია",
  "ჩიბუხაშვილი",
  "ჩიხრაძე",
  "ჩიქოვანი",
  "ჩუბინიძე",
  "ჩოლოყაშვილი",
  "ჩოხელი",
  "ჩხვიმიანი",
  "ცალუღელაშვილი",
  "ცაძიკიძე",
  "ციციშვილი",
  "ციხელაშვილი",
  "ციხისთავი",
  "ცხოვრებაძე",
  "ცხომარია",
  "წამალაიძე",
  "წერეთელი",
  "წიკლაური",
  "წიფურია",
  "ჭაბუკაშვილი",
  "ჭავჭავაძე",
  "ჭანტურია",
  "ჭარელიძე",
  "ჭიორელი",
  "ჭუმბურიძე",
  "ხაბაზი",
  "ხარაძე",
  "ხარატიშვილი",
  "ხარატასშვილი",
  "ხარისჭირაშვილი",
  "ხარხელაური",
  "ხაშმელაშვილი",
  "ხეთაგური",
  "ხიზამბარელი",
  "ხიზანიშვილი",
  "ხიმშიაშვილი",
  "ხოსრუაშვილი",
  "ხოჯივანიშვილი",
  "ხუციშვილი",
  "ჯაბადარი",
  "ჯავახი",
  "ჯავახიშვილი",
  "ჯანელიძე",
  "ჯაფარიძე",
  "ჯაყელი",
  "ჯაჯანიძე",
  "ჯვარელია",
  "ჯინიუზაშვილი",
  "ჯუღაშვილი"
];

},{}],"node_modules/faker/lib/locales/ge/name/prefix.js":[function(require,module,exports) {
module["exports"] = [
  "ბ-ნი",
  "ბატონი",
  "ქ-ნი",
  "ქალბატონი"
];

},{}],"node_modules/faker/lib/locales/ge/name/title.js":[function(require,module,exports) {
module["exports"] = {
  "descriptor": [
    "გენერალური",
    "მთავარი",
    "სტაჟიორ",
    "უმცროსი",
    "ყოფილი",
    "წამყვანი"
  ],
  "level": [
    "აღრიცხვების",
    "ბრენდინგის",
    "ბრენიდს",
    "ბუღალტერიის",
    "განყოფილების",
    "გაყიდვების",
    "გუნდის",
    "დახმარების",
    "დიზაინის",
    "თავდაცვის",
    "ინფორმაციის",
    "კვლევების",
    "კომუნიკაციების",
    "მარკეტინგის",
    "ოპერაციათა",
    "ოპტიმიზაციების",
    "პიარ",
    "პროგრამის",
    "საქმეთა",
    "ტაქტიკური",
    "უსაფრთხოების",
    "ფინანსთა",
    "ქსელის",
    "ხარისხის",
    "ჯგუფის"
  ],
  "job": [
    "აგენტი",
    "ადვოკატი",
    "ადმინისტრატორი",
    "არქიტექტორი",
    "ასისტენტი",
    "აღმასრულებელი დირექტორი",
    "დეველოპერი",
    "დეკანი",
    "დიზაინერი",
    "დირექტორი",
    "ელექტრიკოსი",
    "ექსპერტი",
    "ინჟინერი",
    "იურისტი",
    "კონსტრუქტორი",
    "კონსულტანტი",
    "კოორდინატორი",
    "ლექტორი",
    "მასაჟისტი",
    "მემანქანე",
    "მენეჯერი",
    "მძღოლი",
    "მწვრთნელი",
    "ოპერატორი",
    "ოფიცერი",
    "პედაგოგი",
    "პოლიციელი",
    "პროგრამისტი",
    "პროდიუსერი",
    "პრორექტორი",
    "ჟურნალისტი",
    "რექტორი",
    "სპეციალისტი",
    "სტრატეგისტი",
    "ტექნიკოსი",
    "ფოტოგრაფი",
    "წარმომადგენელი"
  ]
};

},{}],"node_modules/faker/lib/locales/ge/name/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{prefix} #{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}"
];

},{}],"node_modules/faker/lib/locales/ge/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");
name.prefix = require("./prefix");
name.title = require("./title");
name.name = require("./name");

},{"./first_name":"node_modules/faker/lib/locales/ge/name/first_name.js","./last_name":"node_modules/faker/lib/locales/ge/name/last_name.js","./prefix":"node_modules/faker/lib/locales/ge/name/prefix.js","./title":"node_modules/faker/lib/locales/ge/name/title.js","./name":"node_modules/faker/lib/locales/ge/name/name.js"}],"node_modules/faker/lib/locales/ge/address/city_prefix.js":[function(require,module,exports) {
module["exports"] = [
  "ახალი",
  "ძველი",
  "ზემო",
  "ქვემო"
];

},{}],"node_modules/faker/lib/locales/ge/address/city_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "სოფელი",
  "ძირი",
  "სკარი",
  "დაბა"
];

},{}],"node_modules/faker/lib/locales/ge/address/city.js":[function(require,module,exports) {
module["exports"] = [
  "#{city_prefix} #{Name.first_name}#{city_suffix}",
  "#{city_prefix} #{Name.first_name}",
  "#{Name.first_name}#{city_suffix}",
  "#{Name.first_name}#{city_suffix}",
  "#{Name.last_name}#{city_suffix}",
  "#{Name.last_name}#{city_suffix}"
];

},{}],"node_modules/faker/lib/locales/ge/address/country.js":[function(require,module,exports) {
module["exports"] = [
  "ავსტრალია",
  "ავსტრია",
  "ავღანეთი",
  "აზავადი",
  "აზერბაიჯანი",
  "აზიაში",
  "აზიის",
  "ალბანეთი",
  "ალჟირი",
  "ამაღლება და ტრისტანი-და-კუნია",
  "ამერიკის ვირჯინიის კუნძულები",
  "ამერიკის სამოა",
  "ამერიკის შეერთებული შტატები",
  "ამერიკის",
  "ანგილია",
  "ანგოლა",
  "ანდორა",
  "ანტიგუა და ბარბუდა",
  "არაბეთის საემიროები",
  "არაბთა გაერთიანებული საამიროები",
  "არაბული ქვეყნების ლიგის",
  "არგენტინა",
  "არუბა",
  "არცნობილი ქვეყნების სია",
  "აფრიკაში",
  "აფრიკაშია",
  "აღდგომის კუნძული",
  "აღმ. ტიმორი",
  "აღმოსავლეთი აფრიკა",
  "აღმოსავლეთი ტიმორი",
  "აშშ",
  "აშშ-ის ვირჯინის კუნძულები",
  "ახალი ზელანდია",
  "ახალი კალედონია",
  "ბანგლადეში",
  "ბარბადოსი",
  "ბაჰამის კუნძულები",
  "ბაჰრეინი",
  "ბელარუსი",
  "ბელგია",
  "ბელიზი",
  "ბენინი",
  "ბერმუდა",
  "ბერმუდის კუნძულები",
  "ბოლივია",
  "ბოსნია და ჰერცეგოვინა",
  "ბოტსვანა",
  "ბრაზილია",
  "ბრიტანეთის ვირჯინიის კუნძულები",
  "ბრიტანეთის ვირჯინის კუნძულები",
  "ბრიტანეთის ინდოეთის ოკეანის ტერიტორია",
  "ბრუნეი",
  "ბულგარეთი",
  "ბურკინა ფასო",
  "ბურკინა-ფასო",
  "ბურუნდი",
  "ბჰუტანი",
  "გაბონი",
  "გაერთიანებული სამეფო",
  "გაეროს",
  "გაიანა",
  "გამბია",
  "განა",
  "გერმანია",
  "გვადელუპა",
  "გვატემალა",
  "გვინეა",
  "გვინეა-ბისაუ",
  "გიბრალტარი",
  "გრენადა",
  "გრენლანდია",
  "გუამი",
  "დამოკიდებული ტერ.",
  "დამოკიდებული ტერიტორია",
  "დამოკიდებული",
  "დანია",
  "დასავლეთი აფრიკა",
  "დასავლეთი საჰარა",
  "დიდი ბრიტანეთი",
  "დომინიკა",
  "დომინიკელთა რესპუბლიკა",
  "ეგვიპტე",
  "ევროკავშირის",
  "ევროპასთან",
  "ევროპაშია",
  "ევროპის ქვეყნები",
  "ეთიოპია",
  "ეკვადორი",
  "ეკვატორული გვინეა",
  "ეპარსეს კუნძული",
  "ერაყი",
  "ერიტრეა",
  "ესპანეთი",
  "ესპანეთის სუვერენული ტერიტორიები",
  "ესტონეთი",
  "ეშმორის და კარტიეს კუნძულები",
  "ვანუატუ",
  "ვატიკანი",
  "ვენესუელა",
  "ვიეტნამი",
  "ზამბია",
  "ზიმბაბვე",
  "თურქეთი",
  "თურქმენეთი",
  "იამაიკა",
  "იან მაიენი",
  "იაპონია",
  "იემენი",
  "ინდოეთი",
  "ინდონეზია",
  "იორდანია",
  "ირანი",
  "ირლანდია",
  "ისლანდია",
  "ისრაელი",
  "იტალია",
  "კაბო-ვერდე",
  "კაიმანის კუნძულები",
  "კამბოჯა",
  "კამერუნი",
  "კანადა",
  "კანარის კუნძულები",
  "კარიბის ზღვის",
  "კატარი",
  "კენია",
  "კვიპროსი",
  "კინგმენის რიფი",
  "კირიბატი",
  "კლიპერტონი",
  "კოლუმბია",
  "კომორი",
  "კომორის კუნძულები",
  "კონგოს დემოკრატიული რესპუბლიკა",
  "კონგოს რესპუბლიკა",
  "კორეის რესპუბლიკა",
  "კოსტა-რიკა",
  "კოტ-დ’ივუარი",
  "კუბა",
  "კუკის კუნძულები",
  "ლაოსი",
  "ლატვია",
  "ლესოთო",
  "ლიბანი",
  "ლიბერია",
  "ლიბია",
  "ლიტვა",
  "ლიხტენშტაინი",
  "ლუქსემბურგი",
  "მადაგასკარი",
  "მადეირა",
  "მავრიკი",
  "მავრიტანია",
  "მაიოტა",
  "მაკაო",
  "მაკედონია",
  "მალავი",
  "მალაიზია",
  "მალდივი",
  "მალდივის კუნძულები",
  "მალი",
  "მალტა",
  "მაროკო",
  "მარტინიკა",
  "მარშალის კუნძულები",
  "მარჯნის ზღვის კუნძულები",
  "მელილია",
  "მექსიკა",
  "მიანმარი",
  "მიკრონეზია",
  "მიკრონეზიის ფედერაციული შტატები",
  "მიმდებარე კუნძულები",
  "მოზამბიკი",
  "მოლდოვა",
  "მონაკო",
  "მონსერატი",
  "მონღოლეთი",
  "ნამიბია",
  "ნაურუ",
  "ნაწილობრივ აფრიკაში",
  "ნეპალი",
  "ნიგერი",
  "ნიგერია",
  "ნიდერლანდი",
  "ნიდერლანდის ანტილები",
  "ნიკარაგუა",
  "ნიუე",
  "ნორვეგია",
  "ნორფოლკის კუნძული",
  "ოკეანეთის",
  "ოკეანიას",
  "ომანი",
  "პაკისტანი",
  "პალაუ",
  "პალესტინა",
  "პალმირა (ატოლი)",
  "პანამა",
  "პანტელერია",
  "პაპუა-ახალი გვინეა",
  "პარაგვაი",
  "პერუ",
  "პიტკერნის კუნძულები",
  "პოლონეთი",
  "პორტუგალია",
  "პრინც-ედუარდის კუნძული",
  "პუერტო-რიკო",
  "რეუნიონი",
  "როტუმა",
  "რუანდა",
  "რუმინეთი",
  "რუსეთი",
  "საბერძნეთი",
  "სადავო ტერიტორიები",
  "სალვადორი",
  "სამოა",
  "სამხ. კორეა",
  "სამხრეთ ამერიკაშია",
  "სამხრეთ ამერიკის",
  "სამხრეთ აფრიკის რესპუბლიკა",
  "სამხრეთი აფრიკა",
  "სამხრეთი გეორგია და სამხრეთ სენდვიჩის კუნძულები",
  "სამხრეთი სუდანი",
  "სან-მარინო",
  "სან-ტომე და პრინსიპი",
  "საუდის არაბეთი",
  "საფრანგეთი",
  "საფრანგეთის გვიანა",
  "საფრანგეთის პოლინეზია",
  "საქართველო",
  "საჰარის არაბთა დემოკრატიული რესპუბლიკა",
  "სეიშელის კუნძულები",
  "სენ-ბართელმი",
  "სენ-მარტენი",
  "სენ-პიერი და მიკელონი",
  "სენეგალი",
  "სენტ-ვინსენტი და გრენადინები",
  "სენტ-კიტსი და ნევისი",
  "სენტ-ლუსია",
  "სერბეთი",
  "სეუტა",
  "სვაზილენდი",
  "სვალბარდი",
  "სიერა-ლეონე",
  "სინგაპური",
  "სირია",
  "სლოვაკეთი",
  "სლოვენია",
  "სოკოტრა",
  "სოლომონის კუნძულები",
  "სომალი",
  "სომალილენდი",
  "სომხეთი",
  "სუდანი",
  "სუვერენული სახელმწიფოები",
  "სურინამი",
  "ტაივანი",
  "ტაილანდი",
  "ტანზანია",
  "ტაჯიკეთი",
  "ტერიტორიები",
  "ტერქსისა და კაიკოსის კუნძულები",
  "ტოგო",
  "ტოკელაუ",
  "ტონგა",
  "ტრანსკონტინენტური ქვეყანა",
  "ტრინიდადი და ტობაგო",
  "ტუვალუ",
  "ტუნისი",
  "უგანდა",
  "უზბეკეთი",
  "უკრაინა",
  "უნგრეთი",
  "უოლისი და ფუტუნა",
  "ურუგვაი",
  "ფარერის კუნძულები",
  "ფილიპინები",
  "ფინეთი",
  "ფიჯი",
  "ფოლკლენდის კუნძულები",
  "ქვეყნები",
  "ქოქოსის კუნძულები",
  "ქუვეითი",
  "ღაზის სექტორი",
  "ყაზახეთი",
  "ყირგიზეთი",
  "შვედეთი",
  "შვეიცარია",
  "შობის კუნძული",
  "შრი-ლანკა",
  "ჩადი",
  "ჩერნოგორია",
  "ჩეჩნეთის რესპუბლიკა იჩქერია",
  "ჩეხეთი",
  "ჩილე",
  "ჩინეთი",
  "ჩრდ. კორეა",
  "ჩრდილოეთ ამერიკის",
  "ჩრდილოეთ მარიანას კუნძულები",
  "ჩრდილოეთი აფრიკა",
  "ჩრდილოეთი კორეა",
  "ჩრდილოეთი მარიანას კუნძულები",
  "ცენტრალური აფრიკა",
  "ცენტრალური აფრიკის რესპუბლიკა",
  "წევრები",
  "წმინდა ელენე",
  "წმინდა ელენეს კუნძული",
  "ხორვატია",
  "ჯერსი",
  "ჯიბუტი",
  "ჰავაი",
  "ჰაიტი",
  "ჰერდი და მაკდონალდის კუნძულები",
  "ჰონდურასი",
  "ჰონკონგი"
];

},{}],"node_modules/faker/lib/locales/ge/address/building_number.js":[function(require,module,exports) {
module["exports"] = [
  "###",
  "##",
  "#"
];

},{}],"node_modules/faker/lib/locales/ge/address/street_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "გამზ.",
  "გამზირი",
  "ქ.",
  "ქუჩა",
  "ჩიხი",
  "ხეივანი"
];

},{}],"node_modules/faker/lib/locales/ge/address/secondary_address.js":[function(require,module,exports) {
module["exports"] = [
  "კორპ. ##",
  "შენობა ###"
];

},{}],"node_modules/faker/lib/locales/ge/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "01##"
];

},{}],"node_modules/faker/lib/locales/ge/address/city_name.js":[function(require,module,exports) {
module["exports"] = [
  "აბასთუმანი",
  "აბაშა",
  "ადიგენი",
  "ამბროლაური",
  "ანაკლია",
  "ასპინძა",
  "ახალგორი",
  "ახალქალაქი",
  "ახალციხე",
  "ახმეტა",
  "ბათუმი",
  "ბაკურიანი",
  "ბაღდათი",
  "ბახმარო",
  "ბოლნისი",
  "ბორჯომი",
  "გარდაბანი",
  "გონიო",
  "გორი",
  "გრიგოლეთი",
  "გუდაური",
  "გურჯაანი",
  "დედოფლისწყარო",
  "დმანისი",
  "დუშეთი",
  "ვანი",
  "ზესტაფონი",
  "ზუგდიდი",
  "თბილისი",
  "თეთრიწყარო",
  "თელავი",
  "თერჯოლა",
  "თიანეთი",
  "კასპი",
  "კვარიათი",
  "კიკეთი",
  "კოჯორი",
  "ლაგოდეხი",
  "ლანჩხუთი",
  "ლენტეხი",
  "მარნეული",
  "მარტვილი",
  "მესტია",
  "მცხეთა",
  "მწვანე კონცხი",
  "ნინოწმინდა",
  "ოზურგეთი",
  "ონი",
  "რუსთავი",
  "საგარეჯო",
  "საგურამო",
  "საირმე",
  "სამტრედია",
  "სარფი",
  "საჩხერე",
  "სენაკი",
  "სიღნაღი",
  "სტეფანწმინდა",
  "სურამი",
  "ტაბახმელა",
  "ტყიბული",
  "ურეკი",
  "ფოთი",
  "ქარელი",
  "ქედა",
  "ქობულეთი",
  "ქუთაისი",
  "ყვარელი",
  "შუახევი",
  "ჩაქვი",
  "ჩოხატაური",
  "ცაგერი",
  "ცხოროჭყუ",
  "წავკისი",
  "წალენჯიხა",
  "წალკა",
  "წაღვერი",
  "წეროვანი",
  "წნორი",
  "წყალტუბო",
  "წყნეთი",
  "ჭიათურა",
  "ხარაგაული",
  "ხაშური",
  "ხელვაჩაური",
  "ხობი",
  "ხონი",
  "ხულო"
];

},{}],"node_modules/faker/lib/locales/ge/address/street_title.js":[function(require,module,exports) {
module["exports"] = [
  "აბაშიძის",
  "აბესაძის",
  "აბულაძის",
  "აგლაძის",
  "ადლერის",
  "ავიაქიმიის",
  "ავლაბრის",
  "ათარბეგოვის",
  "ათონელის",
  "ალავერდოვის",
  "ალექსიძის",
  "ალილუევის",
  "ალმასიანის",
  "ამაღლების",
  "ამირეჯიბის",
  "ანაგის",
  "ანდრონიკაშვილის",
  "ანთელავას",
  "ანჯაფარიძის",
  "არაგვის",
  "არდონის",
  "არეშიძის",
  "ასათიანის",
  "ასკურავას",
  "ასლანიდის",
  "ატენის",
  "აფხაზი",
  "აღმაშენებლის",
  "ახალშენის",
  "ახვლედიანის",
  "ბააზოვის",
  "ბაბისხევის",
  "ბაბუშკინის",
  "ბაგრატიონის",
  "ბალანჩივაძეების",
  "ბალანჩივაძის",
  "ბალანჩინის",
  "ბალმაშევის",
  "ბარამიძის",
  "ბარნოვის",
  "ბაშალეიშვილის",
  "ბევრეთის",
  "ბელინსკის",
  "ბელოსტოკის",
  "ბენაშვილის",
  "ბეჟანიშვილის",
  "ბერიძის",
  "ბოლქვაძის",
  "ბოცვაძის",
  "ბოჭორიშვილის",
  "ბოჭორიძის",
  "ბუაჩიძის",
  "ბუდაპეშტის",
  "ბურკიაშვილის",
  "ბურძგლას",
  "გაბესკირიას",
  "გაგარინის",
  "გაზაფხულის",
  "გამრეკელის",
  "გამსახურდიას",
  "გარეჯელის",
  "გეგეჭკორის",
  "გედაურის",
  "გელოვანი",
  "გელოვანის",
  "გერცენის",
  "გლდანის",
  "გოგებაშვილის",
  "გოგიბერიძის",
  "გოგოლის",
  "გონაშვილის",
  "გორგასლის",
  "გრანელის",
  "გრიზოდუბოვას",
  "გრინევიცკის",
  "გრომოვას",
  "გრუზინსკის",
  "გუდიაშვილის",
  "გულრიფშის",
  "გულუას",
  "გურამიშვილის",
  "გურგენიძის",
  "დადიანის",
  "დავითაშვილის",
  "დამაკავშირებელი",
  "დარიალის",
  "დედოფლისწყაროს",
  "დეპუტატის",
  "დიდგორის",
  "დიდი",
  "დიდუბის",
  "დიუმას",
  "დიღმის",
  "დიღომში",
  "დოლიძის",
  "დუნდუას",
  "დურმიშიძის",
  "ელიავას",
  "ენგელსის",
  "ენგურის",
  "ეპისკოპოსის",
  "ერისთავი",
  "ერისთავის",
  "ვაზისუბნის",
  "ვაკელის",
  "ვართაგავას",
  "ვატუტინის",
  "ვაჩნაძის",
  "ვაცეკის",
  "ვეკუას",
  "ვეშაპურის",
  "ვირსალაძის",
  "ვოლოდარსკის",
  "ვორონინის",
  "ზაარბრიუკენის",
  "ზაზიაშვილის",
  "ზაზიშვილის",
  "ზაკომოლდინის",
  "ზანდუკელის",
  "ზაქარაიას",
  "ზაქარიაძის",
  "ზახაროვის",
  "ზაჰესის",
  "ზნაურის",
  "ზურაბაშვილის",
  "ზღვის",
  "თაბუკაშვილის",
  "თავაძის",
  "თავისუფლების",
  "თამარაშვილის",
  "თაქთაქიშვილის",
  "თბილელის",
  "თელიას",
  "თორაძის",
  "თოფურიძის",
  "იალბუზის",
  "იამანიძის",
  "იაშვილის",
  "იბერიის",
  "იერუსალიმის",
  "ივანიძის",
  "ივერიელის",
  "იზაშვილის",
  "ილურიძის",
  "იმედაშვილის",
  "იმედაძის",
  "იმედის",
  "ინანიშვილის",
  "ინგოროყვას",
  "ინდუსტრიალიზაციის",
  "ინჟინრის",
  "ინწკირველის",
  "ირბახის",
  "ირემაშვილის",
  "ისაკაძის",
  "ისპასჰანლის",
  "იტალიის",
  "იუნკერთა",
  "კათალიკოსის",
  "კაიროს",
  "კაკაბაძის",
  "კაკაბეთის",
  "კაკლიანის",
  "კალანდაძის",
  "კალიაევის",
  "კალინინის",
  "კამალოვის",
  "კამოს",
  "კაშენის",
  "კახოვკის",
  "კედიას",
  "კელაპტრიშვილის",
  "კერესელიძის",
  "კეცხოველის",
  "კიბალჩიჩის",
  "კიკნაძის",
  "კიროვის",
  "კობარეთის",
  "კოლექტივიზაციის",
  "კოლმეურნეობის",
  "კოლხეთის",
  "კომკავშირის",
  "კომუნისტური",
  "კონსტიტუციის",
  "კოოპერაციის",
  "კოსტავას",
  "კოტეტიშვილის",
  "კოჩეტკოვის",
  "კოჯრის",
  "კრონშტადტის",
  "კროპოტკინის",
  "კრუპსკაიას",
  "კუიბიშევის",
  "კურნატოვსკის",
  "კურტანოვსკის",
  "კუტუზოვის",
  "ლაღიძის",
  "ლელაშვილის",
  "ლენინაშენის",
  "ლენინგრადის",
  "ლენინის",
  "ლენის",
  "ლეონიძის",
  "ლვოვის",
  "ლორთქიფანიძის",
  "ლოტკინის",
  "ლუბლიანის",
  "ლუბოვსკის",
  "ლუნაჩარსკის",
  "ლუქსემბურგის",
  "მაგნიტოგორსკის",
  "მაზნიაშვილის",
  "მაისურაძის",
  "მამარდაშვილის",
  "მამაცაშვილის",
  "მანაგაძის",
  "მანჯგალაძის",
  "მარის",
  "მარუაშვილის",
  "მარქსის",
  "მარჯანის",
  "მატროსოვის",
  "მაჭავარიანი",
  "მახალდიანის",
  "მახარაძის",
  "მებაღიშვილის",
  "მეგობრობის",
  "მელაანის",
  "მერკვილაძის",
  "მესხიას",
  "მესხის",
  "მეტეხის",
  "მეტრეველი",
  "მეჩნიკოვის",
  "მთავარანგელოზის",
  "მიასნიკოვის",
  "მილორავას",
  "მიმინოშვილის",
  "მიროტაძის",
  "მიქატაძის",
  "მიქელაძის",
  "მონტინის",
  "მორეტის",
  "მოსკოვის",
  "მრევლიშვილის",
  "მუშკორის",
  "მუჯირიშვილის",
  "მშვიდობის",
  "მცხეთის",
  "ნადირაძის",
  "ნაკაშიძის",
  "ნარიმანოვის",
  "ნასიძის",
  "ნაფარეულის",
  "ნეკრასოვის",
  "ნიაღვრის",
  "ნინიძის",
  "ნიშნიანიძის",
  "ობოლაძის",
  "ონიანის",
  "ოჟიოს",
  "ორახელაშვილის",
  "ორბელიანის",
  "ორჯონიკიძის",
  "ოქტომბრის",
  "ოცდაექვსი",
  "პავლოვის",
  "პარალელურის",
  "პარიზის",
  "პეკინის",
  "პეროვსკაიას",
  "პეტეფის",
  "პიონერის",
  "პირველი",
  "პისარევის",
  "პლეხანოვის",
  "პრავდის",
  "პროლეტარიატის",
  "ჟელიაბოვის",
  "ჟვანიას",
  "ჟორდანიას",
  "ჟღენტი",
  "ჟღენტის",
  "რადიანის",
  "რამიშვილი",
  "რასკოვას",
  "რენინგერის",
  "რინგის",
  "რიჟინაშვილის",
  "რობაქიძის",
  "რობესპიერის",
  "რუსის",
  "რუხაძის",
  "რჩეულიშვილის",
  "სააკაძის",
  "საბადურის",
  "საბაშვილის",
  "საბურთალოს",
  "საბჭოს",
  "საგურამოს",
  "სამრეკლოს",
  "სამღერეთის",
  "სანაკოევის",
  "სარაჯიშვილის",
  "საჯაიას",
  "სევასტოპოლის",
  "სერგი",
  "სვანიძის",
  "სვერდლოვის",
  "სტახანოვის",
  "სულთნიშნის",
  "სურგულაძის",
  "სხირტლაძის",
  "ტაბიძის",
  "ტატიშვილის",
  "ტელმანის",
  "ტერევერკოს",
  "ტეტელაშვილის",
  "ტოვსტონოგოვის",
  "ტოროშელიძის",
  "ტრაქტორის",
  "ტრიკოტაჟის",
  "ტურბინის",
  "უბილავას",
  "უბინაშვილის",
  "უზნაძის",
  "უკლებას",
  "ულიანოვის",
  "ურიდიას",
  "ფაბრიციუსის",
  "ფაღავას",
  "ფერისცვალების",
  "ფიგნერის",
  "ფიზკულტურის",
  "ფიოლეტოვის",
  "ფიფიების",
  "ფოცხიშვილის",
  "ქართველიშვილის",
  "ქართლელიშვილის",
  "ქინქლაძის",
  "ქიქოძის",
  "ქსოვრელის",
  "ქუთათელაძის",
  "ქუთათელის",
  "ქურდიანის",
  "ღოღობერიძის",
  "ღუდუშაურის",
  "ყავლაშვილის",
  "ყაზბეგის",
  "ყარყარაშვილის",
  "ყიფიანის",
  "ყუშიტაშვილის",
  "შანიძის",
  "შარტავას",
  "შატილოვის",
  "შაუმიანის",
  "შენგელაიას",
  "შერვაშიძის",
  "შეროზიას",
  "შირშოვის",
  "შმიდტის",
  "შრომის",
  "შუშინის",
  "შჩორსის",
  "ჩალაუბნის",
  "ჩანტლაძის",
  "ჩაპაევის",
  "ჩაჩავას",
  "ჩელუსკინელების",
  "ჩერნიახოვსკის",
  "ჩერქეზიშვილი",
  "ჩერქეზიშვილის",
  "ჩვიდმეტი",
  "ჩიტაიას",
  "ჩიტაძის",
  "ჩიქვანაიას",
  "ჩიქობავას",
  "ჩიხლაძის",
  "ჩოდრიშვილის",
  "ჩოლოყაშვილის",
  "ჩუღურეთის",
  "ცაბაძის",
  "ცაგარელის",
  "ცეტკინის",
  "ცინცაძის",
  "ცისკარიშვილის",
  "ცურტაველის",
  "ცქიტიშვილის",
  "ცხაკაიას",
  "ძმობის",
  "ძნელაძის",
  "წერეთლის",
  "წითელი",
  "წითელწყაროს",
  "წინამძღვრიშვილის",
  "წულაძის",
  "წულუკიძის",
  "ჭაბუკიანის",
  "ჭავჭავაძის",
  "ჭანტურიას",
  "ჭოველიძის",
  "ჭონქაძის",
  "ჭყონდიდელის",
  "ხანძთელის",
  "ხვამლის",
  "ხვინგიას",
  "ხვიჩიას",
  "ხიმშიაშვილის",
  "ხმელნიცკის",
  "ხორნაბუჯის",
  "ხრამჰესის",
  "ხუციშვილის",
  "ჯავახიშვილის",
  "ჯაფარიძის",
  "ჯიბლაძის",
  "ჯორჯიაშვილის"
];

},{}],"node_modules/faker/lib/locales/ge/address/street_name.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_title} #{street_suffix}"
];

},{}],"node_modules/faker/lib/locales/ge/address/street_address.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_name} #{building_number}"
];

},{}],"node_modules/faker/lib/locales/ge/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "საქართველო"
];

},{}],"node_modules/faker/lib/locales/ge/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.city_prefix = require("./city_prefix");
address.city_suffix = require("./city_suffix");
address.city = require("./city");
address.country = require("./country");
address.building_number = require("./building_number");
address.street_suffix = require("./street_suffix");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.city_name = require("./city_name");
address.street_title = require("./street_title");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./city_prefix":"node_modules/faker/lib/locales/ge/address/city_prefix.js","./city_suffix":"node_modules/faker/lib/locales/ge/address/city_suffix.js","./city":"node_modules/faker/lib/locales/ge/address/city.js","./country":"node_modules/faker/lib/locales/ge/address/country.js","./building_number":"node_modules/faker/lib/locales/ge/address/building_number.js","./street_suffix":"node_modules/faker/lib/locales/ge/address/street_suffix.js","./secondary_address":"node_modules/faker/lib/locales/ge/address/secondary_address.js","./postcode":"node_modules/faker/lib/locales/ge/address/postcode.js","./city_name":"node_modules/faker/lib/locales/ge/address/city_name.js","./street_title":"node_modules/faker/lib/locales/ge/address/street_title.js","./street_name":"node_modules/faker/lib/locales/ge/address/street_name.js","./street_address":"node_modules/faker/lib/locales/ge/address/street_address.js","./default_country":"node_modules/faker/lib/locales/ge/address/default_country.js"}],"node_modules/faker/lib/locales/ge/internet/free_email.js":[function(require,module,exports) {
module["exports"] = [
  "gmail.com",
  "yahoo.com",
  "posta.ge"
];

},{}],"node_modules/faker/lib/locales/ge/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "ge",
  "com",
  "net",
  "org",
  "com.ge",
  "org.ge"
];

},{}],"node_modules/faker/lib/locales/ge/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.free_email = require("./free_email");
internet.domain_suffix = require("./domain_suffix");

},{"./free_email":"node_modules/faker/lib/locales/ge/internet/free_email.js","./domain_suffix":"node_modules/faker/lib/locales/ge/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/ge/company/prefix.js":[function(require,module,exports) {
module["exports"] = [
  "შპს",
  "სს",
  "ააიპ",
  "სსიპ"
];

},{}],"node_modules/faker/lib/locales/ge/company/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "ჯგუფი",
  "და კომპანია",
  "სტუდია",
  "გრუპი"
];

},{}],"node_modules/faker/lib/locales/ge/company/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{prefix} #{Name.first_name}",
  "#{prefix} #{Name.last_name}",
  "#{prefix} #{Name.last_name} #{suffix}",
  "#{prefix} #{Name.first_name} #{suffix}",
  "#{prefix} #{Name.last_name}-#{Name.last_name}"
];

},{}],"node_modules/faker/lib/locales/ge/company/index.js":[function(require,module,exports) {
var company = {};
module['exports'] = company;
company.prefix = require("./prefix");
company.suffix = require("./suffix");
company.name = require("./name");

},{"./prefix":"node_modules/faker/lib/locales/ge/company/prefix.js","./suffix":"node_modules/faker/lib/locales/ge/company/suffix.js","./name":"node_modules/faker/lib/locales/ge/company/name.js"}],"node_modules/faker/lib/locales/ge/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "5##-###-###",
  "5########",
  "5## ## ## ##",
  "5## ######",
  "5## ### ###",
  "995 5##-###-###",
  "995 5########",
  "995 5## ## ## ##",
  "995 5## ######",
  "995 5## ### ###",
  "+995 5##-###-###",
  "+995 5########",
  "+995 5## ## ## ##",
  "+995 5## ######",
  "+995 5## ### ###",
  "(+995) 5##-###-###",
  "(+995) 5########",
  "(+995) 5## ## ## ##",
  "(+995) 5## ######",
  "(+995) 5## ### ###"
];

},{}],"node_modules/faker/lib/locales/ge/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/ge/phone_number/formats.js"}],"node_modules/faker/lib/locales/ge/cell_phone/formats.js":[function(require,module,exports) {
module["exports"] = [
  "(+995 32) 2-##-##-##",
  "032-2-##-##-##",
  "032-2-######",
  "032-2-###-###",
  "032 2 ## ## ##",
  "032 2 ######",
  "2 ## ## ##",
  "2######",
  "2 ### ###"
];

},{}],"node_modules/faker/lib/locales/ge/cell_phone/index.js":[function(require,module,exports) {
var cell_phone = {};
module['exports'] = cell_phone;
cell_phone.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/ge/cell_phone/formats.js"}],"node_modules/faker/lib/locales/ge/index.js":[function(require,module,exports) {
var ge = {};
module['exports'] = ge;
ge.title = "Georgian";
ge.separator = " და ";
ge.name = require("./name");
ge.address = require("./address");
ge.internet = require("./internet");
ge.company = require("./company");
ge.phone_number = require("./phone_number");
ge.cell_phone = require("./cell_phone");

},{"./name":"node_modules/faker/lib/locales/ge/name/index.js","./address":"node_modules/faker/lib/locales/ge/address/index.js","./internet":"node_modules/faker/lib/locales/ge/internet/index.js","./company":"node_modules/faker/lib/locales/ge/company/index.js","./phone_number":"node_modules/faker/lib/locales/ge/phone_number/index.js","./cell_phone":"node_modules/faker/lib/locales/ge/cell_phone/index.js"}],"node_modules/faker/lib/locales/id_ID/address/building_number.js":[function(require,module,exports) {
module["exports"] = [  
  "##",
  "#"
];

},{}],"node_modules/faker/lib/locales/id_ID/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "#####"
];
},{}],"node_modules/faker/lib/locales/id_ID/address/state.js":[function(require,module,exports) {
module["exports"] = [
  "Aceh",
  "Sumatera Utara",
  "Sumatera Barat",
  "Jambi",
  "Bangka Belitung",
  "Riau",
  "Kepulauan Riau",
  "Bengkulu",
  "Sumatera Selatan",
  "Lampung",
  "Banten",
  "DKI Jakarta",
  "Jawa Barat",
  "Jawa Tengah",
  "Jawa Timur",
  "Nusa Tenggara Timur",
  "DI Yogyakarta",
  "Bali",
  "Nusa Tenggara Barat",
  "Kalimantan Barat",
  "Kalimantan Tengah",
  "Kalimantan Selatan",
  "Kalimantan Timur",
  "Kalimantan Utara",
  "Sulawesi Selatan",
  "Sulawesi Utara",
  "Gorontalo",
  "Sulawesi Tengah",
  "Sulawesi Barat",
  "Sulawesi Tenggara",
  "Maluku",
  "Maluku Utara",
  "Papua Barat",
  "Papua"
];
},{}],"node_modules/faker/lib/locales/id_ID/address/city_name.js":[function(require,module,exports) {
module["exports"] = [
  "Airmadidi",
  "Ampana",
  "Amurang",
  "Andolo",
  "Banggai",
  "Bantaeng",
  "Barru",
  "Bau-Bau",
  "Benteng",
  "Bitung",
  "Bolaang Uki",
  "Boroko",
  "Bulukumba",
  "Bungku",
  "Buol",
  "Buranga",
  "Donggala",
  "Enrekang",
  "Gorontalo",
  "Jeneponto",
  "Kawangkoan",
  "Kendari",
  "Kolaka",
  "Kotamobagu",
  "Kota Raha",
  "Kwandang",
  "Lasusua",
  "Luwuk",
  "Majene",
  "Makale",
  "Makassar",
  "Malili",
  "Mamasa",
  "Mamuju",
  "Manado",
  "Marisa",
  "Maros",
  "Masamba",
  "Melonguane",
  "Ondong Siau",
  "Palopo",
  "Palu",
  "Pangkajene",
  "Pare-Pare",
  "Parigi",
  "Pasangkayu",
  "Pinrang",
  "Polewali",
  "Poso",
  "Rantepao",
  "Ratahan",
  "Rumbia",
  "Sengkang",
  "Sidenreng",
  "Sigi Biromaru",
  "Sinjai",
  "Sunggu Minasa",
  "Suwawa",
  "Tahuna",
  "Takalar",
  "Tilamuta",
  "Toli Toli",
  "Tomohon",
  "Tondano",
  "Tutuyan",
  "Unaaha",
  "Wangi Wangi",
  "Wanggudu",
  "Watampone",
  "Watan Soppeng",
  "Ambarawa",
  "Anyer",
  "Bandung",
  "Bangil",
  "Banjar (Jawa Barat)",
  "Banjarnegara",
  "Bangkalan",
  "Bantul",
  "Banyumas",
  "Banyuwangi",
  "Batang",
  "Batu",
  "Bekasi",
  "Blitar",
  "Blora",
  "Bogor",
  "Bojonegoro",
  "Bondowoso",
  "Boyolali",
  "Bumiayu",
  "Brebes",
  "Caruban",
  "Cianjur",
  "Ciamis",
  "Cibinong",
  "Cikampek",
  "Cikarang",
  "Cilacap",
  "Cilegon",
  "Cirebon",
  "Demak",
  "Depok",
  "Garut",
  "Gresik",
  "Indramayu",
  "Jakarta",
  "Jember",
  "Jepara",
  "Jombang",
  "Kajen",
  "Karanganyar",
  "Kebumen",
  "Kediri",
  "Kendal",
  "Kepanjen",
  "Klaten",
  "Pelabuhan Ratu",
  "Kraksaan",
  "Kudus",
  "Kuningan",
  "Lamongan",
  "Lumajang",
  "Madiun",
  "Magelang",
  "Magetan",
  "Majalengka",
  "Malang",
  "Mojokerto",
  "Mojosari",
  "Mungkid",
  "Ngamprah",
  "Nganjuk",
  "Ngawi",
  "Pacitan",
  "Pamekasan",
  "Pandeglang",
  "Pare",
  "Pati",
  "Pasuruan",
  "Pekalongan",
  "Pemalang",
  "Ponorogo",
  "Probolinggo",
  "Purbalingga",
  "Purwakarta",
  "Purwodadi",
  "Purwokerto",
  "Purworejo",
  "Rangkasbitung",
  "Rembang",
  "Salatiga",
  "Sampang",
  "Semarang",
  "Serang",
  "Sidayu",
  "Sidoarjo",
  "Singaparna",
  "Situbondo",
  "Slawi",
  "Sleman",
  "Soreang",
  "Sragen",
  "Subang",
  "Sukabumi",
  "Sukoharjo",
  "Sumber",
  "Sumedang",
  "Sumenep",
  "Surabaya",
  "Surakarta",
  "Tasikmalaya",
  "Tangerang",
  "Tangerang Selatan",
  "Tegal",
  "Temanggung",
  "Tigaraksa",
  "Trenggalek",
  "Tuban",
  "Tulungagung",
  "Ungaran",
  "Wates",
  "Wlingi",
  "Wonogiri",
  "Wonosari",
  "Wonosobo",
  "Yogyakarta",
  "Atambua",
  "Baa",
  "Badung",
  "Bajawa",
  "Bangli",
  "Bima",
  "Denpasar",
  "Dompu",
  "Ende",
  "Gianyar",
  "Kalabahi",
  "Karangasem",
  "Kefamenanu",
  "Klungkung",
  "Kupang",
  "Labuhan Bajo",
  "Larantuka",
  "Lewoleba",
  "Maumere",
  "Mataram",
  "Mbay",
  "Negara",
  "Praya",
  "Raba",
  "Ruteng",
  "Selong",
  "Singaraja",
  "Soe",
  "Sumbawa Besar",
  "Tabanan",
  "Taliwang",
  "Tambolaka",
  "Tanjung",
  "Waibakul",
  "Waikabubak",
  "Waingapu",
  "Denpasar",
  "Negara,Bali",
  "Singaraja",
  "Tabanan",
  "Bangli"
];
},{}],"node_modules/faker/lib/locales/id_ID/address/city.js":[function(require,module,exports) {
module["exports"] = [
  "#{city_name}"
];

},{}],"node_modules/faker/lib/locales/id_ID/address/street_prefix.js":[function(require,module,exports) {
module["exports"] = [
  "Ds.",
  "Dk.",
  "Gg.",
  "Jln.",
  "Jr.",
  "Kpg.",
  "Ki.",
  "Psr."
];
},{}],"node_modules/faker/lib/locales/id_ID/address/street_name.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_prefix} #{Name.first_name}",
  "#{street_prefix} #{Name.last_name}"
];
},{}],"node_modules/faker/lib/locales/id_ID/address/street_address.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_name} no #{building_number}"
];
},{}],"node_modules/faker/lib/locales/id_ID/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "Indonesia"
];

},{}],"node_modules/faker/lib/locales/id_ID/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.building_number = require("./building_number");
address.postcode = require("./postcode");
address.state = require("./state");
address.city_name = require("./city_name");
address.city = require("./city");
address.street_prefix = require("./street_prefix");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./building_number":"node_modules/faker/lib/locales/id_ID/address/building_number.js","./postcode":"node_modules/faker/lib/locales/id_ID/address/postcode.js","./state":"node_modules/faker/lib/locales/id_ID/address/state.js","./city_name":"node_modules/faker/lib/locales/id_ID/address/city_name.js","./city":"node_modules/faker/lib/locales/id_ID/address/city.js","./street_prefix":"node_modules/faker/lib/locales/id_ID/address/street_prefix.js","./street_name":"node_modules/faker/lib/locales/id_ID/address/street_name.js","./street_address":"node_modules/faker/lib/locales/id_ID/address/street_address.js","./default_country":"node_modules/faker/lib/locales/id_ID/address/default_country.js"}],"node_modules/faker/lib/locales/id_ID/company/prefix.js":[function(require,module,exports) {
module["exports"] = [
  "PT",
  "CV",
  "UD",
  "PD",
  "Perum"
];
},{}],"node_modules/faker/lib/locales/id_ID/company/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "(Persero) Tbk",
  "Tbk"
];
},{}],"node_modules/faker/lib/locales/id_ID/company/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{prefix} #{Name.last_name}",
  "#{Name.last_name} #{suffix}",
  "#{prefix} #{Name.last_name} #{suffix}"
];

},{}],"node_modules/faker/lib/locales/id_ID/company/index.js":[function(require,module,exports) {
var company = {};
module['exports'] = company;
company.prefix = require("./prefix");
company.suffix = require("./suffix");
company.name = require("./name");

},{"./prefix":"node_modules/faker/lib/locales/id_ID/company/prefix.js","./suffix":"node_modules/faker/lib/locales/id_ID/company/suffix.js","./name":"node_modules/faker/lib/locales/id_ID/company/name.js"}],"node_modules/faker/lib/locales/id_ID/internet/free_email.js":[function(require,module,exports) {
module["exports"] = [
  'gmail.com',
  'yahoo.com',
  'gmail.co.id',
  'yahoo.co.id'
];
},{}],"node_modules/faker/lib/locales/id_ID/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "com",
  "net",
  "org",
  "asia",
  "tv",
  "biz",
  "info",
  "in",
  "name",
  "co",
  "ac.id",
  "sch.id",
  "go.id",
  "mil.id",
  "co.id",
  "or.id",
  "web.id",
  "my.id",
  "biz.id",
  "desa.id"
];
},{}],"node_modules/faker/lib/locales/id_ID/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.free_email = require("./free_email");
internet.domain_suffix = require("./domain_suffix");

},{"./free_email":"node_modules/faker/lib/locales/id_ID/internet/free_email.js","./domain_suffix":"node_modules/faker/lib/locales/id_ID/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/id_ID/date/month.js":[function(require,module,exports) {
module["exports"] = {
  wide: [
    "Januari",
    "Februari",
    "Maret",
    "April",
    "Mei",
    "Juni",
    "Juli",
    "Agustus",
    "September",
    "Oktober",
    "November",
    "Desember"
  ],
  wide_context: [
    "Januari",
    "Februari",
    "Maret",
    "April",
    "Mei",
    "Juni",
    "Juli",
    "Agustus",
    "September",
    "Oktober",
    "November",
    "Desember"
  ],
  abbr: [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "Mei",
    "Jun",
    "Jul",
    "Ags",
    "Sep",
    "Okt",
    "Nov",
    "Des"
  ],
  abbr_context: [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "Mei",
    "Jun",
    "Jul",
    "Ags",
    "Sep",
    "Okt",
    "Nov",
    "Des"
  ]
};

},{}],"node_modules/faker/lib/locales/id_ID/date/weekday.js":[function(require,module,exports) {
module["exports"] = {
  wide: [
    "Minggu",
    "Senin",
    "Selasa",
    "Rabu",
    "Kamis",
    "Jumat",
    "Sabtu"
  ],
  wide_context: [
    "Minggu",
    "Senin",
    "Selasa",
    "Rabu",
    "Kamis",
    "Jumat",
    "Sabtu"
  ],
  abbr: [
    "Min",
    "Sen",
    "Sel",
    "Rab",
    "Kam",
    "Jum",
    "Sab"
  ],
  abbr_context: [
    "Min",
    "Sen",
    "Sel",
    "Rab",
    "Kam",
    "Jum",
    "Sab"
  ]
};

},{}],"node_modules/faker/lib/locales/id_ID/date/index.js":[function(require,module,exports) {
var date = {};
module["exports"] = date;
date.month = require("./month");
date.weekday = require("./weekday");

},{"./month":"node_modules/faker/lib/locales/id_ID/date/month.js","./weekday":"node_modules/faker/lib/locales/id_ID/date/weekday.js"}],"node_modules/faker/lib/locales/id_ID/name/male_first_name.js":[function(require,module,exports) {
module["exports"] = [
  "Abyasa",
  "Ade",
  "Adhiarja",
  "Adiarja",
  "Adika",
  "Adikara",
  "Adinata",
  "Aditya",
  "Agus",
  "Ajiman",
  "Ajimat",
  "Ajimin",
  "Ajiono",
  "Akarsana",
  "Alambana",
  "Among",
  "Anggabaya",
  "Anom",
  "Argono",
  "Aris",
  "Arta",
  "Artanto",
  "Artawan",
  "Arsipatra",
  "Asirwada",
  "Asirwanda",
  "Aslijan",
  "Asmadi",
  "Asman",
  "Asmianto",
  "Asmuni",
  "Aswani",
  "Atma",
  "Atmaja",
  "Bagas",
  "Bagiya",
  "Bagus",
  "Bagya",
  "Bahuraksa",
  "Bahuwarna",
  "Bahuwirya",
  "Bajragin",
  "Bakda",
  "Bakiadi",
  "Bakianto",
  "Bakidin",
  "Bakijan",
  "Bakiman",
  "Bakiono",
  "Bakti",
  "Baktiadi",
  "Baktianto",
  "Baktiono",
  "Bala",
  "Balamantri",
  "Balangga",
  "Balapati",
  "Balidin",
  "Balijan",
  "Bambang",
  "Banara",
  "Banawa",
  "Banawi",
  "Bancar",
  "Budi",
  "Cagak",
  "Cager",
  "Cahyadi",
  "Cahyanto",
  "Cahya",
  "Cahyo",
  "Cahyono",
  "Caket",
  "Cakrabirawa",
  "Cakrabuana",
  "Cakrajiya",
  "Cakrawala",
  "Cakrawangsa",
  "Candra",
  "Chandra",
  "Candrakanta",
  "Capa",
  "Caraka",
  "Carub",
  "Catur",
  "Caturangga",
  "Cawisadi",
  "Cawisono",
  "Cawuk",
  "Cayadi",
  "Cecep",
  "Cemani",
  "Cemeti",
  "Cemplunk",
  "Cengkal",
  "Cengkir",
  "Dacin",
  "Dadap",
  "Dadi",
  "Dagel",
  "Daliman",
  "Dalimin",
  "Daliono",
  "Damar",
  "Damu",
  "Danang",
  "Daniswara",
  "Danu",
  "Danuja",
  "Dariati",
  "Darijan",
  "Darimin",
  "Darmaji",
  "Darman",
  "Darmana",
  "Darmanto",
  "Darsirah",
  "Dartono",
  "Daru",
  "Daruna",
  "Daryani",
  "Dasa",
  "Digdaya",
  "Dimas",
  "Dimaz",
  "Dipa",
  "Dirja",
  "Drajat",
  "Dwi",
  "Dono",
  "Dodo",
  "Edi",
  "Eka",
  "Elon",
  "Eluh",
  "Eman",
  "Emas",
  "Embuh",
  "Emong",
  "Empluk",
  "Endra",
  "Enteng",
  "Estiawan",
  "Estiono",
  "Eko",
  "Edi",
  "Edison",
  "Edward",
  "Elvin",
  "Erik",
  "Emil",
  "Ega",
  "Emin",
  "Eja",
  "Gada",
  "Gadang",
  "Gaduh",
  "Gaiman",
  "Galak",
  "Galang",
  "Galar",
  "Galih",
  "Galiono",
  "Galuh",
  "Galur",
  "Gaman",
  "Gamani",
  "Gamanto",
  "Gambira",
  "Gamblang",
  "Ganda",
  "Gandewa",
  "Gandi",
  "Gandi",
  "Ganep",
  "Gangsa",
  "Gangsar",
  "Ganjaran",
  "Gantar",
  "Gara",
  "Garan",
  "Garang",
  "Garda",
  "Gatot",
  "Gatra",
  "Gilang",
  "Galih",
  "Ghani",
  "Gading",
  "Hairyanto",
  "Hardana",
  "Hardi",
  "Harimurti",
  "Harja",
  "Harjasa",
  "Harjaya",
  "Harjo",
  "Harsana",
  "Harsanto",
  "Harsaya",
  "Hartaka",
  "Hartana",
  "Harto",
  "Hasta",
  "Heru",
  "Himawan",
  "Hadi",
  "Halim",
  "Hasim",
  "Hasan",
  "Hendra",
  "Hendri",
  "Heryanto",
  "Hamzah",
  "Hari",
  "Imam",
  "Indra",
  "Irwan",
  "Irsad",
  "Ikhsan",
  "Irfan",
  "Ian",
  "Ibrahim",
  "Ibrani",
  "Ismail",
  "Irnanto",
  "Ilyas",
  "Ibun",
  "Ivan",
  "Ikin",
  "Ihsan",
  "Jabal",
  "Jaeman",
  "Jaga",
  "Jagapati",
  "Jagaraga",
  "Jail",
  "Jaiman",
  "Jaka",
  "Jarwa",
  "Jarwadi",
  "Jarwi",
  "Jasmani",
  "Jaswadi",
  "Jati",
  "Jatmiko",
  "Jaya",
  "Jayadi",
  "Jayeng",
  "Jinawi",
  "Jindra",
  "Joko",
  "Jumadi",
  "Jumari",
  "Jamal",
  "Jamil",
  "Jais",
  "Jefri",
  "Johan",
  "Jono",
  "Kacung",
  "Kajen",
  "Kambali",
  "Kamidin",
  "Kariman",
  "Karja",
  "Karma",
  "Karman",
  "Karna",
  "Karsa",
  "Karsana",
  "Karta",
  "Kasiran",
  "Kasusra",
  "Kawaca",
  "Kawaya",
  "Kayun",
  "Kemba",
  "Kenari",
  "Kenes",
  "Kuncara",
  "Kunthara",
  "Kusuma",
  "Kadir",
  "Kala",
  "Kalim",
  "Kurnia",
  "Kanda",
  "Kardi",
  "Karya",
  "Kasim",
  "Kairav",
  "Kenzie",
  "Kemal",
  "Kamal",
  "Koko",
  "Labuh",
  "Laksana",
  "Lamar",
  "Lanang",
  "Langgeng",
  "Lanjar",
  "Lantar",
  "Lega",
  "Legawa",
  "Lembah",
  "Liman",
  "Limar",
  "Luhung",
  "Lukita",
  "Luluh",
  "Lulut",
  "Lurhur",
  "Luwar",
  "Luwes",
  "Latif",
  "Lasmanto",
  "Lukman",
  "Luthfi",
  "Leo",
  "Luis",
  "Lutfan",
  "Lasmono",
  "Laswi",
  "Mahesa",
  "Makara",
  "Makuta",
  "Manah",
  "Maras",
  "Margana",
  "Mariadi",
  "Marsudi",
  "Martaka",
  "Martana",
  "Martani",
  "Marwata",
  "Maryadi",
  "Maryanto",
  "Mitra",
  "Mujur",
  "Mulya",
  "Mulyanto",
  "Mulyono",
  "Mumpuni",
  "Muni",
  "Mursita",
  "Murti",
  "Mustika",
  "Maman",
  "Mahmud",
  "Mahdi",
  "Mahfud",
  "Malik",
  "Muhammad",
  "Mustofa",
  "Marsito",
  "Mursinin",
  "Nalar",
  "Naradi",
  "Nardi",
  "Niyaga",
  "Nrima",
  "Nugraha",
  "Nyana",
  "Narji",
  "Nasab",
  "Nasrullah",
  "Nasim",
  "Najib",
  "Najam",
  "Nyoman",
  "Olga",
  "Ozy",
  "Omar",
  "Opan",
  "Oskar",
  "Oman",
  "Okto",
  "Okta",
  "Opung",
  "Paiman",
  "Panca",
  "Pangeran",
  "Pangestu",
  "Pardi",
  "Parman",
  "Perkasa",
  "Praba",
  "Prabu",
  "Prabawa",
  "Prabowo",
  "Prakosa",
  "Pranata",
  "Pranawa",
  "Prasetya",
  "Prasetyo",
  "Prayitna",
  "Prayoga",
  "Prayogo",
  "Purwadi",
  "Purwa",
  "Purwanto",
  "Panji",
  "Pandu",
  "Paiman",
  "Prima",
  "Putu",
  "Raden",
  "Raditya",
  "Raharja",
  "Rama",
  "Rangga",
  "Reksa",
  "Respati",
  "Rusman",
  "Rosman",
  "Rahmat",
  "Rahman",
  "Rendy",
  "Reza",
  "Rizki",
  "Ridwan",
  "Rudi",
  "Raden",
  "Radit",
  "Radika",
  "Rafi",
  "Rafid",
  "Raihan",
  "Salman",
  "Saadat",
  "Saiful",
  "Surya",
  "Slamet",
  "Samsul",
  "Soleh",
  "Simon",
  "Sabar",
  "Sabri",
  "Sidiq",
  "Satya",
  "Setya",
  "Saka",
  "Sakti",
  "Taswir",
  "Tedi",
  "Teddy",
  "Taufan",
  "Taufik",
  "Tomi",
  "Tasnim",
  "Teguh",
  "Tasdik",
  "Timbul",
  "Tirta",
  "Tirtayasa",
  "Tri",
  "Tugiman",
  "Umar",
  "Usman",
  "Uda",
  "Umay",
  "Unggul",
  "Utama",
  "Umaya",
  "Upik",
  "Viktor",
  "Vino",
  "Vinsen",
  "Vero",
  "Vega",
  "Viman",
  "Virman",
  "Wahyu",
  "Wira",
  "Wisnu",
  "Wadi",
  "Wardi",
  "Warji",
  "Waluyo",
  "Wakiman",
  "Wage",
  "Wardaya",
  "Warsa",
  "Warsita",
  "Warta",
  "Wasis",
  "Wawan",
  "Xanana",
  "Yahya",
  "Yusuf",
  "Yosef",
  "Yono",
  "Yoga"
];
},{}],"node_modules/faker/lib/locales/id_ID/name/male_last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Adriansyah",
  "Ardianto",
  "Anggriawan",
  "Budiman",
  "Budiyanto",
  "Damanik",
  "Dongoran",
  "Dabukke",
  "Firmansyah",
  "Firgantoro",
  "Gunarto",
  "Gunawan",
  "Hardiansyah",
  "Habibi",
  "Hakim",
  "Halim",
  "Haryanto",
  "Hidayat",
  "Hidayanto",
  "Hutagalung",
  "Hutapea",
  "Hutasoit",
  "Irawan",
  "Iswahyudi",
  "Kuswoyo",
  "Januar",
  "Jailani",
  "Kurniawan",
  "Kusumo",
  "Latupono",
  "Lazuardi",
  "Maheswara",
  "Mahendra",
  "Mustofa",
  "Mansur",
  "Mandala",
  "Megantara",
  "Maulana",
  "Maryadi",
  "Mangunsong",
  "Manullang",
  "Marpaung",
  "Marbun",
  "Narpati",
  "Natsir",
  "Nugroho",
  "Najmudin",
  "Nashiruddin",
  "Nainggolan",
  "Nababan",
  "Napitupulu",
  "Pangestu",
  "Putra",
  "Pranowo",
  "Prabowo",
  "Pratama",
  "Prasetya",
  "Prasetyo",
  "Pradana",
  "Pradipta",
  "Prakasa",
  "Permadi",
  "Prasasta",
  "Prayoga",
  "Ramadan",
  "Rajasa",
  "Rajata",
  "Saptono",
  "Santoso",
  "Saputra",
  "Saefullah",
  "Setiawan",
  "Suryono",
  "Suwarno",
  "Siregar",
  "Sihombing",
  "Salahudin",
  "Sihombing",
  "Samosir",
  "Saragih",
  "Sihotang",
  "Simanjuntak",
  "Sinaga",
  "Simbolon",
  "Sitompul",
  "Sitorus",
  "Sirait",
  "Siregar",
  "Situmorang",
  "Tampubolon",
  "Thamrin",
  "Tamba",
  "Tarihoran",
  "Utama",
  "Uwais",
  "Wahyudin",
  "Waluyo",
  "Wibowo",
  "Winarno",
  "Wibisono",
  "Wijaya",
  "Widodo",
  "Wacana",
  "Waskita",
  "Wasita",
  "Zulkarnain"
];
},{}],"node_modules/faker/lib/locales/id_ID/name/female_first_name.js":[function(require,module,exports) {
module["exports"] = [
  "Ade",
  "Agnes",
  "Ajeng",
  "Amalia",
  "Anita",
  "Ayu",
  "Aisyah",
  "Ana",
  "Ami",
  "Ani",
  "Azalea",
  "Aurora",
  "Alika",
  "Anastasia",
  "Amelia",
  "Almira",
  "Bella",
  "Betania",
  "Belinda",
  "Citra",
  "Cindy",
  "Chelsea",
  "Clara",
  "Cornelia",
  "Cinta",
  "Cinthia",
  "Ciaobella",
  "Cici",
  "Carla",
  "Calista",
  "Devi",
  "Dewi","Dian",
  "Diah",
  "Diana",
  "Dina",
  "Dinda",
  "Dalima",
  "Eka",
  "Eva",
  "Endah",
  "Elisa",
  "Eli",
  "Ella",
  "Ellis",
  "Elma",
  "Elvina",
  "Fitria",
  "Fitriani",
  "Febi",
  "Faizah",
  "Farah",
  "Farhunnisa",
  "Fathonah",
  "Gabriella",
  "Gasti",
  "Gawati",
  "Genta",
  "Ghaliyati",
  "Gina",
  "Gilda",
  "Halima",
  "Hesti",
  "Hilda",
  "Hafshah",
  "Hamima",
  "Hana",
  "Hani",
  "Hasna",
  "Humaira",
  "Ika",
  "Indah",
  "Intan",
  "Irma",
  "Icha",
  "Ida",
  "Ifa",
  "Ilsa",
  "Ina",
  "Ira",
  "Iriana",
  "Jamalia",
  "Janet",
  "Jane",
  "Julia",
  "Juli",
  "Jessica",
  "Jasmin",
  "Jelita",
  "Kamaria",
  "Kamila",
  "Kani",
  "Karen",
  "Karimah",
  "Kartika",
  "Kasiyah",
  "Keisha",
  "Kezia",
  "Kiandra",
  "Kayla",
  "Kania",
  "Lala",
  "Lalita",
  "Latika",
  "Laila",
  "Laras",
  "Lidya",
  "Lili",
  "Lintang",
  "Maria",
  "Mala",
  "Maya",
  "Maida",
  "Maimunah",
  "Melinda",
  "Mila",
  "Mutia",
  "Michelle",
  "Malika",
  "Nadia",
  "Nadine",
  "Nabila",
  "Natalia",
  "Novi",
  "Nova",
  "Nurul",
  "Nilam",
  "Najwa",
  "Olivia",
  "Ophelia",
  "Oni",
  "Oliva",
  "Padma",
  "Putri",
  "Paramita",
  "Paris",
  "Patricia",
  "Paulin",
  "Puput",
  "Puji",
  "Pia",
  "Puspa",
  "Puti",
  "Putri",
  "Padmi",
  "Qori",
  "Queen",
  "Ratih",
  "Ratna",
  "Restu",
  "Rini",
  "Rika",
  "Rina",
  "Rahayu",
  "Rahmi",
  "Rachel",
  "Rahmi",
  "Raisa",
  "Raina",
  "Sarah",
  "Sari",
  "Siti",
  "Siska",
  "Suci",
  "Syahrini",
  "Septi",
  "Sadina",
  "Safina",
  "Sakura",
  "Salimah",
  "Salwa",
  "Salsabila",
  "Samiah",
  "Shania",
  "Sabrina",
  "Silvia",
  "Shakila",
  "Talia",
  "Tami",
  "Tira",
  "Tiara",
  "Titin",
  "Tania",
  "Tina",
  "Tantri",
  "Tari",
  "Titi",
  "Uchita",
  "Unjani",
  "Ulya",
  "Uli",
  "Ulva",
  "Umi",
  "Usyi",
  "Vanya",
  "Vanesa",
  "Vivi",
  "Vera",
  "Vicky",
  "Victoria",
  "Violet",
  "Winda",
  "Widya",
  "Wulan",
  "Wirda",
  "Wani",
  "Yani",
  "Yessi",
  "Yulia",
  "Yuliana",
  "Yuni",
  "Yunita",
  "Yance",
  "Zahra",
  "Zalindra",
  "Zaenab",
  "Zulfa",
  "Zizi",
  "Zulaikha",
  "Zamira",
  "Zelda",
  "Zelaya"
];
},{}],"node_modules/faker/lib/locales/id_ID/name/female_last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Agustina",
  "Andriani",
  "Anggraini",
  "Aryani",
  "Astuti",
  "Fujiati",
  "Farida",
  "Handayani",
  "Hassanah",
  "Hartati",
  "Hasanah",
  "Haryanti",
  "Hariyah",
  "Hastuti",
  "Halimah",
  "Kusmawati",
  "Kuswandari",
  "Laksmiwati",
  "Laksita",
  "Lestari",
  "Lailasari",
  "Mandasari",
  "Mardhiyah",
  "Mayasari",
  "Melani",
  "Mulyani",
  "Maryati",
  "Nurdiyanti",
  "Novitasari",
  "Nuraini",
  "Nasyidah",
  "Nasyiah",
  "Namaga",
  "Palastri",
  "Pudjiastuti",
  "Puspasari",
  "Puspita",
  "Purwanti",
  "Pratiwi",
  "Purnawati",
  "Pertiwi",
  "Permata",
  "Prastuti",
  "Padmasari",
  "Rahmawati",
  "Rahayu",
  "Riyanti",
  "Rahimah",
  "Suartini",
  "Sudiati",
  "Suryatmi",
  "Susanti",
  "Safitri",
  "Oktaviani",
  "Utami",
  "Usamah",
  "Usada",
  "Uyainah",
  "Yuniar",
  "Yuliarti",
  "Yulianti",
  "Yolanda",
  "Wahyuni",
  "Wijayanti",
  "Widiastuti",
  "Winarsih",
  "Wulandari",
  "Wastuti",
  "Zulaika"
];
},{}],"node_modules/faker/lib/locales/id_ID/name/prefix.js":[function(require,module,exports) {
module["exports"] = [];
},{}],"node_modules/faker/lib/locales/id_ID/name/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "S.Ked",
  "S.Gz",
  "S.Pt",
  "S.IP",
  "S.E.I",
  "S.E.",
  "S.Kom",
  "S.H.",
  "S.T.",
  "S.Pd",
  "S.Psi",
  "S.I.Kom",
  "S.Sos",
  "S.Farm",
  "M.M.",
  "M.Kom.",
  "M.TI.",
  "M.Pd",
  "M.Farm",
  "M.Ak"
];
},{}],"node_modules/faker/lib/locales/id_ID/name/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{male_first_name} #{male_last_name}",
  "#{male_last_name} #{male_first_name}",
  "#{male_first_name} #{male_first_name} #{male_last_name}",
  "#{female_first_name} #{female_last_name}",
  "#{female_first_name} #{male_last_name}",
  "#{female_last_name} #{female_first_name}",
  "#{female_first_name} #{female_first_name} #{female_last_name}"
];

},{}],"node_modules/faker/lib/locales/id_ID/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.male_first_name = require("./male_first_name");
name.male_last_name = require("./male_last_name");
name.female_first_name = require("./female_first_name");
name.female_last_name = require("./female_last_name");
name.prefix = require("./prefix");
name.suffix = require("./suffix");
name.name = require("./name");

},{"./male_first_name":"node_modules/faker/lib/locales/id_ID/name/male_first_name.js","./male_last_name":"node_modules/faker/lib/locales/id_ID/name/male_last_name.js","./female_first_name":"node_modules/faker/lib/locales/id_ID/name/female_first_name.js","./female_last_name":"node_modules/faker/lib/locales/id_ID/name/female_last_name.js","./prefix":"node_modules/faker/lib/locales/id_ID/name/prefix.js","./suffix":"node_modules/faker/lib/locales/id_ID/name/suffix.js","./name":"node_modules/faker/lib/locales/id_ID/name/name.js"}],"node_modules/faker/lib/locales/id_ID/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "02# #### ###",
  "02## #### ###",
  "03## #### ###",
  "04## #### ###",
  "05## #### ###",
  "06## #### ###",
  "07## #### ###",
  "09## #### ###",
  "02# #### ####",
  "02## #### ####",
  "03## #### ####",
  "04## #### ####",
  "05## #### ####",
  "06## #### ####",
  "07## #### ####",
  "09## #### ####",
  "08## ### ###",
  "08## #### ###",
  "08## #### ####",
  "(+62) 8## ### ###",
  "(+62) 2# #### ###",
  "(+62) 2## #### ###",
  "(+62) 3## #### ###",
  "(+62) 4## #### ###",
  "(+62) 5## #### ###",
  "(+62) 6## #### ###",
  "(+62) 7## #### ###",
  "(+62) 8## #### ###",
  "(+62) 9## #### ###",
  "(+62) 2# #### ####",
  "(+62) 2## #### ####",
  "(+62) 3## #### ####",
  "(+62) 4## #### ####",
  "(+62) 5## #### ####",
  "(+62) 6## #### ####",
  "(+62) 7## #### ####",
  "(+62) 8## #### ####",
  "(+62) 9## #### ####"
];
},{}],"node_modules/faker/lib/locales/id_ID/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/id_ID/phone_number/formats.js"}],"node_modules/faker/lib/locales/id_ID/index.js":[function(require,module,exports) {
var id = {};
module['exports'] = id;
id.title = "Indonesia";
id.address = require("./address");
id.company = require("./company");
id.internet = require("./internet");
id.date = require("./date");
id.name = require("./name");
id.phone_number = require("./phone_number");

},{"./address":"node_modules/faker/lib/locales/id_ID/address/index.js","./company":"node_modules/faker/lib/locales/id_ID/company/index.js","./internet":"node_modules/faker/lib/locales/id_ID/internet/index.js","./date":"node_modules/faker/lib/locales/id_ID/date/index.js","./name":"node_modules/faker/lib/locales/id_ID/name/index.js","./phone_number":"node_modules/faker/lib/locales/id_ID/phone_number/index.js"}],"node_modules/faker/lib/locales/it/address/city_prefix.js":[function(require,module,exports) {
module["exports"] = [
  "San",
  "Borgo",
  "Sesto",
  "Quarto",
  "Settimo"
];

},{}],"node_modules/faker/lib/locales/it/address/city_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "a mare",
  "lido",
  "ligure",
  "del friuli",
  "salentino",
  "calabro",
  "veneto",
  "nell'emilia",
  "umbro",
  "laziale",
  "terme",
  "sardo"
];

},{}],"node_modules/faker/lib/locales/it/address/country.js":[function(require,module,exports) {
module["exports"] = [
  "Afghanistan",
  "Albania",
  "Algeria",
  "American Samoa",
  "Andorra",
  "Angola",
  "Anguilla",
  "Antartide (territori a sud del 60° parallelo)",
  "Antigua e Barbuda",
  "Argentina",
  "Armenia",
  "Aruba",
  "Australia",
  "Austria",
  "Azerbaijan",
  "Bahamas",
  "Bahrain",
  "Bangladesh",
  "Barbados",
  "Bielorussia",
  "Belgio",
  "Belize",
  "Benin",
  "Bermuda",
  "Bhutan",
  "Bolivia",
  "Bosnia e Herzegovina",
  "Botswana",
  "Bouvet Island (Bouvetoya)",
  "Brasile",
  "Territorio dell'arcipelago indiano",
  "Isole Vergini Britanniche",
  "Brunei Darussalam",
  "Bulgaria",
  "Burkina Faso",
  "Burundi",
  "Cambogia",
  "Cameroon",
  "Canada",
  "Capo Verde",
  "Isole Cayman",
  "Repubblica Centrale Africana",
  "Chad",
  "Cile",
  "Cina",
  "Isola di Pasqua",
  "Isola di Cocos (Keeling)",
  "Colombia",
  "Comoros",
  "Congo",
  "Isole Cook",
  "Costa Rica",
  "Costa d'Avorio",
  "Croazia",
  "Cuba",
  "Cipro",
  "Repubblica Ceca",
  "Danimarca",
  "Gibuti",
  "Repubblica Dominicana",
  "Equador",
  "Egitto",
  "El Salvador",
  "Guinea Equatoriale",
  "Eritrea",
  "Estonia",
  "Etiopia",
  "Isole Faroe",
  "Isole Falkland (Malvinas)",
  "Fiji",
  "Finlandia",
  "Francia",
  "Guyana Francese",
  "Polinesia Francese",
  "Territori Francesi del sud",
  "Gabon",
  "Gambia",
  "Georgia",
  "Germania",
  "Ghana",
  "Gibilterra",
  "Grecia",
  "Groenlandia",
  "Grenada",
  "Guadalupa",
  "Guam",
  "Guatemala",
  "Guernsey",
  "Guinea",
  "Guinea-Bissau",
  "Guyana",
  "Haiti",
  "Heard Island and McDonald Islands",
  "Città del Vaticano",
  "Honduras",
  "Hong Kong",
  "Ungheria",
  "Islanda",
  "India",
  "Indonesia",
  "Iran",
  "Iraq",
  "Irlanda",
  "Isola di Man",
  "Israele",
  "Italia",
  "Giamaica",
  "Giappone",
  "Jersey",
  "Giordania",
  "Kazakhstan",
  "Kenya",
  "Kiribati",
  "Korea",
  "Kuwait",
  "Republicca Kirgiza",
  "Repubblica del Laos",
  "Latvia",
  "Libano",
  "Lesotho",
  "Liberia",
  "Libyan Arab Jamahiriya",
  "Liechtenstein",
  "Lituania",
  "Lussemburgo",
  "Macao",
  "Macedonia",
  "Madagascar",
  "Malawi",
  "Malesia",
  "Maldive",
  "Mali",
  "Malta",
  "Isole Marshall",
  "Martinica",
  "Mauritania",
  "Mauritius",
  "Mayotte",
  "Messico",
  "Micronesia",
  "Moldova",
  "Principato di Monaco",
  "Mongolia",
  "Montenegro",
  "Montserrat",
  "Marocco",
  "Mozambico",
  "Myanmar",
  "Namibia",
  "Nauru",
  "Nepal",
  "Antille Olandesi",
  "Olanda",
  "Nuova Caledonia",
  "Nuova Zelanda",
  "Nicaragua",
  "Niger",
  "Nigeria",
  "Niue",
  "Isole Norfolk",
  "Northern Mariana Islands",
  "Norvegia",
  "Oman",
  "Pakistan",
  "Palau",
  "Palestina",
  "Panama",
  "Papua Nuova Guinea",
  "Paraguay",
  "Peru",
  "Filippine",
  "Pitcairn Islands",
  "Polonia",
  "Portogallo",
  "Porto Rico",
  "Qatar",
  "Reunion",
  "Romania",
  "Russia",
  "Rwanda",
  "San Bartolomeo",
  "Sant'Elena",
  "Saint Kitts and Nevis",
  "Saint Lucia",
  "Saint Martin",
  "Saint Pierre and Miquelon",
  "Saint Vincent and the Grenadines",
  "Samoa",
  "San Marino",
  "Sao Tome and Principe",
  "Arabia Saudita",
  "Senegal",
  "Serbia",
  "Seychelles",
  "Sierra Leone",
  "Singapore",
  "Slovenia",
  "Isole Solomon",
  "Somalia",
  "Sud Africa",
  "Georgia del sud e South Sandwich Islands",
  "Spagna",
  "Sri Lanka",
  "Sudan",
  "Suriname",
  "Svalbard & Jan Mayen Islands",
  "Swaziland",
  "Svezia",
  "Svizzera",
  "Siria",
  "Taiwan",
  "Tajikistan",
  "Tanzania",
  "Tailandia",
  "Timor-Leste",
  "Togo",
  "Tokelau",
  "Tonga",
  "Trinidad e Tobago",
  "Tunisia",
  "Turchia",
  "Turkmenistan",
  "Isole di Turks and Caicos",
  "Tuvalu",
  "Uganda",
  "Ucraina",
  "Emirati Arabi Uniti",
  "Regno Unito",
  "Stati Uniti d'America",
  "United States Minor Outlying Islands",
  "Isole Vergini Statunitensi",
  "Uruguay",
  "Uzbekistan",
  "Vanuatu",
  "Venezuela",
  "Vietnam",
  "Wallis and Futuna",
  "Western Sahara",
  "Yemen",
  "Zambia",
  "Zimbabwe"
];

},{}],"node_modules/faker/lib/locales/it/address/building_number.js":[function(require,module,exports) {
module["exports"] = [
  "###",
  "##",
  "#"
];

},{}],"node_modules/faker/lib/locales/it/address/street_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "Piazza",
  "Strada",
  "Via",
  "Borgo",
  "Contrada",
  "Rotonda",
  "Incrocio"
];

},{}],"node_modules/faker/lib/locales/it/address/secondary_address.js":[function(require,module,exports) {
module["exports"] = [
  "Appartamento ##",
  "Piano #"
];

},{}],"node_modules/faker/lib/locales/it/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "#####"
];

},{}],"node_modules/faker/lib/locales/it/address/state.js":[function(require,module,exports) {
module["exports"] = [
  "Agrigento",
  "Alessandria",
  "Ancona",
  "Aosta",
  "Arezzo",
  "Ascoli Piceno",
  "Asti",
  "Avellino",
  "Bari",
  "Barletta-Andria-Trani",
  "Belluno",
  "Benevento",
  "Bergamo",
  "Biella",
  "Bologna",
  "Bolzano",
  "Brescia",
  "Brindisi",
  "Cagliari",
  "Caltanissetta",
  "Campobasso",
  "Carbonia-Iglesias",
  "Caserta",
  "Catania",
  "Catanzaro",
  "Chieti",
  "Como",
  "Cosenza",
  "Cremona",
  "Crotone",
  "Cuneo",
  "Enna",
  "Fermo",
  "Ferrara",
  "Firenze",
  "Foggia",
  "Forlì-Cesena",
  "Frosinone",
  "Genova",
  "Gorizia",
  "Grosseto",
  "Imperia",
  "Isernia",
  "La Spezia",
  "L'Aquila",
  "Latina",
  "Lecce",
  "Lecco",
  "Livorno",
  "Lodi",
  "Lucca",
  "Macerata",
  "Mantova",
  "Massa-Carrara",
  "Matera",
  "Messina",
  "Milano",
  "Modena",
  "Monza e della Brianza",
  "Napoli",
  "Novara",
  "Nuoro",
  "Olbia-Tempio",
  "Oristano",
  "Padova",
  "Palermo",
  "Parma",
  "Pavia",
  "Perugia",
  "Pesaro e Urbino",
  "Pescara",
  "Piacenza",
  "Pisa",
  "Pistoia",
  "Pordenone",
  "Potenza",
  "Prato",
  "Ragusa",
  "Ravenna",
  "Reggio Calabria",
  "Reggio Emilia",
  "Rieti",
  "Rimini",
  "Roma",
  "Rovigo",
  "Salerno",
  "Medio Campidano",
  "Sassari",
  "Savona",
  "Siena",
  "Siracusa",
  "Sondrio",
  "Taranto",
  "Teramo",
  "Terni",
  "Torino",
  "Ogliastra",
  "Trapani",
  "Trento",
  "Treviso",
  "Trieste",
  "Udine",
  "Varese",
  "Venezia",
  "Verbano-Cusio-Ossola",
  "Vercelli",
  "Verona",
  "Vibo Valentia",
  "Vicenza",
  "Viterbo"
];

},{}],"node_modules/faker/lib/locales/it/address/state_abbr.js":[function(require,module,exports) {
module["exports"] = [
  "AG",
  "AL",
  "AN",
  "AO",
  "AR",
  "AP",
  "AT",
  "AV",
  "BA",
  "BT",
  "BL",
  "BN",
  "BG",
  "BI",
  "BO",
  "BZ",
  "BS",
  "BR",
  "CA",
  "CL",
  "CB",
  "CI",
  "CE",
  "CT",
  "CZ",
  "CH",
  "CO",
  "CS",
  "CR",
  "KR",
  "CN",
  "EN",
  "FM",
  "FE",
  "FI",
  "FG",
  "FC",
  "FR",
  "GE",
  "GO",
  "GR",
  "IM",
  "IS",
  "SP",
  "AQ",
  "LT",
  "LE",
  "LC",
  "LI",
  "LO",
  "LU",
  "MC",
  "MN",
  "MS",
  "MT",
  "ME",
  "MI",
  "MO",
  "MB",
  "NA",
  "NO",
  "NU",
  "OT",
  "OR",
  "PD",
  "PA",
  "PR",
  "PV",
  "PG",
  "PU",
  "PE",
  "PC",
  "PI",
  "PT",
  "PN",
  "PZ",
  "PO",
  "RG",
  "RA",
  "RC",
  "RE",
  "RI",
  "RN",
  "RM",
  "RO",
  "SA",
  "VS",
  "SS",
  "SV",
  "SI",
  "SR",
  "SO",
  "TA",
  "TE",
  "TR",
  "TO",
  "OG",
  "TP",
  "TN",
  "TV",
  "TS",
  "UD",
  "VA",
  "VE",
  "VB",
  "VC",
  "VR",
  "VV",
  "VI",
  "VT"
];

},{}],"node_modules/faker/lib/locales/it/address/city.js":[function(require,module,exports) {
module["exports"] = [
  "#{city_prefix} #{Name.first_name} #{city_suffix}",
  "#{city_prefix} #{Name.first_name}",
  "#{Name.first_name} #{city_suffix}",
  "#{Name.last_name} #{city_suffix}"
];

},{}],"node_modules/faker/lib/locales/it/address/street_name.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_suffix} #{Name.first_name}",
  "#{street_suffix} #{Name.last_name}"
];

},{}],"node_modules/faker/lib/locales/it/address/street_address.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_name} #{building_number}",
  "#{street_name} #{building_number}, #{secondary_address}"
];

},{}],"node_modules/faker/lib/locales/it/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "Italia"
];

},{}],"node_modules/faker/lib/locales/it/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.city_prefix = require("./city_prefix");
address.city_suffix = require("./city_suffix");
address.country = require("./country");
address.building_number = require("./building_number");
address.street_suffix = require("./street_suffix");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.city = require("./city");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./city_prefix":"node_modules/faker/lib/locales/it/address/city_prefix.js","./city_suffix":"node_modules/faker/lib/locales/it/address/city_suffix.js","./country":"node_modules/faker/lib/locales/it/address/country.js","./building_number":"node_modules/faker/lib/locales/it/address/building_number.js","./street_suffix":"node_modules/faker/lib/locales/it/address/street_suffix.js","./secondary_address":"node_modules/faker/lib/locales/it/address/secondary_address.js","./postcode":"node_modules/faker/lib/locales/it/address/postcode.js","./state":"node_modules/faker/lib/locales/it/address/state.js","./state_abbr":"node_modules/faker/lib/locales/it/address/state_abbr.js","./city":"node_modules/faker/lib/locales/it/address/city.js","./street_name":"node_modules/faker/lib/locales/it/address/street_name.js","./street_address":"node_modules/faker/lib/locales/it/address/street_address.js","./default_country":"node_modules/faker/lib/locales/it/address/default_country.js"}],"node_modules/faker/lib/locales/it/company/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "SPA",
  "e figli",
  "Group",
  "s.r.l."
];

},{}],"node_modules/faker/lib/locales/it/company/noun.js":[function(require,module,exports) {
module["exports"] = [
  "Abilità",
  "Access",
  "Adattatore",
  "Algoritmo",
  "Alleanza",
  "Analizzatore",
  "Applicazione",
  "Approccio",
  "Architettura",
  "Archivio",
  "Intelligenza artificiale",
  "Array",
  "Attitudine",
  "Benchmark",
  "Capacità",
  "Sfida",
  "Circuito",
  "Collaborazione",
  "Complessità",
  "Concetto",
  "Conglomerato",
  "Contingenza",
  "Core",
  "Database",
  "Data-warehouse",
  "Definizione",
  "Emulazione",
  "Codifica",
  "Criptazione",
  "Firmware",
  "Flessibilità",
  "Previsione",
  "Frame",
  "framework",
  "Funzione",
  "Funzionalità",
  "Interfaccia grafica",
  "Hardware",
  "Help-desk",
  "Gerarchia",
  "Hub",
  "Implementazione",
  "Infrastruttura",
  "Iniziativa",
  "Installazione",
  "Set di istruzioni",
  "Interfaccia",
  "Soluzione internet",
  "Intranet",
  "Conoscenza base",
  "Matrici",
  "Matrice",
  "Metodologia",
  "Middleware",
  "Migrazione",
  "Modello",
  "Moderazione",
  "Monitoraggio",
  "Moratoria",
  "Rete",
  "Architettura aperta",
  "Sistema aperto",
  "Orchestrazione",
  "Paradigma",
  "Parallelismo",
  "Policy",
  "Portale",
  "Struttura di prezzo",
  "Prodotto",
  "Produttività",
  "Progetto",
  "Proiezione",
  "Protocollo",
  "Servizio clienti",
  "Software",
  "Soluzione",
  "Standardizzazione",
  "Strategia",
  "Struttura",
  "Successo",
  "Sovrastruttura",
  "Supporto",
  "Sinergia",
  "Task-force",
  "Finestra temporale",
  "Strumenti",
  "Utilizzazione",
  "Sito web",
  "Forza lavoro"
];

},{}],"node_modules/faker/lib/locales/it/company/descriptor.js":[function(require,module,exports) {
module["exports"] = [
  "adattiva",
  "avanzata",
  "migliorata",
  "assimilata",
  "automatizzata",
  "bilanciata",
  "centralizzata",
  "compatibile",
  "configurabile",
  "cross-platform",
  "decentralizzata",
  "digitalizzata",
  "distribuita",
  "piccola",
  "ergonomica",
  "esclusiva",
  "espansa",
  "estesa",
  "configurabile",
  "fondamentale",
  "orizzontale",
  "implementata",
  "innovativa",
  "integrata",
  "intuitiva",
  "inversa",
  "gestita",
  "obbligatoria",
  "monitorata",
  "multi-canale",
  "multi-laterale",
  "open-source",
  "operativa",
  "ottimizzata",
  "organica",
  "persistente",
  "polarizzata",
  "proattiva",
  "programmabile",
  "progressiva",
  "reattiva",
  "riallineata",
  "ricontestualizzata",
  "ridotta",
  "robusta",
  "sicura",
  "condivisibile",
  "stand-alone",
  "switchabile",
  "sincronizzata",
  "sinergica",
  "totale",
  "universale",
  "user-friendly",
  "versatile",
  "virtuale",
  "visionaria"
];

},{}],"node_modules/faker/lib/locales/it/company/adjective.js":[function(require,module,exports) {
module["exports"] = [
  "24 ore",
  "24/7",
  "terza generazione",
  "quarta generazione",
  "quinta generazione",
  "sesta generazione",
  "asimmetrica",
  "asincrona",
  "background",
  "bi-direzionale",
  "biforcata",
  "bottom-line",
  "coerente",
  "coesiva",
  "composita",
  "sensibile al contesto",
  "basta sul contesto",
  "basata sul contenuto",
  "dedicata",
  "didattica",
  "direzionale",
  "discreta",
  "dinamica",
  "eco-centrica",
  "esecutiva",
  "esplicita",
  "full-range",
  "globale",
  "euristica",
  "alto livello",
  "olistica",
  "omogenea",
  "ibrida",
  "impattante",
  "incrementale",
  "intangibile",
  "interattiva",
  "intermediaria",
  "locale",
  "logistica",
  "massimizzata",
  "metodica",
  "mission-critical",
  "mobile",
  "modulare",
  "motivazionale",
  "multimedia",
  "multi-tasking",
  "nazionale",
  "neutrale",
  "nextgeneration",
  "non-volatile",
  "object-oriented",
  "ottima",
  "ottimizzante",
  "radicale",
  "real-time",
  "reciproca",
  "regionale",
  "responsiva",
  "scalabile",
  "secondaria",
  "stabile",
  "statica",
  "sistematica",
  "sistemica",
  "tangibile",
  "terziaria",
  "uniforme",
  "valore aggiunto"
];

},{}],"node_modules/faker/lib/locales/it/company/bs_noun.js":[function(require,module,exports) {
module["exports"] = [
  "partnerships",
  "comunità",
  "ROI",
  "soluzioni",
  "e-services",
  "nicchie",
  "tecnologie",
  "contenuti",
  "supply-chains",
  "convergenze",
  "relazioni",
  "architetture",
  "interfacce",
  "mercati",
  "e-commerce",
  "sistemi",
  "modelli",
  "schemi",
  "reti",
  "applicazioni",
  "metriche",
  "e-business",
  "funzionalità",
  "esperienze",
  "webservices",
  "metodologie"
];

},{}],"node_modules/faker/lib/locales/it/company/bs_verb.js":[function(require,module,exports) {
module["exports"] = [
  "implementate",
  "utilizzo",
  "integrate",
  "ottimali",
  "evolutive",
  "abilitate",
  "reinventate",
  "aggregate",
  "migliorate",
  "incentivate",
  "monetizzate",
  "sinergizzate",
  "strategiche",
  "deploy",
  "marchi",
  "accrescitive",
  "target",
  "sintetizzate",
  "spedizioni",
  "massimizzate",
  "innovazione",
  "guida",
  "estensioni",
  "generate",
  "exploit",
  "transizionali",
  "matrici",
  "ricontestualizzate"
];

},{}],"node_modules/faker/lib/locales/it/company/bs_adjective.js":[function(require,module,exports) {
module["exports"] = [
  "valore aggiunto",
  "verticalizzate",
  "proattive",
  "forti",
  "rivoluzionari",
  "scalabili",
  "innovativi",
  "intuitivi",
  "strategici",
  "e-business",
  "mission-critical",
  "24/7",
  "globali",
  "B2B",
  "B2C",
  "granulari",
  "virtuali",
  "virali",
  "dinamiche",
  "magnetiche",
  "web",
  "interattive",
  "sexy",
  "back-end",
  "real-time",
  "efficienti",
  "front-end",
  "distributivi",
  "estensibili",
  "mondiali",
  "open-source",
  "cross-platform",
  "sinergiche",
  "out-of-the-box",
  "enterprise",
  "integrate",
  "di impatto",
  "wireless",
  "trasparenti",
  "next-generation",
  "cutting-edge",
  "visionari",
  "plug-and-play",
  "collaborative",
  "olistiche",
  "ricche"
];

},{}],"node_modules/faker/lib/locales/it/company/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{Name.last_name} #{suffix}",
  "#{Name.last_name}-#{Name.last_name} #{suffix}",
  "#{Name.last_name}, #{Name.last_name} e #{Name.last_name} #{suffix}"
];

},{}],"node_modules/faker/lib/locales/it/company/index.js":[function(require,module,exports) {
var company = {};
module['exports'] = company;
company.suffix = require("./suffix");
company.noun = require("./noun");
company.descriptor = require("./descriptor");
company.adjective = require("./adjective");
company.bs_noun = require("./bs_noun");
company.bs_verb = require("./bs_verb");
company.bs_adjective = require("./bs_adjective");
company.name = require("./name");

},{"./suffix":"node_modules/faker/lib/locales/it/company/suffix.js","./noun":"node_modules/faker/lib/locales/it/company/noun.js","./descriptor":"node_modules/faker/lib/locales/it/company/descriptor.js","./adjective":"node_modules/faker/lib/locales/it/company/adjective.js","./bs_noun":"node_modules/faker/lib/locales/it/company/bs_noun.js","./bs_verb":"node_modules/faker/lib/locales/it/company/bs_verb.js","./bs_adjective":"node_modules/faker/lib/locales/it/company/bs_adjective.js","./name":"node_modules/faker/lib/locales/it/company/name.js"}],"node_modules/faker/lib/locales/it/internet/free_email.js":[function(require,module,exports) {
module["exports"] = [
  "gmail.com",
  "yahoo.com",
  "hotmail.com",
  "email.it",
  "libero.it",
  "yahoo.it"
];

},{}],"node_modules/faker/lib/locales/it/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "com",
  "com",
  "com",
  "net",
  "org",
  "it",
  "it",
  "it"
];

},{}],"node_modules/faker/lib/locales/it/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.free_email = require("./free_email");
internet.domain_suffix = require("./domain_suffix");

},{"./free_email":"node_modules/faker/lib/locales/it/internet/free_email.js","./domain_suffix":"node_modules/faker/lib/locales/it/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/it/name/first_name.js":[function(require,module,exports) {
module["exports"] = [
  "Aaron",
  "Akira",
  "Alberto",
  "Alessandro",
  "Alighieri",
  "Amedeo",
  "Amos",
  "Anselmo",
  "Antonino",
  "Arcibaldo",
  "Armando",
  "Artes",
  "Audenico",
  "Ausonio",
  "Bacchisio",
  "Battista",
  "Bernardo",
  "Boris",
  "Caio",
  "Carlo",
  "Cecco",
  "Cirino",
  "Cleros",
  "Costantino",
  "Damiano",
  "Danny",
  "Davide",
  "Demian",
  "Dimitri",
  "Domingo",
  "Dylan",
  "Edilio",
  "Egidio",
  "Elio",
  "Emanuel",
  "Enrico",
  "Ercole",
  "Ermes",
  "Ethan",
  "Eusebio",
  "Evangelista",
  "Fabiano",
  "Ferdinando",
  "Fiorentino",
  "Flavio",
  "Fulvio",
  "Gabriele",
  "Gastone",
  "Germano",
  "Giacinto",
  "Gianantonio",
  "Gianleonardo",
  "Gianmarco",
  "Gianriccardo",
  "Gioacchino",
  "Giordano",
  "Giuliano",
  "Graziano",
  "Guido",
  "Harry",
  "Iacopo",
  "Ilario",
  "Ione",
  "Italo",
  "Jack",
  "Jari",
  "Joey",
  "Joseph",
  "Kai",
  "Kociss",
  "Laerte",
  "Lauro",
  "Leonardo",
  "Liborio",
  "Lorenzo",
  "Ludovico",
  "Maggiore",
  "Manuele",
  "Mariano",
  "Marvin",
  "Matteo",
  "Mauro",
  "Michael",
  "Mirco",
  "Modesto",
  "Muzio",
  "Nabil",
  "Nathan",
  "Nick",
  "Noah",
  "Odino",
  "Olo",
  "Oreste",
  "Osea",
  "Pablo",
  "Patrizio",
  "Piererminio",
  "Pierfrancesco",
  "Piersilvio",
  "Priamo",
  "Quarto",
  "Quirino",
  "Radames",
  "Raniero",
  "Renato",
  "Rocco",
  "Romeo",
  "Rosalino",
  "Rudy",
  "Sabatino",
  "Samuel",
  "Santo",
  "Sebastian",
  "Serse",
  "Silvano",
  "Sirio",
  "Tancredi",
  "Terzo",
  "Timoteo",
  "Tolomeo",
  "Trevis",
  "Ubaldo",
  "Ulrico",
  "Valdo",
  "Neri",
  "Vinicio",
  "Walter",
  "Xavier",
  "Yago",
  "Zaccaria",
  "Abramo",
  "Adriano",
  "Alan",
  "Albino",
  "Alessio",
  "Alighiero",
  "Amerigo",
  "Anastasio",
  "Antimo",
  "Antonio",
  "Arduino",
  "Aroldo",
  "Arturo",
  "Augusto",
  "Avide",
  "Baldassarre",
  "Bettino",
  "Bortolo",
  "Caligola",
  "Carmelo",
  "Celeste",
  "Ciro",
  "Costanzo",
  "Dante",
  "Danthon",
  "Davis",
  "Demis",
  "Dindo",
  "Domiziano",
  "Edipo",
  "Egisto",
  "Eliziario",
  "Emidio",
  "Enzo",
  "Eriberto",
  "Erminio",
  "Ettore",
  "Eustachio",
  "Fabio",
  "Fernando",
  "Fiorenzo",
  "Folco",
  "Furio",
  "Gaetano",
  "Gavino",
  "Gerlando",
  "Giacobbe",
  "Giancarlo",
  "Gianmaria",
  "Giobbe",
  "Giorgio",
  "Giulio",
  "Gregorio",
  "Hector",
  "Ian",
  "Ippolito",
  "Ivano",
  "Jacopo",
  "Jarno",
  "Joannes",
  "Joshua",
  "Karim",
  "Kris",
  "Lamberto",
  "Lazzaro",
  "Leone",
  "Lino",
  "Loris",
  "Luigi",
  "Manfredi",
  "Marco",
  "Marino",
  "Marzio",
  "Mattia",
  "Max",
  "Michele",
  "Mirko",
  "Moreno",
  "Nadir",
  "Nazzareno",
  "Nestore",
  "Nico",
  "Noel",
  "Odone",
  "Omar",
  "Orfeo",
  "Osvaldo",
  "Pacifico",
  "Pericle",
  "Pietro",
  "Primo",
  "Quasimodo",
  "Radio",
  "Raoul",
  "Renzo",
  "Rodolfo",
  "Romolo",
  "Rosolino",
  "Rufo",
  "Sabino",
  "Sandro",
  "Sasha",
  "Secondo",
  "Sesto",
  "Silverio",
  "Siro",
  "Tazio",
  "Teseo",
  "Timothy",
  "Tommaso",
  "Tristano",
  "Umberto",
  "Ariel",
  "Artemide",
  "Assia",
  "Azue",
  "Benedetta",
  "Bibiana",
  "Brigitta",
  "Carmela",
  "Cassiopea",
  "Cesidia",
  "Cira",
  "Clea",
  "Cleopatra",
  "Clodovea",
  "Concetta",
  "Cosetta",
  "Cristyn",
  "Damiana",
  "Danuta",
  "Deborah",
  "Demi",
  "Diamante",
  "Diana",
  "Donatella",
  "Doriana",
  "Edvige",
  "Elda",
  "Elga",
  "Elsa",
  "Emilia",
  "Enrica",
  "Erminia",
  "Eufemia",
  "Evita",
  "Fatima",
  "Felicia",
  "Filomena",
  "Flaviana",
  "Fortunata",
  "Gelsomina",
  "Genziana",
  "Giacinta",
  "Gilda",
  "Giovanna",
  "Giulietta",
  "Grazia",
  "Guendalina",
  "Helga",
  "Ileana",
  "Ingrid",
  "Irene",
  "Isabel",
  "Isira",
  "Ivonne",
  "Jelena",
  "Jole",
  "Claudia",
  "Kayla",
  "Kristel",
  "Laura",
  "Lucia",
  "Lia",
  "Lidia",
  "Lisa",
  "Loredana",
  "Loretta",
  "Luce",
  "Lucrezia",
  "Luna",
  "Maika",
  "Marcella",
  "Maria",
  "Mariagiulia",
  "Marianita",
  "Mariapia",
  "Marieva",
  "Marina",
  "Maristella",
  "Maruska",
  "Matilde",
  "Mecren",
  "Mercedes",
  "Mietta",
  "Miriana",
  "Miriam",
  "Monia",
  "Morgana",
  "Naomi",
  "Nayade",
  "Nicoletta",
  "Ninfa",
  "Noemi",
  "Nunzia",
  "Olimpia",
  "Oretta",
  "Ortensia",
  "Penelope",
  "Piccarda",
  "Prisca",
  "Rebecca",
  "Rita",
  "Rosalba",
  "Rosaria",
  "Rosita",
  "Ruth",
  "Samira",
  "Sarita",
  "Selvaggia",
  "Shaira",
  "Sibilla",
  "Soriana",
  "Thea",
  "Tosca",
  "Ursula",
  "Vania",
  "Vera",
  "Vienna",
  "Violante",
  "Vitalba",
  "Zelida"
];

},{}],"node_modules/faker/lib/locales/it/name/last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Amato",
  "Barbieri",
  "Barone",
  "Basile",
  "Battaglia",
  "Bellini",
  "Benedetti",
  "Bernardi",
  "Bianc",
  "Bianchi",
  "Bruno",
  "Caputo",
  "Carbon",
  "Caruso",
  "Cattaneo",
  "Colombo",
  "Cont",
  "Conte",
  "Coppola",
  "Costa",
  "Costantin",
  "D'amico",
  "D'angelo",
  "Damico",
  "De Angelis",
  "De luca",
  "De rosa",
  "De Santis",
  "Donati",
  "Esposito",
  "Fabbri",
  "Farin",
  "Ferrara",
  "Ferrari",
  "Ferraro",
  "Ferretti",
  "Ferri",
  "Fior",
  "Fontana",
  "Galli",
  "Gallo",
  "Gatti",
  "Gentile",
  "Giordano",
  "Giuliani",
  "Grassi",
  "Grasso",
  "Greco",
  "Guerra",
  "Leone",
  "Lombardi",
  "Lombardo",
  "Longo",
  "Mancini",
  "Marchetti",
  "Marian",
  "Marini",
  "Marino",
  "Martinelli",
  "Martini",
  "Martino",
  "Mazza",
  "Messina",
  "Milani",
  "Montanari",
  "Monti",
  "Morelli",
  "Moretti",
  "Negri",
  "Neri",
  "Orlando",
  "Pagano",
  "Palmieri",
  "Palumbo",
  "Parisi",
  "Pellegrini",
  "Pellegrino",
  "Piras",
  "Ricci",
  "Rinaldi",
  "Riva",
  "Rizzi",
  "Rizzo",
  "Romano",
  "Ross",
  "Rossetti",
  "Ruggiero",
  "Russo",
  "Sala",
  "Sanna",
  "Santoro",
  "Sartori",
  "Serr",
  "Silvestri",
  "Sorrentino",
  "Testa",
  "Valentini",
  "Villa",
  "Vitale",
  "Vitali"
];

},{}],"node_modules/faker/lib/locales/it/name/prefix.js":[function(require,module,exports) {
module["exports"] = [
  "Sig.",
  "Dott.",
  "Dr.",
  "Ing."
];

},{}],"node_modules/faker/lib/locales/it/name/suffix.js":[function(require,module,exports) {
module["exports"] = [];

},{}],"node_modules/faker/lib/locales/it/name/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{prefix} #{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}"
];

},{}],"node_modules/faker/lib/locales/it/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");
name.prefix = require("./prefix");
name.suffix = require("./suffix");
name.name = require("./name");

},{"./first_name":"node_modules/faker/lib/locales/it/name/first_name.js","./last_name":"node_modules/faker/lib/locales/it/name/last_name.js","./prefix":"node_modules/faker/lib/locales/it/name/prefix.js","./suffix":"node_modules/faker/lib/locales/it/name/suffix.js","./name":"node_modules/faker/lib/locales/it/name/name.js"}],"node_modules/faker/lib/locales/it/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "+## ### ## ## ####",
  "+## ## #######",
  "+## ## ########",
  "+## ### #######",
  "+## ### ########",
  "+## #### #######",
  "+## #### ########",
  "0## ### ####",
  "+39 0## ### ###",
  "3## ### ###",
  "+39 3## ### ###"
];

},{}],"node_modules/faker/lib/locales/it/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/it/phone_number/formats.js"}],"node_modules/faker/lib/locales/it/index.js":[function(require,module,exports) {
var it = {};
module['exports'] = it;
it.title = "Italian";
it.address = require("./address");
it.company = require("./company");
it.internet = require("./internet");
it.name = require("./name");
it.phone_number = require("./phone_number");

},{"./address":"node_modules/faker/lib/locales/it/address/index.js","./company":"node_modules/faker/lib/locales/it/company/index.js","./internet":"node_modules/faker/lib/locales/it/internet/index.js","./name":"node_modules/faker/lib/locales/it/name/index.js","./phone_number":"node_modules/faker/lib/locales/it/phone_number/index.js"}],"node_modules/faker/lib/locales/ja/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "###-####"
];

},{}],"node_modules/faker/lib/locales/ja/address/state.js":[function(require,module,exports) {
module["exports"] = [
  "北海道",
  "青森県",
  "岩手県",
  "宮城県",
  "秋田県",
  "山形県",
  "福島県",
  "茨城県",
  "栃木県",
  "群馬県",
  "埼玉県",
  "千葉県",
  "東京都",
  "神奈川県",
  "新潟県",
  "富山県",
  "石川県",
  "福井県",
  "山梨県",
  "長野県",
  "岐阜県",
  "静岡県",
  "愛知県",
  "三重県",
  "滋賀県",
  "京都府",
  "大阪府",
  "兵庫県",
  "奈良県",
  "和歌山県",
  "鳥取県",
  "島根県",
  "岡山県",
  "広島県",
  "山口県",
  "徳島県",
  "香川県",
  "愛媛県",
  "高知県",
  "福岡県",
  "佐賀県",
  "長崎県",
  "熊本県",
  "大分県",
  "宮崎県",
  "鹿児島県",
  "沖縄県"
];

},{}],"node_modules/faker/lib/locales/ja/address/state_abbr.js":[function(require,module,exports) {
module["exports"] = [
  "1",
  "2",
  "3",
  "4",
  "5",
  "6",
  "7",
  "8",
  "9",
  "10",
  "11",
  "12",
  "13",
  "14",
  "15",
  "16",
  "17",
  "18",
  "19",
  "20",
  "21",
  "22",
  "23",
  "24",
  "25",
  "26",
  "27",
  "28",
  "29",
  "30",
  "31",
  "32",
  "33",
  "34",
  "35",
  "36",
  "37",
  "38",
  "39",
  "40",
  "41",
  "42",
  "43",
  "44",
  "45",
  "46",
  "47"
];

},{}],"node_modules/faker/lib/locales/ja/address/city_prefix.js":[function(require,module,exports) {
module["exports"] = [
  "北",
  "東",
  "西",
  "南",
  "新",
  "湖",
  "港"
];

},{}],"node_modules/faker/lib/locales/ja/address/city_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "市",
  "区",
  "町",
  "村"
];

},{}],"node_modules/faker/lib/locales/ja/address/city.js":[function(require,module,exports) {
module["exports"] = [
  "#{city_prefix}#{Name.first_name}#{city_suffix}",
  "#{Name.first_name}#{city_suffix}",
  "#{city_prefix}#{Name.last_name}#{city_suffix}",
  "#{Name.last_name}#{city_suffix}"
];

},{}],"node_modules/faker/lib/locales/ja/address/street_name.js":[function(require,module,exports) {
module["exports"] = [
  "#{Name.first_name}#{street_suffix}",
  "#{Name.last_name}#{street_suffix}"
];

},{}],"node_modules/faker/lib/locales/ja/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.postcode = require("./postcode");
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.city_prefix = require("./city_prefix");
address.city_suffix = require("./city_suffix");
address.city = require("./city");
address.street_name = require("./street_name");

},{"./postcode":"node_modules/faker/lib/locales/ja/address/postcode.js","./state":"node_modules/faker/lib/locales/ja/address/state.js","./state_abbr":"node_modules/faker/lib/locales/ja/address/state_abbr.js","./city_prefix":"node_modules/faker/lib/locales/ja/address/city_prefix.js","./city_suffix":"node_modules/faker/lib/locales/ja/address/city_suffix.js","./city":"node_modules/faker/lib/locales/ja/address/city.js","./street_name":"node_modules/faker/lib/locales/ja/address/street_name.js"}],"node_modules/faker/lib/locales/ja/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "0####-#-####",
  "0###-##-####",
  "0##-###-####",
  "0#-####-####"
];

},{}],"node_modules/faker/lib/locales/ja/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/ja/phone_number/formats.js"}],"node_modules/faker/lib/locales/ja/cell_phone/formats.js":[function(require,module,exports) {
module["exports"] = [
  "090-####-####",
  "080-####-####",
  "070-####-####"
];

},{}],"node_modules/faker/lib/locales/ja/cell_phone/index.js":[function(require,module,exports) {
var cell_phone = {};
module['exports'] = cell_phone;
cell_phone.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/ja/cell_phone/formats.js"}],"node_modules/faker/lib/locales/ja/name/last_name.js":[function(require,module,exports) {
module["exports"] = [
  "佐藤",
  "鈴木",
  "高橋",
  "田中",
  "渡辺",
  "伊藤",
  "山本",
  "中村",
  "小林",
  "加藤",
  "吉田",
  "山田",
  "佐々木",
  "山口",
  "斎藤",
  "松本",
  "井上",
  "木村",
  "林",
  "清水"
];

},{}],"node_modules/faker/lib/locales/ja/name/first_name.js":[function(require,module,exports) {
module["exports"] = [
  "大翔",
  "蓮",
  "颯太",
  "樹",
  "大和",
  "陽翔",
  "陸斗",
  "太一",
  "海翔",
  "蒼空",
  "翼",
  "陽菜",
  "結愛",
  "結衣",
  "杏",
  "莉子",
  "美羽",
  "結菜",
  "心愛",
  "愛菜",
  "美咲"
];

},{}],"node_modules/faker/lib/locales/ja/name/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{last_name} #{first_name}"
];

},{}],"node_modules/faker/lib/locales/ja/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.last_name = require("./last_name");
name.first_name = require("./first_name");
name.name = require("./name");

},{"./last_name":"node_modules/faker/lib/locales/ja/name/last_name.js","./first_name":"node_modules/faker/lib/locales/ja/name/first_name.js","./name":"node_modules/faker/lib/locales/ja/name/name.js"}],"node_modules/faker/lib/locales/ja/index.js":[function(require,module,exports) {
var ja = {};
module['exports'] = ja;
ja.title = "Japanese";
ja.address = require("./address");
ja.phone_number = require("./phone_number");
ja.cell_phone = require("./cell_phone");
ja.name = require("./name");

},{"./address":"node_modules/faker/lib/locales/ja/address/index.js","./phone_number":"node_modules/faker/lib/locales/ja/phone_number/index.js","./cell_phone":"node_modules/faker/lib/locales/ja/cell_phone/index.js","./name":"node_modules/faker/lib/locales/ja/name/index.js"}],"node_modules/faker/lib/locales/ko/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "###-###"
];

},{}],"node_modules/faker/lib/locales/ko/address/state.js":[function(require,module,exports) {
module["exports"] = [
  "강원",
  "경기",
  "경남",
  "경북",
  "광주",
  "대구",
  "대전",
  "부산",
  "서울",
  "울산",
  "인천",
  "전남",
  "전북",
  "제주",
  "충남",
  "충북",
  "세종"
];

},{}],"node_modules/faker/lib/locales/ko/address/state_abbr.js":[function(require,module,exports) {
module["exports"] = [
  "강원",
  "경기",
  "경남",
  "경북",
  "광주",
  "대구",
  "대전",
  "부산",
  "서울",
  "울산",
  "인천",
  "전남",
  "전북",
  "제주",
  "충남",
  "충북",
  "세종"
];

},{}],"node_modules/faker/lib/locales/ko/address/city_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "구",
  "시",
  "군"
];

},{}],"node_modules/faker/lib/locales/ko/address/city_name.js":[function(require,module,exports) {
module["exports"] = [
  "강릉",
  "양양",
  "인제",
  "광주",
  "구리",
  "부천",
  "밀양",
  "통영",
  "창원",
  "거창",
  "고성",
  "양산",
  "김천",
  "구미",
  "영주",
  "광산",
  "남",
  "북",
  "고창",
  "군산",
  "남원",
  "동작",
  "마포",
  "송파",
  "용산",
  "부평",
  "강화",
  "수성"
];

},{}],"node_modules/faker/lib/locales/ko/address/city.js":[function(require,module,exports) {
module["exports"] = [
  "#{city_name}#{city_suffix}"
];

},{}],"node_modules/faker/lib/locales/ko/address/street_root.js":[function(require,module,exports) {
module["exports"] = [
  "상계",
  "화곡",
  "신정",
  "목",
  "잠실",
  "면목",
  "주안",
  "안양",
  "중",
  "정왕",
  "구로",
  "신월",
  "연산",
  "부평",
  "창",
  "만수",
  "중계",
  "검단",
  "시흥",
  "상도",
  "방배",
  "장유",
  "상",
  "광명",
  "신길",
  "행신",
  "대명",
  "동탄"
];

},{}],"node_modules/faker/lib/locales/ko/address/street_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "읍",
  "면",
  "동"
];

},{}],"node_modules/faker/lib/locales/ko/address/street_name.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_root}#{street_suffix}"
];

},{}],"node_modules/faker/lib/locales/ko/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.postcode = require("./postcode");
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.city_suffix = require("./city_suffix");
address.city_name = require("./city_name");
address.city = require("./city");
address.street_root = require("./street_root");
address.street_suffix = require("./street_suffix");
address.street_name = require("./street_name");

},{"./postcode":"node_modules/faker/lib/locales/ko/address/postcode.js","./state":"node_modules/faker/lib/locales/ko/address/state.js","./state_abbr":"node_modules/faker/lib/locales/ko/address/state_abbr.js","./city_suffix":"node_modules/faker/lib/locales/ko/address/city_suffix.js","./city_name":"node_modules/faker/lib/locales/ko/address/city_name.js","./city":"node_modules/faker/lib/locales/ko/address/city.js","./street_root":"node_modules/faker/lib/locales/ko/address/street_root.js","./street_suffix":"node_modules/faker/lib/locales/ko/address/street_suffix.js","./street_name":"node_modules/faker/lib/locales/ko/address/street_name.js"}],"node_modules/faker/lib/locales/ko/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "0#-#####-####",
  "0##-###-####",
  "0##-####-####"
];

},{}],"node_modules/faker/lib/locales/ko/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/ko/phone_number/formats.js"}],"node_modules/faker/lib/locales/ko/company/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "연구소",
  "게임즈",
  "그룹",
  "전자",
  "물산",
  "코리아"
];

},{}],"node_modules/faker/lib/locales/ko/company/prefix.js":[function(require,module,exports) {
module["exports"] = [
  "주식회사",
  "한국"
];

},{}],"node_modules/faker/lib/locales/ko/company/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{prefix} #{Name.first_name}",
  "#{Name.first_name} #{suffix}"
];

},{}],"node_modules/faker/lib/locales/ko/company/index.js":[function(require,module,exports) {
var company = {};
module['exports'] = company;
company.suffix = require("./suffix");
company.prefix = require("./prefix");
company.name = require("./name");

},{"./suffix":"node_modules/faker/lib/locales/ko/company/suffix.js","./prefix":"node_modules/faker/lib/locales/ko/company/prefix.js","./name":"node_modules/faker/lib/locales/ko/company/name.js"}],"node_modules/faker/lib/locales/ko/internet/free_email.js":[function(require,module,exports) {
module["exports"] = [
  "gmail.com",
  "yahoo.co.kr",
  "hanmail.net",
  "naver.com"
];

},{}],"node_modules/faker/lib/locales/ko/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "co.kr",
  "com",
  "biz",
  "info",
  "ne.kr",
  "net",
  "or.kr",
  "org"
];

},{}],"node_modules/faker/lib/locales/ko/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.free_email = require("./free_email");
internet.domain_suffix = require("./domain_suffix");

},{"./free_email":"node_modules/faker/lib/locales/ko/internet/free_email.js","./domain_suffix":"node_modules/faker/lib/locales/ko/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/ko/lorem/words.js":[function(require,module,exports) {
module["exports"] = [
  "국가는",
  "법률이",
  "정하는",
  "바에",
  "의하여",
  "재외국민을",
  "보호할",
  "의무를",
  "진다.",
  "모든",
  "국민은",
  "신체의",
  "자유를",
  "가진다.",
  "국가는",
  "전통문화의",
  "계승·발전과",
  "민족문화의",
  "창달에",
  "노력하여야",
  "한다.",
  "통신·방송의",
  "시설기준과",
  "신문의",
  "기능을",
  "보장하기",
  "위하여",
  "필요한",
  "사항은",
  "법률로",
  "정한다.",
  "헌법에",
  "의하여",
  "체결·공포된",
  "조약과",
  "일반적으로",
  "승인된",
  "국제법규는",
  "국내법과",
  "같은",
  "효력을",
  "가진다.",
  "다만,",
  "현행범인인",
  "경우와",
  "장기",
  "3년",
  "이상의",
  "형에",
  "해당하는",
  "죄를",
  "범하고",
  "도피",
  "또는",
  "증거인멸의",
  "염려가",
  "있을",
  "때에는",
  "사후에",
  "영장을",
  "청구할",
  "수",
  "있다.",
  "저작자·발명가·과학기술자와",
  "예술가의",
  "권리는",
  "법률로써",
  "보호한다.",
  "형사피고인은",
  "유죄의",
  "판결이",
  "확정될",
  "때까지는",
  "무죄로",
  "추정된다.",
  "모든",
  "국민은",
  "행위시의",
  "법률에",
  "의하여",
  "범죄를",
  "구성하지",
  "아니하는",
  "행위로",
  "소추되지",
  "아니하며,",
  "동일한",
  "범죄에",
  "대하여",
  "거듭",
  "처벌받지",
  "아니한다.",
  "국가는",
  "평생교육을",
  "진흥하여야",
  "한다.",
  "모든",
  "국민은",
  "사생활의",
  "비밀과",
  "자유를",
  "침해받지",
  "아니한다.",
  "의무교육은",
  "무상으로",
  "한다.",
  "저작자·발명가·과학기술자와",
  "예술가의",
  "권리는",
  "법률로써",
  "보호한다.",
  "국가는",
  "모성의",
  "보호를",
  "위하여",
  "노력하여야",
  "한다.",
  "헌법에",
  "의하여",
  "체결·공포된",
  "조약과",
  "일반적으로",
  "승인된",
  "국제법규는",
  "국내법과",
  "같은",
  "효력을",
  "가진다."
];

},{}],"node_modules/faker/lib/locales/ko/lorem/index.js":[function(require,module,exports) {
var lorem = {};
module['exports'] = lorem;
lorem.words = require("./words");

},{"./words":"node_modules/faker/lib/locales/ko/lorem/words.js"}],"node_modules/faker/lib/locales/ko/name/last_name.js":[function(require,module,exports) {
module["exports"] = [
  "김",
  "이",
  "박",
  "최",
  "정",
  "강",
  "조",
  "윤",
  "장",
  "임",
  "오",
  "한",
  "신",
  "서",
  "권",
  "황",
  "안",
  "송",
  "류",
  "홍"
];

},{}],"node_modules/faker/lib/locales/ko/name/first_name.js":[function(require,module,exports) {
module["exports"] = [
  "서연",
  "민서",
  "서현",
  "지우",
  "서윤",
  "지민",
  "수빈",
  "하은",
  "예은",
  "윤서",
  "민준",
  "지후",
  "지훈",
  "준서",
  "현우",
  "예준",
  "건우",
  "현준",
  "민재",
  "우진",
  "은주"
];

},{}],"node_modules/faker/lib/locales/ko/name/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{last_name} #{first_name}"
];

},{}],"node_modules/faker/lib/locales/ko/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.last_name = require("./last_name");
name.first_name = require("./first_name");
name.name = require("./name");

},{"./last_name":"node_modules/faker/lib/locales/ko/name/last_name.js","./first_name":"node_modules/faker/lib/locales/ko/name/first_name.js","./name":"node_modules/faker/lib/locales/ko/name/name.js"}],"node_modules/faker/lib/locales/ko/index.js":[function(require,module,exports) {
var ko = {};
module['exports'] = ko;
ko.title = "Korean";
ko.address = require("./address");
ko.phone_number = require("./phone_number");
ko.company = require("./company");
ko.internet = require("./internet");
ko.lorem = require("./lorem");
ko.name = require("./name");

},{"./address":"node_modules/faker/lib/locales/ko/address/index.js","./phone_number":"node_modules/faker/lib/locales/ko/phone_number/index.js","./company":"node_modules/faker/lib/locales/ko/company/index.js","./internet":"node_modules/faker/lib/locales/ko/internet/index.js","./lorem":"node_modules/faker/lib/locales/ko/lorem/index.js","./name":"node_modules/faker/lib/locales/ko/name/index.js"}],"node_modules/faker/lib/locales/nb_NO/address/city_root.js":[function(require,module,exports) {
module["exports"] = [
  "Fet",
  "Gjes",
  "Høy",
  "Inn",
  "Fager",
  "Lille",
  "Lo",
  "Mal",
  "Nord",
  "Nær",
  "Sand",
  "Sme",
  "Stav",
  "Stor",
  "Tand",
  "Ut",
  "Vest"
];

},{}],"node_modules/faker/lib/locales/nb_NO/address/city_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "berg",
  "borg",
  "by",
  "bø",
  "dal",
  "eid",
  "fjell",
  "fjord",
  "foss",
  "grunn",
  "hamn",
  "havn",
  "helle",
  "mark",
  "nes",
  "odden",
  "sand",
  "sjøen",
  "stad",
  "strand",
  "strøm",
  "sund",
  "vik",
  "vær",
  "våg",
  "ø",
  "øy",
  "ås"
];

},{}],"node_modules/faker/lib/locales/nb_NO/address/street_prefix.js":[function(require,module,exports) {
module["exports"] = [
  "Øvre",
  "Nedre",
  "Søndre",
  "Gamle",
  "Østre",
  "Vestre"
];

},{}],"node_modules/faker/lib/locales/nb_NO/address/street_root.js":[function(require,module,exports) {
module["exports"] = [
  "Eike",
  "Bjørke",
  "Gran",
  "Vass",
  "Furu",
  "Litj",
  "Lille",
  "Høy",
  "Fosse",
  "Elve",
  "Ku",
  "Konvall",
  "Soldugg",
  "Hestemyr",
  "Granitt",
  "Hegge",
  "Rogne",
  "Fiol",
  "Sol",
  "Ting",
  "Malm",
  "Klokker",
  "Preste",
  "Dam",
  "Geiterygg",
  "Bekke",
  "Berg",
  "Kirke",
  "Kors",
  "Bru",
  "Blåveis",
  "Torg",
  "Sjø"
];

},{}],"node_modules/faker/lib/locales/nb_NO/address/street_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "alléen",
  "bakken",
  "berget",
  "bråten",
  "eggen",
  "engen",
  "ekra",
  "faret",
  "flata",
  "gata",
  "gjerdet",
  "grenda",
  "gropa",
  "hagen",
  "haugen",
  "havna",
  "holtet",
  "høgda",
  "jordet",
  "kollen",
  "kroken",
  "lia",
  "lunden",
  "lyngen",
  "løkka",
  "marka",
  "moen",
  "myra",
  "plassen",
  "ringen",
  "roa",
  "røa",
  "skogen",
  "skrenten",
  "spranget",
  "stien",
  "stranda",
  "stubben",
  "stykket",
  "svingen",
  "tjernet",
  "toppen",
  "tunet",
  "vollen",
  "vika",
  "åsen"
];

},{}],"node_modules/faker/lib/locales/nb_NO/address/common_street_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "sgate",
  "svei",
  "s Gate",
  "s Vei",
  "gata",
  "veien"
];

},{}],"node_modules/faker/lib/locales/nb_NO/address/building_number.js":[function(require,module,exports) {
module["exports"] = [
  "#",
  "##"
];

},{}],"node_modules/faker/lib/locales/nb_NO/address/secondary_address.js":[function(require,module,exports) {
module["exports"] = [
  "Leil. ###",
  "Oppgang A",
  "Oppgang B"
];

},{}],"node_modules/faker/lib/locales/nb_NO/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "####",
  "####",
  "####",
  "0###"
];

},{}],"node_modules/faker/lib/locales/nb_NO/address/state.js":[function(require,module,exports) {
module["exports"] = [
  ""
];

},{}],"node_modules/faker/lib/locales/nb_NO/address/city.js":[function(require,module,exports) {
module["exports"] = [
  "#{city_root}#{city_suffix}"
];

},{}],"node_modules/faker/lib/locales/nb_NO/address/street_name.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_root}#{street_suffix}",
  "#{street_prefix} #{street_root}#{street_suffix}",
  "#{Name.first_name}#{common_street_suffix}",
  "#{Name.last_name}#{common_street_suffix}"
];

},{}],"node_modules/faker/lib/locales/nb_NO/address/street_address.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_name} #{building_number}"
];

},{}],"node_modules/faker/lib/locales/nb_NO/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "Norge"
];

},{}],"node_modules/faker/lib/locales/nb_NO/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.city_root = require("./city_root");
address.city_suffix = require("./city_suffix");
address.street_prefix = require("./street_prefix");
address.street_root = require("./street_root");
address.street_suffix = require("./street_suffix");
address.common_street_suffix = require("./common_street_suffix");
address.building_number = require("./building_number");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.state = require("./state");
address.city = require("./city");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./city_root":"node_modules/faker/lib/locales/nb_NO/address/city_root.js","./city_suffix":"node_modules/faker/lib/locales/nb_NO/address/city_suffix.js","./street_prefix":"node_modules/faker/lib/locales/nb_NO/address/street_prefix.js","./street_root":"node_modules/faker/lib/locales/nb_NO/address/street_root.js","./street_suffix":"node_modules/faker/lib/locales/nb_NO/address/street_suffix.js","./common_street_suffix":"node_modules/faker/lib/locales/nb_NO/address/common_street_suffix.js","./building_number":"node_modules/faker/lib/locales/nb_NO/address/building_number.js","./secondary_address":"node_modules/faker/lib/locales/nb_NO/address/secondary_address.js","./postcode":"node_modules/faker/lib/locales/nb_NO/address/postcode.js","./state":"node_modules/faker/lib/locales/nb_NO/address/state.js","./city":"node_modules/faker/lib/locales/nb_NO/address/city.js","./street_name":"node_modules/faker/lib/locales/nb_NO/address/street_name.js","./street_address":"node_modules/faker/lib/locales/nb_NO/address/street_address.js","./default_country":"node_modules/faker/lib/locales/nb_NO/address/default_country.js"}],"node_modules/faker/lib/locales/nb_NO/company/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "Gruppen",
  "AS",
  "ASA",
  "BA",
  "RFH",
  "og Sønner"
];

},{}],"node_modules/faker/lib/locales/nb_NO/company/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{Name.last_name} #{suffix}",
  "#{Name.last_name}-#{Name.last_name}",
  "#{Name.last_name}, #{Name.last_name} og #{Name.last_name}"
];

},{}],"node_modules/faker/lib/locales/nb_NO/company/index.js":[function(require,module,exports) {
var company = {};
module['exports'] = company;
company.suffix = require("./suffix");
company.name = require("./name");

},{"./suffix":"node_modules/faker/lib/locales/nb_NO/company/suffix.js","./name":"node_modules/faker/lib/locales/nb_NO/company/name.js"}],"node_modules/faker/lib/locales/nb_NO/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "no",
  "com",
  "net",
  "org"
];

},{}],"node_modules/faker/lib/locales/nb_NO/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.domain_suffix = require("./domain_suffix");

},{"./domain_suffix":"node_modules/faker/lib/locales/nb_NO/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/nb_NO/name/first_name.js":[function(require,module,exports) {
module["exports"] = [
  "Emma",
  "Sara",
  "Thea",
  "Ida",
  "Julie",
  "Nora",
  "Emilie",
  "Ingrid",
  "Hanna",
  "Maria",
  "Sofie",
  "Anna",
  "Malin",
  "Amalie",
  "Vilde",
  "Frida",
  "Andrea",
  "Tuva",
  "Victoria",
  "Mia",
  "Karoline",
  "Mathilde",
  "Martine",
  "Linnea",
  "Marte",
  "Hedda",
  "Marie",
  "Helene",
  "Silje",
  "Leah",
  "Maja",
  "Elise",
  "Oda",
  "Kristine",
  "Aurora",
  "Kaja",
  "Camilla",
  "Mari",
  "Maren",
  "Mina",
  "Selma",
  "Jenny",
  "Celine",
  "Eline",
  "Sunniva",
  "Natalie",
  "Tiril",
  "Synne",
  "Sandra",
  "Madeleine",
  "Markus",
  "Mathias",
  "Kristian",
  "Jonas",
  "Andreas",
  "Alexander",
  "Martin",
  "Sander",
  "Daniel",
  "Magnus",
  "Henrik",
  "Tobias",
  "Kristoffer",
  "Emil",
  "Adrian",
  "Sebastian",
  "Marius",
  "Elias",
  "Fredrik",
  "Thomas",
  "Sondre",
  "Benjamin",
  "Jakob",
  "Oliver",
  "Lucas",
  "Oskar",
  "Nikolai",
  "Filip",
  "Mats",
  "William",
  "Erik",
  "Simen",
  "Ole",
  "Eirik",
  "Isak",
  "Kasper",
  "Noah",
  "Lars",
  "Joakim",
  "Johannes",
  "Håkon",
  "Sindre",
  "Jørgen",
  "Herman",
  "Anders",
  "Jonathan",
  "Even",
  "Theodor",
  "Mikkel",
  "Aksel"
];

},{}],"node_modules/faker/lib/locales/nb_NO/name/feminine_name.js":[function(require,module,exports) {
module["exports"] = [
  "Emma",
  "Sara",
  "Thea",
  "Ida",
  "Julie",
  "Nora",
  "Emilie",
  "Ingrid",
  "Hanna",
  "Maria",
  "Sofie",
  "Anna",
  "Malin",
  "Amalie",
  "Vilde",
  "Frida",
  "Andrea",
  "Tuva",
  "Victoria",
  "Mia",
  "Karoline",
  "Mathilde",
  "Martine",
  "Linnea",
  "Marte",
  "Hedda",
  "Marie",
  "Helene",
  "Silje",
  "Leah",
  "Maja",
  "Elise",
  "Oda",
  "Kristine",
  "Aurora",
  "Kaja",
  "Camilla",
  "Mari",
  "Maren",
  "Mina",
  "Selma",
  "Jenny",
  "Celine",
  "Eline",
  "Sunniva",
  "Natalie",
  "Tiril",
  "Synne",
  "Sandra",
  "Madeleine"
];

},{}],"node_modules/faker/lib/locales/nb_NO/name/masculine_name.js":[function(require,module,exports) {
module["exports"] = [
  "Markus",
  "Mathias",
  "Kristian",
  "Jonas",
  "Andreas",
  "Alexander",
  "Martin",
  "Sander",
  "Daniel",
  "Magnus",
  "Henrik",
  "Tobias",
  "Kristoffer",
  "Emil",
  "Adrian",
  "Sebastian",
  "Marius",
  "Elias",
  "Fredrik",
  "Thomas",
  "Sondre",
  "Benjamin",
  "Jakob",
  "Oliver",
  "Lucas",
  "Oskar",
  "Nikolai",
  "Filip",
  "Mats",
  "William",
  "Erik",
  "Simen",
  "Ole",
  "Eirik",
  "Isak",
  "Kasper",
  "Noah",
  "Lars",
  "Joakim",
  "Johannes",
  "Håkon",
  "Sindre",
  "Jørgen",
  "Herman",
  "Anders",
  "Jonathan",
  "Even",
  "Theodor",
  "Mikkel",
  "Aksel"
];

},{}],"node_modules/faker/lib/locales/nb_NO/name/last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Johansen",
  "Hansen",
  "Andersen",
  "Kristiansen",
  "Larsen",
  "Olsen",
  "Solberg",
  "Andresen",
  "Pedersen",
  "Nilsen",
  "Berg",
  "Halvorsen",
  "Karlsen",
  "Svendsen",
  "Jensen",
  "Haugen",
  "Martinsen",
  "Eriksen",
  "Sørensen",
  "Johnsen",
  "Myhrer",
  "Johannessen",
  "Nielsen",
  "Hagen",
  "Pettersen",
  "Bakke",
  "Skuterud",
  "Løken",
  "Gundersen",
  "Strand",
  "Jørgensen",
  "Kvarme",
  "Røed",
  "Sæther",
  "Stensrud",
  "Moe",
  "Kristoffersen",
  "Jakobsen",
  "Holm",
  "Aas",
  "Lie",
  "Moen",
  "Andreassen",
  "Vedvik",
  "Nguyen",
  "Jacobsen",
  "Torgersen",
  "Ruud",
  "Krogh",
  "Christiansen",
  "Bjerke",
  "Aalerud",
  "Borge",
  "Sørlie",
  "Berge",
  "Østli",
  "Ødegård",
  "Torp",
  "Henriksen",
  "Haukelidsæter",
  "Fjeld",
  "Danielsen",
  "Aasen",
  "Fredriksen",
  "Dahl",
  "Berntsen",
  "Arnesen",
  "Wold",
  "Thoresen",
  "Solheim",
  "Skoglund",
  "Bakken",
  "Amundsen",
  "Solli",
  "Smogeli",
  "Kristensen",
  "Glosli",
  "Fossum",
  "Evensen",
  "Eide",
  "Carlsen",
  "Østby",
  "Vegge",
  "Tangen",
  "Smedsrud",
  "Olstad",
  "Lunde",
  "Kleven",
  "Huseby",
  "Bjørnstad",
  "Ryan",
  "Rasmussen",
  "Nygård",
  "Nordskaug",
  "Nordby",
  "Mathisen",
  "Hopland",
  "Gran",
  "Finstad",
  "Edvardsen"
];

},{}],"node_modules/faker/lib/locales/nb_NO/name/prefix.js":[function(require,module,exports) {
module["exports"] = [
  "Dr.",
  "Prof."
];

},{}],"node_modules/faker/lib/locales/nb_NO/name/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "Jr.",
  "Sr.",
  "I",
  "II",
  "III",
  "IV",
  "V"
];

},{}],"node_modules/faker/lib/locales/nb_NO/name/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{prefix} #{first_name} #{last_name}",
  "#{first_name} #{last_name} #{suffix}",
  "#{feminine_name} #{feminine_name} #{last_name}",
  "#{masculine_name} #{masculine_name} #{last_name}",
  "#{first_name} #{last_name} #{last_name}",
  "#{first_name} #{last_name}"
];

},{}],"node_modules/faker/lib/locales/nb_NO/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.feminine_name = require("./feminine_name");
name.masculine_name = require("./masculine_name");
name.last_name = require("./last_name");
name.prefix = require("./prefix");
name.suffix = require("./suffix");
name.name = require("./name");

},{"./first_name":"node_modules/faker/lib/locales/nb_NO/name/first_name.js","./feminine_name":"node_modules/faker/lib/locales/nb_NO/name/feminine_name.js","./masculine_name":"node_modules/faker/lib/locales/nb_NO/name/masculine_name.js","./last_name":"node_modules/faker/lib/locales/nb_NO/name/last_name.js","./prefix":"node_modules/faker/lib/locales/nb_NO/name/prefix.js","./suffix":"node_modules/faker/lib/locales/nb_NO/name/suffix.js","./name":"node_modules/faker/lib/locales/nb_NO/name/name.js"}],"node_modules/faker/lib/locales/nb_NO/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "########",
  "## ## ## ##",
  "### ## ###",
  "+47 ## ## ## ##"
];

},{}],"node_modules/faker/lib/locales/nb_NO/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/nb_NO/phone_number/formats.js"}],"node_modules/faker/lib/locales/nb_NO/index.js":[function(require,module,exports) {
var nb_NO = {};
module['exports'] = nb_NO;
nb_NO.title = "Norwegian";
nb_NO.address = require("./address");
nb_NO.company = require("./company");
nb_NO.internet = require("./internet");
nb_NO.name = require("./name");
nb_NO.phone_number = require("./phone_number");

},{"./address":"node_modules/faker/lib/locales/nb_NO/address/index.js","./company":"node_modules/faker/lib/locales/nb_NO/company/index.js","./internet":"node_modules/faker/lib/locales/nb_NO/internet/index.js","./name":"node_modules/faker/lib/locales/nb_NO/name/index.js","./phone_number":"node_modules/faker/lib/locales/nb_NO/phone_number/index.js"}],"node_modules/faker/lib/locales/nep/name/first_name.js":[function(require,module,exports) {
module["exports"] = [
  "Aarav",
  "Ajita",
  "Amit",
  "Amita",
  "Amrit",
  "Arijit",
  "Ashmi",
  "Asmita",
  "Bibek",
  "Bijay",
  "Bikash",
  "Bina",
  "Bishal",
  "Bishnu",
  "Buddha",
  "Deepika",
  "Dipendra",
  "Gagan",
  "Ganesh",
  "Khem",
  "Krishna",
  "Laxmi",
  "Manisha",
  "Nabin",
  "Nikita",
  "Niraj",
  "Nischal",
  "Padam",
  "Pooja",
  "Prabin",
  "Prakash",
  "Prashant",
  "Prem",
  "Purna",
  "Rajendra",
  "Rajina",
  "Raju",
  "Rakesh",
  "Ranjan",
  "Ratna",
  "Sagar",
  "Sandeep",
  "Sanjay",
  "Santosh",
  "Sarita",
  "Shilpa",
  "Shirisha",
  "Shristi",
  "Siddhartha",
  "Subash",
  "Sumeet",
  "Sunita",
  "Suraj",
  "Susan",
  "Sushant"
];

},{}],"node_modules/faker/lib/locales/nep/name/last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Adhikari",
  "Aryal",
  "Baral",
  "Basnet",
  "Bastola",
  "Basynat",
  "Bhandari",
  "Bhattarai",
  "Chettri",
  "Devkota",
  "Dhakal",
  "Dongol",
  "Ghale",
  "Gurung",
  "Gyawali",
  "Hamal",
  "Jung",
  "KC",
  "Kafle",
  "Karki",
  "Khadka",
  "Koirala",
  "Lama",
  "Limbu",
  "Magar",
  "Maharjan",
  "Niroula",
  "Pandey",
  "Pradhan",
  "Rana",
  "Raut",
  "Sai",
  "Shai",
  "Shakya",
  "Sherpa",
  "Shrestha",
  "Subedi",
  "Tamang",
  "Thapa"
];

},{}],"node_modules/faker/lib/locales/nep/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");

},{"./first_name":"node_modules/faker/lib/locales/nep/name/first_name.js","./last_name":"node_modules/faker/lib/locales/nep/name/last_name.js"}],"node_modules/faker/lib/locales/nep/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  0
];

},{}],"node_modules/faker/lib/locales/nep/address/state.js":[function(require,module,exports) {
module["exports"] = [
  "Baglung",
  "Banke",
  "Bara",
  "Bardiya",
  "Bhaktapur",
  "Bhojupu",
  "Chitwan",
  "Dailekh",
  "Dang",
  "Dhading",
  "Dhankuta",
  "Dhanusa",
  "Dolakha",
  "Dolpha",
  "Gorkha",
  "Gulmi",
  "Humla",
  "Ilam",
  "Jajarkot",
  "Jhapa",
  "Jumla",
  "Kabhrepalanchok",
  "Kalikot",
  "Kapilvastu",
  "Kaski",
  "Kathmandu",
  "Lalitpur",
  "Lamjung",
  "Manang",
  "Mohottari",
  "Morang",
  "Mugu",
  "Mustang",
  "Myagdi",
  "Nawalparasi",
  "Nuwakot",
  "Palpa",
  "Parbat",
  "Parsa",
  "Ramechhap",
  "Rauswa",
  "Rautahat",
  "Rolpa",
  "Rupandehi",
  "Sankhuwasabha",
  "Sarlahi",
  "Sindhuli",
  "Sindhupalchok",
  "Sunsari",
  "Surket",
  "Syangja",
  "Tanahu",
  "Terhathum"
];

},{}],"node_modules/faker/lib/locales/nep/address/city.js":[function(require,module,exports) {
module["exports"] = [
  "Bhaktapur",
  "Biratnagar",
  "Birendranagar",
  "Birgunj",
  "Butwal",
  "Damak",
  "Dharan",
  "Gaur",
  "Gorkha",
  "Hetauda",
  "Itahari",
  "Janakpur",
  "Kathmandu",
  "Lahan",
  "Nepalgunj",
  "Pokhara"
];

},{}],"node_modules/faker/lib/locales/nep/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "Nepal"
];

},{}],"node_modules/faker/lib/locales/nep/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.postcode = require("./postcode");
address.state = require("./state");
address.city = require("./city");
address.default_country = require("./default_country");

},{"./postcode":"node_modules/faker/lib/locales/nep/address/postcode.js","./state":"node_modules/faker/lib/locales/nep/address/state.js","./city":"node_modules/faker/lib/locales/nep/address/city.js","./default_country":"node_modules/faker/lib/locales/nep/address/default_country.js"}],"node_modules/faker/lib/locales/nep/internet/free_email.js":[function(require,module,exports) {
module["exports"] = [
  "worldlink.com.np",
  "gmail.com",
  "yahoo.com",
  "hotmail.com"
];

},{}],"node_modules/faker/lib/locales/nep/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "np",
  "com",
  "info",
  "net",
  "org"
];

},{}],"node_modules/faker/lib/locales/nep/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.free_email = require("./free_email");
internet.domain_suffix = require("./domain_suffix");

},{"./free_email":"node_modules/faker/lib/locales/nep/internet/free_email.js","./domain_suffix":"node_modules/faker/lib/locales/nep/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/nep/company/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "Pvt Ltd",
  "Group",
  "Ltd",
  "Limited"
];

},{}],"node_modules/faker/lib/locales/nep/company/index.js":[function(require,module,exports) {
var company = {};
module['exports'] = company;
company.suffix = require("./suffix");

},{"./suffix":"node_modules/faker/lib/locales/nep/company/suffix.js"}],"node_modules/faker/lib/locales/nep/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "##-#######",
  "+977-#-#######",
  "+977########"
];

},{}],"node_modules/faker/lib/locales/nep/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/nep/phone_number/formats.js"}],"node_modules/faker/lib/locales/nep/index.js":[function(require,module,exports) {
var nep = {};
module['exports'] = nep;
nep.title = "Nepalese";
nep.name = require("./name");
nep.address = require("./address");
nep.internet = require("./internet");
nep.company = require("./company");
nep.phone_number = require("./phone_number");

},{"./name":"node_modules/faker/lib/locales/nep/name/index.js","./address":"node_modules/faker/lib/locales/nep/address/index.js","./internet":"node_modules/faker/lib/locales/nep/internet/index.js","./company":"node_modules/faker/lib/locales/nep/company/index.js","./phone_number":"node_modules/faker/lib/locales/nep/phone_number/index.js"}],"node_modules/faker/lib/locales/nl/address/city_prefix.js":[function(require,module,exports) {
module["exports"] = [
  "Aagte",
  "Aal",
  "Aalden",
  "Aals",
  "Aalst",
  "Aalsum",
  "Aanschot",
  "Aarden",
  "Aarle",
  "Abbe",
  "Abbegea",
  "Abben",
  "Abbestede",
  "Abcoven",
  "Absdale",
  "Abts",
  "Acht",
  "Achter",
  "Achterste",
  "Achtmaal",
  "Achttien",
  "Acquoy",
  "Aduard",
  "Aduarder",
  "Aekinga",
  "Aerde",
  "Aerden",
  "Aerdt",
  "Afferden",
  "Aijen",
  "Akersloot",
  "Akker",
  "Akkerput",
  "Akkrun",
  "Akmarijp",
  "Aldeboarn",
  "Aldegae",
  "Aldtsjerk",
  "Aling",
  "Alkmaar",
  "Allersma",
  "Allinga",
  "Almere",
  "Alphen",
  "Altena",
  "Alteveer",
  "Alting",
  "Altweert",
  "Alverna",
  "Ameide",
  "Amerika",
  "Amerongen",
  "Ammerstol",
  "Ams",
  "Amster",
  "Andel",
  "Angeren",
  "Anholt",
  "Anjum",
  "Anke",
  "Ankum",
  "Anna",
  "Annendaal",
  "Anneville",
  "Anreep",
  "Ansen",
  "Apeldoorn",
  "Apen",
  "Appel",
  "Appen",
  "Arcen",
  "Archem",
  "Arendnest",
  "Arensge",
  "Arkens",
  "Armweide",
  "Arnhem",
  "Arnoud",
  "Arriën",
  "Arriër",
  "Arum",
  "Arwerd",
  "Asch",
  "Asenray",
  "Asperen",
  "Asschat",
  "Assel",
  "Asselt",
  "Assen",
  "Asten",
  "Atze",
  "Augs",
  "Averlo",
  "Avest",
  "Azelo",
  "Azewijn",
  "Ba",
  "Baaium",
  "Baak",
  "Baaks",
  "Baal",
  "Baamsum",
  "Baan",
  "Baard",
  "Baarder",
  "Baarle",
  "Baarlo",
  "Baars",
  "Baarschot",
  "Baexem",
  "Baflo",
  "Bahr",
  "Bakel",
  "Bakelse",
  "Bakertand",
  "Bakke",
  "Bakkerom",
  "Balgoij",
  "Balinge",
  "Ballast",
  "Balleman",
  "Ballum",
  "Balma",
  "Bane",
  "Bankert",
  "Bantega",
  "Bare",
  "Bargebek",
  "Barlage",
  "Barlaque",
  "Barlo",
  "Barnflair",
  "Barrier",
  "Bars",
  "Basse",
  "Basser",
  "Baten",
  "Bath",
  "Bathmen",
  "Bavinkel",
  "Bazuin",
  "Bears",
  "Beckum",
  "Bedaf",
  "Bedum",
  "Beekb",
  "Beekkant",
  "Beemdkant",
  "Beemte",
  "Beertsen",
  "Beerze",
  "Beerzer",
  "Beesd",
  "Beetgum",
  "Beetgumer",
  "Behelp",
  "Beilen",
  "Beinum",
  "Beke",
  "Beldert",
  "Belgen",
  "Belgeren",
  "Belt",
  "Belvert",
  "Bemmel",
  "Bemmer",
  "Benderse",
  "Beneden",
  "Benne",
  "Bennekom",
  "Bent",
  "Bente",
  "Benthem",
  "Berg",
  "Bergakker",
  "Bergen",
  "Bergens",
  "Bergerden",
  "Bergharen",
  "Berghem",
  "Berghum",
  "Bergstoep",
  "Berik",
  "Beringe",
  "Berk",
  "Berke",
  "Berken",
  "Berkt",
  "Berlicum",
  "Bern",
  "Besse",
  "Besthmen",
  "Beswerd",
  "Bethlehem",
  "Beugt",
  "Beuke",
  "Beun",
  "Beusb",
  "Beusichem",
  "Bever",
  "Bidding",
  "Biert",
  "Bierum",
  "Biessum",
  "Biest",
  "Biezen",
  "Bigge",
  "Bijster",
  "Bijsteren",
  "Billing",
  "Bilt",
  "Bingerden",
  "Bisselt",
  "Bissen",
  "Blaker",
  "Blaricum",
  "Blauhûs",
  "Blauw",
  "Blauwe",
  "Blauwen",
  "Bleijen",
  "Bleijs",
  "Blekslage",
  "Blenkert",
  "Blerick",
  "Blessum",
  "Blije",
  "Blijham",
  "Blijnse",
  "Blok",
  "Blokken",
  "Blokum",
  "Boazum",
  "Boberden",
  "Bocholtz",
  "Bocht",
  "Boeiink",
  "Boek",
  "Boekel",
  "Boekelo",
  "Boekelte",
  "Boekend",
  "Boer",
  "Boerakker",
  "Boerelaan",
  "Boeren",
  "Boerengat",
  "Boerenhol",
  "Boerhaar",
  "Boijl",
  "Boks",
  "Boksum",
  "Bokt",
  "Bollinga",
  "Bols",
  "Bolst",
  "Bolt",
  "Bommerig",
  "Bong",
  "Bonkwert",
  "Bonner",
  "Bonrepas",
  "Bontebok",
  "Boomen",
  "Boord",
  "Borger",
  "Borgharen",
  "Borgs",
  "Borgweg",
  "Borkel",
  "Borkeld",
  "Born",
  "Borne",
  "Borneo",
  "Bornwird",
  "Bos",
  "Boschkens",
  "Bosje",
  "Bosjes",
  "Boskamp",
  "Boskant",
  "Boskoop",
  "Boslust",
  "Bosschen",
  "Bosscher",
  "Bosven",
  "Boter",
  "Botshoofd",
  "Boukoul",
  "Bourtange",
  "Boven",
  "Bovenstad",
  "Boxtel",
  "Braak",
  "Braamt",
  "Brabander",
  "Brakel",
  "Brand",
  "Brande",
  "Brandt",
  "Brantgum",
  "Breda",
  "Brede",
  "Bree",
  "Breede",
  "Breedeweg",
  "Breehees",
  "Breezand",
  "Brem",
  "Breskens",
  "Breugel",
  "Breukele",
  "Breyvin",
  "Brielle",
  "Brigdamme",
  "Brij",
  "Brillerij",
  "Briltil",
  "Brinkmans",
  "Britsum",
  "Britswert",
  "Broek",
  "Broekens",
  "Broekkant",
  "Brommelen",
  "Brons",
  "Bruchem",
  "Bruggen",
  "Brugger",
  "Bruil",
  "Bruinisse",
  "Bruister",
  "Brumhold",
  "Brunssum",
  "Brunsting",
  "Bruntinge",
  "Buchten",
  "Buggenum",
  "Buis",
  "Buiten",
  "Bulkenaar",
  "Bult",
  "Bultinge",
  "Bunne",
  "Bunnik",
  "Burdaard",
  "Burger",
  "Burgh",
  "Burgt",
  "Burgum",
  "Burgwerd",
  "Burstum",
  "Burum",
  "Bussel",
  "Busselte",
  "Busser",
  "Buttinge",
  "Buurtje",
  "Cadier",
  "Cadzand",
  "Calfven",
  "Calslagen",
  "Caluna",
  "Camerig",
  "Capelle",
  "Carnisse",
  "Cartils",
  "Castelré",
  "Castenray",
  "Castert",
  "Castricum",
  "Catsop",
  "Chaam",
  "Clinge",
  "Coevorden",
  "Colmont",
  "Cornjum",
  "Cornwerd",
  "Cottessen",
  "Crapoel",
  "Crau",
  "Crix",
  "Crob",
  "Croy",
  "Culemborg",
  "Daarle",
  "Dale",
  "Dalem",
  "Dalen",
  "Daler",
  "Dalerend",
  "Dalerpeel",
  "Dallinge",
  "Damwâld",
  "Daniken",
  "Darp",
  "Dassemus",
  "Dearsum",
  "Dedgum",
  "Deelen",
  "Deelse",
  "Deelshurk",
  "Deense",
  "Deest",
  "Deil",
  "Deinum",
  "Dekes",
  "Dekkers",
  "Del",
  "Delden",
  "Delf",
  "Delft",
  "Dellen",
  "Delwijnen",
  "Demen",
  "Den ",
  "Deursen",
  "Deuteren",
  "Deventer",
  "Dieden",
  "Diemen",
  "Diepen",
  "Diependal",
  "Diepswal",
  "Diermen",
  "Dieskant",
  "Dieteren",
  "Diever",
  "Dijken",
  "Dijker",
  "Dijkster",
  "Dijkwel",
  "Dintelsas",
  "Dinther",
  "Dintherse",
  "Diphoorn",
  "Dirkshorn",
  "Dis",
  "Diunt",
  "Doenrade",
  "Does",
  "Doeveren",
  "Doezum",
  "Doijum",
  "Dokkum",
  "Doldersum",
  "Dom",
  "Dommelen",
  "Donderen",
  "Dongen",
  "Donia",
  "Doniaga",
  "Donzel",
  "Dood",
  "Doodstil",
  "Doon",
  "Doorn",
  "Doornen",
  "Doornik",
  "Doorning",
  "Doorwerth",
  "Doosje",
  "Dorkwerd",
  "Dorst",
  "Dorther",
  "Douverge",
  "Douwen",
  "Draai",
  "Drachten",
  "Dreischor",
  "Drie",
  "Drieboere",
  "Driehuis",
  "Driene",
  "Dries",
  "Driewegen",
  "Driezum",
  "Drieën",
  "Drijber",
  "Drimmelen",
  "Drogeham",
  "Drogt",
  "Dronrijp",
  "Dronten",
  "Druif",
  "Drunen",
  "Druten",
  "Drylts",
  "Duifhuis",
  "Duinen",
  "Duiven",
  "Duizel",
  "Duizend",
  "Dulder",
  "Dunsborg",
  "Dussen",
  "Duur",
  "Duurends",
  "Eagum",
  "Earnewâld",
  "Easterein",
  "Eastermar",
  "Easthim",
  "Echt",
  "Echten",
  "Echtener",
  "Echter",
  "Eder",
  "Eede",
  "Eefsele",
  "Eekt",
  "Eekwerd",
  "Eelde",
  "Eelen",
  "Eems",
  "Eemster",
  "Eemten",
  "Een",
  "Eenigen",
  "Eenrum",
  "Eenum",
  "Eerde",
  "Eersel",
  "Eerste",
  "Ees",
  "Eesterga",
  "Effen",
  "Egchel",
  "Egede",
  "Egmond",
  "Egypte",
  "Eikelen",
  "Eikelhof",
  "Eimeren",
  "Eindewege",
  "Eindje",
  "Ekamp",
  "Elde",
  "Elden",
  "Eldik",
  "Eldrik",
  "Elft",
  "Elkerzee",
  "Ellemeet",
  "Eller",
  "Ellerhei",
  "Ellersing",
  "Elsen",
  "Elshof",
  "Elspeet",
  "Elst",
  "Elsteren",
  "Elzet",
  "Emmeloord",
  "Emmen",
  "Empel",
  "Endepoel",
  "Eng",
  "Enge",
  "Engel",
  "Engelbert",
  "Engelen",
  "Engelum",
  "Englum",
  "Engwegen",
  "Engwierum",
  "Enk",
  "Enschedé",
  "Enspijk",
  "Enumatil",
  "Enzelens",
  "Eper",
  "Eppen",
  "Erichem",
  "Erlecom",
  "Ermelo",
  "Ermer",
  "Escharen",
  "Eschoten",
  "Espelo",
  "Essen",
  "Etenaken",
  "Etzenrade",
  "Eursing",
  "Eursinge",
  "Euverem",
  "Ever",
  "Everd",
  "Everlo",
  "Everse",
  "Ewer",
  "Ewinkel",
  "Exmorra",
  "Eygels",
  "Eyser",
  "Ezinge",
  "Ezuma",
  "Faan",
  "Falom",
  "Farmsum",
  "Fatum",
  "Feerwerd",
  "Fel",
  "Ferwert",
  "Fiemel",
  "Fijfhûs",
  "Finke",
  "Finkum",
  "Flieren",
  "Flânsum",
  "Fokkers",
  "Follega",
  "Folsgeare",
  "Formerum",
  "Fort",
  "Fortmond",
  "Foudgum",
  "Fraamklap",
  "Frankhuis",
  "Frankrijk",
  "Fransum",
  "Friens",
  "Frytum",
  "Fûns",
  "Gaag",
  "Gaanderen",
  "Gaar",
  "Gaast",
  "Gaasten",
  "Gaastmar",
  "Gaete",
  "Gagel",
  "Galder",
  "Gameren",
  "Gammelke",
  "Ganzert",
  "Gapinge",
  "Garminge",
  "Garnwerd",
  "Garre",
  "Garrels",
  "Garst",
  "Garyp",
  "Gassel",
  "Gasthuis",
  "Gawege",
  "Gebergte",
  "Geefs",
  "Geen",
  "Geer",
  "Gees",
  "Geeuwen",
  "Geffen",
  "Gelders",
  "Gelderse",
  "Geleen",
  "Gelkenes",
  "Gellicum",
  "Gemaal",
  "Gement",
  "Gemert",
  "Gemonde",
  "Gendt",
  "Geneijgen",
  "Genen",
  "Gening",
  "Genne",
  "Gennep",
  "Genooi",
  "Gerheggen",
  "Gerner",
  "Gersloot",
  "Gerven",
  "Gerwen",
  "Geulhem",
  "Gever",
  "Geverik",
  "Gewande",
  "Giers",
  "Giessen",
  "Gietelo",
  "Giethmen",
  "Giethoorn",
  "Gijbe",
  "Gijsselte",
  "Gijzel",
  "Gilze",
  "Ginkel",
  "Ginnum",
  "Glaner",
  "Goaiïngea",
  "Godlinze",
  "Goes",
  "Goilberd",
  "Goirle",
  "Goldhoorn",
  "Gooium",
  "Goor",
  "Gorinchem",
  "Gorp",
  "Gortel",
  "Gouda",
  "Gouderak",
  "Goudseweg",
  "Goënga",
  "Graaf",
  "Graauw",
  "Gracht",
  "Graet",
  "Graf",
  "Grafwegen",
  "Gras",
  "Graspeel",
  "Graszode",
  "Grathem",
  "Grauwe",
  "Grave",
  "Grazen",
  "Greonterp",
  "Greup",
  "Griete",
  "Grijps",
  "Grits",
  "Groe",
  "Groede",
  "Groen",
  "Groenekan",
  "Groeneweg",
  "Groenlo",
  "Groep",
  "Groes",
  "Groessen",
  "Groet",
  "Groeve",
  "Groeze",
  "Gron",
  "Groot",
  "Groote",
  "Grote",
  "Grotel",
  "Grou",
  "Gytsjerk",
  "Haaften",
  "Haag",
  "Haagje",
  "Haaks",
  "Haakswold",
  "Haalderen",
  "Haalweide",
  "Haamstede",
  "Haandrik",
  "Haar",
  "Haarlem",
  "Haarsteeg",
  "Haart",
  "Haelen",
  "Haerst",
  "Hagestein",
  "Haiink",
  "Halder",
  "Haler",
  "Half",
  "Halfmijl",
  "Halfweg",
  "Halle",
  "Haller",
  "Hallum",
  "Halte",
  "Halvink",
  "Hamrik",
  "Hamshorn",
  "Handel",
  "Hane",
  "Hank",
  "Hankate",
  "Hansweert",
  "Hantum",
  "Hantumer",
  "Harculo",
  "Harde",
  "Hardinx",
  "Haren",
  "Harener",
  "Haring",
  "Harke",
  "Harkema",
  "Harl",
  "Harles",
  "Harpel",
  "Harre",
  "Harse",
  "Harskamp",
  "Harssens",
  "Hartwerd",
  "Haspel",
  "Hasselt",
  "Hasselter",
  "Hatte",
  "Hattem",
  "Hauwert",
  "Havelt",
  "Havelte",
  "Hayum",
  "Haze",
  "Hazenhurk",
  "Hazennest",
  "Heaburgen",
  "Hedel",
  "Hedik",
  "Heech",
  "Heegher",
  "Heek",
  "Heelsum",
  "Heems",
  "Heemstede",
  "Heenweg",
  "Heer",
  "Heerde",
  "Heere",
  "Heeren",
  "Heers",
  "Hees",
  "Heesakker",
  "Heesbeen",
  "Heesboom",
  "Heesch",
  "Heesselt",
  "Heet",
  "Heezeren",
  "Hefswal",
  "Hegge",
  "Hei",
  "Heiakker",
  "Heibloem",
  "Heid",
  "Heide",
  "Heidekant",
  "Heiden",
  "Heier",
  "Heihoefke",
  "Heij",
  "Heijen",
  "Heikant",
  "Heikantse",
  "Heille",
  "Heine",
  "Heioord",
  "Heister",
  "Heitrak",
  "Hekel",
  "Hekkum",
  "Hel",
  "Helden",
  "Helkant",
  "Hell",
  "Helle",
  "Hellegat",
  "Hellen",
  "Hellevoet",
  "Helling",
  "Hellouw",
  "Helwerd",
  "Hemert",
  "Hemrik",
  "Hendrik",
  "Henge",
  "Herfte",
  "Herike",
  "Herk",
  "Herken",
  "Hermalen",
  "Hernen",
  "Herpen",
  "Herpt",
  "Hersel",
  "Hersend",
  "Hert",
  "Herten",
  "Hertme",
  "Herveld",
  "Herwen",
  "Herwijnen",
  "Herxen",
  "Hesens",
  "Hespe",
  "Hessum",
  "Heugde",
  "Heukelom",
  "Heukelum",
  "Heult",
  "Heumen",
  "Heure",
  "Heurne",
  "Heusden",
  "Heuvel",
  "Heuvels",
  "Heuveltje",
  "Hexel",
  "Heze",
  "Hiaure",
  "Hichtum",
  "Hidaard",
  "Hien",
  "Hierden",
  "Hieslum",
  "Hijken",
  "Hijum",
  "Hilaard",
  "Hilakker",
  "Hild",
  "Hill",
  "Hilte",
  "Hilversum",
  "Hinnaard",
  "Hintham",
  "Hitsertse",
  "Hodenpijl",
  "Hoef",
  "Hoefkens",
  "Hoek",
  "Hoekdries",
  "Hoekelum",
  "Hoekens",
  "Hoekje",
  "Hoeks",
  "Hoekske",
  "Hoetmans",
  "Hoeve",
  "Hoeven",
  "Hoeves",
  "Hoge",
  "Hogert",
  "Hogeweg",
  "Holker",
  "Hollum",
  "Holm",
  "Holset",
  "Holsloot",
  "Holst",
  "Holt",
  "Holte",
  "Holten",
  "Holter",
  "Holthe",
  "Holtien",
  "Holtinge",
  "Holtum",
  "Holwerd",
  "Holwierde",
  "Holwinde",
  "Hommelse",
  "Hommert",
  "Hommerts",
  "Honderd",
  "Honds",
  "Hondsrug",
  "Hongerige",
  "Honthem",
  "Hoog",
  "Hoogcruts",
  "Hooge",
  "Hoogehaar",
  "Hoogen",
  "Hoogeweg",
  "Hooghalen",
  "Hoogmade",
  "Hoogmeien",
  "Hoogwatum",
  "Hool",
  "Hoon",
  "Hoonte",
  "Hoorn",
  "Hoornder",
  "Hoptille",
  "Horck",
  "Horick",
  "Horn",
  "Horssen",
  "Horsten",
  "Horzik",
  "Hout",
  "Houterd",
  "Houtgoor",
  "Houthei",
  "Houthem",
  "Houw",
  "Houwer",
  "Hugten",
  "Huij",
  "Huinen",
  "Huinerwal",
  "Huis",
  "Huissen",
  "Huize",
  "Huizinge",
  "Hul",
  "Huls",
  "Hulsen",
  "Hulst",
  "Hulten",
  "Hultje",
  "Humcoven",
  "Hunnecum",
  "Hunsel",
  "Hupsel",
  "Hurkske",
  "Hurpesch",
  "Hutten",
  "Huurne",
  "Höchte",
  "Höfke",
  "Húns",
  "Idaerd",
  "Idserda",
  "Idsken",
  "Idzegea",
  "Iens",
  "IJmuiden",
  "IJpe",
  "IJpelo",
  "IJsselham",
  "IJzen",
  "IJzeren",
  "IJzerlo",
  "Illik",
  "Indoornik",
  "Ingwert",
  "Inia",
  "Itens",
  "Itteren",
  "Jaars",
  "Jammer",
  "Jannum",
  "Jellum",
  "Jelsum",
  "Jeth",
  "Jipsing",
  "Jirnsum",
  "Jislum",
  "Jisp",
  "Jistrum",
  "Jonas",
  "Jonen",
  "Jonkers",
  "Jorwert",
  "Joure",
  "Jous",
  "Jousterp",
  "Jouswerd",
  "Jouwer",
  "Jubbega",
  "Jukwerd",
  "Junne",
  "Jutryp",
  "Kaag",
  "Kaakhorn",
  "Kaard",
  "Kaarschot",
  "Kaat",
  "Kade",
  "Kadoelen",
  "Kalis",
  "Kalteren",
  "Kameren",
  "Kamp",
  "Kampen",
  "Kamper",
  "Kamperei",
  "Kampers",
  "Kamperzee",
  "Kantens",
  "Kantje",
  "Kapel",
  "Kapelle",
  "Kapolder",
  "Kappert",
  "Karre",
  "Kasen",
  "Kasteren",
  "Kater",
  "Katerveer",
  "Kathagen",
  "Katlijk",
  "Kats",
  "Katwijk",
  "Kaumes",
  "Kavel",
  "Kaweide",
  "Kedichem",
  "Keegen",
  "Keent",
  "Keersop",
  "Keinsmer",
  "Keizers",
  "Kekerdom",
  "Kelmond",
  "Kelpen",
  "Kempkens",
  "Kerk",
  "Kerken",
  "Kerkhof",
  "Kerkrade",
  "Kerkwerve",
  "Keske",
  "Kessel",
  "Kesseleik",
  "Ketting",
  "Keulse",
  "Keunen",
  "Keup",
  "Keuter",
  "Kibbel",
  "Kiel",
  "Kiester",
  "Kievit",
  "Kijf",
  "Kijfwaard",
  "Kijkuit",
  "Kilder",
  "Kille",
  "Kimswerd",
  "Kinderbos",
  "Kink",
  "Kinnum",
  "Kipper",
  "Klaaswaal",
  "Kladde",
  "Klaren",
  "Klatering",
  "Klef",
  "Klei",
  "Klein",
  "Kleinder",
  "Kleine",
  "Kleinge",
  "Klem",
  "Kletter",
  "Klevers",
  "Klispoel",
  "Klomp",
  "Klooster",
  "Klosse",
  "Klösse",
  "Knaphof",
  "Knegsel",
  "Knipe",
  "Knol",
  "Knolle",
  "Knuiters",
  "Koedood",
  "Koehool",
  "Koekange",
  "Koekanger",
  "Koekoek",
  "Koel",
  "Koevering",
  "Kokkelert",
  "Kolder",
  "Kolhol",
  "Kolhorn",
  "Kolk",
  "Kollum",
  "Kolonie",
  "Kommer",
  "Konings",
  "Koog",
  "Kooi",
  "Kooldert",
  "Kopaf",
  "Korhorn",
  "Korn",
  "Kornhorn",
  "Kort",
  "Korte",
  "Korteraar",
  "Korteven",
  "Kortgene",
  "Kostvlies",
  "Koude",
  "Kouden",
  "Koudhoorn",
  "Koulen",
  "Kraan",
  "Kraanven",
  "Kraats",
  "Krabben",
  "Krachtig",
  "Kranen",
  "Krassum",
  "Kreek",
  "Kreielt",
  "Kreijel",
  "Kreijl",
  "Krewerd",
  "Krim",
  "Krimpen",
  "Krol",
  "Kruin",
  "Kruishaar",
  "Kruispunt",
  "Kruisweg",
  "Kuikhorne",
  "Kuiks",
  "Kuinre",
  "Kuitaart",
  "Kuivezand",
  "Kulert",
  "Kulsdom",
  "Kunrade",
  "Kutt",
  "Kuundert",
  "Kuzemer",
  "Kwaal",
  "Kwakel",
  "Kwakkel",
  "Kwartier",
  "Kûkherne",
  "Laag",
  "Laaghalen",
  "Laaghaler",
  "Laak",
  "Laaksum",
  "Laan",
  "Lage",
  "Lagekant",
  "Lageweg",
  "Lakei",
  "Laker",
  "Lalle",
  "Lammer",
  "Lammerweg",
  "Lamperen",
  "Landerum",
  "Landsrade",
  "Lang",
  "Lange",
  "Langeraar",
  "Langerak",
  "Langereit",
  "Lank",
  "Lankes",
  "Laren",
  "Laskwerd",
  "Lattrop",
  "Laude",
  "Lauwer",
  "Ledeacker",
  "Leeg",
  "Leegte",
  "Leek",
  "Leem",
  "Leen",
  "Leens",
  "Leensel",
  "Leermens",
  "Leersum",
  "Leeuw",
  "Leeuwerik",
  "Leeuwte",
  "Lege",
  "Legert",
  "Leiden",
  "Leimuiden",
  "Leker",
  "Lekker",
  "Lelystad",
  "Lemel",
  "Lemele",
  "Lemmer",
  "Lemselo",
  "Lengel",
  "Lent",
  "Lenthe",
  "Leons",
  "Lerop",
  "Lethe",
  "Lettele",
  "Leuke",
  "Leunen",
  "Leur",
  "Leusden",
  "Leutes",
  "Leuth",
  "Leuven",
  "Leuvenum",
  "Leveroy",
  "Lexmond",
  "Lhee",
  "Lichtaard",
  "Lichtmis",
  "Liefkens",
  "Liempde",
  "Lienden",
  "Lier",
  "Lieren",
  "Lierop",
  "Lies",
  "Lievelde",
  "Lieving",
  "Lijnden",
  "Limbricht",
  "Limmen",
  "Linde",
  "Lingsfort",
  "Lintelo",
  "Lintvelde",
  "Lioessens",
  "Lippen",
  "Lith",
  "Lithoijen",
  "Lobith",
  "Loc",
  "Locht",
  "Loenen",
  "Loer",
  "Loete",
  "Logt",
  "Loil",
  "Lollum",
  "Lomm",
  "Lonneker",
  "Loo",
  "Loobrink",
  "Loofaert",
  "Looi",
  "Looien",
  "Look",
  "Loon",
  "Loons",
  "Loonse",
  "Looveer",
  "Loppersum",
  "Lovendaal",
  "Loveren",
  "Loënga",
  "Lubbinge",
  "Luchen",
  "Luchten",
  "Luissel",
  "Luitert",
  "Lula",
  "Lunen",
  "Lunteren",
  "Lunters",
  "Lutjegast",
  "Lutjerijp",
  "Lutke",
  "Lutkepost",
  "Lutten",
  "Lutter",
  "Lytse",
  "Lytshuzen",
  "Maagd",
  "Maaijkant",
  "Maalb",
  "Maaldrift",
  "Maalstede",
  "Maar",
  "Maarn",
  "Maars",
  "Maarssen",
  "Maasband",
  "Maasbree",
  "Maaskant",
  "Maat",
  "Maatsehei",
  "Macharen",
  "Made",
  "Magele",
  "Magrette",
  "Makkum",
  "Mal",
  "Malden",
  "Mallem",
  "Mamelis",
  "Manen",
  "Mantgum",
  "Mantinge",
  "Maren",
  "Maria",
  "Maris",
  "Mark",
  "Markvelde",
  "Marle",
  "Marrum",
  "Mars",
  "Marssum",
  "Marsum",
  "Martens",
  "Marum",
  "Mataram",
  "Maten",
  "Mathijs",
  "Maurik",
  "Maxet",
  "Medemblik",
  "Medevoort",
  "Medler",
  "Meed",
  "Meeden",
  "Meele",
  "Meemortel",
  "Meene",
  "Meer",
  "Meeren",
  "Meern",
  "Meerten",
  "Meerven",
  "Meerwijck",
  "Megelsum",
  "Megen",
  "Meije",
  "Meijel",
  "Melick",
  "Melis",
  "Melissant",
  "Menaldum",
  "Mensinge",
  "Menzel",
  "Meppen",
  "Merkel",
  "Merm",
  "Merselo",
  "Merum",
  "Mesch",
  "Meteren",
  "Metsla",
  "Midbuul",
  "Midde",
  "Middel",
  "Middelijk",
  "Midden",
  "Middenhof",
  "Midlaren",
  "Midlum",
  "Mids",
  "Midwolde",
  "Miedum",
  "Mildert",
  "Milheeze",
  "Mill",
  "Mils",
  "Milschot",
  "Minkeloos",
  "Mispel",
  "Moddergat",
  "Moer",
  "Moeren",
  "Moerslag",
  "Moespot",
  "Molembaix",
  "Molenbaan",
  "Molenbelt",
  "Molengat",
  "Molenhof",
  "Molenperk",
  "Molenrij",
  "Molenstad",
  "Molkwar",
  "Monster",
  "Montfort",
  "Mook",
  "Moord",
  "Moorsel",
  "Morige",
  "Morra",
  "Mortel",
  "Mosbulten",
  "Mosik",
  "Moskou",
  "Mosse",
  "Mossel",
  "Most",
  "Muggenhol",
  "Muis",
  "Muizenhol",
  "Mulderij",
  "Mullegen",
  "Munneke",
  "Munnekens",
  "Munniken",
  "Munte",
  "Murns",
  "Mussel",
  "Mûnein",
  "Naarder",
  "Nabbegat",
  "Nagel",
  "Nansum",
  "Napels",
  "Natten",
  "Neder",
  "Nederbiel",
  "Neer",
  "Neerijnen",
  "Neeritter",
  "Neerloon",
  "Neerst",
  "Negen",
  "Nekke",
  "Nergena",
  "Nia",
  "Nie",
  "Niebert",
  "Niehove",
  "Nier",
  "Niersen",
  "Niesoord",
  "Nieuw",
  "Nieuwaal",
  "Nieuwe",
  "Nieuwer",
  "Nieuwklap",
  "Nieuwkoop",
  "Nieuwolda",
  "Nieuwstad",
  "Niftrik",
  "Nijega",
  "Nijehaske",
  "Nijesyl",
  "Nijken",
  "Nijkerker",
  "Nijlân",
  "Nijmegen",
  "Nijnsel",
  "Nijrees",
  "Nijstad",
  "Nijve",
  "Nispense",
  "Noardein",
  "Noenes",
  "Nolde",
  "Noord",
  "Noorden",
  "Noorder",
  "Noordhorn",
  "Noordink",
  "Noordkant",
  "Noordse",
  "Notendaal",
  "Notsel",
  "Noukoop",
  "Nuenen",
  "Nuijen",
  "Nuil",
  "Nuis",
  "Nunhem",
  "Nunspeet",
  "Nuth",
  "Obbicht",
  "Ock",
  "Oegst",
  "Oekel",
  "Oeken",
  "Oele",
  "Oensel",
  "Oentsjerk",
  "Oerle",
  "Oete",
  "Oever",
  "Offinga",
  "Ofwegen",
  "Ohé;",
  "Oijen",
  "Oirlo",
  "Oirs",
  "Okswerd",
  "Olde",
  "Oldehove",
  "Oldemarkt",
  "Olden",
  "Oldeneel",
  "Oldenhave",
  "Oldeouwer",
  "Oldörp",
  "Olen",
  "Oler",
  "Oling",
  "Olterterp",
  "Ommel",
  "Ommen",
  "Ommeren",
  "Onder",
  "Onna",
  "Onsenoort",
  "Onstwedde",
  "Ooij",
  "Ooijen",
  "Oost",
  "Oostappen",
  "Ooste",
  "Ooster",
  "Oosterend",
  "Oosterens",
  "Oosterhof",
  "Oosterik",
  "Oosternie",
  "Oosternij",
  "Oosterse",
  "Oosterzee",
  "Oosthem",
  "Oostindië",
  "Oostrum",
  "Oostum",
  "Oostwold",
  "Oostzaan",
  "Op",
  "Opende",
  "Ophemert",
  "Ophuis",
  "Opijnen",
  "Opmeeden",
  "Opper",
  "Opperdoes",
  "Opperduit",
  "Opwetten",
  "Opwierde",
  "Oranje",
  "Orvelte",
  "Osen",
  "Oshaar",
  "Ospel",
  "Ossen",
  "Ossenisse",
  "Ostaaijen",
  "Osterbos",
  "Othene",
  "Otterlo",
  "Ottersum",
  "Ou",
  "OuBildt",
  "Oude",
  "Oudega",
  "Oudehaske",
  "Oudehorne",
  "Ouden",
  "Oudenrijn",
  "Ouder",
  "Oudeschip",
  "Oudleusen",
  "Oukoop",
  "OuLeede",
  "OuLeije",
  "OuPolder",
  "OuSchouw",
  "OuStaten",
  "OuStee",
  "OuStoof",
  "OuStrumpt",
  "OuWaranda",
  "Ouwer",
  "OuWillem",
  "Ouwster",
  "Oventje",
  "Over",
  "Overa",
  "Overakker",
  "Overbiel",
  "Overeys",
  "Overgeul",
  "Overheek",
  "Overschot",
  "Overval",
  "Overwater",
  "Paal",
  "Paarde",
  "Paarlo",
  "Paauwen",
  "Paddepoel",
  "Padhuis",
  "Paesens",
  "Palestina",
  "Pallert",
  "Pandgat",
  "Panheel",
  "Pann",
  "Pannerden",
  "Papen",
  "Papenveer",
  "Park",
  "Parrega",
  "Partij",
  "Pasop",
  "Patrijzen",
  "Peebos",
  "Peelkant",
  "Peij",
  "Peizerweg",
  "Pelikaan",
  "Pepinus",
  "Pernis",
  "Pers",
  "Pesaken",
  "Peters",
  "Petten",
  "Piaam",
  "Pieperij",
  "Piepert",
  "Piershil",
  "Pieter",
  "Pikesyl",
  "Piksen",
  "Pingjum",
  "Pinkeveer",
  "Pitteperk",
  "Plaat",
  "Plaats",
  "Plak",
  "Plantage",
  "Plas",
  "Plat",
  "Plein",
  "Poffert",
  "Polen",
  "Polle",
  "Pollen",
  "Ponte",
  "Poonhaven",
  "Poppen",
  "Posterenk",
  "Posthoorn",
  "Pot",
  "Praets",
  "Prickart",
  "Puiflijk",
  "Punt",
  "Purmer",
  "Purmerend",
  "Puth",
  "Putse",
  "Putten",
  "Putters",
  "Pyramide",
  "Raai",
  "Raak",
  "Raam",
  "Raar",
  "Raard",
  "Raayen",
  "Raerd",
  "Rakens",
  "Rakt",
  "Rand",
  "Rande",
  "Randen",
  "Ranum",
  "Raren",
  "Rasquert",
  "Ratte",
  "Ravensgat",
  "Reahûs",
  "Rechteren",
  "Rectum",
  "Reduzum",
  "Reeth",
  "Reidswal",
  "Reitsum",
  "Remswerd",
  "Renesse",
  "Renkum",
  "Renneborg",
  "Rens",
  "Respel",
  "Ressen",
  "Reters",
  "Reth",
  "Reuth",
  "Reutje",
  "Reuzen",
  "Rewert",
  "Rhaan",
  "Rheder",
  "Rhee",
  "Rhenoy",
  "Rhoon",
  "Ridder",
  "Riel",
  "Rien",
  "Riet",
  "Rietven",
  "Rijckholt",
  "Rijen",
  "Rijke",
  "Rijkel",
  "Rijker",
  "Rijlst",
  "Rijnsater",
  "Rijsb",
  "Rijsoord",
  "Rijt",
  "Rijtjes",
  "Ril",
  "Rimpelt",
  "Rink",
  "Rips",
  "Rith",
  "Ritsuma",
  "Roeke",
  "Roekel",
  "Roelage",
  "Roels",
  "Roermond",
  "Roeven",
  "Roggel",
  "Rohel",
  "Rolaf",
  "Roligt",
  "Rollecate",
  "Rolpaal",
  "Rome",
  "Rond",
  "Ronduite",
  "Rood",
  "Roodehaan",
  "Rooden",
  "Roond",
  "Roosteren",
  "Rooth",
  "Ropta",
  "Roskam",
  "Rothem",
  "Rott",
  "Rotte",
  "Rotter",
  "Rotting",
  "Rottum",
  "Rozendaal",
  "Rucphen",
  "Ruif",
  "Ruigen",
  "Ruigezand",
  "Ruimel",
  "Ruinen",
  "Ruischer",
  "Ruiten",
  "Rukven",
  "Rullen",
  "Rumpt",
  "Rund",
  "Rusven",
  "Rut",
  "Ryptsjerk",
  "Rytseterp",
  "Saaksum",
  "Saaxum",
  "Salverd",
  "Sandebuur",
  "Santfort",
  "Santpoort",
  "Sasput",
  "Sauwerd",
  "Schaa",
  "Schaaphok",
  "Schaaps",
  "Schadron",
  "Schafelt",
  "Schaft",
  "Schagen",
  "Schager",
  "Schandelo",
  "Schans",
  "Schapers",
  "Scharen",
  "Scharne",
  "Scharster",
  "Schatkuil",
  "Schaveren",
  "Scheemder",
  "Schelf",
  "Schellach",
  "Schelm",
  "Schettens",
  "Schey",
  "Schieven",
  "Schijf",
  "Schijndel",
  "Schillers",
  "Schimmert",
  "Schin",
  "Schinnen",
  "Schippers",
  "School",
  "Schoon",
  "Schoonen",
  "Schoor",
  "Schoorl",
  "Schoot",
  "Schore",
  "Schoter",
  "Schotters",
  "Schouw",
  "Schouwen",
  "Schouwer",
  "Schraard",
  "Schrap",
  "Schuilen",
  "Schuring",
  "Schuwacht",
  "Sebalde",
  "Seerijp",
  "Sell",
  "Selmien",
  "Selwerd",
  "Seroos",
  "Seters",
  "Sibbe",
  "Siberië",
  "Siegers",
  "Simpel",
  "Sinouts",
  "Sinsel",
  "Sint",
  "Sion",
  "Sittard",
  "Sjunga",
  "Skarl",
  "Skillaerd",
  "Skou",
  "Skrins",
  "Skyldum",
  "Slee",
  "Sleen",
  "Slegge",
  "Slek",
  "Slichten",
  "Sliffert",
  "Slijkwell",
  "Slikken",
  "Sloot",
  "Sluis",
  "Smakt",
  "Smal",
  "Smalle",
  "Smeerling",
  "Smelbrêge",
  "Smele",
  "Smilde",
  "Smits",
  "Sneek",
  "Sneiders",
  "Snelle",
  "Sneps",
  "Snikzwaag",
  "Snipperij",
  "Snoden",
  "Soeter",
  "Solwerd",
  "Someren",
  "Sopsum",
  "Spaanrijt",
  "Spaanse",
  "Spaken",
  "Spannen",
  "Spannum",
  "Spears",
  "Spek",
  "Spekklef",
  "Spekt",
  "Speuld",
  "Speurgt",
  "Spier",
  "Spijk",
  "Spik",
  "Spits",
  "Spoolde",
  "Spoor",
  "Sprang",
  "Sprundel",
  "Spurkt",
  "Stad",
  "Stadterij",
  "Starten",
  "Stations",
  "Staverden",
  "Stedum",
  "Steeg",
  "Steegh",
  "Steel",
  "Steen",
  "Steenkamp",
  "Steenoven",
  "Steenpaal",
  "Steensel",
  "Steenvak",
  "Stegen",
  "Steger",
  "Stegeren",
  "Stein",
  "Sterken",
  "Sterre",
  "Steurgat",
  "Stevens",
  "Stevert",
  "Stiem",
  "Stiens",
  "Stitswerd",
  "Stobben",
  "Stokhem",
  "Stokkelen",
  "Stokkum",
  "Stokske",
  "Stokt",
  "Stolpen",
  "Stomme",
  "Stoof",
  "Stork",
  "Stouten",
  "Stox",
  "Strand",
  "Straten",
  "Strateris",
  "Streek",
  "Strepen",
  "Streukel",
  "Strij",
  "Strijen",
  "Strijp",
  "Stroet",
  "Stroo",
  "Stroopuit",
  "Strubben",
  "Strucht",
  "Strype",
  "Stuw",
  "Sumar",
  "Sumarre",
  "Surhuizum",
  "Susteren",
  "Suttum",
  "Suwâld",
  "Swaenwert",
  "Swalmen",
  "Sweik",
  "Syt",
  "Sânfurd",
  "Taarlo",
  "Teeffelen",
  "Teije",
  "Teijl",
  "Telgt",
  "Tempel",
  "Ter",
  "Terband",
  "Terblijt",
  "Terdiek",
  "Tereyken",
  "Tergêft",
  "Terhagen",
  "Terheijl",
  "Terherne",
  "Terkaple",
  "Terlet",
  "Terlinden",
  "Termaar",
  "Termoors",
  "Termunten",
  "Termunter",
  "Ternaard",
  "Teroele",
  "Terover",
  "Tersoal",
  "Tervaten",
  "Tervoorst",
  "Tervoort",
  "Terwispel",
  "Terwolde",
  "Terziet",
  "Teuge",
  "Theetuin",
  "Themaat",
  "Tholen",
  "Thull",
  "Thuserhof",
  "Tibma",
  "Tiel",
  "Tielse",
  "Tiggelt",
  "Tijnje",
  "Tike",
  "Til",
  "Timmer",
  "Tippe",
  "Tjaard",
  "Tjams",
  "Tjerkwerd",
  "Tjoene",
  "Tolbert",
  "Tolkamer",
  "Tommel",
  "Tongeren",
  "Tongerlo",
  "Tonsel",
  "Toom",
  "Toornwerd",
  "Top",
  "Toren",
  "Toterfout",
  "Toven",
  "Tragel",
  "Tranendal",
  "Trege",
  "Trent",
  "Tricht",
  "Triemen",
  "Trimpert",
  "Trintelen",
  "Tritzum",
  "Tronde",
  "Trophorne",
  "Trutjes",
  "Tuil",
  "Tull",
  "Tungelroy",
  "Turns",
  "Tusschen",
  "Tuut",
  "Tuuthees",
  "Twee",
  "Tweedeweg",
  "TweeTol",
  "Twekkelo",
  "Twello",
  "Twijzel",
  "Twijzeler",
  "Twisk",
  "Tynaarlo",
  "Tytsjerk",
  "Ubach",
  "Ubbena",
  "Ubber",
  "Uddel",
  "Uffelsen",
  "Uffelte",
  "Uit",
  "Uiter",
  "Uithoorn",
  "Uitwierde",
  "Ulfter",
  "Ulicoten",
  "Ulrum",
  "Ulsda",
  "Ulvend",
  "Unga",
  "Uppel",
  "Usquert",
  "Usselo",
  "Vaals",
  "Vaar",
  "Vaarle",
  "Vaart",
  "Vaesrade",
  "Valk",
  "Valken",
  "Valom",
  "Valsteeg",
  "Varik",
  "Varsen",
  "Varssel",
  "Vebenabos",
  "Vecht",
  "Veecaten",
  "Veele",
  "Veeler",
  "Veen",
  "Veenhof",
  "Veenhoop",
  "Veenhuis",
  "Veere",
  "Veessen",
  "Veghel",
  "Veld",
  "Veldbraak",
  "Velde",
  "Velden",
  "Veldhuis",
  "Veldzicht",
  "Velp",
  "Velsen",
  "Veluwe",
  "Vemde",
  "Ven",
  "Venbe",
  "Vene",
  "Venekoten",
  "Venlo",
  "Venne",
  "Venray",
  "Venweg",
  "Vergelt",
  "Verloren",
  "Vessem",
  "Vestjens",
  "Vet",
  "Vetterik",
  "Veulen",
  "Vianen",
  "Viel",
  "Vier",
  "Vierhuis",
  "Vijcie",
  "Vijf",
  "Vilgert",
  "Vilsteren",
  "Vilt",
  "Vink",
  "Vinkel",
  "Vinken",
  "Vinkepas",
  "Vis",
  "Visschers",
  "Vissers",
  "Vlaas",
  "Vlake",
  "Vlas",
  "Vledder",
  "Vleet",
  "Vleuten",
  "Vlie",
  "Vliegert",
  "Vlieghuis",
  "Vlijmen",
  "Vliss",
  "Vlist",
  "Vlodrop",
  "Vloei",
  "Vloet",
  "Vlootkant",
  "Vogelfort",
  "Volthe",
  "Voor",
  "Voorne",
  "Voorrijp",
  "Voorst",
  "Voorstad",
  "Voorste",
  "Voorster",
  "Voort",
  "Voortje",
  "Voorweg",
  "Vorchten",
  "Vorst",
  "Vorsten",
  "Voske",
  "Voskuil",
  "Vosse",
  "Vossebelt",
  "Vosselen",
  "Vossen",
  "Voulwames",
  "Vrachelen",
  "Vragender",
  "Vredepeel",
  "Vree",
  "Vries",
  "Vriezen",
  "Vrij",
  "Vrijhoeve",
  "Vrilk",
  "Vroe",
  "Vroelen",
  "Vuile",
  "Vuilpan",
  "Vuren",
  "Waaksens",
  "Waal",
  "Waar",
  "Waard",
  "Waarde",
  "Waarden",
  "Waarder",
  "Waatskamp",
  "Wachtum",
  "Waddinx",
  "Wadway",
  "Wadwerd",
  "Wagen",
  "Waije",
  "Walder",
  "Walik",
  "Walsert",
  "Wammert",
  "Wanneper",
  "Wanroij",
  "Wapen",
  "Wapse",
  "Wapser",
  "Warf",
  "Warffum",
  "Warfster",
  "Warmen",
  "Warmond",
  "Warnia",
  "Warstiens",
  "Warten",
  "Waspik",
  "Water",
  "Wateren",
  "Waterkant",
  "Waterop",
  "Waterval",
  "Waver",
  "Weakens",
  "Wedde",
  "Wedder",
  "Wee",
  "Weeg",
  "Weende",
  "Weerd",
  "Weerdinge",
  "Weere",
  "Weert",
  "Weerwille",
  "Wehe",
  "Wehl",
  "Weidum",
  "Weij",
  "Weijer",
  "Weijpoort",
  "Weilens",
  "Weimeren",
  "Weipoort",
  "Weite",
  "Weitemans",
  "Weiwerd",
  "Wekerom",
  "Wele",
  "Wells",
  "Welsum",
  "Wely",
  "Wenum",
  "Weper",
  "Wercheren",
  "Weren",
  "Wergea",
  "Werk",
  "Wernhouts",
  "Wesch",
  "Wessing",
  "Wessinge",
  "West",
  "Westeneng",
  "Wester",
  "Westerein",
  "Westerlee",
  "Westernie",
  "Westerse",
  "Westhim",
  "Westlaren",
  "Westmaas",
  "Westrik",
  "Wetering",
  "Wetsens",
  "Weurt",
  "Wevers",
  "Weverslo",
  "Wezel",
  "Wezep",
  "Wezup",
  "Wezuper",
  "Wielder",
  "Wieler",
  "Wielse",
  "Wiene",
  "Wierren",
  "Wierum",
  "Wiesel",
  "Wieuwens",
  "Wijchen",
  "Wijnaldum",
  "Wijnb",
  "Wijnje",
  "Wijster",
  "Wijthmen",
  "Wijzend",
  "Wilderhof",
  "Wildert",
  "Wilgen",
  "Wilp",
  "Wils",
  "Wilsum",
  "Winde",
  "Windraak",
  "Winkel",
  "Winkels",
  "Winssen",
  "Winsum",
  "Wintelre",
  "Winthagen",
  "Wirdum",
  "Wisse",
  "Wissel",
  "Wissen",
  "Witharen",
  "Withuis",
  "Witman",
  "Witmarsum",
  "Witrijt",
  "Witte",
  "Wittelte",
  "Witten",
  "Wiuwert",
  "Wjelsryp",
  "Woerd",
  "Woerdense",
  "Woezik",
  "Wognum",
  "Wolfers",
  "Wolfhaag",
  "Wolfhagen",
  "Wolfheze",
  "Wolfs",
  "Wolfshuis",
  "Wolling",
  "Wolsum",
  "Wommels",
  "Wonne",
  "Wons",
  "Woord",
  "Wopereis",
  "Wordragen",
  "Wormer",
  "Worsum",
  "Woubrugge",
  "Wouwse",
  "Wulpenbek",
  "Wyns",
  "Wytgaard",
  "Wâldsein",
  "Wânswert",
  "Yerseke",
  "Yndyk",
  "Zaamslag",
  "Zaarvlaas",
  "Zalk",
  "Zand",
  "Zande",
  "Zandfort",
  "Zandkant",
  "Zandoerle",
  "Zandplaat",
  "Zandpol",
  "Zandput",
  "Zandvoort",
  "Zee",
  "Zeegat",
  "Zeegse",
  "Zeerijp",
  "Zeesse",
  "Zegge",
  "Zeijen",
  "Zeijer",
  "Zeist",
  "Zelder",
  "Zelen",
  "Zelt",
  "Zenderen",
  "Zethuis",
  "Zeven",
  "Zevenhuis",
  "Zierikzee",
  "Zieuwent",
  "Zijder",
  "Zijdewind",
  "Zijp",
  "Zijper",
  "Zijtaart",
  "Zilven",
  "Zinkweg",
  "Zittard",
  "Zoeke",
  "Zoelen",
  "Zoelmond",
  "Zoerte",
  "Zoeter",
  "Zoggel",
  "Zomerven",
  "Zond",
  "Zorgvlied",
  "Zoutkamp",
  "Zuid",
  "Zuider",
  "Zuidhorn",
  "Zuidlaren",
  "Zuidwolde",
  "Zuidzande",
  "Zuidzijde",
  "Zuilichem",
  "Zundert",
  "Zurich",
  "Zutphen",
  "Zuuk",
  "Zwaag",
  "Zwager",
  "Zwanegat",
  "Zwart",
  "Zwarte",
  "Zweek",
  "Zwiggelte",
  "Zwijn",
  "Zwinderen",
  "Zwolle"
];

},{}],"node_modules/faker/lib/locales/nl/address/city_suffix.js":[function(require,module,exports) {
module["exports"] = [
  " aan de IJssel",
  " aan de Rijn",
  "ambacht",
  "beek",
  "berg",
  "bergen",
  "bosch",
  "broek",
  "brug",
  "buren",
  "burg",
  "buurt",
  "dam",
  "dijk",
  "dijke",
  "donk",
  "dorp",
  "eind",
  "enmaes",
  "gat",
  "geest",
  "heide",
  "hoek",
  "horst",
  "hout",
  "hoven",
  "huizen",
  "ingen",
  "kerk",
  "laar",
  "land",
  "meer",
  "recht",
  "schoten",
  "sluis",
  "stroom",
  "swaerd",
  "veen",
  "veld",
  "vliet",
  "weer",
  "wier",
  "wijk",
  "woud",
  "woude",
  "zijl",
  ""
];

},{}],"node_modules/faker/lib/locales/nl/address/city.js":[function(require,module,exports) {
module["exports"] = [
  "#{city_prefix}#{city_suffix}",
  "#{city_prefix}"
];

},{}],"node_modules/faker/lib/locales/nl/address/country.js":[function(require,module,exports) {
module["exports"] = [
  "Afghanistan",
  "Akrotiri",
  "Albanië",
  "Algerije",
  "Amerikaanse Maagdeneilanden",
  "Amerikaans-Samoa",
  "Andorra",
  "Angola",
  "Anguilla",
  "Antarctica",
  "Antigua en Barbuda",
  "Arctic Ocean",
  "Argentinië",
  "Armenië",
  "Aruba",
  "Ashmore and Cartier Islands",
  "Atlantic Ocean",
  "Australië",
  "Azerbeidzjan",
  "Bahama's",
  "Bahrein",
  "Bangladesh",
  "Barbados",
  "Belarus",
  "België",
  "Belize",
  "Benin",
  "Bermuda",
  "Bhutan",
  "Bolivië",
  "Bosnië-Herzegovina",
  "Botswana",
  "Bouvet Island",
  "Brazilië",
  "British Indian Ocean Territory",
  "Britse Maagdeneilanden",
  "Brunei",
  "Bulgarije",
  "Burkina Faso",
  "Burundi",
  "Cambodja",
  "Canada",
  "Caymaneilanden",
  "Centraal-Afrikaanse Republiek",
  "Chili",
  "China",
  "Christmas Island",
  "Clipperton Island",
  "Cocos (Keeling) Islands",
  "Colombia",
  "Comoren (Unie)",
  "Congo (Democratische Republiek)",
  "Congo (Volksrepubliek)",
  "Cook",
  "Coral Sea Islands",
  "Costa Rica",
  "Cuba",
  "Cyprus",
  "Denemarken",
  "Dhekelia",
  "Djibouti",
  "Dominica",
  "Dominicaanse Republiek",
  "Duitsland",
  "Ecuador",
  "Egypte",
  "El Salvador",
  "Equatoriaal-Guinea",
  "Eritrea",
  "Estland",
  "Ethiopië",
  "European Union",
  "Falkland",
  "Faroe Islands",
  "Fiji",
  "Filipijnen",
  "Finland",
  "Frankrijk",
  "Frans-Polynesië",
  "French Southern and Antarctic Lands",
  "Gabon",
  "Gambia",
  "Gaza Strip",
  "Georgië",
  "Ghana",
  "Gibraltar",
  "Grenada",
  "Griekenland",
  "Groenland",
  "Guam",
  "Guatemala",
  "Guernsey",
  "Guinea",
  "Guinee-Bissau",
  "Guyana",
  "Haïti",
  "Heard Island and McDonald Islands",
  "Heilige Stoel",
  "Honduras",
  "Hongarije",
  "Hongkong",
  "Ierland",
  "IJsland",
  "India",
  "Indian Ocean",
  "Indonesië",
  "Irak",
  "Iran",
  "Isle of Man",
  "Israël",
  "Italië",
  "Ivoorkust",
  "Jamaica",
  "Jan Mayen",
  "Japan",
  "Jemen",
  "Jersey",
  "Jordanië",
  "Kaapverdië",
  "Kameroen",
  "Kazachstan",
  "Kenia",
  "Kirgizstan",
  "Kiribati",
  "Koeweit",
  "Kroatië",
  "Laos",
  "Lesotho",
  "Letland",
  "Libanon",
  "Liberia",
  "Libië",
  "Liechtenstein",
  "Litouwen",
  "Luxemburg",
  "Macao",
  "Macedonië",
  "Madagaskar",
  "Malawi",
  "Maldiven",
  "Maleisië",
  "Mali",
  "Malta",
  "Marokko",
  "Marshall Islands",
  "Mauritanië",
  "Mauritius",
  "Mayotte",
  "Mexico",
  "Micronesia, Federated States of",
  "Moldavië",
  "Monaco",
  "Mongolië",
  "Montenegro",
  "Montserrat",
  "Mozambique",
  "Myanmar",
  "Namibië",
  "Nauru",
  "Navassa Island",
  "Nederland",
  "Nederlandse Antillen",
  "Nepal",
  "Ngwane",
  "Nicaragua",
  "Nieuw-Caledonië",
  "Nieuw-Zeeland",
  "Niger",
  "Nigeria",
  "Niue",
  "Noordelijke Marianen",
  "Noord-Korea",
  "Noorwegen",
  "Norfolk Island",
  "Oekraïne",
  "Oezbekistan",
  "Oman",
  "Oostenrijk",
  "Pacific Ocean",
  "Pakistan",
  "Palau",
  "Panama",
  "Papoea-Nieuw-Guinea",
  "Paracel Islands",
  "Paraguay",
  "Peru",
  "Pitcairn",
  "Polen",
  "Portugal",
  "Puerto Rico",
  "Qatar",
  "Roemenië",
  "Rusland",
  "Rwanda",
  "Saint Helena",
  "Saint Lucia",
  "Saint Vincent en de Grenadines",
  "Saint-Pierre en Miquelon",
  "Salomon",
  "Samoa",
  "San Marino",
  "São Tomé en Principe",
  "Saudi-Arabië",
  "Senegal",
  "Servië",
  "Seychellen",
  "Sierra Leone",
  "Singapore",
  "Sint-Kitts en Nevis",
  "Slovenië",
  "Slowakije",
  "Soedan",
  "Somalië",
  "South Georgia and the South Sandwich Islands",
  "Southern Ocean",
  "Spanje",
  "Spratly Islands",
  "Sri Lanka",
  "Suriname",
  "Svalbard",
  "Syrië",
  "Tadzjikistan",
  "Taiwan",
  "Tanzania",
  "Thailand",
  "Timor Leste",
  "Togo",
  "Tokelau",
  "Tonga",
  "Trinidad en Tobago",
  "Tsjaad",
  "Tsjechië",
  "Tunesië",
  "Turkije",
  "Turkmenistan",
  "Turks-en Caicoseilanden",
  "Tuvalu",
  "Uganda",
  "Uruguay",
  "Vanuatu",
  "Venezuela",
  "Verenigd Koninkrijk",
  "Verenigde Arabische Emiraten",
  "Verenigde Staten van Amerika",
  "Vietnam",
  "Wake Island",
  "Wallis en Futuna",
  "Wereld",
  "West Bank",
  "Westelijke Sahara",
  "Zambia",
  "Zimbabwe",
  "Zuid-Afrika",
  "Zuid-Korea",
  "Zweden",
  "Zwitserland"
];

},{}],"node_modules/faker/lib/locales/nl/address/building_number.js":[function(require,module,exports) {
module["exports"] = [
  "#",
  "##",
  "###",
  "###a",
  "###b",
  "###c",
  "### I",
  "### II",
  "### III"
];

},{}],"node_modules/faker/lib/locales/nl/address/street_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "straat",
  "laan",
  "weg",
  "plantsoen",
  "park"
];

},{}],"node_modules/faker/lib/locales/nl/address/secondary_address.js":[function(require,module,exports) {
module["exports"] = [
  "1 hoog",
  "2 hoog",
  "3 hoog"
];

},{}],"node_modules/faker/lib/locales/nl/address/street_name.js":[function(require,module,exports) {
module["exports"] = [
  "#{Name.first_name}#{street_suffix}",
  "#{Name.last_name}#{street_suffix}"
];

},{}],"node_modules/faker/lib/locales/nl/address/street_address.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_name} #{building_number}"
];

},{}],"node_modules/faker/lib/locales/nl/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "#### ??"
];

},{}],"node_modules/faker/lib/locales/nl/address/state.js":[function(require,module,exports) {
module["exports"] = [
  "Noord-Holland",
  "Zuid-Holland",
  "Utrecht",
  "Zeeland",
  "Overijssel",
  "Gelderland",
  "Drenthe",
  "Friesland",
  "Groningen",
  "Noord-Brabant",
  "Limburg",
  "Flevoland"
];

},{}],"node_modules/faker/lib/locales/nl/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "Nederland"
];

},{}],"node_modules/faker/lib/locales/nl/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.city_prefix = require("./city_prefix");
address.city_suffix = require("./city_suffix");
address.city = require("./city");
address.country = require("./country");
address.building_number = require("./building_number");
address.street_suffix = require("./street_suffix");
address.secondary_address = require("./secondary_address");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.postcode = require("./postcode");
address.state = require("./state");
address.default_country = require("./default_country");

},{"./city_prefix":"node_modules/faker/lib/locales/nl/address/city_prefix.js","./city_suffix":"node_modules/faker/lib/locales/nl/address/city_suffix.js","./city":"node_modules/faker/lib/locales/nl/address/city.js","./country":"node_modules/faker/lib/locales/nl/address/country.js","./building_number":"node_modules/faker/lib/locales/nl/address/building_number.js","./street_suffix":"node_modules/faker/lib/locales/nl/address/street_suffix.js","./secondary_address":"node_modules/faker/lib/locales/nl/address/secondary_address.js","./street_name":"node_modules/faker/lib/locales/nl/address/street_name.js","./street_address":"node_modules/faker/lib/locales/nl/address/street_address.js","./postcode":"node_modules/faker/lib/locales/nl/address/postcode.js","./state":"node_modules/faker/lib/locales/nl/address/state.js","./default_country":"node_modules/faker/lib/locales/nl/address/default_country.js"}],"node_modules/faker/lib/locales/nl/company/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "BV",
  "V.O.F.",
  "Group",
  "en Zonen"
];

},{}],"node_modules/faker/lib/locales/nl/company/index.js":[function(require,module,exports) {
var company = {};
module['exports'] = company;
company.suffix = require("./suffix");

},{"./suffix":"node_modules/faker/lib/locales/nl/company/suffix.js"}],"node_modules/faker/lib/locales/nl/internet/free_email.js":[function(require,module,exports) {
module["exports"] = [
  "gmail.com",
  "yahoo.com",
  "hotmail.com"
];

},{}],"node_modules/faker/lib/locales/nl/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "nl",
  "com",
  "net",
  "org"
];

},{}],"node_modules/faker/lib/locales/nl/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.free_email = require("./free_email");
internet.domain_suffix = require("./domain_suffix");

},{"./free_email":"node_modules/faker/lib/locales/nl/internet/free_email.js","./domain_suffix":"node_modules/faker/lib/locales/nl/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/nl/lorem/words.js":[function(require,module,exports) {
module["exports"] = [
  "alias",
  "consequatur",
  "aut",
  "perferendis",
  "sit",
  "voluptatem",
  "accusantium",
  "doloremque",
  "aperiam",
  "eaque",
  "ipsa",
  "quae",
  "ab",
  "illo",
  "inventore",
  "veritatis",
  "et",
  "quasi",
  "architecto",
  "beatae",
  "vitae",
  "dicta",
  "sunt",
  "explicabo",
  "aspernatur",
  "aut",
  "odit",
  "aut",
  "fugit",
  "sed",
  "quia",
  "consequuntur",
  "magni",
  "dolores",
  "eos",
  "qui",
  "ratione",
  "voluptatem",
  "sequi",
  "nesciunt",
  "neque",
  "dolorem",
  "ipsum",
  "quia",
  "dolor",
  "sit",
  "amet",
  "consectetur",
  "adipisci",
  "velit",
  "sed",
  "quia",
  "non",
  "numquam",
  "eius",
  "modi",
  "tempora",
  "incidunt",
  "ut",
  "labore",
  "et",
  "dolore",
  "magnam",
  "aliquam",
  "quaerat",
  "voluptatem",
  "ut",
  "enim",
  "ad",
  "minima",
  "veniam",
  "quis",
  "nostrum",
  "exercitationem",
  "ullam",
  "corporis",
  "nemo",
  "enim",
  "ipsam",
  "voluptatem",
  "quia",
  "voluptas",
  "sit",
  "suscipit",
  "laboriosam",
  "nisi",
  "ut",
  "aliquid",
  "ex",
  "ea",
  "commodi",
  "consequatur",
  "quis",
  "autem",
  "vel",
  "eum",
  "iure",
  "reprehenderit",
  "qui",
  "in",
  "ea",
  "voluptate",
  "velit",
  "esse",
  "quam",
  "nihil",
  "molestiae",
  "et",
  "iusto",
  "odio",
  "dignissimos",
  "ducimus",
  "qui",
  "blanditiis",
  "praesentium",
  "laudantium",
  "totam",
  "rem",
  "voluptatum",
  "deleniti",
  "atque",
  "corrupti",
  "quos",
  "dolores",
  "et",
  "quas",
  "molestias",
  "excepturi",
  "sint",
  "occaecati",
  "cupiditate",
  "non",
  "provident",
  "sed",
  "ut",
  "perspiciatis",
  "unde",
  "omnis",
  "iste",
  "natus",
  "error",
  "similique",
  "sunt",
  "in",
  "culpa",
  "qui",
  "officia",
  "deserunt",
  "mollitia",
  "animi",
  "id",
  "est",
  "laborum",
  "et",
  "dolorum",
  "fuga",
  "et",
  "harum",
  "quidem",
  "rerum",
  "facilis",
  "est",
  "et",
  "expedita",
  "distinctio",
  "nam",
  "libero",
  "tempore",
  "cum",
  "soluta",
  "nobis",
  "est",
  "eligendi",
  "optio",
  "cumque",
  "nihil",
  "impedit",
  "quo",
  "porro",
  "quisquam",
  "est",
  "qui",
  "minus",
  "id",
  "quod",
  "maxime",
  "placeat",
  "facere",
  "possimus",
  "omnis",
  "voluptas",
  "assumenda",
  "est",
  "omnis",
  "dolor",
  "repellendus",
  "temporibus",
  "autem",
  "quibusdam",
  "et",
  "aut",
  "consequatur",
  "vel",
  "illum",
  "qui",
  "dolorem",
  "eum",
  "fugiat",
  "quo",
  "voluptas",
  "nulla",
  "pariatur",
  "at",
  "vero",
  "eos",
  "et",
  "accusamus",
  "officiis",
  "debitis",
  "aut",
  "rerum",
  "necessitatibus",
  "saepe",
  "eveniet",
  "ut",
  "et",
  "voluptates",
  "repudiandae",
  "sint",
  "et",
  "molestiae",
  "non",
  "recusandae",
  "itaque",
  "earum",
  "rerum",
  "hic",
  "tenetur",
  "a",
  "sapiente",
  "delectus",
  "ut",
  "aut",
  "reiciendis",
  "voluptatibus",
  "maiores",
  "doloribus",
  "asperiores",
  "repellat"
];

},{}],"node_modules/faker/lib/locales/nl/lorem/supplemental.js":[function(require,module,exports) {
module["exports"] = [
  "abbas",
  "abduco",
  "abeo",
  "abscido",
  "absconditus",
  "absens",
  "absorbeo",
  "absque",
  "abstergo",
  "absum",
  "abundans",
  "abutor",
  "accedo",
  "accendo",
  "acceptus",
  "accipio",
  "accommodo",
  "accusator",
  "acer",
  "acerbitas",
  "acervus",
  "acidus",
  "acies",
  "acquiro",
  "acsi",
  "adamo",
  "adaugeo",
  "addo",
  "adduco",
  "ademptio",
  "adeo",
  "adeptio",
  "adfectus",
  "adfero",
  "adficio",
  "adflicto",
  "adhaero",
  "adhuc",
  "adicio",
  "adimpleo",
  "adinventitias",
  "adipiscor",
  "adiuvo",
  "administratio",
  "admiratio",
  "admitto",
  "admoneo",
  "admoveo",
  "adnuo",
  "adopto",
  "adsidue",
  "adstringo",
  "adsuesco",
  "adsum",
  "adulatio",
  "adulescens",
  "adultus",
  "aduro",
  "advenio",
  "adversus",
  "advoco",
  "aedificium",
  "aeger",
  "aegre",
  "aegrotatio",
  "aegrus",
  "aeneus",
  "aequitas",
  "aequus",
  "aer",
  "aestas",
  "aestivus",
  "aestus",
  "aetas",
  "aeternus",
  "ager",
  "aggero",
  "aggredior",
  "agnitio",
  "agnosco",
  "ago",
  "ait",
  "aiunt",
  "alienus",
  "alii",
  "alioqui",
  "aliqua",
  "alius",
  "allatus",
  "alo",
  "alter",
  "altus",
  "alveus",
  "amaritudo",
  "ambitus",
  "ambulo",
  "amicitia",
  "amiculum",
  "amissio",
  "amita",
  "amitto",
  "amo",
  "amor",
  "amoveo",
  "amplexus",
  "amplitudo",
  "amplus",
  "ancilla",
  "angelus",
  "angulus",
  "angustus",
  "animadverto",
  "animi",
  "animus",
  "annus",
  "anser",
  "ante",
  "antea",
  "antepono",
  "antiquus",
  "aperio",
  "aperte",
  "apostolus",
  "apparatus",
  "appello",
  "appono",
  "appositus",
  "approbo",
  "apto",
  "aptus",
  "apud",
  "aqua",
  "ara",
  "aranea",
  "arbitro",
  "arbor",
  "arbustum",
  "arca",
  "arceo",
  "arcesso",
  "arcus",
  "argentum",
  "argumentum",
  "arguo",
  "arma",
  "armarium",
  "armo",
  "aro",
  "ars",
  "articulus",
  "artificiose",
  "arto",
  "arx",
  "ascisco",
  "ascit",
  "asper",
  "aspicio",
  "asporto",
  "assentator",
  "astrum",
  "atavus",
  "ater",
  "atqui",
  "atrocitas",
  "atrox",
  "attero",
  "attollo",
  "attonbitus",
  "auctor",
  "auctus",
  "audacia",
  "audax",
  "audentia",
  "audeo",
  "audio",
  "auditor",
  "aufero",
  "aureus",
  "auris",
  "aurum",
  "aut",
  "autem",
  "autus",
  "auxilium",
  "avaritia",
  "avarus",
  "aveho",
  "averto",
  "avoco",
  "baiulus",
  "balbus",
  "barba",
  "bardus",
  "basium",
  "beatus",
  "bellicus",
  "bellum",
  "bene",
  "beneficium",
  "benevolentia",
  "benigne",
  "bestia",
  "bibo",
  "bis",
  "blandior",
  "bonus",
  "bos",
  "brevis",
  "cado",
  "caecus",
  "caelestis",
  "caelum",
  "calamitas",
  "calcar",
  "calco",
  "calculus",
  "callide",
  "campana",
  "candidus",
  "canis",
  "canonicus",
  "canto",
  "capillus",
  "capio",
  "capitulus",
  "capto",
  "caput",
  "carbo",
  "carcer",
  "careo",
  "caries",
  "cariosus",
  "caritas",
  "carmen",
  "carpo",
  "carus",
  "casso",
  "caste",
  "casus",
  "catena",
  "caterva",
  "cattus",
  "cauda",
  "causa",
  "caute",
  "caveo",
  "cavus",
  "cedo",
  "celebrer",
  "celer",
  "celo",
  "cena",
  "cenaculum",
  "ceno",
  "censura",
  "centum",
  "cerno",
  "cernuus",
  "certe",
  "certo",
  "certus",
  "cervus",
  "cetera",
  "charisma",
  "chirographum",
  "cibo",
  "cibus",
  "cicuta",
  "cilicium",
  "cimentarius",
  "ciminatio",
  "cinis",
  "circumvenio",
  "cito",
  "civis",
  "civitas",
  "clam",
  "clamo",
  "claro",
  "clarus",
  "claudeo",
  "claustrum",
  "clementia",
  "clibanus",
  "coadunatio",
  "coaegresco",
  "coepi",
  "coerceo",
  "cogito",
  "cognatus",
  "cognomen",
  "cogo",
  "cohaero",
  "cohibeo",
  "cohors",
  "colligo",
  "colloco",
  "collum",
  "colo",
  "color",
  "coma",
  "combibo",
  "comburo",
  "comedo",
  "comes",
  "cometes",
  "comis",
  "comitatus",
  "commemoro",
  "comminor",
  "commodo",
  "communis",
  "comparo",
  "compello",
  "complectus",
  "compono",
  "comprehendo",
  "comptus",
  "conatus",
  "concedo",
  "concido",
  "conculco",
  "condico",
  "conduco",
  "confero",
  "confido",
  "conforto",
  "confugo",
  "congregatio",
  "conicio",
  "coniecto",
  "conitor",
  "coniuratio",
  "conor",
  "conqueror",
  "conscendo",
  "conservo",
  "considero",
  "conspergo",
  "constans",
  "consuasor",
  "contabesco",
  "contego",
  "contigo",
  "contra",
  "conturbo",
  "conventus",
  "convoco",
  "copia",
  "copiose",
  "cornu",
  "corona",
  "corpus",
  "correptius",
  "corrigo",
  "corroboro",
  "corrumpo",
  "coruscus",
  "cotidie",
  "crapula",
  "cras",
  "crastinus",
  "creator",
  "creber",
  "crebro",
  "credo",
  "creo",
  "creptio",
  "crepusculum",
  "cresco",
  "creta",
  "cribro",
  "crinis",
  "cruciamentum",
  "crudelis",
  "cruentus",
  "crur",
  "crustulum",
  "crux",
  "cubicularis",
  "cubitum",
  "cubo",
  "cui",
  "cuius",
  "culpa",
  "culpo",
  "cultellus",
  "cultura",
  "cum",
  "cunabula",
  "cunae",
  "cunctatio",
  "cupiditas",
  "cupio",
  "cuppedia",
  "cupressus",
  "cur",
  "cura",
  "curatio",
  "curia",
  "curiositas",
  "curis",
  "curo",
  "curriculum",
  "currus",
  "cursim",
  "curso",
  "cursus",
  "curto",
  "curtus",
  "curvo",
  "curvus",
  "custodia",
  "damnatio",
  "damno",
  "dapifer",
  "debeo",
  "debilito",
  "decens",
  "decerno",
  "decet",
  "decimus",
  "decipio",
  "decor",
  "decretum",
  "decumbo",
  "dedecor",
  "dedico",
  "deduco",
  "defaeco",
  "defendo",
  "defero",
  "defessus",
  "defetiscor",
  "deficio",
  "defigo",
  "defleo",
  "defluo",
  "defungo",
  "degenero",
  "degero",
  "degusto",
  "deinde",
  "delectatio",
  "delego",
  "deleo",
  "delibero",
  "delicate",
  "delinquo",
  "deludo",
  "demens",
  "demergo",
  "demitto",
  "demo",
  "demonstro",
  "demoror",
  "demulceo",
  "demum",
  "denego",
  "denique",
  "dens",
  "denuncio",
  "denuo",
  "deorsum",
  "depereo",
  "depono",
  "depopulo",
  "deporto",
  "depraedor",
  "deprecator",
  "deprimo",
  "depromo",
  "depulso",
  "deputo",
  "derelinquo",
  "derideo",
  "deripio",
  "desidero",
  "desino",
  "desipio",
  "desolo",
  "desparatus",
  "despecto",
  "despirmatio",
  "infit",
  "inflammatio",
  "paens",
  "patior",
  "patria",
  "patrocinor",
  "patruus",
  "pauci",
  "paulatim",
  "pauper",
  "pax",
  "peccatus",
  "pecco",
  "pecto",
  "pectus",
  "pecunia",
  "pecus",
  "peior",
  "pel",
  "ocer",
  "socius",
  "sodalitas",
  "sol",
  "soleo",
  "solio",
  "solitudo",
  "solium",
  "sollers",
  "sollicito",
  "solum",
  "solus",
  "solutio",
  "solvo",
  "somniculosus",
  "somnus",
  "sonitus",
  "sono",
  "sophismata",
  "sopor",
  "sordeo",
  "sortitus",
  "spargo",
  "speciosus",
  "spectaculum",
  "speculum",
  "sperno",
  "spero",
  "spes",
  "spiculum",
  "spiritus",
  "spoliatio",
  "sponte",
  "stabilis",
  "statim",
  "statua",
  "stella",
  "stillicidium",
  "stipes",
  "stips",
  "sto",
  "strenuus",
  "strues",
  "studio",
  "stultus",
  "suadeo",
  "suasoria",
  "sub",
  "subito",
  "subiungo",
  "sublime",
  "subnecto",
  "subseco",
  "substantia",
  "subvenio",
  "succedo",
  "succurro",
  "sufficio",
  "suffoco",
  "suffragium",
  "suggero",
  "sui",
  "sulum",
  "sum",
  "summa",
  "summisse",
  "summopere",
  "sumo",
  "sumptus",
  "supellex",
  "super",
  "suppellex",
  "supplanto",
  "suppono",
  "supra",
  "surculus",
  "surgo",
  "sursum",
  "suscipio",
  "suspendo",
  "sustineo",
  "suus",
  "synagoga",
  "tabella",
  "tabernus",
  "tabesco",
  "tabgo",
  "tabula",
  "taceo",
  "tactus",
  "taedium",
  "talio",
  "talis",
  "talus",
  "tam",
  "tamdiu",
  "tamen",
  "tametsi",
  "tamisium",
  "tamquam",
  "tandem",
  "tantillus",
  "tantum",
  "tardus",
  "tego",
  "temeritas",
  "temperantia",
  "templum",
  "temptatio",
  "tempus",
  "tenax",
  "tendo",
  "teneo",
  "tener",
  "tenuis",
  "tenus",
  "tepesco",
  "tepidus",
  "ter",
  "terebro",
  "teres",
  "terga",
  "tergeo",
  "tergiversatio",
  "tergo",
  "tergum",
  "termes",
  "terminatio",
  "tero",
  "terra",
  "terreo",
  "territo",
  "terror",
  "tersus",
  "tertius",
  "testimonium",
  "texo",
  "textilis",
  "textor",
  "textus",
  "thalassinus",
  "theatrum",
  "theca",
  "thema",
  "theologus",
  "thermae",
  "thesaurus",
  "thesis",
  "thorax",
  "thymbra",
  "thymum",
  "tibi",
  "timidus",
  "timor",
  "titulus",
  "tolero",
  "tollo",
  "tondeo",
  "tonsor",
  "torqueo",
  "torrens",
  "tot",
  "totidem",
  "toties",
  "totus",
  "tracto",
  "trado",
  "traho",
  "trans",
  "tredecim",
  "tremo",
  "trepide",
  "tres",
  "tribuo",
  "tricesimus",
  "triduana",
  "triginta",
  "tripudio",
  "tristis",
  "triumphus",
  "trucido",
  "truculenter",
  "tubineus",
  "tui",
  "tum",
  "tumultus",
  "tunc",
  "turba",
  "turbo",
  "turpe",
  "turpis",
  "tutamen",
  "tutis",
  "tyrannus",
  "uberrime",
  "ubi",
  "ulciscor",
  "ullus",
  "ulterius",
  "ultio",
  "ultra",
  "umbra",
  "umerus",
  "umquam",
  "una",
  "unde",
  "undique",
  "universe",
  "unus",
  "urbanus",
  "urbs",
  "uredo",
  "usitas",
  "usque",
  "ustilo",
  "ustulo",
  "usus",
  "uter",
  "uterque",
  "utilis",
  "utique",
  "utor",
  "utpote",
  "utrimque",
  "utroque",
  "utrum",
  "uxor",
  "vaco",
  "vacuus",
  "vado",
  "vae",
  "valde",
  "valens",
  "valeo",
  "valetudo",
  "validus",
  "vallum",
  "vapulus",
  "varietas",
  "varius",
  "vehemens",
  "vel",
  "velociter",
  "velum",
  "velut",
  "venia",
  "venio",
  "ventito",
  "ventosus",
  "ventus",
  "venustas",
  "ver",
  "verbera",
  "verbum",
  "vere",
  "verecundia",
  "vereor",
  "vergo",
  "veritas",
  "vero",
  "versus",
  "verto",
  "verumtamen",
  "verus",
  "vesco",
  "vesica",
  "vesper",
  "vespillo",
  "vester",
  "vestigium",
  "vestrum",
  "vetus",
  "via",
  "vicinus",
  "vicissitudo",
  "victoria",
  "victus",
  "videlicet",
  "video",
  "viduata",
  "viduo",
  "vigilo",
  "vigor",
  "vilicus",
  "vilis",
  "vilitas",
  "villa",
  "vinco",
  "vinculum",
  "vindico",
  "vinitor",
  "vinum",
  "vir",
  "virga",
  "virgo",
  "viridis",
  "viriliter",
  "virtus",
  "vis",
  "viscus",
  "vita",
  "vitiosus",
  "vitium",
  "vito",
  "vivo",
  "vix",
  "vobis",
  "vociferor",
  "voco",
  "volaticus",
  "volo",
  "volubilis",
  "voluntarius",
  "volup",
  "volutabrum",
  "volva",
  "vomer",
  "vomica",
  "vomito",
  "vorago",
  "vorax",
  "voro",
  "vos",
  "votum",
  "voveo",
  "vox",
  "vulariter",
  "vulgaris",
  "vulgivagus",
  "vulgo",
  "vulgus",
  "vulnero",
  "vulnus",
  "vulpes",
  "vulticulus",
  "vultuosus",
  "xiphias"
];

},{}],"node_modules/faker/lib/locales/nl/lorem/index.js":[function(require,module,exports) {
var lorem = {};
module['exports'] = lorem;
lorem.words = require("./words");
lorem.supplemental = require("./supplemental");

},{"./words":"node_modules/faker/lib/locales/nl/lorem/words.js","./supplemental":"node_modules/faker/lib/locales/nl/lorem/supplemental.js"}],"node_modules/faker/lib/locales/nl/name/first_name.js":[function(require,module,exports) {
module["exports"] = [
  "Amber",
  "Anna",
  "Anne",
  "Anouk",
  "Bas",
  "Bram",
  "Britt",
  "Daan",
  "Emma",
  "Eva",
  "Femke",
  "Finn",
  "Fleur",
  "Iris",
  "Isa",
  "Jan",
  "Jasper",
  "Jayden",
  "Jesse",
  "Johannes",
  "Julia",
  "Julian",
  "Kevin",
  "Lars",
  "Lieke",
  "Lisa",
  "Lotte",
  "Lucas",
  "Luuk",
  "Maud",
  "Max",
  "Mike",
  "Milan",
  "Nick",
  "Niels",
  "Noa",
  "Rick",
  "Roos",
  "Ruben",
  "Sander",
  "Sanne",
  "Sem",
  "Sophie",
  "Stijn",
  "Sven",
  "Thijs",
  "Thijs",
  "Thomas",
  "Tim",
  "Tom"
];

},{}],"node_modules/faker/lib/locales/nl/name/tussenvoegsel.js":[function(require,module,exports) {
module["exports"] = [
  "van",
  "van de",
  "van den",
  "van 't",
  "van het",
  "de",
  "den"
];

},{}],"node_modules/faker/lib/locales/nl/name/last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Bakker",
  "Beek",
  "Berg",
  "Boer",
  "Bos",
  "Bosch",
  "Brink",
  "Broek",
  "Brouwer",
  "Bruin",
  "Dam",
  "Dekker",
  "Dijk",
  "Dijkstra",
  "Graaf",
  "Groot",
  "Haan",
  "Hendriks",
  "Heuvel",
  "Hoek",
  "Jacobs",
  "Jansen",
  "Janssen",
  "Jong",
  "Klein",
  "Kok",
  "Koning",
  "Koster",
  "Leeuwen",
  "Linden",
  "Maas",
  "Meer",
  "Meijer",
  "Mulder",
  "Peters",
  "Ruiter",
  "Schouten",
  "Smit",
  "Smits",
  "Stichting",
  "Veen",
  "Ven",
  "Vermeulen",
  "Visser",
  "Vliet",
  "Vos",
  "Vries",
  "Wal",
  "Willems",
  "Wit"
];

},{}],"node_modules/faker/lib/locales/nl/name/prefix.js":[function(require,module,exports) {
module["exports"] = [
  "Dhr.",
  "Mevr. Dr.",
  "Bsc",
  "Msc",
  "Prof."
];

},{}],"node_modules/faker/lib/locales/nl/name/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "Jr.",
  "Sr.",
  "I",
  "II",
  "III",
  "IV",
  "V"
];

},{}],"node_modules/faker/lib/locales/nl/name/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{prefix} #{first_name} #{last_name}",
  "#{first_name} #{last_name} #{suffix}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{tussenvoegsel} #{last_name}",
  "#{first_name} #{tussenvoegsel} #{last_name}"
];

},{}],"node_modules/faker/lib/locales/nl/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.tussenvoegsel = require("./tussenvoegsel");
name.last_name = require("./last_name");
name.prefix = require("./prefix");
name.suffix = require("./suffix");
name.name = require("./name");

},{"./first_name":"node_modules/faker/lib/locales/nl/name/first_name.js","./tussenvoegsel":"node_modules/faker/lib/locales/nl/name/tussenvoegsel.js","./last_name":"node_modules/faker/lib/locales/nl/name/last_name.js","./prefix":"node_modules/faker/lib/locales/nl/name/prefix.js","./suffix":"node_modules/faker/lib/locales/nl/name/suffix.js","./name":"node_modules/faker/lib/locales/nl/name/name.js"}],"node_modules/faker/lib/locales/nl/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "(####) ######",
  "##########",
  "06########",
  "06 #### ####"
];

},{}],"node_modules/faker/lib/locales/nl/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/nl/phone_number/formats.js"}],"node_modules/faker/lib/locales/nl/index.js":[function(require,module,exports) {
var nl = {};
module['exports'] = nl;
nl.title = "Dutch";
nl.address = require("./address");
nl.company = require("./company");
nl.internet = require("./internet");
nl.lorem = require("./lorem");
nl.name = require("./name");
nl.phone_number = require("./phone_number");

},{"./address":"node_modules/faker/lib/locales/nl/address/index.js","./company":"node_modules/faker/lib/locales/nl/company/index.js","./internet":"node_modules/faker/lib/locales/nl/internet/index.js","./lorem":"node_modules/faker/lib/locales/nl/lorem/index.js","./name":"node_modules/faker/lib/locales/nl/name/index.js","./phone_number":"node_modules/faker/lib/locales/nl/phone_number/index.js"}],"node_modules/faker/lib/locales/pl/name/first_name.js":[function(require,module,exports) {
module["exports"] = [
  "Aaron",
  "Abraham",
  "Adam",
  "Adrian",
  "Atanazy",
  "Agaton",
  "Alan",
  "Albert",
  "Aleksander",
  "Aleksy",
  "Alfred",
  "Alwar",
  "Ambroży",
  "Anatol",
  "Andrzej",
  "Antoni",
  "Apollinary",
  "Apollo",
  "Arkady",
  "Arkadiusz",
  "Archibald",
  "Arystarch",
  "Arnold",
  "Arseniusz",
  "Artur",
  "August",
  "Baldwin",
  "Bazyli",
  "Benedykt",
  "Beniamin",
  "Bernard",
  "Bertrand",
  "Bertram",
  "Borys",
  "Brajan",
  "Bruno",
  "Cezary",
  "Cecyliusz",
  "Karol",
  "Krystian",
  "Krzysztof",
  "Klarencjusz",
  "Klaudiusz",
  "Klemens",
  "Konrad",
  "Konstanty",
  "Konstantyn",
  "Kornel",
  "Korneliusz",
  "Korneli",
  "Cyryl",
  "Cyrus",
  "Damian",
  "Daniel",
  "Dariusz",
  "Dawid",
  "Dionizy",
  "Demetriusz",
  "Dominik",
  "Donald",
  "Dorian",
  "Edgar",
  "Edmund",
  "Edward",
  "Edwin",
  "Efrem",
  "Efraim",
  "Eliasz",
  "Eleazar",
  "Emil",
  "Emanuel",
  "Erast",
  "Ernest",
  "Eugeniusz",
  "Eustracjusz",
  "Fabian",
  "Feliks",
  "Florian",
  "Franciszek",
  "Fryderyk",
  "Gabriel",
  "Gedeon",
  "Galfryd",
  "Jerzy",
  "Gerald",
  "Gerazym",
  "Gilbert",
  "Gonsalwy",
  "Grzegorz",
  "Gwido",
  "Harald",
  "Henryk",
  "Herbert",
  "Herman",
  "Hilary",
  "Horacy",
  "Hubert",
  "Hugo",
  "Ignacy",
  "Igor",
  "Hilarion",
  "Innocenty",
  "Hipolit",
  "Ireneusz",
  "Erwin",
  "Izaak",
  "Izajasz",
  "Izydor",
  "Jakub",
  "Jeremi",
  "Jeremiasz",
  "Hieronim",
  "Gerald",
  "Joachim",
  "Jan",
  "Janusz",
  "Jonatan",
  "Józef",
  "Jozue",
  "Julian",
  "Juliusz",
  "Justyn",
  "Kalistrat",
  "Kazimierz",
  "Wawrzyniec",
  "Laurenty",
  "Laurencjusz",
  "Łazarz",
  "Leon",
  "Leonard",
  "Leonid",
  "Leon",
  "Ludwik",
  "Łukasz",
  "Lucjan",
  "Magnus",
  "Makary",
  "Marceli",
  "Marek",
  "Marcin",
  "Mateusz",
  "Maurycy",
  "Maksym",
  "Maksymilian",
  "Michał",
  "Miron",
  "Modest",
  "Mojżesz",
  "Natan",
  "Natanael",
  "Nazariusz",
  "Nazary",
  "Nestor",
  "Mikołaj",
  "Nikodem",
  "Olaf",
  "Oleg",
  "Oliwier",
  "Onufry",
  "Orestes",
  "Oskar",
  "Ansgary",
  "Osmund",
  "Pankracy",
  "Pantaleon",
  "Patryk",
  "Patrycjusz",
  "Patrycy",
  "Paweł",
  "Piotr",
  "Filemon",
  "Filip",
  "Platon",
  "Polikarp",
  "Porfiry",
  "Porfiriusz",
  "Prokles",
  "Prokul",
  "Prokop",
  "Kwintyn",
  "Randolf",
  "Rafał",
  "Rajmund",
  "Reginald",
  "Rajnold",
  "Ryszard",
  "Robert",
  "Roderyk",
  "Roger",
  "Roland",
  "Roman",
  "Romeo",
  "Reginald",
  "Rudolf",
  "Samson",
  "Samuel",
  "Salwator",
  "Sebastian",
  "Serafin",
  "Sergiusz",
  "Seweryn",
  "Zygmunt",
  "Sylwester",
  "Szymon",
  "Salomon",
  "Spirydion",
  "Stanisław",
  "Szczepan",
  "Stefan",
  "Terencjusz",
  "Teodor",
  "Tomasz",
  "Tymoteusz",
  "Tobiasz",
  "Walenty",
  "Walentyn",
  "Walerian",
  "Walery",
  "Wiktor",
  "Wincenty",
  "Witalis",
  "Włodzimierz",
  "Władysław",
  "Błażej",
  "Walter",
  "Walgierz",
  "Wacław",
  "Wilfryd",
  "Wilhelm",
  "Ksawery",
  "Ksenofont",
  "Jerzy",
  "Zachariasz",
  "Zachary",
  "Ada",
  "Adelajda",
  "Agata",
  "Agnieszka",
  "Agrypina",
  "Aida",
  "Aleksandra",
  "Alicja",
  "Alina",
  "Amanda",
  "Anastazja",
  "Angela",
  "Andżelika",
  "Angelina",
  "Anna",
  "Hanna",
  "—",
  "Antonina",
  "Ariadna",
  "Aurora",
  "Barbara",
  "Beatrycze",
  "Berta",
  "Brygida",
  "Kamila",
  "Karolina",
  "Karolina",
  "Kornelia",
  "Katarzyna",
  "Cecylia",
  "Karolina",
  "Chloe",
  "Krystyna",
  "Klara",
  "Klaudia",
  "Klementyna",
  "Konstancja",
  "Koralia",
  "Daria",
  "Diana",
  "Dina",
  "Dorota",
  "Edyta",
  "Eleonora",
  "Eliza",
  "Elżbieta",
  "Izabela",
  "Elwira",
  "Emilia",
  "Estera",
  "Eudoksja",
  "Eudokia",
  "Eugenia",
  "Ewa",
  "Ewelina",
  "Ferdynanda",
  "Florencja",
  "Franciszka",
  "Gabriela",
  "Gertruda",
  "Gloria",
  "Gracja",
  "Jadwiga",
  "Helena",
  "Henryka",
  "Nadzieja",
  "Ida",
  "Ilona",
  "Helena",
  "Irena",
  "Irma",
  "Izabela",
  "Izolda",
  "Jakubina",
  "Joanna",
  "Janina",
  "Żaneta",
  "Joanna",
  "Ginewra",
  "Józefina",
  "Judyta",
  "Julia",
  "Julia",
  "Julita",
  "Justyna",
  "Kira",
  "Cyra",
  "Kleopatra",
  "Larysa",
  "Laura",
  "Laurencja",
  "Laurentyna",
  "Lea",
  "Leila",
  "Eleonora",
  "Liliana",
  "Lilianna",
  "Lilia",
  "Lilla",
  "Liza",
  "Eliza",
  "Laura",
  "Ludwika",
  "Luiza",
  "Łucja",
  "Lucja",
  "Lidia",
  "Amabela",
  "Magdalena",
  "Malwina",
  "Małgorzata",
  "Greta",
  "Marianna",
  "Maryna",
  "Marta",
  "Martyna",
  "Maria",
  "Matylda",
  "Maja",
  "Maja",
  "Melania",
  "Michalina",
  "Monika",
  "Nadzieja",
  "Noemi",
  "Natalia",
  "Nikola",
  "Nina",
  "Olga",
  "Olimpia",
  "Oliwia",
  "Ofelia",
  "Patrycja",
  "Paula",
  "Pelagia",
  "Penelopa",
  "Filipa",
  "Paulina",
  "Rachela",
  "Rebeka",
  "Regina",
  "Renata",
  "Rozalia",
  "Róża",
  "Roksana",
  "Rufina",
  "Ruta",
  "Sabina",
  "Sara",
  "Serafina",
  "Sybilla",
  "Sylwia",
  "Zofia",
  "Stella",
  "Stefania",
  "Zuzanna",
  "Tamara",
  "Tacjana",
  "Tekla",
  "Teodora",
  "Teresa",
  "Walentyna",
  "Waleria",
  "Wanesa",
  "Wiara",
  "Weronika",
  "Wiktoria",
  "Wirginia",
  "Bibiana",
  "Bibianna",
  "Wanda",
  "Wilhelmina",
  "Ksawera",
  "Ksenia",
  "Zoe"
];

},{}],"node_modules/faker/lib/locales/pl/name/last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Adamczak",
  "Adamczyk",
  "Adamek",
  "Adamiak",
  "Adamiec",
  "Adamowicz",
  "Adamski",
  "Adamus",
  "Aleksandrowicz",
  "Andrzejczak",
  "Andrzejewski",
  "Antczak",
  "Augustyn",
  "Augustyniak",
  "Bagiński",
  "Balcerzak",
  "Banach",
  "Banasiak",
  "Banasik",
  "Banaś",
  "Baran",
  "Baranowski",
  "Barański",
  "Bartczak",
  "Bartkowiak",
  "Bartnik",
  "Bartosik",
  "Bednarczyk",
  "Bednarek",
  "Bednarski",
  "Bednarz",
  "Białas",
  "Białek",
  "Białkowski",
  "Bielak",
  "Bielawski",
  "Bielecki",
  "Bielski",
  "Bieniek",
  "Biernacki",
  "Biernat",
  "Bieńkowski",
  "Bilski",
  "Bober",
  "Bochenek",
  "Bogucki",
  "Bogusz",
  "Borek",
  "Borkowski",
  "Borowiec",
  "Borowski",
  "Bożek",
  "Broda",
  "Brzeziński",
  "Brzozowski",
  "Buczek",
  "Buczkowski",
  "Buczyński",
  "Budziński",
  "Budzyński",
  "Bujak",
  "Bukowski",
  "Burzyński",
  "Bąk",
  "Bąkowski",
  "Błaszczak",
  "Błaszczyk",
  "Cebula",
  "Chmiel",
  "Chmielewski",
  "Chmura",
  "Chojnacki",
  "Chojnowski",
  "Cholewa",
  "Chrzanowski",
  "Chudzik",
  "Cichocki",
  "Cichoń",
  "Cichy",
  "Ciesielski",
  "Cieśla",
  "Cieślak",
  "Cieślik",
  "Ciszewski",
  "Cybulski",
  "Cygan",
  "Czaja",
  "Czajka",
  "Czajkowski",
  "Czapla",
  "Czarnecki",
  "Czech",
  "Czechowski",
  "Czekaj",
  "Czerniak",
  "Czerwiński",
  "Czyż",
  "Czyżewski",
  "Dec",
  "Dobosz",
  "Dobrowolski",
  "Dobrzyński",
  "Domagała",
  "Domański",
  "Dominiak",
  "Drabik",
  "Drozd",
  "Drozdowski",
  "Drzewiecki",
  "Dróżdż",
  "Dubiel",
  "Duda",
  "Dudek",
  "Dudziak",
  "Dudzik",
  "Dudziński",
  "Duszyński",
  "Dziedzic",
  "Dziuba",
  "Dąbek",
  "Dąbkowski",
  "Dąbrowski",
  "Dębowski",
  "Dębski",
  "Długosz",
  "Falkowski",
  "Fijałkowski",
  "Filipek",
  "Filipiak",
  "Filipowicz",
  "Flak",
  "Flis",
  "Florczak",
  "Florek",
  "Frankowski",
  "Frąckowiak",
  "Frączek",
  "Frątczak",
  "Furman",
  "Gadomski",
  "Gajda",
  "Gajewski",
  "Gaweł",
  "Gawlik",
  "Gawron",
  "Gawroński",
  "Gałka",
  "Gałązka",
  "Gil",
  "Godlewski",
  "Golec",
  "Gołąb",
  "Gołębiewski",
  "Gołębiowski",
  "Grabowski",
  "Graczyk",
  "Grochowski",
  "Grudzień",
  "Gruszczyński",
  "Gruszka",
  "Grzegorczyk",
  "Grzelak",
  "Grzesiak",
  "Grzesik",
  "Grześkowiak",
  "Grzyb",
  "Grzybowski",
  "Grzywacz",
  "Gutowski",
  "Guzik",
  "Gwóźdź",
  "Góra",
  "Góral",
  "Górecki",
  "Górka",
  "Górniak",
  "Górny",
  "Górski",
  "Gąsior",
  "Gąsiorowski",
  "Głogowski",
  "Głowacki",
  "Głąb",
  "Hajduk",
  "Herman",
  "Iwański",
  "Izdebski",
  "Jabłoński",
  "Jackowski",
  "Jagielski",
  "Jagiełło",
  "Jagodziński",
  "Jakubiak",
  "Jakubowski",
  "Janas",
  "Janiak",
  "Janicki",
  "Janik",
  "Janiszewski",
  "Jankowiak",
  "Jankowski",
  "Janowski",
  "Janus",
  "Janusz",
  "Januszewski",
  "Jaros",
  "Jarosz",
  "Jarząbek",
  "Jasiński",
  "Jastrzębski",
  "Jaworski",
  "Jaśkiewicz",
  "Jezierski",
  "Jurek",
  "Jurkiewicz",
  "Jurkowski",
  "Juszczak",
  "Jóźwiak",
  "Jóźwik",
  "Jędrzejczak",
  "Jędrzejczyk",
  "Jędrzejewski",
  "Kacprzak",
  "Kaczmarczyk",
  "Kaczmarek",
  "Kaczmarski",
  "Kaczor",
  "Kaczorowski",
  "Kaczyński",
  "Kaleta",
  "Kalinowski",
  "Kalisz",
  "Kamiński",
  "Kania",
  "Kaniewski",
  "Kapusta",
  "Karaś",
  "Karczewski",
  "Karpiński",
  "Karwowski",
  "Kasperek",
  "Kasprzak",
  "Kasprzyk",
  "Kaszuba",
  "Kawa",
  "Kawecki",
  "Kałuża",
  "Kaźmierczak",
  "Kiełbasa",
  "Kisiel",
  "Kita",
  "Klimczak",
  "Klimek",
  "Kmiecik",
  "Kmieć",
  "Knapik",
  "Kobus",
  "Kogut",
  "Kolasa",
  "Komorowski",
  "Konieczna",
  "Konieczny",
  "Konopka",
  "Kopczyński",
  "Koper",
  "Kopeć",
  "Korzeniowski",
  "Kos",
  "Kosiński",
  "Kosowski",
  "Kostecki",
  "Kostrzewa",
  "Kot",
  "Kotowski",
  "Kowal",
  "Kowalczuk",
  "Kowalczyk",
  "Kowalewski",
  "Kowalik",
  "Kowalski",
  "Koza",
  "Kozak",
  "Kozieł",
  "Kozioł",
  "Kozłowski",
  "Kołakowski",
  "Kołodziej",
  "Kołodziejczyk",
  "Kołodziejski",
  "Krajewski",
  "Krakowiak",
  "Krawczyk",
  "Krawiec",
  "Kruk",
  "Krukowski",
  "Krupa",
  "Krupiński",
  "Kruszewski",
  "Krysiak",
  "Krzemiński",
  "Krzyżanowski",
  "Król",
  "Królikowski",
  "Książek",
  "Kubacki",
  "Kubiak",
  "Kubica",
  "Kubicki",
  "Kubik",
  "Kuc",
  "Kucharczyk",
  "Kucharski",
  "Kuchta",
  "Kuciński",
  "Kuczyński",
  "Kujawa",
  "Kujawski",
  "Kula",
  "Kulesza",
  "Kulig",
  "Kulik",
  "Kuliński",
  "Kurek",
  "Kurowski",
  "Kuś",
  "Kwaśniewski",
  "Kwiatkowski",
  "Kwiecień",
  "Kwieciński",
  "Kędzierski",
  "Kędziora",
  "Kępa",
  "Kłos",
  "Kłosowski",
  "Lach",
  "Laskowski",
  "Lasota",
  "Lech",
  "Lenart",
  "Lesiak",
  "Leszczyński",
  "Lewandowski",
  "Lewicki",
  "Leśniak",
  "Leśniewski",
  "Lipiński",
  "Lipka",
  "Lipski",
  "Lis",
  "Lisiecki",
  "Lisowski",
  "Maciejewski",
  "Maciąg",
  "Mackiewicz",
  "Madej",
  "Maj",
  "Majcher",
  "Majchrzak",
  "Majewski",
  "Majka",
  "Makowski",
  "Malec",
  "Malicki",
  "Malinowski",
  "Maliszewski",
  "Marchewka",
  "Marciniak",
  "Marcinkowski",
  "Marczak",
  "Marek",
  "Markiewicz",
  "Markowski",
  "Marszałek",
  "Marzec",
  "Masłowski",
  "Matusiak",
  "Matuszak",
  "Matuszewski",
  "Matysiak",
  "Mazur",
  "Mazurek",
  "Mazurkiewicz",
  "Maćkowiak",
  "Małecki",
  "Małek",
  "Maślanka",
  "Michalak",
  "Michalczyk",
  "Michalik",
  "Michalski",
  "Michałek",
  "Michałowski",
  "Mielczarek",
  "Mierzejewski",
  "Mika",
  "Mikołajczak",
  "Mikołajczyk",
  "Mikulski",
  "Milczarek",
  "Milewski",
  "Miller",
  "Misiak",
  "Misztal",
  "Miśkiewicz",
  "Modzelewski",
  "Molenda",
  "Morawski",
  "Motyka",
  "Mroczek",
  "Mroczkowski",
  "Mrozek",
  "Mróz",
  "Mucha",
  "Murawski",
  "Musiał",
  "Muszyński",
  "Młynarczyk",
  "Napierała",
  "Nawrocki",
  "Nawrot",
  "Niedziela",
  "Niedzielski",
  "Niedźwiecki",
  "Niemczyk",
  "Niemiec",
  "Niewiadomski",
  "Noga",
  "Nowacki",
  "Nowaczyk",
  "Nowak",
  "Nowakowski",
  "Nowicki",
  "Nowiński",
  "Olczak",
  "Olejniczak",
  "Olejnik",
  "Olszewski",
  "Orzechowski",
  "Orłowski",
  "Osiński",
  "Ossowski",
  "Ostrowski",
  "Owczarek",
  "Paczkowski",
  "Pająk",
  "Pakuła",
  "Paluch",
  "Panek",
  "Partyka",
  "Pasternak",
  "Paszkowski",
  "Pawelec",
  "Pawlak",
  "Pawlicki",
  "Pawlik",
  "Pawlikowski",
  "Pawłowski",
  "Pałka",
  "Piasecki",
  "Piechota",
  "Piekarski",
  "Pietras",
  "Pietruszka",
  "Pietrzak",
  "Pietrzyk",
  "Pilarski",
  "Pilch",
  "Piotrowicz",
  "Piotrowski",
  "Piwowarczyk",
  "Piórkowski",
  "Piątek",
  "Piątkowski",
  "Piłat",
  "Pluta",
  "Podgórski",
  "Polak",
  "Popławski",
  "Porębski",
  "Prokop",
  "Prus",
  "Przybylski",
  "Przybysz",
  "Przybył",
  "Przybyła",
  "Ptak",
  "Puchalski",
  "Pytel",
  "Płonka",
  "Raczyński",
  "Radecki",
  "Radomski",
  "Rak",
  "Rakowski",
  "Ratajczak",
  "Robak",
  "Rogala",
  "Rogalski",
  "Rogowski",
  "Rojek",
  "Romanowski",
  "Rosa",
  "Rosiak",
  "Rosiński",
  "Ruciński",
  "Rudnicki",
  "Rudziński",
  "Rudzki",
  "Rusin",
  "Rutkowski",
  "Rybak",
  "Rybarczyk",
  "Rybicki",
  "Rzepka",
  "Różański",
  "Różycki",
  "Sadowski",
  "Sawicki",
  "Serafin",
  "Siedlecki",
  "Sienkiewicz",
  "Sieradzki",
  "Sikora",
  "Sikorski",
  "Sitek",
  "Siwek",
  "Skalski",
  "Skiba",
  "Skibiński",
  "Skoczylas",
  "Skowron",
  "Skowronek",
  "Skowroński",
  "Skrzypczak",
  "Skrzypek",
  "Skóra",
  "Smoliński",
  "Sobczak",
  "Sobczyk",
  "Sobieraj",
  "Sobolewski",
  "Socha",
  "Sochacki",
  "Sokołowski",
  "Sokół",
  "Sosnowski",
  "Sowa",
  "Sowiński",
  "Sołtys",
  "Sołtysiak",
  "Sroka",
  "Stachowiak",
  "Stachowicz",
  "Stachura",
  "Stachurski",
  "Stanek",
  "Staniszewski",
  "Stanisławski",
  "Stankiewicz",
  "Stasiak",
  "Staszewski",
  "Stawicki",
  "Stec",
  "Stefaniak",
  "Stefański",
  "Stelmach",
  "Stolarczyk",
  "Stolarski",
  "Strzelczyk",
  "Strzelecki",
  "Stępień",
  "Stępniak",
  "Surma",
  "Suski",
  "Szafrański",
  "Szatkowski",
  "Szczepaniak",
  "Szczepanik",
  "Szczepański",
  "Szczerba",
  "Szcześniak",
  "Szczygieł",
  "Szczęsna",
  "Szczęsny",
  "Szeląg",
  "Szewczyk",
  "Szostak",
  "Szulc",
  "Szwarc",
  "Szwed",
  "Szydłowski",
  "Szymański",
  "Szymczak",
  "Szymczyk",
  "Szymkowiak",
  "Szyszka",
  "Sławiński",
  "Słowik",
  "Słowiński",
  "Tarnowski",
  "Tkaczyk",
  "Tokarski",
  "Tomala",
  "Tomaszewski",
  "Tomczak",
  "Tomczyk",
  "Tracz",
  "Trojanowski",
  "Trzciński",
  "Trzeciak",
  "Turek",
  "Twardowski",
  "Urban",
  "Urbanek",
  "Urbaniak",
  "Urbanowicz",
  "Urbańczyk",
  "Urbański",
  "Walczak",
  "Walkowiak",
  "Warchoł",
  "Wasiak",
  "Wasilewski",
  "Wawrzyniak",
  "Wesołowski",
  "Wieczorek",
  "Wierzbicki",
  "Wilczek",
  "Wilczyński",
  "Wilk",
  "Winiarski",
  "Witczak",
  "Witek",
  "Witkowski",
  "Wiącek",
  "Więcek",
  "Więckowski",
  "Wiśniewski",
  "Wnuk",
  "Wojciechowski",
  "Wojtas",
  "Wojtasik",
  "Wojtczak",
  "Wojtkowiak",
  "Wolak",
  "Woliński",
  "Wolny",
  "Wolski",
  "Woś",
  "Woźniak",
  "Wrona",
  "Wroński",
  "Wróbel",
  "Wróblewski",
  "Wypych",
  "Wysocki",
  "Wyszyński",
  "Wójcicki",
  "Wójcik",
  "Wójtowicz",
  "Wąsik",
  "Węgrzyn",
  "Włodarczyk",
  "Włodarski",
  "Zaborowski",
  "Zabłocki",
  "Zagórski",
  "Zając",
  "Zajączkowski",
  "Zakrzewski",
  "Zalewski",
  "Zaremba",
  "Zarzycki",
  "Zaręba",
  "Zawada",
  "Zawadzki",
  "Zdunek",
  "Zieliński",
  "Zielonka",
  "Ziółkowski",
  "Zięba",
  "Ziętek",
  "Zwoliński",
  "Zych",
  "Zygmunt",
  "Łapiński",
  "Łuczak",
  "Łukasiewicz",
  "Łukasik",
  "Łukaszewski",
  "Śliwa",
  "Śliwiński",
  "Ślusarczyk",
  "Świderski",
  "Świerczyński",
  "Świątek",
  "Żak",
  "Żebrowski",
  "Żmuda",
  "Żuk",
  "Żukowski",
  "Żurawski",
  "Żurek",
  "Żyła"
];

},{}],"node_modules/faker/lib/locales/pl/name/prefix.js":[function(require,module,exports) {
module["exports"] = [
  "Pan",
  "Pani"
];

},{}],"node_modules/faker/lib/locales/pl/name/title.js":[function(require,module,exports) {
module["exports"] = {
  "descriptor": [
    "Lead",
    "Senior",
    "Direct",
    "Corporate",
    "Dynamic",
    "Future",
    "Product",
    "National",
    "Regional",
    "District",
    "Central",
    "Global",
    "Customer",
    "Investor",
    "Dynamic",
    "International",
    "Legacy",
    "Forward",
    "Internal",
    "Human",
    "Chief",
    "Principal"
  ],
  "level": [
    "Solutions",
    "Program",
    "Brand",
    "Security",
    "Research",
    "Marketing",
    "Directives",
    "Implementation",
    "Integration",
    "Functionality",
    "Response",
    "Paradigm",
    "Tactics",
    "Identity",
    "Markets",
    "Group",
    "Division",
    "Applications",
    "Optimization",
    "Operations",
    "Infrastructure",
    "Intranet",
    "Communications",
    "Web",
    "Branding",
    "Quality",
    "Assurance",
    "Mobility",
    "Accounts",
    "Data",
    "Creative",
    "Configuration",
    "Accountability",
    "Interactions",
    "Factors",
    "Usability",
    "Metrics"
  ],
  "job": [
    "Supervisor",
    "Associate",
    "Executive",
    "Liaison",
    "Officer",
    "Manager",
    "Engineer",
    "Specialist",
    "Director",
    "Coordinator",
    "Administrator",
    "Architect",
    "Analyst",
    "Designer",
    "Planner",
    "Orchestrator",
    "Technician",
    "Developer",
    "Producer",
    "Consultant",
    "Assistant",
    "Facilitator",
    "Agent",
    "Representative",
    "Strategist"
  ]
};

},{}],"node_modules/faker/lib/locales/pl/name/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{prefix} #{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}"
];

},{}],"node_modules/faker/lib/locales/pl/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");
name.prefix = require("./prefix");
name.title = require("./title");
name.name = require("./name");

},{"./first_name":"node_modules/faker/lib/locales/pl/name/first_name.js","./last_name":"node_modules/faker/lib/locales/pl/name/last_name.js","./prefix":"node_modules/faker/lib/locales/pl/name/prefix.js","./title":"node_modules/faker/lib/locales/pl/name/title.js","./name":"node_modules/faker/lib/locales/pl/name/name.js"}],"node_modules/faker/lib/locales/pl/address/country.js":[function(require,module,exports) {
module["exports"] = [
  "Afganistan",
  "Albania",
  "Algieria",
  "Andora",
  "Angola",
  "Antigua i Barbuda",
  "Arabia Saudyjska",
  "Argentyna",
  "Armenia",
  "Australia",
  "Austria",
  "Azerbejdżan",
  "Bahamy",
  "Bahrajn",
  "Bangladesz",
  "Barbados",
  "Belgia",
  "Belize",
  "Benin",
  "Bhutan",
  "Białoruś",
  "Birma",
  "Boliwia",
  "Sucre",
  "Bośnia i Hercegowina",
  "Botswana",
  "Brazylia",
  "Brunei",
  "Bułgaria",
  "Burkina Faso",
  "Burundi",
  "Chile",
  "Chiny",
  "Chorwacja",
  "Cypr",
  "Czad",
  "Czarnogóra",
  "Czechy",
  "Dania",
  "Demokratyczna Republika Konga",
  "Dominika",
  "Dominikana",
  "Dżibuti",
  "Egipt",
  "Ekwador",
  "Erytrea",
  "Estonia",
  "Etiopia",
  "Fidżi",
  "Filipiny",
  "Finlandia",
  "Francja",
  "Gabon",
  "Gambia",
  "Ghana",
  "Grecja",
  "Grenada",
  "Gruzja",
  "Gujana",
  "Gwatemala",
  "Gwinea",
  "Gwinea Bissau",
  "Gwinea Równikowa",
  "Haiti",
  "Hiszpania",
  "Holandia",
  "Haga",
  "Honduras",
  "Indie",
  "Indonezja",
  "Irak",
  "Iran",
  "Irlandia",
  "Islandia",
  "Izrael",
  "Jamajka",
  "Japonia",
  "Jemen",
  "Jordania",
  "Kambodża",
  "Kamerun",
  "Kanada",
  "Katar",
  "Kazachstan",
  "Kenia",
  "Kirgistan",
  "Kiribati",
  "Kolumbia",
  "Komory",
  "Kongo",
  "Korea Południowa",
  "Korea Północna",
  "Kostaryka",
  "Kuba",
  "Kuwejt",
  "Laos",
  "Lesotho",
  "Liban",
  "Liberia",
  "Libia",
  "Liechtenstein",
  "Litwa",
  "Luksemburg",
  "Łotwa",
  "Macedonia",
  "Madagaskar",
  "Malawi",
  "Malediwy",
  "Malezja",
  "Mali",
  "Malta",
  "Maroko",
  "Mauretania",
  "Mauritius",
  "Meksyk",
  "Mikronezja",
  "Mołdawia",
  "Monako",
  "Mongolia",
  "Mozambik",
  "Namibia",
  "Nauru",
  "Nepal",
  "Niemcy",
  "Niger",
  "Nigeria",
  "Nikaragua",
  "Norwegia",
  "Nowa Zelandia",
  "Oman",
  "Pakistan",
  "Palau",
  "Panama",
  "Papua-Nowa Gwinea",
  "Paragwaj",
  "Peru",
  "Polska",
  "322 575",
  "Portugalia",
  "Republika Południowej Afryki",
  "Republika Środkowoafrykańska",
  "Republika Zielonego Przylądka",
  "Rosja",
  "Rumunia",
  "Rwanda",
  "Saint Kitts i Nevis",
  "Saint Lucia",
  "Saint Vincent i Grenadyny",
  "Salwador",
  "Samoa",
  "San Marino",
  "Senegal",
  "Serbia",
  "Seszele",
  "Sierra Leone",
  "Singapur",
  "Słowacja",
  "Słowenia",
  "Somalia",
  "Sri Lanka",
  "Stany Zjednoczone",
  "Suazi",
  "Sudan",
  "Sudan Południowy",
  "Surinam",
  "Syria",
  "Szwajcaria",
  "Szwecja",
  "Tadżykistan",
  "Tajlandia",
  "Tanzania",
  "Timor Wschodni",
  "Togo",
  "Tonga",
  "Trynidad i Tobago",
  "Tunezja",
  "Turcja",
  "Turkmenistan",
  "Tuvalu",
  "Funafuti",
  "Uganda",
  "Ukraina",
  "Urugwaj",
  2008,
  "Uzbekistan",
  "Vanuatu",
  "Watykan",
  "Wenezuela",
  "Węgry",
  "Wielka Brytania",
  "Wietnam",
  "Włochy",
  "Wybrzeże Kości Słoniowej",
  "Wyspy Marshalla",
  "Wyspy Salomona",
  "Wyspy Świętego Tomasza i Książęca",
  "Zambia",
  "Zimbabwe",
  "Zjednoczone Emiraty Arabskie"
];

},{}],"node_modules/faker/lib/locales/pl/address/building_number.js":[function(require,module,exports) {
module["exports"] = [
  "#####",
  "####",
  "###"
];

},{}],"node_modules/faker/lib/locales/pl/address/street_prefix.js":[function(require,module,exports) {
module["exports"] = [
  "ul.",
  "al."
];

},{}],"node_modules/faker/lib/locales/pl/address/secondary_address.js":[function(require,module,exports) {
module["exports"] = [
  "Apt. ###",
  "Suite ###"
];

},{}],"node_modules/faker/lib/locales/pl/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "##-###"
];

},{}],"node_modules/faker/lib/locales/pl/address/state.js":[function(require,module,exports) {
module["exports"] = [
  "Dolnośląskie",
  "Kujawsko-pomorskie",
  "Lubelskie",
  "Lubuskie",
  "Łódzkie",
  "Małopolskie",
  "Mazowieckie",
  "Opolskie",
  "Podkarpackie",
  "Podlaskie",
  "Pomorskie",
  "Śląskie",
  "Świętokrzyskie",
  "Warmińsko-mazurskie",
  "Wielkopolskie",
  "Zachodniopomorskie"
];

},{}],"node_modules/faker/lib/locales/pl/address/state_abbr.js":[function(require,module,exports) {
module["exports"] = [
  "DŚ",
  "KP",
  "LB",
  "LS",
  "ŁD",
  "MP",
  "MZ",
  "OP",
  "PK",
  "PL",
  "PM",
  "ŚL",
  "ŚK",
  "WM",
  "WP",
  "ZP"
];

},{}],"node_modules/faker/lib/locales/pl/address/city_name.js":[function(require,module,exports) {
module["exports"] = [
  "Aleksandrów Kujawski",
  "Aleksandrów Łódzki",
  "Alwernia",
  "Andrychów",
  "Annopol",
  "Augustów",
  "Babimost",
  "Baborów",
  "Baranów Sandomierski",
  "Barcin",
  "Barczewo",
  "Bardo",
  "Barlinek",
  "Bartoszyce",
  "Barwice",
  "Bełchatów",
  "Bełżyce",
  "Będzin",
  "Biała",
  "Biała Piska",
  "Biała Podlaska",
  "Biała Rawska",
  "Białobrzegi",
  "Białogard",
  "Biały Bór",
  "Białystok",
  "Biecz",
  "Bielawa",
  "Bielsk Podlaski",
  "Bielsko-Biała",
  "Bieruń",
  "Bierutów",
  "Bieżuń",
  "Biłgoraj",
  "Biskupiec",
  "Bisztynek",
  "Blachownia",
  "Błaszki",
  "Błażowa",
  "Błonie",
  "Bobolice",
  "Bobowa",
  "Bochnia",
  "Bodzentyn",
  "Bogatynia",
  "Boguchwała",
  "Boguszów-Gorce",
  "Bojanowo",
  "Bolesławiec",
  "Bolków",
  "Borek Wielkopolski",
  "Borne Sulinowo",
  "Braniewo",
  "Brańsk",
  "Brodnica",
  "Brok",
  "Brusy",
  "Brwinów",
  "Brzeg",
  "Brzeg Dolny",
  "Brzesko",
  "Brzeszcze",
  "Brześć Kujawski",
  "Brzeziny",
  "Brzostek",
  "Brzozów",
  "Buk",
  "Bukowno",
  "Busko-Zdrój",
  "Bychawa",
  "Byczyna",
  "Bydgoszcz",
  "Bystrzyca Kłodzka",
  "Bytom",
  "Bytom Odrzański",
  "Bytów",
  "Cedynia",
  "Chełm",
  "Chełmek",
  "Chełmno",
  "Chełmża",
  "Chęciny",
  "Chmielnik",
  "Chocianów",
  "Chociwel",
  "Chodecz",
  "Chodzież",
  "Chojna",
  "Chojnice",
  "Chojnów",
  "Choroszcz",
  "Chorzele",
  "Chorzów",
  "Choszczno",
  "Chrzanów",
  "Ciechanowiec",
  "Ciechanów",
  "Ciechocinek",
  "Cieszanów",
  "Cieszyn",
  "Ciężkowice",
  "Cybinka",
  "Czaplinek",
  "Czarna Białostocka",
  "Czarna Woda",
  "Czarne",
  "Czarnków",
  "Czchów",
  "Czechowice-Dziedzice",
  "Czeladź",
  "Czempiń",
  "Czerniejewo",
  "Czersk",
  "Czerwieńsk",
  "Czerwionka-Leszczyny",
  "Częstochowa",
  "Człopa",
  "Człuchów",
  "Czyżew",
  "Ćmielów",
  "Daleszyce",
  "Darłowo",
  "Dąbie",
  "Dąbrowa Białostocka",
  "Dąbrowa Górnicza",
  "Dąbrowa Tarnowska",
  "Debrzno",
  "Dębica",
  "Dęblin",
  "Dębno",
  "Dobczyce",
  "Dobiegniew",
  "Dobra (powiat łobeski)",
  "Dobra (powiat turecki)",
  "Dobre Miasto",
  "Dobrodzień",
  "Dobrzany",
  "Dobrzyń nad Wisłą",
  "Dolsk",
  "Drawno",
  "Drawsko Pomorskie",
  "Drezdenko",
  "Drobin",
  "Drohiczyn",
  "Drzewica",
  "Dukla",
  "Duszniki-Zdrój",
  "Dynów",
  "Działdowo",
  "Działoszyce",
  "Działoszyn",
  "Dzierzgoń",
  "Dzierżoniów",
  "Dziwnów",
  "Elbląg",
  "Ełk",
  "Frampol",
  "Frombork",
  "Garwolin",
  "Gąbin",
  "Gdańsk",
  "Gdynia",
  "Giżycko",
  "Glinojeck",
  "Gliwice",
  "Głogów",
  "Głogów Małopolski",
  "Głogówek",
  "Głowno",
  "Głubczyce",
  "Głuchołazy",
  "Głuszyca",
  "Gniew",
  "Gniewkowo",
  "Gniezno",
  "Gogolin",
  "Golczewo",
  "Goleniów",
  "Golina",
  "Golub-Dobrzyń",
  "Gołańcz",
  "Gołdap",
  "Goniądz",
  "Gorlice",
  "Gorzów Śląski",
  "Gorzów Wielkopolski",
  "Gostynin",
  "Gostyń",
  "Gościno",
  "Gozdnica",
  "Góra",
  "Góra Kalwaria",
  "Górowo Iławeckie",
  "Górzno",
  "Grabów nad Prosną",
  "Grajewo",
  "Grodków",
  "Grodzisk Mazowiecki",
  "Grodzisk Wielkopolski",
  "Grójec",
  "Grudziądz",
  "Grybów",
  "Gryfice",
  "Gryfino",
  "Gryfów Śląski",
  "Gubin",
  "Hajnówka",
  "Halinów",
  "Hel",
  "Hrubieszów",
  "Iława",
  "Iłowa",
  "Iłża",
  "Imielin",
  "Inowrocław",
  "Ińsko",
  "Iwonicz-Zdrój",
  "Izbica Kujawska",
  "Jabłonowo Pomorskie",
  "Janikowo",
  "Janowiec Wielkopolski",
  "Janów Lubelski",
  "Jarocin",
  "Jarosław",
  "Jasień",
  "Jasło",
  "Jastarnia",
  "Jastrowie",
  "Jastrzębie-Zdrój",
  "Jawor",
  "Jaworzno",
  "Jaworzyna Śląska",
  "Jedlicze",
  "Jedlina-Zdrój",
  "Jedwabne",
  "Jelcz-Laskowice",
  "Jelenia Góra",
  "Jeziorany",
  "Jędrzejów",
  "Jordanów",
  "Józefów (powiat biłgorajski)",
  "Józefów (powiat otwocki)",
  "Jutrosin",
  "Kalety",
  "Kalisz",
  "Kalisz Pomorski",
  "Kalwaria Zebrzydowska",
  "Kałuszyn",
  "Kamienna Góra",
  "Kamień Krajeński",
  "Kamień Pomorski",
  "Kamieńsk",
  "Kańczuga",
  "Karczew",
  "Kargowa",
  "Karlino",
  "Karpacz",
  "Kartuzy",
  "Katowice",
  "Kazimierz Dolny",
  "Kazimierza Wielka",
  "Kąty Wrocławskie",
  "Kcynia",
  "Kędzierzyn-Koźle",
  "Kępice",
  "Kępno",
  "Kętrzyn",
  "Kęty",
  "Kielce",
  "Kietrz",
  "Kisielice",
  "Kleczew",
  "Kleszczele",
  "Kluczbork",
  "Kłecko",
  "Kłobuck",
  "Kłodawa",
  "Kłodzko",
  "Knurów",
  "Knyszyn",
  "Kobylin",
  "Kobyłka",
  "Kock",
  "Kolbuszowa",
  "Kolno",
  "Kolonowskie",
  "Koluszki",
  "Kołaczyce",
  "Koło",
  "Kołobrzeg",
  "Koniecpol",
  "Konin",
  "Konstancin-Jeziorna",
  "Konstantynów Łódzki",
  "Końskie",
  "Koprzywnica",
  "Korfantów",
  "Koronowo",
  "Korsze",
  "Kosów Lacki",
  "Kostrzyn",
  "Kostrzyn nad Odrą",
  "Koszalin",
  "Kościan",
  "Kościerzyna",
  "Kowal",
  "Kowalewo Pomorskie",
  "Kowary",
  "Koziegłowy",
  "Kozienice",
  "Koźmin Wielkopolski",
  "Kożuchów",
  "Kórnik",
  "Krajenka",
  "Kraków",
  "Krapkowice",
  "Krasnobród",
  "Krasnystaw",
  "Kraśnik",
  "Krobia",
  "Krosno",
  "Krosno Odrzańskie",
  "Krośniewice",
  "Krotoszyn",
  "Kruszwica",
  "Krynica Morska",
  "Krynica-Zdrój",
  "Krynki",
  "Krzanowice",
  "Krzepice",
  "Krzeszowice",
  "Krzywiń",
  "Krzyż Wielkopolski",
  "Książ Wielkopolski",
  "Kudowa-Zdrój",
  "Kunów",
  "Kutno",
  "Kuźnia Raciborska",
  "Kwidzyn",
  "Lądek-Zdrój",
  "Legionowo",
  "Legnica",
  "Lesko",
  "Leszno",
  "Leśna",
  "Leśnica",
  "Lewin Brzeski",
  "Leżajsk",
  "Lębork",
  "Lędziny",
  "Libiąż",
  "Lidzbark",
  "Lidzbark Warmiński",
  "Limanowa",
  "Lipiany",
  "Lipno",
  "Lipsk",
  "Lipsko",
  "Lubaczów",
  "Lubań",
  "Lubartów",
  "Lubawa",
  "Lubawka",
  "Lubień Kujawski",
  "Lubin",
  "Lublin",
  "Lubliniec",
  "Lubniewice",
  "Lubomierz",
  "Luboń",
  "Lubraniec",
  "Lubsko",
  "Lwówek",
  "Lwówek Śląski",
  "Łabiszyn",
  "Łańcut",
  "Łapy",
  "Łasin",
  "Łask",
  "Łaskarzew",
  "Łaszczów",
  "Łaziska Górne",
  "Łazy",
  "Łeba",
  "Łęczna",
  "Łęczyca",
  "Łęknica",
  "Łobez",
  "Łobżenica",
  "Łochów",
  "Łomianki",
  "Łomża",
  "Łosice",
  "Łowicz",
  "Łódź",
  "Łuków",
  "Maków Mazowiecki",
  "Maków Podhalański",
  "Malbork",
  "Małogoszcz",
  "Małomice",
  "Margonin",
  "Marki",
  "Maszewo",
  "Miasteczko Śląskie",
  "Miastko",
  "Michałowo",
  "Miechów",
  "Miejska Górka",
  "Mielec",
  "Mieroszów",
  "Mieszkowice",
  "Międzybórz",
  "Międzychód",
  "Międzylesie",
  "Międzyrzec Podlaski",
  "Międzyrzecz",
  "Międzyzdroje",
  "Mikołajki",
  "Mikołów",
  "Mikstat",
  "Milanówek",
  "Milicz",
  "Miłakowo",
  "Miłomłyn",
  "Miłosław",
  "Mińsk Mazowiecki",
  "Mirosławiec",
  "Mirsk",
  "Mława",
  "Młynary",
  "Mogielnica",
  "Mogilno",
  "Mońki",
  "Morąg",
  "Mordy",
  "Moryń",
  "Mosina",
  "Mrągowo",
  "Mrocza",
  "Mszana Dolna",
  "Mszczonów",
  "Murowana Goślina",
  "Muszyna",
  "Mysłowice",
  "Myszków",
  "Myszyniec",
  "Myślenice",
  "Myślibórz",
  "Nakło nad Notecią",
  "Nałęczów",
  "Namysłów",
  "Narol",
  "Nasielsk",
  "Nekla",
  "Nidzica",
  "Niemcza",
  "Niemodlin",
  "Niepołomice",
  "Nieszawa",
  "Nisko",
  "Nowa Dęba",
  "Nowa Ruda",
  "Nowa Sarzyna",
  "Nowa Sól",
  "Nowe",
  "Nowe Brzesko",
  "Nowe Miasteczko",
  "Nowe Miasto Lubawskie",
  "Nowe Miasto nad Pilicą",
  "Nowe Skalmierzyce",
  "Nowe Warpno",
  "Nowogard",
  "Nowogrodziec",
  "Nowogród",
  "Nowogród Bobrzański",
  "Nowy Dwór Gdański",
  "Nowy Dwór Mazowiecki",
  "Nowy Sącz",
  "Nowy Staw",
  "Nowy Targ",
  "Nowy Tomyśl",
  "Nowy Wiśnicz",
  "Nysa",
  "Oborniki",
  "Oborniki Śląskie",
  "Obrzycko",
  "Odolanów",
  "Ogrodzieniec",
  "Okonek",
  "Olecko",
  "Olesno",
  "Oleszyce",
  "Oleśnica",
  "Olkusz",
  "Olsztyn",
  "Olsztynek",
  "Olszyna",
  "Oława",
  "Opalenica",
  "Opatów",
  "Opoczno",
  "Opole",
  "Opole Lubelskie",
  "Orneta",
  "Orzesze",
  "Orzysz",
  "Osieczna",
  "Osiek",
  "Ostrołęka",
  "Ostroróg",
  "Ostrowiec Świętokrzyski",
  "Ostróda",
  "Ostrów Lubelski",
  "Ostrów Mazowiecka",
  "Ostrów Wielkopolski",
  "Ostrzeszów",
  "Ośno Lubuskie",
  "Oświęcim",
  "Otmuchów",
  "Otwock",
  "Ozimek",
  "Ozorków",
  "Ożarów",
  "Ożarów Mazowiecki",
  "Pabianice",
  "Paczków",
  "Pajęczno",
  "Pakość",
  "Parczew",
  "Pasłęk",
  "Pasym",
  "Pelplin",
  "Pełczyce",
  "Piaseczno",
  "Piaski",
  "Piastów",
  "Piechowice",
  "Piekary Śląskie",
  "Pieniężno",
  "Pieńsk",
  "Pieszyce",
  "Pilawa",
  "Pilica",
  "Pilzno",
  "Piła",
  "Piława Górna",
  "Pińczów",
  "Pionki",
  "Piotrków Kujawski",
  "Piotrków Trybunalski",
  "Pisz",
  "Piwniczna-Zdrój",
  "Pleszew",
  "Płock",
  "Płońsk",
  "Płoty",
  "Pniewy",
  "Pobiedziska",
  "Poddębice",
  "Podkowa Leśna",
  "Pogorzela",
  "Polanica-Zdrój",
  "Polanów",
  "Police",
  "Polkowice",
  "Połaniec",
  "Połczyn-Zdrój",
  "Poniatowa",
  "Poniec",
  "Poręba",
  "Poznań",
  "Prabuty",
  "Praszka",
  "Prochowice",
  "Proszowice",
  "Prószków",
  "Pruchnik",
  "Prudnik",
  "Prusice",
  "Pruszcz Gdański",
  "Pruszków",
  "Przasnysz",
  "Przecław",
  "Przedbórz",
  "Przedecz",
  "Przemków",
  "Przemyśl",
  "Przeworsk",
  "Przysucha",
  "Pszczyna",
  "Pszów",
  "Puck",
  "Puławy",
  "Pułtusk",
  "Puszczykowo",
  "Pyrzyce",
  "Pyskowice",
  "Pyzdry",
  "Rabka-Zdrój",
  "Raciąż",
  "Racibórz",
  "Radków",
  "Radlin",
  "Radłów",
  "Radom",
  "Radomsko",
  "Radomyśl Wielki",
  "Radymno",
  "Radziejów",
  "Radzionków",
  "Radzymin",
  "Radzyń Chełmiński",
  "Radzyń Podlaski",
  "Rajgród",
  "Rakoniewice",
  "Raszków",
  "Rawa Mazowiecka",
  "Rawicz",
  "Recz",
  "Reda",
  "Rejowiec Fabryczny",
  "Resko",
  "Reszel",
  "Rogoźno",
  "Ropczyce",
  "Różan",
  "Ruciane-Nida",
  "Ruda Śląska",
  "Rudnik nad Sanem",
  "Rumia",
  "Rybnik",
  "Rychwał",
  "Rydułtowy",
  "Rydzyna",
  "Ryglice",
  "Ryki",
  "Rymanów",
  "Ryn",
  "Rypin",
  "Rzepin",
  "Rzeszów",
  "Rzgów",
  "Sandomierz",
  "Sanok",
  "Sejny",
  "Serock",
  "Sędziszów",
  "Sędziszów Małopolski",
  "Sępopol",
  "Sępólno Krajeńskie",
  "Sianów",
  "Siechnice",
  "Siedlce",
  "Siemianowice Śląskie",
  "Siemiatycze",
  "Sieniawa",
  "Sieradz",
  "Sieraków",
  "Sierpc",
  "Siewierz",
  "Skalbmierz",
  "Skała",
  "Skarszewy",
  "Skaryszew",
  "Skarżysko-Kamienna",
  "Skawina",
  "Skępe",
  "Skierniewice",
  "Skoczów",
  "Skoki",
  "Skórcz",
  "Skwierzyna",
  "Sława",
  "Sławków",
  "Sławno",
  "Słomniki",
  "Słubice",
  "Słupca",
  "Słupsk",
  "Sobótka",
  "Sochaczew",
  "Sokołów Małopolski",
  "Sokołów Podlaski",
  "Sokółka",
  "Solec Kujawski",
  "Sompolno",
  "Sopot",
  "Sosnowiec",
  "Sośnicowice",
  "Stalowa Wola",
  "Starachowice",
  "Stargard Szczeciński",
  "Starogard Gdański",
  "Stary Sącz",
  "Staszów",
  "Stawiski",
  "Stawiszyn",
  "Stąporków",
  "Stęszew",
  "Stoczek Łukowski",
  "Stronie Śląskie",
  "Strumień",
  "Stryków",
  "Strzegom",
  "Strzelce Krajeńskie",
  "Strzelce Opolskie",
  "Strzelin",
  "Strzelno",
  "Strzyżów",
  "Sucha Beskidzka",
  "Suchań",
  "Suchedniów",
  "Suchowola",
  "Sulechów",
  "Sulejów",
  "Sulejówek",
  "Sulęcin",
  "Sulmierzyce",
  "Sułkowice",
  "Supraśl",
  "Suraż",
  "Susz",
  "Suwałki",
  "Swarzędz",
  "Syców",
  "Szadek",
  "Szamocin",
  "Szamotuły",
  "Szczawnica",
  "Szczawno-Zdrój",
  "Szczebrzeszyn",
  "Szczecin",
  "Szczecinek",
  "Szczekociny",
  "Szczucin",
  "Szczuczyn",
  "Szczyrk",
  "Szczytna",
  "Szczytno",
  "Szepietowo",
  "Szklarska Poręba",
  "Szlichtyngowa",
  "Szprotawa",
  "Sztum",
  "Szubin",
  "Szydłowiec",
  "Ścinawa",
  "Ślesin",
  "Śmigiel",
  "Śrem",
  "Środa Śląska",
  "Środa Wielkopolska",
  "Świątniki Górne",
  "Świdnica",
  "Świdnik",
  "Świdwin",
  "Świebodzice",
  "Świebodzin",
  "Świecie",
  "Świeradów-Zdrój",
  "Świerzawa",
  "Świętochłowice",
  "Świnoujście",
  "Tarczyn",
  "Tarnobrzeg",
  "Tarnogród",
  "Tarnowskie Góry",
  "Tarnów",
  "Tczew",
  "Terespol",
  "Tłuszcz",
  "Tolkmicko",
  "Tomaszów Lubelski",
  "Tomaszów Mazowiecki",
  "Toruń",
  "Torzym",
  "Toszek",
  "Trzcianka",
  "Trzciel",
  "Trzcińsko-Zdrój",
  "Trzebiatów",
  "Trzebinia",
  "Trzebnica",
  "Trzemeszno",
  "Tuchola",
  "Tuchów",
  "Tuczno",
  "Tuliszków",
  "Turek",
  "Tuszyn",
  "Twardogóra",
  "Tychowo",
  "Tychy",
  "Tyczyn",
  "Tykocin",
  "Tyszowce",
  "Ujazd",
  "Ujście",
  "Ulanów",
  "Uniejów",
  "Ustka",
  "Ustroń",
  "Ustrzyki Dolne",
  "Wadowice",
  "Wałbrzych",
  "Wałcz",
  "Warka",
  "Warszawa",
  "Warta",
  "Wasilków",
  "Wąbrzeźno",
  "Wąchock",
  "Wągrowiec",
  "Wąsosz",
  "Wejherowo",
  "Węgliniec",
  "Węgorzewo",
  "Węgorzyno",
  "Węgrów",
  "Wiązów",
  "Wieleń",
  "Wielichowo",
  "Wieliczka",
  "Wieluń",
  "Wieruszów",
  "Więcbork",
  "Wilamowice",
  "Wisła",
  "Witkowo",
  "Witnica",
  "Wleń",
  "Władysławowo",
  "Włocławek",
  "Włodawa",
  "Włoszczowa",
  "Wodzisław Śląski",
  "Wojcieszów",
  "Wojkowice",
  "Wojnicz",
  "Wolbórz",
  "Wolbrom",
  "Wolin",
  "Wolsztyn",
  "Wołczyn",
  "Wołomin",
  "Wołów",
  "Woźniki",
  "Wrocław",
  "Wronki",
  "Września",
  "Wschowa",
  "Wyrzysk",
  "Wysoka",
  "Wysokie Mazowieckie",
  "Wyszków",
  "Wyszogród",
  "Wyśmierzyce",
  "Zabłudów",
  "Zabrze",
  "Zagórów",
  "Zagórz",
  "Zakliczyn",
  "Zakopane",
  "Zakroczym",
  "Zalewo",
  "Zambrów",
  "Zamość",
  "Zator",
  "Zawadzkie",
  "Zawichost",
  "Zawidów",
  "Zawiercie",
  "Ząbki",
  "Ząbkowice Śląskie",
  "Zbąszynek",
  "Zbąszyń",
  "Zduny",
  "Zduńska Wola",
  "Zdzieszowice",
  "Zelów",
  "Zgierz",
  "Zgorzelec",
  "Zielona Góra",
  "Zielonka",
  "Ziębice",
  "Złocieniec",
  "Złoczew",
  "Złotoryja",
  "Złotów",
  "Złoty Stok",
  "Zwierzyniec",
  "Zwoleń",
  "Żabno",
  "Żagań",
  "Żarki",
  "Żarów",
  "Żary",
  "Żelechów",
  "Żerków",
  "Żmigród",
  "Żnin",
  "Żory",
  "Żukowo",
  "Żuromin",
  "Żychlin",
  "Żyrardów",
  "Żywiec"
];

},{}],"node_modules/faker/lib/locales/pl/address/city.js":[function(require,module,exports) {
module["exports"] = [
  "#{city_name}"
];

},{}],"node_modules/faker/lib/locales/pl/address/street_name.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_prefix} #{Name.last_name}"
];

},{}],"node_modules/faker/lib/locales/pl/address/street_address.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_name} #{building_number}"
];

},{}],"node_modules/faker/lib/locales/pl/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "Polska"
];

},{}],"node_modules/faker/lib/locales/pl/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.country = require("./country");
address.building_number = require("./building_number");
address.street_prefix = require("./street_prefix");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.city_name = require("./city_name");
address.city = require("./city");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./country":"node_modules/faker/lib/locales/pl/address/country.js","./building_number":"node_modules/faker/lib/locales/pl/address/building_number.js","./street_prefix":"node_modules/faker/lib/locales/pl/address/street_prefix.js","./secondary_address":"node_modules/faker/lib/locales/pl/address/secondary_address.js","./postcode":"node_modules/faker/lib/locales/pl/address/postcode.js","./state":"node_modules/faker/lib/locales/pl/address/state.js","./state_abbr":"node_modules/faker/lib/locales/pl/address/state_abbr.js","./city_name":"node_modules/faker/lib/locales/pl/address/city_name.js","./city":"node_modules/faker/lib/locales/pl/address/city.js","./street_name":"node_modules/faker/lib/locales/pl/address/street_name.js","./street_address":"node_modules/faker/lib/locales/pl/address/street_address.js","./default_country":"node_modules/faker/lib/locales/pl/address/default_country.js"}],"node_modules/faker/lib/locales/pl/company/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "Inc",
  "and Sons",
  "LLC",
  "Group"
];

},{}],"node_modules/faker/lib/locales/pl/company/adjetive.js":[function(require,module,exports) {
module["exports"] = [
  "Adaptive",
  "Advanced",
  "Ameliorated",
  "Assimilated",
  "Automated",
  "Balanced",
  "Business-focused",
  "Centralized",
  "Cloned",
  "Compatible",
  "Configurable",
  "Cross-group",
  "Cross-platform",
  "Customer-focused",
  "Customizable",
  "Decentralized",
  "De-engineered",
  "Devolved",
  "Digitized",
  "Distributed",
  "Diverse",
  "Down-sized",
  "Enhanced",
  "Enterprise-wide",
  "Ergonomic",
  "Exclusive",
  "Expanded",
  "Extended",
  "Face to face",
  "Focused",
  "Front-line",
  "Fully-configurable",
  "Function-based",
  "Fundamental",
  "Future-proofed",
  "Grass-roots",
  "Horizontal",
  "Implemented",
  "Innovative",
  "Integrated",
  "Intuitive",
  "Inverse",
  "Managed",
  "Mandatory",
  "Monitored",
  "Multi-channelled",
  "Multi-lateral",
  "Multi-layered",
  "Multi-tiered",
  "Networked",
  "Object-based",
  "Open-architected",
  "Open-source",
  "Operative",
  "Optimized",
  "Optional",
  "Organic",
  "Organized",
  "Persevering",
  "Persistent",
  "Phased",
  "Polarised",
  "Pre-emptive",
  "Proactive",
  "Profit-focused",
  "Profound",
  "Programmable",
  "Progressive",
  "Public-key",
  "Quality-focused",
  "Reactive",
  "Realigned",
  "Re-contextualized",
  "Re-engineered",
  "Reduced",
  "Reverse-engineered",
  "Right-sized",
  "Robust",
  "Seamless",
  "Secured",
  "Self-enabling",
  "Sharable",
  "Stand-alone",
  "Streamlined",
  "Switchable",
  "Synchronised",
  "Synergistic",
  "Synergized",
  "Team-oriented",
  "Total",
  "Triple-buffered",
  "Universal",
  "Up-sized",
  "Upgradable",
  "User-centric",
  "User-friendly",
  "Versatile",
  "Virtual",
  "Visionary",
  "Vision-oriented"
];

},{}],"node_modules/faker/lib/locales/pl/company/descriptor.js":[function(require,module,exports) {
module["exports"] = [
  "24 hour",
  "24/7",
  "3rd generation",
  "4th generation",
  "5th generation",
  "6th generation",
  "actuating",
  "analyzing",
  "asymmetric",
  "asynchronous",
  "attitude-oriented",
  "background",
  "bandwidth-monitored",
  "bi-directional",
  "bifurcated",
  "bottom-line",
  "clear-thinking",
  "client-driven",
  "client-server",
  "coherent",
  "cohesive",
  "composite",
  "context-sensitive",
  "contextually-based",
  "content-based",
  "dedicated",
  "demand-driven",
  "didactic",
  "directional",
  "discrete",
  "disintermediate",
  "dynamic",
  "eco-centric",
  "empowering",
  "encompassing",
  "even-keeled",
  "executive",
  "explicit",
  "exuding",
  "fault-tolerant",
  "foreground",
  "fresh-thinking",
  "full-range",
  "global",
  "grid-enabled",
  "heuristic",
  "high-level",
  "holistic",
  "homogeneous",
  "human-resource",
  "hybrid",
  "impactful",
  "incremental",
  "intangible",
  "interactive",
  "intermediate",
  "leading edge",
  "local",
  "logistical",
  "maximized",
  "methodical",
  "mission-critical",
  "mobile",
  "modular",
  "motivating",
  "multimedia",
  "multi-state",
  "multi-tasking",
  "national",
  "needs-based",
  "neutral",
  "next generation",
  "non-volatile",
  "object-oriented",
  "optimal",
  "optimizing",
  "radical",
  "real-time",
  "reciprocal",
  "regional",
  "responsive",
  "scalable",
  "secondary",
  "solution-oriented",
  "stable",
  "static",
  "systematic",
  "systemic",
  "system-worthy",
  "tangible",
  "tertiary",
  "transitional",
  "uniform",
  "upward-trending",
  "user-facing",
  "value-added",
  "web-enabled",
  "well-modulated",
  "zero administration",
  "zero defect",
  "zero tolerance"
];

},{}],"node_modules/faker/lib/locales/pl/company/noun.js":[function(require,module,exports) {
module["exports"] = [
  "ability",
  "access",
  "adapter",
  "algorithm",
  "alliance",
  "analyzer",
  "application",
  "approach",
  "architecture",
  "archive",
  "artificial intelligence",
  "array",
  "attitude",
  "benchmark",
  "budgetary management",
  "capability",
  "capacity",
  "challenge",
  "circuit",
  "collaboration",
  "complexity",
  "concept",
  "conglomeration",
  "contingency",
  "core",
  "customer loyalty",
  "database",
  "data-warehouse",
  "definition",
  "emulation",
  "encoding",
  "encryption",
  "extranet",
  "firmware",
  "flexibility",
  "focus group",
  "forecast",
  "frame",
  "framework",
  "function",
  "functionalities",
  "Graphic Interface",
  "groupware",
  "Graphical User Interface",
  "hardware",
  "help-desk",
  "hierarchy",
  "hub",
  "implementation",
  "info-mediaries",
  "infrastructure",
  "initiative",
  "installation",
  "instruction set",
  "interface",
  "internet solution",
  "intranet",
  "knowledge user",
  "knowledge base",
  "local area network",
  "leverage",
  "matrices",
  "matrix",
  "methodology",
  "middleware",
  "migration",
  "model",
  "moderator",
  "monitoring",
  "moratorium",
  "neural-net",
  "open architecture",
  "open system",
  "orchestration",
  "paradigm",
  "parallelism",
  "policy",
  "portal",
  "pricing structure",
  "process improvement",
  "product",
  "productivity",
  "project",
  "projection",
  "protocol",
  "secured line",
  "service-desk",
  "software",
  "solution",
  "standardization",
  "strategy",
  "structure",
  "success",
  "superstructure",
  "support",
  "synergy",
  "system engine",
  "task-force",
  "throughput",
  "time-frame",
  "toolset",
  "utilisation",
  "website",
  "workforce"
];

},{}],"node_modules/faker/lib/locales/pl/company/bs_verb.js":[function(require,module,exports) {
module["exports"] = [
  "implement",
  "utilize",
  "integrate",
  "streamline",
  "optimize",
  "evolve",
  "transform",
  "embrace",
  "enable",
  "orchestrate",
  "leverage",
  "reinvent",
  "aggregate",
  "architect",
  "enhance",
  "incentivize",
  "morph",
  "empower",
  "envisioneer",
  "monetize",
  "harness",
  "facilitate",
  "seize",
  "disintermediate",
  "synergize",
  "strategize",
  "deploy",
  "brand",
  "grow",
  "target",
  "syndicate",
  "synthesize",
  "deliver",
  "mesh",
  "incubate",
  "engage",
  "maximize",
  "benchmark",
  "expedite",
  "reintermediate",
  "whiteboard",
  "visualize",
  "repurpose",
  "innovate",
  "scale",
  "unleash",
  "drive",
  "extend",
  "engineer",
  "revolutionize",
  "generate",
  "exploit",
  "transition",
  "e-enable",
  "iterate",
  "cultivate",
  "matrix",
  "productize",
  "redefine",
  "recontextualize"
];

},{}],"node_modules/faker/lib/locales/pl/company/bs_adjective.js":[function(require,module,exports) {
module["exports"] = [
  "clicks-and-mortar",
  "value-added",
  "vertical",
  "proactive",
  "robust",
  "revolutionary",
  "scalable",
  "leading-edge",
  "innovative",
  "intuitive",
  "strategic",
  "e-business",
  "mission-critical",
  "sticky",
  "one-to-one",
  "24/7",
  "end-to-end",
  "global",
  "B2B",
  "B2C",
  "granular",
  "frictionless",
  "virtual",
  "viral",
  "dynamic",
  "24/365",
  "best-of-breed",
  "killer",
  "magnetic",
  "bleeding-edge",
  "web-enabled",
  "interactive",
  "dot-com",
  "sexy",
  "back-end",
  "real-time",
  "efficient",
  "front-end",
  "distributed",
  "seamless",
  "extensible",
  "turn-key",
  "world-class",
  "open-source",
  "cross-platform",
  "cross-media",
  "synergistic",
  "bricks-and-clicks",
  "out-of-the-box",
  "enterprise",
  "integrated",
  "impactful",
  "wireless",
  "transparent",
  "next-generation",
  "cutting-edge",
  "user-centric",
  "visionary",
  "customized",
  "ubiquitous",
  "plug-and-play",
  "collaborative",
  "compelling",
  "holistic",
  "rich"
];

},{}],"node_modules/faker/lib/locales/pl/company/bs_noun.js":[function(require,module,exports) {
module["exports"] = [
  "synergies",
  "web-readiness",
  "paradigms",
  "markets",
  "partnerships",
  "infrastructures",
  "platforms",
  "initiatives",
  "channels",
  "eyeballs",
  "communities",
  "ROI",
  "solutions",
  "e-tailers",
  "e-services",
  "action-items",
  "portals",
  "niches",
  "technologies",
  "content",
  "vortals",
  "supply-chains",
  "convergence",
  "relationships",
  "architectures",
  "interfaces",
  "e-markets",
  "e-commerce",
  "systems",
  "bandwidth",
  "infomediaries",
  "models",
  "mindshare",
  "deliverables",
  "users",
  "schemas",
  "networks",
  "applications",
  "metrics",
  "e-business",
  "functionalities",
  "experiences",
  "web services",
  "methodologies"
];

},{}],"node_modules/faker/lib/locales/pl/company/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{Name.last_name} #{suffix}",
  "#{Name.last_name}-#{Name.last_name}",
  "#{Name.last_name}, #{Name.last_name} and #{Name.last_name}"
];

},{}],"node_modules/faker/lib/locales/pl/company/index.js":[function(require,module,exports) {
var company = {};
module['exports'] = company;
company.suffix = require("./suffix");
company.adjetive = require("./adjetive");
company.descriptor = require("./descriptor");
company.noun = require("./noun");
company.bs_verb = require("./bs_verb");
company.bs_adjective = require("./bs_adjective");
company.bs_noun = require("./bs_noun");
company.name = require("./name");

},{"./suffix":"node_modules/faker/lib/locales/pl/company/suffix.js","./adjetive":"node_modules/faker/lib/locales/pl/company/adjetive.js","./descriptor":"node_modules/faker/lib/locales/pl/company/descriptor.js","./noun":"node_modules/faker/lib/locales/pl/company/noun.js","./bs_verb":"node_modules/faker/lib/locales/pl/company/bs_verb.js","./bs_adjective":"node_modules/faker/lib/locales/pl/company/bs_adjective.js","./bs_noun":"node_modules/faker/lib/locales/pl/company/bs_noun.js","./name":"node_modules/faker/lib/locales/pl/company/name.js"}],"node_modules/faker/lib/locales/pl/internet/free_email.js":[function(require,module,exports) {
module["exports"] = [
  "gmail.com",
  "yahoo.com",
  "hotmail.com"
];

},{}],"node_modules/faker/lib/locales/pl/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "com",
  "pl",
  "com.pl",
  "net",
  "org"
];

},{}],"node_modules/faker/lib/locales/pl/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.free_email = require("./free_email");
internet.domain_suffix = require("./domain_suffix");

},{"./free_email":"node_modules/faker/lib/locales/pl/internet/free_email.js","./domain_suffix":"node_modules/faker/lib/locales/pl/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/pl/lorem/words.js":[function(require,module,exports) {
module["exports"] = [
  "alias",
  "consequatur",
  "aut",
  "perferendis",
  "sit",
  "voluptatem",
  "accusantium",
  "doloremque",
  "aperiam",
  "eaque",
  "ipsa",
  "quae",
  "ab",
  "illo",
  "inventore",
  "veritatis",
  "et",
  "quasi",
  "architecto",
  "beatae",
  "vitae",
  "dicta",
  "sunt",
  "explicabo",
  "aspernatur",
  "aut",
  "odit",
  "aut",
  "fugit",
  "sed",
  "quia",
  "consequuntur",
  "magni",
  "dolores",
  "eos",
  "qui",
  "ratione",
  "voluptatem",
  "sequi",
  "nesciunt",
  "neque",
  "dolorem",
  "ipsum",
  "quia",
  "dolor",
  "sit",
  "amet",
  "consectetur",
  "adipisci",
  "velit",
  "sed",
  "quia",
  "non",
  "numquam",
  "eius",
  "modi",
  "tempora",
  "incidunt",
  "ut",
  "labore",
  "et",
  "dolore",
  "magnam",
  "aliquam",
  "quaerat",
  "voluptatem",
  "ut",
  "enim",
  "ad",
  "minima",
  "veniam",
  "quis",
  "nostrum",
  "exercitationem",
  "ullam",
  "corporis",
  "nemo",
  "enim",
  "ipsam",
  "voluptatem",
  "quia",
  "voluptas",
  "sit",
  "suscipit",
  "laboriosam",
  "nisi",
  "ut",
  "aliquid",
  "ex",
  "ea",
  "commodi",
  "consequatur",
  "quis",
  "autem",
  "vel",
  "eum",
  "iure",
  "reprehenderit",
  "qui",
  "in",
  "ea",
  "voluptate",
  "velit",
  "esse",
  "quam",
  "nihil",
  "molestiae",
  "et",
  "iusto",
  "odio",
  "dignissimos",
  "ducimus",
  "qui",
  "blanditiis",
  "praesentium",
  "laudantium",
  "totam",
  "rem",
  "voluptatum",
  "deleniti",
  "atque",
  "corrupti",
  "quos",
  "dolores",
  "et",
  "quas",
  "molestias",
  "excepturi",
  "sint",
  "occaecati",
  "cupiditate",
  "non",
  "provident",
  "sed",
  "ut",
  "perspiciatis",
  "unde",
  "omnis",
  "iste",
  "natus",
  "error",
  "similique",
  "sunt",
  "in",
  "culpa",
  "qui",
  "officia",
  "deserunt",
  "mollitia",
  "animi",
  "id",
  "est",
  "laborum",
  "et",
  "dolorum",
  "fuga",
  "et",
  "harum",
  "quidem",
  "rerum",
  "facilis",
  "est",
  "et",
  "expedita",
  "distinctio",
  "nam",
  "libero",
  "tempore",
  "cum",
  "soluta",
  "nobis",
  "est",
  "eligendi",
  "optio",
  "cumque",
  "nihil",
  "impedit",
  "quo",
  "porro",
  "quisquam",
  "est",
  "qui",
  "minus",
  "id",
  "quod",
  "maxime",
  "placeat",
  "facere",
  "possimus",
  "omnis",
  "voluptas",
  "assumenda",
  "est",
  "omnis",
  "dolor",
  "repellendus",
  "temporibus",
  "autem",
  "quibusdam",
  "et",
  "aut",
  "consequatur",
  "vel",
  "illum",
  "qui",
  "dolorem",
  "eum",
  "fugiat",
  "quo",
  "voluptas",
  "nulla",
  "pariatur",
  "at",
  "vero",
  "eos",
  "et",
  "accusamus",
  "officiis",
  "debitis",
  "aut",
  "rerum",
  "necessitatibus",
  "saepe",
  "eveniet",
  "ut",
  "et",
  "voluptates",
  "repudiandae",
  "sint",
  "et",
  "molestiae",
  "non",
  "recusandae",
  "itaque",
  "earum",
  "rerum",
  "hic",
  "tenetur",
  "a",
  "sapiente",
  "delectus",
  "ut",
  "aut",
  "reiciendis",
  "voluptatibus",
  "maiores",
  "doloribus",
  "asperiores",
  "repellat"
];

},{}],"node_modules/faker/lib/locales/pl/lorem/supplemental.js":[function(require,module,exports) {
module["exports"] = [
  "abbas",
  "abduco",
  "abeo",
  "abscido",
  "absconditus",
  "absens",
  "absorbeo",
  "absque",
  "abstergo",
  "absum",
  "abundans",
  "abutor",
  "accedo",
  "accendo",
  "acceptus",
  "accipio",
  "accommodo",
  "accusator",
  "acer",
  "acerbitas",
  "acervus",
  "acidus",
  "acies",
  "acquiro",
  "acsi",
  "adamo",
  "adaugeo",
  "addo",
  "adduco",
  "ademptio",
  "adeo",
  "adeptio",
  "adfectus",
  "adfero",
  "adficio",
  "adflicto",
  "adhaero",
  "adhuc",
  "adicio",
  "adimpleo",
  "adinventitias",
  "adipiscor",
  "adiuvo",
  "administratio",
  "admiratio",
  "admitto",
  "admoneo",
  "admoveo",
  "adnuo",
  "adopto",
  "adsidue",
  "adstringo",
  "adsuesco",
  "adsum",
  "adulatio",
  "adulescens",
  "adultus",
  "aduro",
  "advenio",
  "adversus",
  "advoco",
  "aedificium",
  "aeger",
  "aegre",
  "aegrotatio",
  "aegrus",
  "aeneus",
  "aequitas",
  "aequus",
  "aer",
  "aestas",
  "aestivus",
  "aestus",
  "aetas",
  "aeternus",
  "ager",
  "aggero",
  "aggredior",
  "agnitio",
  "agnosco",
  "ago",
  "ait",
  "aiunt",
  "alienus",
  "alii",
  "alioqui",
  "aliqua",
  "alius",
  "allatus",
  "alo",
  "alter",
  "altus",
  "alveus",
  "amaritudo",
  "ambitus",
  "ambulo",
  "amicitia",
  "amiculum",
  "amissio",
  "amita",
  "amitto",
  "amo",
  "amor",
  "amoveo",
  "amplexus",
  "amplitudo",
  "amplus",
  "ancilla",
  "angelus",
  "angulus",
  "angustus",
  "animadverto",
  "animi",
  "animus",
  "annus",
  "anser",
  "ante",
  "antea",
  "antepono",
  "antiquus",
  "aperio",
  "aperte",
  "apostolus",
  "apparatus",
  "appello",
  "appono",
  "appositus",
  "approbo",
  "apto",
  "aptus",
  "apud",
  "aqua",
  "ara",
  "aranea",
  "arbitro",
  "arbor",
  "arbustum",
  "arca",
  "arceo",
  "arcesso",
  "arcus",
  "argentum",
  "argumentum",
  "arguo",
  "arma",
  "armarium",
  "armo",
  "aro",
  "ars",
  "articulus",
  "artificiose",
  "arto",
  "arx",
  "ascisco",
  "ascit",
  "asper",
  "aspicio",
  "asporto",
  "assentator",
  "astrum",
  "atavus",
  "ater",
  "atqui",
  "atrocitas",
  "atrox",
  "attero",
  "attollo",
  "attonbitus",
  "auctor",
  "auctus",
  "audacia",
  "audax",
  "audentia",
  "audeo",
  "audio",
  "auditor",
  "aufero",
  "aureus",
  "auris",
  "aurum",
  "aut",
  "autem",
  "autus",
  "auxilium",
  "avaritia",
  "avarus",
  "aveho",
  "averto",
  "avoco",
  "baiulus",
  "balbus",
  "barba",
  "bardus",
  "basium",
  "beatus",
  "bellicus",
  "bellum",
  "bene",
  "beneficium",
  "benevolentia",
  "benigne",
  "bestia",
  "bibo",
  "bis",
  "blandior",
  "bonus",
  "bos",
  "brevis",
  "cado",
  "caecus",
  "caelestis",
  "caelum",
  "calamitas",
  "calcar",
  "calco",
  "calculus",
  "callide",
  "campana",
  "candidus",
  "canis",
  "canonicus",
  "canto",
  "capillus",
  "capio",
  "capitulus",
  "capto",
  "caput",
  "carbo",
  "carcer",
  "careo",
  "caries",
  "cariosus",
  "caritas",
  "carmen",
  "carpo",
  "carus",
  "casso",
  "caste",
  "casus",
  "catena",
  "caterva",
  "cattus",
  "cauda",
  "causa",
  "caute",
  "caveo",
  "cavus",
  "cedo",
  "celebrer",
  "celer",
  "celo",
  "cena",
  "cenaculum",
  "ceno",
  "censura",
  "centum",
  "cerno",
  "cernuus",
  "certe",
  "certo",
  "certus",
  "cervus",
  "cetera",
  "charisma",
  "chirographum",
  "cibo",
  "cibus",
  "cicuta",
  "cilicium",
  "cimentarius",
  "ciminatio",
  "cinis",
  "circumvenio",
  "cito",
  "civis",
  "civitas",
  "clam",
  "clamo",
  "claro",
  "clarus",
  "claudeo",
  "claustrum",
  "clementia",
  "clibanus",
  "coadunatio",
  "coaegresco",
  "coepi",
  "coerceo",
  "cogito",
  "cognatus",
  "cognomen",
  "cogo",
  "cohaero",
  "cohibeo",
  "cohors",
  "colligo",
  "colloco",
  "collum",
  "colo",
  "color",
  "coma",
  "combibo",
  "comburo",
  "comedo",
  "comes",
  "cometes",
  "comis",
  "comitatus",
  "commemoro",
  "comminor",
  "commodo",
  "communis",
  "comparo",
  "compello",
  "complectus",
  "compono",
  "comprehendo",
  "comptus",
  "conatus",
  "concedo",
  "concido",
  "conculco",
  "condico",
  "conduco",
  "confero",
  "confido",
  "conforto",
  "confugo",
  "congregatio",
  "conicio",
  "coniecto",
  "conitor",
  "coniuratio",
  "conor",
  "conqueror",
  "conscendo",
  "conservo",
  "considero",
  "conspergo",
  "constans",
  "consuasor",
  "contabesco",
  "contego",
  "contigo",
  "contra",
  "conturbo",
  "conventus",
  "convoco",
  "copia",
  "copiose",
  "cornu",
  "corona",
  "corpus",
  "correptius",
  "corrigo",
  "corroboro",
  "corrumpo",
  "coruscus",
  "cotidie",
  "crapula",
  "cras",
  "crastinus",
  "creator",
  "creber",
  "crebro",
  "credo",
  "creo",
  "creptio",
  "crepusculum",
  "cresco",
  "creta",
  "cribro",
  "crinis",
  "cruciamentum",
  "crudelis",
  "cruentus",
  "crur",
  "crustulum",
  "crux",
  "cubicularis",
  "cubitum",
  "cubo",
  "cui",
  "cuius",
  "culpa",
  "culpo",
  "cultellus",
  "cultura",
  "cum",
  "cunabula",
  "cunae",
  "cunctatio",
  "cupiditas",
  "cupio",
  "cuppedia",
  "cupressus",
  "cur",
  "cura",
  "curatio",
  "curia",
  "curiositas",
  "curis",
  "curo",
  "curriculum",
  "currus",
  "cursim",
  "curso",
  "cursus",
  "curto",
  "curtus",
  "curvo",
  "curvus",
  "custodia",
  "damnatio",
  "damno",
  "dapifer",
  "debeo",
  "debilito",
  "decens",
  "decerno",
  "decet",
  "decimus",
  "decipio",
  "decor",
  "decretum",
  "decumbo",
  "dedecor",
  "dedico",
  "deduco",
  "defaeco",
  "defendo",
  "defero",
  "defessus",
  "defetiscor",
  "deficio",
  "defigo",
  "defleo",
  "defluo",
  "defungo",
  "degenero",
  "degero",
  "degusto",
  "deinde",
  "delectatio",
  "delego",
  "deleo",
  "delibero",
  "delicate",
  "delinquo",
  "deludo",
  "demens",
  "demergo",
  "demitto",
  "demo",
  "demonstro",
  "demoror",
  "demulceo",
  "demum",
  "denego",
  "denique",
  "dens",
  "denuncio",
  "denuo",
  "deorsum",
  "depereo",
  "depono",
  "depopulo",
  "deporto",
  "depraedor",
  "deprecator",
  "deprimo",
  "depromo",
  "depulso",
  "deputo",
  "derelinquo",
  "derideo",
  "deripio",
  "desidero",
  "desino",
  "desipio",
  "desolo",
  "desparatus",
  "despecto",
  "despirmatio",
  "infit",
  "inflammatio",
  "paens",
  "patior",
  "patria",
  "patrocinor",
  "patruus",
  "pauci",
  "paulatim",
  "pauper",
  "pax",
  "peccatus",
  "pecco",
  "pecto",
  "pectus",
  "pecunia",
  "pecus",
  "peior",
  "pel",
  "ocer",
  "socius",
  "sodalitas",
  "sol",
  "soleo",
  "solio",
  "solitudo",
  "solium",
  "sollers",
  "sollicito",
  "solum",
  "solus",
  "solutio",
  "solvo",
  "somniculosus",
  "somnus",
  "sonitus",
  "sono",
  "sophismata",
  "sopor",
  "sordeo",
  "sortitus",
  "spargo",
  "speciosus",
  "spectaculum",
  "speculum",
  "sperno",
  "spero",
  "spes",
  "spiculum",
  "spiritus",
  "spoliatio",
  "sponte",
  "stabilis",
  "statim",
  "statua",
  "stella",
  "stillicidium",
  "stipes",
  "stips",
  "sto",
  "strenuus",
  "strues",
  "studio",
  "stultus",
  "suadeo",
  "suasoria",
  "sub",
  "subito",
  "subiungo",
  "sublime",
  "subnecto",
  "subseco",
  "substantia",
  "subvenio",
  "succedo",
  "succurro",
  "sufficio",
  "suffoco",
  "suffragium",
  "suggero",
  "sui",
  "sulum",
  "sum",
  "summa",
  "summisse",
  "summopere",
  "sumo",
  "sumptus",
  "supellex",
  "super",
  "suppellex",
  "supplanto",
  "suppono",
  "supra",
  "surculus",
  "surgo",
  "sursum",
  "suscipio",
  "suspendo",
  "sustineo",
  "suus",
  "synagoga",
  "tabella",
  "tabernus",
  "tabesco",
  "tabgo",
  "tabula",
  "taceo",
  "tactus",
  "taedium",
  "talio",
  "talis",
  "talus",
  "tam",
  "tamdiu",
  "tamen",
  "tametsi",
  "tamisium",
  "tamquam",
  "tandem",
  "tantillus",
  "tantum",
  "tardus",
  "tego",
  "temeritas",
  "temperantia",
  "templum",
  "temptatio",
  "tempus",
  "tenax",
  "tendo",
  "teneo",
  "tener",
  "tenuis",
  "tenus",
  "tepesco",
  "tepidus",
  "ter",
  "terebro",
  "teres",
  "terga",
  "tergeo",
  "tergiversatio",
  "tergo",
  "tergum",
  "termes",
  "terminatio",
  "tero",
  "terra",
  "terreo",
  "territo",
  "terror",
  "tersus",
  "tertius",
  "testimonium",
  "texo",
  "textilis",
  "textor",
  "textus",
  "thalassinus",
  "theatrum",
  "theca",
  "thema",
  "theologus",
  "thermae",
  "thesaurus",
  "thesis",
  "thorax",
  "thymbra",
  "thymum",
  "tibi",
  "timidus",
  "timor",
  "titulus",
  "tolero",
  "tollo",
  "tondeo",
  "tonsor",
  "torqueo",
  "torrens",
  "tot",
  "totidem",
  "toties",
  "totus",
  "tracto",
  "trado",
  "traho",
  "trans",
  "tredecim",
  "tremo",
  "trepide",
  "tres",
  "tribuo",
  "tricesimus",
  "triduana",
  "triginta",
  "tripudio",
  "tristis",
  "triumphus",
  "trucido",
  "truculenter",
  "tubineus",
  "tui",
  "tum",
  "tumultus",
  "tunc",
  "turba",
  "turbo",
  "turpe",
  "turpis",
  "tutamen",
  "tutis",
  "tyrannus",
  "uberrime",
  "ubi",
  "ulciscor",
  "ullus",
  "ulterius",
  "ultio",
  "ultra",
  "umbra",
  "umerus",
  "umquam",
  "una",
  "unde",
  "undique",
  "universe",
  "unus",
  "urbanus",
  "urbs",
  "uredo",
  "usitas",
  "usque",
  "ustilo",
  "ustulo",
  "usus",
  "uter",
  "uterque",
  "utilis",
  "utique",
  "utor",
  "utpote",
  "utrimque",
  "utroque",
  "utrum",
  "uxor",
  "vaco",
  "vacuus",
  "vado",
  "vae",
  "valde",
  "valens",
  "valeo",
  "valetudo",
  "validus",
  "vallum",
  "vapulus",
  "varietas",
  "varius",
  "vehemens",
  "vel",
  "velociter",
  "velum",
  "velut",
  "venia",
  "venio",
  "ventito",
  "ventosus",
  "ventus",
  "venustas",
  "ver",
  "verbera",
  "verbum",
  "vere",
  "verecundia",
  "vereor",
  "vergo",
  "veritas",
  "vero",
  "versus",
  "verto",
  "verumtamen",
  "verus",
  "vesco",
  "vesica",
  "vesper",
  "vespillo",
  "vester",
  "vestigium",
  "vestrum",
  "vetus",
  "via",
  "vicinus",
  "vicissitudo",
  "victoria",
  "victus",
  "videlicet",
  "video",
  "viduata",
  "viduo",
  "vigilo",
  "vigor",
  "vilicus",
  "vilis",
  "vilitas",
  "villa",
  "vinco",
  "vinculum",
  "vindico",
  "vinitor",
  "vinum",
  "vir",
  "virga",
  "virgo",
  "viridis",
  "viriliter",
  "virtus",
  "vis",
  "viscus",
  "vita",
  "vitiosus",
  "vitium",
  "vito",
  "vivo",
  "vix",
  "vobis",
  "vociferor",
  "voco",
  "volaticus",
  "volo",
  "volubilis",
  "voluntarius",
  "volup",
  "volutabrum",
  "volva",
  "vomer",
  "vomica",
  "vomito",
  "vorago",
  "vorax",
  "voro",
  "vos",
  "votum",
  "voveo",
  "vox",
  "vulariter",
  "vulgaris",
  "vulgivagus",
  "vulgo",
  "vulgus",
  "vulnero",
  "vulnus",
  "vulpes",
  "vulticulus",
  "vultuosus",
  "xiphias"
];

},{}],"node_modules/faker/lib/locales/pl/lorem/index.js":[function(require,module,exports) {
var lorem = {};
module['exports'] = lorem;
lorem.words = require("./words");
lorem.supplemental = require("./supplemental");

},{"./words":"node_modules/faker/lib/locales/pl/lorem/words.js","./supplemental":"node_modules/faker/lib/locales/pl/lorem/supplemental.js"}],"node_modules/faker/lib/locales/pl/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "12-###-##-##",
  "13-###-##-##",
  "14-###-##-##",
  "15-###-##-##",
  "16-###-##-##",
  "17-###-##-##",
  "18-###-##-##",
  "22-###-##-##",
  "23-###-##-##",
  "24-###-##-##",
  "25-###-##-##",
  "29-###-##-##",
  "32-###-##-##",
  "33-###-##-##",
  "34-###-##-##",
  "41-###-##-##",
  "42-###-##-##",
  "43-###-##-##",
  "44-###-##-##",
  "46-###-##-##",
  "48-###-##-##",
  "52-###-##-##",
  "54-###-##-##",
  "55-###-##-##",
  "56-###-##-##",
  "58-###-##-##",
  "59-###-##-##",
  "61-###-##-##",
  "62-###-##-##",
  "63-###-##-##",
  "65-###-##-##",
  "67-###-##-##",
  "68-###-##-##",
  "71-###-##-##",
  "74-###-##-##",
  "75-###-##-##",
  "76-###-##-##",
  "77-###-##-##",
  "81-###-##-##",
  "82-###-##-##",
  "83-###-##-##",
  "84-###-##-##",
  "85-###-##-##",
  "86-###-##-##",
  "87-###-##-##",
  "89-###-##-##",
  "91-###-##-##",
  "94-###-##-##",
  "95-###-##-##"
];

},{}],"node_modules/faker/lib/locales/pl/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/pl/phone_number/formats.js"}],"node_modules/faker/lib/locales/pl/cell_phone/formats.js":[function(require,module,exports) {
module["exports"] = [
  "50-###-##-##",
  "51-###-##-##",
  "53-###-##-##",
  "57-###-##-##",
  "60-###-##-##",
  "66-###-##-##",
  "69-###-##-##",
  "72-###-##-##",
  "73-###-##-##",
  "78-###-##-##",
  "79-###-##-##",
  "88-###-##-##"
];

},{}],"node_modules/faker/lib/locales/pl/cell_phone/index.js":[function(require,module,exports) {
var cell_phone = {};
module['exports'] = cell_phone;
cell_phone.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/pl/cell_phone/formats.js"}],"node_modules/faker/lib/locales/pl/index.js":[function(require,module,exports) {
var pl = {};
module['exports'] = pl;
pl.title = "Polish";
pl.name = require("./name");
pl.address = require("./address");
pl.company = require("./company");
pl.internet = require("./internet");
pl.lorem = require("./lorem");
pl.phone_number = require("./phone_number");
pl.cell_phone = require("./cell_phone");

},{"./name":"node_modules/faker/lib/locales/pl/name/index.js","./address":"node_modules/faker/lib/locales/pl/address/index.js","./company":"node_modules/faker/lib/locales/pl/company/index.js","./internet":"node_modules/faker/lib/locales/pl/internet/index.js","./lorem":"node_modules/faker/lib/locales/pl/lorem/index.js","./phone_number":"node_modules/faker/lib/locales/pl/phone_number/index.js","./cell_phone":"node_modules/faker/lib/locales/pl/cell_phone/index.js"}],"node_modules/faker/lib/locales/pt_BR/address/city_prefix.js":[function(require,module,exports) {
module["exports"] = [
  "Nova",
  "Velha",
  "Grande",
  "Vila",
  "Município de"
];

},{}],"node_modules/faker/lib/locales/pt_BR/address/city_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "do Descoberto",
  "de Nossa Senhora",
  "do Norte",
  "do Sul"
];

},{}],"node_modules/faker/lib/locales/pt_BR/address/country.js":[function(require,module,exports) {
module["exports"] = [
  "Afeganistão",
  "Albânia",
  "Algéria",
  "Samoa",
  "Andorra",
  "Angola",
  "Anguilla",
  "Antigua and Barbada",
  "Argentina",
  "Armênia",
  "Aruba",
  "Austrália",
  "Áustria",
  "Alzerbajão",
  "Bahamas",
  "Barém",
  "Bangladesh",
  "Barbado",
  "Belgrado",
  "Bélgica",
  "Belize",
  "Benin",
  "Bermuda",
  "Bhutan",
  "Bolívia",
  "Bôsnia",
  "Botuasuna",
  "Bouvetoia",
  "Brasil",
  "Arquipélago de Chagos",
  "Ilhas Virgens",
  "Brunei",
  "Bulgária",
  "Burkina Faso",
  "Burundi",
  "Cambójia",
  "Camarões",
  "Canadá",
  "Cabo Verde",
  "Ilhas Caiman",
  "República da África Central",
  "Chad",
  "Chile",
  "China",
  "Ilhas Natal",
  "Ilhas Cocos",
  "Colômbia",
  "Comoros",
  "Congo",
  "Ilhas Cook",
  "Costa Rica",
  "Costa do Marfim",
  "Croácia",
  "Cuba",
  "Cyprus",
  "República Tcheca",
  "Dinamarca",
  "Djibouti",
  "Dominica",
  "República Dominicana",
  "Equador",
  "Egito",
  "El Salvador",
  "Guiné Equatorial",
  "Eritrea",
  "Estônia",
  "Etiópia",
  "Ilhas Faroe",
  "Malvinas",
  "Fiji",
  "Finlândia",
  "França",
  "Guiné Francesa",
  "Polinésia Francesa",
  "Gabão",
  "Gâmbia",
  "Georgia",
  "Alemanha",
  "Gana",
  "Gibraltar",
  "Grécia",
  "Groelândia",
  "Granada",
  "Guadalupe",
  "Guano",
  "Guatemala",
  "Guernsey",
  "Guiné",
  "Guiné-Bissau",
  "Guiana",
  "Haiti",
  "Heard Island and McDonald Islands",
  "Vaticano",
  "Honduras",
  "Hong Kong",
  "Hungria",
  "Iceland",
  "Índia",
  "Indonésia",
  "Irã",
  "Iraque",
  "Irlanda",
  "Ilha de Man",
  "Israel",
  "Itália",
  "Jamaica",
  "Japão",
  "Jersey",
  "Jordânia",
  "Cazaquistão",
  "Quênia",
  "Kiribati",
  "Coreia do Norte",
  "Coreia do Sul",
  "Kuwait",
  "Kyrgyz Republic",
  "República Democrática de Lao People",
  "Latvia",
  "Líbano",
  "Lesotho",
  "Libéria",
  "Libyan Arab Jamahiriya",
  "Liechtenstein",
  "Lituânia",
  "Luxemburgo",
  "Macao",
  "Macedônia",
  "Madagascar",
  "Malawi",
  "Malásia",
  "Maldives",
  "Mali",
  "Malta",
  "Ilhas Marshall",
  "Martinica",
  "Mauritânia",
  "Mauritius",
  "Mayotte",
  "México",
  "Micronésia",
  "Moldova",
  "Mônaco",
  "Mongólia",
  "Montenegro",
  "Montserrat",
  "Marrocos",
  "Moçambique",
  "Myanmar",
  "Namibia",
  "Nauru",
  "Nepal",
  "Antilhas Holandesas",
  "Holanda",
  "Nova Caledonia",
  "Nova Zelândia",
  "Nicarágua",
  "Nigéria",
  "Niue",
  "Ilha Norfolk",
  "Northern Mariana Islands",
  "Noruega",
  "Oman",
  "Paquistão",
  "Palau",
  "Território da Palestina",
  "Panamá",
  "Nova Guiné Papua",
  "Paraguai",
  "Peru",
  "Filipinas",
  "Polônia",
  "Portugal",
  "Puerto Rico",
  "Qatar",
  "Romênia",
  "Rússia",
  "Ruanda",
  "São Bartolomeu",
  "Santa Helena",
  "Santa Lúcia",
  "Saint Martin",
  "Saint Pierre and Miquelon",
  "Saint Vincent and the Grenadines",
  "Samoa",
  "San Marino",
  "Sao Tomé e Príncipe",
  "Arábia Saudita",
  "Senegal",
  "Sérvia",
  "Seychelles",
  "Serra Leoa",
  "Singapura",
  "Eslováquia",
  "Eslovênia",
  "Ilhas Salomão",
  "Somália",
  "África do Sul",
  "South Georgia and the South Sandwich Islands",
  "Spanha",
  "Sri Lanka",
  "Sudão",
  "Suriname",
  "Svalbard & Jan Mayen Islands",
  "Swaziland",
  "Suécia",
  "Suíça",
  "Síria",
  "Taiwan",
  "Tajiquistão",
  "Tanzânia",
  "Tailândia",
  "Timor-Leste",
  "Togo",
  "Tokelau",
  "Tonga",
  "Trinidá e Tobago",
  "Tunísia",
  "Turquia",
  "Turcomenistão",
  "Turks and Caicos Islands",
  "Tuvalu",
  "Uganda",
  "Ucrânia",
  "Emirados Árabes Unidos",
  "Reino Unido",
  "Estados Unidos da América",
  "Estados Unidos das Ilhas Virgens",
  "Uruguai",
  "Uzbequistão",
  "Vanuatu",
  "Venezuela",
  "Vietnã",
  "Wallis and Futuna",
  "Sahara",
  "Yemen",
  "Zâmbia",
  "Zimbábue"
];

},{}],"node_modules/faker/lib/locales/pt_BR/address/building_number.js":[function(require,module,exports) {
module["exports"] = [
  "#####",
  "####",
  "###"
];

},{}],"node_modules/faker/lib/locales/pt_BR/address/street_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "Rua",
  "Avenida",
  "Travessa",
  "Ponte",
  "Alameda",
  "Marginal",
  "Viela",
  "Rodovia"
];

},{}],"node_modules/faker/lib/locales/pt_BR/address/secondary_address.js":[function(require,module,exports) {
module["exports"] = [
  "Apto. ###",
  "Sobrado ##",
  "Casa #",
  "Lote ##",
  "Quadra ##"
];

},{}],"node_modules/faker/lib/locales/pt_BR/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "#####",
  "#####-###"
];

},{}],"node_modules/faker/lib/locales/pt_BR/address/state.js":[function(require,module,exports) {
module["exports"] = [
  "Acre",
  "Alagoas",
  "Amapá",
  "Amazonas",
  "Bahia",
  "Ceará",
  "Distrito Federal",
  "Espírito Santo",
  "Goiás",
  "Maranhão",
  "Mato Grosso",
  "Mato Grosso do Sul",
  "Minas Gerais",
  "Pará",
  "Paraíba",
  "Paraná",
  "Pernambuco",
  "Piauí",
  "Rio de Janeiro",
  "Rio Grande do Norte",
  "Rio Grande do Sul",
  "Rondônia",
  "Roraima",
  "Santa Catarina",
  "São Paulo",
  "Sergipe",
  "Tocantins"
];

},{}],"node_modules/faker/lib/locales/pt_BR/address/state_abbr.js":[function(require,module,exports) {
module["exports"] = [
  "AC",
  "AL",
  "AP",
  "AM",
  "BA",
  "CE",
  "DF",
  "ES",
  "GO",
  "MA",
  "MT",
  "MS",
  "PA",
  "PB",
  "PR",
  "PE",
  "PI",
  "RJ",
  "RN",
  "RS",
  "RO",
  "RR",
  "SC",
  "SP"
];

},{}],"node_modules/faker/lib/locales/pt_BR/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "Brasil"
];

},{}],"node_modules/faker/lib/locales/pt_BR/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.city_prefix = require("./city_prefix");
address.city_suffix = require("./city_suffix");
address.country = require("./country");
address.building_number = require("./building_number");
address.street_suffix = require("./street_suffix");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.default_country = require("./default_country");

},{"./city_prefix":"node_modules/faker/lib/locales/pt_BR/address/city_prefix.js","./city_suffix":"node_modules/faker/lib/locales/pt_BR/address/city_suffix.js","./country":"node_modules/faker/lib/locales/pt_BR/address/country.js","./building_number":"node_modules/faker/lib/locales/pt_BR/address/building_number.js","./street_suffix":"node_modules/faker/lib/locales/pt_BR/address/street_suffix.js","./secondary_address":"node_modules/faker/lib/locales/pt_BR/address/secondary_address.js","./postcode":"node_modules/faker/lib/locales/pt_BR/address/postcode.js","./state":"node_modules/faker/lib/locales/pt_BR/address/state.js","./state_abbr":"node_modules/faker/lib/locales/pt_BR/address/state_abbr.js","./default_country":"node_modules/faker/lib/locales/pt_BR/address/default_country.js"}],"node_modules/faker/lib/locales/pt_BR/company/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "S.A.",
  "LTDA",
  "e Associados",
  "Comércio"
];

},{}],"node_modules/faker/lib/locales/pt_BR/company/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{Name.last_name} #{suffix}",
  "#{Name.last_name}-#{Name.last_name}",
  "#{Name.last_name}, #{Name.last_name} e #{Name.last_name}"
];

},{}],"node_modules/faker/lib/locales/pt_BR/company/index.js":[function(require,module,exports) {
var company = {};
module['exports'] = company;
company.suffix = require("./suffix");
company.name = require("./name");

},{"./suffix":"node_modules/faker/lib/locales/pt_BR/company/suffix.js","./name":"node_modules/faker/lib/locales/pt_BR/company/name.js"}],"node_modules/faker/lib/locales/pt_BR/internet/free_email.js":[function(require,module,exports) {
module["exports"] = [
  "gmail.com",
  "yahoo.com",
  "hotmail.com",
  "live.com",
  "bol.com.br"
];

},{}],"node_modules/faker/lib/locales/pt_BR/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "br",
  "com",
  "biz",
  "info",
  "name",
  "net",
  "org"
];

},{}],"node_modules/faker/lib/locales/pt_BR/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.free_email = require("./free_email");
internet.domain_suffix = require("./domain_suffix");

},{"./free_email":"node_modules/faker/lib/locales/pt_BR/internet/free_email.js","./domain_suffix":"node_modules/faker/lib/locales/pt_BR/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/pt_BR/lorem/words.js":[function(require,module,exports) {
module["exports"] = [
  "alias",
  "consequatur",
  "aut",
  "perferendis",
  "sit",
  "voluptatem",
  "accusantium",
  "doloremque",
  "aperiam",
  "eaque",
  "ipsa",
  "quae",
  "ab",
  "illo",
  "inventore",
  "veritatis",
  "et",
  "quasi",
  "architecto",
  "beatae",
  "vitae",
  "dicta",
  "sunt",
  "explicabo",
  "aspernatur",
  "aut",
  "odit",
  "aut",
  "fugit",
  "sed",
  "quia",
  "consequuntur",
  "magni",
  "dolores",
  "eos",
  "qui",
  "ratione",
  "voluptatem",
  "sequi",
  "nesciunt",
  "neque",
  "dolorem",
  "ipsum",
  "quia",
  "dolor",
  "sit",
  "amet",
  "consectetur",
  "adipisci",
  "velit",
  "sed",
  "quia",
  "non",
  "numquam",
  "eius",
  "modi",
  "tempora",
  "incidunt",
  "ut",
  "labore",
  "et",
  "dolore",
  "magnam",
  "aliquam",
  "quaerat",
  "voluptatem",
  "ut",
  "enim",
  "ad",
  "minima",
  "veniam",
  "quis",
  "nostrum",
  "exercitationem",
  "ullam",
  "corporis",
  "nemo",
  "enim",
  "ipsam",
  "voluptatem",
  "quia",
  "voluptas",
  "sit",
  "suscipit",
  "laboriosam",
  "nisi",
  "ut",
  "aliquid",
  "ex",
  "ea",
  "commodi",
  "consequatur",
  "quis",
  "autem",
  "vel",
  "eum",
  "iure",
  "reprehenderit",
  "qui",
  "in",
  "ea",
  "voluptate",
  "velit",
  "esse",
  "quam",
  "nihil",
  "molestiae",
  "et",
  "iusto",
  "odio",
  "dignissimos",
  "ducimus",
  "qui",
  "blanditiis",
  "praesentium",
  "laudantium",
  "totam",
  "rem",
  "voluptatum",
  "deleniti",
  "atque",
  "corrupti",
  "quos",
  "dolores",
  "et",
  "quas",
  "molestias",
  "excepturi",
  "sint",
  "occaecati",
  "cupiditate",
  "non",
  "provident",
  "sed",
  "ut",
  "perspiciatis",
  "unde",
  "omnis",
  "iste",
  "natus",
  "error",
  "similique",
  "sunt",
  "in",
  "culpa",
  "qui",
  "officia",
  "deserunt",
  "mollitia",
  "animi",
  "id",
  "est",
  "laborum",
  "et",
  "dolorum",
  "fuga",
  "et",
  "harum",
  "quidem",
  "rerum",
  "facilis",
  "est",
  "et",
  "expedita",
  "distinctio",
  "nam",
  "libero",
  "tempore",
  "cum",
  "soluta",
  "nobis",
  "est",
  "eligendi",
  "optio",
  "cumque",
  "nihil",
  "impedit",
  "quo",
  "porro",
  "quisquam",
  "est",
  "qui",
  "minus",
  "id",
  "quod",
  "maxime",
  "placeat",
  "facere",
  "possimus",
  "omnis",
  "voluptas",
  "assumenda",
  "est",
  "omnis",
  "dolor",
  "repellendus",
  "temporibus",
  "autem",
  "quibusdam",
  "et",
  "aut",
  "consequatur",
  "vel",
  "illum",
  "qui",
  "dolorem",
  "eum",
  "fugiat",
  "quo",
  "voluptas",
  "nulla",
  "pariatur",
  "at",
  "vero",
  "eos",
  "et",
  "accusamus",
  "officiis",
  "debitis",
  "aut",
  "rerum",
  "necessitatibus",
  "saepe",
  "eveniet",
  "ut",
  "et",
  "voluptates",
  "repudiandae",
  "sint",
  "et",
  "molestiae",
  "non",
  "recusandae",
  "itaque",
  "earum",
  "rerum",
  "hic",
  "tenetur",
  "a",
  "sapiente",
  "delectus",
  "ut",
  "aut",
  "reiciendis",
  "voluptatibus",
  "maiores",
  "doloribus",
  "asperiores",
  "repellat"
];

},{}],"node_modules/faker/lib/locales/pt_BR/lorem/index.js":[function(require,module,exports) {
var lorem = {};
module['exports'] = lorem;
lorem.words = require("./words");

},{"./words":"node_modules/faker/lib/locales/pt_BR/lorem/words.js"}],"node_modules/faker/lib/locales/pt_BR/name/first_name.js":[function(require,module,exports) {
module["exports"] = [
  "Alessandro",
  "Alessandra",
  "Alexandre",
  "Aline",
  "Antônio",
  "Breno",
  "Bruna",
  "Carlos",
  "Carla",
  "Célia",
  "Cecília",
  "César",
  "Danilo",
  "Dalila",
  "Deneval",
  "Eduardo",
  "Eduarda",
  "Esther",
  "Elísio",
  "Fábio",
  "Fabrício",
  "Fabrícia",
  "Félix",
  "Felícia",
  "Feliciano",
  "Frederico",
  "Fabiano",
  "Gustavo",
  "Guilherme",
  "Gúbio",
  "Heitor",
  "Hélio",
  "Hugo",
  "Isabel",
  "Isabela",
  "Ígor",
  "João",
  "Joana",
  "Júlio César",
  "Júlio",
  "Júlia",
  "Janaína",
  "Karla",
  "Kléber",
  "Lucas",
  "Lorena",
  "Lorraine",
  "Larissa",
  "Ladislau",
  "Marcos",
  "Meire",
  "Marcelo",
  "Marcela",
  "Margarida",
  "Mércia",
  "Márcia",
  "Marli",
  "Morgana",
  "Maria",
  "Norberto",
  "Natália",
  "Nataniel",
  "Núbia",
  "Ofélia",
  "Paulo",
  "Paula",
  "Pablo",
  "Pedro",
  "Raul",
  "Rafael",
  "Rafaela",
  "Ricardo",
  "Roberto",
  "Roberta",
  "Sílvia",
  "Sílvia",
  "Silas",
  "Suélen",
  "Sara",
  "Salvador",
  "Sirineu",
  "Talita",
  "Tertuliano",
  "Vicente",
  "Víctor",
  "Vitória",
  "Yango",
  "Yago",
  "Yuri",
  "Washington",
  "Warley"
];

},{}],"node_modules/faker/lib/locales/pt_BR/name/last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Silva",
  "Souza",
  "Carvalho",
  "Santos",
  "Reis",
  "Xavier",
  "Franco",
  "Braga",
  "Macedo",
  "Batista",
  "Barros",
  "Moraes",
  "Costa",
  "Pereira",
  "Carvalho",
  "Melo",
  "Saraiva",
  "Nogueira",
  "Oliveira",
  "Martins",
  "Moreira",
  "Albuquerque"
];

},{}],"node_modules/faker/lib/locales/pt_BR/name/prefix.js":[function(require,module,exports) {
module["exports"] = [
  "Sr.",
  "Sra.",
  "Srta.",
  "Dr."
];

},{}],"node_modules/faker/lib/locales/pt_BR/name/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "Jr.",
  "Neto",
  "Filho"
];

},{}],"node_modules/faker/lib/locales/pt_BR/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");
name.prefix = require("./prefix");
name.suffix = require("./suffix");

},{"./first_name":"node_modules/faker/lib/locales/pt_BR/name/first_name.js","./last_name":"node_modules/faker/lib/locales/pt_BR/name/last_name.js","./prefix":"node_modules/faker/lib/locales/pt_BR/name/prefix.js","./suffix":"node_modules/faker/lib/locales/pt_BR/name/suffix.js"}],"node_modules/faker/lib/locales/pt_BR/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "(##) ####-####",
  "+55 (##) ####-####",
  "(##) #####-####"
];

},{}],"node_modules/faker/lib/locales/pt_BR/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/pt_BR/phone_number/formats.js"}],"node_modules/faker/lib/locales/pt_BR/index.js":[function(require,module,exports) {
var pt_BR = {};
module['exports'] = pt_BR;
pt_BR.title = "Portuguese (Brazil)";
pt_BR.address = require("./address");
pt_BR.company = require("./company");
pt_BR.internet = require("./internet");
pt_BR.lorem = require("./lorem");
pt_BR.name = require("./name");
pt_BR.phone_number = require("./phone_number");

},{"./address":"node_modules/faker/lib/locales/pt_BR/address/index.js","./company":"node_modules/faker/lib/locales/pt_BR/company/index.js","./internet":"node_modules/faker/lib/locales/pt_BR/internet/index.js","./lorem":"node_modules/faker/lib/locales/pt_BR/lorem/index.js","./name":"node_modules/faker/lib/locales/pt_BR/name/index.js","./phone_number":"node_modules/faker/lib/locales/pt_BR/phone_number/index.js"}],"node_modules/faker/lib/locales/ru/address/country.js":[function(require,module,exports) {
module["exports"] = [
  "Австралия",
  "Австрия",
  "Азербайджан",
  "Албания",
  "Алжир",
  "Американское Самоа (не признана)",
  "Ангилья",
  "Ангола",
  "Андорра",
  "Антарктика (не признана)",
  "Антигуа и Барбуда",
  "Антильские Острова (не признана)",
  "Аомынь (не признана)",
  "Аргентина",
  "Армения",
  "Афганистан",
  "Багамские Острова",
  "Бангладеш",
  "Барбадос",
  "Бахрейн",
  "Беларусь",
  "Белиз",
  "Бельгия",
  "Бенин",
  "Болгария",
  "Боливия",
  "Босния и Герцеговина",
  "Ботсвана",
  "Бразилия",
  "Бруней",
  "Буркина-Фасо",
  "Бурунди",
  "Бутан",
  "Вануату",
  "Ватикан",
  "Великобритания",
  "Венгрия",
  "Венесуэла",
  "Восточный Тимор",
  "Вьетнам",
  "Габон",
  "Гаити",
  "Гайана",
  "Гамбия",
  "Гана",
  "Гваделупа (не признана)",
  "Гватемала",
  "Гвиана (не признана)",
  "Гвинея",
  "Гвинея-Бисау",
  "Германия",
  "Гондурас",
  "Гренада",
  "Греция",
  "Грузия",
  "Дания",
  "Джибути",
  "Доминика",
  "Доминиканская Республика",
  "Египет",
  "Замбия",
  "Зимбабве",
  "Израиль",
  "Индия",
  "Индонезия",
  "Иордания",
  "Ирак",
  "Иран",
  "Ирландия",
  "Исландия",
  "Испания",
  "Италия",
  "Йемен",
  "Кабо-Верде",
  "Казахстан",
  "Камбоджа",
  "Камерун",
  "Канада",
  "Катар",
  "Кения",
  "Кипр",
  "Кирибати",
  "Китай",
  "Колумбия",
  "Коморские Острова",
  "Конго",
  "Демократическая Республика",
  "Корея (Северная)",
  "Корея (Южная)",
  "Косово",
  "Коста-Рика",
  "Кот-д'Ивуар",
  "Куба",
  "Кувейт",
  "Кука острова",
  "Кыргызстан",
  "Лаос",
  "Латвия",
  "Лесото",
  "Либерия",
  "Ливан",
  "Ливия",
  "Литва",
  "Лихтенштейн",
  "Люксембург",
  "Маврикий",
  "Мавритания",
  "Мадагаскар",
  "Македония",
  "Малави",
  "Малайзия",
  "Мали",
  "Мальдивы",
  "Мальта",
  "Маршалловы Острова",
  "Мексика",
  "Микронезия",
  "Мозамбик",
  "Молдова",
  "Монако",
  "Монголия",
  "Марокко",
  "Мьянма",
  "Намибия",
  "Науру",
  "Непал",
  "Нигер",
  "Нигерия",
  "Нидерланды",
  "Никарагуа",
  "Новая Зеландия",
  "Норвегия",
  "Объединенные Арабские Эмираты",
  "Оман",
  "Пакистан",
  "Палау",
  "Панама",
  "Папуа — Новая Гвинея",
  "Парагвай",
  "Перу",
  "Польша",
  "Португалия",
  "Республика Конго",
  "Россия",
  "Руанда",
  "Румыния",
  "Сальвадор",
  "Самоа",
  "Сан-Марино",
  "Сан-Томе и Принсипи",
  "Саудовская Аравия",
  "Свазиленд",
  "Сейшельские острова",
  "Сенегал",
  "Сент-Винсент и Гренадины",
  "Сент-Киттс и Невис",
  "Сент-Люсия",
  "Сербия",
  "Сингапур",
  "Сирия",
  "Словакия",
  "Словения",
  "Соединенные Штаты Америки",
  "Соломоновы Острова",
  "Сомали",
  "Судан",
  "Суринам",
  "Сьерра-Леоне",
  "Таджикистан",
  "Таиланд",
  "Тайвань (не признана)",
  "Тамил-Илам (не признана)",
  "Танзания",
  "Тёркс и Кайкос (не признана)",
  "Того",
  "Токелау (не признана)",
  "Тонга",
  "Тринидад и Тобаго",
  "Тувалу",
  "Тунис",
  "Турецкая Республика Северного Кипра (не признана)",
  "Туркменистан",
  "Турция",
  "Уганда",
  "Узбекистан",
  "Украина",
  "Уругвай",
  "Фарерские Острова (не признана)",
  "Фиджи",
  "Филиппины",
  "Финляндия",
  "Франция",
  "Французская Полинезия (не признана)",
  "Хорватия",
  "Центральноафриканская Республика",
  "Чад",
  "Черногория",
  "Чехия",
  "Чили",
  "Швейцария",
  "Швеция",
  "Шри-Ланка",
  "Эквадор",
  "Экваториальная Гвинея",
  "Эритрея",
  "Эстония",
  "Эфиопия",
  "Южно-Африканская Республика",
  "Ямайка",
  "Япония"
];

},{}],"node_modules/faker/lib/locales/ru/address/building_number.js":[function(require,module,exports) {
module["exports"] = [
  "###"
];

},{}],"node_modules/faker/lib/locales/ru/address/street_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "ул.",
  "улица",
  "проспект",
  "пр.",
  "площадь",
  "пл."
];

},{}],"node_modules/faker/lib/locales/ru/address/secondary_address.js":[function(require,module,exports) {
module["exports"] = [
  "кв. ###"
];

},{}],"node_modules/faker/lib/locales/ru/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "######"
];

},{}],"node_modules/faker/lib/locales/ru/address/state.js":[function(require,module,exports) {
module["exports"] = [
  "Республика Адыгея",
  "Республика Башкортостан",
  "Республика Бурятия",
  "Республика Алтай Республика Дагестан",
  "Республика Ингушетия",
  "Кабардино-Балкарская Республика",
  "Республика Калмыкия",
  "Республика Карачаево-Черкессия",
  "Республика Карелия",
  "Республика Коми",
  "Республика Марий Эл",
  "Республика Мордовия",
  "Республика Саха (Якутия)",
  "Республика Северная Осетия-Алания",
  "Республика Татарстан",
  "Республика Тыва",
  "Удмуртская Республика",
  "Республика Хакасия",
  "Чувашская Республика",
  "Алтайский край",
  "Краснодарский край",
  "Красноярский край",
  "Приморский край",
  "Ставропольский край",
  "Хабаровский край",
  "Амурская область",
  "Архангельская область",
  "Астраханская область",
  "Белгородская область",
  "Брянская область",
  "Владимирская область",
  "Волгоградская область",
  "Вологодская область",
  "Воронежская область",
  "Ивановская область",
  "Иркутская область",
  "Калиниградская область",
  "Калужская область",
  "Камчатская область",
  "Кемеровская область",
  "Кировская область",
  "Костромская область",
  "Курганская область",
  "Курская область",
  "Ленинградская область",
  "Липецкая область",
  "Магаданская область",
  "Московская область",
  "Мурманская область",
  "Нижегородская область",
  "Новгородская область",
  "Новосибирская область",
  "Омская область",
  "Оренбургская область",
  "Орловская область",
  "Пензенская область",
  "Пермская область",
  "Псковская область",
  "Ростовская область",
  "Рязанская область",
  "Самарская область",
  "Саратовская область",
  "Сахалинская область",
  "Свердловская область",
  "Смоленская область",
  "Тамбовская область",
  "Тверская область",
  "Томская область",
  "Тульская область",
  "Тюменская область",
  "Ульяновская область",
  "Челябинская область",
  "Читинская область",
  "Ярославская область",
  "Еврейская автономная область",
  "Агинский Бурятский авт. округ",
  "Коми-Пермяцкий автономный округ",
  "Корякский автономный округ",
  "Ненецкий автономный округ",
  "Таймырский (Долгано-Ненецкий) автономный округ",
  "Усть-Ордынский Бурятский автономный округ",
  "Ханты-Мансийский автономный округ",
  "Чукотский автономный округ",
  "Эвенкийский автономный округ",
  "Ямало-Ненецкий автономный округ",
  "Чеченская Республика"
];

},{}],"node_modules/faker/lib/locales/ru/address/street_title.js":[function(require,module,exports) {
module["exports"] = [
  "Советская",
  "Молодежная",
  "Центральная",
  "Школьная",
  "Новая",
  "Садовая",
  "Лесная",
  "Набережная",
  "Ленина",
  "Мира",
  "Октябрьская",
  "Зеленая",
  "Комсомольская",
  "Заречная",
  "Первомайская",
  "Гагарина",
  "Полевая",
  "Луговая",
  "Пионерская",
  "Кирова",
  "Юбилейная",
  "Северная",
  "Пролетарская",
  "Степная",
  "Пушкина",
  "Калинина",
  "Южная",
  "Колхозная",
  "Рабочая",
  "Солнечная",
  "Железнодорожная",
  "Восточная",
  "Заводская",
  "Чапаева",
  "Нагорная",
  "Строителей",
  "Береговая",
  "Победы",
  "Горького",
  "Кооперативная",
  "Красноармейская",
  "Совхозная",
  "Речная",
  "Школьный",
  "Спортивная",
  "Озерная",
  "Строительная",
  "Парковая",
  "Чкалова",
  "Мичурина",
  "речень улиц",
  "Подгорная",
  "Дружбы",
  "Почтовая",
  "Партизанская",
  "Вокзальная",
  "Лермонтова",
  "Свободы",
  "Дорожная",
  "Дачная",
  "Маяковского",
  "Западная",
  "Фрунзе",
  "Дзержинского",
  "Московская",
  "Свердлова",
  "Некрасова",
  "Гоголя",
  "Красная",
  "Трудовая",
  "Шоссейная",
  "Чехова",
  "Коммунистическая",
  "Труда",
  "Комарова",
  "Матросова",
  "Островского",
  "Сосновая",
  "Клубная",
  "Куйбышева",
  "Крупской",
  "Березовая",
  "Карла Маркса",
  "8 Марта",
  "Больничная",
  "Садовый",
  "Интернациональная",
  "Суворова",
  "Цветочная",
  "Трактовая",
  "Ломоносова",
  "Горная",
  "Космонавтов",
  "Энергетиков",
  "Шевченко",
  "Весенняя",
  "Механизаторов",
  "Коммунальная",
  "Лесной",
  "40 лет Победы",
  "Майская"
];

},{}],"node_modules/faker/lib/locales/ru/address/city_name.js":[function(require,module,exports) {
module["exports"] = [
  "Москва",
  "Владимир",
  "Санкт-Петербург",
  "Новосибирск",
  "Екатеринбург",
  "Нижний Новгород",
  "Самара",
  "Казань",
  "Омск",
  "Челябинск",
  "Ростов-на-Дону",
  "Уфа",
  "Волгоград",
  "Пермь",
  "Красноярск",
  "Воронеж",
  "Саратов",
  "Краснодар",
  "Тольятти",
  "Ижевск",
  "Барнаул",
  "Ульяновск",
  "Тюмень",
  "Иркутск",
  "Владивосток",
  "Ярославль",
  "Хабаровск",
  "Махачкала",
  "Оренбург",
  "Новокузнецк",
  "Томск",
  "Кемерово",
  "Рязань",
  "Астрахань",
  "Пенза",
  "Липецк",
  "Тула",
  "Киров",
  "Чебоксары",
  "Курск",
  "Брянскm Магнитогорск",
  "Иваново",
  "Тверь",
  "Ставрополь",
  "Белгород",
  "Сочи"
];

},{}],"node_modules/faker/lib/locales/ru/address/city.js":[function(require,module,exports) {
module["exports"] = [
  "#{Address.city_name}"
];

},{}],"node_modules/faker/lib/locales/ru/address/street_name.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_suffix} #{Address.street_title}",
  "#{Address.street_title} #{street_suffix}"
];

},{}],"node_modules/faker/lib/locales/ru/address/street_address.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_name}, #{building_number}"
];

},{}],"node_modules/faker/lib/locales/ru/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "Россия"
];

},{}],"node_modules/faker/lib/locales/ru/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.country = require("./country");
address.building_number = require("./building_number");
address.street_suffix = require("./street_suffix");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.state = require("./state");
address.street_title = require("./street_title");
address.city_name = require("./city_name");
address.city = require("./city");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./country":"node_modules/faker/lib/locales/ru/address/country.js","./building_number":"node_modules/faker/lib/locales/ru/address/building_number.js","./street_suffix":"node_modules/faker/lib/locales/ru/address/street_suffix.js","./secondary_address":"node_modules/faker/lib/locales/ru/address/secondary_address.js","./postcode":"node_modules/faker/lib/locales/ru/address/postcode.js","./state":"node_modules/faker/lib/locales/ru/address/state.js","./street_title":"node_modules/faker/lib/locales/ru/address/street_title.js","./city_name":"node_modules/faker/lib/locales/ru/address/city_name.js","./city":"node_modules/faker/lib/locales/ru/address/city.js","./street_name":"node_modules/faker/lib/locales/ru/address/street_name.js","./street_address":"node_modules/faker/lib/locales/ru/address/street_address.js","./default_country":"node_modules/faker/lib/locales/ru/address/default_country.js"}],"node_modules/faker/lib/locales/ru/internet/free_email.js":[function(require,module,exports) {
module["exports"] = [
  "yandex.ru",
  "ya.ru",
  "mail.ru",
  "gmail.com",
  "yahoo.com",
  "hotmail.com"
];

},{}],"node_modules/faker/lib/locales/ru/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "com",
  "ru",
  "info",
  "рф",
  "net",
  "org"
];

},{}],"node_modules/faker/lib/locales/ru/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.free_email = require("./free_email");
internet.domain_suffix = require("./domain_suffix");

},{"./free_email":"node_modules/faker/lib/locales/ru/internet/free_email.js","./domain_suffix":"node_modules/faker/lib/locales/ru/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/ru/name/male_first_name.js":[function(require,module,exports) {
module["exports"] = [
  "Александр",
  "Алексей",
  "Альберт",
  "Анатолий",
  "Андрей",
  "Антон",
  "Аркадий",
  "Арсений",
  "Артём",
  "Борис",
  "Вадим",
  "Валентин",
  "Валерий",
  "Василий",
  "Виктор",
  "Виталий",
  "Владимир",
  "Владислав",
  "Вячеслав",
  "Геннадий",
  "Георгий",
  "Герман",
  "Григорий",
  "Даниил",
  "Денис",
  "Дмитрий",
  "Евгений",
  "Егор",
  "Иван",
  "Игнатий",
  "Игорь",
  "Илья",
  "Константин",
  "Лаврентий",
  "Леонид",
  "Лука",
  "Макар",
  "Максим",
  "Матвей",
  "Михаил",
  "Никита",
  "Николай",
  "Олег",
  "Роман",
  "Семён",
  "Сергей",
  "Станислав",
  "Степан",
  "Фёдор",
  "Эдуард",
  "Юрий",
  "Ярослав"
];

},{}],"node_modules/faker/lib/locales/ru/name/male_middle_name.js":[function(require,module,exports) {
module["exports"] = [
  "Александрович",
  "Алексеевич",
  "Альбертович",
  "Анатольевич",
  "Андреевич",
  "Антонович",
  "Аркадьевич",
  "Арсеньевич",
  "Артёмович",
  "Борисович",
  "Вадимович",
  "Валентинович",
  "Валерьевич",
  "Васильевич",
  "Викторович",
  "Витальевич",
  "Владимирович",
  "Владиславович",
  "Вячеславович",
  "Геннадьевич",
  "Георгиевич",
  "Германович",
  "Григорьевич",
  "Даниилович",
  "Денисович",
  "Дмитриевич",
  "Евгеньевич",
  "Егорович",
  "Иванович",
  "Игнатьевич",
  "Игоревич",
  "Ильич",
  "Константинович",
  "Лаврентьевич",
  "Леонидович",
  "Лукич",
  "Макарович",
  "Максимович",
  "Матвеевич",
  "Михайлович",
  "Никитич",
  "Николаевич",
  "Олегович",
  "Романович",
  "Семёнович",
  "Сергеевич",
  "Станиславович",
  "Степанович",
  "Фёдорович",
  "Эдуардович",
  "Юрьевич",
  "Ярославович"
];

},{}],"node_modules/faker/lib/locales/ru/name/male_last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Смирнов",
  "Иванов",
  "Кузнецов",
  "Попов",
  "Соколов",
  "Лебедев",
  "Козлов",
  "Новиков",
  "Морозов",
  "Петров",
  "Волков",
  "Соловьев",
  "Васильев",
  "Зайцев",
  "Павлов",
  "Семенов",
  "Голубев",
  "Виноградов",
  "Богданов",
  "Воробьев",
  "Федоров",
  "Михайлов",
  "Беляев",
  "Тарасов",
  "Белов",
  "Комаров",
  "Орлов",
  "Киселев",
  "Макаров",
  "Андреев",
  "Ковалев",
  "Ильин",
  "Гусев",
  "Титов",
  "Кузьмин",
  "Кудрявцев",
  "Баранов",
  "Куликов",
  "Алексеев",
  "Степанов",
  "Яковлев",
  "Сорокин",
  "Сергеев",
  "Романов",
  "Захаров",
  "Борисов",
  "Королев",
  "Герасимов",
  "Пономарев",
  "Григорьев",
  "Лазарев",
  "Медведев",
  "Ершов",
  "Никитин",
  "Соболев",
  "Рябов",
  "Поляков",
  "Цветков",
  "Данилов",
  "Жуков",
  "Фролов",
  "Журавлев",
  "Николаев",
  "Крылов",
  "Максимов",
  "Сидоров",
  "Осипов",
  "Белоусов",
  "Федотов",
  "Дорофеев",
  "Егоров",
  "Матвеев",
  "Бобров",
  "Дмитриев",
  "Калинин",
  "Анисимов",
  "Петухов",
  "Антонов",
  "Тимофеев",
  "Никифоров",
  "Веселов",
  "Филиппов",
  "Марков",
  "Большаков",
  "Суханов",
  "Миронов",
  "Ширяев",
  "Александров",
  "Коновалов",
  "Шестаков",
  "Казаков",
  "Ефимов",
  "Денисов",
  "Громов",
  "Фомин",
  "Давыдов",
  "Мельников",
  "Щербаков",
  "Блинов",
  "Колесников",
  "Карпов",
  "Афанасьев",
  "Власов",
  "Маслов",
  "Исаков",
  "Тихонов",
  "Аксенов",
  "Гаврилов",
  "Родионов",
  "Котов",
  "Горбунов",
  "Кудряшов",
  "Быков",
  "Зуев",
  "Третьяков",
  "Савельев",
  "Панов",
  "Рыбаков",
  "Суворов",
  "Абрамов",
  "Воронов",
  "Мухин",
  "Архипов",
  "Трофимов",
  "Мартынов",
  "Емельянов",
  "Горшков",
  "Чернов",
  "Овчинников",
  "Селезнев",
  "Панфилов",
  "Копылов",
  "Михеев",
  "Галкин",
  "Назаров",
  "Лобанов",
  "Лукин",
  "Беляков",
  "Потапов",
  "Некрасов",
  "Хохлов",
  "Жданов",
  "Наумов",
  "Шилов",
  "Воронцов",
  "Ермаков",
  "Дроздов",
  "Игнатьев",
  "Савин",
  "Логинов",
  "Сафонов",
  "Капустин",
  "Кириллов",
  "Моисеев",
  "Елисеев",
  "Кошелев",
  "Костин",
  "Горбачев",
  "Орехов",
  "Ефремов",
  "Исаев",
  "Евдокимов",
  "Калашников",
  "Кабанов",
  "Носков",
  "Юдин",
  "Кулагин",
  "Лапин",
  "Прохоров",
  "Нестеров",
  "Харитонов",
  "Агафонов",
  "Муравьев",
  "Ларионов",
  "Федосеев",
  "Зимин",
  "Пахомов",
  "Шубин",
  "Игнатов",
  "Филатов",
  "Крюков",
  "Рогов",
  "Кулаков",
  "Терентьев",
  "Молчанов",
  "Владимиров",
  "Артемьев",
  "Гурьев",
  "Зиновьев",
  "Гришин",
  "Кононов",
  "Дементьев",
  "Ситников",
  "Симонов",
  "Мишин",
  "Фадеев",
  "Комиссаров",
  "Мамонтов",
  "Носов",
  "Гуляев",
  "Шаров",
  "Устинов",
  "Вишняков",
  "Евсеев",
  "Лаврентьев",
  "Брагин",
  "Константинов",
  "Корнилов",
  "Авдеев",
  "Зыков",
  "Бирюков",
  "Шарапов",
  "Никонов",
  "Щукин",
  "Дьячков",
  "Одинцов",
  "Сазонов",
  "Якушев",
  "Красильников",
  "Гордеев",
  "Самойлов",
  "Князев",
  "Беспалов",
  "Уваров",
  "Шашков",
  "Бобылев",
  "Доронин",
  "Белозеров",
  "Рожков",
  "Самсонов",
  "Мясников",
  "Лихачев",
  "Буров",
  "Сысоев",
  "Фомичев",
  "Русаков",
  "Стрелков",
  "Гущин",
  "Тетерин",
  "Колобов",
  "Субботин",
  "Фокин",
  "Блохин",
  "Селиверстов",
  "Пестов",
  "Кондратьев",
  "Силин",
  "Меркушев",
  "Лыткин",
  "Туров"
];

},{}],"node_modules/faker/lib/locales/ru/name/female_first_name.js":[function(require,module,exports) {
module["exports"] = [
  "Анна",
  "Алёна",
  "Алевтина",
  "Александра",
  "Алина",
  "Алла",
  "Анастасия",
  "Ангелина",
  "Анжела",
  "Анжелика",
  "Антонида",
  "Антонина",
  "Анфиса",
  "Арина",
  "Валентина",
  "Валерия",
  "Варвара",
  "Василиса",
  "Вера",
  "Вероника",
  "Виктория",
  "Галина",
  "Дарья",
  "Евгения",
  "Екатерина",
  "Елена",
  "Елизавета",
  "Жанна",
  "Зинаида",
  "Зоя",
  "Ирина",
  "Кира",
  "Клавдия",
  "Ксения",
  "Лариса",
  "Лидия",
  "Любовь",
  "Людмила",
  "Маргарита",
  "Марина",
  "Мария",
  "Надежда",
  "Наталья",
  "Нина",
  "Оксана",
  "Ольга",
  "Раиса",
  "Регина",
  "Римма",
  "Светлана",
  "София",
  "Таисия",
  "Тамара",
  "Татьяна",
  "Ульяна",
  "Юлия"
];

},{}],"node_modules/faker/lib/locales/ru/name/female_middle_name.js":[function(require,module,exports) {
module["exports"] = [
  "Александровна",
  "Алексеевна",
  "Альбертовна",
  "Анатольевна",
  "Андреевна",
  "Антоновна",
  "Аркадьевна",
  "Арсеньевна",
  "Артёмовна",
  "Борисовна",
  "Вадимовна",
  "Валентиновна",
  "Валерьевна",
  "Васильевна",
  "Викторовна",
  "Витальевна",
  "Владимировна",
  "Владиславовна",
  "Вячеславовна",
  "Геннадьевна",
  "Георгиевна",
  "Германовна",
  "Григорьевна",
  "Данииловна",
  "Денисовна",
  "Дмитриевна",
  "Евгеньевна",
  "Егоровна",
  "Ивановна",
  "Игнатьевна",
  "Игоревна",
  "Ильинична",
  "Константиновна",
  "Лаврентьевна",
  "Леонидовна",
  "Макаровна",
  "Максимовна",
  "Матвеевна",
  "Михайловна",
  "Никитична",
  "Николаевна",
  "Олеговна",
  "Романовна",
  "Семёновна",
  "Сергеевна",
  "Станиславовна",
  "Степановна",
  "Фёдоровна",
  "Эдуардовна",
  "Юрьевна",
  "Ярославовна"
];

},{}],"node_modules/faker/lib/locales/ru/name/female_last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Смирнова",
  "Иванова",
  "Кузнецова",
  "Попова",
  "Соколова",
  "Лебедева",
  "Козлова",
  "Новикова",
  "Морозова",
  "Петрова",
  "Волкова",
  "Соловьева",
  "Васильева",
  "Зайцева",
  "Павлова",
  "Семенова",
  "Голубева",
  "Виноградова",
  "Богданова",
  "Воробьева",
  "Федорова",
  "Михайлова",
  "Беляева",
  "Тарасова",
  "Белова",
  "Комарова",
  "Орлова",
  "Киселева",
  "Макарова",
  "Андреева",
  "Ковалева",
  "Ильина",
  "Гусева",
  "Титова",
  "Кузьмина",
  "Кудрявцева",
  "Баранова",
  "Куликова",
  "Алексеева",
  "Степанова",
  "Яковлева",
  "Сорокина",
  "Сергеева",
  "Романова",
  "Захарова",
  "Борисова",
  "Королева",
  "Герасимова",
  "Пономарева",
  "Григорьева",
  "Лазарева",
  "Медведева",
  "Ершова",
  "Никитина",
  "Соболева",
  "Рябова",
  "Полякова",
  "Цветкова",
  "Данилова",
  "Жукова",
  "Фролова",
  "Журавлева",
  "Николаева",
  "Крылова",
  "Максимова",
  "Сидорова",
  "Осипова",
  "Белоусова",
  "Федотова",
  "Дорофеева",
  "Егорова",
  "Матвеева",
  "Боброва",
  "Дмитриева",
  "Калинина",
  "Анисимова",
  "Петухова",
  "Антонова",
  "Тимофеева",
  "Никифорова",
  "Веселова",
  "Филиппова",
  "Маркова",
  "Большакова",
  "Суханова",
  "Миронова",
  "Ширяева",
  "Александрова",
  "Коновалова",
  "Шестакова",
  "Казакова",
  "Ефимова",
  "Денисова",
  "Громова",
  "Фомина",
  "Давыдова",
  "Мельникова",
  "Щербакова",
  "Блинова",
  "Колесникова",
  "Карпова",
  "Афанасьева",
  "Власова",
  "Маслова",
  "Исакова",
  "Тихонова",
  "Аксенова",
  "Гаврилова",
  "Родионова",
  "Котова",
  "Горбунова",
  "Кудряшова",
  "Быкова",
  "Зуева",
  "Третьякова",
  "Савельева",
  "Панова",
  "Рыбакова",
  "Суворова",
  "Абрамова",
  "Воронова",
  "Мухина",
  "Архипова",
  "Трофимова",
  "Мартынова",
  "Емельянова",
  "Горшкова",
  "Чернова",
  "Овчинникова",
  "Селезнева",
  "Панфилова",
  "Копылова",
  "Михеева",
  "Галкина",
  "Назарова",
  "Лобанова",
  "Лукина",
  "Белякова",
  "Потапова",
  "Некрасова",
  "Хохлова",
  "Жданова",
  "Наумова",
  "Шилова",
  "Воронцова",
  "Ермакова",
  "Дроздова",
  "Игнатьева",
  "Савина",
  "Логинова",
  "Сафонова",
  "Капустина",
  "Кириллова",
  "Моисеева",
  "Елисеева",
  "Кошелева",
  "Костина",
  "Горбачева",
  "Орехова",
  "Ефремова",
  "Исаева",
  "Евдокимова",
  "Калашникова",
  "Кабанова",
  "Носкова",
  "Юдина",
  "Кулагина",
  "Лапина",
  "Прохорова",
  "Нестерова",
  "Харитонова",
  "Агафонова",
  "Муравьева",
  "Ларионова",
  "Федосеева",
  "Зимина",
  "Пахомова",
  "Шубина",
  "Игнатова",
  "Филатова",
  "Крюкова",
  "Рогова",
  "Кулакова",
  "Терентьева",
  "Молчанова",
  "Владимирова",
  "Артемьева",
  "Гурьева",
  "Зиновьева",
  "Гришина",
  "Кононова",
  "Дементьева",
  "Ситникова",
  "Симонова",
  "Мишина",
  "Фадеева",
  "Комиссарова",
  "Мамонтова",
  "Носова",
  "Гуляева",
  "Шарова",
  "Устинова",
  "Вишнякова",
  "Евсеева",
  "Лаврентьева",
  "Брагина",
  "Константинова",
  "Корнилова",
  "Авдеева",
  "Зыкова",
  "Бирюкова",
  "Шарапова",
  "Никонова",
  "Щукина",
  "Дьячкова",
  "Одинцова",
  "Сазонова",
  "Якушева",
  "Красильникова",
  "Гордеева",
  "Самойлова",
  "Князева",
  "Беспалова",
  "Уварова",
  "Шашкова",
  "Бобылева",
  "Доронина",
  "Белозерова",
  "Рожкова",
  "Самсонова",
  "Мясникова",
  "Лихачева",
  "Бурова",
  "Сысоева",
  "Фомичева",
  "Русакова",
  "Стрелкова",
  "Гущина",
  "Тетерина",
  "Колобова",
  "Субботина",
  "Фокина",
  "Блохина",
  "Селиверстова",
  "Пестова",
  "Кондратьева",
  "Силина",
  "Меркушева",
  "Лыткина",
  "Турова"
];

},{}],"node_modules/faker/lib/locales/ru/name/prefix.js":[function(require,module,exports) {
module["exports"] = [];

},{}],"node_modules/faker/lib/locales/ru/name/suffix.js":[function(require,module,exports) {
module["exports"] = [];

},{}],"node_modules/faker/lib/locales/ru/name/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{male_first_name} #{male_last_name}",
  "#{male_last_name} #{male_first_name}",
  "#{male_first_name} #{male_middle_name} #{male_last_name}",
  "#{male_last_name} #{male_first_name} #{male_middle_name}",
  "#{female_first_name} #{female_last_name}",
  "#{female_last_name} #{female_first_name}",
  "#{female_first_name} #{female_middle_name} #{female_last_name}",
  "#{female_last_name} #{female_first_name} #{female_middle_name}"
];

},{}],"node_modules/faker/lib/locales/ru/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.male_first_name = require("./male_first_name");
name.male_middle_name = require("./male_middle_name");
name.male_last_name = require("./male_last_name");
name.female_first_name = require("./female_first_name");
name.female_middle_name = require("./female_middle_name");
name.female_last_name = require("./female_last_name");
name.prefix = require("./prefix");
name.suffix = require("./suffix");
name.name = require("./name");

},{"./male_first_name":"node_modules/faker/lib/locales/ru/name/male_first_name.js","./male_middle_name":"node_modules/faker/lib/locales/ru/name/male_middle_name.js","./male_last_name":"node_modules/faker/lib/locales/ru/name/male_last_name.js","./female_first_name":"node_modules/faker/lib/locales/ru/name/female_first_name.js","./female_middle_name":"node_modules/faker/lib/locales/ru/name/female_middle_name.js","./female_last_name":"node_modules/faker/lib/locales/ru/name/female_last_name.js","./prefix":"node_modules/faker/lib/locales/ru/name/prefix.js","./suffix":"node_modules/faker/lib/locales/ru/name/suffix.js","./name":"node_modules/faker/lib/locales/ru/name/name.js"}],"node_modules/faker/lib/locales/ru/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "(9##)###-##-##"
];

},{}],"node_modules/faker/lib/locales/ru/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/ru/phone_number/formats.js"}],"node_modules/faker/lib/locales/ru/commerce/color.js":[function(require,module,exports) {
module["exports"] = [
  "красный",
  "зеленый",
  "синий",
  "желтый",
  "багровый",
  "мятный",
  "зеленовато-голубой",
  "белый",
  "черный",
  "оранжевый",
  "розовый",
  "серый",
  "красно-коричневый",
  "фиолетовый",
  "бирюзовый",
  "желто-коричневый",
  "небесно голубой",
  "оранжево-розовый",
  "темно-фиолетовый",
  "орхидный",
  "оливковый",
  "пурпурный",
  "лимонный",
  "кремовый",
  "сине-фиолетовый",
  "золотой",
  "красно-пурпурный",
  "голубой",
  "лазурный",
  "лиловый",
  "серебряный"
];

},{}],"node_modules/faker/lib/locales/ru/commerce/department.js":[function(require,module,exports) {
module["exports"] = [
  "Книги",
  "Фильмы",
  "музыка",
  "игры",
  "Электроника",
  "компьютеры",
  "Дом",
  "садинструмент",
  "Бакалея",
  "здоровье",
  "красота",
  "Игрушки",
  "детское",
  "для малышей",
  "Одежда",
  "обувь",
  "украшения",
  "Спорт",
  "туризм",
  "Автомобильное",
  "промышленное"
];

},{}],"node_modules/faker/lib/locales/ru/commerce/product_name.js":[function(require,module,exports) {
module["exports"] = {
  "adjective": [
    "Маленький",
    "Эргономичный",
    "Грубый",
    "Интеллектуальный",
    "Великолепный",
    "Невероятный",
    "Фантастический",
    "Практчиный",
    "Лоснящийся",
    "Потрясающий"
  ],
  "material": [
    "Стальной",
    "Деревянный",
    "Бетонный",
    "Пластиковый",
    "Хлопковый",
    "Гранитный",
    "Резиновый"
  ],
  "product": [
    "Стул",
    "Автомобиль",
    "Компьютер",
    "Берет",
    "Кулон",
    "Стол",
    "Свитер",
    "Ремень",
    "Ботинок"
  ]
};

},{}],"node_modules/faker/lib/locales/ru/commerce/index.js":[function(require,module,exports) {
var commerce = {};
module['exports'] = commerce;
commerce.color = require("./color");
commerce.department = require("./department");
commerce.product_name = require("./product_name");

},{"./color":"node_modules/faker/lib/locales/ru/commerce/color.js","./department":"node_modules/faker/lib/locales/ru/commerce/department.js","./product_name":"node_modules/faker/lib/locales/ru/commerce/product_name.js"}],"node_modules/faker/lib/locales/ru/company/prefix.js":[function(require,module,exports) {
module["exports"] = [
  "ИП",
  "ООО",
  "ЗАО",
  "ОАО",
  "НКО",
  "ТСЖ",
  "ОП"
];

},{}],"node_modules/faker/lib/locales/ru/company/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "Снаб",
  "Торг",
  "Пром",
  "Трейд",
  "Сбыт"
];

},{}],"node_modules/faker/lib/locales/ru/company/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{prefix} #{Name.female_first_name}",
  "#{prefix} #{Name.male_first_name}",
  "#{prefix} #{Name.male_last_name}",
  "#{prefix} #{suffix}#{suffix}",
  "#{prefix} #{suffix}#{suffix}#{suffix}",
  "#{prefix} #{Address.city_name}#{suffix}",
  "#{prefix} #{Address.city_name}#{suffix}#{suffix}",
  "#{prefix} #{Address.city_name}#{suffix}#{suffix}#{suffix}"
];

},{}],"node_modules/faker/lib/locales/ru/company/index.js":[function(require,module,exports) {
var company = {};
module['exports'] = company;
company.prefix = require("./prefix");
company.suffix = require("./suffix");
company.name = require("./name");

},{"./prefix":"node_modules/faker/lib/locales/ru/company/prefix.js","./suffix":"node_modules/faker/lib/locales/ru/company/suffix.js","./name":"node_modules/faker/lib/locales/ru/company/name.js"}],"node_modules/faker/lib/locales/ru/date/month.js":[function(require,module,exports) {
// source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/ru.xml#L1734
module["exports"] = {
  wide: [
    "январь",
    "февраль",
    "март",
    "апрель",
    "май",
    "июнь",
    "июль",
    "август",
    "сентябрь",
    "октябрь",
    "ноябрь",
    "декабрь"
  ],
  wide_context: [
    "января",
    "февраля",
    "марта",
    "апреля",
    "мая",
    "июня",
    "июля",
    "августа",
    "сентября",
    "октября",
    "ноября",
    "декабря"
  ],
  abbr: [
    "янв.",
    "февр.",
    "март",
    "апр.",
    "май",
    "июнь",
    "июль",
    "авг.",
    "сент.",
    "окт.",
    "нояб.",
    "дек."
  ],
  abbr_context: [
    "янв.",
    "февр.",
    "марта",
    "апр.",
    "мая",
    "июня",
    "июля",
    "авг.",
    "сент.",
    "окт.",
    "нояб.",
    "дек."
  ]
};

},{}],"node_modules/faker/lib/locales/ru/date/weekday.js":[function(require,module,exports) {
// source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/ru.xml#L1825
module["exports"] = {
  wide: [
    "Воскресенье",
    "Понедельник",
    "Вторник",
    "Среда",
    "Четверг",
    "Пятница",
    "Суббота"
  ],
  wide_context: [
    "воскресенье",
    "понедельник",
    "вторник",
    "среда",
    "четверг",
    "пятница",
    "суббота"
  ],
  abbr: [
    "Вс",
    "Пн",
    "Вт",
    "Ср",
    "Чт",
    "Пт",
    "Сб"
  ],
  abbr_context: [
    "вс",
    "пн",
    "вт",
    "ср",
    "чт",
    "пт",
    "сб"
  ]
};

},{}],"node_modules/faker/lib/locales/ru/date/index.js":[function(require,module,exports) {
var date = {};
module["exports"] = date;
date.month = require("./month");
date.weekday = require("./weekday");

},{"./month":"node_modules/faker/lib/locales/ru/date/month.js","./weekday":"node_modules/faker/lib/locales/ru/date/weekday.js"}],"node_modules/faker/lib/locales/ru/index.js":[function(require,module,exports) {
var ru = {};
module['exports'] = ru;
ru.title = "Russian";
ru.separator = " и ";
ru.address = require("./address");
ru.internet = require("./internet");
ru.name = require("./name");
ru.phone_number = require("./phone_number");
ru.commerce = require("./commerce");
ru.company = require("./company");
ru.date = require("./date");

},{"./address":"node_modules/faker/lib/locales/ru/address/index.js","./internet":"node_modules/faker/lib/locales/ru/internet/index.js","./name":"node_modules/faker/lib/locales/ru/name/index.js","./phone_number":"node_modules/faker/lib/locales/ru/phone_number/index.js","./commerce":"node_modules/faker/lib/locales/ru/commerce/index.js","./company":"node_modules/faker/lib/locales/ru/company/index.js","./date":"node_modules/faker/lib/locales/ru/date/index.js"}],"node_modules/faker/lib/locales/sk/address/city_prefix.js":[function(require,module,exports) {
module["exports"] = [
  "North",
  "East",
  "West",
  "South",
  "New",
  "Lake",
  "Port"
];

},{}],"node_modules/faker/lib/locales/sk/address/city_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "town",
  "ton",
  "land",
  "ville",
  "berg",
  "burgh",
  "borough",
  "bury",
  "view",
  "port",
  "mouth",
  "stad",
  "furt",
  "chester",
  "mouth",
  "fort",
  "haven",
  "side",
  "shire"
];

},{}],"node_modules/faker/lib/locales/sk/address/country.js":[function(require,module,exports) {
module["exports"] = [
  "Afganistan",
  "Afgánsky islamský štát",
  "Albánsko",
  "Albánska republika",
  "Alžírsko",
  "Alžírska demokratická ľudová republika",
  "Andorra",
  "Andorrské kniežatsvo",
  "Angola",
  "Angolská republika",
  "Antigua a Barbuda",
  "Antigua a Barbuda",
  "Argentína",
  "Argentínska republika",
  "Arménsko",
  "Arménska republika",
  "Austrália",
  "Austrálsky zväz",
  "Azerbajdžan",
  "Azerbajdžanská republika",
  "Bahamy",
  "Bahamské spoločenstvo",
  "Bahrajn",
  "Bahrajnské kráľovstvo",
  "Bangladéš",
  "Bangladéšska ľudová republika",
  "Barbados",
  "Barbados",
  "Belgicko",
  "Belgické kráľovstvo",
  "Belize",
  "Belize",
  "Benin",
  "Beninská republika",
  "Bhután",
  "Bhutánske kráľovstvo",
  "Bielorusko",
  "Bieloruská republika",
  "Bolívia",
  "Bolívijská republika",
  "Bosna a Hercegovina",
  "Republika Bosny a Hercegoviny",
  "Botswana",
  "Botswanská republika",
  "Brazília",
  "Brazílska federatívna republika",
  "Brunej",
  "Brunejský sultanát",
  "Bulharsko",
  "Bulharská republika",
  "Burkina Faso",
  "Burkina Faso",
  "Burundi",
  "Burundská republika",
  "Cyprus",
  "Cyperská republika",
  "Čad",
  "Republika Čad",
  "Česko",
  "Česká republika",
  "Čína",
  "Čínska ľudová republika",
  "Dánsko",
  "Dánsko kráľovstvo",
  "Dominika",
  "Spoločenstvo Dominika",
  "Dominikánska republika",
  "Dominikánska republika",
  "Džibutsko",
  "Džibutská republika",
  "Egypt",
  "Egyptská arabská republika",
  "Ekvádor",
  "Ekvádorská republika",
  "Eritrea",
  "Eritrejský štát",
  "Estónsko",
  "Estónska republika",
  "Etiópia",
  "Etiópska federatívna demokratická republika",
  "Fidži",
  "Republika ostrovy Fidži",
  "Filipíny",
  "Filipínska republika",
  "Fínsko",
  "Fínska republika",
  "Francúzsko",
  "Francúzska republika",
  "Gabon",
  "Gabonská republika",
  "Gambia",
  "Gambijská republika",
  "Ghana",
  "Ghanská republika",
  "Grécko",
  "Helénska republika",
  "Grenada",
  "Grenada",
  "Gruzínsko",
  "Gruzínsko",
  "Guatemala",
  "Guatemalská republika",
  "Guinea",
  "Guinejská republika",
  "Guinea-Bissau",
  "Republika Guinea-Bissau",
  "Guayana",
  "Guayanská republika",
  "Haiti",
  "Republika Haiti",
  "Holandsko",
  "Holandské kráľovstvo",
  "Honduras",
  "Honduraská republika",
  "Chile",
  "Čílska republika",
  "Chorvátsko",
  "Chorvátska republika",
  "India",
  "Indická republika",
  "Indonézia",
  "Indonézska republika",
  "Irak",
  "Iracká republika",
  "Irán",
  "Iránska islamská republika",
  "Island",
  "Islandská republika",
  "Izrael",
  "Štát Izrael",
  "Írsko",
  "Írska republika",
  "Jamajka",
  "Jamajka",
  "Japonsko",
  "Japonsko",
  "Jemen",
  "Jemenská republika",
  "Jordánsko",
  "Jordánske hášimovské kráľovstvo",
  "Južná Afrika",
  "Juhoafrická republika",
  "Kambodža",
  "Kambodžské kráľovstvo",
  "Kamerun",
  "Kamerunská republika",
  "Kanada",
  "Kanada",
  "Kapverdy",
  "Kapverdská republika",
  "Katar",
  "Štát Katar",
  "Kazachstan",
  "Kazašská republika",
  "Keňa",
  "Kenská republika",
  "Kirgizsko",
  "Kirgizská republika",
  "Kiribati",
  "Kiribatská republika",
  "Kolumbia",
  "Kolumbijská republika",
  "Komory",
  "Komorská únia",
  "Kongo",
  "Konžská demokratická republika",
  "Kongo (\"Brazzaville\")",
  "Konžská republika",
  "Kórea (\"Južná\")",
  "Kórejská republika",
  "Kórea (\"Severná\")",
  "Kórejská ľudovodemokratická republika",
  "Kostarika",
  "Kostarická republika",
  "Kuba",
  "Kubánska republika",
  "Kuvajt",
  "Kuvajtský štát",
  "Laos",
  "Laoská ľudovodemokratická republika",
  "Lesotho",
  "Lesothské kráľovstvo",
  "Libanon",
  "Libanonská republika",
  "Libéria",
  "Libérijská republika",
  "Líbya",
  "Líbyjská arabská ľudová socialistická džamáhírija",
  "Lichtenštajnsko",
  "Lichtenštajnské kniežatstvo",
  "Litva",
  "Litovská republika",
  "Lotyšsko",
  "Lotyšská republika",
  "Luxembursko",
  "Luxemburské veľkovojvodstvo",
  "Macedónsko",
  "Macedónska republika",
  "Madagaskar",
  "Madagaskarská republika",
  "Maďarsko",
  "Maďarská republika",
  "Malajzia",
  "Malajzia",
  "Malawi",
  "Malawijská republika",
  "Maldivy",
  "Maldivská republika",
  "Mali",
  "Malijská republika",
  "Malta",
  "Malta",
  "Maroko",
  "Marocké kráľovstvo",
  "Marshallove ostrovy",
  "Republika Marshallových ostrovy",
  "Mauritánia",
  "Mauritánska islamská republika",
  "Maurícius",
  "Maurícijská republika",
  "Mexiko",
  "Spojené štáty mexické",
  "Mikronézia",
  "Mikronézske federatívne štáty",
  "Mjanmarsko",
  "Mjanmarský zväz",
  "Moldavsko",
  "Moldavská republika",
  "Monako",
  "Monacké kniežatstvo",
  "Mongolsko",
  "Mongolsko",
  "Mozambik",
  "Mozambická republika",
  "Namíbia",
  "Namíbijská republika",
  "Nauru",
  "Naurská republika",
  "Nemecko",
  "Nemecká spolková republika",
  "Nepál",
  "Nepálske kráľovstvo",
  "Niger",
  "Nigerská republika",
  "Nigéria",
  "Nigérijská federatívna republika",
  "Nikaragua",
  "Nikaragujská republika",
  "Nový Zéland",
  "Nový Zéland",
  "Nórsko",
  "Nórske kráľovstvo",
  "Omán",
  "Ománsky sultanát",
  "Pakistan",
  "Pakistanská islamská republika",
  "Palau",
  "Palauská republika",
  "Panama",
  "Panamská republika",
  "Papua-Nová Guinea",
  "Nezávislý štát Papua-Nová Guinea",
  "Paraguaj",
  "Paraguajská republika",
  "Peru",
  "Peruánska republika",
  "Pobrežie Slonoviny",
  "Republika Pobrežie Slonoviny",
  "Poľsko",
  "Poľská republika",
  "Portugalsko",
  "Portugalská republika",
  "Rakúsko",
  "Rakúska republika",
  "Rovníková Guinea",
  "Republika Rovníková Guinea",
  "Rumunsko",
  "Rumunsko",
  "Rusko",
  "Ruská federácia",
  "Rwanda",
  "Rwandská republika",
  "Salvádor",
  "Salvádorská republika",
  "Samoa",
  "Nezávislý štát Samoa",
  "San Maríno",
  "Sanmarínska republika",
  "Saudská Arábia",
  "Kráľovstvo Saudskej Arábie",
  "Senegal",
  "Senegalská republika",
  "Seychely",
  "Seychelská republika",
  "Sierra Leone",
  "Republika Sierra Leone",
  "Singapur",
  "Singapurska republika",
  "Slovensko",
  "Slovenská republika",
  "Slovinsko",
  "Slovinská republika",
  "Somálsko",
  "Somálska demokratická republika",
  "Spojené arabské emiráty",
  "Spojené arabské emiráty",
  "Spojené štáty americké",
  "Spojené štáty americké",
  "Srbsko a Čierna Hora",
  "Srbsko a Čierna Hora",
  "Srí Lanka",
  "Demokratická socialistická republika Srí Lanka",
  "Stredoafrická republika",
  "Stredoafrická republika",
  "Sudán",
  "Sudánska republika",
  "Surinam",
  "Surinamská republika",
  "Svazijsko",
  "Svazijské kráľovstvo",
  "Svätá Lucia",
  "Svätá Lucia",
  "Svätý Krištof a Nevis",
  "Federácia Svätý Krištof a Nevis",
  "Sv. Tomáš a Princov Ostrov",
  "Demokratická republika Svätý Tomáš a Princov Ostrov",
  "Sv. Vincent a Grenadíny",
  "Svätý Vincent a Grenadíny",
  "Sýria",
  "Sýrska arabská republika",
  "Šalamúnove ostrovy",
  "Šalamúnove ostrovy",
  "Španielsko",
  "Španielske kráľovstvo",
  "Švajčiarsko",
  "Švajčiarska konfederácia",
  "Švédsko",
  "Švédske kráľovstvo",
  "Tadžikistan",
  "Tadžická republika",
  "Taliansko",
  "Talianska republika",
  "Tanzánia",
  "Tanzánijská zjednotená republika",
  "Thajsko",
  "Thajské kráľovstvo",
  "Togo",
  "Tožská republika",
  "Tonga",
  "Tonžské kráľovstvo",
  "Trinidad a Tobago",
  "Republika Trinidad a Tobago",
  "Tunisko",
  "Tuniská republika",
  "Turecko",
  "Turecká republika",
  "Turkménsko",
  "Turkménsko",
  "Tuvalu",
  "Tuvalu",
  "Uganda",
  "Ugandská republika",
  "Ukrajina",
  "Uruguaj",
  "Uruguajská východná republika",
  "Uzbekistan",
  "Vanuatu",
  "Vanuatská republika",
  "Vatikán",
  "Svätá Stolica",
  "Veľká Británia",
  "Spojené kráľovstvo Veľkej Británie a Severného Írska",
  "Venezuela",
  "Venezuelská bolívarovská republika",
  "Vietnam",
  "Vietnamská socialistická republika",
  "Východný Timor",
  "Demokratická republika Východný Timor",
  "Zambia",
  "Zambijská republika",
  "Zimbabwe",
  "Zimbabwianska republika"
];

},{}],"node_modules/faker/lib/locales/sk/address/building_number.js":[function(require,module,exports) {
module["exports"] = [
  "#",
  "##",
  "###"
];

},{}],"node_modules/faker/lib/locales/sk/address/secondary_address.js":[function(require,module,exports) {
module["exports"] = [
  "Apt. ###",
  "Suite ###"
];

},{}],"node_modules/faker/lib/locales/sk/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "#####",
  "### ##",
  "## ###"
];

},{}],"node_modules/faker/lib/locales/sk/address/state.js":[function(require,module,exports) {
module["exports"] = [];

},{}],"node_modules/faker/lib/locales/sk/address/state_abbr.js":[function(require,module,exports) {
module["exports"] = [];

},{}],"node_modules/faker/lib/locales/sk/address/time_zone.js":[function(require,module,exports) {
module["exports"] = [
  "Pacific/Midway",
  "Pacific/Pago_Pago",
  "Pacific/Honolulu",
  "America/Juneau",
  "America/Los_Angeles",
  "America/Tijuana",
  "America/Denver",
  "America/Phoenix",
  "America/Chihuahua",
  "America/Mazatlan",
  "America/Chicago",
  "America/Regina",
  "America/Mexico_City",
  "America/Mexico_City",
  "America/Monterrey",
  "America/Guatemala",
  "America/New_York",
  "America/Indiana/Indianapolis",
  "America/Bogota",
  "America/Lima",
  "America/Lima",
  "America/Halifax",
  "America/Caracas",
  "America/La_Paz",
  "America/Santiago",
  "America/St_Johns",
  "America/Sao_Paulo",
  "America/Argentina/Buenos_Aires",
  "America/Guyana",
  "America/Godthab",
  "Atlantic/South_Georgia",
  "Atlantic/Azores",
  "Atlantic/Cape_Verde",
  "Europe/Dublin",
  "Europe/London",
  "Europe/Lisbon",
  "Europe/London",
  "Africa/Casablanca",
  "Africa/Monrovia",
  "Etc/UTC",
  "Europe/Belgrade",
  "Europe/Bratislava",
  "Europe/Budapest",
  "Europe/Ljubljana",
  "Europe/Prague",
  "Europe/Sarajevo",
  "Europe/Skopje",
  "Europe/Warsaw",
  "Europe/Zagreb",
  "Europe/Brussels",
  "Europe/Copenhagen",
  "Europe/Madrid",
  "Europe/Paris",
  "Europe/Amsterdam",
  "Europe/Berlin",
  "Europe/Berlin",
  "Europe/Rome",
  "Europe/Stockholm",
  "Europe/Vienna",
  "Africa/Algiers",
  "Europe/Bucharest",
  "Africa/Cairo",
  "Europe/Helsinki",
  "Europe/Kiev",
  "Europe/Riga",
  "Europe/Sofia",
  "Europe/Tallinn",
  "Europe/Vilnius",
  "Europe/Athens",
  "Europe/Istanbul",
  "Europe/Minsk",
  "Asia/Jerusalem",
  "Africa/Harare",
  "Africa/Johannesburg",
  "Europe/Moscow",
  "Europe/Moscow",
  "Europe/Moscow",
  "Asia/Kuwait",
  "Asia/Riyadh",
  "Africa/Nairobi",
  "Asia/Baghdad",
  "Asia/Tehran",
  "Asia/Muscat",
  "Asia/Muscat",
  "Asia/Baku",
  "Asia/Tbilisi",
  "Asia/Yerevan",
  "Asia/Kabul",
  "Asia/Yekaterinburg",
  "Asia/Karachi",
  "Asia/Karachi",
  "Asia/Tashkent",
  "Asia/Kolkata",
  "Asia/Kolkata",
  "Asia/Kolkata",
  "Asia/Kolkata",
  "Asia/Kathmandu",
  "Asia/Dhaka",
  "Asia/Dhaka",
  "Asia/Colombo",
  "Asia/Almaty",
  "Asia/Novosibirsk",
  "Asia/Rangoon",
  "Asia/Bangkok",
  "Asia/Bangkok",
  "Asia/Jakarta",
  "Asia/Krasnoyarsk",
  "Asia/Shanghai",
  "Asia/Chongqing",
  "Asia/Hong_Kong",
  "Asia/Urumqi",
  "Asia/Kuala_Lumpur",
  "Asia/Singapore",
  "Asia/Taipei",
  "Australia/Perth",
  "Asia/Irkutsk",
  "Asia/Ulaanbaatar",
  "Asia/Seoul",
  "Asia/Tokyo",
  "Asia/Tokyo",
  "Asia/Tokyo",
  "Asia/Yakutsk",
  "Australia/Darwin",
  "Australia/Adelaide",
  "Australia/Melbourne",
  "Australia/Melbourne",
  "Australia/Sydney",
  "Australia/Brisbane",
  "Australia/Hobart",
  "Asia/Vladivostok",
  "Pacific/Guam",
  "Pacific/Port_Moresby",
  "Asia/Magadan",
  "Asia/Magadan",
  "Pacific/Noumea",
  "Pacific/Fiji",
  "Asia/Kamchatka",
  "Pacific/Majuro",
  "Pacific/Auckland",
  "Pacific/Auckland",
  "Pacific/Tongatapu",
  "Pacific/Fakaofo",
  "Pacific/Apia"
];

},{}],"node_modules/faker/lib/locales/sk/address/city_name.js":[function(require,module,exports) {
module["exports"] = [
  "Bánovce nad Bebravou",
  "Banská Bystrica",
  "Banská Štiavnica",
  "Bardejov",
  "Bratislava I",
  "Bratislava II",
  "Bratislava III",
  "Bratislava IV",
  "Bratislava V",
  "Brezno",
  "Bytča",
  "Čadca",
  "Detva",
  "Dolný Kubín",
  "Dunajská Streda",
  "Galanta",
  "Gelnica",
  "Hlohovec",
  "Humenné",
  "Ilava",
  "Kežmarok",
  "Komárno",
  "Košice I",
  "Košice II",
  "Košice III",
  "Košice IV",
  "Košice-okolie",
  "Krupina",
  "Kysucké Nové Mesto",
  "Levice",
  "Levoča",
  "Liptovský Mikuláš",
  "Lučenec",
  "Malacky",
  "Martin",
  "Medzilaborce",
  "Michalovce",
  "Myjava",
  "Námestovo",
  "Nitra",
  "Nové Mesto n.Váhom",
  "Nové Zámky",
  "Partizánske",
  "Pezinok",
  "Piešťany",
  "Poltár",
  "Poprad",
  "Považská Bystrica",
  "Prešov",
  "Prievidza",
  "Púchov",
  "Revúca",
  "Rimavská Sobota",
  "Rožňava",
  "Ružomberok",
  "Sabinov",
  "Šaľa",
  "Senec",
  "Senica",
  "Skalica",
  "Snina",
  "Sobrance",
  "Spišská Nová Ves",
  "Stará Ľubovňa",
  "Stropkov",
  "Svidník",
  "Topoľčany",
  "Trebišov",
  "Trenčín",
  "Trnava",
  "Turčianske Teplice",
  "Tvrdošín",
  "Veľký Krtíš",
  "Vranov nad Topľou",
  "Žarnovica",
  "Žiar nad Hronom",
  "Žilina",
  "Zlaté Moravce",
  "Zvolen"
];

},{}],"node_modules/faker/lib/locales/sk/address/city.js":[function(require,module,exports) {
module["exports"] = [
  "#{city_name}"
];

},{}],"node_modules/faker/lib/locales/sk/address/street.js":[function(require,module,exports) {
module["exports"] = [
  "Adámiho",
  "Ahoj",
  "Albína Brunovského",
  "Albrechtova",
  "Alejová",
  "Alešova",
  "Alibernetová",
  "Alžbetínska",
  "Alžbety Gwerkovej",
  "Ambroseho",
  "Ambrušova",
  "Americká",
  "Americké námestie",
  "Americké námestie",
  "Andreja Mráza",
  "Andreja Plávku",
  "Andrusovova",
  "Anenská",
  "Anenská",
  "Antolská",
  "Astronomická",
  "Astrová",
  "Azalková",
  "Azovská",
  "Babuškova",
  "Bachova",
  "Bajkalská",
  "Bajkalská",
  "Bajkalská",
  "Bajkalská",
  "Bajkalská",
  "Bajkalská",
  "Bajzova",
  "Bancíkovej",
  "Banícka",
  "Baníkova",
  "Banskobystrická",
  "Banšelova",
  "Bardejovská",
  "Bartókova",
  "Bartoňova",
  "Bartoškova",
  "Baštová",
  "Bazová",
  "Bažantia",
  "Beblavého",
  "Beckovská",
  "Bedľová",
  "Belániková",
  "Belehradská",
  "Belinského",
  "Belopotockého",
  "Beňadická",
  "Bencúrova",
  "Benediktiho",
  "Beniakova",
  "Bernolákova",
  "Beskydská",
  "Betliarska",
  "Bezručova",
  "Biela",
  "Bielkova",
  "Björnsonova",
  "Blagoevova",
  "Blatnická",
  "Blumentálska",
  "Blyskáčová",
  "Bočná",
  "Bohrova",
  "Bohúňova",
  "Bojnická",
  "Borodáčova",
  "Borská",
  "Bosákova",
  "Botanická",
  "Bottova",
  "Boženy Němcovej",
  "Bôrik",
  "Bradáčova",
  "Bradlianska",
  "Brančská",
  "Bratská",
  "Brestová",
  "Brezovská",
  "Briežky",
  "Brnianska",
  "Brodná",
  "Brodská",
  "Broskyňová",
  "Břeclavská",
  "Budatínska",
  "Budatínska",
  "Budatínska",
  "Búdkova  cesta",
  "Budovateľská",
  "Budyšínska",
  "Budyšínska",
  "Buková",
  "Bukureštská",
  "Bulharská",
  "Bulíkova",
  "Bystrého",
  "Bzovícka",
  "Cablkova",
  "Cesta na Červený most",
  "Cesta na Červený most",
  "Cesta na Senec",
  "Cikkerova",
  "Cintorínska",
  "Cintulova",
  "Cukrová",
  "Cyrilova",
  "Čajakova",
  "Čajkovského",
  "Čaklovská",
  "Čalovská",
  "Čapajevova",
  "Čapkova",
  "Čárskeho",
  "Čavojského",
  "Čečinová",
  "Čelakovského",
  "Čerešňová",
  "Černyševského",
  "Červeňova",
  "Česká",
  "Československých par",
  "Čipkárska",
  "Čmelíkova",
  "Čmeľovec",
  "Čulenova",
  "Daliborovo námestie",
  "Dankovského",
  "Dargovská",
  "Ďatelinová",
  "Daxnerovo námestie",
  "Devínska cesta",
  "Dlhé diely I.",
  "Dlhé diely II.",
  "Dlhé diely III.",
  "Dobrovičova",
  "Dobrovičova",
  "Dobrovského",
  "Dobšinského",
  "Dohnalova",
  "Dohnányho",
  "Doležalova",
  "Dolná",
  "Dolnozemská cesta",
  "Domkárska",
  "Domové role",
  "Donnerova",
  "Donovalova",
  "Dostojevského rad",
  "Dr. Vladimíra Clemen",
  "Drevená",
  "Drieňová",
  "Drieňová",
  "Drieňová",
  "Drotárska cesta",
  "Drotárska cesta",
  "Drotárska cesta",
  "Družicová",
  "Družstevná",
  "Dubnická",
  "Dubová",
  "Dúbravská cesta",
  "Dudova",
  "Dulovo námestie",
  "Dulovo námestie",
  "Dunajská",
  "Dvořákovo nábrežie",
  "Edisonova",
  "Einsteinova",
  "Elektrárenská",
  "Exnárova",
  "F. Kostku",
  "Fadruszova",
  "Fajnorovo nábrežie",
  "Fándlyho",
  "Farebná",
  "Farská",
  "Farského",
  "Fazuľová",
  "Fedinova",
  "Ferienčíkova",
  "Fialkové údolie",
  "Fibichova",
  "Filiálne nádražie",
  "Flöglova",
  "Floriánske námestie",
  "Fraňa Kráľa",
  "Francisciho",
  "Francúzskych partizá",
  "Františkánska",
  "Františkánske námest",
  "Furdekova",
  "Furdekova",
  "Gabčíkova",
  "Gagarinova",
  "Gagarinova",
  "Gagarinova",
  "Gajova",
  "Galaktická",
  "Galandova",
  "Gallova",
  "Galvaniho",
  "Gašparíkova",
  "Gaštanová",
  "Gavlovičova",
  "Gemerská",
  "Gercenova",
  "Gessayova",
  "Gettingová",
  "Godrova",
  "Gogoľova",
  "Goláňova",
  "Gondova",
  "Goralská",
  "Gorazdova",
  "Gorkého",
  "Gregorovej",
  "Grösslingova",
  "Gruzínska",
  "Gunduličova",
  "Gusevova",
  "Haanova",
  "Haburská",
  "Halašova",
  "Hálkova",
  "Hálova",
  "Hamuliakova",
  "Hanácka",
  "Handlovská",
  "Hany Meličkovej",
  "Harmanecká",
  "Hasičská",
  "Hattalova",
  "Havlíčkova",
  "Havrania",
  "Haydnova",
  "Herlianska",
  "Herlianska",
  "Heydukova",
  "Hlaváčikova",
  "Hlavatého",
  "Hlavné námestie",
  "Hlboká cesta",
  "Hlboká cesta",
  "Hlivová",
  "Hlučínska",
  "Hodálova",
  "Hodžovo námestie",
  "Holekova",
  "Holíčska",
  "Hollého",
  "Holubyho",
  "Hontianska",
  "Horárska",
  "Horné Židiny",
  "Horská",
  "Horská",
  "Hrad",
  "Hradné údolie",
  "Hrachová",
  "Hraničná",
  "Hrebendova",
  "Hríbová",
  "Hriňovská",
  "Hrobákova",
  "Hrobárska",
  "Hroboňova",
  "Hudecova",
  "Humenské námestie",
  "Hummelova",
  "Hurbanovo námestie",
  "Hurbanovo námestie",
  "Hviezdoslavovo námes",
  "Hýrošova",
  "Chalupkova",
  "Chemická",
  "Chlumeckého",
  "Chorvátska",
  "Chorvátska",
  "Iľjušinova",
  "Ilkovičova",
  "Inovecká",
  "Inovecká",
  "Iskerníková",
  "Ivana Horvátha",
  "Ivánska cesta",
  "J.C.Hronského",
  "Jabloňová",
  "Jadrová",
  "Jakabova",
  "Jakubovo námestie",
  "Jamnického",
  "Jána Stanislava",
  "Janáčkova",
  "Jančova",
  "Janíkove role",
  "Jankolova",
  "Jánošíkova",
  "Jánoškova",
  "Janotova",
  "Jánska",
  "Jantárová cesta",
  "Jarabinková",
  "Jarná",
  "Jaroslavova",
  "Jarošova",
  "Jaseňová",
  "Jasná",
  "Jasovská",
  "Jastrabia",
  "Jašíkova",
  "Javorinská",
  "Javorová",
  "Jazdecká",
  "Jedlíkova",
  "Jégého",
  "Jelačičova",
  "Jelenia",
  "Jesenná",
  "Jesenského",
  "Jiráskova",
  "Jiskrova",
  "Jozefská",
  "Junácka",
  "Jungmannova",
  "Jurigovo námestie",
  "Jurovského",
  "Jurská",
  "Justičná",
  "K lomu",
  "K Železnej studienke",
  "Kalinčiakova",
  "Kamenárska",
  "Kamenné námestie",
  "Kapicova",
  "Kapitulská",
  "Kapitulský dvor",
  "Kapucínska",
  "Kapušianska",
  "Karadžičova",
  "Karadžičova",
  "Karadžičova",
  "Karadžičova",
  "Karloveská",
  "Karloveské rameno",
  "Karpatská",
  "Kašmírska",
  "Kaštielska",
  "Kaukazská",
  "Kempelenova",
  "Kežmarské námestie",
  "Kladnianska",
  "Klariská",
  "Kláštorská",
  "Klatovská",
  "Klatovská",
  "Klemensova",
  "Klincová",
  "Klobučnícka",
  "Klokočova",
  "Kľukatá",
  "Kmeťovo námestie",
  "Koceľova",
  "Kočánkova",
  "Kohútova",
  "Kolárska",
  "Kolískova",
  "Kollárovo námestie",
  "Kollárovo námestie",
  "Kolmá",
  "Komárňanská",
  "Komárnická",
  "Komárnická",
  "Komenského námestie",
  "Kominárska",
  "Komonicová",
  "Konopná",
  "Konvalinková",
  "Konventná",
  "Kopanice",
  "Kopčianska",
  "Koperníkova",
  "Korabinského",
  "Koreničova",
  "Kostlivého",
  "Kostolná",
  "Košická",
  "Košická",
  "Košická",
  "Kováčska",
  "Kovorobotnícka",
  "Kozia",
  "Koziarka",
  "Kozmonautická",
  "Krajná",
  "Krakovská",
  "Kráľovské údolie",
  "Krasinského",
  "Kraskova",
  "Krásna",
  "Krásnohorská",
  "Krasovského",
  "Krátka",
  "Krčméryho",
  "Kremnická",
  "Kresánkova",
  "Krivá",
  "Križkova",
  "Krížna",
  "Krížna",
  "Krížna",
  "Krížna",
  "Krmanova",
  "Krompašská",
  "Krupinská",
  "Krupkova",
  "Kubániho",
  "Kubínska",
  "Kuklovská",
  "Kukučínova",
  "Kukuričná",
  "Kulíškova",
  "Kultúrna",
  "Kupeckého",
  "Kúpeľná",
  "Kutlíkova",
  "Kutuzovova",
  "Kuzmányho",
  "Kvačalova",
  "Kvetná",
  "Kýčerského",
  "Kyjevská",
  "Kysucká",
  "Laborecká",
  "Lackova",
  "Ladislava Sáru",
  "Ľadová",
  "Lachova",
  "Ľaliová",
  "Lamačská cesta",
  "Lamačská cesta",
  "Lamanského",
  "Landererova",
  "Langsfeldova",
  "Ľanová",
  "Laskomerského",
  "Laučekova",
  "Laurinská",
  "Lazaretská",
  "Lazaretská",
  "Legerského",
  "Legionárska",
  "Legionárska",
  "Lehockého",
  "Lehockého",
  "Lenardova",
  "Lermontovova",
  "Lesná",
  "Leškova",
  "Letecká",
  "Letisko M.R.Štefánik",
  "Letná",
  "Levárska",
  "Levická",
  "Levočská",
  "Lidická",
  "Lietavská",
  "Lichardova",
  "Lipová",
  "Lipovinová",
  "Liptovská",
  "Listová",
  "Líščie nivy",
  "Líščie údolie",
  "Litovská",
  "Lodná",
  "Lombardiniho",
  "Lomonosovova",
  "Lopenícka",
  "Lovinského",
  "Ľubietovská",
  "Ľubinská",
  "Ľubľanská",
  "Ľubochnianska",
  "Ľubovnianska",
  "Lúčna",
  "Ľudové námestie",
  "Ľudovíta Fullu",
  "Luhačovická",
  "Lužická",
  "Lužná",
  "Lýcejná",
  "Lykovcová",
  "M. Hella",
  "Magnetová",
  "Macharova",
  "Majakovského",
  "Majerníkova",
  "Májkova",
  "Májová",
  "Makovického",
  "Malá",
  "Malé pálenisko",
  "Malinová",
  "Malý Draždiak",
  "Malý trh",
  "Mamateyova",
  "Mamateyova",
  "Mánesovo námestie",
  "Mariánska",
  "Marie Curie-Sklodows",
  "Márie Medveďovej",
  "Markova",
  "Marótyho",
  "Martákovej",
  "Martinčekova",
  "Martinčekova",
  "Martinengova",
  "Martinská",
  "Mateja Bela",
  "Matejkova",
  "Matičná",
  "Matúšova",
  "Medená",
  "Medzierka",
  "Medzilaborecká",
  "Merlotová",
  "Mesačná",
  "Mestská",
  "Meteorová",
  "Metodova",
  "Mickiewiczova",
  "Mierová",
  "Michalská",
  "Mikovíniho",
  "Mikulášska",
  "Miletičova",
  "Miletičova",
  "Mišíkova",
  "Mišíkova",
  "Mišíkova",
  "Mliekárenská",
  "Mlynarovičova",
  "Mlynská dolina",
  "Mlynská dolina",
  "Mlynská dolina",
  "Mlynské luhy",
  "Mlynské nivy",
  "Mlynské nivy",
  "Mlynské nivy",
  "Mlynské nivy",
  "Mlynské nivy",
  "Mlyny",
  "Modranská",
  "Mojmírova",
  "Mokráň záhon",
  "Mokrohájska cesta",
  "Moldavská",
  "Molecova",
  "Moravská",
  "Moskovská",
  "Most SNP",
  "Mostová",
  "Mošovského",
  "Motýlia",
  "Moyzesova",
  "Mozartova",
  "Mraziarenská",
  "Mudroňova",
  "Mudroňova",
  "Mudroňova",
  "Muchovo námestie",
  "Murgašova",
  "Muškátová",
  "Muštová",
  "Múzejná",
  "Myjavská",
  "Mýtna",
  "Mýtna",
  "Na Baránku",
  "Na Brezinách",
  "Na Hrebienku",
  "Na Kalvárii",
  "Na Kampárke",
  "Na kopci",
  "Na križovatkách",
  "Na lánoch",
  "Na paši",
  "Na piesku",
  "Na Riviére",
  "Na Sitine",
  "Na Slavíne",
  "Na stráni",
  "Na Štyridsiatku",
  "Na úvrati",
  "Na vŕšku",
  "Na výslní",
  "Nábělkova",
  "Nábrežie arm. gen. L",
  "Nábrežná",
  "Nad Dunajom",
  "Nad lomom",
  "Nad lúčkami",
  "Nad lúčkami",
  "Nad ostrovom",
  "Nad Sihoťou",
  "Námestie 1. mája",
  "Námestie Alexandra D",
  "Námestie Biely kríž",
  "Námestie Hraničiarov",
  "Námestie Jána Pavla",
  "Námestie Ľudovíta Št",
  "Námestie Martina Ben",
  "Nám. M.R.Štefánika",
  "Námestie slobody",
  "Námestie slobody",
  "Námestie SNP",
  "Námestie SNP",
  "Námestie sv. Františ",
  "Narcisová",
  "Nedbalova",
  "Nekrasovova",
  "Neronetová",
  "Nerudova",
  "Nevädzová",
  "Nezábudková",
  "Niťová",
  "Nitrianska",
  "Nížinná",
  "Nobelova",
  "Nobelovo námestie",
  "Nová",
  "Nová Rožňavská",
  "Novackého",
  "Nové pálenisko",
  "Nové záhrady I",
  "Nové záhrady II",
  "Nové záhrady III",
  "Nové záhrady IV",
  "Nové záhrady V",
  "Nové záhrady VI",
  "Nové záhrady VII",
  "Novinárska",
  "Novobanská",
  "Novohradská",
  "Novosvetská",
  "Novosvetská",
  "Novosvetská",
  "Obežná",
  "Obchodná",
  "Očovská",
  "Odbojárov",
  "Odborárska",
  "Odborárske námestie",
  "Odborárske námestie",
  "Ohnicová",
  "Okánikova",
  "Okružná",
  "Olbrachtova",
  "Olejkárska",
  "Ondavská",
  "Ondrejovova",
  "Oravská",
  "Orechová cesta",
  "Orechový rad",
  "Oriešková",
  "Ormisova",
  "Osadná",
  "Ostravská",
  "Ostredková",
  "Osuského",
  "Osvetová",
  "Otonelská",
  "Ovručská",
  "Ovsištské námestie",
  "Pajštúnska",
  "Palackého",
  "Palárikova",
  "Palárikova",
  "Pálavská",
  "Palisády",
  "Palisády",
  "Palisády",
  "Palkovičova",
  "Panenská",
  "Pankúchova",
  "Panónska cesta",
  "Panská",
  "Papánkovo námestie",
  "Papraďová",
  "Páričkova",
  "Parková",
  "Partizánska",
  "Pasienky",
  "Paulínyho",
  "Pavlovičova",
  "Pavlovova",
  "Pavlovská",
  "Pažického",
  "Pažítková",
  "Pečnianska",
  "Pernecká",
  "Pestovateľská",
  "Peterská",
  "Petzvalova",
  "Pezinská",
  "Piesočná",
  "Piešťanská",
  "Pifflova",
  "Pilárikova",
  "Pionierska",
  "Pivoňková",
  "Planckova",
  "Planét",
  "Plátenícka",
  "Pluhová",
  "Plynárenská",
  "Plzenská",
  "Pobrežná",
  "Pod Bôrikom",
  "Pod Kalváriou",
  "Pod lesom",
  "Pod Rovnicami",
  "Pod vinicami",
  "Podhorského",
  "Podjavorinskej",
  "Podlučinského",
  "Podniková",
  "Podtatranského",
  "Pohronská",
  "Polárna",
  "Poloreckého",
  "Poľná",
  "Poľská",
  "Poludníková",
  "Porubského",
  "Poštová",
  "Považská",
  "Povraznícka",
  "Povraznícka",
  "Pražská",
  "Predstaničné námesti",
  "Prepoštská",
  "Prešernova",
  "Prešovská",
  "Prešovská",
  "Prešovská",
  "Pri Bielom kríži",
  "Pri dvore",
  "Pri Dynamitke",
  "Pri Habánskom mlyne",
  "Pri hradnej studni",
  "Pri seči",
  "Pri Starej Prachárni",
  "Pri Starom háji",
  "Pri Starom Mýte",
  "Pri strelnici",
  "Pri Suchom mlyne",
  "Pri zvonici",
  "Pribinova",
  "Pribinova",
  "Pribinova",
  "Pribišova",
  "Pribylinská",
  "Priečna",
  "Priekopy",
  "Priemyselná",
  "Priemyselná",
  "Prievozská",
  "Prievozská",
  "Prievozská",
  "Príkopova",
  "Primaciálne námestie",
  "Prístav",
  "Prístavná",
  "Prokofievova",
  "Prokopa Veľkého",
  "Prokopova",
  "Prúdová",
  "Prvosienková",
  "Púpavová",
  "Pustá",
  "Puškinova",
  "Račianska",
  "Račianska",
  "Račianske mýto",
  "Radarová",
  "Rádiová",
  "Radlinského",
  "Radničná",
  "Radničné námestie",
  "Radvanská",
  "Rajská",
  "Raketová",
  "Rákosová",
  "Rastislavova",
  "Rázusovo nábrežie",
  "Repná",
  "Rešetkova",
  "Revolučná",
  "Révová",
  "Revúcka",
  "Rezedová",
  "Riazanská",
  "Riazanská",
  "Ribayová",
  "Riečna",
  "Rigeleho",
  "Rízlingová",
  "Riznerova",
  "Robotnícka",
  "Romanova",
  "Röntgenova",
  "Rosná",
  "Rovná",
  "Rovniankova",
  "Rovníková",
  "Rozmarínová",
  "Rožňavská",
  "Rožňavská",
  "Rožňavská",
  "Rubinsteinova",
  "Rudnayovo námestie",
  "Rumančeková",
  "Rusovská cesta",
  "Ružičková",
  "Ružinovská",
  "Ružinovská",
  "Ružinovská",
  "Ružomberská",
  "Ružová dolina",
  "Ružová dolina",
  "Rybárska brána",
  "Rybné námestie",
  "Rýdziková",
  "Sabinovská",
  "Sabinovská",
  "Sad Janka Kráľa",
  "Sadová",
  "Sartorisova",
  "Sasinkova",
  "Seberíniho",
  "Sečovská",
  "Sedlárska",
  "Sedmokrásková",
  "Segnerova",
  "Sekulská",
  "Semianova",
  "Senická",
  "Senná",
  "Schillerova",
  "Schody pri starej vo",
  "Sibírska",
  "Sienkiewiczova",
  "Silvánska",
  "Sinokvetná",
  "Skalická cesta",
  "Skalná",
  "Sklenárova",
  "Sklenárska",
  "Sládkovičova",
  "Sladová",
  "Slávičie údolie",
  "Slavín",
  "Slepá",
  "Sliačska",
  "Sliezska",
  "Slivková",
  "Slnečná",
  "Slovanská",
  "Slovinská",
  "Slovnaftská",
  "Slowackého",
  "Smetanova",
  "Smikova",
  "Smolenická",
  "Smolnícka",
  "Smrečianska",
  "Soferove schody",
  "Socháňova",
  "Sokolská",
  "Solivarská",
  "Sološnická",
  "Somolického",
  "Somolického",
  "Sosnová",
  "Spišská",
  "Spojná",
  "Spoločenská",
  "Sputniková",
  "Sreznevského",
  "Srnčia",
  "Stachanovská",
  "Stálicová",
  "Staničná",
  "Stará Černicová",
  "Stará Ivánska cesta",
  "Stará Prievozská",
  "Stará Vajnorská",
  "Stará vinárska",
  "Staré Grunty",
  "Staré ihrisko",
  "Staré záhrady",
  "Starhradská",
  "Starohájska",
  "Staromestská",
  "Staroturský chodník",
  "Staviteľská",
  "Stodolova",
  "Stoklasová",
  "Strakova",
  "Strážnická",
  "Strážny dom",
  "Strečnianska",
  "Stredná",
  "Strelecká",
  "Strmá cesta",
  "Strojnícka",
  "Stropkovská",
  "Struková",
  "Studená",
  "Stuhová",
  "Súbežná",
  "Súhvezdná",
  "Suché mýto",
  "Suchohradská",
  "Súkennícka",
  "Súľovská",
  "Sumbalova",
  "Súmračná",
  "Súťažná",
  "Svätého Vincenta",
  "Svätoplukova",
  "Svätoplukova",
  "Svätovojtešská",
  "Svetlá",
  "Svíbová",
  "Svidnícka",
  "Svoradova",
  "Svrčia",
  "Syslia",
  "Šafárikovo námestie",
  "Šafárikovo námestie",
  "Šafránová",
  "Šagátova",
  "Šalviová",
  "Šancová",
  "Šancová",
  "Šancová",
  "Šancová",
  "Šándorova",
  "Šarišská",
  "Šášovská",
  "Šaštínska",
  "Ševčenkova",
  "Šintavská",
  "Šípková",
  "Škarniclova",
  "Školská",
  "Škovránčia",
  "Škultétyho",
  "Šoltésovej",
  "Špieszova",
  "Špitálska",
  "Športová",
  "Šrobárovo námestie",
  "Šťastná",
  "Štedrá",
  "Štefánikova",
  "Štefánikova",
  "Štefánikova",
  "Štefanovičova",
  "Štefunkova",
  "Štetinova",
  "Štiavnická",
  "Štúrova",
  "Štyndlova",
  "Šulekova",
  "Šulekova",
  "Šulekova",
  "Šumavská",
  "Šuňavcova",
  "Šustekova",
  "Švabinského",
  "Tabaková",
  "Tablicova",
  "Táborská",
  "Tajovského",
  "Tallerova",
  "Tehelná",
  "Technická",
  "Tekovská",
  "Telocvičná",
  "Tematínska",
  "Teplická",
  "Terchovská",
  "Teslova",
  "Tetmayerova",
  "Thurzova",
  "Tichá",
  "Tilgnerova",
  "Timravina",
  "Tobrucká",
  "Tokajícka",
  "Tolstého",
  "Tománkova",
  "Tomášikova",
  "Tomášikova",
  "Tomášikova",
  "Tomášikova",
  "Tomášikova",
  "Topoľčianska",
  "Topoľová",
  "Továrenská",
  "Trebišovská",
  "Trebišovská",
  "Trebišovská",
  "Trenčianska",
  "Treskoňova",
  "Trnavská cesta",
  "Trnavská cesta",
  "Trnavská cesta",
  "Trnavská cesta",
  "Trnavská cesta",
  "Trnavské mýto",
  "Tŕňová",
  "Trojdomy",
  "Tučkova",
  "Tupolevova",
  "Turbínova",
  "Turčianska",
  "Turnianska",
  "Tvarožkova",
  "Tylova",
  "Tyršovo nábrežie",
  "Údernícka",
  "Údolná",
  "Uhorková",
  "Ukrajinská",
  "Ulica 29. augusta",
  "Ulica 29. augusta",
  "Ulica 29. augusta",
  "Ulica 29. augusta",
  "Ulica Imricha Karvaš",
  "Ulica Jozefa Krónera",
  "Ulica Viktora Tegelh",
  "Úprkova",
  "Úradnícka",
  "Uránová",
  "Urbánkova",
  "Ursínyho",
  "Uršulínska",
  "Úzka",
  "V záhradách",
  "Vajanského nábrežie",
  "Vajnorská",
  "Vajnorská",
  "Vajnorská",
  "Vajnorská",
  "Vajnorská",
  "Vajnorská",
  "Vajnorská",
  "Vajnorská",
  "Vajnorská",
  "Valašská",
  "Valchárska",
  "Vansovej",
  "Vápenná",
  "Varínska",
  "Varšavská",
  "Varšavská",
  "Vavilovova",
  "Vavrínova",
  "Vazovova",
  "Včelárska",
  "Velehradská",
  "Veltlínska",
  "Ventúrska",
  "Veterná",
  "Veternicová",
  "Vetvová",
  "Viedenská cesta",
  "Viedenská cesta",
  "Vietnamská",
  "Vígľašská",
  "Vihorlatská",
  "Viktorínova",
  "Vilová",
  "Vincenta Hložníka",
  "Vínna",
  "Vlastenecké námestie",
  "Vlčkova",
  "Vlčkova",
  "Vlčkova",
  "Vodný vrch",
  "Votrubova",
  "Vrábeľská",
  "Vrakunská cesta",
  "Vranovská",
  "Vretenová",
  "Vrchná",
  "Vrútocká",
  "Vyhliadka",
  "Vyhnianska cesta",
  "Vysoká",
  "Vyšehradská",
  "Vyšná",
  "Wattova",
  "Wilsonova",
  "Wolkrova",
  "Za Kasárňou",
  "Za sokolovňou",
  "Za Stanicou",
  "Za tehelňou",
  "Záborského",
  "Zadunajská cesta",
  "Záhorácka",
  "Záhradnícka",
  "Záhradnícka",
  "Záhradnícka",
  "Záhradnícka",
  "Záhrebská",
  "Záhrebská",
  "Zálužická",
  "Zámocká",
  "Zámocké schody",
  "Zámočnícka",
  "Západná",
  "Západný rad",
  "Záporožská",
  "Zátišie",
  "Závodníkova",
  "Zelená",
  "Zelinárska",
  "Zimná",
  "Zlaté piesky",
  "Zlaté schody",
  "Znievska",
  "Zohorská",
  "Zochova",
  "Zrinského",
  "Zvolenská",
  "Žabí majer",
  "Žabotova",
  "Žehrianska",
  "Železná",
  "Železničiarska",
  "Žellova",
  "Žiarska",
  "Židovská",
  "Žilinská",
  "Žilinská",
  "Živnostenská",
  "Žižkova",
  "Župné námestie"
];

},{}],"node_modules/faker/lib/locales/sk/address/street_name.js":[function(require,module,exports) {
module["exports"] = [
  "#{street}"
];

},{}],"node_modules/faker/lib/locales/sk/address/street_address.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_name} #{building_number}"
];

},{}],"node_modules/faker/lib/locales/sk/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "Slovensko"
];

},{}],"node_modules/faker/lib/locales/sk/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.city_prefix = require("./city_prefix");
address.city_suffix = require("./city_suffix");
address.country = require("./country");
address.building_number = require("./building_number");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.time_zone = require("./time_zone");
address.city_name = require("./city_name");
address.city = require("./city");
address.street = require("./street");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./city_prefix":"node_modules/faker/lib/locales/sk/address/city_prefix.js","./city_suffix":"node_modules/faker/lib/locales/sk/address/city_suffix.js","./country":"node_modules/faker/lib/locales/sk/address/country.js","./building_number":"node_modules/faker/lib/locales/sk/address/building_number.js","./secondary_address":"node_modules/faker/lib/locales/sk/address/secondary_address.js","./postcode":"node_modules/faker/lib/locales/sk/address/postcode.js","./state":"node_modules/faker/lib/locales/sk/address/state.js","./state_abbr":"node_modules/faker/lib/locales/sk/address/state_abbr.js","./time_zone":"node_modules/faker/lib/locales/sk/address/time_zone.js","./city_name":"node_modules/faker/lib/locales/sk/address/city_name.js","./city":"node_modules/faker/lib/locales/sk/address/city.js","./street":"node_modules/faker/lib/locales/sk/address/street.js","./street_name":"node_modules/faker/lib/locales/sk/address/street_name.js","./street_address":"node_modules/faker/lib/locales/sk/address/street_address.js","./default_country":"node_modules/faker/lib/locales/sk/address/default_country.js"}],"node_modules/faker/lib/locales/sk/company/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "s.r.o.",
  "a.s.",
  "v.o.s."
];

},{}],"node_modules/faker/lib/locales/sk/company/adjective.js":[function(require,module,exports) {
module["exports"] = [
  "Adaptive",
  "Advanced",
  "Ameliorated",
  "Assimilated",
  "Automated",
  "Balanced",
  "Business-focused",
  "Centralized",
  "Cloned",
  "Compatible",
  "Configurable",
  "Cross-group",
  "Cross-platform",
  "Customer-focused",
  "Customizable",
  "Decentralized",
  "De-engineered",
  "Devolved",
  "Digitized",
  "Distributed",
  "Diverse",
  "Down-sized",
  "Enhanced",
  "Enterprise-wide",
  "Ergonomic",
  "Exclusive",
  "Expanded",
  "Extended",
  "Face to face",
  "Focused",
  "Front-line",
  "Fully-configurable",
  "Function-based",
  "Fundamental",
  "Future-proofed",
  "Grass-roots",
  "Horizontal",
  "Implemented",
  "Innovative",
  "Integrated",
  "Intuitive",
  "Inverse",
  "Managed",
  "Mandatory",
  "Monitored",
  "Multi-channelled",
  "Multi-lateral",
  "Multi-layered",
  "Multi-tiered",
  "Networked",
  "Object-based",
  "Open-architected",
  "Open-source",
  "Operative",
  "Optimized",
  "Optional",
  "Organic",
  "Organized",
  "Persevering",
  "Persistent",
  "Phased",
  "Polarised",
  "Pre-emptive",
  "Proactive",
  "Profit-focused",
  "Profound",
  "Programmable",
  "Progressive",
  "Public-key",
  "Quality-focused",
  "Reactive",
  "Realigned",
  "Re-contextualized",
  "Re-engineered",
  "Reduced",
  "Reverse-engineered",
  "Right-sized",
  "Robust",
  "Seamless",
  "Secured",
  "Self-enabling",
  "Sharable",
  "Stand-alone",
  "Streamlined",
  "Switchable",
  "Synchronised",
  "Synergistic",
  "Synergized",
  "Team-oriented",
  "Total",
  "Triple-buffered",
  "Universal",
  "Up-sized",
  "Upgradable",
  "User-centric",
  "User-friendly",
  "Versatile",
  "Virtual",
  "Visionary",
  "Vision-oriented"
];

},{}],"node_modules/faker/lib/locales/sk/company/descriptor.js":[function(require,module,exports) {
module["exports"] = [
  "24 hour",
  "24/7",
  "3rd generation",
  "4th generation",
  "5th generation",
  "6th generation",
  "actuating",
  "analyzing",
  "asymmetric",
  "asynchronous",
  "attitude-oriented",
  "background",
  "bandwidth-monitored",
  "bi-directional",
  "bifurcated",
  "bottom-line",
  "clear-thinking",
  "client-driven",
  "client-server",
  "coherent",
  "cohesive",
  "composite",
  "context-sensitive",
  "contextually-based",
  "content-based",
  "dedicated",
  "demand-driven",
  "didactic",
  "directional",
  "discrete",
  "disintermediate",
  "dynamic",
  "eco-centric",
  "empowering",
  "encompassing",
  "even-keeled",
  "executive",
  "explicit",
  "exuding",
  "fault-tolerant",
  "foreground",
  "fresh-thinking",
  "full-range",
  "global",
  "grid-enabled",
  "heuristic",
  "high-level",
  "holistic",
  "homogeneous",
  "human-resource",
  "hybrid",
  "impactful",
  "incremental",
  "intangible",
  "interactive",
  "intermediate",
  "leading edge",
  "local",
  "logistical",
  "maximized",
  "methodical",
  "mission-critical",
  "mobile",
  "modular",
  "motivating",
  "multimedia",
  "multi-state",
  "multi-tasking",
  "national",
  "needs-based",
  "neutral",
  "next generation",
  "non-volatile",
  "object-oriented",
  "optimal",
  "optimizing",
  "radical",
  "real-time",
  "reciprocal",
  "regional",
  "responsive",
  "scalable",
  "secondary",
  "solution-oriented",
  "stable",
  "static",
  "systematic",
  "systemic",
  "system-worthy",
  "tangible",
  "tertiary",
  "transitional",
  "uniform",
  "upward-trending",
  "user-facing",
  "value-added",
  "web-enabled",
  "well-modulated",
  "zero administration",
  "zero defect",
  "zero tolerance"
];

},{}],"node_modules/faker/lib/locales/sk/company/noun.js":[function(require,module,exports) {
module["exports"] = [
  "ability",
  "access",
  "adapter",
  "algorithm",
  "alliance",
  "analyzer",
  "application",
  "approach",
  "architecture",
  "archive",
  "artificial intelligence",
  "array",
  "attitude",
  "benchmark",
  "budgetary management",
  "capability",
  "capacity",
  "challenge",
  "circuit",
  "collaboration",
  "complexity",
  "concept",
  "conglomeration",
  "contingency",
  "core",
  "customer loyalty",
  "database",
  "data-warehouse",
  "definition",
  "emulation",
  "encoding",
  "encryption",
  "extranet",
  "firmware",
  "flexibility",
  "focus group",
  "forecast",
  "frame",
  "framework",
  "function",
  "functionalities",
  "Graphic Interface",
  "groupware",
  "Graphical User Interface",
  "hardware",
  "help-desk",
  "hierarchy",
  "hub",
  "implementation",
  "info-mediaries",
  "infrastructure",
  "initiative",
  "installation",
  "instruction set",
  "interface",
  "internet solution",
  "intranet",
  "knowledge user",
  "knowledge base",
  "local area network",
  "leverage",
  "matrices",
  "matrix",
  "methodology",
  "middleware",
  "migration",
  "model",
  "moderator",
  "monitoring",
  "moratorium",
  "neural-net",
  "open architecture",
  "open system",
  "orchestration",
  "paradigm",
  "parallelism",
  "policy",
  "portal",
  "pricing structure",
  "process improvement",
  "product",
  "productivity",
  "project",
  "projection",
  "protocol",
  "secured line",
  "service-desk",
  "software",
  "solution",
  "standardization",
  "strategy",
  "structure",
  "success",
  "superstructure",
  "support",
  "synergy",
  "system engine",
  "task-force",
  "throughput",
  "time-frame",
  "toolset",
  "utilisation",
  "website",
  "workforce"
];

},{}],"node_modules/faker/lib/locales/sk/company/bs_verb.js":[function(require,module,exports) {
module["exports"] = [
  "implement",
  "utilize",
  "integrate",
  "streamline",
  "optimize",
  "evolve",
  "transform",
  "embrace",
  "enable",
  "orchestrate",
  "leverage",
  "reinvent",
  "aggregate",
  "architect",
  "enhance",
  "incentivize",
  "morph",
  "empower",
  "envisioneer",
  "monetize",
  "harness",
  "facilitate",
  "seize",
  "disintermediate",
  "synergize",
  "strategize",
  "deploy",
  "brand",
  "grow",
  "target",
  "syndicate",
  "synthesize",
  "deliver",
  "mesh",
  "incubate",
  "engage",
  "maximize",
  "benchmark",
  "expedite",
  "reintermediate",
  "whiteboard",
  "visualize",
  "repurpose",
  "innovate",
  "scale",
  "unleash",
  "drive",
  "extend",
  "engineer",
  "revolutionize",
  "generate",
  "exploit",
  "transition",
  "e-enable",
  "iterate",
  "cultivate",
  "matrix",
  "productize",
  "redefine",
  "recontextualize"
];

},{}],"node_modules/faker/lib/locales/sk/company/bs_noun.js":[function(require,module,exports) {
module["exports"] = [
  "clicks-and-mortar",
  "value-added",
  "vertical",
  "proactive",
  "robust",
  "revolutionary",
  "scalable",
  "leading-edge",
  "innovative",
  "intuitive",
  "strategic",
  "e-business",
  "mission-critical",
  "sticky",
  "one-to-one",
  "24/7",
  "end-to-end",
  "global",
  "B2B",
  "B2C",
  "granular",
  "frictionless",
  "virtual",
  "viral",
  "dynamic",
  "24/365",
  "best-of-breed",
  "killer",
  "magnetic",
  "bleeding-edge",
  "web-enabled",
  "interactive",
  "dot-com",
  "sexy",
  "back-end",
  "real-time",
  "efficient",
  "front-end",
  "distributed",
  "seamless",
  "extensible",
  "turn-key",
  "world-class",
  "open-source",
  "cross-platform",
  "cross-media",
  "synergistic",
  "bricks-and-clicks",
  "out-of-the-box",
  "enterprise",
  "integrated",
  "impactful",
  "wireless",
  "transparent",
  "next-generation",
  "cutting-edge",
  "user-centric",
  "visionary",
  "customized",
  "ubiquitous",
  "plug-and-play",
  "collaborative",
  "compelling",
  "holistic",
  "rich",
  "synergies",
  "web-readiness",
  "paradigms",
  "markets",
  "partnerships",
  "infrastructures",
  "platforms",
  "initiatives",
  "channels",
  "eyeballs",
  "communities",
  "ROI",
  "solutions",
  "e-tailers",
  "e-services",
  "action-items",
  "portals",
  "niches",
  "technologies",
  "content",
  "vortals",
  "supply-chains",
  "convergence",
  "relationships",
  "architectures",
  "interfaces",
  "e-markets",
  "e-commerce",
  "systems",
  "bandwidth",
  "infomediaries",
  "models",
  "mindshare",
  "deliverables",
  "users",
  "schemas",
  "networks",
  "applications",
  "metrics",
  "e-business",
  "functionalities",
  "experiences",
  "web services",
  "methodologies"
];

},{}],"node_modules/faker/lib/locales/sk/company/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{Name.last_name} #{suffix}",
  "#{Name.last_name} #{suffix}",
  "#{Name.man_last_name} a #{Name.man_last_name} #{suffix}"
];

},{}],"node_modules/faker/lib/locales/sk/company/index.js":[function(require,module,exports) {
var company = {};
module['exports'] = company;
company.suffix = require("./suffix");
company.adjective = require("./adjective");
company.descriptor = require("./descriptor");
company.noun = require("./noun");
company.bs_verb = require("./bs_verb");
company.bs_noun = require("./bs_noun");
company.name = require("./name");

},{"./suffix":"node_modules/faker/lib/locales/sk/company/suffix.js","./adjective":"node_modules/faker/lib/locales/sk/company/adjective.js","./descriptor":"node_modules/faker/lib/locales/sk/company/descriptor.js","./noun":"node_modules/faker/lib/locales/sk/company/noun.js","./bs_verb":"node_modules/faker/lib/locales/sk/company/bs_verb.js","./bs_noun":"node_modules/faker/lib/locales/sk/company/bs_noun.js","./name":"node_modules/faker/lib/locales/sk/company/name.js"}],"node_modules/faker/lib/locales/sk/internet/free_email.js":[function(require,module,exports) {
module["exports"] = [
  "gmail.com",
  "zoznam.sk",
  "azet.sk"
];

},{}],"node_modules/faker/lib/locales/sk/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "sk",
  "com",
  "net",
  "eu",
  "org"
];

},{}],"node_modules/faker/lib/locales/sk/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.free_email = require("./free_email");
internet.domain_suffix = require("./domain_suffix");

},{"./free_email":"node_modules/faker/lib/locales/sk/internet/free_email.js","./domain_suffix":"node_modules/faker/lib/locales/sk/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/sk/lorem/words.js":[function(require,module,exports) {
module["exports"] = [
  "alias",
  "consequatur",
  "aut",
  "perferendis",
  "sit",
  "voluptatem",
  "accusantium",
  "doloremque",
  "aperiam",
  "eaque",
  "ipsa",
  "quae",
  "ab",
  "illo",
  "inventore",
  "veritatis",
  "et",
  "quasi",
  "architecto",
  "beatae",
  "vitae",
  "dicta",
  "sunt",
  "explicabo",
  "aspernatur",
  "aut",
  "odit",
  "aut",
  "fugit",
  "sed",
  "quia",
  "consequuntur",
  "magni",
  "dolores",
  "eos",
  "qui",
  "ratione",
  "voluptatem",
  "sequi",
  "nesciunt",
  "neque",
  "dolorem",
  "ipsum",
  "quia",
  "dolor",
  "sit",
  "amet",
  "consectetur",
  "adipisci",
  "velit",
  "sed",
  "quia",
  "non",
  "numquam",
  "eius",
  "modi",
  "tempora",
  "incidunt",
  "ut",
  "labore",
  "et",
  "dolore",
  "magnam",
  "aliquam",
  "quaerat",
  "voluptatem",
  "ut",
  "enim",
  "ad",
  "minima",
  "veniam",
  "quis",
  "nostrum",
  "exercitationem",
  "ullam",
  "corporis",
  "nemo",
  "enim",
  "ipsam",
  "voluptatem",
  "quia",
  "voluptas",
  "sit",
  "suscipit",
  "laboriosam",
  "nisi",
  "ut",
  "aliquid",
  "ex",
  "ea",
  "commodi",
  "consequatur",
  "quis",
  "autem",
  "vel",
  "eum",
  "iure",
  "reprehenderit",
  "qui",
  "in",
  "ea",
  "voluptate",
  "velit",
  "esse",
  "quam",
  "nihil",
  "molestiae",
  "et",
  "iusto",
  "odio",
  "dignissimos",
  "ducimus",
  "qui",
  "blanditiis",
  "praesentium",
  "laudantium",
  "totam",
  "rem",
  "voluptatum",
  "deleniti",
  "atque",
  "corrupti",
  "quos",
  "dolores",
  "et",
  "quas",
  "molestias",
  "excepturi",
  "sint",
  "occaecati",
  "cupiditate",
  "non",
  "provident",
  "sed",
  "ut",
  "perspiciatis",
  "unde",
  "omnis",
  "iste",
  "natus",
  "error",
  "similique",
  "sunt",
  "in",
  "culpa",
  "qui",
  "officia",
  "deserunt",
  "mollitia",
  "animi",
  "id",
  "est",
  "laborum",
  "et",
  "dolorum",
  "fuga",
  "et",
  "harum",
  "quidem",
  "rerum",
  "facilis",
  "est",
  "et",
  "expedita",
  "distinctio",
  "nam",
  "libero",
  "tempore",
  "cum",
  "soluta",
  "nobis",
  "est",
  "eligendi",
  "optio",
  "cumque",
  "nihil",
  "impedit",
  "quo",
  "porro",
  "quisquam",
  "est",
  "qui",
  "minus",
  "id",
  "quod",
  "maxime",
  "placeat",
  "facere",
  "possimus",
  "omnis",
  "voluptas",
  "assumenda",
  "est",
  "omnis",
  "dolor",
  "repellendus",
  "temporibus",
  "autem",
  "quibusdam",
  "et",
  "aut",
  "consequatur",
  "vel",
  "illum",
  "qui",
  "dolorem",
  "eum",
  "fugiat",
  "quo",
  "voluptas",
  "nulla",
  "pariatur",
  "at",
  "vero",
  "eos",
  "et",
  "accusamus",
  "officiis",
  "debitis",
  "aut",
  "rerum",
  "necessitatibus",
  "saepe",
  "eveniet",
  "ut",
  "et",
  "voluptates",
  "repudiandae",
  "sint",
  "et",
  "molestiae",
  "non",
  "recusandae",
  "itaque",
  "earum",
  "rerum",
  "hic",
  "tenetur",
  "a",
  "sapiente",
  "delectus",
  "ut",
  "aut",
  "reiciendis",
  "voluptatibus",
  "maiores",
  "doloribus",
  "asperiores",
  "repellat"
];

},{}],"node_modules/faker/lib/locales/sk/lorem/supplemental.js":[function(require,module,exports) {
module["exports"] = [
  "abbas",
  "abduco",
  "abeo",
  "abscido",
  "absconditus",
  "absens",
  "absorbeo",
  "absque",
  "abstergo",
  "absum",
  "abundans",
  "abutor",
  "accedo",
  "accendo",
  "acceptus",
  "accipio",
  "accommodo",
  "accusator",
  "acer",
  "acerbitas",
  "acervus",
  "acidus",
  "acies",
  "acquiro",
  "acsi",
  "adamo",
  "adaugeo",
  "addo",
  "adduco",
  "ademptio",
  "adeo",
  "adeptio",
  "adfectus",
  "adfero",
  "adficio",
  "adflicto",
  "adhaero",
  "adhuc",
  "adicio",
  "adimpleo",
  "adinventitias",
  "adipiscor",
  "adiuvo",
  "administratio",
  "admiratio",
  "admitto",
  "admoneo",
  "admoveo",
  "adnuo",
  "adopto",
  "adsidue",
  "adstringo",
  "adsuesco",
  "adsum",
  "adulatio",
  "adulescens",
  "adultus",
  "aduro",
  "advenio",
  "adversus",
  "advoco",
  "aedificium",
  "aeger",
  "aegre",
  "aegrotatio",
  "aegrus",
  "aeneus",
  "aequitas",
  "aequus",
  "aer",
  "aestas",
  "aestivus",
  "aestus",
  "aetas",
  "aeternus",
  "ager",
  "aggero",
  "aggredior",
  "agnitio",
  "agnosco",
  "ago",
  "ait",
  "aiunt",
  "alienus",
  "alii",
  "alioqui",
  "aliqua",
  "alius",
  "allatus",
  "alo",
  "alter",
  "altus",
  "alveus",
  "amaritudo",
  "ambitus",
  "ambulo",
  "amicitia",
  "amiculum",
  "amissio",
  "amita",
  "amitto",
  "amo",
  "amor",
  "amoveo",
  "amplexus",
  "amplitudo",
  "amplus",
  "ancilla",
  "angelus",
  "angulus",
  "angustus",
  "animadverto",
  "animi",
  "animus",
  "annus",
  "anser",
  "ante",
  "antea",
  "antepono",
  "antiquus",
  "aperio",
  "aperte",
  "apostolus",
  "apparatus",
  "appello",
  "appono",
  "appositus",
  "approbo",
  "apto",
  "aptus",
  "apud",
  "aqua",
  "ara",
  "aranea",
  "arbitro",
  "arbor",
  "arbustum",
  "arca",
  "arceo",
  "arcesso",
  "arcus",
  "argentum",
  "argumentum",
  "arguo",
  "arma",
  "armarium",
  "armo",
  "aro",
  "ars",
  "articulus",
  "artificiose",
  "arto",
  "arx",
  "ascisco",
  "ascit",
  "asper",
  "aspicio",
  "asporto",
  "assentator",
  "astrum",
  "atavus",
  "ater",
  "atqui",
  "atrocitas",
  "atrox",
  "attero",
  "attollo",
  "attonbitus",
  "auctor",
  "auctus",
  "audacia",
  "audax",
  "audentia",
  "audeo",
  "audio",
  "auditor",
  "aufero",
  "aureus",
  "auris",
  "aurum",
  "aut",
  "autem",
  "autus",
  "auxilium",
  "avaritia",
  "avarus",
  "aveho",
  "averto",
  "avoco",
  "baiulus",
  "balbus",
  "barba",
  "bardus",
  "basium",
  "beatus",
  "bellicus",
  "bellum",
  "bene",
  "beneficium",
  "benevolentia",
  "benigne",
  "bestia",
  "bibo",
  "bis",
  "blandior",
  "bonus",
  "bos",
  "brevis",
  "cado",
  "caecus",
  "caelestis",
  "caelum",
  "calamitas",
  "calcar",
  "calco",
  "calculus",
  "callide",
  "campana",
  "candidus",
  "canis",
  "canonicus",
  "canto",
  "capillus",
  "capio",
  "capitulus",
  "capto",
  "caput",
  "carbo",
  "carcer",
  "careo",
  "caries",
  "cariosus",
  "caritas",
  "carmen",
  "carpo",
  "carus",
  "casso",
  "caste",
  "casus",
  "catena",
  "caterva",
  "cattus",
  "cauda",
  "causa",
  "caute",
  "caveo",
  "cavus",
  "cedo",
  "celebrer",
  "celer",
  "celo",
  "cena",
  "cenaculum",
  "ceno",
  "censura",
  "centum",
  "cerno",
  "cernuus",
  "certe",
  "certo",
  "certus",
  "cervus",
  "cetera",
  "charisma",
  "chirographum",
  "cibo",
  "cibus",
  "cicuta",
  "cilicium",
  "cimentarius",
  "ciminatio",
  "cinis",
  "circumvenio",
  "cito",
  "civis",
  "civitas",
  "clam",
  "clamo",
  "claro",
  "clarus",
  "claudeo",
  "claustrum",
  "clementia",
  "clibanus",
  "coadunatio",
  "coaegresco",
  "coepi",
  "coerceo",
  "cogito",
  "cognatus",
  "cognomen",
  "cogo",
  "cohaero",
  "cohibeo",
  "cohors",
  "colligo",
  "colloco",
  "collum",
  "colo",
  "color",
  "coma",
  "combibo",
  "comburo",
  "comedo",
  "comes",
  "cometes",
  "comis",
  "comitatus",
  "commemoro",
  "comminor",
  "commodo",
  "communis",
  "comparo",
  "compello",
  "complectus",
  "compono",
  "comprehendo",
  "comptus",
  "conatus",
  "concedo",
  "concido",
  "conculco",
  "condico",
  "conduco",
  "confero",
  "confido",
  "conforto",
  "confugo",
  "congregatio",
  "conicio",
  "coniecto",
  "conitor",
  "coniuratio",
  "conor",
  "conqueror",
  "conscendo",
  "conservo",
  "considero",
  "conspergo",
  "constans",
  "consuasor",
  "contabesco",
  "contego",
  "contigo",
  "contra",
  "conturbo",
  "conventus",
  "convoco",
  "copia",
  "copiose",
  "cornu",
  "corona",
  "corpus",
  "correptius",
  "corrigo",
  "corroboro",
  "corrumpo",
  "coruscus",
  "cotidie",
  "crapula",
  "cras",
  "crastinus",
  "creator",
  "creber",
  "crebro",
  "credo",
  "creo",
  "creptio",
  "crepusculum",
  "cresco",
  "creta",
  "cribro",
  "crinis",
  "cruciamentum",
  "crudelis",
  "cruentus",
  "crur",
  "crustulum",
  "crux",
  "cubicularis",
  "cubitum",
  "cubo",
  "cui",
  "cuius",
  "culpa",
  "culpo",
  "cultellus",
  "cultura",
  "cum",
  "cunabula",
  "cunae",
  "cunctatio",
  "cupiditas",
  "cupio",
  "cuppedia",
  "cupressus",
  "cur",
  "cura",
  "curatio",
  "curia",
  "curiositas",
  "curis",
  "curo",
  "curriculum",
  "currus",
  "cursim",
  "curso",
  "cursus",
  "curto",
  "curtus",
  "curvo",
  "curvus",
  "custodia",
  "damnatio",
  "damno",
  "dapifer",
  "debeo",
  "debilito",
  "decens",
  "decerno",
  "decet",
  "decimus",
  "decipio",
  "decor",
  "decretum",
  "decumbo",
  "dedecor",
  "dedico",
  "deduco",
  "defaeco",
  "defendo",
  "defero",
  "defessus",
  "defetiscor",
  "deficio",
  "defigo",
  "defleo",
  "defluo",
  "defungo",
  "degenero",
  "degero",
  "degusto",
  "deinde",
  "delectatio",
  "delego",
  "deleo",
  "delibero",
  "delicate",
  "delinquo",
  "deludo",
  "demens",
  "demergo",
  "demitto",
  "demo",
  "demonstro",
  "demoror",
  "demulceo",
  "demum",
  "denego",
  "denique",
  "dens",
  "denuncio",
  "denuo",
  "deorsum",
  "depereo",
  "depono",
  "depopulo",
  "deporto",
  "depraedor",
  "deprecator",
  "deprimo",
  "depromo",
  "depulso",
  "deputo",
  "derelinquo",
  "derideo",
  "deripio",
  "desidero",
  "desino",
  "desipio",
  "desolo",
  "desparatus",
  "despecto",
  "despirmatio",
  "infit",
  "inflammatio",
  "paens",
  "patior",
  "patria",
  "patrocinor",
  "patruus",
  "pauci",
  "paulatim",
  "pauper",
  "pax",
  "peccatus",
  "pecco",
  "pecto",
  "pectus",
  "pecunia",
  "pecus",
  "peior",
  "pel",
  "ocer",
  "socius",
  "sodalitas",
  "sol",
  "soleo",
  "solio",
  "solitudo",
  "solium",
  "sollers",
  "sollicito",
  "solum",
  "solus",
  "solutio",
  "solvo",
  "somniculosus",
  "somnus",
  "sonitus",
  "sono",
  "sophismata",
  "sopor",
  "sordeo",
  "sortitus",
  "spargo",
  "speciosus",
  "spectaculum",
  "speculum",
  "sperno",
  "spero",
  "spes",
  "spiculum",
  "spiritus",
  "spoliatio",
  "sponte",
  "stabilis",
  "statim",
  "statua",
  "stella",
  "stillicidium",
  "stipes",
  "stips",
  "sto",
  "strenuus",
  "strues",
  "studio",
  "stultus",
  "suadeo",
  "suasoria",
  "sub",
  "subito",
  "subiungo",
  "sublime",
  "subnecto",
  "subseco",
  "substantia",
  "subvenio",
  "succedo",
  "succurro",
  "sufficio",
  "suffoco",
  "suffragium",
  "suggero",
  "sui",
  "sulum",
  "sum",
  "summa",
  "summisse",
  "summopere",
  "sumo",
  "sumptus",
  "supellex",
  "super",
  "suppellex",
  "supplanto",
  "suppono",
  "supra",
  "surculus",
  "surgo",
  "sursum",
  "suscipio",
  "suspendo",
  "sustineo",
  "suus",
  "synagoga",
  "tabella",
  "tabernus",
  "tabesco",
  "tabgo",
  "tabula",
  "taceo",
  "tactus",
  "taedium",
  "talio",
  "talis",
  "talus",
  "tam",
  "tamdiu",
  "tamen",
  "tametsi",
  "tamisium",
  "tamquam",
  "tandem",
  "tantillus",
  "tantum",
  "tardus",
  "tego",
  "temeritas",
  "temperantia",
  "templum",
  "temptatio",
  "tempus",
  "tenax",
  "tendo",
  "teneo",
  "tener",
  "tenuis",
  "tenus",
  "tepesco",
  "tepidus",
  "ter",
  "terebro",
  "teres",
  "terga",
  "tergeo",
  "tergiversatio",
  "tergo",
  "tergum",
  "termes",
  "terminatio",
  "tero",
  "terra",
  "terreo",
  "territo",
  "terror",
  "tersus",
  "tertius",
  "testimonium",
  "texo",
  "textilis",
  "textor",
  "textus",
  "thalassinus",
  "theatrum",
  "theca",
  "thema",
  "theologus",
  "thermae",
  "thesaurus",
  "thesis",
  "thorax",
  "thymbra",
  "thymum",
  "tibi",
  "timidus",
  "timor",
  "titulus",
  "tolero",
  "tollo",
  "tondeo",
  "tonsor",
  "torqueo",
  "torrens",
  "tot",
  "totidem",
  "toties",
  "totus",
  "tracto",
  "trado",
  "traho",
  "trans",
  "tredecim",
  "tremo",
  "trepide",
  "tres",
  "tribuo",
  "tricesimus",
  "triduana",
  "triginta",
  "tripudio",
  "tristis",
  "triumphus",
  "trucido",
  "truculenter",
  "tubineus",
  "tui",
  "tum",
  "tumultus",
  "tunc",
  "turba",
  "turbo",
  "turpe",
  "turpis",
  "tutamen",
  "tutis",
  "tyrannus",
  "uberrime",
  "ubi",
  "ulciscor",
  "ullus",
  "ulterius",
  "ultio",
  "ultra",
  "umbra",
  "umerus",
  "umquam",
  "una",
  "unde",
  "undique",
  "universe",
  "unus",
  "urbanus",
  "urbs",
  "uredo",
  "usitas",
  "usque",
  "ustilo",
  "ustulo",
  "usus",
  "uter",
  "uterque",
  "utilis",
  "utique",
  "utor",
  "utpote",
  "utrimque",
  "utroque",
  "utrum",
  "uxor",
  "vaco",
  "vacuus",
  "vado",
  "vae",
  "valde",
  "valens",
  "valeo",
  "valetudo",
  "validus",
  "vallum",
  "vapulus",
  "varietas",
  "varius",
  "vehemens",
  "vel",
  "velociter",
  "velum",
  "velut",
  "venia",
  "venio",
  "ventito",
  "ventosus",
  "ventus",
  "venustas",
  "ver",
  "verbera",
  "verbum",
  "vere",
  "verecundia",
  "vereor",
  "vergo",
  "veritas",
  "vero",
  "versus",
  "verto",
  "verumtamen",
  "verus",
  "vesco",
  "vesica",
  "vesper",
  "vespillo",
  "vester",
  "vestigium",
  "vestrum",
  "vetus",
  "via",
  "vicinus",
  "vicissitudo",
  "victoria",
  "victus",
  "videlicet",
  "video",
  "viduata",
  "viduo",
  "vigilo",
  "vigor",
  "vilicus",
  "vilis",
  "vilitas",
  "villa",
  "vinco",
  "vinculum",
  "vindico",
  "vinitor",
  "vinum",
  "vir",
  "virga",
  "virgo",
  "viridis",
  "viriliter",
  "virtus",
  "vis",
  "viscus",
  "vita",
  "vitiosus",
  "vitium",
  "vito",
  "vivo",
  "vix",
  "vobis",
  "vociferor",
  "voco",
  "volaticus",
  "volo",
  "volubilis",
  "voluntarius",
  "volup",
  "volutabrum",
  "volva",
  "vomer",
  "vomica",
  "vomito",
  "vorago",
  "vorax",
  "voro",
  "vos",
  "votum",
  "voveo",
  "vox",
  "vulariter",
  "vulgaris",
  "vulgivagus",
  "vulgo",
  "vulgus",
  "vulnero",
  "vulnus",
  "vulpes",
  "vulticulus",
  "vultuosus",
  "xiphias"
];

},{}],"node_modules/faker/lib/locales/sk/lorem/index.js":[function(require,module,exports) {
var lorem = {};
module['exports'] = lorem;
lorem.words = require("./words");
lorem.supplemental = require("./supplemental");

},{"./words":"node_modules/faker/lib/locales/sk/lorem/words.js","./supplemental":"node_modules/faker/lib/locales/sk/lorem/supplemental.js"}],"node_modules/faker/lib/locales/sk/name/male_first_name.js":[function(require,module,exports) {
module["exports"] = [
  "Drahoslav",
  "Severín",
  "Alexej",
  "Ernest",
  "Rastislav",
  "Radovan",
  "Dobroslav",
  "Dalibor",
  "Vincent",
  "Miloš",
  "Timotej",
  "Gejza",
  "Bohuš",
  "Alfonz",
  "Gašpar",
  "Emil",
  "Erik",
  "Blažej",
  "Zdenko",
  "Dezider",
  "Arpád",
  "Valentín",
  "Pravoslav",
  "Jaromír",
  "Roman",
  "Matej",
  "Frederik",
  "Viktor",
  "Alexander",
  "Radomír",
  "Albín",
  "Bohumil",
  "Kazimír",
  "Fridrich",
  "Radoslav",
  "Tomáš",
  "Alan",
  "Branislav",
  "Bruno",
  "Gregor",
  "Vlastimil",
  "Boleslav",
  "Eduard",
  "Jozef",
  "Víťazoslav",
  "Blahoslav",
  "Beňadik",
  "Adrián",
  "Gabriel",
  "Marián",
  "Emanuel",
  "Miroslav",
  "Benjamín",
  "Hugo",
  "Richard",
  "Izidor",
  "Zoltán",
  "Albert",
  "Igor",
  "Július",
  "Aleš",
  "Fedor",
  "Rudolf",
  "Valér",
  "Marcel",
  "Ervín",
  "Slavomír",
  "Vojtech",
  "Juraj",
  "Marek",
  "Jaroslav",
  "Žigmund",
  "Florián",
  "Roland",
  "Pankrác",
  "Servác",
  "Bonifác",
  "Svetozár",
  "Bernard",
  "Júlia",
  "Urban",
  "Dušan",
  "Viliam",
  "Ferdinand",
  "Norbert",
  "Róbert",
  "Medard",
  "Zlatko",
  "Anton",
  "Vasil",
  "Vít",
  "Adolf",
  "Vratislav",
  "Alfréd",
  "Alojz",
  "Ján",
  "Tadeáš",
  "Ladislav",
  "Peter",
  "Pavol",
  "Miloslav",
  "Prokop",
  "Cyril",
  "Metod",
  "Patrik",
  "Oliver",
  "Ivan",
  "Kamil",
  "Henrich",
  "Drahomír",
  "Bohuslav",
  "Iľja",
  "Daniel",
  "Vladimír",
  "Jakub",
  "Krištof",
  "Ignác",
  "Gustáv",
  "Jerguš",
  "Dominik",
  "Oskar",
  "Vavrinec",
  "Ľubomír",
  "Mojmír",
  "Leonard",
  "Tichomír",
  "Filip",
  "Bartolomej",
  "Ľudovít",
  "Samuel",
  "Augustín",
  "Belo",
  "Oleg",
  "Bystrík",
  "Ctibor",
  "Ľudomil",
  "Konštantín",
  "Ľuboslav",
  "Matúš",
  "Móric",
  "Ľuboš",
  "Ľubor",
  "Vladislav",
  "Cyprián",
  "Václav",
  "Michal",
  "Jarolím",
  "Arnold",
  "Levoslav",
  "František",
  "Dionýz",
  "Maximilián",
  "Koloman",
  "Boris",
  "Lukáš",
  "Kristián",
  "Vendelín",
  "Sergej",
  "Aurel",
  "Demeter",
  "Denis",
  "Hubert",
  "Karol",
  "Imrich",
  "René",
  "Bohumír",
  "Teodor",
  "Tibor",
  "Maroš",
  "Martin",
  "Svätopluk",
  "Stanislav",
  "Leopold",
  "Eugen",
  "Félix",
  "Klement",
  "Kornel",
  "Milan",
  "Vratko",
  "Ondrej",
  "Andrej",
  "Edmund",
  "Oldrich",
  "Oto",
  "Mikuláš",
  "Ambróz",
  "Radúz",
  "Bohdan",
  "Adam",
  "Štefan",
  "Dávid",
  "Silvester"
];

},{}],"node_modules/faker/lib/locales/sk/name/female_first_name.js":[function(require,module,exports) {
module["exports"] = [
  "Alexandra",
  "Karina",
  "Daniela",
  "Andrea",
  "Antónia",
  "Bohuslava",
  "Dáša",
  "Malvína",
  "Kristína",
  "Nataša",
  "Bohdana",
  "Drahomíra",
  "Sára",
  "Zora",
  "Tamara",
  "Ema",
  "Tatiana",
  "Erika",
  "Veronika",
  "Agáta",
  "Dorota",
  "Vanda",
  "Zoja",
  "Gabriela",
  "Perla",
  "Ida",
  "Liana",
  "Miloslava",
  "Vlasta",
  "Lívia",
  "Eleonóra",
  "Etela",
  "Romana",
  "Zlatica",
  "Anežka",
  "Bohumila",
  "Františka",
  "Angela",
  "Matilda",
  "Svetlana",
  "Ľubica",
  "Alena",
  "Soňa",
  "Vieroslava",
  "Zita",
  "Miroslava",
  "Irena",
  "Milena",
  "Estera",
  "Justína",
  "Dana",
  "Danica",
  "Jela",
  "Jaroslava",
  "Jarmila",
  "Lea",
  "Anastázia",
  "Galina",
  "Lesana",
  "Hermína",
  "Monika",
  "Ingrida",
  "Viktória",
  "Blažena",
  "Žofia",
  "Sofia",
  "Gizela",
  "Viola",
  "Gertrúda",
  "Zina",
  "Júlia",
  "Juliana",
  "Želmíra",
  "Ela",
  "Vanesa",
  "Iveta",
  "Vilma",
  "Petronela",
  "Žaneta",
  "Xénia",
  "Karolína",
  "Lenka",
  "Laura",
  "Stanislava",
  "Margaréta",
  "Dobroslava",
  "Blanka",
  "Valéria",
  "Paulína",
  "Sidónia",
  "Adriána",
  "Beáta",
  "Petra",
  "Melánia",
  "Diana",
  "Berta",
  "Patrícia",
  "Lujza",
  "Amália",
  "Milota",
  "Nina",
  "Margita",
  "Kamila",
  "Dušana",
  "Magdaléna",
  "Oľga",
  "Anna",
  "Hana",
  "Božena",
  "Marta",
  "Libuša",
  "Božidara",
  "Dominika",
  "Hortenzia",
  "Jozefína",
  "Štefánia",
  "Ľubomíra",
  "Zuzana",
  "Darina",
  "Marcela",
  "Milica",
  "Elena",
  "Helena",
  "Lýdia",
  "Anabela",
  "Jana",
  "Silvia",
  "Nikola",
  "Ružena",
  "Nora",
  "Drahoslava",
  "Linda",
  "Melinda",
  "Rebeka",
  "Rozália",
  "Regína",
  "Alica",
  "Marianna",
  "Miriama",
  "Martina",
  "Mária",
  "Jolana",
  "Ľudomila",
  "Ľudmila",
  "Olympia",
  "Eugénia",
  "Ľuboslava",
  "Zdenka",
  "Edita",
  "Michaela",
  "Stela",
  "Viera",
  "Natália",
  "Eliška",
  "Brigita",
  "Valentína",
  "Terézia",
  "Vladimíra",
  "Hedviga",
  "Uršuľa",
  "Alojza",
  "Kvetoslava",
  "Sabína",
  "Dobromila",
  "Klára",
  "Simona",
  "Aurélia",
  "Denisa",
  "Renáta",
  "Irma",
  "Agnesa",
  "Klaudia",
  "Alžbeta",
  "Elvíra",
  "Cecília",
  "Emília",
  "Katarína",
  "Henrieta",
  "Bibiána",
  "Barbora",
  "Marína",
  "Izabela",
  "Hilda",
  "Otília",
  "Lucia",
  "Branislava",
  "Bronislava",
  "Ivica",
  "Albína",
  "Kornélia",
  "Sláva",
  "Slávka",
  "Judita",
  "Dagmara",
  "Adela",
  "Nadežda",
  "Eva",
  "Filoména",
  "Ivana",
  "Milada"
];

},{}],"node_modules/faker/lib/locales/sk/name/male_last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Antal",
  "Babka",
  "Bahna",
  "Bahno",
  "Baláž",
  "Baran",
  "Baranka",
  "Bartovič",
  "Bartoš",
  "Bača",
  "Bernolák",
  "Beňo",
  "Bicek",
  "Bielik",
  "Blaho",
  "Bondra",
  "Bosák",
  "Boška",
  "Brezina",
  "Bukovský",
  "Chalupka",
  "Chudík",
  "Cibula",
  "Cibulka",
  "Cibuľa",
  "Cyprich",
  "Cíger",
  "Danko",
  "Daňko",
  "Daňo",
  "Debnár",
  "Dej",
  "Dekýš",
  "Doležal",
  "Dočolomanský",
  "Droppa",
  "Dubovský",
  "Dudek",
  "Dula",
  "Dulla",
  "Dusík",
  "Dvonč",
  "Dzurjanin",
  "Dávid",
  "Fabian",
  "Fabián",
  "Fajnor",
  "Farkašovský",
  "Fico",
  "Filc",
  "Filip",
  "Finka",
  "Ftorek",
  "Gašpar",
  "Gašparovič",
  "Gocník",
  "Gregor",
  "Greguš",
  "Grznár",
  "Hablák",
  "Habšuda",
  "Halda",
  "Haluška",
  "Halák",
  "Hanko",
  "Hanzal",
  "Haščák",
  "Heretik",
  "Hečko",
  "Hlaváček",
  "Hlinka",
  "Holub",
  "Holuby",
  "Hossa",
  "Hoza",
  "Hraško",
  "Hric",
  "Hrmo",
  "Hrušovský",
  "Huba",
  "Ihnačák",
  "Janeček",
  "Janoška",
  "Jantošovič",
  "Janík",
  "Janček",
  "Jedľovský",
  "Jendek",
  "Jonata",
  "Jurina",
  "Jurkovič",
  "Jurík",
  "Jánošík",
  "Kafenda",
  "Kaliský",
  "Karul",
  "Keníž",
  "Klapka",
  "Kmeť",
  "Kolesár",
  "Kollár",
  "Kolnik",
  "Kolník",
  "Kolár",
  "Korec",
  "Kostka",
  "Kostrec",
  "Kováč",
  "Kováčik",
  "Koza",
  "Kočiš",
  "Krajíček",
  "Krajči",
  "Krajčo",
  "Krajčovič",
  "Krajčír",
  "Králik",
  "Krúpa",
  "Kubík",
  "Kyseľ",
  "Kállay",
  "Labuda",
  "Lepšík",
  "Lipták",
  "Lisický",
  "Lubina",
  "Lukáč",
  "Lupták",
  "Líška",
  "Madej",
  "Majeský",
  "Malachovský",
  "Malíšek",
  "Mamojka",
  "Marcinko",
  "Marián",
  "Masaryk",
  "Maslo",
  "Matiaško",
  "Medveď",
  "Melcer",
  "Mečiar",
  "Michalík",
  "Mihalik",
  "Mihál",
  "Mihálik",
  "Mikloško",
  "Mikulík",
  "Mikuš",
  "Mikúš",
  "Milota",
  "Mináč",
  "Mišík",
  "Mojžiš",
  "Mokroš",
  "Mora",
  "Moravčík",
  "Mydlo",
  "Nemec",
  "Nitra",
  "Novák",
  "Obšut",
  "Ondruš",
  "Otčenáš",
  "Pauko",
  "Pavlikovský",
  "Pavúk",
  "Pašek",
  "Paška",
  "Paško",
  "Pelikán",
  "Petrovický",
  "Petruška",
  "Peško",
  "Plch",
  "Plekanec",
  "Podhradský",
  "Podkonický",
  "Poliak",
  "Pupák",
  "Rak",
  "Repiský",
  "Romančík",
  "Rus",
  "Ružička",
  "Rybníček",
  "Rybár",
  "Rybárik",
  "Samson",
  "Sedliak",
  "Senko",
  "Sklenka",
  "Skokan",
  "Skutecký",
  "Slašťan",
  "Sloboda",
  "Slobodník",
  "Slota",
  "Slovák",
  "Smrek",
  "Stodola",
  "Straka",
  "Strnisko",
  "Svrbík",
  "Sámel",
  "Sýkora",
  "Tatar",
  "Tatarka",
  "Tatár",
  "Tatárka",
  "Thomka",
  "Tomeček",
  "Tomka",
  "Tomko",
  "Truben",
  "Turčok",
  "Uram",
  "Urblík",
  "Vajcík",
  "Vajda",
  "Valach",
  "Valachovič",
  "Valent",
  "Valuška",
  "Vanek",
  "Vesel",
  "Vicen",
  "Višňovský",
  "Vlach",
  "Vojtek",
  "Vydarený",
  "Zajac",
  "Zima",
  "Zimka",
  "Záborský",
  "Zúbrik",
  "Čapkovič",
  "Čaplovič",
  "Čarnogurský",
  "Čierny",
  "Čobrda",
  "Ďaďo",
  "Ďurica",
  "Ďuriš",
  "Šidlo",
  "Šimonovič",
  "Škriniar",
  "Škultéty",
  "Šmajda",
  "Šoltés",
  "Šoltýs",
  "Štefan",
  "Štefanka",
  "Šulc",
  "Šurka",
  "Švehla",
  "Šťastný"
];

},{}],"node_modules/faker/lib/locales/sk/name/female_last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Antalová",
  "Babková",
  "Bahnová",
  "Balážová",
  "Baranová",
  "Baranková",
  "Bartovičová",
  "Bartošová",
  "Bačová",
  "Bernoláková",
  "Beňová",
  "Biceková",
  "Bieliková",
  "Blahová",
  "Bondrová",
  "Bosáková",
  "Bošková",
  "Brezinová",
  "Bukovská",
  "Chalupková",
  "Chudíková",
  "Cibulová",
  "Cibulková",
  "Cyprichová",
  "Cígerová",
  "Danková",
  "Daňková",
  "Daňová",
  "Debnárová",
  "Dejová",
  "Dekýšová",
  "Doležalová",
  "Dočolomanská",
  "Droppová",
  "Dubovská",
  "Dudeková",
  "Dulová",
  "Dullová",
  "Dusíková",
  "Dvončová",
  "Dzurjaninová",
  "Dávidová",
  "Fabianová",
  "Fabiánová",
  "Fajnorová",
  "Farkašovská",
  "Ficová",
  "Filcová",
  "Filipová",
  "Finková",
  "Ftoreková",
  "Gašparová",
  "Gašparovičová",
  "Gocníková",
  "Gregorová",
  "Gregušová",
  "Grznárová",
  "Habláková",
  "Habšudová",
  "Haldová",
  "Halušková",
  "Haláková",
  "Hanková",
  "Hanzalová",
  "Haščáková",
  "Heretiková",
  "Hečková",
  "Hlaváčeková",
  "Hlinková",
  "Holubová",
  "Holubyová",
  "Hossová",
  "Hozová",
  "Hrašková",
  "Hricová",
  "Hrmová",
  "Hrušovská",
  "Hubová",
  "Ihnačáková",
  "Janečeková",
  "Janošková",
  "Jantošovičová",
  "Janíková",
  "Jančeková",
  "Jedľovská",
  "Jendeková",
  "Jonatová",
  "Jurinová",
  "Jurkovičová",
  "Juríková",
  "Jánošíková",
  "Kafendová",
  "Kaliská",
  "Karulová",
  "Kenížová",
  "Klapková",
  "Kmeťová",
  "Kolesárová",
  "Kollárová",
  "Kolniková",
  "Kolníková",
  "Kolárová",
  "Korecová",
  "Kostkaová",
  "Kostrecová",
  "Kováčová",
  "Kováčiková",
  "Kozová",
  "Kočišová",
  "Krajíčeková",
  "Krajčová",
  "Krajčovičová",
  "Krajčírová",
  "Králiková",
  "Krúpová",
  "Kubíková",
  "Kyseľová",
  "Kállayová",
  "Labudová",
  "Lepšíková",
  "Liptáková",
  "Lisická",
  "Lubinová",
  "Lukáčová",
  "Luptáková",
  "Líšková",
  "Madejová",
  "Majeská",
  "Malachovská",
  "Malíšeková",
  "Mamojková",
  "Marcinková",
  "Mariánová",
  "Masaryková",
  "Maslová",
  "Matiašková",
  "Medveďová",
  "Melcerová",
  "Mečiarová",
  "Michalíková",
  "Mihaliková",
  "Mihálová",
  "Miháliková",
  "Miklošková",
  "Mikulíková",
  "Mikušová",
  "Mikúšová",
  "Milotová",
  "Mináčová",
  "Mišíková",
  "Mojžišová",
  "Mokrošová",
  "Morová",
  "Moravčíková",
  "Mydlová",
  "Nemcová",
  "Nováková",
  "Obšutová",
  "Ondrušová",
  "Otčenášová",
  "Pauková",
  "Pavlikovská",
  "Pavúková",
  "Pašeková",
  "Pašková",
  "Pelikánová",
  "Petrovická",
  "Petrušková",
  "Pešková",
  "Plchová",
  "Plekanecová",
  "Podhradská",
  "Podkonická",
  "Poliaková",
  "Pupáková",
  "Raková",
  "Repiská",
  "Romančíková",
  "Rusová",
  "Ružičková",
  "Rybníčeková",
  "Rybárová",
  "Rybáriková",
  "Samsonová",
  "Sedliaková",
  "Senková",
  "Sklenková",
  "Skokanová",
  "Skutecká",
  "Slašťanová",
  "Slobodová",
  "Slobodníková",
  "Slotová",
  "Slováková",
  "Smreková",
  "Stodolová",
  "Straková",
  "Strnisková",
  "Svrbíková",
  "Sámelová",
  "Sýkorová",
  "Tatarová",
  "Tatarková",
  "Tatárová",
  "Tatárkaová",
  "Thomková",
  "Tomečeková",
  "Tomková",
  "Trubenová",
  "Turčoková",
  "Uramová",
  "Urblíková",
  "Vajcíková",
  "Vajdová",
  "Valachová",
  "Valachovičová",
  "Valentová",
  "Valušková",
  "Vaneková",
  "Veselová",
  "Vicenová",
  "Višňovská",
  "Vlachová",
  "Vojteková",
  "Vydarená",
  "Zajacová",
  "Zimová",
  "Zimková",
  "Záborská",
  "Zúbriková",
  "Čapkovičová",
  "Čaplovičová",
  "Čarnogurská",
  "Čierná",
  "Čobrdová",
  "Ďaďová",
  "Ďuricová",
  "Ďurišová",
  "Šidlová",
  "Šimonovičová",
  "Škriniarová",
  "Škultétyová",
  "Šmajdová",
  "Šoltésová",
  "Šoltýsová",
  "Štefanová",
  "Štefanková",
  "Šulcová",
  "Šurková",
  "Švehlová",
  "Šťastná"
];

},{}],"node_modules/faker/lib/locales/sk/name/prefix.js":[function(require,module,exports) {
module["exports"] = [
  "Ing.",
  "Mgr.",
  "JUDr.",
  "MUDr."
];

},{}],"node_modules/faker/lib/locales/sk/name/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "Phd."
];

},{}],"node_modules/faker/lib/locales/sk/name/title.js":[function(require,module,exports) {
module["exports"] = {
  "descriptor": [
    "Lead",
    "Senior",
    "Direct",
    "Corporate",
    "Dynamic",
    "Future",
    "Product",
    "National",
    "Regional",
    "District",
    "Central",
    "Global",
    "Customer",
    "Investor",
    "Dynamic",
    "International",
    "Legacy",
    "Forward",
    "Internal",
    "Human",
    "Chief",
    "Principal"
  ],
  "level": [
    "Solutions",
    "Program",
    "Brand",
    "Security",
    "Research",
    "Marketing",
    "Directives",
    "Implementation",
    "Integration",
    "Functionality",
    "Response",
    "Paradigm",
    "Tactics",
    "Identity",
    "Markets",
    "Group",
    "Division",
    "Applications",
    "Optimization",
    "Operations",
    "Infrastructure",
    "Intranet",
    "Communications",
    "Web",
    "Branding",
    "Quality",
    "Assurance",
    "Mobility",
    "Accounts",
    "Data",
    "Creative",
    "Configuration",
    "Accountability",
    "Interactions",
    "Factors",
    "Usability",
    "Metrics"
  ],
  "job": [
    "Supervisor",
    "Associate",
    "Executive",
    "Liaison",
    "Officer",
    "Manager",
    "Engineer",
    "Specialist",
    "Director",
    "Coordinator",
    "Administrator",
    "Architect",
    "Analyst",
    "Designer",
    "Planner",
    "Orchestrator",
    "Technician",
    "Developer",
    "Producer",
    "Consultant",
    "Assistant",
    "Facilitator",
    "Agent",
    "Representative",
    "Strategist"
  ]
};

},{}],"node_modules/faker/lib/locales/sk/name/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{prefix} #{man_first_name} #{man_last_name}",
  "#{prefix} #{woman_first_name} #{woman_last_name}",
  "#{man_first_name} #{man_last_name} #{suffix}",
  "#{woman_first_name} #{woman_last_name} #{suffix}",
  "#{man_first_name} #{man_last_name}",
  "#{man_first_name} #{man_last_name}",
  "#{man_first_name} #{man_last_name}",
  "#{woman_first_name} #{woman_last_name}",
  "#{woman_first_name} #{woman_last_name}",
  "#{woman_first_name} #{woman_last_name}"
];

},{}],"node_modules/faker/lib/locales/sk/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.male_first_name = require("./male_first_name");
name.female_first_name = require("./female_first_name");
name.male_last_name = require("./male_last_name");
name.female_last_name = require("./female_last_name");
name.prefix = require("./prefix");
name.suffix = require("./suffix");
name.title = require("./title");
name.name = require("./name");

},{"./male_first_name":"node_modules/faker/lib/locales/sk/name/male_first_name.js","./female_first_name":"node_modules/faker/lib/locales/sk/name/female_first_name.js","./male_last_name":"node_modules/faker/lib/locales/sk/name/male_last_name.js","./female_last_name":"node_modules/faker/lib/locales/sk/name/female_last_name.js","./prefix":"node_modules/faker/lib/locales/sk/name/prefix.js","./suffix":"node_modules/faker/lib/locales/sk/name/suffix.js","./title":"node_modules/faker/lib/locales/sk/name/title.js","./name":"node_modules/faker/lib/locales/sk/name/name.js"}],"node_modules/faker/lib/locales/sk/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "09## ### ###",
  "0## #### ####",
  "0# #### ####",
  "+421 ### ### ###"
];

},{}],"node_modules/faker/lib/locales/sk/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/sk/phone_number/formats.js"}],"node_modules/faker/lib/locales/sk/index.js":[function(require,module,exports) {
var sk = {};
module['exports'] = sk;
sk.title = "Slovakian";
sk.address = require("./address");
sk.company = require("./company");
sk.internet = require("./internet");
sk.lorem = require("./lorem");
sk.name = require("./name");
sk.phone_number = require("./phone_number");

},{"./address":"node_modules/faker/lib/locales/sk/address/index.js","./company":"node_modules/faker/lib/locales/sk/company/index.js","./internet":"node_modules/faker/lib/locales/sk/internet/index.js","./lorem":"node_modules/faker/lib/locales/sk/lorem/index.js","./name":"node_modules/faker/lib/locales/sk/name/index.js","./phone_number":"node_modules/faker/lib/locales/sk/phone_number/index.js"}],"node_modules/faker/lib/locales/sv/address/city_prefix.js":[function(require,module,exports) {
module["exports"] = [
  "Söder",
  "Norr",
  "Väst",
  "Öster",
  "Aling",
  "Ar",
  "Av",
  "Bo",
  "Br",
  "Bå",
  "Ek",
  "En",
  "Esk",
  "Fal",
  "Gäv",
  "Göte",
  "Ha",
  "Helsing",
  "Karl",
  "Krist",
  "Kram",
  "Kung",
  "Kö",
  "Lyck",
  "Ny"
];

},{}],"node_modules/faker/lib/locales/sv/address/city_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "stad",
  "land",
  "sås",
  "ås",
  "holm",
  "tuna",
  "sta",
  "berg",
  "löv",
  "borg",
  "mora",
  "hamn",
  "fors",
  "köping",
  "by",
  "hult",
  "torp",
  "fred",
  "vik"
];

},{}],"node_modules/faker/lib/locales/sv/address/country.js":[function(require,module,exports) {
module["exports"] = [
  "Ryssland",
  "Kanada",
  "Kina",
  "USA",
  "Brasilien",
  "Australien",
  "Indien",
  "Argentina",
  "Kazakstan",
  "Algeriet",
  "DR Kongo",
  "Danmark",
  "Färöarna",
  "Grönland",
  "Saudiarabien",
  "Mexiko",
  "Indonesien",
  "Sudan",
  "Libyen",
  "Iran",
  "Mongoliet",
  "Peru",
  "Tchad",
  "Niger",
  "Angola",
  "Mali",
  "Sydafrika",
  "Colombia",
  "Etiopien",
  "Bolivia",
  "Mauretanien",
  "Egypten",
  "Tanzania",
  "Nigeria",
  "Venezuela",
  "Namibia",
  "Pakistan",
  "Moçambique",
  "Turkiet",
  "Chile",
  "Zambia",
  "Marocko",
  "Västsahara",
  "Burma",
  "Afghanistan",
  "Somalia",
  "Centralafrikanska republiken",
  "Sydsudan",
  "Ukraina",
  "Botswana",
  "Madagaskar",
  "Kenya",
  "Frankrike",
  "Franska Guyana",
  "Jemen",
  "Thailand",
  "Spanien",
  "Turkmenistan",
  "Kamerun",
  "Papua Nya Guinea",
  "Sverige",
  "Uzbekistan",
  "Irak",
  "Paraguay",
  "Zimbabwe",
  "Japan",
  "Tyskland",
  "Kongo",
  "Finland",
  "Malaysia",
  "Vietnam",
  "Norge",
  "Svalbard",
  "Jan Mayen",
  "Elfenbenskusten",
  "Polen",
  "Italien",
  "Filippinerna",
  "Ecuador",
  "Burkina Faso",
  "Nya Zeeland",
  "Gabon",
  "Guinea",
  "Storbritannien",
  "Ghana",
  "Rumänien",
  "Laos",
  "Uganda",
  "Guyana",
  "Oman",
  "Vitryssland",
  "Kirgizistan",
  "Senegal",
  "Syrien",
  "Kambodja",
  "Uruguay",
  "Tunisien",
  "Surinam",
  "Nepal",
  "Bangladesh",
  "Tadzjikistan",
  "Grekland",
  "Nicaragua",
  "Eritrea",
  "Nordkorea",
  "Malawi",
  "Benin",
  "Honduras",
  "Liberia",
  "Bulgarien",
  "Kuba",
  "Guatemala",
  "Island",
  "Sydkorea",
  "Ungern",
  "Portugal",
  "Jordanien",
  "Serbien",
  "Azerbajdzjan",
  "Österrike",
  "Förenade Arabemiraten",
  "Tjeckien",
  "Panama",
  "Sierra Leone",
  "Irland",
  "Georgien",
  "Sri Lanka",
  "Litauen",
  "Lettland",
  "Togo",
  "Kroatien",
  "Bosnien och Hercegovina",
  "Costa Rica",
  "Slovakien",
  "Dominikanska republiken",
  "Bhutan",
  "Estland",
  "Danmark",
  "Färöarna",
  "Grönland",
  "Nederländerna",
  "Schweiz",
  "Guinea-Bissau",
  "Taiwan",
  "Moldavien",
  "Belgien",
  "Lesotho",
  "Armenien",
  "Albanien",
  "Salomonöarna",
  "Ekvatorialguinea",
  "Burundi",
  "Haiti",
  "Rwanda",
  "Makedonien",
  "Djibouti",
  "Belize",
  "Israel",
  "El Salvador",
  "Slovenien",
  "Fiji",
  "Kuwait",
  "Swaziland",
  "Timor-Leste",
  "Montenegro",
  "Bahamas",
  "Vanuatu",
  "Qatar",
  "Gambia",
  "Jamaica",
  "Kosovo",
  "Libanon",
  "Cypern",
  "Brunei",
  "Trinidad och Tobago",
  "Kap Verde",
  "Samoa",
  "Luxemburg",
  "Komorerna",
  "Mauritius",
  "São Tomé och Príncipe",
  "Kiribati",
  "Dominica",
  "Tonga",
  "Mikronesiens federerade stater",
  "Singapore",
  "Bahrain",
  "Saint Lucia",
  "Andorra",
  "Palau",
  "Seychellerna",
  "Antigua och Barbuda",
  "Barbados",
  "Saint Vincent och Grenadinerna",
  "Grenada",
  "Malta",
  "Maldiverna",
  "Saint Kitts och Nevis",
  "Marshallöarna",
  "Liechtenstein",
  "San Marino",
  "Tuvalu",
  "Nauru",
  "Monaco",
  "Vatikanstaten"
];

},{}],"node_modules/faker/lib/locales/sv/address/common_street_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "s Väg",
  "s Gata"
];

},{}],"node_modules/faker/lib/locales/sv/address/street_prefix.js":[function(require,module,exports) {
module["exports"] = [
  "Västra",
  "Östra",
  "Norra",
  "Södra",
  "Övre",
  "Undre"
];

},{}],"node_modules/faker/lib/locales/sv/address/street_root.js":[function(require,module,exports) {
module["exports"] = [
  "Björk",
  "Järnvägs",
  "Ring",
  "Skol",
  "Skogs",
  "Ny",
  "Gran",
  "Idrotts",
  "Stor",
  "Kyrk",
  "Industri",
  "Park",
  "Strand",
  "Skol",
  "Trädgård",
  "Ängs",
  "Kyrko",
  "Villa",
  "Ek",
  "Kvarn",
  "Stations",
  "Back",
  "Furu",
  "Gen",
  "Fabriks",
  "Åker",
  "Bäck",
  "Asp"
];

},{}],"node_modules/faker/lib/locales/sv/address/street_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "vägen",
  "gatan",
  "gränden",
  "gärdet",
  "allén"
];

},{}],"node_modules/faker/lib/locales/sv/address/state.js":[function(require,module,exports) {
module["exports"] = [
  "Blekinge",
  "Dalarna",
  "Gotland",
  "Gävleborg",
  "Göteborg",
  "Halland",
  "Jämtland",
  "Jönköping",
  "Kalmar",
  "Kronoberg",
  "Norrbotten",
  "Skaraborg",
  "Skåne",
  "Stockholm",
  "Södermanland",
  "Uppsala",
  "Värmland",
  "Västerbotten",
  "Västernorrland",
  "Västmanland",
  "Älvsborg",
  "Örebro",
  "Östergötland"
];

},{}],"node_modules/faker/lib/locales/sv/address/city.js":[function(require,module,exports) {
module["exports"] = [
  "#{city_prefix}#{city_suffix}"
];

},{}],"node_modules/faker/lib/locales/sv/address/street_name.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_root}#{street_suffix}",
  "#{street_prefix} #{street_root}#{street_suffix}",
  "#{Name.first_name}#{common_street_suffix}",
  "#{Name.last_name}#{common_street_suffix}"
];

},{}],"node_modules/faker/lib/locales/sv/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "#####"
];

},{}],"node_modules/faker/lib/locales/sv/address/building_number.js":[function(require,module,exports) {
module["exports"] = [
  "###",
  "##",
  "#"
];

},{}],"node_modules/faker/lib/locales/sv/address/secondary_address.js":[function(require,module,exports) {
module["exports"] = [
  "Lgh. ###",
  "Hus ###"
];

},{}],"node_modules/faker/lib/locales/sv/address/street_address.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_name} #{building_number}"
];

},{}],"node_modules/faker/lib/locales/sv/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "Sverige"
];

},{}],"node_modules/faker/lib/locales/sv/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.city_prefix = require("./city_prefix");
address.city_suffix = require("./city_suffix");
address.country = require("./country");
address.common_street_suffix = require("./common_street_suffix");
address.street_prefix = require("./street_prefix");
address.street_root = require("./street_root");
address.street_suffix = require("./street_suffix");
address.state = require("./state");
address.city = require("./city");
address.street_name = require("./street_name");
address.postcode = require("./postcode");
address.building_number = require("./building_number");
address.secondary_address = require("./secondary_address");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./city_prefix":"node_modules/faker/lib/locales/sv/address/city_prefix.js","./city_suffix":"node_modules/faker/lib/locales/sv/address/city_suffix.js","./country":"node_modules/faker/lib/locales/sv/address/country.js","./common_street_suffix":"node_modules/faker/lib/locales/sv/address/common_street_suffix.js","./street_prefix":"node_modules/faker/lib/locales/sv/address/street_prefix.js","./street_root":"node_modules/faker/lib/locales/sv/address/street_root.js","./street_suffix":"node_modules/faker/lib/locales/sv/address/street_suffix.js","./state":"node_modules/faker/lib/locales/sv/address/state.js","./city":"node_modules/faker/lib/locales/sv/address/city.js","./street_name":"node_modules/faker/lib/locales/sv/address/street_name.js","./postcode":"node_modules/faker/lib/locales/sv/address/postcode.js","./building_number":"node_modules/faker/lib/locales/sv/address/building_number.js","./secondary_address":"node_modules/faker/lib/locales/sv/address/secondary_address.js","./street_address":"node_modules/faker/lib/locales/sv/address/street_address.js","./default_country":"node_modules/faker/lib/locales/sv/address/default_country.js"}],"node_modules/faker/lib/locales/sv/company/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "Gruppen",
  "AB",
  "HB",
  "Group",
  "Investment",
  "Kommanditbolag",
  "Aktiebolag"
];

},{}],"node_modules/faker/lib/locales/sv/company/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{Name.last_name} #{suffix}",
  "#{Name.last_name}-#{Name.last_name}",
  "#{Name.last_name}, #{Name.last_name} #{suffix}"
];

},{}],"node_modules/faker/lib/locales/sv/company/index.js":[function(require,module,exports) {
var company = {};
module['exports'] = company;
company.suffix = require("./suffix");
company.name = require("./name");

},{"./suffix":"node_modules/faker/lib/locales/sv/company/suffix.js","./name":"node_modules/faker/lib/locales/sv/company/name.js"}],"node_modules/faker/lib/locales/sv/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "se",
  "nu",
  "info",
  "com",
  "org"
];

},{}],"node_modules/faker/lib/locales/sv/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.domain_suffix = require("./domain_suffix");

},{"./domain_suffix":"node_modules/faker/lib/locales/sv/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/sv/name/first_name_women.js":[function(require,module,exports) {
module["exports"] = [
  "Maria",
  "Anna",
  "Margareta",
  "Elisabeth",
  "Eva",
  "Birgitta",
  "Kristina",
  "Karin",
  "Elisabet",
  "Marie"
];

},{}],"node_modules/faker/lib/locales/sv/name/first_name_men.js":[function(require,module,exports) {
module["exports"] = [
  "Erik",
  "Lars",
  "Karl",
  "Anders",
  "Per",
  "Johan",
  "Nils",
  "Lennart",
  "Emil",
  "Hans"
];

},{}],"node_modules/faker/lib/locales/sv/name/last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Johansson",
  "Andersson",
  "Karlsson",
  "Nilsson",
  "Eriksson",
  "Larsson",
  "Olsson",
  "Persson",
  "Svensson",
  "Gustafsson"
];

},{}],"node_modules/faker/lib/locales/sv/name/prefix.js":[function(require,module,exports) {
module["exports"] = [
  "Dr.",
  "Prof.",
  "PhD."
];

},{}],"node_modules/faker/lib/locales/sv/name/title.js":[function(require,module,exports) {
module["exports"] = {
  "descriptor": [
    "Lead",
    "Senior",
    "Direct",
    "Corporate",
    "Dynamic",
    "Future",
    "Product",
    "National",
    "Regional",
    "District",
    "Central",
    "Global",
    "Customer",
    "Investor",
    "Dynamic",
    "International",
    "Legacy",
    "Forward",
    "Internal",
    "Human",
    "Chief",
    "Principal"
  ],
  "level": [
    "Solutions",
    "Program",
    "Brand",
    "Security",
    "Research",
    "Marketing",
    "Directives",
    "Implementation",
    "Integration",
    "Functionality",
    "Response",
    "Paradigm",
    "Tactics",
    "Identity",
    "Markets",
    "Group",
    "Division",
    "Applications",
    "Optimization",
    "Operations",
    "Infrastructure",
    "Intranet",
    "Communications",
    "Web",
    "Branding",
    "Quality",
    "Assurance",
    "Mobility",
    "Accounts",
    "Data",
    "Creative",
    "Configuration",
    "Accountability",
    "Interactions",
    "Factors",
    "Usability",
    "Metrics"
  ],
  "job": [
    "Supervisor",
    "Associate",
    "Executive",
    "Liaison",
    "Officer",
    "Manager",
    "Engineer",
    "Specialist",
    "Director",
    "Coordinator",
    "Administrator",
    "Architect",
    "Analyst",
    "Designer",
    "Planner",
    "Orchestrator",
    "Technician",
    "Developer",
    "Producer",
    "Consultant",
    "Assistant",
    "Facilitator",
    "Agent",
    "Representative",
    "Strategist"
  ]
};

},{}],"node_modules/faker/lib/locales/sv/name/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{first_name_women} #{last_name}",
  "#{first_name_men} #{last_name}",
  "#{first_name_women} #{last_name}",
  "#{first_name_men} #{last_name}",
  "#{first_name_women} #{last_name}",
  "#{first_name_men} #{last_name}",
  "#{prefix} #{first_name_men} #{last_name}",
  "#{prefix} #{first_name_women} #{last_name}"
];

},{}],"node_modules/faker/lib/locales/sv/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.first_name_women = require("./first_name_women");
name.first_name_men = require("./first_name_men");
name.last_name = require("./last_name");
name.prefix = require("./prefix");
name.title = require("./title");
name.name = require("./name");

},{"./first_name_women":"node_modules/faker/lib/locales/sv/name/first_name_women.js","./first_name_men":"node_modules/faker/lib/locales/sv/name/first_name_men.js","./last_name":"node_modules/faker/lib/locales/sv/name/last_name.js","./prefix":"node_modules/faker/lib/locales/sv/name/prefix.js","./title":"node_modules/faker/lib/locales/sv/name/title.js","./name":"node_modules/faker/lib/locales/sv/name/name.js"}],"node_modules/faker/lib/locales/sv/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "####-#####",
  "####-######"
];

},{}],"node_modules/faker/lib/locales/sv/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/sv/phone_number/formats.js"}],"node_modules/faker/lib/locales/sv/cell_phone/common_cell_prefix.js":[function(require,module,exports) {
module["exports"] = [
  56,
  62,
  59
];

},{}],"node_modules/faker/lib/locales/sv/cell_phone/formats.js":[function(require,module,exports) {
module["exports"] = [
  "#{common_cell_prefix}-###-####"
];

},{}],"node_modules/faker/lib/locales/sv/cell_phone/index.js":[function(require,module,exports) {
var cell_phone = {};
module['exports'] = cell_phone;
cell_phone.common_cell_prefix = require("./common_cell_prefix");
cell_phone.formats = require("./formats");

},{"./common_cell_prefix":"node_modules/faker/lib/locales/sv/cell_phone/common_cell_prefix.js","./formats":"node_modules/faker/lib/locales/sv/cell_phone/formats.js"}],"node_modules/faker/lib/locales/sv/commerce/color.js":[function(require,module,exports) {
module["exports"] = [
  "vit",
  "silver",
  "grå",
  "svart",
  "röd",
  "grön",
  "blå",
  "gul",
  "lila",
  "indigo",
  "guld",
  "brun",
  "rosa",
  "purpur",
  "korall"
];

},{}],"node_modules/faker/lib/locales/sv/commerce/department.js":[function(require,module,exports) {
module["exports"] = [
  "Böcker",
  "Filmer",
  "Musik",
  "Spel",
  "Elektronik",
  "Datorer",
  "Hem",
  "Trädgård",
  "Verktyg",
  "Livsmedel",
  "Hälsa",
  "Skönhet",
  "Leksaker",
  "Klädsel",
  "Skor",
  "Smycken",
  "Sport"
];

},{}],"node_modules/faker/lib/locales/sv/commerce/product_name.js":[function(require,module,exports) {
module["exports"] = {
  "adjective": [
    "Liten",
    "Ergonomisk",
    "Robust",
    "Intelligent",
    "Söt",
    "Otrolig",
    "Fatastisk",
    "Praktisk",
    "Slimmad",
    "Grym"
  ],
  "material": [
    "Stål",
    "Metall",
    "Trä",
    "Betong",
    "Plast",
    "Bomul",
    "Grnit",
    "Gummi",
    "Latex"
  ],
  "product": [
    "Stol",
    "Bil",
    "Dator",
    "Handskar",
    "Pants",
    "Shirt",
    "Table",
    "Shoes",
    "Hat"
  ]
};

},{}],"node_modules/faker/lib/locales/sv/commerce/index.js":[function(require,module,exports) {
var commerce = {};
module['exports'] = commerce;
commerce.color = require("./color");
commerce.department = require("./department");
commerce.product_name = require("./product_name");

},{"./color":"node_modules/faker/lib/locales/sv/commerce/color.js","./department":"node_modules/faker/lib/locales/sv/commerce/department.js","./product_name":"node_modules/faker/lib/locales/sv/commerce/product_name.js"}],"node_modules/faker/lib/locales/sv/team/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "IF",
  "FF",
  "BK",
  "HK",
  "AIF",
  "SK",
  "FC",
  "SK",
  "BoIS",
  "FK",
  "BIS",
  "FIF",
  "IK"
];

},{}],"node_modules/faker/lib/locales/sv/team/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{Address.city} #{suffix}"
];

},{}],"node_modules/faker/lib/locales/sv/team/index.js":[function(require,module,exports) {
var team = {};
module['exports'] = team;
team.suffix = require("./suffix");
team.name = require("./name");

},{"./suffix":"node_modules/faker/lib/locales/sv/team/suffix.js","./name":"node_modules/faker/lib/locales/sv/team/name.js"}],"node_modules/faker/lib/locales/sv/date/month.js":[function(require,module,exports) {
// Source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/en.xml#L1799
module["exports"] = {
  wide: [
    "januari",
    "februari",
    "mars",
    "april",
    "maj",
    "juni",
    "juli",
    "augusti",
    "september",
    "oktober",
    "november",
    "december"
  ],
  abbr: [
    "jan",
    "feb",
    "mar",
    "apr",
    "maj",
    "jun",
    "jul",
    "aug",
    "sep",
    "okt",
    "nov",
    "dec"
  ]
};

},{}],"node_modules/faker/lib/locales/sv/date/weekday.js":[function(require,module,exports) {
// Source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/en.xml#L1847
module["exports"] = {
  wide: [
    "söndag",
    "måndag",
    "tisdag",
    "onsdag",
    "torsdag",
    "fredag",
    "lördag"
  ],
  abbr: [
    "sön",
    "mån",
    "tis",
    "ons",
    "tor",
    "fre",
    "lör"
  ]
};

},{}],"node_modules/faker/lib/locales/sv/date/index.js":[function(require,module,exports) {
var date = {};
module["exports"] = date;
date.month = require("./month");
date.weekday = require("./weekday");

},{"./month":"node_modules/faker/lib/locales/sv/date/month.js","./weekday":"node_modules/faker/lib/locales/sv/date/weekday.js"}],"node_modules/faker/lib/locales/sv/index.js":[function(require,module,exports) {
var sv = {};
module['exports'] = sv;
sv.title = "Swedish";
sv.address = require("./address");
sv.company = require("./company");
sv.internet = require("./internet");
sv.name = require("./name");
sv.phone_number = require("./phone_number");
sv.cell_phone = require("./cell_phone");
sv.commerce = require("./commerce");
sv.team = require("./team");
sv.date = require("./date");

},{"./address":"node_modules/faker/lib/locales/sv/address/index.js","./company":"node_modules/faker/lib/locales/sv/company/index.js","./internet":"node_modules/faker/lib/locales/sv/internet/index.js","./name":"node_modules/faker/lib/locales/sv/name/index.js","./phone_number":"node_modules/faker/lib/locales/sv/phone_number/index.js","./cell_phone":"node_modules/faker/lib/locales/sv/cell_phone/index.js","./commerce":"node_modules/faker/lib/locales/sv/commerce/index.js","./team":"node_modules/faker/lib/locales/sv/team/index.js","./date":"node_modules/faker/lib/locales/sv/date/index.js"}],"node_modules/faker/lib/locales/tr/address/city.js":[function(require,module,exports) {
module["exports"] = [
  "Adana",
  "Adıyaman",
  "Afyon",
  "Ağrı",
  "Amasya",
  "Ankara",
  "Antalya",
  "Artvin",
  "Aydın",
  "Balıkesir",
  "Bilecik",
  "Bingöl",
  "Bitlis",
  "Bolu",
  "Burdur",
  "Bursa",
  "Çanakkale",
  "Çankırı",
  "Çorum",
  "Denizli",
  "Diyarbakır",
  "Edirne",
  "Elazığ",
  "Erzincan",
  "Erzurum",
  "Eskişehir",
  "Gaziantep",
  "Giresun",
  "Gümüşhane",
  "Hakkari",
  "Hatay",
  "Isparta",
  "İçel (Mersin)",
  "İstanbul",
  "İzmir",
  "Kars",
  "Kastamonu",
  "Kayseri",
  "Kırklareli",
  "Kırşehir",
  "Kocaeli",
  "Konya",
  "Kütahya",
  "Malatya",
  "Manisa",
  "K.maraş",
  "Mardin",
  "Muğla",
  "Muş",
  "Nevşehir",
  "Niğde",
  "Ordu",
  "Rize",
  "Sakarya",
  "Samsun",
  "Siirt",
  "Sinop",
  "Sivas",
  "Tekirdağ",
  "Tokat",
  "Trabzon",
  "Tunceli",
  "Şanlıurfa",
  "Uşak",
  "Van",
  "Yozgat",
  "Zonguldak",
  "Aksaray",
  "Bayburt",
  "Karaman",
  "Kırıkkale",
  "Batman",
  "Şırnak",
  "Bartın",
  "Ardahan",
  "Iğdır",
  "Yalova",
  "Karabük",
  "Kilis",
  "Osmaniye",
  "Düzce"
];

},{}],"node_modules/faker/lib/locales/tr/address/street_root.js":[function(require,module,exports) {
module["exports"] = [
  "Atatürk Bulvarı",
  "Alparslan Türkeş Bulvarı",
  "Ali Çetinkaya Caddesi",
  "Tevfik Fikret Caddesi",
  "Kocatepe Caddesi",
  "İsmet Paşa Caddesi",
  "30 Ağustos Caddesi",
  "İsmet Attila Caddesi",
  "Namık Kemal Caddesi",
  "Lütfi Karadirek Caddesi",
  "Sarıkaya Caddesi",
  "Yunus Emre Sokak",
  "Dar Sokak",
  "Fatih Sokak ",
  "Harman Yolu Sokak ",
  "Ergenekon Sokak  ",
  "Ülkü Sokak",
  "Sağlık Sokak",
  "Okul Sokak",
  "Harman Altı Sokak",
  "Kaldırım Sokak",
  "Mevlana Sokak",
  "Gül Sokak",
  "Sıran Söğüt Sokak",
  "Güven Yaka Sokak",
  "Saygılı Sokak",
  "Menekşe Sokak",
  "Dağınık Evler Sokak",
  "Sevgi Sokak",
  "Afyon Kaya Sokak",
  "Oğuzhan Sokak",
  "İbn-i Sina Sokak",
  "Okul Sokak",
  "Bahçe Sokak",
  "Köypınar Sokak",
  "Kekeçoğlu Sokak",
  "Barış Sokak",
  "Bayır Sokak",
  "Kerimoğlu Sokak",
  "Nalbant Sokak",
  "Bandak Sokak"
];

},{}],"node_modules/faker/lib/locales/tr/address/country.js":[function(require,module,exports) {
module["exports"] = [
  "Afganistan",
  "Almanya",
  "Amerika Birleşik Devletleri",
  "Amerikan Samoa",
  "Andorra",
  "Angola",
  "Anguilla, İngiltere",
  "Antigua ve Barbuda",
  "Arjantin",
  "Arnavutluk",
  "Aruba, Hollanda",
  "Avustralya",
  "Avusturya",
  "Azerbaycan",
  "Bahama Adaları",
  "Bahreyn",
  "Bangladeş",
  "Barbados",
  "Belçika",
  "Belize",
  "Benin",
  "Bermuda, İngiltere",
  "Beyaz Rusya",
  "Bhutan",
  "Birleşik Arap Emirlikleri",
  "Birmanya (Myanmar)",
  "Bolivya",
  "Bosna Hersek",
  "Botswana",
  "Brezilya",
  "Brunei",
  "Bulgaristan",
  "Burkina Faso",
  "Burundi",
  "Cape Verde",
  "Cayman Adaları, İngiltere",
  "Cebelitarık, İngiltere",
  "Cezayir",
  "Christmas Adası , Avusturalya",
  "Cibuti",
  "Çad",
  "Çek Cumhuriyeti",
  "Çin",
  "Danimarka",
  "Doğu Timor",
  "Dominik Cumhuriyeti",
  "Dominika",
  "Ekvator",
  "Ekvator Ginesi",
  "El Salvador",
  "Endonezya",
  "Eritre",
  "Ermenistan",
  "Estonya",
  "Etiyopya",
  "Fas",
  "Fiji",
  "Fildişi Sahili",
  "Filipinler",
  "Filistin",
  "Finlandiya",
  "Folkland Adaları, İngiltere",
  "Fransa",
  "Fransız Guyanası",
  "Fransız Güney Eyaletleri (Kerguelen Adaları)",
  "Fransız Polinezyası",
  "Gabon",
  "Galler",
  "Gambiya",
  "Gana",
  "Gine",
  "Gine-Bissau",
  "Grenada",
  "Grönland",
  "Guadalup, Fransa",
  "Guam, Amerika",
  "Guatemala",
  "Guyana",
  "Güney Afrika",
  "Güney Georgia ve Güney Sandviç Adaları, İngiltere",
  "Güney Kıbrıs Rum Yönetimi",
  "Güney Kore",
  "Gürcistan H",
  "Haiti",
  "Hırvatistan",
  "Hindistan",
  "Hollanda",
  "Hollanda Antilleri",
  "Honduras",
  "Irak",
  "İngiltere",
  "İran",
  "İrlanda",
  "İspanya",
  "İsrail",
  "İsveç",
  "İsviçre",
  "İtalya",
  "İzlanda",
  "Jamaika",
  "Japonya",
  "Johnston Atoll, Amerika",
  "K.K.T.C.",
  "Kamboçya",
  "Kamerun",
  "Kanada",
  "Kanarya Adaları",
  "Karadağ",
  "Katar",
  "Kazakistan",
  "Kenya",
  "Kırgızistan",
  "Kiribati",
  "Kolombiya",
  "Komorlar",
  "Kongo",
  "Kongo Demokratik Cumhuriyeti",
  "Kosova",
  "Kosta Rika",
  "Kuveyt",
  "Kuzey İrlanda",
  "Kuzey Kore",
  "Kuzey Maryana Adaları",
  "Küba",
  "Laos",
  "Lesotho",
  "Letonya",
  "Liberya",
  "Libya",
  "Liechtenstein",
  "Litvanya",
  "Lübnan",
  "Lüksemburg",
  "Macaristan",
  "Madagaskar",
  "Makau (Makao)",
  "Makedonya",
  "Malavi",
  "Maldiv Adaları",
  "Malezya",
  "Mali",
  "Malta",
  "Marşal Adaları",
  "Martinik, Fransa",
  "Mauritius",
  "Mayotte, Fransa",
  "Meksika",
  "Mısır",
  "Midway Adaları, Amerika",
  "Mikronezya",
  "Moğolistan",
  "Moldavya",
  "Monako",
  "Montserrat",
  "Moritanya",
  "Mozambik",
  "Namibia",
  "Nauru",
  "Nepal",
  "Nijer",
  "Nijerya",
  "Nikaragua",
  "Niue, Yeni Zelanda",
  "Norveç",
  "Orta Afrika Cumhuriyeti",
  "Özbekistan",
  "Pakistan",
  "Palau Adaları",
  "Palmyra Atoll, Amerika",
  "Panama",
  "Papua Yeni Gine",
  "Paraguay",
  "Peru",
  "Polonya",
  "Portekiz",
  "Porto Riko, Amerika",
  "Reunion, Fransa",
  "Romanya",
  "Ruanda",
  "Rusya Federasyonu",
  "Saint Helena, İngiltere",
  "Saint Martin, Fransa",
  "Saint Pierre ve Miquelon, Fransa",
  "Samoa",
  "San Marino",
  "Santa Kitts ve Nevis",
  "Santa Lucia",
  "Santa Vincent ve Grenadinler",
  "Sao Tome ve Principe",
  "Senegal",
  "Seyşeller",
  "Sırbistan",
  "Sierra Leone",
  "Singapur",
  "Slovakya",
  "Slovenya",
  "Solomon Adaları",
  "Somali",
  "Sri Lanka",
  "Sudan",
  "Surinam",
  "Suriye",
  "Suudi Arabistan",
  "Svalbard, Norveç",
  "Svaziland",
  "Şili",
  "Tacikistan",
  "Tanzanya",
  "Tayland",
  "Tayvan",
  "Togo",
  "Tonga",
  "Trinidad ve Tobago",
  "Tunus",
  "Turks ve Caicos Adaları, İngiltere",
  "Tuvalu",
  "Türkiye",
  "Türkmenistan",
  "Uganda",
  "Ukrayna",
  "Umman",
  "Uruguay",
  "Ürdün",
  "Vallis ve Futuna, Fransa",
  "Vanuatu",
  "Venezuela",
  "Vietnam",
  "Virgin Adaları, Amerika",
  "Virgin Adaları, İngiltere",
  "Wake Adaları, Amerika",
  "Yemen",
  "Yeni Kaledonya, Fransa",
  "Yeni Zelanda",
  "Yunanistan",
  "Zambiya",
  "Zimbabve"
];

},{}],"node_modules/faker/lib/locales/tr/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "#####"
];

},{}],"node_modules/faker/lib/locales/tr/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "Türkiye"
];

},{}],"node_modules/faker/lib/locales/tr/address/building_number.js":[function(require,module,exports) {
module["exports"] = [
  "###",
  "##",
  "#",
  "##a",
  "##b",
  "##c"
];

},{}],"node_modules/faker/lib/locales/tr/address/street_name.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_root}"
];

},{}],"node_modules/faker/lib/locales/tr/address/street_address.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_name} #{building_number}"
];

},{}],"node_modules/faker/lib/locales/tr/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.city = require("./city");
address.street_root = require("./street_root");
address.country = require("./country");
address.postcode = require("./postcode");
address.default_country = require("./default_country");
address.building_number = require("./building_number");
address.street_name = require("./street_name");
address.street_address = require("./street_address");

},{"./city":"node_modules/faker/lib/locales/tr/address/city.js","./street_root":"node_modules/faker/lib/locales/tr/address/street_root.js","./country":"node_modules/faker/lib/locales/tr/address/country.js","./postcode":"node_modules/faker/lib/locales/tr/address/postcode.js","./default_country":"node_modules/faker/lib/locales/tr/address/default_country.js","./building_number":"node_modules/faker/lib/locales/tr/address/building_number.js","./street_name":"node_modules/faker/lib/locales/tr/address/street_name.js","./street_address":"node_modules/faker/lib/locales/tr/address/street_address.js"}],"node_modules/faker/lib/locales/tr/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "com.tr",
  "com",
  "biz",
  "info",
  "name",
  "gov.tr"
];

},{}],"node_modules/faker/lib/locales/tr/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.domain_suffix = require("./domain_suffix");

},{"./domain_suffix":"node_modules/faker/lib/locales/tr/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/tr/lorem/words.js":[function(require,module,exports) {
module["exports"] = [
  "alias",
  "consequatur",
  "aut",
  "perferendis",
  "sit",
  "voluptatem",
  "accusantium",
  "doloremque",
  "aperiam",
  "eaque",
  "ipsa",
  "quae",
  "ab",
  "illo",
  "inventore",
  "veritatis",
  "et",
  "quasi",
  "architecto",
  "beatae",
  "vitae",
  "dicta",
  "sunt",
  "explicabo",
  "aspernatur",
  "aut",
  "odit",
  "aut",
  "fugit",
  "sed",
  "quia",
  "consequuntur",
  "magni",
  "dolores",
  "eos",
  "qui",
  "ratione",
  "voluptatem",
  "sequi",
  "nesciunt",
  "neque",
  "dolorem",
  "ipsum",
  "quia",
  "dolor",
  "sit",
  "amet",
  "consectetur",
  "adipisci",
  "velit",
  "sed",
  "quia",
  "non",
  "numquam",
  "eius",
  "modi",
  "tempora",
  "incidunt",
  "ut",
  "labore",
  "et",
  "dolore",
  "magnam",
  "aliquam",
  "quaerat",
  "voluptatem",
  "ut",
  "enim",
  "ad",
  "minima",
  "veniam",
  "quis",
  "nostrum",
  "exercitationem",
  "ullam",
  "corporis",
  "nemo",
  "enim",
  "ipsam",
  "voluptatem",
  "quia",
  "voluptas",
  "sit",
  "suscipit",
  "laboriosam",
  "nisi",
  "ut",
  "aliquid",
  "ex",
  "ea",
  "commodi",
  "consequatur",
  "quis",
  "autem",
  "vel",
  "eum",
  "iure",
  "reprehenderit",
  "qui",
  "in",
  "ea",
  "voluptate",
  "velit",
  "esse",
  "quam",
  "nihil",
  "molestiae",
  "et",
  "iusto",
  "odio",
  "dignissimos",
  "ducimus",
  "qui",
  "blanditiis",
  "praesentium",
  "laudantium",
  "totam",
  "rem",
  "voluptatum",
  "deleniti",
  "atque",
  "corrupti",
  "quos",
  "dolores",
  "et",
  "quas",
  "molestias",
  "excepturi",
  "sint",
  "occaecati",
  "cupiditate",
  "non",
  "provident",
  "sed",
  "ut",
  "perspiciatis",
  "unde",
  "omnis",
  "iste",
  "natus",
  "error",
  "similique",
  "sunt",
  "in",
  "culpa",
  "qui",
  "officia",
  "deserunt",
  "mollitia",
  "animi",
  "id",
  "est",
  "laborum",
  "et",
  "dolorum",
  "fuga",
  "et",
  "harum",
  "quidem",
  "rerum",
  "facilis",
  "est",
  "et",
  "expedita",
  "distinctio",
  "nam",
  "libero",
  "tempore",
  "cum",
  "soluta",
  "nobis",
  "est",
  "eligendi",
  "optio",
  "cumque",
  "nihil",
  "impedit",
  "quo",
  "porro",
  "quisquam",
  "est",
  "qui",
  "minus",
  "id",
  "quod",
  "maxime",
  "placeat",
  "facere",
  "possimus",
  "omnis",
  "voluptas",
  "assumenda",
  "est",
  "omnis",
  "dolor",
  "repellendus",
  "temporibus",
  "autem",
  "quibusdam",
  "et",
  "aut",
  "consequatur",
  "vel",
  "illum",
  "qui",
  "dolorem",
  "eum",
  "fugiat",
  "quo",
  "voluptas",
  "nulla",
  "pariatur",
  "at",
  "vero",
  "eos",
  "et",
  "accusamus",
  "officiis",
  "debitis",
  "aut",
  "rerum",
  "necessitatibus",
  "saepe",
  "eveniet",
  "ut",
  "et",
  "voluptates",
  "repudiandae",
  "sint",
  "et",
  "molestiae",
  "non",
  "recusandae",
  "itaque",
  "earum",
  "rerum",
  "hic",
  "tenetur",
  "a",
  "sapiente",
  "delectus",
  "ut",
  "aut",
  "reiciendis",
  "voluptatibus",
  "maiores",
  "doloribus",
  "asperiores",
  "repellat"
];

},{}],"node_modules/faker/lib/locales/tr/lorem/index.js":[function(require,module,exports) {
var lorem = {};
module['exports'] = lorem;
lorem.words = require("./words");

},{"./words":"node_modules/faker/lib/locales/tr/lorem/words.js"}],"node_modules/faker/lib/locales/tr/phone_number/area_code.js":[function(require,module,exports) {
module["exports"] = [
  "392",
  "510",
  "512",
  "522",
  "562",
  "564",
  "592",
  "594",
  "800",
  "811",
  "822",
  "850",
  "888",
  "898",
  "900",
  "322",
  "416",
  "272",
  "472",
  "382",
  "358",
  "312",
  "242",
  "478",
  "466",
  "256",
  "266",
  "378",
  "488",
  "458",
  "228",
  "426",
  "434",
  "374",
  "248",
  "224",
  "286",
  "376",
  "364",
  "258",
  "412",
  "380",
  "284",
  "424",
  "446",
  "442",
  "222",
  "342",
  "454",
  "456",
  "438",
  "326",
  "476",
  "246",
  "216",
  "212",
  "232",
  "344",
  "370",
  "338",
  "474",
  "366",
  "352",
  "318",
  "288",
  "386",
  "348",
  "262",
  "332",
  "274",
  "422",
  "236",
  "482",
  "324",
  "252",
  "436",
  "384",
  "388",
  "452",
  "328",
  "464",
  "264",
  "362",
  "484",
  "368",
  "346",
  "414",
  "486",
  "282",
  "356",
  "462",
  "428",
  "276",
  "432",
  "226",
  "354",
  "372"
];

},{}],"node_modules/faker/lib/locales/tr/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "+90-###-###-##-##",
  "+90-###-###-#-###"
];

},{}],"node_modules/faker/lib/locales/tr/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.area_code = require("./area_code");
phone_number.formats = require("./formats");

},{"./area_code":"node_modules/faker/lib/locales/tr/phone_number/area_code.js","./formats":"node_modules/faker/lib/locales/tr/phone_number/formats.js"}],"node_modules/faker/lib/locales/tr/cell_phone/formats.js":[function(require,module,exports) {
module["exports"] = [
  "+90-53#-###-##-##",
  "+90-54#-###-##-##",
  "+90-55#-###-##-##",
  "+90-50#-###-##-##"
];

},{}],"node_modules/faker/lib/locales/tr/cell_phone/index.js":[function(require,module,exports) {
var cell_phone = {};
module['exports'] = cell_phone;
cell_phone.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/tr/cell_phone/formats.js"}],"node_modules/faker/lib/locales/tr/name/first_name.js":[function(require,module,exports) {
module["exports"] = [
  "Aba",
  "Abak",
  "Abaka",
  "Abakan",
  "Abakay",
  "Abar",
  "Abay",
  "Abı",
  "Abılay",
  "Abluç",
  "Abşar",
  "Açığ",
  "Açık",
  "Açuk",
  "Adalan",
  "Adaldı",
  "Adalmış",
  "Adar",
  "Adaş",
  "Adberilgen",
  "Adıgüzel",
  "Adık",
  "Adıkutlu",
  "Adıkutlutaş",
  "Adlı",
  "Adlıbeğ",
  "Adraman",
  "Adsız",
  "Afşar",
  "Afşın",
  "Ağabay",
  "Ağakağan",
  "Ağalak",
  "Ağlamış",
  "Ak",
  "Akaş",
  "Akata",
  "Akbaş",
  "Akbay",
  "Akboğa",
  "Akbörü",
  "Akbudak",
  "Akbuğra",
  "Akbulak",
  "Akça",
  "Akçakoca",
  "Akçora",
  "Akdemir",
  "Akdoğan",
  "Akı",
  "Akıbudak",
  "Akım",
  "Akın",
  "Akınçı",
  "Akkun",
  "Akkunlu",
  "Akkurt",
  "Akkuş",
  "Akpıra",
  "Aksungur",
  "Aktan",
  "Al",
  "Ala",
  "Alaban",
  "Alabörü",
  "Aladağ",
  "Aladoğan",
  "Alakurt",
  "Alayunt",
  "Alayuntlu",
  "Aldemir",
  "Aldıgerey",
  "Aldoğan",
  "Algu",
  "Alımga",
  "Alka",
  "Alkabölük",
  "Alkaevli",
  "Alkan",
  "Alkaşı",
  "Alkış",
  "Alp",
  "Alpagut",
  "Alpamış",
  "Alparsbeğ",
  "Alparslan",
  "Alpata",
  "Alpay",
  "Alpaya",
  "Alpaykağan",
  "Alpbamsı",
  "Alpbilge",
  "Alpdirek",
  "Alpdoğan",
  "Alper",
  "Alperen",
  "Alpertunga",
  "Alpgerey",
  "Alpış",
  "Alpilig",
  "Alpkara",
  "Alpkutlu",
  "Alpkülük",
  "Alpşalçı",
  "Alptegin",
  "Alptuğrul",
  "Alptunga",
  "Alpturan",
  "Alptutuk",
  "Alpuluğ",
  "Alpurungu",
  "Alpurungututuk",
  "Alpyörük",
  "Altan",
  "Altankağan",
  "Altankan",
  "Altay",
  "Altın",
  "Altınkağan",
  "Altınkan",
  "Altınoba",
  "Altıntamgan",
  "Altıntamgantarkan",
  "Altıntarkan",
  "Altıntay",
  "Altmışkara",
  "Altuga",
  "Amaç",
  "Amrak",
  "Amul",
  "Ançuk",
  "Andarıman",
  "Anıl",
  "Ant",
  "Apa",
  "Apak",
  "Apatarkan",
  "Aprançur",
  "Araboğa",
  "Arademir",
  "Aral",
  "Arbay",
  "Arbuz",
  "Arçuk",
  "Ardıç",
  "Argıl",
  "Argu",
  "Argun",
  "Arı",
  "Arıboğa",
  "Arık",
  "Arıkağan",
  "Arıkdoruk",
  "Arınç",
  "Arkın",
  "Arkış",
  "Armağan",
  "Arnaç",
  "Arpat",
  "Arsal",
  "Arsıl",
  "Arslan",
  "Arslanargun",
  "Arslanbörü",
  "Arslansungur",
  "Arslantegin",
  "Arslanyabgu",
  "Arşun",
  "Artıınal",
  "Artuk",
  "Artukaç",
  "Artut",
  "Aruk",
  "Asartegin",
  "Asığ",
  "Asrı",
  "Asuğ",
  "Aşan",
  "Aşanboğa",
  "Aşantuğrul",
  "Aşantudun",
  "Aşıkbulmuş",
  "Aşkın",
  "Aştaloğul",
  "Aşuk",
  "Ataç",
  "Atakağan",
  "Atakan",
  "Atalan",
  "Ataldı",
  "Atalmış",
  "Ataman",
  "Atasagun",
  "Atasu",
  "Atberilgen",
  "Atıgay",
  "Atıkutlu",
  "Atıkutlutaş",
  "Atıla",
  "Atılgan",
  "Atım",
  "Atımer",
  "Atış",
  "Atlı",
  "Atlıbeğ",
  "Atlıkağan",
  "Atmaca",
  "Atsız",
  "Atunçu",
  "Avar",
  "Avluç",
  "Avşar",
  "Ay",
  "Ayaçı",
  "Ayas",
  "Ayaş",
  "Ayaz",
  "Aybalta",
  "Ayban",
  "Aybars",
  "Aybeğ",
  "Aydarkağan",
  "Aydemir",
  "Aydın",
  "Aydınalp",
  "Aydoğan",
  "Aydoğdu",
  "Aydoğmuş",
  "Aygırak",
  "Ayıtmış",
  "Ayız",
  "Ayızdağ",
  "Aykağan",
  "Aykan",
  "Aykurt",
  "Ayluç",
  "Ayluçtarkan",
  "Ayma",
  "Ayruk",
  "Aysılığ",
  "Aytak",
  "Ayyıldız",
  "Azak",
  "Azban",
  "Azgan",
  "Azganaz",
  "Azıl",
  "Babır",
  "Babur",
  "Baçara",
  "Baççayman",
  "Baçman",
  "Badabul",
  "Badruk",
  "Badur",
  "Bağa",
  "Bağaalp",
  "Bağaışbara",
  "Bağan",
  "Bağaşatulu",
  "Bağatarkan",
  "Bağatengrikağan",
  "Bağatur",
  "Bağaturçigşi",
  "Bağaturgerey",
  "Bağaturipi",
  "Bağatursepi",
  "Bağış",
  "Bağtaş",
  "Bakağul",
  "Bakır",
  "Bakırsokum",
  "Baksı",
  "Bakşı",
  "Balaban",
  "Balaka",
  "Balakatay",
  "Balamır",
  "Balçar",
  "Baldu",
  "Balkık",
  "Balta",
  "Baltacı",
  "Baltar",
  "Baltır",
  "Baltur",
  "Bamsı",
  "Bangu",
  "Barak",
  "Baraktöre",
  "Baran",
  "Barbeğ",
  "Barboğa",
  "Barbol",
  "Barbulsun",
  "Barça",
  "Barçadoğdu",
  "Barçadoğmuş",
  "Barçadurdu",
  "Barçadurmuş",
  "Barçan",
  "Barçatoyun",
  "Bardıbay",
  "Bargan",
  "Barımtay",
  "Barın",
  "Barkan",
  "Barkdoğdu",
  "Barkdoğmuş",
  "Barkdurdu",
  "Barkdurmuş",
  "Barkın",
  "Barlas",
  "Barlıbay",
  "Barmaklak",
  "Barmaklı",
  "Barman",
  "Bars",
  "Barsbeğ",
  "Barsboğa",
  "Barsgan",
  "Barskan",
  "Barsurungu",
  "Bartu",
  "Basademir",
  "Basan",
  "Basanyalavaç",
  "Basar",
  "Basat",
  "Baskın",
  "Basmıl",
  "Bastı",
  "Bastuğrul",
  "Basu",
  "Basut",
  "Başak",
  "Başbuğ",
  "Başçı",
  "Başgan",
  "Başkırt",
  "Başkurt",
  "Baştar",
  "Batrak",
  "Batu",
  "Batuk",
  "Batur",
  "Baturalp",
  "Bay",
  "Bayançar",
  "Bayankağan",
  "Bayat",
  "Bayazıt",
  "Baybars",
  "Baybayık",
  "Baybiçen",
  "Bayboğa",
  "Baybora",
  "Baybüre",
  "Baydar",
  "Baydemir",
  "Baydur",
  "Bayık",
  "Bayınçur",
  "Bayındır",
  "Baykal",
  "Baykara",
  "Baykoca",
  "Baykuzu",
  "Baymünke",
  "Bayna",
  "Baynal",
  "Baypüre",
  "Bayrı",
  "Bayraç",
  "Bayrak",
  "Bayram",
  "Bayrın",
  "Bayruk",
  "Baysungur",
  "Baytara",
  "Baytaş",
  "Bayunçur",
  "Bayur",
  "Bayurku",
  "Bayutmuş",
  "Bayuttu",
  "Bazır",
  "Beçeapa",
  "Beçkem",
  "Beğ",
  "Beğarslan",
  "Beğbars",
  "Beğbilgeçikşin",
  "Beğboğa",
  "Beğçur",
  "Beğdemir",
  "Beğdilli",
  "Beğdurmuş",
  "Beğkulu",
  "Beğtaş",
  "Beğtegin",
  "Beğtüzün",
  "Begi",
  "Begil",
  "Begine",
  "Begitutuk",
  "Beglen",
  "Begni",
  "Bek",
  "Bekazıl",
  "Bekbekeç",
  "Bekeç",
  "Bekeçarslan",
  "Bekeçarslantegin",
  "Bekeçtegin",
  "Beker",
  "Beklemiş",
  "Bektür",
  "Belçir",
  "Belek",
  "Belgi",
  "Belgüc",
  "Beltir",
  "Bengi",
  "Bengü",
  "Benlidemir",
  "Berdibeğ",
  "Berendey",
  "Bergü",
  "Berginsenge",
  "Berk",
  "Berke",
  "Berkiş",
  "Berkyaruk",
  "Bermek",
  "Besentegin",
  "Betemir",
  "Beyizçi",
  "Beyrek",
  "Beyrem",
  "Bıçkı",
  "Bıçkıcı",
  "Bıdın",
  "Bıtaybıkı",
  "Bıtrı",
  "Biçek",
  "Bilge",
  "Bilgebayunçur",
  "Bilgebeğ",
  "Bilgeçikşin",
  "Bilgeışbara",
  "Bilgeışbaratamgan",
  "Bilgekağan",
  "Bilgekan",
  "Bilgekutluk",
  "Bilgekülüçur",
  "Bilgetaçam",
  "Bilgetamgacı",
  "Bilgetardu",
  "Bilgetegin",
  "Bilgetonyukuk",
  "Bilgez",
  "Bilgiç",
  "Bilgin",
  "Bilig",
  "Biligköngülsengün",
  "Bilik",
  "Binbeği",
  "Bindir",
  "Boğa",
  "Boğaç",
  "Boğaçuk",
  "Boldaz",
  "Bolmuş",
  "Bolsun",
  "Bolun",
  "Boncuk",
  "Bongul",
  "Bongulboğa",
  "Bora",
  "Boran",
  "Borçul",
  "Borlukçu",
  "Bornak",
  "Boyan",
  "Boyankulu",
  "Boylabağa",
  "Boylabağatarkan",
  "Boylakutlutarkan",
  "Bozan",
  "Bozbörü",
  "Bozdoğan",
  "Bozkurt",
  "Bozkuş",
  "Bozok",
  "Bögde",
  "Böge",
  "Bögü",
  "Bökde",
  "Bökde",
  "Böke",
  "Bölen",
  "Bölükbaşı",
  "Bönek",
  "Bönge",
  "Börü",
  "Börübars",
  "Börüsengün",
  "Börteçine",
  "Buçan",
  "Buçur",
  "Budağ",
  "Budak",
  "Budunlu",
  "Buğday",
  "Buğra",
  "Buğrakarakağan",
  "Bukak",
  "Bukaktutuk",
  "Bulaçapan",
  "Bulak",
  "Bulan",
  "Buldur",
  "Bulgak",
  "Bulmaz",
  "Bulmuş",
  "Buluç",
  "Buluğ",
  "Buluk",
  "Buluş",
  "Bulut",
  "Bumın",
  "Bunsuz",
  "Burçak",
  "Burguçan",
  "Burkay",
  "Burslan",
  "Burulday",
  "Burulgu",
  "Burunduk",
  "Buşulgan",
  "Butak",
  "Butuk",
  "Buyan",
  "Buyançuk",
  "Buyandemir",
  "Buyankara",
  "Buyat",
  "Buyraç",
  "Buyruç",
  "Buyruk",
  "Buzaç",
  "Buzaçtutuk",
  "Büdüs",
  "Büdüstudun",
  "Bügü",
  "Bügdüz",
  "Bügdüzemen",
  "Büge",
  "Büğübilge",
  "Bükdüz",
  "Büke",
  "Bükebuyraç",
  "Bükebuyruç",
  "Bükey",
  "Büktegin",
  "Büküşboğa",
  "Bümen",
  "Bünül",
  "Büre",
  "Bürgüt",
  "Bürkek",
  "Bürküt",
  "Bürlük",
  "Cebe",
  "Ceyhun",
  "Cılasun",
  "Çaba",
  "Çabdar",
  "Çablı",
  "Çabuş",
  "Çağan",
  "Çağatay",
  "Çağlar",
  "Çağlayan",
  "Çağrı",
  "Çağrıbeğ",
  "Çağrıtegin",
  "Çağru",
  "Çalapkulu",
  "Çankız",
  "Çemen",
  "Çemgen",
  "Çeykün",
  "Çıngır",
  "Çiçek",
  "Çiçem",
  "Çiğdem",
  "Çilenti",
  "Çimen",
  "Çobulmak",
  "Çocukbörü",
  "Çokramayul",
  "Çolman",
  "Çolpan",
  "Çölü",
  "Damla",
  "Deniz",
  "Dilek",
  "Diri",
  "Dizik",
  "Duru",
  "Dururbunsuz",
  "Duygu",
  "Ebin",
  "Ebkızı",
  "Ebren",
  "Edil",
  "Ediz",
  "Egemen",
  "Eğrim",
  "Ekeç",
  "Ekim",
  "Ekin",
  "Elkin",
  "Elti",
  "Engin",
  "Erdem",
  "Erdeni",
  "Erdeniözük",
  "Erdenikatun",
  "Erentüz",
  "Ergene",
  "Ergenekatun",
  "Erinç",
  "Erke",
  "Ermen",
  "Erten",
  "Ertenözük",
  "Esen",
  "Esenbike",
  "Eser",
  "Esin",
  "Etil",
  "Evin",
  "Eyiz",
  "Gelin",
  "Gelincik",
  "Gökbörü",
  "Gökçe",
  "Gökçegöl",
  "Gökçen",
  "Gökçiçek",
  "Gökşin",
  "Gönül",
  "Görün",
  "Gözde",
  "Gülegen",
  "Gülemen",
  "Güler",
  "Gülümser",
  "Gümüş",
  "Gün",
  "Günay",
  "Günçiçek",
  "Gündoğdu",
  "Gündoğmuş",
  "Güneş",
  "Günyaruk",
  "Gürbüz",
  "Güvercin",
  "Güzey",
  "Işığ",
  "Işık",
  "Işıl",
  "Işılay",
  "Ila",
  "Ilaçın",
  "Ilgın",
  "Inanç",
  "Irmak",
  "Isığ",
  "Isık",
  "Iyık",
  "Iyıktağ",
  "İdil",
  "İkeme",
  "İkiçitoyun",
  "İlbilge",
  "İldike",
  "İlgegü",
  "İmrem",
  "İnci",
  "İnç",
  "İrinç",
  "İrinçköl",
  "İrtiş",
  "İtil",
  "Kancı",
  "Kançı",
  "Kapgar",
  "Karaca",
  "Karaça",
  "Karak",
  "Kargılaç",
  "Karlıgaç",
  "Katun",
  "Katunkız",
  "Kayacık",
  "Kayaçık",
  "Kayça",
  "Kaynak",
  "Kazanç",
  "Kazkatun",
  "Kekik",
  "Keklik",
  "Kepez",
  "Kesme",
  "Keyken",
  "Kezlik",
  "Kımız",
  "Kımızın",
  "Kımızalma",
  "Kımızalmıla",
  "Kırçiçek",
  "Kırgavul",
  "Kırlangıç",
  "Kıvanç",
  "Kıvılcım",
  "Kızdurmuş",
  "Kızılalma"
];

},{}],"node_modules/faker/lib/locales/tr/name/last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Abacı",
  "Abadan",
  "Aclan",
  "Adal",
  "Adan",
  "Adıvar",
  "Akal",
  "Akan",
  "Akar ",
  "Akay",
  "Akaydın",
  "Akbulut",
  "Akgül",
  "Akışık",
  "Akman",
  "Akyürek",
  "Akyüz",
  "Akşit",
  "Alnıaçık",
  "Alpuğan",
  "Alyanak",
  "Arıcan",
  "Arslanoğlu",
  "Atakol",
  "Atan",
  "Avan",
  "Ayaydın",
  "Aybar",
  "Aydan",
  "Aykaç",
  "Ayverdi",
  "Ağaoğlu",
  "Aşıkoğlu",
  "Babacan",
  "Babaoğlu",
  "Bademci",
  "Bakırcıoğlu",
  "Balaban",
  "Balcı",
  "Barbarosoğlu",
  "Baturalp",
  "Baykam",
  "Başoğlu",
  "Berberoğlu",
  "Beşerler",
  "Beşok",
  "Biçer",
  "Bolatlı",
  "Dalkıran",
  "Dağdaş",
  "Dağlaroğlu",
  "Demirbaş",
  "Demirel",
  "Denkel",
  "Dizdar ",
  "Doğan ",
  "Durak ",
  "Durmaz",
  "Duygulu",
  "Düşenkalkar",
  "Egeli",
  "Ekici",
  "Ekşioğlu",
  "Eliçin",
  "Elmastaşoğlu",
  "Elçiboğa",
  "Erbay",
  "Erberk",
  "Erbulak",
  "Erdoğan",
  "Erez",
  "Erginsoy",
  "Erkekli",
  "Eronat",
  "Ertepınar",
  "Ertürk",
  "Erçetin",
  "Evliyaoğlu",
  "Gönültaş",
  "Gümüşpala",
  "Günday",
  "Gürmen",
  "Hakyemez",
  "Hamzaoğlu",
  "Ilıcalı",
  "Kahveci",
  "Kaplangı",
  "Karabulut",
  "Karaböcek",
  "Karadaş",
  "Karaduman",
  "Karaer",
  "Kasapoğlu",
  "Kavaklıoğlu",
  "Kaya ",
  "Keseroğlu",
  "Keçeci",
  "Kılıççı",
  "Kıraç ",
  "Kocabıyık",
  "Korol",
  "Koyuncu",
  "Koç",
  "Koçoğlu",
  "Koçyiğit",
  "Kuday",
  "Kulaksızoğlu",
  "Kumcuoğlu",
  "Kunt",
  "Kunter",
  "Kurutluoğlu",
  "Kutlay",
  "Kuzucu",
  "Körmükçü",
  "Köybaşı",
  "Köylüoğlu",
  "Küçükler",
  "Limoncuoğlu",
  "Mayhoş",
  "Menemencioğlu",
  "Mertoğlu",
  "Nalbantoğlu",
  "Nebioğlu",
  "Numanoğlu",
  "Okumuş",
  "Okur",
  "Oraloğlu",
  "Orbay",
  "Ozansoy",
  "Paksüt",
  "Pekkan",
  "Pektemek",
  "Polat",
  "Poyrazoğlu",
  "Poçan",
  "Sadıklar",
  "Samancı",
  "Sandalcı",
  "Sarıoğlu",
  "Saygıner",
  "Sepetçi",
  "Sezek",
  "Sinanoğlu",
  "Solmaz",
  "Sözeri",
  "Süleymanoğlu",
  "Tahincioğlu",
  "Tanrıkulu",
  "Tazegül",
  "Taşlı",
  "Taşçı",
  "Tekand",
  "Tekelioğlu",
  "Tokatlıoğlu",
  "Tokgöz",
  "Topaloğlu",
  "Topçuoğlu",
  "Toraman",
  "Tunaboylu",
  "Tunçeri",
  "Tuğlu",
  "Tuğluk",
  "Türkdoğan",
  "Türkyılmaz",
  "Tütüncü",
  "Tüzün",
  "Uca",
  "Uluhan",
  "Velioğlu",
  "Yalçın",
  "Yazıcı",
  "Yetkiner",
  "Yeşilkaya",
  "Yıldırım ",
  "Yıldızoğlu",
  "Yılmazer",
  "Yorulmaz",
  "Çamdalı",
  "Çapanoğlu",
  "Çatalbaş",
  "Çağıran",
  "Çetin",
  "Çetiner",
  "Çevik",
  "Çörekçi",
  "Önür",
  "Örge",
  "Öymen",
  "Özberk",
  "Özbey",
  "Özbir",
  "Özdenak",
  "Özdoğan",
  "Özgörkey",
  "Özkara",
  "Özkök ",
  "Öztonga",
  "Öztuna"
];

},{}],"node_modules/faker/lib/locales/tr/name/prefix.js":[function(require,module,exports) {
module["exports"] = [
  "Bay",
  "Bayan",
  "Dr.",
  "Prof. Dr."
];

},{}],"node_modules/faker/lib/locales/tr/name/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{prefix} #{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name}"
];

},{}],"node_modules/faker/lib/locales/tr/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");
name.prefix = require("./prefix");
name.name = require("./name");

},{"./first_name":"node_modules/faker/lib/locales/tr/name/first_name.js","./last_name":"node_modules/faker/lib/locales/tr/name/last_name.js","./prefix":"node_modules/faker/lib/locales/tr/name/prefix.js","./name":"node_modules/faker/lib/locales/tr/name/name.js"}],"node_modules/faker/lib/locales/tr/index.js":[function(require,module,exports) {
var tr = {};
module['exports'] = tr;
tr.title = "Turkish";
tr.address = require("./address");
tr.internet = require("./internet");
tr.lorem = require("./lorem");
tr.phone_number = require("./phone_number");
tr.cell_phone = require("./cell_phone");
tr.name = require("./name");

},{"./address":"node_modules/faker/lib/locales/tr/address/index.js","./internet":"node_modules/faker/lib/locales/tr/internet/index.js","./lorem":"node_modules/faker/lib/locales/tr/lorem/index.js","./phone_number":"node_modules/faker/lib/locales/tr/phone_number/index.js","./cell_phone":"node_modules/faker/lib/locales/tr/cell_phone/index.js","./name":"node_modules/faker/lib/locales/tr/name/index.js"}],"node_modules/faker/lib/locales/uk/address/country.js":[function(require,module,exports) {
module["exports"] = [
  "Австралія",
  "Австрія",
  "Азербайджан",
  "Албанія",
  "Алжир",
  "Ангола",
  "Андорра",
  "Антигуа і Барбуда",
  "Аргентина",
  "Афганістан",
  "Багамські Острови",
  "Бангладеш",
  "Барбадос",
  "Бахрейн",
  "Беліз",
  "Бельгія",
  "Бенін",
  "Білорусь",
  "Болгарія",
  "Болівія",
  "Боснія і Герцеговина",
  "Ботсвана",
  "Бразилія",
  "Бруней",
  "Буркіна-Фасо",
  "Бурунді",
  "Бутан",
  "В’єтнам",
  "Вануату",
  "Ватикан",
  "Велика Британія",
  "Венесуела",
  "Вірменія",
  "Габон",
  "Гаїті",
  "Гайана",
  "Гамбія",
  "Гана",
  "Гватемала",
  "Гвінея",
  "Гвінея-Бісау",
  "Гондурас",
  "Гренада",
  "Греція",
  "Грузія",
  "Данія",
  "Демократична Республіка Конго",
  "Джибуті",
  "Домініка",
  "Домініканська Республіка",
  "Еквадор",
  "Екваторіальна Гвінея",
  "Еритрея",
  "Естонія",
  "Ефіопія",
  "Єгипет",
  "Ємен",
  "Замбія",
  "Зімбабве",
  "Ізраїль",
  "Індія",
  "Індонезія",
  "Ірак",
  "Іран",
  "Ірландія",
  "Ісландія",
  "Іспанія",
  "Італія",
  "Йорданія",
  "Кабо-Верде",
  "Казахстан",
  "Камбоджа",
  "Камерун",
  "Канада",
  "Катар",
  "Кенія",
  "Киргизстан",
  "Китай",
  "Кіпр",
  "Кірибаті",
  "Колумбія",
  "Коморські Острови",
  "Конго",
  "Коста-Рика",
  "Кот-д’Івуар",
  "Куба",
  "Кувейт",
  "Лаос",
  "Латвія",
  "Лесото",
  "Литва",
  "Ліберія",
  "Ліван",
  "Лівія",
  "Ліхтенштейн",
  "Люксембург",
  "Маврикій",
  "Мавританія",
  "Мадаґаскар",
  "Македонія",
  "Малаві",
  "Малайзія",
  "Малі",
  "Мальдіви",
  "Мальта",
  "Марокко",
  "Маршаллові Острови",
  "Мексика",
  "Мозамбік",
  "Молдова",
  "Монако",
  "Монголія",
  "Намібія",
  "Науру",
  "Непал",
  "Нігер",
  "Нігерія",
  "Нідерланди",
  "Нікарагуа",
  "Німеччина",
  "Нова Зеландія",
  "Норвегія",
  "Об’єднані Арабські Емірати",
  "Оман",
  "Пакистан",
  "Палау",
  "Панама",
  "Папуа-Нова Гвінея",
  "Парагвай",
  "Перу",
  "Південна Корея",
  "Південний Судан",
  "Південно-Африканська Республіка",
  "Північна Корея",
  "Польща",
  "Португалія",
  "Російська Федерація",
  "Руанда",
  "Румунія",
  "Сальвадор",
  "Самоа",
  "Сан-Марино",
  "Сан-Томе і Принсіпі",
  "Саудівська Аравія",
  "Свазіленд",
  "Сейшельські Острови",
  "Сенеґал",
  "Сент-Вінсент і Гренадини",
  "Сент-Кітс і Невіс",
  "Сент-Люсія",
  "Сербія",
  "Сирія",
  "Сінгапур",
  "Словаччина",
  "Словенія",
  "Соломонові Острови",
  "Сомалі",
  "Судан",
  "Суринам",
  "Східний Тимор",
  "США",
  "Сьєрра-Леоне",
  "Таджикистан",
  "Таїланд",
  "Танзанія",
  "Того",
  "Тонга",
  "Тринідад і Тобаго",
  "Тувалу",
  "Туніс",
  "Туреччина",
  "Туркменістан",
  "Уганда",
  "Угорщина",
  "Узбекистан",
  "Україна",
  "Уругвай",
  "Федеративні Штати Мікронезії",
  "Фіджі",
  "Філіппіни",
  "Фінляндія",
  "Франція",
  "Хорватія",
  "Центральноафриканська Республіка",
  "Чад",
  "Чехія",
  "Чилі",
  "Чорногорія",
  "Швейцарія",
  "Швеція",
  "Шрі-Ланка",
  "Ямайка",
  "Японія"
];

},{}],"node_modules/faker/lib/locales/uk/address/building_number.js":[function(require,module,exports) {
module["exports"] = [
  "#",
  "##",
  "###"
];

},{}],"node_modules/faker/lib/locales/uk/address/street_prefix.js":[function(require,module,exports) {
module["exports"] = [
  "вул.",
  "вулиця",
  "пр.",
  "проспект",
  "пл.",
  "площа",
  "пров.",
  "провулок"
];

},{}],"node_modules/faker/lib/locales/uk/address/street_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "майдан"
];

},{}],"node_modules/faker/lib/locales/uk/address/secondary_address.js":[function(require,module,exports) {
module["exports"] = [
  "кв. ###"
];

},{}],"node_modules/faker/lib/locales/uk/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "#####"
];

},{}],"node_modules/faker/lib/locales/uk/address/state.js":[function(require,module,exports) {
module["exports"] = [
  "АР Крим",
  "Вінницька область",
  "Волинська область",
  "Дніпропетровська область",
  "Донецька область",
  "Житомирська область",
  "Закарпатська область",
  "Запорізька область",
  "Івано-Франківська область",
  "Київська область",
  "Кіровоградська область",
  "Луганська область",
  "Львівська область",
  "Миколаївська область",
  "Одеська область",
  "Полтавська область",
  "Рівненська область",
  "Сумська область",
  "Тернопільська область",
  "Харківська область",
  "Херсонська область",
  "Хмельницька область",
  "Черкаська область",
  "Чернівецька область",
  "Чернігівська область",
  "Київ",
  "Севастополь"
];

},{}],"node_modules/faker/lib/locales/uk/address/street_title.js":[function(require,module,exports) {
module["exports"] = [
  "Зелена",
  "Молодіжна",
  "Городоцька",
  "Стрийська",
  "Вузька",
  "Нижанківського",
  "Староміська",
  "Ліста",
  "Вічева",
  "Брюховичів",
  "Винників",
  "Рудного",
  "Коліївщини"
];

},{}],"node_modules/faker/lib/locales/uk/address/city_name.js":[function(require,module,exports) {
module["exports"] = [
  "Алчевськ",
  "Артемівськ",
  "Бердичів",
  "Бердянськ",
  "Біла Церква",
  "Бровари",
  "Вінниця",
  "Горлівка",
  "Дніпродзержинськ",
  "Дніпропетровськ",
  "Донецьк",
  "Євпаторія",
  "Єнакієве",
  "Житомир",
  "Запоріжжя",
  "Івано-Франківськ",
  "Ізмаїл",
  "Кам’янець-Подільський",
  "Керч",
  "Київ",
  "Кіровоград",
  "Конотоп",
  "Краматорськ",
  "Красний Луч",
  "Кременчук",
  "Кривий Ріг",
  "Лисичанськ",
  "Луганськ",
  "Луцьк",
  "Львів",
  "Макіївка",
  "Маріуполь",
  "Мелітополь",
  "Миколаїв",
  "Мукачеве",
  "Нікополь",
  "Одеса",
  "Олександрія",
  "Павлоград",
  "Полтава",
  "Рівне",
  "Севастополь",
  "Сєвєродонецьк",
  "Сімферополь",
  "Слов’янськ",
  "Суми",
  "Тернопіль",
  "Ужгород",
  "Умань",
  "Харків",
  "Херсон",
  "Хмельницький",
  "Черкаси",
  "Чернівці",
  "Чернігів",
  "Шостка",
  "Ялта"
];

},{}],"node_modules/faker/lib/locales/uk/address/city.js":[function(require,module,exports) {
module["exports"] = [
  "#{city_name}",
  "#{city_prefix} #{Name.male_first_name}"
];

},{}],"node_modules/faker/lib/locales/uk/address/city_prefix.js":[function(require,module,exports) {
module["exports"] = [
  "Південний",
  "Північний",
  "Східний",
  "Західний"
];

},{}],"node_modules/faker/lib/locales/uk/address/city_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "град"
];

},{}],"node_modules/faker/lib/locales/uk/address/street_name.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_prefix} #{Address.street_title}",
  "#{Address.street_title} #{street_suffix}"
];

},{}],"node_modules/faker/lib/locales/uk/address/street_address.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_name}, #{building_number}"
];

},{}],"node_modules/faker/lib/locales/uk/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "Україна"
];

},{}],"node_modules/faker/lib/locales/uk/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.country = require("./country");
address.building_number = require("./building_number");
address.street_prefix = require("./street_prefix");
address.street_suffix = require("./street_suffix");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.state = require("./state");
address.street_title = require("./street_title");
address.city_name = require("./city_name");
address.city = require("./city");
address.city_prefix = require("./city_prefix");
address.city_suffix = require("./city_suffix");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./country":"node_modules/faker/lib/locales/uk/address/country.js","./building_number":"node_modules/faker/lib/locales/uk/address/building_number.js","./street_prefix":"node_modules/faker/lib/locales/uk/address/street_prefix.js","./street_suffix":"node_modules/faker/lib/locales/uk/address/street_suffix.js","./secondary_address":"node_modules/faker/lib/locales/uk/address/secondary_address.js","./postcode":"node_modules/faker/lib/locales/uk/address/postcode.js","./state":"node_modules/faker/lib/locales/uk/address/state.js","./street_title":"node_modules/faker/lib/locales/uk/address/street_title.js","./city_name":"node_modules/faker/lib/locales/uk/address/city_name.js","./city":"node_modules/faker/lib/locales/uk/address/city.js","./city_prefix":"node_modules/faker/lib/locales/uk/address/city_prefix.js","./city_suffix":"node_modules/faker/lib/locales/uk/address/city_suffix.js","./street_name":"node_modules/faker/lib/locales/uk/address/street_name.js","./street_address":"node_modules/faker/lib/locales/uk/address/street_address.js","./default_country":"node_modules/faker/lib/locales/uk/address/default_country.js"}],"node_modules/faker/lib/locales/uk/company/prefix.js":[function(require,module,exports) {
module["exports"] = [
  "ТОВ",
  "ПАТ",
  "ПрАТ",
  "ТДВ",
  "КТ",
  "ПТ",
  "ДП",
  "ФОП"
];

},{}],"node_modules/faker/lib/locales/uk/company/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "Постач",
  "Торг",
  "Пром",
  "Трейд",
  "Збут"
];

},{}],"node_modules/faker/lib/locales/uk/company/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{prefix} #{Name.female_first_name}",
  "#{prefix} #{Name.male_first_name}",
  "#{prefix} #{Name.male_last_name}",
  "#{prefix} #{suffix}#{suffix}",
  "#{prefix} #{suffix}#{suffix}#{suffix}",
  "#{prefix} #{Address.city_name}#{suffix}",
  "#{prefix} #{Address.city_name}#{suffix}#{suffix}",
  "#{prefix} #{Address.city_name}#{suffix}#{suffix}#{suffix}"
];

},{}],"node_modules/faker/lib/locales/uk/company/index.js":[function(require,module,exports) {
var company = {};
module['exports'] = company;
company.prefix = require("./prefix");
company.suffix = require("./suffix");
company.name = require("./name");

},{"./prefix":"node_modules/faker/lib/locales/uk/company/prefix.js","./suffix":"node_modules/faker/lib/locales/uk/company/suffix.js","./name":"node_modules/faker/lib/locales/uk/company/name.js"}],"node_modules/faker/lib/locales/uk/internet/free_email.js":[function(require,module,exports) {
module["exports"] = [
  "ukr.net",
  "ex.ua",
  "e-mail.ua",
  "i.ua",
  "meta.ua",
  "yandex.ua",
  "gmail.com"
];

},{}],"node_modules/faker/lib/locales/uk/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "cherkassy.ua",
  "cherkasy.ua",
  "ck.ua",
  "cn.ua",
  "com.ua",
  "crimea.ua",
  "cv.ua",
  "dn.ua",
  "dnepropetrovsk.ua",
  "dnipropetrovsk.ua",
  "donetsk.ua",
  "dp.ua",
  "if.ua",
  "in.ua",
  "ivano-frankivsk.ua",
  "kh.ua",
  "kharkiv.ua",
  "kharkov.ua",
  "kherson.ua",
  "khmelnitskiy.ua",
  "kiev.ua",
  "kirovograd.ua",
  "km.ua",
  "kr.ua",
  "ks.ua",
  "lg.ua",
  "lt.ua",
  "lugansk.ua",
  "lutsk.ua",
  "lutsk.net",
  "lviv.ua",
  "mk.ua",
  "net.ua",
  "nikolaev.ua",
  "od.ua",
  "odessa.ua",
  "org.ua",
  "pl.ua",
  "pl.ua",
  "poltava.ua",
  "rovno.ua",
  "rv.ua",
  "sebastopol.ua",
  "sm.ua",
  "sumy.ua",
  "te.ua",
  "ternopil.ua",
  "ua",
  "uz.ua",
  "uzhgorod.ua",
  "vinnica.ua",
  "vn.ua",
  "volyn.net",
  "volyn.ua",
  "yalta.ua",
  "zaporizhzhe.ua",
  "zhitomir.ua",
  "zp.ua",
  "zt.ua",
  "укр"
];

},{}],"node_modules/faker/lib/locales/uk/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.free_email = require("./free_email");
internet.domain_suffix = require("./domain_suffix");

},{"./free_email":"node_modules/faker/lib/locales/uk/internet/free_email.js","./domain_suffix":"node_modules/faker/lib/locales/uk/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/uk/name/male_first_name.js":[function(require,module,exports) {
module["exports"] = [
  "Августин",
  "Аврелій",
  "Адам",
  "Адріян",
  "Азарій",
  "Алевтин",
  "Альберт",
  "Анастас",
  "Анастасій",
  "Анатолій",
  "Андрій",
  "Антін",
  "Антон",
  "Антоній",
  "Аркадій",
  "Арсен",
  "Арсеній",
  "Артем",
  "Архип",
  "Аскольд",
  "Афанасій",
  "Біломир",
  "Білослав",
  "Богдан",
  "Божемир",
  "Божен",
  "Болеслав",
  "Боримир",
  "Боримисл",
  "Борис",
  "Борислав",
  "Братимир",
  "Братислав",
  "Братомил",
  "Братослав",
  "Брячислав",
  "Будимир",
  "Буйтур",
  "Буревіст",
  "В’ячеслав",
  "Вадим",
  "Валентин",
  "Валерій",
  "Василь",
  "Велемир",
  "Віктор",
  "Віталій",
  "Влад",
  "Владислав",
  "Володимир",
  "Володислав",
  "Всевлад",
  "Всеволод",
  "Всеслав",
  "Гаврило",
  "Гарнослав",
  "Геннадій",
  "Георгій",
  "Герасим",
  "Гліб",
  "Гнат",
  "Гордій",
  "Горимир",
  "Горислав",
  "Градимир",
  "Григорій",
  "Далемир",
  "Данило",
  "Дарій",
  "Даромир",
  "Денис",
  "Дмитро",
  "Добромир",
  "Добромисл",
  "Доброслав",
  "Євген",
  "Єремій",
  "Захар",
  "Захарій",
  "Зборислав",
  "Звенигор",
  "Звенимир",
  "Звенислав",
  "Земислав",
  "Зеновій",
  "Зиновій",
  "Злат",
  "Златомир",
  "Зоремир",
  "Зореслав",
  "Зорян",
  "Іван",
  "Ігор",
  "Ізяслав",
  "Ілля",
  "Кий",
  "Корнелій",
  "Корнилій",
  "Корнило",
  "Корній",
  "Костянтин",
  "Кузьма",
  "Лаврентій",
  "Лаврін",
  "Лад",
  "Ладислав",
  "Ладо",
  "Ладомир",
  "Левко",
  "Листвич",
  "Лук’ян",
  "Любодар",
  "Любозар",
  "Любомир",
  "Макар",
  "Максим",
  "Мар’ян",
  "Маркіян",
  "Марко",
  "Матвій",
  "Мечислав",
  "Микита",
  "Микола",
  "Мирон",
  "Мирослав",
  "Михайло",
  "Мстислав",
  "Мусій",
  "Назар",
  "Назарій",
  "Натан",
  "Немир",
  "Нестор",
  "Олег",
  "Олександр",
  "Олексій",
  "Олелько",
  "Олесь",
  "Омелян",
  "Орест",
  "Орхип",
  "Остап",
  "Охрім",
  "Павло",
  "Панас",
  "Пантелеймон",
  "Петро",
  "Пилип",
  "Подолян",
  "Потап",
  "Радим",
  "Радимир",
  "Ратибор",
  "Ратимир",
  "Родіон",
  "Родослав",
  "Роксолан",
  "Роман",
  "Ростислав",
  "Руслан",
  "Святополк",
  "Святослав",
  "Семибор",
  "Сергій",
  "Синьоок",
  "Славолюб",
  "Славомир",
  "Славута",
  "Сніжан",
  "Сологуб",
  "Станіслав",
  "Степан",
  "Стефаній",
  "Стожар",
  "Тарас",
  "Тиміш",
  "Тимофій",
  "Тихон",
  "Тур",
  "Устим",
  "Хвалимир",
  "Хорив",
  "Чорнота",
  "Щастислав",
  "Щек",
  "Юліан",
  "Юрій",
  "Юхим",
  "Ян",
  "Ярема",
  "Яровид",
  "Яромил",
  "Яромир",
  "Ярополк",
  "Ярослав"
];

},{}],"node_modules/faker/lib/locales/uk/name/male_middle_name.js":[function(require,module,exports) {
module["exports"] = [
  "Адамович",
  "Азарович",
  "Алевтинович",
  "Альбертович",
  "Анастасович",
  "Анатолійович",
  "Андрійович",
  "Антонович",
  "Аркадійович",
  "Арсенійович",
  "Арсенович",
  "Артемович",
  "Архипович",
  "Аскольдович",
  "Афанасійович",
  "Білославович",
  "Богданович",
  "Божемирович",
  "Боженович",
  "Болеславович",
  "Боримирович",
  "Борисович",
  "Бориславович",
  "Братиславович",
  "В’ячеславович",
  "Вадимович",
  "Валентинович",
  "Валерійович",
  "Васильович",
  "Вікторович",
  "Віталійович",
  "Владиславович",
  "Володимирович",
  "Всеволодович",
  "Всеславович",
  "Гаврилович",
  "Герасимович",
  "Георгійович",
  "Гнатович",
  "Гордійович",
  "Григорійович",
  "Данилович",
  "Даромирович",
  "Денисович",
  "Дмитрович",
  "Добромирович",
  "Доброславович",
  "Євгенович",
  "Захарович",
  "Захарійович",
  "Збориславович",
  "Звенимирович",
  "Звениславович",
  "Зеновійович",
  "Зиновійович",
  "Златомирович",
  "Зореславович",
  "Іванович",
  "Ігорович",
  "Ізяславович",
  "Корнелійович",
  "Корнилович",
  "Корнійович",
  "Костянтинович",
  "Лаврентійович",
  "Любомирович",
  "Макарович",
  "Максимович",
  "Маркович",
  "Маркіянович",
  "Матвійович",
  "Мечиславович",
  "Микитович",
  "Миколайович",
  "Миронович",
  "Мирославович",
  "Михайлович",
  "Мстиславович",
  "Назарович",
  "Назарійович",
  "Натанович",
  "Немирович",
  "Несторович",
  "Олегович",
  "Олександрович",
  "Олексійович",
  "Олелькович",
  "Омелянович",
  "Орестович",
  "Орхипович",
  "Остапович",
  "Охрімович",
  "Павлович",
  "Панасович",
  "Пантелеймонович",
  "Петрович",
  "Пилипович",
  "Радимирович",
  "Радимович",
  "Родіонович",
  "Романович",
  "Ростиславович",
  "Русланович",
  "Святославович",
  "Сергійович",
  "Славутович",
  "Станіславович",
  "Степанович",
  "Стефанович",
  "Тарасович",
  "Тимофійович",
  "Тихонович",
  "Устимович",
  "Юрійович",
  "Юхимович",
  "Ярославович"
];

},{}],"node_modules/faker/lib/locales/uk/name/male_last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Андрухович",
  "Бабух",
  "Балабан",
  "Балабух",
  "Балакун",
  "Балицький",
  "Бамбула",
  "Бандера",
  "Барановський",
  "Бачей",
  "Башук",
  "Бердник",
  "Білич",
  "Бондаренко",
  "Борецький",
  "Боровський",
  "Борочко",
  "Боярчук",
  "Брицький",
  "Бурмило",
  "Бутько",
  "Василин",
  "Василишин",
  "Васильківський",
  "Вергун",
  "Вередун",
  "Верещук",
  "Витребенько",
  "Вітряк",
  "Волощук",
  "Гайдук",
  "Гайовий",
  "Гайчук",
  "Галаєнко",
  "Галатей",
  "Галаціон",
  "Гаман",
  "Гамула",
  "Ганич",
  "Гарай",
  "Гарун",
  "Гладківський",
  "Гладух",
  "Глинський",
  "Гнатишин",
  "Гойко",
  "Головець",
  "Горбач",
  "Гордійчук",
  "Горовий",
  "Городоцький",
  "Гречко",
  "Григоришин",
  "Гриневецький",
  "Гриневський",
  "Гришко",
  "Громико",
  "Данилишин",
  "Данилко",
  "Демків",
  "Демчишин",
  "Дзюб’як",
  "Дзюба",
  "Дідух",
  "Дмитришин",
  "Дмитрук",
  "Довгалевський",
  "Дурдинець",
  "Євенко",
  "Євпак",
  "Ємець",
  "Єрмак",
  "Забіла",
  "Зварич",
  "Зінкевич",
  "Зленко",
  "Іванишин",
  "Іванів",
  "Іванців",
  "Калач",
  "Кандиба",
  "Карпух",
  "Каськів",
  "Кивач",
  "Коваленко",
  "Ковальський",
  "Коломієць",
  "Коман",
  "Компанієць",
  "Кононець",
  "Кордун",
  "Корецький",
  "Корнїйчук",
  "Коров’як",
  "Коцюбинський",
  "Кулинич",
  "Кульчицький",
  "Лагойда",
  "Лазірко",
  "Лановий",
  "Латаний",
  "Латанський",
  "Лахман",
  "Левадовський",
  "Ликович",
  "Линдик",
  "Ліхно",
  "Лобачевський",
  "Ломовий",
  "Луговий",
  "Луцький",
  "Луцьків",
  "Лученко",
  "Лучко",
  "Лютий",
  "Лящук",
  "Магера",
  "Мазайло",
  "Мазило",
  "Мазун",
  "Майборода",
  "Майстренко",
  "Маковецький",
  "Малкович",
  "Мамій",
  "Маринич",
  "Марієвський",
  "Марків",
  "Махно",
  "Миклашевський",
  "Миклухо",
  "Милославський",
  "Михайлюк",
  "Міняйло",
  "Могилевський",
  "Москаль",
  "Москалюк",
  "Мотрієнко",
  "Негода",
  "Ногачевський",
  "Опенько",
  "Осадко",
  "Павленко",
  "Павлишин",
  "Павлів",
  "Пагутяк",
  "Паламарчук",
  "Палій",
  "Паращук",
  "Пасічник",
  "Пендик",
  "Петик",
  "Петлюра",
  "Петренко",
  "Петрин",
  "Петришин",
  "Петрів",
  "Плаксій",
  "Погиба",
  "Поліщук",
  "Пономарів",
  "Поривай",
  "Поривайло",
  "Потебенько",
  "Потоцький",
  "Пригода",
  "Приймак",
  "Притула",
  "Прядун",
  "Розпутній",
  "Романишин",
  "Романів",
  "Ромей",
  "Роменець",
  "Ромочко",
  "Савицький",
  "Саєнко",
  "Свидригайло",
  "Семеночко",
  "Семещук",
  "Сердюк",
  "Силецький",
  "Сідлецький",
  "Сідляк",
  "Сірко",
  "Скиба",
  "Скоропадський",
  "Слободян",
  "Сосюра",
  "Сплюх",
  "Спотикач",
  "Стахів",
  "Степанець",
  "Стецьків",
  "Стигайло",
  "Сторожук",
  "Сторчак",
  "Стоян",
  "Сучак",
  "Сушко",
  "Тарасюк",
  "Тиндарей",
  "Ткаченко",
  "Третяк",
  "Троян",
  "Трублаєвський",
  "Трясило",
  "Трясун",
  "Уманець",
  "Унич",
  "Усич",
  "Федоришин",
  "Хитрово",
  "Цимбалістий",
  "Цушко",
  "Червоній",
  "Шамрило",
  "Шевченко",
  "Шестак",
  "Шиндарей",
  "Шиян",
  "Шкараба",
  "Шудрик",
  "Шумило",
  "Шупик",
  "Шухевич",
  "Щербак",
  "Юрчишин",
  "Юхно",
  "Ющик",
  "Ющук",
  "Яворівський",
  "Яловий",
  "Ялюк",
  "Янюк",
  "Ярмак",
  "Яцишин",
  "Яцьків",
  "Ящук"
];

},{}],"node_modules/faker/lib/locales/uk/name/female_first_name.js":[function(require,module,exports) {
module["exports"] = [
  "Аврелія",
  "Аврора",
  "Агапія",
  "Агата",
  "Агафія",
  "Агнеса",
  "Агнія",
  "Агрипина",
  "Ада",
  "Аделаїда",
  "Аделіна",
  "Адріана",
  "Азалія",
  "Алевтина",
  "Аліна",
  "Алла",
  "Альбіна",
  "Альвіна",
  "Анастасія",
  "Анастасія",
  "Анатолія",
  "Ангеліна",
  "Анжела",
  "Анна",
  "Антонида",
  "Антоніна",
  "Антонія",
  "Анфіса",
  "Аполлінарія",
  "Аполлонія",
  "Аркадія",
  "Артемія",
  "Афанасія",
  "Білослава",
  "Біляна",
  "Благовіста",
  "Богдана",
  "Богуслава",
  "Божена",
  "Болеслава",
  "Борислава",
  "Броніслава",
  "В’ячеслава",
  "Валентина",
  "Валерія",
  "Варвара",
  "Василина",
  "Вікторія",
  "Вілена",
  "Віленіна",
  "Віліна",
  "Віола",
  "Віолетта",
  "Віра",
  "Віргінія",
  "Віта",
  "Віталіна",
  "Влада",
  "Владислава",
  "Власта",
  "Всеслава",
  "Галина",
  "Ганна",
  "Гелена",
  "Далеслава",
  "Дана",
  "Дарина",
  "Дарислава",
  "Діана",
  "Діяна",
  "Добринка",
  "Добромила",
  "Добромира",
  "Добромисла",
  "Доброслава",
  "Долеслава",
  "Доляна",
  "Жанна",
  "Жозефіна",
  "Забава",
  "Звенислава",
  "Зінаїда",
  "Злата",
  "Зореслава",
  "Зорина",
  "Зоряна",
  "Зоя",
  "Іванна",
  "Ілона",
  "Інна",
  "Іннеса",
  "Ірина",
  "Ірма",
  "Калина",
  "Каріна",
  "Катерина",
  "Квітка",
  "Квітослава",
  "Клавдія",
  "Крентта",
  "Ксенія",
  "Купава",
  "Лада",
  "Лариса",
  "Леся",
  "Ликера",
  "Лідія",
  "Лілія",
  "Любава",
  "Любислава",
  "Любов",
  "Любомила",
  "Любомира",
  "Люборада",
  "Любослава",
  "Людмила",
  "Людомила",
  "Майя",
  "Мальва",
  "Мар’яна",
  "Марина",
  "Марічка",
  "Марія",
  "Марта",
  "Меланія",
  "Мечислава",
  "Милодара",
  "Милослава",
  "Мирослава",
  "Мілана",
  "Мокрина",
  "Мотря",
  "Мстислава",
  "Надія",
  "Наталія",
  "Неля",
  "Немира",
  "Ніна",
  "Огняна",
  "Оксана",
  "Олександра",
  "Олена",
  "Олеся",
  "Ольга",
  "Ореста",
  "Орина",
  "Орислава",
  "Орися",
  "Оріяна",
  "Павліна",
  "Палажка",
  "Пелагея",
  "Пелагія",
  "Поліна",
  "Поляна",
  "Потішана",
  "Радміла",
  "Радослава",
  "Раїна",
  "Раїса",
  "Роксолана",
  "Ромена",
  "Ростислава",
  "Руслана",
  "Світлана",
  "Святослава",
  "Слава",
  "Сміяна",
  "Сніжана",
  "Соломія",
  "Соня",
  "Софія",
  "Станислава",
  "Сюзана",
  "Таїсія",
  "Тамара",
  "Тетяна",
  "Устина",
  "Фаїна",
  "Февронія",
  "Федора",
  "Феодосія",
  "Харитина",
  "Христина",
  "Христя",
  "Юліанна",
  "Юлія",
  "Юстина",
  "Юхима",
  "Юхимія",
  "Яна",
  "Ярина",
  "Ярослава"
];

},{}],"node_modules/faker/lib/locales/uk/name/female_middle_name.js":[function(require,module,exports) {
module["exports"] = [
  "Адамівна",
  "Азарівна",
  "Алевтинівна",
  "Альбертівна",
  "Анастасівна",
  "Анатоліївна",
  "Андріївна",
  "Антонівна",
  "Аркадіївна",
  "Арсенівна",
  "Арсеніївна",
  "Артемівна",
  "Архипівна",
  "Аскольдівна",
  "Афанасіївна",
  "Білославівна",
  "Богданівна",
  "Божемирівна",
  "Боженівна",
  "Болеславівна",
  "Боримирівна",
  "Борисівна",
  "Бориславівна",
  "Братиславівна",
  "В’ячеславівна",
  "Вадимівна",
  "Валентинівна",
  "Валеріївна",
  "Василівна",
  "Вікторівна",
  "Віталіївна",
  "Владиславівна",
  "Володимирівна",
  "Всеволодівна",
  "Всеславівна",
  "Гаврилівна",
  "Гарасимівна",
  "Георгіївна",
  "Гнатівна",
  "Гордіївна",
  "Григоріївна",
  "Данилівна",
  "Даромирівна",
  "Денисівна",
  "Дмитрівна",
  "Добромирівна",
  "Доброславівна",
  "Євгенівна",
  "Захарівна",
  "Захаріївна",
  "Збориславівна",
  "Звенимирівна",
  "Звениславівна",
  "Зеновіївна",
  "Зиновіївна",
  "Златомирівна",
  "Зореславівна",
  "Іванівна",
  "Ігорівна",
  "Ізяславівна",
  "Корнеліївна",
  "Корнилівна",
  "Корніївна",
  "Костянтинівна",
  "Лаврентіївна",
  "Любомирівна",
  "Макарівна",
  "Максимівна",
  "Марківна",
  "Маркіянівна",
  "Матвіївна",
  "Мечиславівна",
  "Микитівна",
  "Миколаївна",
  "Миронівна",
  "Мирославівна",
  "Михайлівна",
  "Мстиславівна",
  "Назарівна",
  "Назаріївна",
  "Натанівна",
  "Немирівна",
  "Несторівна",
  "Олегівна",
  "Олександрівна",
  "Олексіївна",
  "Олельківна",
  "Омелянівна",
  "Орестівна",
  "Орхипівна",
  "Остапівна",
  "Охрімівна",
  "Павлівна",
  "Панасівна",
  "Пантелеймонівна",
  "Петрівна",
  "Пилипівна",
  "Радимирівна",
  "Радимівна",
  "Родіонівна",
  "Романівна",
  "Ростиславівна",
  "Русланівна",
  "Святославівна",
  "Сергіївна",
  "Славутівна",
  "Станіславівна",
  "Степанівна",
  "Стефаніївна",
  "Тарасівна",
  "Тимофіївна",
  "Тихонівна",
  "Устимівна",
  "Юріївна",
  "Юхимівна",
  "Ярославівна"
];

},{}],"node_modules/faker/lib/locales/uk/name/female_last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Андрухович",
  "Бабух",
  "Балабан",
  "Балабуха",
  "Балакун",
  "Балицька",
  "Бамбула",
  "Бандера",
  "Барановська",
  "Бачей",
  "Башук",
  "Бердник",
  "Білич",
  "Бондаренко",
  "Борецька",
  "Боровська",
  "Борочко",
  "Боярчук",
  "Брицька",
  "Бурмило",
  "Бутько",
  "Василишина",
  "Васильківська",
  "Вергун",
  "Вередун",
  "Верещук",
  "Витребенько",
  "Вітряк",
  "Волощук",
  "Гайдук",
  "Гайова",
  "Гайчук",
  "Галаєнко",
  "Галатей",
  "Галаціон",
  "Гаман",
  "Гамула",
  "Ганич",
  "Гарай",
  "Гарун",
  "Гладківська",
  "Гладух",
  "Глинська",
  "Гнатишина",
  "Гойко",
  "Головець",
  "Горбач",
  "Гордійчук",
  "Горова",
  "Городоцька",
  "Гречко",
  "Григоришина",
  "Гриневецька",
  "Гриневська",
  "Гришко",
  "Громико",
  "Данилишина",
  "Данилко",
  "Демків",
  "Демчишина",
  "Дзюб’як",
  "Дзюба",
  "Дідух",
  "Дмитришина",
  "Дмитрук",
  "Довгалевська",
  "Дурдинець",
  "Євенко",
  "Євпак",
  "Ємець",
  "Єрмак",
  "Забіла",
  "Зварич",
  "Зінкевич",
  "Зленко",
  "Іванишина",
  "Калач",
  "Кандиба",
  "Карпух",
  "Кивач",
  "Коваленко",
  "Ковальська",
  "Коломієць",
  "Коман",
  "Компанієць",
  "Кононець",
  "Кордун",
  "Корецька",
  "Корнїйчук",
  "Коров’як",
  "Коцюбинська",
  "Кулинич",
  "Кульчицька",
  "Лагойда",
  "Лазірко",
  "Ланова",
  "Латан",
  "Латанська",
  "Лахман",
  "Левадовська",
  "Ликович",
  "Линдик",
  "Ліхно",
  "Лобачевська",
  "Ломова",
  "Лугова",
  "Луцька",
  "Луцьків",
  "Лученко",
  "Лучко",
  "Люта",
  "Лящук",
  "Магера",
  "Мазайло",
  "Мазило",
  "Мазун",
  "Майборода",
  "Майстренко",
  "Маковецька",
  "Малкович",
  "Мамій",
  "Маринич",
  "Марієвська",
  "Марків",
  "Махно",
  "Миклашевська",
  "Миклухо",
  "Милославська",
  "Михайлюк",
  "Міняйло",
  "Могилевська",
  "Москаль",
  "Москалюк",
  "Мотрієнко",
  "Негода",
  "Ногачевська",
  "Опенько",
  "Осадко",
  "Павленко",
  "Павлишина",
  "Павлів",
  "Пагутяк",
  "Паламарчук",
  "Палій",
  "Паращук",
  "Пасічник",
  "Пендик",
  "Петик",
  "Петлюра",
  "Петренко",
  "Петрина",
  "Петришина",
  "Петрів",
  "Плаксій",
  "Погиба",
  "Поліщук",
  "Пономарів",
  "Поривай",
  "Поривайло",
  "Потебенько",
  "Потоцька",
  "Пригода",
  "Приймак",
  "Притула",
  "Прядун",
  "Розпутня",
  "Романишина",
  "Ромей",
  "Роменець",
  "Ромочко",
  "Савицька",
  "Саєнко",
  "Свидригайло",
  "Семеночко",
  "Семещук",
  "Сердюк",
  "Силецька",
  "Сідлецька",
  "Сідляк",
  "Сірко",
  "Скиба",
  "Скоропадська",
  "Слободян",
  "Сосюра",
  "Сплюха",
  "Спотикач",
  "Степанець",
  "Стигайло",
  "Сторожук",
  "Сторчак",
  "Стоян",
  "Сучак",
  "Сушко",
  "Тарасюк",
  "Тиндарей",
  "Ткаченко",
  "Третяк",
  "Троян",
  "Трублаєвська",
  "Трясило",
  "Трясун",
  "Уманець",
  "Унич",
  "Усич",
  "Федоришина",
  "Цушко",
  "Червоній",
  "Шамрило",
  "Шевченко",
  "Шестак",
  "Шиндарей",
  "Шиян",
  "Шкараба",
  "Шудрик",
  "Шумило",
  "Шупик",
  "Шухевич",
  "Щербак",
  "Юрчишина",
  "Юхно",
  "Ющик",
  "Ющук",
  "Яворівська",
  "Ялова",
  "Ялюк",
  "Янюк",
  "Ярмак",
  "Яцишина",
  "Яцьків",
  "Ящук"
];

},{}],"node_modules/faker/lib/locales/uk/name/prefix.js":[function(require,module,exports) {
module["exports"] = [
  "Пан",
  "Пані"
];

},{}],"node_modules/faker/lib/locales/uk/name/suffix.js":[function(require,module,exports) {
module["exports"] = [
  "проф.",
  "доц.",
  "докт. пед. наук",
  "докт. політ. наук",
  "докт. філол. наук",
  "докт. філос. наук",
  "докт. і. наук",
  "докт. юрид. наук",
  "докт. техн. наук",
  "докт. психол. наук",
  "канд. пед. наук",
  "канд. політ. наук",
  "канд. філол. наук",
  "канд. філос. наук",
  "канд. і. наук",
  "канд. юрид. наук",
  "канд. техн. наук",
  "канд. психол. наук"
];

},{}],"node_modules/faker/lib/locales/uk/name/title.js":[function(require,module,exports) {
module["exports"] = {
  "descriptor": [
    "Головний",
    "Генеральний",
    "Провідний",
    "Національний",
    "Регіональний",
    "Обласний",
    "Районний",
    "Глобальний",
    "Міжнародний",
    "Центральний"
  ],
  "level": [
    "маркетинговий",
    "оптимізаційний",
    "страховий",
    "функціональний",
    "інтеграційний",
    "логістичний"
  ],
  "job": [
    "інженер",
    "агент",
    "адміністратор",
    "аналітик",
    "архітектор",
    "дизайнер",
    "керівник",
    "консультант",
    "координатор",
    "менеджер",
    "планувальник",
    "помічник",
    "розробник",
    "спеціаліст",
    "співробітник",
    "технік"
  ]
};

},{}],"node_modules/faker/lib/locales/uk/name/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{male_first_name} #{male_last_name}",
  "#{male_last_name} #{male_first_name}",
  "#{male_first_name} #{male_middle_name} #{male_last_name}",
  "#{male_last_name} #{male_first_name} #{male_middle_name}",
  "#{female_first_name} #{female_last_name}",
  "#{female_last_name} #{female_first_name}",
  "#{female_first_name} #{female_middle_name} #{female_last_name}",
  "#{female_last_name} #{female_first_name} #{female_middle_name}"
];

},{}],"node_modules/faker/lib/locales/uk/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.male_first_name = require("./male_first_name");
name.male_middle_name = require("./male_middle_name");
name.male_last_name = require("./male_last_name");
name.female_first_name = require("./female_first_name");
name.female_middle_name = require("./female_middle_name");
name.female_last_name = require("./female_last_name");
name.prefix = require("./prefix");
name.suffix = require("./suffix");
name.title = require("./title");
name.name = require("./name");

},{"./male_first_name":"node_modules/faker/lib/locales/uk/name/male_first_name.js","./male_middle_name":"node_modules/faker/lib/locales/uk/name/male_middle_name.js","./male_last_name":"node_modules/faker/lib/locales/uk/name/male_last_name.js","./female_first_name":"node_modules/faker/lib/locales/uk/name/female_first_name.js","./female_middle_name":"node_modules/faker/lib/locales/uk/name/female_middle_name.js","./female_last_name":"node_modules/faker/lib/locales/uk/name/female_last_name.js","./prefix":"node_modules/faker/lib/locales/uk/name/prefix.js","./suffix":"node_modules/faker/lib/locales/uk/name/suffix.js","./title":"node_modules/faker/lib/locales/uk/name/title.js","./name":"node_modules/faker/lib/locales/uk/name/name.js"}],"node_modules/faker/lib/locales/uk/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "(044) ###-##-##",
  "(050) ###-##-##",
  "(063) ###-##-##",
  "(066) ###-##-##",
  "(073) ###-##-##",
  "(091) ###-##-##",
  "(092) ###-##-##",
  "(093) ###-##-##",
  "(094) ###-##-##",
  "(095) ###-##-##",
  "(096) ###-##-##",
  "(097) ###-##-##",
  "(098) ###-##-##",
  "(099) ###-##-##"
];

},{}],"node_modules/faker/lib/locales/uk/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/uk/phone_number/formats.js"}],"node_modules/faker/lib/locales/uk/index.js":[function(require,module,exports) {
var uk = {};
module['exports'] = uk;
uk.title = "Ukrainian";
uk.address = require("./address");
uk.company = require("./company");
uk.internet = require("./internet");
uk.name = require("./name");
uk.phone_number = require("./phone_number");

},{"./address":"node_modules/faker/lib/locales/uk/address/index.js","./company":"node_modules/faker/lib/locales/uk/company/index.js","./internet":"node_modules/faker/lib/locales/uk/internet/index.js","./name":"node_modules/faker/lib/locales/uk/name/index.js","./phone_number":"node_modules/faker/lib/locales/uk/phone_number/index.js"}],"node_modules/faker/lib/locales/vi/address/city_root.js":[function(require,module,exports) {
module["exports"] = [
  "Bắc Giang",
  "Bắc Kạn",
  "Bắc Ninh",
  "Cao Bằng",
  "Điện Biên",
  "Hà Giang",
  "Hà Nam",
  "Hà Tây",
  "Hải Dương",
  "TP Hải Phòng",
  "Hòa Bình",
  "Hưng Yên",
  "Lai Châu",
  "Lào Cai",
  "Lạng Sơn",
  "Nam Định",
  "Ninh Bình",
  "Phú Thọ",
  "Quảng Ninh",
  "Sơn La",
  "Thái Bình",
  "Thái Nguyên",
  "Tuyên Quang",
  "Vĩnh Phúc",
  "Yên Bái",
  "TP Đà Nẵng",
  "Bình Định",
  "Đắk Lắk",
  "Đắk Nông",
  "Gia Lai",
  "Hà Tĩnh",
  "Khánh Hòa",
  "Kon Tum",
  "Nghệ An",
  "Phú Yên",
  "Quảng Bình",
  "Quảng Nam",
  "Quảng Ngãi",
  "Quảng Trị",
  "Thanh Hóa",
  "Thừa Thiên Huế",
  "TP TP. Hồ Chí Minh",
  "An Giang",
  "Bà Rịa Vũng Tàu",
  "Bạc Liêu",
  "Bến Tre",
  "Bình Dương",
  "Bình Phước",
  "Bình Thuận",
  "Cà Mau",
  "TP Cần Thơ",
  "Đồng Nai",
  "Đồng Tháp",
  "Hậu Giang",
  "Kiên Giang",
  "Lâm Đồng",
  "Long An",
  "Ninh Thuận",
  "Sóc Trăng",
  "Tây Ninh",
  "Tiền Giang",
  "Trà Vinh",
  "Vĩnh Long"
];

},{}],"node_modules/faker/lib/locales/vi/address/city.js":[function(require,module,exports) {
module["exports"] = [
  "#{city_root}"
];

},{}],"node_modules/faker/lib/locales/vi/address/county.js":[function(require,module,exports) {
module["exports"] = [
  "Avon",
  "Bedfordshire",
  "Berkshire",
  "Borders",
  "Buckinghamshire",
  "Cambridgeshire",
  "Central",
  "Cheshire",
  "Cleveland",
  "Clwyd",
  "Cornwall",
  "County Antrim",
  "County Armagh",
  "County Down",
  "County Fermanagh",
  "County Londonderry",
  "County Tyrone",
  "Cumbria",
  "Derbyshire",
  "Devon",
  "Dorset",
  "Dumfries and Galloway",
  "Durham",
  "Dyfed",
  "East Sussex",
  "Essex",
  "Fife",
  "Gloucestershire",
  "Grampian",
  "Greater Manchester",
  "Gwent",
  "Gwynedd County",
  "Hampshire",
  "Herefordshire",
  "Hertfordshire",
  "Highlands and Islands",
  "Humberside",
  "Isle of Wight",
  "Kent",
  "Lancashire",
  "Leicestershire",
  "Lincolnshire",
  "Lothian",
  "Merseyside",
  "Mid Glamorgan",
  "Norfolk",
  "North Yorkshire",
  "Northamptonshire",
  "Northumberland",
  "Nottinghamshire",
  "Oxfordshire",
  "Powys",
  "Rutland",
  "Shropshire",
  "Somerset",
  "South Glamorgan",
  "South Yorkshire",
  "Staffordshire",
  "Strathclyde",
  "Suffolk",
  "Surrey",
  "Tayside",
  "Tyne and Wear",
  "Việt Nam",
  "Warwickshire",
  "West Glamorgan",
  "West Midlands",
  "West Sussex",
  "West Yorkshire",
  "Wiltshire",
  "Worcestershire"
];

},{}],"node_modules/faker/lib/locales/vi/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "Việt Nam"
];

},{}],"node_modules/faker/lib/locales/vi/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.city_root = require("./city_root");
address.city = require("./city");
address.county = require("./county");
address.default_country = require("./default_country");

},{"./city_root":"node_modules/faker/lib/locales/vi/address/city_root.js","./city":"node_modules/faker/lib/locales/vi/address/city.js","./county":"node_modules/faker/lib/locales/vi/address/county.js","./default_country":"node_modules/faker/lib/locales/vi/address/default_country.js"}],"node_modules/faker/lib/locales/vi/internet/domain_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "com",
  "net",
  "info",
  "vn",
  "com.vn"
];

},{}],"node_modules/faker/lib/locales/vi/internet/index.js":[function(require,module,exports) {
var internet = {};
module['exports'] = internet;
internet.domain_suffix = require("./domain_suffix");

},{"./domain_suffix":"node_modules/faker/lib/locales/vi/internet/domain_suffix.js"}],"node_modules/faker/lib/locales/vi/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "01#### #####",
  "01### ######",
  "01#1 ### ####",
  "011# ### ####",
  "02# #### ####",
  "03## ### ####",
  "055 #### ####",
  "056 #### ####",
  "0800 ### ####",
  "08## ### ####",
  "09## ### ####",
  "016977 ####",
  "01### #####",
  "0500 ######",
  "0800 ######"
];

},{}],"node_modules/faker/lib/locales/vi/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/vi/phone_number/formats.js"}],"node_modules/faker/lib/locales/vi/cell_phone/formats.js":[function(require,module,exports) {
module["exports"] = [
  "074## ######",
  "075## ######",
  "076## ######",
  "077## ######",
  "078## ######",
  "079## ######"
];

},{}],"node_modules/faker/lib/locales/vi/cell_phone/index.js":[function(require,module,exports) {
var cell_phone = {};
module['exports'] = cell_phone;
cell_phone.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/vi/cell_phone/formats.js"}],"node_modules/faker/lib/locales/vi/name/first_name.js":[function(require,module,exports) {
module["exports"] = [
  "Phạm",
  "Nguyễn",
  "Trần",
  "Lê",
  "Lý",
  "Hoàng",
  "Phan",
  "Vũ",
  "Tăng",
  "Đặng",
  "Bùi",
  "Đỗ",
  "Hồ",
  "Ngô",
  "Dương",
  "Đào",
  "Đoàn",
  "Vương",
  "Trịnh",
  "Đinh",
  "Lâm",
  "Phùng",
  "Mai",
  "Tô",
  "Trương",
  "Hà"
];

},{}],"node_modules/faker/lib/locales/vi/name/last_name.js":[function(require,module,exports) {
module["exports"] = [
  "Nam",
  "Trung",
  "Thanh",
  "Thị",
  "Văn",
  "Dương",
  "Tăng",
  "Quốc",
  "Như",
  "Phạm",
  "Nguyễn",
  "Trần",
  "Lê",
  "Lý",
  "Hoàng",
  "Phan",
  "Vũ",
  "Tăng",
  "Đặng",
  "Bùi",
  "Đỗ",
  "Hồ",
  "Ngô",
  "Dương",
  "Đào",
  "Đoàn",
  "Vương",
  "Trịnh",
  "Đinh",
  "Lâm",
  "Phùng",
  "Mai",
  "Tô",
  "Trương",
  "Hà",
  "Vinh",
  "Nhung",
  "Hòa",
  "Tiến",
  "Tâm",
  "Bửu",
  "Loan",
  "Hiền",
  "Hải",
  "Vân",
  "Kha",
  "Minh",
  "Nhân",
  "Triệu",
  "Tuân",
  "Hữu",
  "Đức",
  "Phú",
  "Khoa",
  "Thắgn",
  "Sơn",
  "Dung",
  "Tú",
  "Trinh",
  "Thảo",
  "Sa",
  "Kim",
  "Long",
  "Thi",
  "Cường",
  "Ngọc",
  "Sinh",
  "Khang",
  "Phong",
  "Thắm",
  "Thu",
  "Thủy",
  "Nhàn"
];

},{}],"node_modules/faker/lib/locales/vi/name/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{first_name} #{last_name}",
  "#{first_name} #{last_name} #{last_name}",
  "#{first_name} #{last_name} #{last_name} #{last_name}"
];

},{}],"node_modules/faker/lib/locales/vi/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");
name.name = require("./name");

},{"./first_name":"node_modules/faker/lib/locales/vi/name/first_name.js","./last_name":"node_modules/faker/lib/locales/vi/name/last_name.js","./name":"node_modules/faker/lib/locales/vi/name/name.js"}],"node_modules/faker/lib/locales/vi/company/prefix.js":[function(require,module,exports) {
module["exports"] = [
  "Công ty",
  "Cty TNHH",
  "Cty",
  "Cửa hàng",
  "Trung tâm",
  "Chi nhánh"
];

},{}],"node_modules/faker/lib/locales/vi/company/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{prefix} #{Name.last_name}"
];

},{}],"node_modules/faker/lib/locales/vi/company/index.js":[function(require,module,exports) {
var company = {};
module['exports'] = company;
company.prefix = require("./prefix");
company.name = require("./name");

},{"./prefix":"node_modules/faker/lib/locales/vi/company/prefix.js","./name":"node_modules/faker/lib/locales/vi/company/name.js"}],"node_modules/faker/lib/locales/vi/lorem/words.js":[function(require,module,exports) {
module["exports"] = [
  "đã",
  "đang",
  "ừ",
  "ờ",
  "á",
  "không",
  "biết",
  "gì",
  "hết",
  "đâu",
  "nha",
  "thế",
  "thì",
  "là",
  "đánh",
  "đá",
  "đập",
  "phá",
  "viết",
  "vẽ",
  "tô",
  "thuê",
  "mướn",
  "mượn",
  "mua",
  "một",
  "hai",
  "ba",
  "bốn",
  "năm",
  "sáu",
  "bảy",
  "tám",
  "chín",
  "mười",
  "thôi",
  "việc",
  "nghỉ",
  "làm",
  "nhà",
  "cửa",
  "xe",
  "đạp",
  "ác",
  "độc",
  "khoảng",
  "khoan",
  "thuyền",
  "tàu",
  "bè",
  "lầu",
  "xanh",
  "đỏ",
  "tím",
  "vàng",
  "kim",
  "chỉ",
  "khâu",
  "may",
  "vá",
  "em",
  "anh",
  "yêu",
  "thương",
  "thích",
  "con",
  "cái",
  "bàn",
  "ghế",
  "tủ",
  "quần",
  "áo",
  "nón",
  "dép",
  "giày",
  "lỗi",
  "được",
  "ghét",
  "giết",
  "chết",
  "hết",
  "tôi",
  "bạn",
  "tui",
  "trời",
  "trăng",
  "mây",
  "gió",
  "máy",
  "hàng",
  "hóa",
  "leo",
  "núi",
  "bơi",
  "biển",
  "chìm",
  "xuồng",
  "nước",
  "ngọt",
  "ruộng",
  "đồng",
  "quê",
  "hương"
];

},{}],"node_modules/faker/lib/locales/vi/lorem/index.js":[function(require,module,exports) {
var lorem = {};
module['exports'] = lorem;
lorem.words = require("./words");

},{"./words":"node_modules/faker/lib/locales/vi/lorem/words.js"}],"node_modules/faker/lib/locales/vi/index.js":[function(require,module,exports) {
var vi = {};
module['exports'] = vi;
vi.title = "Vietnamese";
vi.address = require("./address");
vi.internet = require("./internet");
vi.phone_number = require("./phone_number");
vi.cell_phone = require("./cell_phone");
vi.name = require("./name");
vi.company = require("./company");
vi.lorem = require("./lorem");

},{"./address":"node_modules/faker/lib/locales/vi/address/index.js","./internet":"node_modules/faker/lib/locales/vi/internet/index.js","./phone_number":"node_modules/faker/lib/locales/vi/phone_number/index.js","./cell_phone":"node_modules/faker/lib/locales/vi/cell_phone/index.js","./name":"node_modules/faker/lib/locales/vi/name/index.js","./company":"node_modules/faker/lib/locales/vi/company/index.js","./lorem":"node_modules/faker/lib/locales/vi/lorem/index.js"}],"node_modules/faker/lib/locales/zh_CN/address/city_prefix.js":[function(require,module,exports) {
module["exports"] = [
  "长",
  "上",
  "南",
  "西",
  "北",
  "诸",
  "宁",
  "珠",
  "武",
  "衡",
  "成",
  "福",
  "厦",
  "贵",
  "吉",
  "海",
  "太",
  "济",
  "安",
  "吉",
  "包"
];

},{}],"node_modules/faker/lib/locales/zh_CN/address/city_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "沙市",
  "京市",
  "宁市",
  "安市",
  "乡县",
  "海市",
  "码市",
  "汉市",
  "阳市",
  "都市",
  "州市",
  "门市",
  "阳市",
  "口市",
  "原市",
  "南市",
  "徽市",
  "林市",
  "头市"
];

},{}],"node_modules/faker/lib/locales/zh_CN/address/building_number.js":[function(require,module,exports) {
module["exports"] = [
  "#####",
  "####",
  "###",
  "##",
  "#"
];

},{}],"node_modules/faker/lib/locales/zh_CN/address/street_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "巷",
  "街",
  "路",
  "桥",
  "侬",
  "旁",
  "中心",
  "栋"
];

},{}],"node_modules/faker/lib/locales/zh_CN/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "######"
];

},{}],"node_modules/faker/lib/locales/zh_CN/address/state.js":[function(require,module,exports) {
module["exports"] = [
  "北京市",
  "上海市",
  "天津市",
  "重庆市",
  "黑龙江省",
  "吉林省",
  "辽宁省",
  "内蒙古",
  "河北省",
  "新疆",
  "甘肃省",
  "青海省",
  "陕西省",
  "宁夏",
  "河南省",
  "山东省",
  "山西省",
  "安徽省",
  "湖北省",
  "湖南省",
  "江苏省",
  "四川省",
  "贵州省",
  "云南省",
  "广西省",
  "西藏",
  "浙江省",
  "江西省",
  "广东省",
  "福建省",
  "台湾省",
  "海南省",
  "香港",
  "澳门"
];

},{}],"node_modules/faker/lib/locales/zh_CN/address/state_abbr.js":[function(require,module,exports) {
module["exports"] = [
  "京",
  "沪",
  "津",
  "渝",
  "黑",
  "吉",
  "辽",
  "蒙",
  "冀",
  "新",
  "甘",
  "青",
  "陕",
  "宁",
  "豫",
  "鲁",
  "晋",
  "皖",
  "鄂",
  "湘",
  "苏",
  "川",
  "黔",
  "滇",
  "桂",
  "藏",
  "浙",
  "赣",
  "粤",
  "闽",
  "台",
  "琼",
  "港",
  "澳"
];

},{}],"node_modules/faker/lib/locales/zh_CN/address/city.js":[function(require,module,exports) {
module["exports"] = [
  "#{city_prefix}#{city_suffix}"
];

},{}],"node_modules/faker/lib/locales/zh_CN/address/street_name.js":[function(require,module,exports) {
module["exports"] = [
  "#{Name.last_name}#{street_suffix}"
];

},{}],"node_modules/faker/lib/locales/zh_CN/address/street_address.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_name}#{building_number}号"
];

},{}],"node_modules/faker/lib/locales/zh_CN/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "中国"
];

},{}],"node_modules/faker/lib/locales/zh_CN/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.city_prefix = require("./city_prefix");
address.city_suffix = require("./city_suffix");
address.building_number = require("./building_number");
address.street_suffix = require("./street_suffix");
address.postcode = require("./postcode");
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.city = require("./city");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./city_prefix":"node_modules/faker/lib/locales/zh_CN/address/city_prefix.js","./city_suffix":"node_modules/faker/lib/locales/zh_CN/address/city_suffix.js","./building_number":"node_modules/faker/lib/locales/zh_CN/address/building_number.js","./street_suffix":"node_modules/faker/lib/locales/zh_CN/address/street_suffix.js","./postcode":"node_modules/faker/lib/locales/zh_CN/address/postcode.js","./state":"node_modules/faker/lib/locales/zh_CN/address/state.js","./state_abbr":"node_modules/faker/lib/locales/zh_CN/address/state_abbr.js","./city":"node_modules/faker/lib/locales/zh_CN/address/city.js","./street_name":"node_modules/faker/lib/locales/zh_CN/address/street_name.js","./street_address":"node_modules/faker/lib/locales/zh_CN/address/street_address.js","./default_country":"node_modules/faker/lib/locales/zh_CN/address/default_country.js"}],"node_modules/faker/lib/locales/zh_CN/name/first_name.js":[function(require,module,exports) {
module["exports"] = [
  "王",
  "李",
  "张",
  "刘",
  "陈",
  "杨",
  "黄",
  "吴",
  "赵",
  "周",
  "徐",
  "孙",
  "马",
  "朱",
  "胡",
  "林",
  "郭",
  "何",
  "高",
  "罗",
  "郑",
  "梁",
  "谢",
  "宋",
  "唐",
  "许",
  "邓",
  "冯",
  "韩",
  "曹",
  "曾",
  "彭",
  "萧",
  "蔡",
  "潘",
  "田",
  "董",
  "袁",
  "于",
  "余",
  "叶",
  "蒋",
  "杜",
  "苏",
  "魏",
  "程",
  "吕",
  "丁",
  "沈",
  "任",
  "姚",
  "卢",
  "傅",
  "钟",
  "姜",
  "崔",
  "谭",
  "廖",
  "范",
  "汪",
  "陆",
  "金",
  "石",
  "戴",
  "贾",
  "韦",
  "夏",
  "邱",
  "方",
  "侯",
  "邹",
  "熊",
  "孟",
  "秦",
  "白",
  "江",
  "阎",
  "薛",
  "尹",
  "段",
  "雷",
  "黎",
  "史",
  "龙",
  "陶",
  "贺",
  "顾",
  "毛",
  "郝",
  "龚",
  "邵",
  "万",
  "钱",
  "严",
  "赖",
  "覃",
  "洪",
  "武",
  "莫",
  "孔"
];

},{}],"node_modules/faker/lib/locales/zh_CN/name/last_name.js":[function(require,module,exports) {
module["exports"] = [
  "绍齐",
  "博文",
  "梓晨",
  "胤祥",
  "瑞霖",
  "明哲",
  "天翊",
  "凯瑞",
  "健雄",
  "耀杰",
  "潇然",
  "子涵",
  "越彬",
  "钰轩",
  "智辉",
  "致远",
  "俊驰",
  "雨泽",
  "烨磊",
  "晟睿",
  "文昊",
  "修洁",
  "黎昕",
  "远航",
  "旭尧",
  "鸿涛",
  "伟祺",
  "荣轩",
  "越泽",
  "浩宇",
  "瑾瑜",
  "皓轩",
  "擎苍",
  "擎宇",
  "志泽",
  "子轩",
  "睿渊",
  "弘文",
  "哲瀚",
  "雨泽",
  "楷瑞",
  "建辉",
  "晋鹏",
  "天磊",
  "绍辉",
  "泽洋",
  "鑫磊",
  "鹏煊",
  "昊强",
  "伟宸",
  "博超",
  "君浩",
  "子骞",
  "鹏涛",
  "炎彬",
  "鹤轩",
  "越彬",
  "风华",
  "靖琪",
  "明辉",
  "伟诚",
  "明轩",
  "健柏",
  "修杰",
  "志泽",
  "弘文",
  "峻熙",
  "嘉懿",
  "煜城",
  "懿轩",
  "烨伟",
  "苑博",
  "伟泽",
  "熠彤",
  "鸿煊",
  "博涛",
  "烨霖",
  "烨华",
  "煜祺",
  "智宸",
  "正豪",
  "昊然",
  "明杰",
  "立诚",
  "立轩",
  "立辉",
  "峻熙",
  "弘文",
  "熠彤",
  "鸿煊",
  "烨霖",
  "哲瀚",
  "鑫鹏",
  "昊天",
  "思聪",
  "展鹏",
  "笑愚",
  "志强",
  "炫明",
  "雪松",
  "思源",
  "智渊",
  "思淼",
  "晓啸",
  "天宇",
  "浩然",
  "文轩",
  "鹭洋",
  "振家",
  "乐驹",
  "晓博",
  "文博",
  "昊焱",
  "立果",
  "金鑫",
  "锦程",
  "嘉熙",
  "鹏飞",
  "子默",
  "思远",
  "浩轩",
  "语堂",
  "聪健",
  "明",
  "文",
  "果",
  "思",
  "鹏",
  "驰",
  "涛",
  "琪",
  "浩",
  "航",
  "彬"
];

},{}],"node_modules/faker/lib/locales/zh_CN/name/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{first_name}#{last_name}"
];

},{}],"node_modules/faker/lib/locales/zh_CN/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");
name.name = require("./name");

},{"./first_name":"node_modules/faker/lib/locales/zh_CN/name/first_name.js","./last_name":"node_modules/faker/lib/locales/zh_CN/name/last_name.js","./name":"node_modules/faker/lib/locales/zh_CN/name/name.js"}],"node_modules/faker/lib/locales/zh_CN/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "###-########",
  "####-########",
  "###########"
];

},{}],"node_modules/faker/lib/locales/zh_CN/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/zh_CN/phone_number/formats.js"}],"node_modules/faker/lib/locales/zh_CN/index.js":[function(require,module,exports) {
var zh_CN = {};
module['exports'] = zh_CN;
zh_CN.title = "Chinese";
zh_CN.address = require("./address");
zh_CN.name = require("./name");
zh_CN.phone_number = require("./phone_number");

},{"./address":"node_modules/faker/lib/locales/zh_CN/address/index.js","./name":"node_modules/faker/lib/locales/zh_CN/name/index.js","./phone_number":"node_modules/faker/lib/locales/zh_CN/phone_number/index.js"}],"node_modules/faker/lib/locales/zh_TW/address/city_prefix.js":[function(require,module,exports) {
module["exports"] = [
  "臺北",
  "新北",
  "桃園",
  "臺中",
  "臺南",
  "高雄",
  "基隆",
  "新竹",
  "嘉義",
  "苗栗",
  "彰化",
  "南投",
  "雲林",
  "屏東",
  "宜蘭",
  "花蓮",
  "臺東",
  "澎湖",
  "金門",
  "連江"
];

},{}],"node_modules/faker/lib/locales/zh_TW/address/city_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "縣",
  "市"
];

},{}],"node_modules/faker/lib/locales/zh_TW/address/building_number.js":[function(require,module,exports) {
module["exports"] = [
  "####",
  "###",
  "##",
  "#"
];

},{}],"node_modules/faker/lib/locales/zh_TW/address/street_suffix.js":[function(require,module,exports) {
module["exports"] = [
  "街",
  "路",
  "北路",
  "南路",
  "東路",
  "西路"
];

},{}],"node_modules/faker/lib/locales/zh_TW/address/postcode.js":[function(require,module,exports) {
module["exports"] = [
  "######"
];

},{}],"node_modules/faker/lib/locales/zh_TW/address/state.js":[function(require,module,exports) {
module["exports"] = [
  "福建省",
  "台灣省"
];

},{}],"node_modules/faker/lib/locales/zh_TW/address/state_abbr.js":[function(require,module,exports) {
module["exports"] = [
  "北",
  "新北",
  "桃",
  "中",
  "南",
  "高",
  "基",
  "竹市",
  "嘉市",
  "竹縣",
  "苗",
  "彰",
  "投",
  "雲",
  "嘉縣",
  "宜",
  "花",
  "東",
  "澎",
  "金",
  "馬"
];

},{}],"node_modules/faker/lib/locales/zh_TW/address/city.js":[function(require,module,exports) {
module["exports"] = [
  "#{city_prefix}#{city_suffix}"
];

},{}],"node_modules/faker/lib/locales/zh_TW/address/street_name.js":[function(require,module,exports) {
module["exports"] = [
  "#{Name.last_name}#{street_suffix}"
];

},{}],"node_modules/faker/lib/locales/zh_TW/address/street_address.js":[function(require,module,exports) {
module["exports"] = [
  "#{street_name}#{building_number}號"
];

},{}],"node_modules/faker/lib/locales/zh_TW/address/default_country.js":[function(require,module,exports) {
module["exports"] = [
  "Taiwan (R.O.C.)"
];

},{}],"node_modules/faker/lib/locales/zh_TW/address/index.js":[function(require,module,exports) {
var address = {};
module['exports'] = address;
address.city_prefix = require("./city_prefix");
address.city_suffix = require("./city_suffix");
address.building_number = require("./building_number");
address.street_suffix = require("./street_suffix");
address.postcode = require("./postcode");
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.city = require("./city");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./city_prefix":"node_modules/faker/lib/locales/zh_TW/address/city_prefix.js","./city_suffix":"node_modules/faker/lib/locales/zh_TW/address/city_suffix.js","./building_number":"node_modules/faker/lib/locales/zh_TW/address/building_number.js","./street_suffix":"node_modules/faker/lib/locales/zh_TW/address/street_suffix.js","./postcode":"node_modules/faker/lib/locales/zh_TW/address/postcode.js","./state":"node_modules/faker/lib/locales/zh_TW/address/state.js","./state_abbr":"node_modules/faker/lib/locales/zh_TW/address/state_abbr.js","./city":"node_modules/faker/lib/locales/zh_TW/address/city.js","./street_name":"node_modules/faker/lib/locales/zh_TW/address/street_name.js","./street_address":"node_modules/faker/lib/locales/zh_TW/address/street_address.js","./default_country":"node_modules/faker/lib/locales/zh_TW/address/default_country.js"}],"node_modules/faker/lib/locales/zh_TW/name/first_name.js":[function(require,module,exports) {
module["exports"] = [
  "王",
  "李",
  "張",
  "劉",
  "陳",
  "楊",
  "黃",
  "吳",
  "趙",
  "週",
  "徐",
  "孫",
  "馬",
  "朱",
  "胡",
  "林",
  "郭",
  "何",
  "高",
  "羅",
  "鄭",
  "梁",
  "謝",
  "宋",
  "唐",
  "許",
  "鄧",
  "馮",
  "韓",
  "曹",
  "曾",
  "彭",
  "蕭",
  "蔡",
  "潘",
  "田",
  "董",
  "袁",
  "於",
  "餘",
  "葉",
  "蔣",
  "杜",
  "蘇",
  "魏",
  "程",
  "呂",
  "丁",
  "沈",
  "任",
  "姚",
  "盧",
  "傅",
  "鐘",
  "姜",
  "崔",
  "譚",
  "廖",
  "範",
  "汪",
  "陸",
  "金",
  "石",
  "戴",
  "賈",
  "韋",
  "夏",
  "邱",
  "方",
  "侯",
  "鄒",
  "熊",
  "孟",
  "秦",
  "白",
  "江",
  "閻",
  "薛",
  "尹",
  "段",
  "雷",
  "黎",
  "史",
  "龍",
  "陶",
  "賀",
  "顧",
  "毛",
  "郝",
  "龔",
  "邵",
  "萬",
  "錢",
  "嚴",
  "賴",
  "覃",
  "洪",
  "武",
  "莫",
  "孔"
];

},{}],"node_modules/faker/lib/locales/zh_TW/name/last_name.js":[function(require,module,exports) {
module["exports"] = [
  "紹齊",
  "博文",
  "梓晨",
  "胤祥",
  "瑞霖",
  "明哲",
  "天翊",
  "凱瑞",
  "健雄",
  "耀傑",
  "瀟然",
  "子涵",
  "越彬",
  "鈺軒",
  "智輝",
  "致遠",
  "俊馳",
  "雨澤",
  "燁磊",
  "晟睿",
  "文昊",
  "修潔",
  "黎昕",
  "遠航",
  "旭堯",
  "鴻濤",
  "偉祺",
  "榮軒",
  "越澤",
  "浩宇",
  "瑾瑜",
  "皓軒",
  "擎蒼",
  "擎宇",
  "志澤",
  "子軒",
  "睿淵",
  "弘文",
  "哲瀚",
  "雨澤",
  "楷瑞",
  "建輝",
  "晉鵬",
  "天磊",
  "紹輝",
  "澤洋",
  "鑫磊",
  "鵬煊",
  "昊強",
  "偉宸",
  "博超",
  "君浩",
  "子騫",
  "鵬濤",
  "炎彬",
  "鶴軒",
  "越彬",
  "風華",
  "靖琪",
  "明輝",
  "偉誠",
  "明軒",
  "健柏",
  "修傑",
  "志澤",
  "弘文",
  "峻熙",
  "嘉懿",
  "煜城",
  "懿軒",
  "燁偉",
  "苑博",
  "偉澤",
  "熠彤",
  "鴻煊",
  "博濤",
  "燁霖",
  "燁華",
  "煜祺",
  "智宸",
  "正豪",
  "昊然",
  "明杰",
  "立誠",
  "立軒",
  "立輝",
  "峻熙",
  "弘文",
  "熠彤",
  "鴻煊",
  "燁霖",
  "哲瀚",
  "鑫鵬",
  "昊天",
  "思聰",
  "展鵬",
  "笑愚",
  "志強",
  "炫明",
  "雪松",
  "思源",
  "智淵",
  "思淼",
  "曉嘯",
  "天宇",
  "浩然",
  "文軒",
  "鷺洋",
  "振家",
  "樂駒",
  "曉博",
  "文博",
  "昊焱",
  "立果",
  "金鑫",
  "錦程",
  "嘉熙",
  "鵬飛",
  "子默",
  "思遠",
  "浩軒",
  "語堂",
  "聰健"
];

},{}],"node_modules/faker/lib/locales/zh_TW/name/name.js":[function(require,module,exports) {
module["exports"] = [
  "#{first_name}#{last_name}"
];

},{}],"node_modules/faker/lib/locales/zh_TW/name/index.js":[function(require,module,exports) {
var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");
name.name = require("./name");

},{"./first_name":"node_modules/faker/lib/locales/zh_TW/name/first_name.js","./last_name":"node_modules/faker/lib/locales/zh_TW/name/last_name.js","./name":"node_modules/faker/lib/locales/zh_TW/name/name.js"}],"node_modules/faker/lib/locales/zh_TW/phone_number/formats.js":[function(require,module,exports) {
module["exports"] = [
  "0#-#######",
  "02-########",
  "09##-######"
];

},{}],"node_modules/faker/lib/locales/zh_TW/phone_number/index.js":[function(require,module,exports) {
var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":"node_modules/faker/lib/locales/zh_TW/phone_number/formats.js"}],"node_modules/faker/lib/locales/zh_TW/index.js":[function(require,module,exports) {
var zh_TW = {};
module['exports'] = zh_TW;
zh_TW.title = "Chinese (Taiwan)";
zh_TW.address = require("./address");
zh_TW.name = require("./name");
zh_TW.phone_number = require("./phone_number");

},{"./address":"node_modules/faker/lib/locales/zh_TW/address/index.js","./name":"node_modules/faker/lib/locales/zh_TW/name/index.js","./phone_number":"node_modules/faker/lib/locales/zh_TW/phone_number/index.js"}],"node_modules/faker/lib/locales.js":[function(require,module,exports) {
exports['az'] = require('./locales/az');
exports['cz'] = require('./locales/cz');
exports['de'] = require('./locales/de');
exports['de_AT'] = require('./locales/de_AT');
exports['de_CH'] = require('./locales/de_CH');
exports['en'] = require('./locales/en');
exports['en_AU'] = require('./locales/en_AU');
exports['en_BORK'] = require('./locales/en_BORK');
exports['en_CA'] = require('./locales/en_CA');
exports['en_GB'] = require('./locales/en_GB');
exports['en_IE'] = require('./locales/en_IE');
exports['en_IND'] = require('./locales/en_IND');
exports['en_US'] = require('./locales/en_US');
exports['en_au_ocker'] = require('./locales/en_au_ocker');
exports['es'] = require('./locales/es');
exports['es_MX'] = require('./locales/es_MX');
exports['fa'] = require('./locales/fa');
exports['fr'] = require('./locales/fr');
exports['fr_CA'] = require('./locales/fr_CA');
exports['ge'] = require('./locales/ge');
exports['id_ID'] = require('./locales/id_ID');
exports['it'] = require('./locales/it');
exports['ja'] = require('./locales/ja');
exports['ko'] = require('./locales/ko');
exports['nb_NO'] = require('./locales/nb_NO');
exports['nep'] = require('./locales/nep');
exports['nl'] = require('./locales/nl');
exports['pl'] = require('./locales/pl');
exports['pt_BR'] = require('./locales/pt_BR');
exports['ru'] = require('./locales/ru');
exports['sk'] = require('./locales/sk');
exports['sv'] = require('./locales/sv');
exports['tr'] = require('./locales/tr');
exports['uk'] = require('./locales/uk');
exports['vi'] = require('./locales/vi');
exports['zh_CN'] = require('./locales/zh_CN');
exports['zh_TW'] = require('./locales/zh_TW');

},{"./locales/az":"node_modules/faker/lib/locales/az/index.js","./locales/cz":"node_modules/faker/lib/locales/cz/index.js","./locales/de":"node_modules/faker/lib/locales/de/index.js","./locales/de_AT":"node_modules/faker/lib/locales/de_AT/index.js","./locales/de_CH":"node_modules/faker/lib/locales/de_CH/index.js","./locales/en":"node_modules/faker/lib/locales/en/index.js","./locales/en_AU":"node_modules/faker/lib/locales/en_AU/index.js","./locales/en_BORK":"node_modules/faker/lib/locales/en_BORK/index.js","./locales/en_CA":"node_modules/faker/lib/locales/en_CA/index.js","./locales/en_GB":"node_modules/faker/lib/locales/en_GB/index.js","./locales/en_IE":"node_modules/faker/lib/locales/en_IE/index.js","./locales/en_IND":"node_modules/faker/lib/locales/en_IND/index.js","./locales/en_US":"node_modules/faker/lib/locales/en_US/index.js","./locales/en_au_ocker":"node_modules/faker/lib/locales/en_au_ocker/index.js","./locales/es":"node_modules/faker/lib/locales/es/index.js","./locales/es_MX":"node_modules/faker/lib/locales/es_MX/index.js","./locales/fa":"node_modules/faker/lib/locales/fa/index.js","./locales/fr":"node_modules/faker/lib/locales/fr/index.js","./locales/fr_CA":"node_modules/faker/lib/locales/fr_CA/index.js","./locales/ge":"node_modules/faker/lib/locales/ge/index.js","./locales/id_ID":"node_modules/faker/lib/locales/id_ID/index.js","./locales/it":"node_modules/faker/lib/locales/it/index.js","./locales/ja":"node_modules/faker/lib/locales/ja/index.js","./locales/ko":"node_modules/faker/lib/locales/ko/index.js","./locales/nb_NO":"node_modules/faker/lib/locales/nb_NO/index.js","./locales/nep":"node_modules/faker/lib/locales/nep/index.js","./locales/nl":"node_modules/faker/lib/locales/nl/index.js","./locales/pl":"node_modules/faker/lib/locales/pl/index.js","./locales/pt_BR":"node_modules/faker/lib/locales/pt_BR/index.js","./locales/ru":"node_modules/faker/lib/locales/ru/index.js","./locales/sk":"node_modules/faker/lib/locales/sk/index.js","./locales/sv":"node_modules/faker/lib/locales/sv/index.js","./locales/tr":"node_modules/faker/lib/locales/tr/index.js","./locales/uk":"node_modules/faker/lib/locales/uk/index.js","./locales/vi":"node_modules/faker/lib/locales/vi/index.js","./locales/zh_CN":"node_modules/faker/lib/locales/zh_CN/index.js","./locales/zh_TW":"node_modules/faker/lib/locales/zh_TW/index.js"}],"node_modules/faker/index.js":[function(require,module,exports) {
// since we are requiring the top level of faker, load all locales by default
var Faker = require('./lib');
var faker = new Faker({ locales: require('./lib/locales') });
module['exports'] = faker;
},{"./lib":"node_modules/faker/lib/index.js","./lib/locales":"node_modules/faker/lib/locales.js"}],"src/ColorLegend/dummyLoc.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _faker = _interopRequireDefault(require("faker"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function _default() {
  var nodes = Array(100).fill(null).map(function () {
    return {
      id: _faker.default.random.uuid(),
      latitude: +_faker.default.address.latitude(),
      longitude: +_faker.default.address.longitude()
    };
  });
  var allIds = nodes.map(function (d) {
    return d.id;
  });
  var links = allIds.slice(10, 990).map(function (d) {
    return {
      source: d,
      target: _faker.default.helpers.randomize(allIds)
    };
  });
  return {
    nodes: nodes,
    links: links
  };
};

exports.default = _default;
},{"faker":"node_modules/faker/index.js"}],"static/maleIcon.png":[function(require,module,exports) {
module.exports = "/maleIcon.b2343989.png";
},{}],"src/ColorLegend/choropletMap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.choropletMap = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _d = require("d3");

var _airport = _interopRequireDefault(require("../../static/data/airport.csv"));

var _dummyLoc = _interopRequireDefault(require("./dummyLoc"));

var _maleIcon = _interopRequireDefault(require("../../static/maleIcon.png"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var width = window.innerWidth,
    height = window.innerHeight;
var projection = (0, _d.geoEqualEarth)(),
    pathGenerator = (0, _d.geoPath)().projection(projection);
var linkForce = (0, _d.forceLink)().id(function (d) {
  return d.id;
}).distance(20);
var simulation = (0, _d.forceSimulation)().force('link', linkForce).force('charge', (0, _d.forceManyBody)().strength(-100)).force('x', (0, _d.forceX)()).force('y', (0, _d.forceY)()).force('center', (0, _d.forceCenter)(width / 2, height / 2)).stop();

function dragStarted(d) {
  // if (positioning === 'map') { return }
  simulation.alphaTarget(0.3).restart();
  d.fx = d.x;
  d.fy = d.y;
}

function dragged(d) {
  // if (positioning === 'map') { return }
  d.fx = _d.event.x;
  d.fy = _d.event.y;
}

function dragEnded(d) {
  // if (positioning === 'map') { return }
  simulation.alphaTarget(0);
  d.fx = null;
  d.fy = null;
}

var dragger = (0, _d.drag)().on('start', dragStarted).on('drag', dragged).on('end', dragEnded);

var choropletMap = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(selection, props) {
    var locations, links, colorScale, colorValue, features, selectedValue, gUpdate, gEnter, g, personImg, countryPaths, countryPathsEnter, paths, circles, fixed, ticked, update, linkArc;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            linkArc = function _linkArc(d) {
              var r = Math.hypot(d.target.x - d.source.x, d.target.y - d.source.y);
              return "\n          M".concat(d.source.x, ",").concat(d.source.y, "\n          A").concat(r, ",").concat(r, " 0.5 0,1 ").concat(d.target.x, ",").concat(d.target.y, "\n        ");
            };

            update = function _update(paths, circles) {
              // paths.attr('d', linkArc)
              paths.attr('x1', function (d) {
                return d.source.x;
              }).attr('y1', function (d) {
                return d.source.y;
              }).attr('x2', function (d) {
                return d.target.x;
              }).attr('y2', function (d) {
                return d.target.y;
              });
              circles.attr('cx', function (d) {
                return d.x;
              }).attr('cy', function (d) {
                return d.y;
              });
            };

            ticked = function _ticked() {
              update(paths, circles);
            };

            fixed = function _fixed(immediate) {
              locations.forEach(function (d) {
                var pos = projection([d.longitude, d.latitude]);
                d.x = pos[0];
                d.y = pos[1];
              });
              var t = (0, _d.transition)().duration(immediate ? 0 : 600).ease(_d.easeElastic.period(0.5));
              update(paths.transition(t), circles.transition(t));
            };

            _context.next = 6;
            return (0, _d.csv)(_airport.default).then(function (data) {
              var _getLocations = (0, _dummyLoc.default)(),
                  nodes = _getLocations.nodes,
                  relations = _getLocations.links;

              locations = nodes;
              links = relations;
              locations.push({
                id: 'lskjdflksjdf',
                latitude: 14.613754,
                longitude: 120.980815,
                name: 'sldkjf'
              });
            });

          case 6:
            simulation.nodes(locations).on('tick', ticked);
            simulation.force('link', (0, _d.forceLink)(links).id(function (d) {
              return d.id;
            }));
            colorScale = props.colorScale, colorValue = props.colorValue, features = props.features, selectedValue = props.selectedValue;
            gUpdate = selection.selectAll('g').data([null]);
            gEnter = gUpdate.enter().append('g');
            g = gUpdate.merge(gEnter);
            g.selectAll('.sphere').data([null]).enter().append('path').attr('class', 'sphere').attr('fill', '#303c41').attr('d', pathGenerator({
              type: 'Sphere'
            })).merge(g.select('.sphere')).attr('opacity', selectedValue ? 0.3 : 1);
            selection.call((0, _d.zoom)().on('zoom', function () {
              g.attr('transform', _d.event.transform);
            })); //add sphere

            personImg = g.append('defs').append('pattern').attr('id', 'maleIcon').attr('height', 1).attr('width', 1).attr('x', 0).attr('y', 0).append('image').attr('width', 10).attr('height', 10).attr('xlink:href', _maleIcon.default);
            countryPaths = g.selectAll('.country').data(features);
            countryPathsEnter = countryPaths.enter().append('path').attr('class', 'country').attr('d', pathGenerator);
            countryPaths.merge(countryPathsEnter) // .attr('fill', d => colorScale(colorValue(d)))
            .attr('fill', '#707070').attr('opacity', function (d) {
              return !selectedValue || selectedValue === colorValue(d) ? 1 : 0.3;
            }).classed('highlighted', function (d) {
              return selectedValue === colorValue(d);
            });
            countryPathsEnter.append('title').text(function (d) {
              return "".concat(d.properties.name, ": ").concat(colorValue(d));
            });
            paths = g.selectAll('line.paths').data(links).join('line').attr('class', 'paths').attr('stroke-width', 1).attr('stroke', '#124ece').attr('fill', 'none');
            circles = g.selectAll('circle.nodes').data(locations).join('circle').attr('class', 'nodes').attr('r', 5).attr('fill', function (d) {
              return d.name ? 'red' : 'url(#maleIcon)';
            }).attr('stroke', 'pink').call(dragger);
            fixed(true);
            setTimeout(function () {
              simulation.alpha(1).restart();
            }, 5000);

          case 23:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function choropletMap(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

exports.choropletMap = choropletMap;
},{"@babel/runtime/regenerator":"node_modules/@babel/runtime/regenerator/index.js","@babel/runtime/helpers/asyncToGenerator":"node_modules/@babel/runtime/helpers/asyncToGenerator.js","d3":"node_modules/d3/index.js","../../static/data/airport.csv":"static/data/airport.csv","./dummyLoc":"src/ColorLegend/dummyLoc.js","../../static/maleIcon.png":"static/maleIcon.png"}],"src/ColorLegend/index.svelte":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _internal = require("svelte/internal");

var _d = require("d3");

var _svelte = require("svelte");

var _topojson = require("topojson");

var _countries50m = _interopRequireDefault(require("../../static/data/countries50m.json"));

var _countries50m2 = _interopRequireDefault(require("../../static/data/countries50m.tsv"));

var _colorLegend = require("./colorLegend.js");

var _choropletMap = require("./choropletMap");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var Object_1 = _internal.globals.Object;
var file = "src/ColorLegend/index.svelte";

function add_css() {
  var style = (0, _internal.element)("style");
  style.id = "svelte-dje5r3-style";
  style.textContent = "svg.svelte-dje5r3{border:1px solid grey}.country{stroke:black;stroke-width:0.1px}.country:hover{fill:red}.country.highlighted{stroke-width:0.5px}.label{font-family:sans-serif;font-size:1em}.legendOption{cursor:pointer}body{overflow-y:hidden}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguc3ZlbHRlIiwic291cmNlcyI6WyJpbmRleC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBzZWxlY3QsIHRzdiwgbGluZVBhdGgsIHNjYWxlT3JkaW5hbCwgc2NoZW1lU3BlY3RyYWwgfSBmcm9tICdkMydcbiAgICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSAnc3ZlbHRlJ1xuICAgIGltcG9ydCB7IGZlYXR1cmUgfSBmcm9tICd0b3BvanNvbidcbiAgICBpbXBvcnQgZGF0YSBmcm9tICdAc3RhdGljRGF0YS9jb3VudHJpZXM1MG0uanNvbidcbiAgICBpbXBvcnQgdHN2RGF0YSBmcm9tICdAc3RhdGljRGF0YS9jb3VudHJpZXM1MG0udHN2J1xuICAgIGltcG9ydCB7IGNvbG9yTGVnZW5kIH0gZnJvbSAnLi9jb2xvckxlZ2VuZC5qcydcbiAgICBpbXBvcnQgeyBjaG9yb3BsZXRNYXAgfSBmcm9tICcuL2Nob3JvcGxldE1hcCdcblxuICAgIGxldCBmZWF0dXJlc1xuICAgIG9uTW91bnQoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCB0c3YodHN2RGF0YSkudGhlbih0c3ZSZXN1bHQgPT4ge1xuICAgICAgICAgICAgY29uc3QgY291bnRyaWVzID0gZmVhdHVyZShkYXRhLCBkYXRhLm9iamVjdHMuY291bnRyaWVzKVxuICAgICAgICAgICAgY29uc3Qgcm93QnlJZCA9IHRzdlJlc3VsdC5yZWR1Y2UoKGFjYywgZCkgPT4ge1xuICAgICAgICAgICAgICAgIGFjY1tkLmlzb19uM10gPSBkXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjY1xuICAgICAgICAgICAgfSwge30pXG5cbiAgICAgICAgICAgIGNvdW50cmllcy5mZWF0dXJlcy5mb3JFYWNoKGQgPT4ge1xuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oZC5wcm9wZXJ0aWVzLCByb3dCeUlkW2QuaWRdKVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgZmVhdHVyZXMgPSBjb3VudHJpZXMuZmVhdHVyZXNcbiAgICAgICAgICAgIHJlbmRlcigpXG4gICAgICAgIH0pXG4gICAgfSlcblxuICAgIGNvbnN0IHdpZHRoID0gd2luZG93LmlubmVyV2lkdGgsXG4gICAgICAgIGhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodFxuICAgIGxldCBzdmdcblxuICAgIGNvbnN0IGNvbG9yU2NhbGUgPSBzY2FsZU9yZGluYWwoKVxuXG4gICAgY29uc3QgY29sb3JWYWx1ZSA9IGQgPT4gZC5wcm9wZXJ0aWVzLmVjb25vbXlcbiAgICAkOiBzZWxlY3RlZFZhbHVlID0gbnVsbFxuXG4gICAgY29uc3Qgb25GaWx0ZXIgPSBkID0+IHtcbiAgICAgICAgc2VsZWN0ZWRWYWx1ZSA9IGRcbiAgICAgICAgcmVuZGVyKClcbiAgICB9XG5cbiAgICBjb25zdCByZW5kZXIgPSB0c3ZSZXN1bHQgPT4ge1xuICAgICAgICBzdmcgPSBzZWxlY3QoJ3N2ZycpXG4gICAgICAgIGNvbnN0IGcgPSBzdmcuYXBwZW5kKCdnJylcblxuICAgICAgICBjb25zdCBjb2xvckxlZ2VuZEcgPSBzdmcuYXBwZW5kKCdnJylcblxuICAgICAgICBjb2xvclNjYWxlXG4gICAgICAgICAgICAuZG9tYWluKGZlYXR1cmVzLm1hcChjb2xvclZhbHVlKSlcbiAgICAgICAgICAgIC5kb21haW4oY29sb3JTY2FsZS5kb21haW4oKS5zb3J0KCkpXG4gICAgICAgICAgICAucmFuZ2Uoc2NoZW1lU3BlY3RyYWxbY29sb3JTY2FsZS5kb21haW4oKS5sZW5ndGhdKVxuXG4gICAgICAgIHN2Zy5jYWxsKGNob3JvcGxldE1hcCwge1xuICAgICAgICAgICAgZmVhdHVyZXMsXG4gICAgICAgICAgICBjb2xvclNjYWxlLFxuICAgICAgICAgICAgY29sb3JWYWx1ZSxcbiAgICAgICAgICAgIHNlbGVjdGVkVmFsdWUsXG4gICAgICAgIH0pXG5cbiAgICAgICAgY29sb3JMZWdlbmRHLmNhbGwoY29sb3JMZWdlbmQsIHtcbiAgICAgICAgICAgIGNvbG9yU2NhbGUsXG4gICAgICAgICAgICBjaXJjbGVSYWRpdXM6IDgsXG4gICAgICAgICAgICBzcGFjaW5nOiAyNSxcbiAgICAgICAgICAgIG9uRmlsdGVyLFxuICAgICAgICAgICAgc2VsZWN0ZWRWYWx1ZSxcbiAgICAgICAgfSlcbiAgICB9XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuICAgIHN2ZyB7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGdyZXk7XG4gICAgfVxuICAgIDpnbG9iYWwoLmNvdW50cnkpIHtcbiAgICAgICAgc3Ryb2tlOiBibGFjaztcbiAgICAgICAgc3Ryb2tlLXdpZHRoOiAwLjFweDtcbiAgICB9XG4gICAgOmdsb2JhbCguY291bnRyeSk6aG92ZXIge1xuICAgICAgICBmaWxsOiByZWQ7XG4gICAgfVxuICAgIDpnbG9iYWwoLmNvdW50cnkuaGlnaGxpZ2h0ZWQpIHtcbiAgICAgICAgc3Ryb2tlLXdpZHRoOiAwLjVweDtcbiAgICB9XG4gICAgOmdsb2JhbCgubGFiZWwpIHtcbiAgICAgICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XG4gICAgICAgIGZvbnQtc2l6ZTogMWVtO1xuICAgIH1cbiAgICA6Z2xvYmFsKC5sZWdlbmRPcHRpb24pIHtcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIH1cbiAgICA6Z2xvYmFsKGJvZHkpIHtcbiAgICAgICAgb3ZlcmZsb3cteTogaGlkZGVuO1xuICAgIH1cbjwvc3R5bGU+XG5cbjxzdmcge2hlaWdodH0ge3dpZHRofSAvPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNFSSxHQUFHLGNBQUMsQ0FBQyxBQUNELE1BQU0sQ0FBRSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQUFDMUIsQ0FBQyxBQUNPLFFBQVEsQUFBRSxDQUFDLEFBQ2YsTUFBTSxDQUFFLEtBQUssQ0FDYixZQUFZLENBQUUsS0FBSyxBQUN2QixDQUFDLEFBQ08sUUFBUSxBQUFDLE1BQU0sQUFBQyxDQUFDLEFBQ3JCLElBQUksQ0FBRSxHQUFHLEFBQ2IsQ0FBQyxBQUNPLG9CQUFvQixBQUFFLENBQUMsQUFDM0IsWUFBWSxDQUFFLEtBQUssQUFDdkIsQ0FBQyxBQUNPLE1BQU0sQUFBRSxDQUFDLEFBQ2IsV0FBVyxDQUFFLFVBQVUsQ0FDdkIsU0FBUyxDQUFFLEdBQUcsQUFDbEIsQ0FBQyxBQUNPLGFBQWEsQUFBRSxDQUFDLEFBQ3BCLE1BQU0sQ0FBRSxPQUFPLEFBQ25CLENBQUMsQUFDTyxJQUFJLEFBQUUsQ0FBQyxBQUNYLFVBQVUsQ0FBRSxNQUFNLEFBQ3RCLENBQUMifQ== */";
  (0, _internal.append_dev)(document.head, style);
}

function create_fragment(ctx) {
  var svg_1;
  var block = {
    c: function create() {
      svg_1 = (0, _internal.svg_element)("svg");
      (0, _internal.attr_dev)(svg_1, "height",
      /*height*/
      ctx[1]);
      (0, _internal.attr_dev)(svg_1, "width",
      /*width*/
      ctx[0]);
      (0, _internal.attr_dev)(svg_1, "class", "svelte-dje5r3");
      (0, _internal.add_location)(svg_1, file, 95, 0, 2285);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, _internal.insert_dev)(target, svg_1, anchor);
    },
    p: _internal.noop,
    i: _internal.noop,
    o: _internal.noop,
    d: function destroy(detaching) {
      if (detaching) (0, _internal.detach_dev)(svg_1);
    }
  };
  (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
    block: block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx: ctx
  });
  return block;
}

function instance($$self, $$props, $$invalidate) {
  var features;
  (0, _svelte.onMount)( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _d.tsv)(_countries50m2.default).then(function (tsvResult) {
              var countries = (0, _topojson.feature)(_countries50m.default, _countries50m.default.objects.countries);
              var rowById = tsvResult.reduce(function (acc, d) {
                acc[d.iso_n3] = d;
                return acc;
              }, {});
              countries.features.forEach(function (d) {
                Object.assign(d.properties, rowById[d.id]);
              });
              features = countries.features;
              render();
            });

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  var width = window.innerWidth,
      height = window.innerHeight;
  var svg;
  var colorScale = (0, _d.scaleOrdinal)();

  var colorValue = function colorValue(d) {
    return d.properties.economy;
  };

  var onFilter = function onFilter(d) {
    selectedValue = d;
    render();
  };

  var render = function render(tsvResult) {
    svg = (0, _d.select)("svg");
    var g = svg.append("g");
    var colorLegendG = svg.append("g");
    colorScale.domain(features.map(colorValue)).domain(colorScale.domain().sort()).range(_d.schemeSpectral[colorScale.domain().length]);
    svg.call(_choropletMap.choropletMap, {
      features: features,
      colorScale: colorScale,
      colorValue: colorValue,
      selectedValue: selectedValue
    });
    colorLegendG.call(_colorLegend.colorLegend, {
      colorScale: colorScale,
      circleRadius: 8,
      spacing: 25,
      onFilter: onFilter,
      selectedValue: selectedValue
    });
  };

  var writable_props = [];
  Object_1.keys($$props).forEach(function (key) {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Index> was created with unknown prop '".concat(key, "'"));
  });
  var _$$props$$$slots = $$props.$$slots,
      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
      $$scope = $$props.$$scope;
  (0, _internal.validate_slots)("Index", $$slots, []);

  $$self.$capture_state = function () {
    return {
      select: _d.select,
      tsv: _d.tsv,
      linePath: _d.linePath,
      scaleOrdinal: _d.scaleOrdinal,
      schemeSpectral: _d.schemeSpectral,
      onMount: _svelte.onMount,
      feature: _topojson.feature,
      data: _countries50m.default,
      tsvData: _countries50m2.default,
      colorLegend: _colorLegend.colorLegend,
      choropletMap: _choropletMap.choropletMap,
      features: features,
      width: width,
      height: height,
      svg: svg,
      colorScale: colorScale,
      colorValue: colorValue,
      onFilter: onFilter,
      render: render,
      selectedValue: selectedValue
    };
  };

  $$self.$inject_state = function ($$props) {
    if ("features" in $$props) features = $$props.features;
    if ("svg" in $$props) svg = $$props.svg;
    if ("selectedValue" in $$props) selectedValue = $$props.selectedValue;
  };

  var selectedValue;

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  $: selectedValue = null;

  return [width, height];
}

var Index = /*#__PURE__*/function (_SvelteComponentDev) {
  (0, _inherits2.default)(Index, _SvelteComponentDev);

  var _super = _createSuper(Index);

  function Index(options) {
    var _this;

    (0, _classCallCheck2.default)(this, Index);
    _this = _super.call(this, options);
    if (!document.getElementById("svelte-dje5r3-style")) add_css();
    (0, _internal.init)((0, _assertThisInitialized2.default)(_this), options, instance, create_fragment, _internal.safe_not_equal, {});
    (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
      component: (0, _assertThisInitialized2.default)(_this),
      tagName: "Index",
      options: options,
      id: create_fragment.name
    });
    return _this;
  }

  return Index;
}(_internal.SvelteComponentDev);

var _default = Index;
exports.default = _default;
},{"@babel/runtime/helpers/classCallCheck":"node_modules/@babel/runtime/helpers/classCallCheck.js","@babel/runtime/helpers/assertThisInitialized":"node_modules/@babel/runtime/helpers/assertThisInitialized.js","@babel/runtime/helpers/possibleConstructorReturn":"node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","@babel/runtime/helpers/getPrototypeOf":"node_modules/@babel/runtime/helpers/getPrototypeOf.js","@babel/runtime/helpers/inherits":"node_modules/@babel/runtime/helpers/inherits.js","@babel/runtime/regenerator":"node_modules/@babel/runtime/regenerator/index.js","@babel/runtime/helpers/asyncToGenerator":"node_modules/@babel/runtime/helpers/asyncToGenerator.js","svelte/internal":"node_modules/svelte/internal/index.mjs","d3":"node_modules/d3/index.js","svelte":"node_modules/svelte/index.mjs","topojson":"node_modules/topojson/index.js","../../static/data/countries50m.json":"static/data/countries50m.json","../../static/data/countries50m.tsv":"static/data/countries50m.tsv","./colorLegend.js":"src/ColorLegend/colorLegend.js","./choropletMap":"src/ColorLegend/choropletMap.js","_css_loader":"node_modules/parcel-bundler/src/builtins/css-loader.js"}],"src/App.svelte":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _internal = require("svelte/internal");

var _ColorLegend = _interopRequireDefault(require("./ColorLegend"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var file = "src/App.svelte";

function create_fragment(ctx) {
  var current;
  var component = new _ColorLegend.default({
    $$inline: true
  });
  var block = {
    c: function create() {
      (0, _internal.create_component)(component.$$.fragment);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, _internal.mount_component)(component, target, anchor);
      current = true;
    },
    p: _internal.noop,
    i: function intro(local) {
      if (current) return;
      (0, _internal.transition_in)(component.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, _internal.transition_out)(component.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, _internal.destroy_component)(component, detaching);
    }
  };
  (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
    block: block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx: ctx
  });
  return block;
}

function instance($$self, $$props, $$invalidate) {
  var writable_props = [];
  Object.keys($$props).forEach(function (key) {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<App> was created with unknown prop '".concat(key, "'"));
  });
  var _$$props$$$slots = $$props.$$slots,
      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
      $$scope = $$props.$$scope;
  (0, _internal.validate_slots)("App", $$slots, []);

  $$self.$capture_state = function () {
    return {
      Component: _ColorLegend.default
    };
  };

  return [];
}

var App = /*#__PURE__*/function (_SvelteComponentDev) {
  (0, _inherits2.default)(App, _SvelteComponentDev);

  var _super = _createSuper(App);

  function App(options) {
    var _this;

    (0, _classCallCheck2.default)(this, App);
    _this = _super.call(this, options);
    (0, _internal.init)((0, _assertThisInitialized2.default)(_this), options, instance, create_fragment, _internal.safe_not_equal, {});
    (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
      component: (0, _assertThisInitialized2.default)(_this),
      tagName: "App",
      options: options,
      id: create_fragment.name
    });
    return _this;
  }

  return App;
}(_internal.SvelteComponentDev);

var _default = App;
exports.default = _default;
},{"@babel/runtime/helpers/classCallCheck":"node_modules/@babel/runtime/helpers/classCallCheck.js","@babel/runtime/helpers/assertThisInitialized":"node_modules/@babel/runtime/helpers/assertThisInitialized.js","@babel/runtime/helpers/possibleConstructorReturn":"node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","@babel/runtime/helpers/getPrototypeOf":"node_modules/@babel/runtime/helpers/getPrototypeOf.js","@babel/runtime/helpers/inherits":"node_modules/@babel/runtime/helpers/inherits.js","svelte/internal":"node_modules/svelte/internal/index.mjs","./ColorLegend":"src/ColorLegend/index.svelte"}],"src/index.js":[function(require,module,exports) {
"use strict";

require("./globalStyle.css");

var _App = _interopRequireDefault(require("./App.svelte"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var app = new _App.default({
  target: document.body,
  props: {
    // we'll learn about props later
    answer: 42
  }
});
},{"./globalStyle.css":"src/globalStyle.css","./App.svelte":"src/App.svelte"}],"node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "49585" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["node_modules/parcel-bundler/src/builtins/hmr-runtime.js","src/index.js"], null)